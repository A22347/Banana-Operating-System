
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 50 7b 00 00       	call   c0007b70 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 43 02 c0       	mov    eax,0xc00243c4
c0000025:	3d c4 43 02 c0       	cmp    eax,0xc00243c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 43 02 c0       	push   0xc00243c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 43 02 c0       	mov    eax,0xc00243c4
c0000051:	2d c4 43 02 c0       	sub    eax,0xc00243c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 43 02 c0       	push   0xc00243c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 1c 05 02 c0       	mov    ebx,0xc002051c
c0000097:	81 eb 18 05 02 c0    	sub    ebx,0xc0020518
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 18 05 02 c0       	mov    esi,0xc0020518
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 43 02 c0       	push   0xc00243c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 c4 43 02 c0       	push   0xc00243c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 63 57 01 00       	call   c0015a10 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 68 a4 00 00       	call   c000a72d <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 41 57 01 00       	call   c0015a10 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 4e 5c 01 00       	call   c0015f3c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 0d 63 01 00       	call   c0016604 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 63 13 01 00       	jmp    c00116e2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 05 02 c0 02 	test   BYTE PTR [edx-0x3ffdfae0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfae0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfae0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 05 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfae0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfae0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 10 6b 00 00       	call   c00079e8 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 55 6a 00 00       	call   c00079e8 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 3f 6a 00 00       	call   c00079e8 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 1b 6a 00 00       	call   c00079e8 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 24 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf9dc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 0a 7e 01 00       	jmp    c0019bac <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 34 7e 01 00       	jmp    c0019bec <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 55 7e 01 00       	jmp    c0019c2c <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 80 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf880]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 80 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf880]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba d8 2f 02 c0       	mov    edx,0xc0022fd8
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 3c 06 02 c0       	mov    edx,0xc002063c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 42 06 02 c0       	mov    eax,0xc0020642
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 00 07 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf900]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 4b 06 02 c0       	mov    eax,0xc002064b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 80 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf880]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 d0 06 02 c0       	mov    eax,0xc00206d0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb c0 06 02 c0       	mov    ebx,0xc00206c0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 b0 06 02 c0       	mov    eax,0xc00206b0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 52 06 02 c0       	mov    edx,0xc0020652
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 5e 06 02 c0       	mov    edx,0xc002065e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 72 06 02 c0       	mov    edx,0xc0020672
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 e7 1e 00 00       	call   c0007b16 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 df 1e 00 00       	call   c0007b26 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c a0 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020aa0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 a0 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020aa0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 a0 08 02 c0       	mov    eax,0xc00208a0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 e0 07 02 c0       	mov    eax,0xc00207e0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 a0 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf860]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 a0 0b 02 c0       	push   0xc0020ba0
c000611b:	e8 28 44 01 00       	call   c001a548 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ae 0b 02 c0       	push   0xc0020bae
c0006153:	e8 f0 43 01 00       	call   c001a548 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 59 43 01 00       	call   c001a4ec <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 bd 0b 02 c0       	push   0xc0020bbd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 c0 0b 02 c0       	push   0xc0020bc0
c0006812:	e8 31 3d 01 00       	call   c001a548 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 45 3d 01 00       	call   c001a564 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 c5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc5
c000682c:	e8 17 3d 01 00       	call   c001a548 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 27 3d 01 00       	call   c001a564 <iso_kprintfd>
c000683d:	c7 04 24 cb 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bcb
c0006844:	e8 ff 3c 01 00       	call   c001a548 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 0f 3d 01 00       	call   c001a564 <iso_kprintfd>
c0006855:	c7 04 24 d1 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bd1
c000685c:	e8 e7 3c 01 00       	call   c001a548 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 f7 3c 01 00       	call   c001a564 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 bd 0b 02 c0       	push   0xc0020bbd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 da 0b 02 c0       	push   0xc0020bda
c0006a31:	e8 12 3b 01 00       	call   c001a548 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 e5 0b 02 c0       	push   0xc0020be5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ec 0b 02 c0       	push   0xc0020bec
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 f3 0b 02 c0       	push   0xc0020bf3
c0006b48:	e8 fb 39 01 00       	call   c001a548 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 fe 0b 02 c0       	push   0xc0020bfe
c0006b63:	e8 e0 39 01 00       	call   c001a548 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 84 0f 00 00       	call   c0007b16 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 73 0f 00 00       	call   c0007b16 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 5e 0f 00 00       	call   c0007b16 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 45 0f 00 00       	call   c0007b16 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 23 0f 00 00       	call   c0007b26 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 15 0f 00 00       	call   c0007b26 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 fb 0e 00 00       	call   c0007b26 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 e6 0e 00 00       	call   c0007b26 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	83 ec 0c             	sub    esp,0xc
c0006c70:	68 0f 0c 02 c0       	push   0xc0020c0f
c0006c75:	e8 2b 3d 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0006c7a:	e8 99 a2 00 00       	call   c0010f18 <KeExecuteAtexit()>
c0006c7f:	c7 04 24 1d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1d
c0006c86:	e8 1a 3d 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0006c8b:	58                   	pop    eax
c0006c8c:	8b 93 68 01 00 00    	mov    edx,DWORD PTR [ebx+0x168]
c0006c92:	52                   	push   edx
c0006c93:	e8 ac 5e 00 00       	call   c000cb44 <Device::closeAll()>
c0006c98:	fa                   	cli    
c0006c99:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0006c9f:	c7 04 24 2a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c2a
c0006ca6:	83 c1 01             	add    ecx,0x1
c0006ca9:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0006caf:	e8 f1 3c 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0006cb4:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006cba:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cbc:	57                   	push   edi
c0006cbd:	68 0f 27 00 00       	push   0x270f
c0006cc2:	56                   	push   esi
c0006cc3:	50                   	push   eax
c0006cc4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006cc7:	83 c4 14             	add    esp,0x14
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	57                   	push   edi
c0006ccd:	68 0f 27 00 00       	push   0x270f
c0006cd2:	56                   	push   esi
c0006cd3:	50                   	push   eax
c0006cd4:	68 64 0d 02 c0       	push   0xc0020d64
c0006cd9:	e8 c7 3c 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0006cde:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0006ce3:	83 c4 20             	add    esp,0x20
c0006ce6:	8d 50 ff             	lea    edx,[eax-0x1]
c0006ce9:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0006cef:	85 d2                	test   edx,edx
c0006cf1:	75 01                	jne    c0006cf4 <Computer::close(int, int, void*)+0x96>
c0006cf3:	fb                   	sti    
c0006cf4:	83 ec 0c             	sub    esp,0xc
c0006cf7:	68 39 0c 02 c0       	push   0xc0020c39
c0006cfc:	e8 f6 a9 00 00       	call   c00116f7 <KePanic(char const*)>
c0006d01:	83 c4 10             	add    esp,0x10
c0006d04:	89 d8                	mov    eax,ebx
c0006d06:	5b                   	pop    ebx
c0006d07:	5e                   	pop    esi
c0006d08:	5f                   	pop    edi
c0006d09:	c3                   	ret    

c0006d0a <Krnl::firstTask()>:
c0006d0a:	53                   	push   ebx
c0006d0b:	83 ec 14             	sub    esp,0x14
c0006d0e:	fb                   	sti    
c0006d0f:	68 4f 0c 02 c0       	push   0xc0020c4f
c0006d14:	e8 de a2 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0006d19:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006d20:	e8 f1 0d 00 00       	call   c0007b16 <malloc>
c0006d25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006d2c:	89 c3                	mov    ebx,eax
c0006d2e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006d33:	50                   	push   eax
c0006d34:	68 68 0c 02 c0       	push   0xc0020c68
c0006d39:	6a 01                	push   0x1
c0006d3b:	53                   	push   ebx
c0006d3c:	e8 27 f0 00 00       	call   c0015d68 <Process::Process(bool, char const*, Process*, char**)>
c0006d41:	83 c4 20             	add    esp,0x20
c0006d44:	68 ff 00 00 00       	push   0xff
c0006d49:	6a 00                	push   0x0
c0006d4b:	68 5f 75 00 c0       	push   0xc000755f
c0006d50:	53                   	push   ebx
c0006d51:	e8 36 f2 00 00       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c0006d56:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d5c:	6a 7a                	push   0x7a
c0006d5e:	6a 00                	push   0x0
c0006d60:	68 74 6a 01 c0       	push   0xc0016a74
c0006d65:	52                   	push   edx
c0006d66:	e8 21 f2 00 00       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c0006d6b:	83 c4 14             	add    esp,0x14
c0006d6e:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d73:	68 8c 0d 02 c0       	push   0xc0020d8c
c0006d78:	e8 7a a2 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0006d7d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d84:	e8 27 ab 00 00       	call   c00118b0 <KeInitRand()>
c0006d89:	e8 09 01 01 00       	call   c0016e97 <Vm::initialise8086()>
c0006d8e:	e8 f7 4a 00 00       	call   c000b88a <Fs::initVFS()>
c0006d93:	c7 04 24 75 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c75
c0006d9a:	e8 58 a2 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0006d9f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006da4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006daa:	8b 10                	mov    edx,DWORD PTR [eax]
c0006dac:	6a 00                	push   0x0
c0006dae:	6a 00                	push   0x0
c0006db0:	6a 00                	push   0x0
c0006db2:	50                   	push   eax
c0006db3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006db6:	83 c4 14             	add    esp,0x14
c0006db9:	68 8c 0d 02 c0       	push   0xc0020d8c
c0006dbe:	e8 34 a2 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0006dc3:	e8 5c 42 00 00       	call   c000b024 <KeInitialiseSymlinks()>
c0006dc8:	e8 8d a7 00 00       	call   c001155a <KeLoadSystemEnv()>
c0006dcd:	e8 ea a9 00 00       	call   c00117bc <KeSetupPowerManager()>
c0006dd2:	83 c4 0c             	add    esp,0xc
c0006dd5:	6a 3a                	push   0x3a
c0006dd7:	68 8f 0c 02 c0       	push   0xc0020c8f
c0006ddc:	68 98 0c 02 c0       	push   0xc0020c98
c0006de1:	e8 5a d1 00 00       	call   c0013f40 <Reg::readIntWithDefault(char*, char*, int)>
c0006de6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006de9:	e8 b6 56 00 00       	call   c000c4a4 <User::loadClockSettings(int)>
c0006dee:	c7 04 24 b0 0d 02 c0 	mov    DWORD PTR [esp],0xc0020db0
c0006df5:	e8 fd a1 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0006dfa:	59                   	pop    ecx
c0006dfb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006e00:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006e06:	53                   	push   ebx
c0006e07:	e8 36 5d 00 00       	call   c000cb42 <Device::loadDriversForAll()>
c0006e0c:	c7 04 24 a0 0c 02 c0 	mov    DWORD PTR [esp],0xc0020ca0
c0006e13:	e8 df a1 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0006e18:	58                   	pop    eax
c0006e19:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006e1f:	5a                   	pop    edx
c0006e20:	6a 01                	push   0x1
c0006e22:	68 b1 0c 02 c0       	push   0xc0020cb1
c0006e27:	e8 51 e9 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c0006e2c:	59                   	pop    ecx
c0006e2d:	5a                   	pop    edx
c0006e2e:	53                   	push   ebx
c0006e2f:	50                   	push   eax
c0006e30:	e8 79 eb 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c0006e35:	83 c4 10             	add    esp,0x10
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	6a 02                	push   0x2
c0006e3d:	e8 ae f5 00 00       	call   c00163f0 <blockTask(TaskState)>
c0006e42:	83 c4 10             	add    esp,0x10
c0006e45:	eb f1                	jmp    c0006e38 <Krnl::firstTask()+0x12e>
c0006e47:	90                   	nop

c0006e48 <Computer::Computer()>:
c0006e48:	83 ec 0c             	sub    esp,0xc
c0006e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4f:	83 ec 08             	sub    esp,0x8
c0006e52:	68 cd 0c 02 c0       	push   0xc0020ccd
c0006e57:	50                   	push   eax
c0006e58:	e8 61 5d 00 00       	call   c000cbbe <Device::Device(char const*)>
c0006e5d:	83 c4 10             	add    esp,0x10
c0006e60:	ba fc 0d 02 c0       	mov    edx,0xc0020dfc
c0006e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e69:	89 10                	mov    DWORD PTR [eax],edx
c0006e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e91:	83 ca 04             	or     edx,0x4
c0006e94:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ea4:	0f b6 d0             	movzx  edx,al
c0006ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eab:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ebc:	0f b6 d0             	movzx  edx,al
c0006ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ec3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ecc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ed2:	8d 50 01             	lea    edx,[eax+0x1]
c0006ed5:	88 d1                	mov    cl,dl
c0006ed7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006edb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ee1:	0f b6 d0             	movzx  edx,al
c0006ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ee8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eec:	83 e1 3f             	and    ecx,0x3f
c0006eef:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ef3:	90                   	nop
c0006ef4:	83 c4 0c             	add    esp,0xc
c0006ef7:	c3                   	ret    

c0006ef8 <Computer::setBootMessage(char const*)>:
c0006ef8:	c3                   	ret    
c0006ef9:	90                   	nop

c0006efa <Computer::detectFeatures()>:
c0006efa:	55                   	push   ebp
c0006efb:	57                   	push   edi
c0006efc:	56                   	push   esi
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 1c             	sub    esp,0x1c
c0006f01:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f05:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006f0b:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006f11:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006f17:	e8 dd 92 ff ff       	call   c00001f9 <detectCPUID>
c0006f1c:	31 d2                	xor    edx,edx
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f26:	0f 95 c2             	setne  dl
c0006f29:	83 e0 fd             	and    eax,0xfffffffd
c0006f2c:	d1 e2                	shl    edx,1
c0006f2e:	09 d0                	or     eax,edx
c0006f30:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f36:	a8 02                	test   al,0x2
c0006f38:	75 51                	jne    c0006f8b <Computer::detectFeatures()+0x91>
c0006f3a:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f41:	74 0f                	je     c0006f52 <Computer::detectFeatures()+0x58>
c0006f43:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f49:	83 e0 fb             	and    eax,0xfffffffb
c0006f4c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f52:	e8 bf 85 01 00       	call   c001f516 <x87Detect>
c0006f57:	83 e0 01             	and    eax,0x1
c0006f5a:	c1 e0 04             	shl    eax,0x4
c0006f5d:	89 c2                	mov    edx,eax
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 ef             	and    eax,0xffffffef
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	88 c2                	mov    dl,al
c0006f72:	a8 10                	test   al,0x10
c0006f74:	0f 85 33 01 00 00    	jne    c00070ad <Computer::detectFeatures()+0x1b3>
c0006f7a:	80 e2 80             	and    dl,0x80
c0006f7d:	0f 85 4c 01 00 00    	jne    c00070cf <Computer::detectFeatures()+0x1d5>
c0006f83:	83 c4 1c             	add    esp,0x1c
c0006f86:	5b                   	pop    ebx
c0006f87:	5e                   	pop    esi
c0006f88:	5f                   	pop    edi
c0006f89:	5d                   	pop    ebp
c0006f8a:	c3                   	ret    
c0006f8b:	83 ec 0c             	sub    esp,0xc
c0006f8e:	6a 20                	push   0x20
c0006f90:	e8 9b 94 00 00       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c0006f95:	83 e0 01             	and    eax,0x1
c0006f98:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f9f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa5:	83 e0 f7             	and    eax,0xfffffff7
c0006fa8:	09 d0                	or     eax,edx
c0006faa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fb0:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006fb7:	e8 74 94 00 00       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c0006fbc:	89 c2                	mov    edx,eax
c0006fbe:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fc4:	83 e2 01             	and    edx,0x1
c0006fc7:	83 e0 fe             	and    eax,0xfffffffe
c0006fca:	09 d0                	or     eax,edx
c0006fcc:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fd2:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006fd9:	e8 52 94 00 00       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c0006fde:	89 c2                	mov    edx,eax
c0006fe0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fe6:	c1 e2 07             	shl    edx,0x7
c0006fe9:	83 e0 7f             	and    eax,0x7f
c0006fec:	09 d0                	or     eax,edx
c0006fee:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ff4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006ffb:	e8 30 94 00 00       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c0007000:	83 c4 10             	add    esp,0x10
c0007003:	83 e0 01             	and    eax,0x1
c0007006:	c1 e0 05             	shl    eax,0x5
c0007009:	89 c2                	mov    edx,eax
c000700b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007011:	83 e0 df             	and    eax,0xffffffdf
c0007014:	09 d0                	or     eax,edx
c0007016:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0007020:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007026:	0f 84 c9 00 00 00    	je     c00070f5 <Computer::detectFeatures()+0x1fb>
c000702c:	83 e0 fe             	and    eax,0xfffffffe
c000702f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007035:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000703b:	89 c2                	mov    edx,eax
c000703d:	83 e2 09             	and    edx,0x9
c0007040:	83 fa 01             	cmp    edx,0x1
c0007043:	75 09                	jne    c000704e <Computer::detectFeatures()+0x154>
c0007045:	83 e0 fe             	and    eax,0xfffffffe
c0007048:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000704e:	83 ec 0c             	sub    esp,0xc
c0007051:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007055:	50                   	push   eax
c0007056:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000705a:	55                   	push   ebp
c000705b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000705f:	57                   	push   edi
c0007060:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007064:	56                   	push   esi
c0007065:	68 00 00 00 80       	push   0x80000000
c000706a:	e8 3d 93 00 00       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000706f:	83 c4 20             	add    esp,0x20
c0007072:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007079:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000707d:	0f 86 b7 fe ff ff    	jbe    c0006f3a <Computer::detectFeatures()+0x40>
c0007083:	83 ec 0c             	sub    esp,0xc
c0007086:	50                   	push   eax
c0007087:	55                   	push   ebp
c0007088:	57                   	push   edi
c0007089:	56                   	push   esi
c000708a:	68 01 00 00 80       	push   0x80000001
c000708f:	e8 18 93 00 00       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007094:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000709a:	83 c4 20             	add    esp,0x20
c000709d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c00070a2:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00070a8:	e9 8d fe ff ff       	jmp    c0006f3a <Computer::detectFeatures()+0x40>
c00070ad:	e8 1e 84 01 00       	call   c001f4d0 <absolutelyNoChanceInHell>
c00070b2:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c00070b8:	c1 e0 07             	shl    eax,0x7
c00070bb:	83 e2 7f             	and    edx,0x7f
c00070be:	09 c2                	or     edx,eax
c00070c0:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c00070c6:	80 e2 80             	and    dl,0x80
c00070c9:	0f 84 b4 fe ff ff    	je     c0006f83 <Computer::detectFeatures()+0x89>
c00070cf:	e8 6c 80 01 00       	call   c001f140 <avxDetect>
c00070d4:	83 e0 01             	and    eax,0x1
c00070d7:	c1 e0 05             	shl    eax,0x5
c00070da:	89 c2                	mov    edx,eax
c00070dc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070e2:	83 e0 df             	and    eax,0xffffffdf
c00070e5:	09 d0                	or     eax,edx
c00070e7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ed:	83 c4 1c             	add    esp,0x1c
c00070f0:	5b                   	pop    ebx
c00070f1:	5e                   	pop    esi
c00070f2:	5f                   	pop    edi
c00070f3:	5d                   	pop    ebp
c00070f4:	c3                   	ret    
c00070f5:	83 ec 0c             	sub    esp,0xc
c00070f8:	68 00 02 00 00       	push   0x200
c00070fd:	e8 2e 93 00 00       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c0007102:	83 c4 10             	add    esp,0x10
c0007105:	89 c2                	mov    edx,eax
c0007107:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000710d:	83 e2 01             	and    edx,0x1
c0007110:	83 e0 fe             	and    eax,0xfffffffe
c0007113:	09 d0                	or     eax,edx
c0007115:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000711b:	e9 15 ff ff ff       	jmp    c0007035 <Computer::detectFeatures()+0x13b>

c0007120 <Computer::displayFeatures()>:
c0007120:	c3                   	ret    
c0007121:	90                   	nop

c0007122 <Computer::rdmsr(unsigned int)>:
c0007122:	83 ec 0c             	sub    esp,0xc
c0007125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007129:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007130:	74 0a                	je     c000713c <Computer::rdmsr(unsigned int)+0x1a>
c0007132:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007136:	0f 32                	rdmsr  
c0007138:	83 c4 0c             	add    esp,0xc
c000713b:	c3                   	ret    
c000713c:	83 ec 0c             	sub    esp,0xc
c000713f:	68 d6 0c 02 c0       	push   0xc0020cd6
c0007144:	e8 ae a5 00 00       	call   c00116f7 <KePanic(char const*)>
c0007149:	83 c4 10             	add    esp,0x10
c000714c:	eb e4                	jmp    c0007132 <Computer::rdmsr(unsigned int)+0x10>

c000714e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000714e:	57                   	push   edi
c000714f:	56                   	push   esi
c0007150:	83 ec 04             	sub    esp,0x4
c0007153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007157:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000715b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000715f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007166:	74 10                	je     c0007178 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007168:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000716c:	89 f0                	mov    eax,esi
c000716e:	89 fa                	mov    edx,edi
c0007170:	0f 30                	wrmsr  
c0007172:	83 c4 04             	add    esp,0x4
c0007175:	5e                   	pop    esi
c0007176:	5f                   	pop    edi
c0007177:	c3                   	ret    
c0007178:	83 ec 0c             	sub    esp,0xc
c000717b:	68 dc 0c 02 c0       	push   0xc0020cdc
c0007180:	e8 72 a5 00 00       	call   c00116f7 <KePanic(char const*)>
c0007185:	83 c4 10             	add    esp,0x10
c0007188:	eb de                	jmp    c0007168 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000718a <Computer::shutdown()>:
c000718a:	83 ec 0c             	sub    esp,0xc
c000718d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007191:	8b 10                	mov    edx,DWORD PTR [eax]
c0007193:	6a 00                	push   0x0
c0007195:	6a 00                	push   0x0
c0007197:	6a 00                	push   0x0
c0007199:	50                   	push   eax
c000719a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000719d:	83 c4 1c             	add    esp,0x1c
c00071a0:	c3                   	ret    
c00071a1:	90                   	nop

c00071a2 <Computer::restart()>:
c00071a2:	83 ec 0c             	sub    esp,0xc
c00071a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00071ab:	6a 00                	push   0x0
c00071ad:	6a 00                	push   0x0
c00071af:	6a 01                	push   0x1
c00071b1:	50                   	push   eax
c00071b2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00071b5:	83 c4 1c             	add    esp,0x1c
c00071b8:	c3                   	ret    
c00071b9:	90                   	nop

c00071ba <Computer::sleep()>:
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00071c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00071c8:	e9 7b 8c 00 00       	jmp    c000fe48 <ACPI::sleep()>
c00071cd:	90                   	nop

c00071ce <Computer::nmiEnabled()>:
c00071ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071d2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00071d8:	c3                   	ret    
c00071d9:	90                   	nop

c00071da <Computer::readCMOS(unsigned char)>:
c00071da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00071de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071e2:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c00071e9:	75 09                	jne    c00071f4 <Computer::readCMOS(unsigned char)+0x1a>
c00071eb:	b2 80                	mov    dl,0x80
c00071ed:	09 d0                	or     eax,edx
c00071ef:	e6 70                	out    0x70,al
c00071f1:	e4 71                	in     al,0x71
c00071f3:	c3                   	ret    
c00071f4:	31 d2                	xor    edx,edx
c00071f6:	eb f5                	jmp    c00071ed <Computer::readCMOS(unsigned char)+0x13>

c00071f8 <Computer::enableNMI(bool)>:
c00071f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00071fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007200:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007206:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000720e:	eb ca                	jmp    c00071da <Computer::readCMOS(unsigned char)>

c0007210 <Computer::open(int, int, void*)>:
c0007210:	56                   	push   esi
c0007211:	53                   	push   ebx
c0007212:	83 ec 10             	sub    esp,0x10
c0007215:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007219:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c0007220:	68 e2 0c 02 c0       	push   0xc0020ce2
c0007225:	0f 94 05 20 38 02 c0 	sete   BYTE PTR ds:0xc0023820
c000722c:	e8 c6 9d 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0007231:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007238:	e8 d9 08 00 00       	call   c0007b16 <malloc>
c000723d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007240:	89 c6                	mov    esi,eax
c0007242:	e8 75 87 00 00       	call   c000f9bc <ACPI::ACPI()>
c0007247:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000724d:	58                   	pop    eax
c000724e:	5a                   	pop    edx
c000724f:	56                   	push   esi
c0007250:	53                   	push   ebx
c0007251:	e8 d0 57 00 00       	call   c000ca26 <Device::addChild(Device*)>
c0007256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007259:	e8 9c fc ff ff       	call   c0006efa <Computer::detectFeatures()>
c000725e:	59                   	pop    ecx
c000725f:	5e                   	pop    esi
c0007260:	6a 01                	push   0x1
c0007262:	53                   	push   ebx
c0007263:	e8 90 ff ff ff       	call   c00071f8 <Computer::enableNMI(bool)>
c0007268:	c7 04 24 fa 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cfa
c000726f:	e8 83 9d 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0007274:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000727b:	e8 96 08 00 00       	call   c0007b16 <malloc>
c0007280:	89 04 24             	mov    DWORD PTR [esp],eax
c0007283:	89 c6                	mov    esi,eax
c0007285:	e8 5e 92 00 00       	call   c00104e8 <CPU::CPU()>
c000728a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007290:	58                   	pop    eax
c0007291:	5a                   	pop    edx
c0007292:	56                   	push   esi
c0007293:	53                   	push   ebx
c0007294:	e8 8d 57 00 00       	call   c000ca26 <Device::addChild(Device*)>
c0007299:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000729f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00072a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00072a5:	51                   	push   ecx
c00072a6:	6a 00                	push   0x0
c00072a8:	6a 00                	push   0x0
c00072aa:	50                   	push   eax
c00072ab:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00072ae:	83 c4 14             	add    esp,0x14
c00072b1:	68 d0 0d 02 c0       	push   0xc0020dd0
c00072b6:	e8 3c 9d 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c00072bb:	e8 14 0e 01 00       	call   c00180d4 <HalInitialiseCoprocessor()>
c00072c0:	c7 04 24 14 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d14
c00072c7:	e8 2b 9d 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c00072cc:	c7 04 24 0a 6d 00 c0 	mov    DWORD PTR [esp],0xc0006d0a
c00072d3:	e8 e0 ed 00 00       	call   c00160b8 <setupMultitasking(void (*)())>
c00072d8:	83 c4 14             	add    esp,0x14
c00072db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072e0:	5b                   	pop    ebx
c00072e1:	5e                   	pop    esi
c00072e2:	c3                   	ret    
c00072e3:	90                   	nop

c00072e4 <Computer::disableNMI()>:
c00072e4:	6a 00                	push   0x0
c00072e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ea:	50                   	push   eax
c00072eb:	e8 08 ff ff ff       	call   c00071f8 <Computer::enableNMI(bool)>
c00072f0:	5a                   	pop    edx
c00072f1:	59                   	pop    ecx
c00072f2:	c3                   	ret    
c00072f3:	90                   	nop

c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00072f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007300:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0007307:	75 0b                	jne    c0007314 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0007309:	b1 80                	mov    cl,0x80
c000730b:	09 c8                	or     eax,ecx
c000730d:	e6 70                	out    0x70,al
c000730f:	88 d0                	mov    al,dl
c0007311:	e6 71                	out    0x71,al
c0007313:	c3                   	ret    
c0007314:	31 c9                	xor    ecx,ecx
c0007316:	eb f3                	jmp    c000730b <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0007318 <Computer::handleNMI()>:
c0007318:	56                   	push   esi
c0007319:	53                   	push   ebx
c000731a:	83 ec 10             	sub    esp,0x10
c000731d:	e4 92                	in     al,0x92
c000731f:	89 c6                	mov    esi,eax
c0007321:	e4 61                	in     al,0x61
c0007323:	68 2f 0d 02 c0       	push   0xc0020d2f
c0007328:	88 c3                	mov    bl,al
c000732a:	e8 76 36 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000732f:	83 c4 10             	add    esp,0x10
c0007332:	83 e6 10             	and    esi,0x10
c0007335:	75 10                	jne    c0007347 <Computer::handleNMI()+0x2f>
c0007337:	f6 c3 40             	test   bl,0x40
c000733a:	75 20                	jne    c000735c <Computer::handleNMI()+0x44>
c000733c:	80 e3 80             	and    bl,0x80
c000733f:	75 30                	jne    c0007371 <Computer::handleNMI()+0x59>
c0007341:	83 c4 04             	add    esp,0x4
c0007344:	5b                   	pop    ebx
c0007345:	5e                   	pop    esi
c0007346:	c3                   	ret    
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 40 0d 02 c0       	push   0xc0020d40
c000734f:	e8 a3 a3 00 00       	call   c00116f7 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	f6 c3 40             	test   bl,0x40
c000735a:	74 e0                	je     c000733c <Computer::handleNMI()+0x24>
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	68 4d 0d 02 c0       	push   0xc0020d4d
c0007364:	e8 8e a3 00 00       	call   c00116f7 <KePanic(char const*)>
c0007369:	83 c4 10             	add    esp,0x10
c000736c:	80 e3 80             	and    bl,0x80
c000736f:	74 d0                	je     c0007341 <Computer::handleNMI()+0x29>
c0007371:	c7 44 24 10 57 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d57
c0007379:	83 c4 04             	add    esp,0x4
c000737c:	5b                   	pop    ebx
c000737d:	5e                   	pop    esi
c000737e:	e9 74 a3 00 00       	jmp    c00116f7 <KePanic(char const*)>
c0007383:	90                   	nop

c0007384 <GDTEntry::setBase(unsigned int)>:
c0007384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007388:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000738c:	89 c1                	mov    ecx,eax
c000738e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007392:	c1 e9 10             	shr    ecx,0x10
c0007395:	c1 e8 18             	shr    eax,0x18
c0007398:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000739b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000739e:	c3                   	ret    
c000739f:	90                   	nop

c00073a0 <GDTEntry::setLimit(unsigned int)>:
c00073a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00073a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00073ab:	66 89 01             	mov    WORD PTR [ecx],ax
c00073ae:	83 e2 f0             	and    edx,0xfffffff0
c00073b1:	c1 e8 10             	shr    eax,0x10
c00073b4:	83 e0 0f             	and    eax,0xf
c00073b7:	09 d0                	or     eax,edx
c00073b9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00073bc:	c3                   	ret    
c00073bd:	90                   	nop

c00073be <GDT::GDT()>:
c00073be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073d2:	90                   	nop
c00073d3:	c3                   	ret    

c00073d4 <GDT::addEntry(GDTEntry)>:
c00073d4:	53                   	push   ebx
c00073d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00073df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073e3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073e7:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073eb:	8d 48 01             	lea    ecx,[eax+0x1]
c00073ee:	c1 e0 03             	shl    eax,0x3
c00073f1:	89 0a                	mov    DWORD PTR [edx],ecx
c00073f3:	5b                   	pop    ebx
c00073f4:	c3                   	ret    
c00073f5:	90                   	nop

c00073f6 <GDT::getNumberOfEntries()>:
c00073f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00073fc:	c3                   	ret    
c00073fd:	90                   	nop

c00073fe <GDT::flush()>:
c00073fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007402:	8b 10                	mov    edx,DWORD PTR [eax]
c0007404:	83 c0 04             	add    eax,0x4
c0007407:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000740e:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c0007413:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c000741a:	e9 3b 8f ff ff       	jmp    c000035a <loadGDT>
c000741f:	90                   	nop

c0007420 <GDT::setup()>:
c0007420:	57                   	push   edi
c0007421:	56                   	push   esi
c0007422:	53                   	push   ebx
c0007423:	83 ec 30             	sub    esp,0x30
c0007426:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000742a:	6a 00                	push   0x0
c000742c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007430:	56                   	push   esi
c0007431:	e8 4e ff ff ff       	call   c0007384 <GDTEntry::setBase(unsigned int)>
c0007436:	6a 00                	push   0x0
c0007438:	56                   	push   esi
c0007439:	e8 62 ff ff ff       	call   c00073a0 <GDTEntry::setLimit(unsigned int)>
c000743e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007446:	6a 00                	push   0x0
c0007448:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000744c:	56                   	push   esi
c000744d:	e8 32 ff ff ff       	call   c0007384 <GDTEntry::setBase(unsigned int)>
c0007452:	68 ff ff ff 00       	push   0xffffff
c0007457:	56                   	push   esi
c0007458:	e8 43 ff ff ff       	call   c00073a0 <GDTEntry::setLimit(unsigned int)>
c000745d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007461:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007465:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007469:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000746d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007472:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007477:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000747b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000747f:	89 f8                	mov    eax,edi
c0007481:	89 fa                	mov    edx,edi
c0007483:	80 e4 f7             	and    ah,0xf7
c0007486:	80 ce 60             	or     dh,0x60
c0007489:	89 c7                	mov    edi,eax
c000748b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000748f:	80 cc 60             	or     ah,0x60
c0007492:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007496:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000749a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000749e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074a6:	83 c4 20             	add    esp,0x20
c00074a9:	6a 00                	push   0x0
c00074ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00074af:	50                   	push   eax
c00074b0:	e8 cf fe ff ff       	call   c0007384 <GDTEntry::setBase(unsigned int)>
c00074b5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00074b9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00074bd:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00074c1:	83 e0 3f             	and    eax,0x3f
c00074c4:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00074c8:	6a 00                	push   0x0
c00074ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074ce:	50                   	push   eax
c00074cf:	e8 b0 fe ff ff       	call   c0007384 <GDTEntry::setBase(unsigned int)>
c00074d4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00074d8:	83 e0 3f             	and    eax,0x3f
c00074db:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074df:	83 c4 0c             	add    esp,0xc
c00074e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ea:	53                   	push   ebx
c00074eb:	e8 e4 fe ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c00074f0:	83 c4 0c             	add    esp,0xc
c00074f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074fb:	53                   	push   ebx
c00074fc:	e8 d3 fe ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c0007501:	83 c4 0c             	add    esp,0xc
c0007504:	57                   	push   edi
c0007505:	56                   	push   esi
c0007506:	53                   	push   ebx
c0007507:	e8 c8 fe ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c000750c:	83 c4 0c             	add    esp,0xc
c000750f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007513:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007517:	53                   	push   ebx
c0007518:	e8 b7 fe ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c000751d:	83 c4 0c             	add    esp,0xc
c0007520:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007524:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007528:	53                   	push   ebx
c0007529:	e8 a6 fe ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c000752e:	83 c4 0c             	add    esp,0xc
c0007531:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007535:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007539:	53                   	push   ebx
c000753a:	e8 95 fe ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c000753f:	83 c4 0c             	add    esp,0xc
c0007542:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007546:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000754a:	53                   	push   ebx
c000754b:	e8 84 fe ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c0007550:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007553:	e8 a6 fe ff ff       	call   c00073fe <GDT::flush()>
c0007558:	83 c4 40             	add    esp,0x40
c000755b:	5b                   	pop    ebx
c000755c:	5e                   	pop    esi
c000755d:	5f                   	pop    edi
c000755e:	c3                   	ret    

c000755f <idleFunction(void*)>:
c000755f:	83 ec 0c             	sub    esp,0xc
c0007562:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007567:	48                   	dec    eax
c0007568:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000756d:	75 01                	jne    c0007570 <idleFunction(void*)+0x11>
c000756f:	fb                   	sti    
c0007570:	e8 2b 08 01 00       	call   c0017da0 <HalSystemIdle()>
c0007575:	e8 58 85 01 00       	call   c001fad2 <idleCommon()>
c000757a:	eb f4                	jmp    c0007570 <idleFunction(void*)+0x11>

c000757c <IDTEntry::IDTEntry(bool)>:
c000757c:	53                   	push   ebx
c000757d:	83 ec 04             	sub    esp,0x4
c0007580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007584:	88 04 24             	mov    BYTE PTR [esp],al
c0007587:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007591:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007595:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a0:	83 e2 f0             	and    edx,0xfffffff0
c00075a3:	83 ca 0e             	or     edx,0xe
c00075a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075ad:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075b0:	83 e2 ef             	and    edx,0xffffffef
c00075b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00075ba:	85 c0                	test   eax,eax
c00075bc:	74 06                	je     c00075c4 <IDTEntry::IDTEntry(bool)+0x48>
c00075be:	b2 03                	mov    dl,0x3
c00075c0:	eb 06                	jmp    c00075c8 <IDTEntry::IDTEntry(bool)+0x4c>
c00075c2:	66 90                	xchg   ax,ax
c00075c4:	b2 00                	mov    dl,0x0
c00075c6:	66 90                	xchg   ax,ax
c00075c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075cc:	83 e2 03             	and    edx,0x3
c00075cf:	89 d3                	mov    ebx,edx
c00075d1:	c1 e3 05             	shl    ebx,0x5
c00075d4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075d7:	83 e2 9f             	and    edx,0xffffff9f
c00075da:	88 d1                	mov    cl,dl
c00075dc:	88 da                	mov    dl,bl
c00075de:	09 ca                	or     edx,ecx
c00075e0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075e7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075ea:	83 ca 80             	or     edx,0xffffff80
c00075ed:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075f0:	90                   	nop
c00075f1:	83 c4 04             	add    esp,0x4
c00075f4:	5b                   	pop    ebx
c00075f5:	c3                   	ret    

c00075f6 <IDTEntry::setOffset(unsigned int)>:
c00075f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075fe:	66 89 02             	mov    WORD PTR [edx],ax
c0007601:	c1 e8 10             	shr    eax,0x10
c0007604:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007608:	c3                   	ret    
c0007609:	90                   	nop
c000760a:	66 90                	xchg   ax,ax

c000760c <IDT::IDT()>:
c000760c:	90                   	nop
c000760d:	c3                   	ret    

c000760e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000760e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007612:	83 c0 30             	add    eax,0x30
c0007615:	c3                   	ret    

c0007616 <IDT::addEntry(IDTEntry, int)>:
c0007616:	53                   	push   ebx
c0007617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000761b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000761f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007623:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007627:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000762a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000762e:	5b                   	pop    ebx
c000762f:	c3                   	ret    

c0007630 <IDT::addEntry(int, void (*)(), bool)>:
c0007630:	53                   	push   ebx
c0007631:	83 ec 10             	sub    esp,0x10
c0007634:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007639:	50                   	push   eax
c000763a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000763e:	53                   	push   ebx
c000763f:	e8 38 ff ff ff       	call   c000757c <IDTEntry::IDTEntry(bool)>
c0007644:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007648:	53                   	push   ebx
c0007649:	e8 a8 ff ff ff       	call   c00075f6 <IDTEntry::setOffset(unsigned int)>
c000764e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007652:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007656:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000765a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000765e:	e8 b3 ff ff ff       	call   c0007616 <IDT::addEntry(IDTEntry, int)>
c0007663:	83 c4 30             	add    esp,0x30
c0007666:	5b                   	pop    ebx
c0007667:	c3                   	ret    

c0007668 <IDT::flush()>:
c0007668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000766c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007675:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000767a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007681:	c3                   	ret    

c0007682 <IDT::setup()>:
c0007682:	57                   	push   edi
c0007683:	56                   	push   esi
c0007684:	53                   	push   ebx
c0007685:	83 ec 10             	sub    esp,0x10
c0007688:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000768c:	6a 00                	push   0x0
c000768e:	68 d0 f1 01 c0       	push   0xc001f1d0
c0007693:	6a 00                	push   0x0
c0007695:	53                   	push   ebx
c0007696:	e8 95 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000769b:	6a 00                	push   0x0
c000769d:	68 e0 f1 01 c0       	push   0xc001f1e0
c00076a2:	6a 01                	push   0x1
c00076a4:	53                   	push   ebx
c00076a5:	e8 86 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00076aa:	83 c4 20             	add    esp,0x20
c00076ad:	6a 00                	push   0x0
c00076af:	68 ea f1 01 c0       	push   0xc001f1ea
c00076b4:	6a 02                	push   0x2
c00076b6:	53                   	push   ebx
c00076b7:	e8 74 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00076bc:	6a 00                	push   0x0
c00076be:	68 f4 f1 01 c0       	push   0xc001f1f4
c00076c3:	6a 03                	push   0x3
c00076c5:	53                   	push   ebx
c00076c6:	e8 65 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00076cb:	83 c4 20             	add    esp,0x20
c00076ce:	6a 00                	push   0x0
c00076d0:	68 fe f1 01 c0       	push   0xc001f1fe
c00076d5:	6a 04                	push   0x4
c00076d7:	53                   	push   ebx
c00076d8:	e8 53 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00076dd:	6a 00                	push   0x0
c00076df:	68 08 f2 01 c0       	push   0xc001f208
c00076e4:	6a 05                	push   0x5
c00076e6:	53                   	push   ebx
c00076e7:	e8 44 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00076ec:	83 c4 20             	add    esp,0x20
c00076ef:	6a 00                	push   0x0
c00076f1:	68 12 f2 01 c0       	push   0xc001f212
c00076f6:	6a 06                	push   0x6
c00076f8:	53                   	push   ebx
c00076f9:	e8 32 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00076fe:	6a 00                	push   0x0
c0007700:	68 1c f2 01 c0       	push   0xc001f21c
c0007705:	6a 07                	push   0x7
c0007707:	53                   	push   ebx
c0007708:	e8 23 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	6a 00                	push   0x0
c0007712:	68 26 f2 01 c0       	push   0xc001f226
c0007717:	6a 08                	push   0x8
c0007719:	53                   	push   ebx
c000771a:	e8 11 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000771f:	6a 00                	push   0x0
c0007721:	68 2e f2 01 c0       	push   0xc001f22e
c0007726:	6a 09                	push   0x9
c0007728:	53                   	push   ebx
c0007729:	e8 02 ff ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000772e:	83 c4 20             	add    esp,0x20
c0007731:	6a 00                	push   0x0
c0007733:	68 38 f2 01 c0       	push   0xc001f238
c0007738:	6a 0a                	push   0xa
c000773a:	53                   	push   ebx
c000773b:	e8 f0 fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007740:	6a 00                	push   0x0
c0007742:	68 40 f2 01 c0       	push   0xc001f240
c0007747:	6a 0b                	push   0xb
c0007749:	53                   	push   ebx
c000774a:	e8 e1 fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000774f:	83 c4 20             	add    esp,0x20
c0007752:	6a 00                	push   0x0
c0007754:	68 48 f2 01 c0       	push   0xc001f248
c0007759:	6a 0c                	push   0xc
c000775b:	53                   	push   ebx
c000775c:	e8 cf fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007761:	6a 00                	push   0x0
c0007763:	68 50 f2 01 c0       	push   0xc001f250
c0007768:	6a 0d                	push   0xd
c000776a:	53                   	push   ebx
c000776b:	e8 c0 fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007770:	83 c4 20             	add    esp,0x20
c0007773:	6a 00                	push   0x0
c0007775:	68 6a f2 01 c0       	push   0xc001f26a
c000777a:	6a 0e                	push   0xe
c000777c:	53                   	push   ebx
c000777d:	e8 ae fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007782:	6a 00                	push   0x0
c0007784:	68 72 f2 01 c0       	push   0xc001f272
c0007789:	6a 0f                	push   0xf
c000778b:	53                   	push   ebx
c000778c:	e8 9f fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007791:	83 c4 20             	add    esp,0x20
c0007794:	6a 00                	push   0x0
c0007796:	68 7c f2 01 c0       	push   0xc001f27c
c000779b:	6a 10                	push   0x10
c000779d:	53                   	push   ebx
c000779e:	e8 8d fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00077a3:	6a 00                	push   0x0
c00077a5:	68 86 f2 01 c0       	push   0xc001f286
c00077aa:	6a 11                	push   0x11
c00077ac:	53                   	push   ebx
c00077ad:	e8 7e fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00077b2:	83 c4 20             	add    esp,0x20
c00077b5:	6a 00                	push   0x0
c00077b7:	68 90 f2 01 c0       	push   0xc001f290
c00077bc:	6a 12                	push   0x12
c00077be:	53                   	push   ebx
c00077bf:	e8 6c fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00077c4:	6a 01                	push   0x1
c00077c6:	68 2a f3 01 c0       	push   0xc001f32a
c00077cb:	6a 60                	push   0x60
c00077cd:	53                   	push   ebx
c00077ce:	e8 5d fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00077d3:	83 c4 20             	add    esp,0x20
c00077d6:	6a 00                	push   0x0
c00077d8:	68 31 f3 01 c0       	push   0xc001f331
c00077dd:	6a 20                	push   0x20
c00077df:	53                   	push   ebx
c00077e0:	e8 4b fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00077e5:	6a 00                	push   0x0
c00077e7:	68 1c f3 01 c0       	push   0xc001f31c
c00077ec:	6a 21                	push   0x21
c00077ee:	53                   	push   ebx
c00077ef:	e8 3c fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00077f4:	83 c4 20             	add    esp,0x20
c00077f7:	6a 00                	push   0x0
c00077f9:	68 23 f3 01 c0       	push   0xc001f323
c00077fe:	6a 22                	push   0x22
c0007800:	53                   	push   ebx
c0007801:	e8 2a fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007806:	6a 00                	push   0x0
c0007808:	68 9a f2 01 c0       	push   0xc001f29a
c000780d:	6a 23                	push   0x23
c000780f:	53                   	push   ebx
c0007810:	e8 1b fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007815:	83 c4 20             	add    esp,0x20
c0007818:	6a 00                	push   0x0
c000781a:	68 a4 f2 01 c0       	push   0xc001f2a4
c000781f:	6a 24                	push   0x24
c0007821:	53                   	push   ebx
c0007822:	e8 09 fe ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007827:	6a 00                	push   0x0
c0007829:	68 ae f2 01 c0       	push   0xc001f2ae
c000782e:	6a 25                	push   0x25
c0007830:	53                   	push   ebx
c0007831:	e8 fa fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007836:	83 c4 20             	add    esp,0x20
c0007839:	6a 00                	push   0x0
c000783b:	68 b8 f2 01 c0       	push   0xc001f2b8
c0007840:	6a 26                	push   0x26
c0007842:	53                   	push   ebx
c0007843:	e8 e8 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007848:	6a 00                	push   0x0
c000784a:	68 c2 f2 01 c0       	push   0xc001f2c2
c000784f:	6a 27                	push   0x27
c0007851:	53                   	push   ebx
c0007852:	e8 d9 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007857:	83 c4 20             	add    esp,0x20
c000785a:	6a 00                	push   0x0
c000785c:	68 cc f2 01 c0       	push   0xc001f2cc
c0007861:	6a 28                	push   0x28
c0007863:	53                   	push   ebx
c0007864:	e8 c7 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007869:	6a 00                	push   0x0
c000786b:	68 d6 f2 01 c0       	push   0xc001f2d6
c0007870:	6a 29                	push   0x29
c0007872:	53                   	push   ebx
c0007873:	e8 b8 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007878:	83 c4 20             	add    esp,0x20
c000787b:	6a 00                	push   0x0
c000787d:	68 e0 f2 01 c0       	push   0xc001f2e0
c0007882:	6a 2a                	push   0x2a
c0007884:	53                   	push   ebx
c0007885:	e8 a6 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000788a:	6a 00                	push   0x0
c000788c:	68 ea f2 01 c0       	push   0xc001f2ea
c0007891:	6a 2b                	push   0x2b
c0007893:	53                   	push   ebx
c0007894:	e8 97 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007899:	83 c4 20             	add    esp,0x20
c000789c:	6a 00                	push   0x0
c000789e:	68 f4 f2 01 c0       	push   0xc001f2f4
c00078a3:	6a 2c                	push   0x2c
c00078a5:	53                   	push   ebx
c00078a6:	e8 85 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00078ab:	6a 00                	push   0x0
c00078ad:	68 fe f2 01 c0       	push   0xc001f2fe
c00078b2:	6a 2d                	push   0x2d
c00078b4:	53                   	push   ebx
c00078b5:	e8 76 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00078ba:	83 c4 20             	add    esp,0x20
c00078bd:	6a 00                	push   0x0
c00078bf:	68 08 f3 01 c0       	push   0xc001f308
c00078c4:	6a 2e                	push   0x2e
c00078c6:	53                   	push   ebx
c00078c7:	e8 64 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00078cc:	6a 00                	push   0x0
c00078ce:	68 12 f3 01 c0       	push   0xc001f312
c00078d3:	6a 2f                	push   0x2f
c00078d5:	53                   	push   ebx
c00078d6:	e8 55 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00078db:	83 c4 20             	add    esp,0x20
c00078de:	6a 00                	push   0x0
c00078e0:	68 6c f4 01 c0       	push   0xc001f46c
c00078e5:	6a 30                	push   0x30
c00078e7:	53                   	push   ebx
c00078e8:	e8 43 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00078ed:	6a 00                	push   0x0
c00078ef:	68 76 f4 01 c0       	push   0xc001f476
c00078f4:	6a 31                	push   0x31
c00078f6:	53                   	push   ebx
c00078f7:	e8 34 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c00078fc:	83 c4 20             	add    esp,0x20
c00078ff:	6a 00                	push   0x0
c0007901:	68 80 f4 01 c0       	push   0xc001f480
c0007906:	6a 32                	push   0x32
c0007908:	53                   	push   ebx
c0007909:	e8 22 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000790e:	6a 00                	push   0x0
c0007910:	68 8a f4 01 c0       	push   0xc001f48a
c0007915:	6a 33                	push   0x33
c0007917:	53                   	push   ebx
c0007918:	e8 13 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000791d:	83 c4 20             	add    esp,0x20
c0007920:	6a 00                	push   0x0
c0007922:	68 94 f4 01 c0       	push   0xc001f494
c0007927:	6a 34                	push   0x34
c0007929:	53                   	push   ebx
c000792a:	e8 01 fd ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000792f:	6a 00                	push   0x0
c0007931:	68 9e f4 01 c0       	push   0xc001f49e
c0007936:	6a 35                	push   0x35
c0007938:	53                   	push   ebx
c0007939:	e8 f2 fc ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000793e:	83 c4 20             	add    esp,0x20
c0007941:	6a 00                	push   0x0
c0007943:	68 a8 f4 01 c0       	push   0xc001f4a8
c0007948:	6a 36                	push   0x36
c000794a:	53                   	push   ebx
c000794b:	e8 e0 fc ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c0007950:	6a 00                	push   0x0
c0007952:	68 b2 f4 01 c0       	push   0xc001f4b2
c0007957:	6a 37                	push   0x37
c0007959:	53                   	push   ebx
c000795a:	e8 d1 fc ff ff       	call   c0007630 <IDT::addEntry(int, void (*)(), bool)>
c000795f:	83 c4 1c             	add    esp,0x1c
c0007962:	6a 03                	push   0x3
c0007964:	6a 02                	push   0x2
c0007966:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000796c:	e8 13 25 00 00       	call   c0009e84 <VAS::allocatePages(int, int)>
c0007971:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007978:	89 c6                	mov    esi,eax
c000797a:	e8 97 01 00 00       	call   c0007b16 <malloc>
c000797f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007985:	89 04 24             	mov    DWORD PTR [esp],eax
c0007988:	89 c7                	mov    edi,eax
c000798a:	e8 15 16 00 00       	call   c0008fa4 <TSS::TSS()>
c000798f:	83 c4 0c             	add    esp,0xc
c0007992:	68 26 f2 01 c0       	push   0xc001f226
c0007997:	56                   	push   esi
c0007998:	57                   	push   edi
c0007999:	e8 4a 16 00 00       	call   c0008fe8 <TSS::setup(unsigned long, unsigned long)>
c000799e:	89 c6                	mov    esi,eax
c00079a0:	58                   	pop    eax
c00079a1:	5a                   	pop    edx
c00079a2:	6a 00                	push   0x0
c00079a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00079a8:	50                   	push   eax
c00079a9:	e8 ce fb ff ff       	call   c000757c <IDTEntry::IDTEntry(bool)>
c00079ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00079b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00079be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00079c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079c8:	80 ce 05             	or     dh,0x5
c00079cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00079ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079dc:	e8 87 fc ff ff       	call   c0007668 <IDT::flush()>
c00079e1:	83 c4 20             	add    esp,0x20
c00079e4:	5b                   	pop    ebx
c00079e5:	5e                   	pop    esi
c00079e6:	5f                   	pop    edi
c00079e7:	c3                   	ret    

c00079e8 <sbrk>:
c00079e8:	55                   	push   ebp
c00079e9:	57                   	push   edi
c00079ea:	56                   	push   esi
c00079eb:	53                   	push   ebx
c00079ec:	83 ec 1c             	sub    esp,0x1c
c00079ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079f3:	85 c0                	test   eax,eax
c00079f5:	74 61                	je     c0007a58 <sbrk+0x70>
c00079f7:	78 66                	js     c0007a5f <sbrk+0x77>
c00079f9:	8b 15 08 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023808
c00079ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007a03:	05 ff 0f 00 00       	add    eax,0xfff
c0007a08:	89 c5                	mov    ebp,eax
c0007a0a:	78 6b                	js     c0007a77 <sbrk+0x8f>
c0007a0c:	c1 fd 0c             	sar    ebp,0xc
c0007a0f:	bb 00 00 00 00       	mov    ebx,0x0
c0007a14:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c0007a1a:	8b 3d 08 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023808
c0007a20:	e8 fa 03 00 00       	call   c0007e1f <Phys::allocatePage()>
c0007a25:	68 01 04 00 00       	push   0x401
c0007a2a:	57                   	push   edi
c0007a2b:	50                   	push   eax
c0007a2c:	56                   	push   esi
c0007a2d:	e8 4e 23 00 00       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a32:	81 05 08 38 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023808,0x1000
c0007a3c:	83 c3 01             	add    ebx,0x1
c0007a3f:	83 c4 10             	add    esp,0x10
c0007a42:	39 dd                	cmp    ebp,ebx
c0007a44:	75 ce                	jne    c0007a14 <sbrk+0x2c>
c0007a46:	0f 20 d8             	mov    eax,cr3
c0007a49:	0f 22 d8             	mov    cr3,eax
c0007a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a50:	83 c4 1c             	add    esp,0x1c
c0007a53:	5b                   	pop    ebx
c0007a54:	5e                   	pop    esi
c0007a55:	5f                   	pop    edi
c0007a56:	5d                   	pop    ebp
c0007a57:	c3                   	ret    
c0007a58:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0007a5d:	eb f1                	jmp    c0007a50 <sbrk+0x68>
c0007a5f:	83 ec 08             	sub    esp,0x8
c0007a62:	50                   	push   eax
c0007a63:	68 20 0e 02 c0       	push   0xc0020e20
c0007a68:	e8 38 2f 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0007a6d:	83 c4 10             	add    esp,0x10
c0007a70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a75:	eb d9                	jmp    c0007a50 <sbrk+0x68>
c0007a77:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a7d:	eb 8d                	jmp    c0007a0c <sbrk+0x24>

c0007a7f <mmap>:
c0007a7f:	83 ec 18             	sub    esp,0x18
c0007a82:	68 50 0e 02 c0       	push   0xc0020e50
c0007a87:	e8 6b 9c 00 00       	call   c00116f7 <KePanic(char const*)>
c0007a8c:	b8 00 00 00 00       	mov    eax,0x0
c0007a91:	83 c4 1c             	add    esp,0x1c
c0007a94:	c3                   	ret    

c0007a95 <munmap>:
c0007a95:	83 ec 18             	sub    esp,0x18
c0007a98:	68 55 0e 02 c0       	push   0xc0020e55
c0007a9d:	e8 55 9c 00 00       	call   c00116f7 <KePanic(char const*)>
c0007aa2:	b8 00 00 00 00       	mov    eax,0x0
c0007aa7:	83 c4 1c             	add    esp,0x1c
c0007aaa:	c3                   	ret    

c0007aab <liballoc_lock()>:
c0007aab:	fa                   	cli    
c0007aac:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007ab3:	b8 00 00 00 00       	mov    eax,0x0
c0007ab8:	c3                   	ret    

c0007ab9 <liballoc_unlock()>:
c0007ab9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007abe:	83 e8 01             	sub    eax,0x1
c0007ac1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ac6:	75 01                	jne    c0007ac9 <liballoc_unlock()+0x10>
c0007ac8:	fb                   	sti    
c0007ac9:	b8 00 00 00 00       	mov    eax,0x0
c0007ace:	c3                   	ret    

c0007acf <liballoc_alloc(int)>:
c0007acf:	83 ec 10             	sub    esp,0x10
c0007ad2:	6a 01                	push   0x1
c0007ad4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007ad8:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ade:	e8 a1 23 00 00       	call   c0009e84 <VAS::allocatePages(int, int)>
c0007ae3:	83 c4 1c             	add    esp,0x1c
c0007ae6:	c3                   	ret    

c0007ae7 <liballoc_free(void*, int)>:
c0007ae7:	83 ec 14             	sub    esp,0x14
c0007aea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aee:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007af4:	e8 cf 1f 00 00       	call   c0009ac8 <VAS::freeAllocatedPages(unsigned long)>
c0007af9:	b8 00 00 00 00       	mov    eax,0x0
c0007afe:	83 c4 1c             	add    esp,0x1c
c0007b01:	c3                   	ret    

c0007b02 <realloc>:
c0007b02:	83 ec 14             	sub    esp,0x14
c0007b05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b0d:	e8 d6 9a ff ff       	call   c00015e8 <dlrealloc>
c0007b12:	83 c4 1c             	add    esp,0x1c
c0007b15:	c3                   	ret    

c0007b16 <malloc>:
c0007b16:	83 ec 18             	sub    esp,0x18
c0007b19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b1d:	e8 89 95 ff ff       	call   c00010ab <dlmalloc>
c0007b22:	83 c4 1c             	add    esp,0x1c
c0007b25:	c3                   	ret    

c0007b26 <free>:
c0007b26:	83 ec 18             	sub    esp,0x18
c0007b29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b2d:	e8 21 92 ff ff       	call   c0000d53 <dlfree>
c0007b32:	83 c4 1c             	add    esp,0x1c
c0007b35:	c3                   	ret    

c0007b36 <rfree>:
c0007b36:	83 ec 18             	sub    esp,0x18
c0007b39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b3d:	e8 11 92 ff ff       	call   c0000d53 <dlfree>
c0007b42:	83 c4 1c             	add    esp,0x1c
c0007b45:	c3                   	ret    

c0007b46 <calloc>:
c0007b46:	56                   	push   esi
c0007b47:	53                   	push   ebx
c0007b48:	83 ec 10             	sub    esp,0x10
c0007b4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b4f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b54:	53                   	push   ebx
c0007b55:	e8 bc ff ff ff       	call   c0007b16 <malloc>
c0007b5a:	89 c6                	mov    esi,eax
c0007b5c:	83 c4 0c             	add    esp,0xc
c0007b5f:	53                   	push   ebx
c0007b60:	6a 00                	push   0x0
c0007b62:	50                   	push   eax
c0007b63:	e8 88 89 ff ff       	call   c00004f0 <memset>
c0007b68:	89 f0                	mov    eax,esi
c0007b6a:	83 c4 14             	add    esp,0x14
c0007b6d:	5b                   	pop    ebx
c0007b6e:	5e                   	pop    esi
c0007b6f:	c3                   	ret    

c0007b70 <KeEntryPoint>:
c0007b70:	57                   	push   edi
c0007b71:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b76:	56                   	push   esi
c0007b77:	89 fa                	mov    edx,edi
c0007b79:	53                   	push   ebx
c0007b7a:	31 f6                	xor    esi,esi
c0007b7c:	83 ec 2c             	sub    esp,0x2c
c0007b7f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b84:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b89:	89 f0                	mov    eax,esi
c0007b8b:	ee                   	out    dx,al
c0007b8c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b91:	b0 80                	mov    al,0x80
c0007b93:	89 da                	mov    edx,ebx
c0007b95:	ee                   	out    dx,al
c0007b96:	b1 03                	mov    cl,0x3
c0007b98:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b9d:	88 c8                	mov    al,cl
c0007b9f:	ee                   	out    dx,al
c0007ba0:	89 f0                	mov    eax,esi
c0007ba2:	89 fa                	mov    edx,edi
c0007ba4:	ee                   	out    dx,al
c0007ba5:	88 c8                	mov    al,cl
c0007ba7:	89 da                	mov    edx,ebx
c0007ba9:	ee                   	out    dx,al
c0007baa:	b0 c7                	mov    al,0xc7
c0007bac:	ba fa 03 00 00       	mov    edx,0x3fa
c0007bb1:	ee                   	out    dx,al
c0007bb2:	b0 0b                	mov    al,0xb
c0007bb4:	ba fc 03 00 00       	mov    edx,0x3fc
c0007bb9:	ee                   	out    dx,al
c0007bba:	68 5c 0e 02 c0       	push   0xc0020e5c
c0007bbf:	e8 e1 2d 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0007bc4:	e8 b2 93 00 00       	call   c0010f7b <KeDisplaySplashScreen()>
c0007bc9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007bce:	05 ff 0f 00 00       	add    eax,0xfff
c0007bd3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007bd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdb:	e8 ad 03 00 00       	call   c0007f8d <Phys::physicalMemorySetup(unsigned int)>
c0007be0:	e8 66 1c 00 00       	call   c000984b <Virt::virtualMemorySetup()>
c0007be5:	e8 db 92 00 00       	call   c0010ec5 <KeInitialiseAtexit()>
c0007bea:	58                   	pop    eax
c0007beb:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bef:	53                   	push   ebx
c0007bf0:	e8 53 1f 00 00       	call   c0009b48 <VAS::VAS()>
c0007bf5:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bfb:	e8 6a 7e 01 00       	call   c001fa6a <_init>
c0007c00:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007c07:	e8 0a ff ff ff       	call   c0007b16 <malloc>
c0007c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c0f:	89 c6                	mov    esi,eax
c0007c11:	e8 32 f2 ff ff       	call   c0006e48 <Computer::Computer()>
c0007c16:	53                   	push   ebx
c0007c17:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007c1d:	6a 00                	push   0x0
c0007c1f:	6a 00                	push   0x0
c0007c21:	56                   	push   esi
c0007c22:	e8 e9 f5 ff ff       	call   c0007210 <Computer::open(int, int, void*)>
c0007c27:	83 c4 14             	add    esp,0x14
c0007c2a:	53                   	push   ebx
c0007c2b:	e8 e2 1f 00 00       	call   c0009c12 <VAS::~VAS()>
c0007c30:	83 c4 30             	add    esp,0x30
c0007c33:	5b                   	pop    ebx
c0007c34:	5e                   	pop    esi
c0007c35:	5f                   	pop    edi
c0007c36:	c3                   	ret    

c0007c37 <Phys::allocateDMA(unsigned long)>:
c0007c37:	55                   	push   ebp
c0007c38:	31 ed                	xor    ebp,ebp
c0007c3a:	57                   	push   edi
c0007c3b:	56                   	push   esi
c0007c3c:	53                   	push   ebx
c0007c3d:	31 db                	xor    ebx,ebx
c0007c3f:	83 ec 1c             	sub    esp,0x1c
c0007c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c46:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007c4e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007c54:	31 c0                	xor    eax,eax
c0007c56:	c1 ef 0c             	shr    edi,0xc
c0007c59:	eb 1b                	jmp    c0007c76 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c5b:	85 c0                	test   eax,eax
c0007c5d:	75 06                	jne    c0007c65 <Phys::allocateDMA(unsigned long)+0x2e>
c0007c5f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c63:	89 dd                	mov    ebp,ebx
c0007c65:	8d 70 01             	lea    esi,[eax+0x1]
c0007c68:	39 f7                	cmp    edi,esi
c0007c6a:	74 37                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c6c:	89 f0                	mov    eax,esi
c0007c6e:	83 c3 01             	add    ebx,0x1
c0007c71:	83 fb 0f             	cmp    ebx,0xf
c0007c74:	7f 13                	jg     c0007c89 <Phys::allocateDMA(unsigned long)+0x52>
c0007c76:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c7d:	74 dc                	je     c0007c5b <Phys::allocateDMA(unsigned long)+0x24>
c0007c7f:	31 c0                	xor    eax,eax
c0007c81:	83 c3 01             	add    ebx,0x1
c0007c84:	83 fb 0f             	cmp    ebx,0xf
c0007c87:	7e ed                	jle    c0007c76 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c89:	83 ec 0c             	sub    esp,0xc
c0007c8c:	68 74 0e 02 c0       	push   0xc0020e74
c0007c91:	e8 61 9a 00 00       	call   c00116f7 <KePanic(char const*)>
c0007c96:	83 c4 10             	add    esp,0x10
c0007c99:	31 c0                	xor    eax,eax
c0007c9b:	83 c4 1c             	add    esp,0x1c
c0007c9e:	5b                   	pop    ebx
c0007c9f:	5e                   	pop    esi
c0007ca0:	5f                   	pop    edi
c0007ca1:	5d                   	pop    ebp
c0007ca2:	c3                   	ret    
c0007ca3:	89 e9                	mov    ecx,ebp
c0007ca5:	c1 f9 04             	sar    ecx,0x4
c0007ca8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007cac:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007cb0:	89 ca                	mov    edx,ecx
c0007cb2:	83 ea 01             	sub    edx,0x1
c0007cb5:	79 03                	jns    c0007cba <Phys::allocateDMA(unsigned long)+0x83>
c0007cb7:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007cba:	c1 fa 04             	sar    edx,0x4
c0007cbd:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007cc1:	74 08                	je     c0007ccb <Phys::allocateDMA(unsigned long)+0x94>
c0007cc3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cc7:	31 c0                	xor    eax,eax
c0007cc9:	eb b6                	jmp    c0007c81 <Phys::allocateDMA(unsigned long)+0x4a>
c0007ccb:	85 f6                	test   esi,esi
c0007ccd:	74 17                	je     c0007ce6 <Phys::allocateDMA(unsigned long)+0xaf>
c0007ccf:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007cd5:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007cdc:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007cdf:	83 c2 01             	add    edx,0x1
c0007ce2:	39 d0                	cmp    eax,edx
c0007ce4:	75 f6                	jne    c0007cdc <Phys::allocateDMA(unsigned long)+0xa5>
c0007ce6:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007ceb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007cef:	01 f8                	add    eax,edi
c0007cf1:	85 d2                	test   edx,edx
c0007cf3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cf8:	74 17                	je     c0007d11 <Phys::allocateDMA(unsigned long)+0xda>
c0007cfa:	83 ec 0c             	sub    esp,0xc
c0007cfd:	68 74 0e 02 c0       	push   0xc0020e74
c0007d02:	e8 f0 99 00 00       	call   c00116f7 <KePanic(char const*)>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	89 f0                	mov    eax,esi
c0007d0c:	e9 5d ff ff ff       	jmp    c0007c6e <Phys::allocateDMA(unsigned long)+0x37>
c0007d11:	c1 e5 0c             	shl    ebp,0xc
c0007d14:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007d1a:	e9 7c ff ff ff       	jmp    c0007c9b <Phys::allocateDMA(unsigned long)+0x64>

c0007d1f <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d23:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d29:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d2e:	c1 ea 0c             	shr    edx,0xc
c0007d31:	29 d0                	sub    eax,edx
c0007d33:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d3c:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d41:	c1 e8 0c             	shr    eax,0xc
c0007d44:	85 d2                	test   edx,edx
c0007d46:	74 11                	je     c0007d59 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d48:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d4d:	01 c2                	add    edx,eax
c0007d4f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	39 d0                	cmp    eax,edx
c0007d57:	75 f6                	jne    c0007d4f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d59:	c3                   	ret    

c0007d5a <Phys::setPageState(unsigned long, bool)>:
c0007d5a:	57                   	push   edi
c0007d5b:	56                   	push   esi
c0007d5c:	8b 35 0c 38 02 c0    	mov    esi,DWORD PTR ds:0xc002380c
c0007d62:	53                   	push   ebx
c0007d63:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d70:	0f b6 c0             	movzx  eax,al
c0007d73:	89 ca                	mov    edx,ecx
c0007d75:	83 e1 07             	and    ecx,0x7
c0007d78:	c1 ea 03             	shr    edx,0x3
c0007d7b:	d3 c3                	rol    ebx,cl
c0007d7d:	01 d6                	add    esi,edx
c0007d7f:	d3 e0                	shl    eax,cl
c0007d81:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d84:	21 fb                	and    ebx,edi
c0007d86:	88 1e                	mov    BYTE PTR [esi],bl
c0007d88:	8b 1d 0c 38 02 c0    	mov    ebx,DWORD PTR ds:0xc002380c
c0007d8e:	01 da                	add    edx,ebx
c0007d90:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d92:	09 c8                	or     eax,ecx
c0007d94:	88 02                	mov    BYTE PTR [edx],al
c0007d96:	5b                   	pop    ebx
c0007d97:	5e                   	pop    esi
c0007d98:	5f                   	pop    edi
c0007d99:	c3                   	ret    

c0007d9a <Phys::getPageState(unsigned long)>:
c0007d9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d9e:	8b 15 0c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002380c
c0007da4:	89 c8                	mov    eax,ecx
c0007da6:	83 e1 07             	and    ecx,0x7
c0007da9:	c1 e8 03             	shr    eax,0x3
c0007dac:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007db0:	d3 f8                	sar    eax,cl
c0007db2:	83 e0 01             	and    eax,0x1
c0007db5:	c3                   	ret    

c0007db6 <Phys::freePage(unsigned long)>:
c0007db6:	53                   	push   ebx
c0007db7:	83 ec 08             	sub    esp,0x8
c0007dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dbe:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007dc4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007dca:	76 41                	jbe    c0007e0d <Phys::freePage(unsigned long)+0x57>
c0007dcc:	c1 e8 0c             	shr    eax,0xc
c0007dcf:	50                   	push   eax
c0007dd0:	89 c3                	mov    ebx,eax
c0007dd2:	e8 c3 ff ff ff       	call   c0007d9a <Phys::getPageState(unsigned long)>
c0007dd7:	5a                   	pop    edx
c0007dd8:	84 c0                	test   al,al
c0007dda:	74 20                	je     c0007dfc <Phys::freePage(unsigned long)+0x46>
c0007ddc:	83 ec 08             	sub    esp,0x8
c0007ddf:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007de4:	6a 00                	push   0x0
c0007de6:	83 e8 01             	sub    eax,0x1
c0007de9:	53                   	push   ebx
c0007dea:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007def:	e8 66 ff ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c0007df4:	83 c4 10             	add    esp,0x10
c0007df7:	83 c4 08             	add    esp,0x8
c0007dfa:	5b                   	pop    ebx
c0007dfb:	c3                   	ret    
c0007dfc:	c7 44 24 10 19 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f19
c0007e04:	83 c4 08             	add    esp,0x8
c0007e07:	5b                   	pop    ebx
c0007e08:	e9 ea 98 00 00       	jmp    c00116f7 <KePanic(char const*)>
c0007e0d:	68 00 10 00 00       	push   0x1000
c0007e12:	50                   	push   eax
c0007e13:	e8 07 ff ff ff       	call   c0007d1f <Phys::freeDMA(unsigned long, unsigned long)>
c0007e18:	59                   	pop    ecx
c0007e19:	5b                   	pop    ebx
c0007e1a:	83 c4 08             	add    esp,0x8
c0007e1d:	5b                   	pop    ebx
c0007e1e:	c3                   	ret    

c0007e1f <Phys::allocatePage()>:
c0007e1f:	56                   	push   esi
c0007e20:	53                   	push   ebx
c0007e21:	83 ec 14             	sub    esp,0x14
c0007e24:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007e2a:	89 f3                	mov    ebx,esi
c0007e2c:	eb 0a                	jmp    c0007e38 <Phys::allocatePage()+0x19>
c0007e2e:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007e34:	39 de                	cmp    esi,ebx
c0007e36:	74 26                	je     c0007e5e <Phys::allocatePage()+0x3f>
c0007e38:	53                   	push   ebx
c0007e39:	e8 5c ff ff ff       	call   c0007d9a <Phys::getPageState(unsigned long)>
c0007e3e:	5a                   	pop    edx
c0007e3f:	84 c0                	test   al,al
c0007e41:	74 67                	je     c0007eaa <Phys::allocatePage()+0x8b>
c0007e43:	83 c3 01             	add    ebx,0x1
c0007e46:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e4c:	75 e0                	jne    c0007e2e <Phys::allocatePage()+0xf>
c0007e4e:	31 db                	xor    ebx,ebx
c0007e50:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e5a:	39 de                	cmp    esi,ebx
c0007e5c:	75 da                	jne    c0007e38 <Phys::allocatePage()+0x19>
c0007e5e:	83 ec 0c             	sub    esp,0xc
c0007e61:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e66:	83 f0 01             	xor    eax,0x1
c0007e69:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e76:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e7c:	50                   	push   eax
c0007e7d:	e8 a8 27 00 00       	call   c000a62a <VAS::scanForEviction()>
c0007e82:	83 c4 10             	add    esp,0x10
c0007e85:	85 c0                	test   eax,eax
c0007e87:	75 48                	jne    c0007ed1 <Phys::allocatePage()+0xb2>
c0007e89:	83 ec 0c             	sub    esp,0xc
c0007e8c:	68 9c 0e 02 c0       	push   0xc0020e9c
c0007e91:	e8 61 98 00 00       	call   c00116f7 <KePanic(char const*)>
c0007e96:	83 c4 10             	add    esp,0x10
c0007e99:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e9f:	53                   	push   ebx
c0007ea0:	e8 f5 fe ff ff       	call   c0007d9a <Phys::getPageState(unsigned long)>
c0007ea5:	5a                   	pop    edx
c0007ea6:	84 c0                	test   al,al
c0007ea8:	75 99                	jne    c0007e43 <Phys::allocatePage()+0x24>
c0007eaa:	6a 01                	push   0x1
c0007eac:	53                   	push   ebx
c0007ead:	e8 a8 fe ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c0007eb2:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007eb8:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007ebd:	83 c2 01             	add    edx,0x1
c0007ec0:	59                   	pop    ecx
c0007ec1:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007ec7:	c1 e0 0c             	shl    eax,0xc
c0007eca:	5b                   	pop    ebx
c0007ecb:	83 c4 14             	add    esp,0x14
c0007ece:	5b                   	pop    ebx
c0007ecf:	5e                   	pop    esi
c0007ed0:	c3                   	ret    
c0007ed1:	83 ec 08             	sub    esp,0x8
c0007ed4:	89 c2                	mov    edx,eax
c0007ed6:	6a 01                	push   0x1
c0007ed8:	c1 ea 0c             	shr    edx,0xc
c0007edb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007edf:	52                   	push   edx
c0007ee0:	e8 75 fe ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c0007ee5:	83 c4 10             	add    esp,0x10
c0007ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eec:	eb dd                	jmp    c0007ecb <Phys::allocatePage()+0xac>

c0007eee <Phys::allocateContiguousPages(int)>:
c0007eee:	57                   	push   edi
c0007eef:	56                   	push   esi
c0007ef0:	53                   	push   ebx
c0007ef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ef5:	fa                   	cli    
c0007ef6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efb:	31 db                	xor    ebx,ebx
c0007efd:	83 c0 01             	add    eax,0x1
c0007f00:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f05:	85 db                	test   ebx,ebx
c0007f07:	75 11                	jne    c0007f1a <Phys::allocateContiguousPages(int)+0x2c>
c0007f09:	e8 11 ff ff ff       	call   c0007e1f <Phys::allocatePage()>
c0007f0e:	83 fe 01             	cmp    esi,0x1
c0007f11:	89 c7                	mov    edi,eax
c0007f13:	74 21                	je     c0007f36 <Phys::allocateContiguousPages(int)+0x48>
c0007f15:	bb 01 00 00 00       	mov    ebx,0x1
c0007f1a:	e8 00 ff ff ff       	call   c0007e1f <Phys::allocatePage()>
c0007f1f:	89 da                	mov    edx,ebx
c0007f21:	c1 e2 0c             	shl    edx,0xc
c0007f24:	01 fa                	add    edx,edi
c0007f26:	39 c2                	cmp    edx,eax
c0007f28:	74 22                	je     c0007f4c <Phys::allocateContiguousPages(int)+0x5e>
c0007f2a:	bb 01 00 00 00       	mov    ebx,0x1
c0007f2f:	89 c7                	mov    edi,eax
c0007f31:	83 fe 01             	cmp    esi,0x1
c0007f34:	75 e4                	jne    c0007f1a <Phys::allocateContiguousPages(int)+0x2c>
c0007f36:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f3b:	83 e8 01             	sub    eax,0x1
c0007f3e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f43:	75 01                	jne    c0007f46 <Phys::allocateContiguousPages(int)+0x58>
c0007f45:	fb                   	sti    
c0007f46:	89 f8                	mov    eax,edi
c0007f48:	5b                   	pop    ebx
c0007f49:	5e                   	pop    esi
c0007f4a:	5f                   	pop    edi
c0007f4b:	c3                   	ret    
c0007f4c:	83 c3 01             	add    ebx,0x1
c0007f4f:	39 f3                	cmp    ebx,esi
c0007f51:	75 b2                	jne    c0007f05 <Phys::allocateContiguousPages(int)+0x17>
c0007f53:	eb e1                	jmp    c0007f36 <Phys::allocateContiguousPages(int)+0x48>

c0007f55 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f55:	56                   	push   esi
c0007f56:	53                   	push   ebx
c0007f57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f5b:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f61:	73 06                	jae    c0007f69 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f63:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f6d:	c1 eb 0c             	shr    ebx,0xc
c0007f70:	c1 e8 0c             	shr    eax,0xc
c0007f73:	39 d8                	cmp    eax,ebx
c0007f75:	73 13                	jae    c0007f8a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f77:	6a 00                	push   0x0
c0007f79:	8d 70 01             	lea    esi,[eax+0x1]
c0007f7c:	50                   	push   eax
c0007f7d:	e8 d8 fd ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c0007f82:	5a                   	pop    edx
c0007f83:	89 f0                	mov    eax,esi
c0007f85:	59                   	pop    ecx
c0007f86:	39 f3                	cmp    ebx,esi
c0007f88:	75 ed                	jne    c0007f77 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f8a:	5b                   	pop    ebx
c0007f8b:	5e                   	pop    esi
c0007f8c:	c3                   	ret    

c0007f8d <Phys::physicalMemorySetup(unsigned int)>:
c0007f8d:	55                   	push   ebp
c0007f8e:	57                   	push   edi
c0007f8f:	56                   	push   esi
c0007f90:	53                   	push   ebx
c0007f91:	83 ec 40             	sub    esp,0x40
c0007f94:	6a 10                	push   0x10
c0007f96:	6a 00                	push   0x0
c0007f98:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f9d:	e8 4e 85 ff ff       	call   c00004f0 <memset>
c0007fa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007fa6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007fab:	05 00 10 00 00       	add    eax,0x1000
c0007fb0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007fb4:	5b                   	pop    ebx
c0007fb5:	31 db                	xor    ebx,ebx
c0007fb7:	5e                   	pop    esi
c0007fb8:	50                   	push   eax
c0007fb9:	68 2f 0f 02 c0       	push   0xc0020f2f
c0007fbe:	e8 e2 29 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0007fc3:	83 c4 10             	add    esp,0x10
c0007fc6:	83 ec 08             	sub    esp,0x8
c0007fc9:	6a 01                	push   0x1
c0007fcb:	53                   	push   ebx
c0007fcc:	83 c3 01             	add    ebx,0x1
c0007fcf:	e8 86 fd ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c0007fd4:	83 c4 10             	add    esp,0x10
c0007fd7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fdd:	75 e7                	jne    c0007fc6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fdf:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fe6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fed:	c1 e0 08             	shl    eax,0x8
c0007ff0:	09 c2                	or     edx,eax
c0007ff2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007ff6:	0f 84 98 01 00 00    	je     c0008194 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007ffc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008000:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008008:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000800d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008011:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008019:	eb 1c                	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000801b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000801f:	83 c3 18             	add    ebx,0x18
c0008022:	83 c6 01             	add    esi,0x1
c0008025:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008029:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000802d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008031:	0f 84 6d 01 00 00    	je     c00081a4 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008037:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000803a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000803d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008048:	8b 33                	mov    esi,DWORD PTR [ebx]
c000804a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000804d:	01 f0                	add    eax,esi
c000804f:	55                   	push   ebp
c0008050:	11 fa                	adc    edx,edi
c0008052:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008056:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000805a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000805e:	51                   	push   ecx
c000805f:	56                   	push   esi
c0008060:	68 cc 0e 02 c0       	push   0xc0020ecc
c0008065:	e8 3b 29 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000806a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000806e:	83 c4 10             	add    esp,0x10
c0008071:	09 f8                	or     eax,edi
c0008073:	0f 85 2b 01 00 00    	jne    c00081a4 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008079:	83 fd 01             	cmp    ebp,0x1
c000807c:	75 9d                	jne    c000801b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000807e:	ba 00 00 08 00       	mov    edx,0x80000
c0008083:	89 c1                	mov    ecx,eax
c0008085:	39 f2                	cmp    edx,esi
c0008087:	19 f9                	sbb    ecx,edi
c0008089:	0f 82 ab 00 00 00    	jb     c000813a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000808f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008093:	89 c1                	mov    ecx,eax
c0008095:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008099:	0f 83 9b 00 00 00    	jae    c000813a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000809f:	ba 00 00 0a 00       	mov    edx,0xa0000
c00080a4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080a8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080ac:	39 fa                	cmp    edx,edi
c00080ae:	19 e8                	sbb    eax,ebp
c00080b0:	0f 82 b0 01 00 00    	jb     c0008266 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c00080b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080ba:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080be:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00080c4:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080c9:	83 d5 ff             	adc    ebp,0xffffffff
c00080cc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080d0:	31 c0                	xor    eax,eax
c00080d2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080d6:	39 fa                	cmp    edx,edi
c00080d8:	89 c1                	mov    ecx,eax
c00080da:	19 e9                	sbb    ecx,ebp
c00080dc:	0f 83 39 ff ff ff    	jae    c000801b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080e2:	be 00 00 08 00       	mov    esi,0x80000
c00080e7:	83 ec 04             	sub    esp,0x4
c00080ea:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00080ee:	57                   	push   edi
c00080ef:	56                   	push   esi
c00080f0:	68 f0 0e 02 c0       	push   0xc0020ef0
c00080f5:	e8 ab 28 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00080fa:	5d                   	pop    ebp
c00080fb:	58                   	pop    eax
c00080fc:	57                   	push   edi
c00080fd:	56                   	push   esi
c00080fe:	e8 52 fe ff ff       	call   c0007f55 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008103:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008107:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000810b:	83 c4 0c             	add    esp,0xc
c000810e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008112:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c0008118:	01 d0                	add    eax,edx
c000811a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008121:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008126:	52                   	push   edx
c0008127:	50                   	push   eax
c0008128:	68 55 0f 02 c0       	push   0xc0020f55
c000812d:	e8 73 28 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0008132:	83 c4 10             	add    esp,0x10
c0008135:	e9 e1 fe ff ff       	jmp    c000801b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000813a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000813e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008142:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008146:	39 ea                	cmp    edx,ebp
c0008148:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000814c:	0f 82 c9 fe ff ff    	jb     c000801b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008152:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008157:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000815b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000815f:	0f 83 b6 fe ff ff    	jae    c000801b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008165:	39 ee                	cmp    esi,ebp
c0008167:	89 f8                	mov    eax,edi
c0008169:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000816d:	0f 83 74 ff ff ff    	jae    c00080e7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008173:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008177:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000817b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000817f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008183:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008187:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000818b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000818f:	e9 53 ff ff ff       	jmp    c00080e7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008194:	83 ec 0c             	sub    esp,0xc
c0008197:	68 47 0f 02 c0       	push   0xc0020f47
c000819c:	e8 56 95 00 00       	call   c00116f7 <KePanic(char const*)>
c00081a1:	83 c4 10             	add    esp,0x10
c00081a4:	83 ec 08             	sub    esp,0x8
c00081a7:	bb 60 00 00 00       	mov    ebx,0x60
c00081ac:	6a 00                	push   0x0
c00081ae:	6a 06                	push   0x6
c00081b0:	e8 a5 fb ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c00081b5:	58                   	pop    eax
c00081b6:	5a                   	pop    edx
c00081b7:	6a 00                	push   0x0
c00081b9:	6a 07                	push   0x7
c00081bb:	e8 9a fb ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c00081c0:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c00081c6:	83 c4 10             	add    esp,0x10
c00081c9:	83 c1 02             	add    ecx,0x2
c00081cc:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c00081d2:	83 ec 08             	sub    esp,0x8
c00081d5:	6a 00                	push   0x0
c00081d7:	53                   	push   ebx
c00081d8:	83 c3 01             	add    ebx,0x1
c00081db:	e8 7a fb ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c00081e0:	83 c4 10             	add    esp,0x10
c00081e3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00081e9:	75 e7                	jne    c00081d2 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081eb:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081f0:	bb 40 01 00 00       	mov    ebx,0x140
c00081f5:	83 c0 20             	add    eax,0x20
c00081f8:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fd:	eb 26                	jmp    c0008225 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00081ff:	83 ec 08             	sub    esp,0x8
c0008202:	6a 00                	push   0x0
c0008204:	53                   	push   ebx
c0008205:	83 c3 01             	add    ebx,0x1
c0008208:	e8 4d fb ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c000820d:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008212:	83 c4 10             	add    esp,0x10
c0008215:	83 c0 01             	add    eax,0x1
c0008218:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000821e:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008223:	74 07                	je     c000822c <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0008225:	3d ff 03 00 00       	cmp    eax,0x3ff
c000822a:	7e d3                	jle    c00081ff <Phys::physicalMemorySetup(unsigned int)+0x272>
c000822c:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008231:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008236:	7f 26                	jg     c000825e <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0008238:	83 ec 08             	sub    esp,0x8
c000823b:	6a 00                	push   0x0
c000823d:	53                   	push   ebx
c000823e:	83 c3 01             	add    ebx,0x1
c0008241:	e8 14 fb ff ff       	call   c0007d5a <Phys::setPageState(unsigned long, bool)>
c0008246:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000824b:	83 c4 10             	add    esp,0x10
c000824e:	83 c0 01             	add    eax,0x1
c0008251:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008257:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000825c:	75 d3                	jne    c0008231 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000825e:	83 c4 3c             	add    esp,0x3c
c0008261:	5b                   	pop    ebx
c0008262:	5e                   	pop    esi
c0008263:	5f                   	pop    edi
c0008264:	5d                   	pop    ebp
c0008265:	c3                   	ret    
c0008266:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000826e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008276:	e9 3b fe ff ff       	jmp    c00080b6 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000827b:	90                   	nop

c000827c <Pipe::isAtty()>:
c000827c:	31 c0                	xor    eax,eax
c000827e:	c3                   	ret    
c000827f:	90                   	nop

c0008280 <Pipe::~Pipe()>:
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	ba b4 0f 02 c0       	mov    edx,0xc0020fb4
c0008288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000828c:	89 10                	mov    DWORD PTR [eax],edx
c000828e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008292:	83 ec 0c             	sub    esp,0xc
c0008295:	50                   	push   eax
c0008296:	e8 69 11 00 00       	call   c0009404 <UnixFile::~UnixFile()>
c000829b:	83 c4 10             	add    esp,0x10
c000829e:	90                   	nop
c000829f:	83 c4 0c             	add    esp,0xc
c00082a2:	c3                   	ret    
c00082a3:	90                   	nop

c00082a4 <Pipe::~Pipe()>:
c00082a4:	83 ec 0c             	sub    esp,0xc
c00082a7:	83 ec 0c             	sub    esp,0xc
c00082aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ae:	e8 cd ff ff ff       	call   c0008280 <Pipe::~Pipe()>
c00082b3:	83 c4 10             	add    esp,0x10
c00082b6:	83 ec 08             	sub    esp,0x8
c00082b9:	6a 20                	push   0x20
c00082bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082bf:	e8 b4 25 00 00       	call   c000a878 <operator delete(void*, unsigned long)>
c00082c4:	83 c4 10             	add    esp,0x10
c00082c7:	83 c4 0c             	add    esp,0xc
c00082ca:	c3                   	ret    
c00082cb:	90                   	nop

c00082cc <Pipe::write(unsigned long long, void*, int*)>:
c00082cc:	55                   	push   ebp
c00082cd:	57                   	push   edi
c00082ce:	56                   	push   esi
c00082cf:	53                   	push   ebx
c00082d0:	83 ec 1c             	sub    esp,0x1c
c00082d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082db:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082de:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00082e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082e9:	89 d8                	mov    eax,ebx
c00082eb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082ee:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082f2:	89 d6                	mov    esi,edx
c00082f4:	89 d7                	mov    edi,edx
c00082f6:	c1 ff 1f             	sar    edi,0x1f
c00082f9:	03 34 24             	add    esi,DWORD PTR [esp]
c00082fc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008300:	c1 f8 1f             	sar    eax,0x1f
c0008303:	39 f3                	cmp    ebx,esi
c0008305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008309:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000830d:	19 f8                	sbb    eax,edi
c000830f:	b8 01 00 00 00       	mov    eax,0x1
c0008314:	72 6e                	jb     c0008384 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008316:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008319:	01 d0                	add    eax,edx
c000831b:	99                   	cdq    
c000831c:	f7 fb                	idiv   ebx
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	29 d3                	sub    ebx,edx
c0008324:	89 d7                	mov    edi,edx
c0008326:	89 de                	mov    esi,ebx
c0008328:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000832b:	c1 fb 1f             	sar    ebx,0x1f
c000832e:	39 f2                	cmp    edx,esi
c0008330:	19 d8                	sbb    eax,ebx
c0008332:	b8 00 00 00 00       	mov    eax,0x0
c0008337:	72 04                	jb     c000833d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008339:	89 d0                	mov    eax,edx
c000833b:	29 f0                	sub    eax,esi
c000833d:	89 d3                	mov    ebx,edx
c000833f:	29 c3                	sub    ebx,eax
c0008341:	74 0b                	je     c000834e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008343:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008346:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000834a:	89 d9                	mov    ecx,ebx
c000834c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000834e:	85 c0                	test   eax,eax
c0008350:	74 0d                	je     c000835f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008352:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008356:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008359:	89 de                	mov    esi,ebx
c000835b:	89 c1                	mov    ecx,eax
c000835d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000835f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008362:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008367:	75 10                	jne    c0008379 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008369:	83 ec 0c             	sub    esp,0xc
c000836c:	68 71 0f 02 c0       	push   0xc0020f71
c0008371:	e8 81 93 00 00       	call   c00116f7 <KePanic(char const*)>
c0008376:	83 c4 10             	add    esp,0x10
c0008379:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000837d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008380:	89 08                	mov    DWORD PTR [eax],ecx
c0008382:	31 c0                	xor    eax,eax
c0008384:	83 c4 1c             	add    esp,0x1c
c0008387:	5b                   	pop    ebx
c0008388:	5e                   	pop    esi
c0008389:	5f                   	pop    edi
c000838a:	5d                   	pop    ebp
c000838b:	c3                   	ret    

c000838c <Pipe::read(unsigned long long, void*, int*)>:
c000838c:	55                   	push   ebp
c000838d:	57                   	push   edi
c000838e:	56                   	push   esi
c000838f:	53                   	push   ebx
c0008390:	83 ec 1c             	sub    esp,0x1c
c0008393:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008397:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000839b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000839f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00083a2:	89 c8                	mov    eax,ecx
c00083a4:	99                   	cdq    
c00083a5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00083a9:	74 24                	je     c00083cf <Pipe::read(unsigned long long, void*, int*)+0x43>
c00083ab:	39 f9                	cmp    ecx,edi
c00083ad:	89 d1                	mov    ecx,edx
c00083af:	19 f1                	sbb    ecx,esi
c00083b1:	73 1c                	jae    c00083cf <Pipe::read(unsigned long long, void*, int*)+0x43>
c00083b3:	fa                   	cli    
c00083b4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00083ba:	e8 1d de 00 00       	call   c00161dc <schedule()>
c00083bf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00083c4:	48                   	dec    eax
c00083c5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00083ca:	75 d3                	jne    c000839f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083cc:	fb                   	sti    
c00083cd:	eb d0                	jmp    c000839f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083cf:	39 f8                	cmp    eax,edi
c00083d1:	89 d1                	mov    ecx,edx
c00083d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00083d6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00083da:	19 f1                	sbb    ecx,esi
c00083dc:	73 07                	jae    c00083e5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00083de:	89 04 24             	mov    DWORD PTR [esp],eax
c00083e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00083e5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083e8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083eb:	29 f7                	sub    edi,esi
c00083ed:	89 f8                	mov    eax,edi
c00083ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00083f3:	99                   	cdq    
c00083f4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00083f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083fb:	19 d0                	sbb    eax,edx
c00083fd:	73 07                	jae    c0008406 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00083ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008402:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008406:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008409:	89 ea                	mov    edx,ebp
c000840b:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000840f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008414:	74 0d                	je     c0008423 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008416:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000841d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008421:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008423:	85 d2                	test   edx,edx
c0008425:	74 11                	je     c0008438 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008427:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000842e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008432:	89 d1                	mov    ecx,edx
c0008434:	89 c7                	mov    edi,eax
c0008436:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008438:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000843b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000843e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008441:	99                   	cdq    
c0008442:	89 f7                	mov    edi,esi
c0008444:	03 04 24             	add    eax,DWORD PTR [esp]
c0008447:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000844b:	c1 ff 1f             	sar    edi,0x1f
c000844e:	57                   	push   edi
c000844f:	56                   	push   esi
c0008450:	52                   	push   edx
c0008451:	50                   	push   eax
c0008452:	e8 f9 74 01 00       	call   c001f950 <__umoddi3>
c0008457:	83 c4 10             	add    esp,0x10
c000845a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000845d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008462:	75 10                	jne    c0008474 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008464:	83 ec 0c             	sub    esp,0xc
c0008467:	68 8e 0f 02 c0       	push   0xc0020f8e
c000846c:	e8 86 92 00 00       	call   c00116f7 <KePanic(char const*)>
c0008471:	83 c4 10             	add    esp,0x10
c0008474:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008478:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000847b:	89 10                	mov    DWORD PTR [eax],edx
c000847d:	83 c4 1c             	add    esp,0x1c
c0008480:	31 c0                	xor    eax,eax
c0008482:	5b                   	pop    ebx
c0008483:	5e                   	pop    esi
c0008484:	5f                   	pop    edi
c0008485:	5d                   	pop    ebp
c0008486:	c3                   	ret    
c0008487:	90                   	nop

c0008488 <Pipe::Pipe(int)>:
c0008488:	83 ec 0c             	sub    esp,0xc
c000848b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848f:	83 ec 08             	sub    esp,0x8
c0008492:	6a 00                	push   0x0
c0008494:	50                   	push   eax
c0008495:	e8 84 0d 00 00       	call   c000921e <UnixFile::UnixFile(int)>
c000849a:	83 c4 10             	add    esp,0x10
c000849d:	ba b4 0f 02 c0       	mov    edx,0xc0020fb4
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	89 10                	mov    DWORD PTR [eax],edx
c00084a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00084b0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00084be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00084c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084cd:	83 ec 0c             	sub    esp,0xc
c00084d0:	50                   	push   eax
c00084d1:	e8 40 f6 ff ff       	call   c0007b16 <malloc>
c00084d6:	83 c4 10             	add    esp,0x10
c00084d9:	89 c2                	mov    edx,eax
c00084db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084df:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084ea:	90                   	nop
c00084eb:	83 c4 0c             	add    esp,0xc
c00084ee:	c3                   	ret    
c00084ef:	90                   	nop

c00084f0 <VgaText::isAtty()>:
c00084f0:	b0 01                	mov    al,0x1
c00084f2:	c3                   	ret    
c00084f3:	90                   	nop

c00084f4 <VgaText::~VgaText()>:
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	ba fc 0f 02 c0       	mov    edx,0xc0020ffc
c00084fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008500:	89 10                	mov    DWORD PTR [eax],edx
c0008502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008506:	83 ec 0c             	sub    esp,0xc
c0008509:	50                   	push   eax
c000850a:	e8 f5 0e 00 00       	call   c0009404 <UnixFile::~UnixFile()>
c000850f:	83 c4 10             	add    esp,0x10
c0008512:	90                   	nop
c0008513:	83 c4 0c             	add    esp,0xc
c0008516:	c3                   	ret    
c0008517:	90                   	nop

c0008518 <VgaText::~VgaText()>:
c0008518:	83 ec 0c             	sub    esp,0xc
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008522:	e8 cd ff ff ff       	call   c00084f4 <VgaText::~VgaText()>
c0008527:	83 c4 10             	add    esp,0x10
c000852a:	83 ec 08             	sub    esp,0x8
c000852d:	68 84 01 00 00       	push   0x184
c0008532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008536:	e8 3d 23 00 00       	call   c000a878 <operator delete(void*, unsigned long)>
c000853b:	83 c4 10             	add    esp,0x10
c000853e:	83 c4 0c             	add    esp,0xc
c0008541:	c3                   	ret    

c0008542 <VgaText::read(unsigned long long, void*, int*)>:
c0008542:	83 ec 10             	sub    esp,0x10
c0008545:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008549:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000854d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008551:	e8 aa 53 00 00       	call   c000d900 <readKeyboard(VgaText*, char*, unsigned long)>
c0008556:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000855a:	89 02                	mov    DWORD PTR [edx],eax
c000855c:	31 c0                	xor    eax,eax
c000855e:	83 c4 1c             	add    esp,0x1c
c0008561:	c3                   	ret    

c0008562 <setTerminalScrollLock(bool)>:
c0008562:	c3                   	ret    

c0008563 <doTerminalCycle()>:
c0008563:	c3                   	ret    

c0008564 <addToTerminalCycle(VgaText*)>:
c0008564:	c3                   	ret    

c0008565 <scrollTerminalScrollLock(int)>:
c0008565:	c3                   	ret    

c0008566 <VgaText::updateTitle()>:
c0008566:	c3                   	ret    
c0008567:	90                   	nop

c0008568 <VgaText::load()>:
c0008568:	c3                   	ret    
c0008569:	90                   	nop

c000856a <VgaText::updateCursor()>:
c000856a:	83 ec 14             	sub    esp,0x14
c000856d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008571:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008574:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008577:	e8 18 0a 01 00       	call   c0018f94 <HalConsoleCursorUpdate(int, int)>
c000857c:	83 c4 1c             	add    esp,0x1c
c000857f:	c3                   	ret    

c0008580 <VgaText::doANSI_SGR(int)>:
c0008580:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	85 d2                	test   edx,edx
c000858a:	75 0b                	jne    c0008597 <VgaText::doANSI_SGR(int)+0x17>
c000858c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000858f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008592:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008595:	eb 59                	jmp    c00085f0 <VgaText::doANSI_SGR(int)+0x70>
c0008597:	83 fa 07             	cmp    edx,0x7
c000859a:	75 0b                	jne    c00085a7 <VgaText::doANSI_SGR(int)+0x27>
c000859c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000859f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00085a2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00085a5:	eb 49                	jmp    c00085f0 <VgaText::doANSI_SGR(int)+0x70>
c00085a7:	83 fa 1b             	cmp    edx,0x1b
c00085aa:	74 e0                	je     c000858c <VgaText::doANSI_SGR(int)+0xc>
c00085ac:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00085af:	83 f9 07             	cmp    ecx,0x7
c00085b2:	77 09                	ja     c00085bd <VgaText::doANSI_SGR(int)+0x3d>
c00085b4:	8b 14 8d 40 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7c0]
c00085bb:	eb 20                	jmp    c00085dd <VgaText::doANSI_SGR(int)+0x5d>
c00085bd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00085c0:	83 f9 07             	cmp    ecx,0x7
c00085c3:	77 09                	ja     c00085ce <VgaText::doANSI_SGR(int)+0x4e>
c00085c5:	8b 14 8d 40 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7c0]
c00085cc:	eb 22                	jmp    c00085f0 <VgaText::doANSI_SGR(int)+0x70>
c00085ce:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00085d1:	83 f9 07             	cmp    ecx,0x7
c00085d4:	77 0b                	ja     c00085e1 <VgaText::doANSI_SGR(int)+0x61>
c00085d6:	8b 14 95 f8 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc908]
c00085dd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085e0:	c3                   	ret    
c00085e1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085e4:	83 f9 07             	cmp    ecx,0x7
c00085e7:	77 0a                	ja     c00085f3 <VgaText::doANSI_SGR(int)+0x73>
c00085e9:	8b 14 95 d0 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc930]
c00085f0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085f3:	c3                   	ret    

c00085f4 <VgaText::setDefaultBgColour(VgaColour)>:
c00085f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085ff:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::setDefaultFgColour(VgaColour)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000860c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000860f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008612:	c3                   	ret    
c0008613:	90                   	nop

c0008614 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008614:	53                   	push   ebx
c0008615:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008619:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000861d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008621:	51                   	push   ecx
c0008622:	e8 cd ff ff ff       	call   c00085f4 <VgaText::setDefaultBgColour(VgaColour)>
c0008627:	58                   	pop    eax
c0008628:	5a                   	pop    edx
c0008629:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000862d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008631:	5b                   	pop    ebx
c0008632:	eb d0                	jmp    c0008604 <VgaText::setDefaultFgColour(VgaColour)>

c0008634 <VgaText::setTitleTextColour(VgaColour)>:
c0008634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000863c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000863f:	c3                   	ret    

c0008640 <VgaText::setTitleColour(VgaColour)>:
c0008640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008648:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000864b:	c3                   	ret    

c000864c <VgaText::setTitle(char*)>:
c000864c:	c3                   	ret    
c000864d:	90                   	nop

c000864e <VgaText::combineColours(unsigned char, unsigned char)>:
c000864e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008652:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008657:	83 e0 0f             	and    eax,0xf
c000865a:	c1 e2 04             	shl    edx,0x4
c000865d:	09 d0                	or     eax,edx
c000865f:	c3                   	ret    

c0008660 <VgaText::scrollScreen()>:
c0008660:	55                   	push   ebp
c0008661:	57                   	push   edi
c0008662:	56                   	push   esi
c0008663:	be 01 00 00 00       	mov    esi,0x1
c0008668:	53                   	push   ebx
c0008669:	83 ec 0c             	sub    esp,0xc
c000866c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008670:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008673:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008679:	31 ff                	xor    edi,edi
c000867b:	01 e9                	add    ecx,ebp
c000867d:	8a 01                	mov    al,BYTE PTR [ecx]
c000867f:	83 fe 18             	cmp    esi,0x18
c0008682:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008688:	75 20                	jne    c00086aa <VgaText::scrollScreen()+0x4a>
c000868a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008690:	74 15                	je     c00086a7 <VgaText::scrollScreen()+0x47>
c0008692:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008696:	50                   	push   eax
c0008697:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000869b:	50                   	push   eax
c000869c:	e8 ad ff ff ff       	call   c000864e <VgaText::combineColours(unsigned char, unsigned char)>
c00086a1:	5a                   	pop    edx
c00086a2:	5a                   	pop    edx
c00086a3:	88 01                	mov    BYTE PTR [ecx],al
c00086a5:	eb 03                	jmp    c00086aa <VgaText::scrollScreen()+0x4a>
c00086a7:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00086aa:	47                   	inc    edi
c00086ab:	41                   	inc    ecx
c00086ac:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00086b2:	75 c9                	jne    c000867d <VgaText::scrollScreen()+0x1d>
c00086b4:	46                   	inc    esi
c00086b5:	83 fe 19             	cmp    esi,0x19
c00086b8:	75 b9                	jne    c0008673 <VgaText::scrollScreen()+0x13>
c00086ba:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c00086c0:	75 1f                	jne    c00086e1 <VgaText::scrollScreen()+0x81>
c00086c2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00086c6:	74 05                	je     c00086cd <VgaText::scrollScreen()+0x6d>
c00086c8:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00086cb:	eb 14                	jmp    c00086e1 <VgaText::scrollScreen()+0x81>
c00086cd:	50                   	push   eax
c00086ce:	50                   	push   eax
c00086cf:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086d3:	50                   	push   eax
c00086d4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086d8:	50                   	push   eax
c00086d9:	e8 4a 07 01 00       	call   c0018e28 <HalConsoleScroll(int, int)>
c00086de:	83 c4 10             	add    esp,0x10
c00086e1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086e5:	83 c4 0c             	add    esp,0xc
c00086e8:	5b                   	pop    ebx
c00086e9:	5e                   	pop    esi
c00086ea:	5f                   	pop    edi
c00086eb:	5d                   	pop    ebp
c00086ec:	e9 79 fe ff ff       	jmp    c000856a <VgaText::updateCursor()>
c00086f1:	90                   	nop

c00086f2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086f7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086fc:	c1 e0 08             	shl    eax,0x8
c00086ff:	09 d0                	or     eax,edx
c0008701:	c3                   	ret    

c0008702 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008702:	55                   	push   ebp
c0008703:	57                   	push   edi
c0008704:	56                   	push   esi
c0008705:	53                   	push   ebx
c0008706:	83 ec 1c             	sub    esp,0x1c
c0008709:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000870d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008711:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008719:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000871d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008721:	0f b6 c3             	movzx  eax,bl
c0008724:	50                   	push   eax
c0008725:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000872a:	50                   	push   eax
c000872b:	e8 1e ff ff ff       	call   c000864e <VgaText::combineColours(unsigned char, unsigned char)>
c0008730:	5a                   	pop    edx
c0008731:	0f b6 c0             	movzx  eax,al
c0008734:	59                   	pop    ecx
c0008735:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000873a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000873e:	50                   	push   eax
c000873f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008743:	e8 aa ff ff ff       	call   c00086f2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008748:	5a                   	pop    edx
c0008749:	6b d7 50             	imul   edx,edi,0x50
c000874c:	59                   	pop    ecx
c000874d:	01 f2                	add    edx,esi
c000874f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008752:	0f b7 d2             	movzx  edx,dx
c0008755:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008759:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c000875f:	75 28                	jne    c0008789 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008765:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008769:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000876d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008771:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000877d:	83 c4 1c             	add    esp,0x1c
c0008780:	5b                   	pop    ebx
c0008781:	5e                   	pop    esi
c0008782:	5f                   	pop    edi
c0008783:	5d                   	pop    ebp
c0008784:	e9 a7 07 01 00       	jmp    c0018f30 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008789:	83 c4 1c             	add    esp,0x1c
c000878c:	5b                   	pop    ebx
c000878d:	5e                   	pop    esi
c000878e:	5f                   	pop    edi
c000878f:	5d                   	pop    ebp
c0008790:	c3                   	ret    
c0008791:	90                   	nop

c0008792 <VgaText::getCursorX()>:
c0008792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008796:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008799:	c3                   	ret    

c000879a <VgaText::getCursorY()>:
c000879a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000879e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00087a1:	c3                   	ret    

c00087a2 <VgaText::setCursor(int, int)>:
c00087a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00087aa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00087ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00087b4:	e9 b1 fd ff ff       	jmp    c000856a <VgaText::updateCursor()>

c00087b9 <setActiveTerminal(VgaText*)>:
c00087b9:	53                   	push   ebx
c00087ba:	83 ec 08             	sub    esp,0x8
c00087bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c1:	85 db                	test   ebx,ebx
c00087c3:	75 11                	jne    c00087d6 <setActiveTerminal(VgaText*)+0x1d>
c00087c5:	c7 44 24 10 c8 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020fc8
c00087cd:	83 c4 08             	add    esp,0x8
c00087d0:	5b                   	pop    ebx
c00087d1:	e9 21 8f 00 00       	jmp    c00116f7 <KePanic(char const*)>
c00087d6:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00087db:	85 c0                	test   eax,eax
c00087dd:	74 0c                	je     c00087eb <setActiveTerminal(VgaText*)+0x32>
c00087df:	83 ec 0c             	sub    esp,0xc
c00087e2:	50                   	push   eax
c00087e3:	e8 82 fd ff ff       	call   c000856a <VgaText::updateCursor()>
c00087e8:	83 c4 10             	add    esp,0x10
c00087eb:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087f1:	50                   	push   eax
c00087f2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087f8:	53                   	push   ebx
c00087f9:	e8 a4 ff ff ff       	call   c00087a2 <VgaText::setCursor(int, int)>
c00087fe:	83 c4 18             	add    esp,0x18
c0008801:	5b                   	pop    ebx
c0008802:	c3                   	ret    
c0008803:	90                   	nop

c0008804 <VgaText::clearScreen()>:
c0008804:	57                   	push   edi
c0008805:	56                   	push   esi
c0008806:	31 f6                	xor    esi,esi
c0008808:	53                   	push   ebx
c0008809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000880d:	52                   	push   edx
c000880e:	6a 00                	push   0x0
c0008810:	6a 00                	push   0x0
c0008812:	53                   	push   ebx
c0008813:	e8 8a ff ff ff       	call   c00087a2 <VgaText::setCursor(int, int)>
c0008818:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000881f:	83 c4 10             	add    esp,0x10
c0008822:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008825:	7e 20                	jle    c0008847 <VgaText::clearScreen()+0x43>
c0008827:	31 ff                	xor    edi,edi
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	56                   	push   esi
c000882c:	57                   	push   edi
c000882d:	47                   	inc    edi
c000882e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008831:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008834:	6a 20                	push   0x20
c0008836:	53                   	push   ebx
c0008837:	e8 c6 fe ff ff       	call   c0008702 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000883c:	83 c4 20             	add    esp,0x20
c000883f:	83 ff 50             	cmp    edi,0x50
c0008842:	75 e5                	jne    c0008829 <VgaText::clearScreen()+0x25>
c0008844:	46                   	inc    esi
c0008845:	eb db                	jmp    c0008822 <VgaText::clearScreen()+0x1e>
c0008847:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000884e:	5b                   	pop    ebx
c000884f:	5e                   	pop    esi
c0008850:	5f                   	pop    edi
c0008851:	c3                   	ret    

c0008852 <VgaText::setCursorX(int)>:
c0008852:	83 ec 10             	sub    esp,0x10
c0008855:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008859:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000885c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008860:	50                   	push   eax
c0008861:	e8 3c ff ff ff       	call   c00087a2 <VgaText::setCursor(int, int)>
c0008866:	83 c4 1c             	add    esp,0x1c
c0008869:	c3                   	ret    

c000886a <VgaText::setCursorY(int)>:
c000886a:	83 ec 10             	sub    esp,0x10
c000886d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008871:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008875:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008878:	50                   	push   eax
c0008879:	e8 24 ff ff ff       	call   c00087a2 <VgaText::setCursor(int, int)>
c000887e:	83 c4 1c             	add    esp,0x1c
c0008881:	c3                   	ret    

c0008882 <VgaText::incrementCursor(bool)>:
c0008882:	56                   	push   esi
c0008883:	53                   	push   ebx
c0008884:	51                   	push   ecx
c0008885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008889:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000888d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008890:	40                   	inc    eax
c0008891:	83 f8 50             	cmp    eax,0x50
c0008894:	74 05                	je     c000889b <VgaText::incrementCursor(bool)+0x19>
c0008896:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008899:	eb 24                	jmp    c00088bf <VgaText::incrementCursor(bool)+0x3d>
c000889b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000889e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088a5:	8d 50 01             	lea    edx,[eax+0x1]
c00088a8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088ab:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088ae:	75 0f                	jne    c00088bf <VgaText::incrementCursor(bool)+0x3d>
c00088b0:	83 ec 0c             	sub    esp,0xc
c00088b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088b6:	53                   	push   ebx
c00088b7:	e8 a4 fd ff ff       	call   c0008660 <VgaText::scrollScreen()>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	89 f0                	mov    eax,esi
c00088c1:	84 c0                	test   al,al
c00088c3:	74 0c                	je     c00088d1 <VgaText::incrementCursor(bool)+0x4f>
c00088c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088c9:	5a                   	pop    edx
c00088ca:	5b                   	pop    ebx
c00088cb:	5e                   	pop    esi
c00088cc:	e9 99 fc ff ff       	jmp    c000856a <VgaText::updateCursor()>
c00088d1:	58                   	pop    eax
c00088d2:	5b                   	pop    ebx
c00088d3:	5e                   	pop    esi
c00088d4:	c3                   	ret    
c00088d5:	90                   	nop

c00088d6 <VgaText::decrementCursor(bool)>:
c00088d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088de:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088e1:	85 c0                	test   eax,eax
c00088e3:	74 04                	je     c00088e9 <VgaText::decrementCursor(bool)+0x13>
c00088e5:	48                   	dec    eax
c00088e6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088e9:	84 c9                	test   cl,cl
c00088eb:	74 09                	je     c00088f6 <VgaText::decrementCursor(bool)+0x20>
c00088ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088f1:	e9 74 fc ff ff       	jmp    c000856a <VgaText::updateCursor()>
c00088f6:	c3                   	ret    
c00088f7:	90                   	nop

c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088f8:	53                   	push   ebx
c00088f9:	83 ec 08             	sub    esp,0x8
c00088fc:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008901:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008905:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008909:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000890d:	83 f8 07             	cmp    eax,0x7
c0008910:	75 21                	jne    c0008933 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0008912:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000891a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008922:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000892a:	83 c4 08             	add    esp,0x8
c000892d:	5b                   	pop    ebx
c000892e:	e9 18 3b 00 00       	jmp    c000c44b <Krnl::beep(int, int, bool)>
c0008933:	83 f8 0d             	cmp    eax,0xd
c0008936:	75 09                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0008938:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000893f:	eb 2d                	jmp    c000896e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008941:	83 f8 0a             	cmp    eax,0xa
c0008944:	75 31                	jne    c0008977 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0008946:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008949:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008950:	8d 50 01             	lea    edx,[eax+0x1]
c0008953:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008956:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008959:	75 0f                	jne    c000896a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000895b:	83 ec 0c             	sub    esp,0xc
c000895e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008961:	53                   	push   ebx
c0008962:	e8 f9 fc ff ff       	call   c0008660 <VgaText::scrollScreen()>
c0008967:	83 c4 10             	add    esp,0x10
c000896a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000896e:	83 c4 08             	add    esp,0x8
c0008971:	5b                   	pop    ebx
c0008972:	e9 f3 fb ff ff       	jmp    c000856a <VgaText::updateCursor()>
c0008977:	83 f8 08             	cmp    eax,0x8
c000897a:	75 25                	jne    c00089a1 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000897c:	50                   	push   eax
c000897d:	50                   	push   eax
c000897e:	6a 01                	push   0x1
c0008980:	53                   	push   ebx
c0008981:	e8 50 ff ff ff       	call   c00088d6 <VgaText::decrementCursor(bool)>
c0008986:	5a                   	pop    edx
c0008987:	59                   	pop    ecx
c0008988:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000898b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000898e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008991:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008994:	6a 20                	push   0x20
c0008996:	53                   	push   ebx
c0008997:	e8 66 fd ff ff       	call   c0008702 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000899c:	83 c4 28             	add    esp,0x28
c000899f:	5b                   	pop    ebx
c00089a0:	c3                   	ret    
c00089a1:	83 ec 08             	sub    esp,0x8
c00089a4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00089a7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00089aa:	51                   	push   ecx
c00089ab:	52                   	push   edx
c00089ac:	50                   	push   eax
c00089ad:	53                   	push   ebx
c00089ae:	e8 4f fd ff ff       	call   c0008702 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00089b3:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00089b7:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00089bf:	83 c4 28             	add    esp,0x28
c00089c2:	5b                   	pop    ebx
c00089c3:	e9 ba fe ff ff       	jmp    c0008882 <VgaText::incrementCursor(bool)>

c00089c8 <VgaText::putchar(char)>:
c00089c8:	57                   	push   edi
c00089c9:	56                   	push   esi
c00089ca:	53                   	push   ebx
c00089cb:	83 ec 10             	sub    esp,0x10
c00089ce:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00089d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089d6:	89 f8                	mov    eax,edi
c00089d8:	0f be c0             	movsx  eax,al
c00089db:	83 f8 5b             	cmp    eax,0x5b
c00089de:	75 18                	jne    c00089f8 <VgaText::putchar(char)+0x30>
c00089e0:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089e4:	74 20                	je     c0008a06 <VgaText::putchar(char)+0x3e>
c00089e6:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089ec:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089f3:	e9 c1 00 00 00       	jmp    c0008ab9 <VgaText::putchar(char)+0xf1>
c00089f8:	83 f8 1b             	cmp    eax,0x1b
c00089fb:	75 09                	jne    c0008a06 <VgaText::putchar(char)+0x3e>
c00089fd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008a01:	e9 b3 00 00 00       	jmp    c0008ab9 <VgaText::putchar(char)+0xf1>
c0008a06:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008a09:	84 c9                	test   cl,cl
c0008a0b:	0f 84 98 00 00 00    	je     c0008aa9 <VgaText::putchar(char)+0xe1>
c0008a11:	8d 77 c0             	lea    esi,[edi-0x40]
c0008a14:	89 f2                	mov    edx,esi
c0008a16:	80 fa 3e             	cmp    dl,0x3e
c0008a19:	77 78                	ja     c0008a93 <VgaText::putchar(char)+0xcb>
c0008a1b:	83 f8 6d             	cmp    eax,0x6d
c0008a1e:	75 47                	jne    c0008a67 <VgaText::putchar(char)+0x9f>
c0008a20:	31 f6                	xor    esi,esi
c0008a22:	31 d2                	xor    edx,edx
c0008a24:	31 c0                	xor    eax,eax
c0008a26:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008a29:	7e 2d                	jle    c0008a58 <VgaText::putchar(char)+0x90>
c0008a2b:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008a30:	83 fa 3b             	cmp    edx,0x3b
c0008a33:	75 17                	jne    c0008a4c <VgaText::putchar(char)+0x84>
c0008a35:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008a39:	50                   	push   eax
c0008a3a:	53                   	push   ebx
c0008a3b:	e8 40 fb ff ff       	call   c0008580 <VgaText::doANSI_SGR(int)>
c0008a40:	59                   	pop    ecx
c0008a41:	31 d2                	xor    edx,edx
c0008a43:	5f                   	pop    edi
c0008a44:	31 c0                	xor    eax,eax
c0008a46:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008a4a:	eb 09                	jmp    c0008a55 <VgaText::putchar(char)+0x8d>
c0008a4c:	6b c0 0a             	imul   eax,eax,0xa
c0008a4f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a53:	88 ca                	mov    dl,cl
c0008a55:	46                   	inc    esi
c0008a56:	eb ce                	jmp    c0008a26 <VgaText::putchar(char)+0x5e>
c0008a58:	84 d2                	test   dl,dl
c0008a5a:	74 2f                	je     c0008a8b <VgaText::putchar(char)+0xc3>
c0008a5c:	50                   	push   eax
c0008a5d:	53                   	push   ebx
c0008a5e:	e8 1d fb ff ff       	call   c0008580 <VgaText::doANSI_SGR(int)>
c0008a63:	58                   	pop    eax
c0008a64:	5a                   	pop    edx
c0008a65:	eb 24                	jmp    c0008a8b <VgaText::putchar(char)+0xc3>
c0008a67:	83 f8 4a             	cmp    eax,0x4a
c0008a6a:	75 1f                	jne    c0008a8b <VgaText::putchar(char)+0xc3>
c0008a6c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a70:	75 19                	jne    c0008a8b <VgaText::putchar(char)+0xc3>
c0008a72:	83 ec 0c             	sub    esp,0xc
c0008a75:	53                   	push   ebx
c0008a76:	e8 89 fd ff ff       	call   c0008804 <VgaText::clearScreen()>
c0008a7b:	83 c4 0c             	add    esp,0xc
c0008a7e:	6a 00                	push   0x0
c0008a80:	6a 00                	push   0x0
c0008a82:	53                   	push   ebx
c0008a83:	e8 1a fd ff ff       	call   c00087a2 <VgaText::setCursor(int, int)>
c0008a88:	83 c4 10             	add    esp,0x10
c0008a8b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a91:	eb 26                	jmp    c0008ab9 <VgaText::putchar(char)+0xf1>
c0008a93:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a96:	83 f8 0e             	cmp    eax,0xe
c0008a99:	7f 1e                	jg     c0008ab9 <VgaText::putchar(char)+0xf1>
c0008a9b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a9e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008aa1:	89 f9                	mov    ecx,edi
c0008aa3:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008aa7:	eb 10                	jmp    c0008ab9 <VgaText::putchar(char)+0xf1>
c0008aa9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aac:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008aaf:	50                   	push   eax
c0008ab0:	53                   	push   ebx
c0008ab1:	e8 42 fe ff ff       	call   c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ab6:	83 c4 10             	add    esp,0x10
c0008ab9:	83 c4 10             	add    esp,0x10
c0008abc:	5b                   	pop    ebx
c0008abd:	5e                   	pop    esi
c0008abe:	5f                   	pop    edi
c0008abf:	c3                   	ret    

c0008ac0 <VgaText::putx(unsigned int)>:
c0008ac0:	57                   	push   edi
c0008ac1:	b9 11 00 00 00       	mov    ecx,0x11
c0008ac6:	56                   	push   esi
c0008ac7:	be d6 0f 02 c0       	mov    esi,0xc0020fd6
c0008acc:	53                   	push   ebx
c0008acd:	83 ec 20             	sub    esp,0x20
c0008ad0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008ad4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008ad8:	fc                   	cld    
c0008ad9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008adb:	be 08 00 00 00       	mov    esi,0x8
c0008ae0:	50                   	push   eax
c0008ae1:	50                   	push   eax
c0008ae2:	89 d8                	mov    eax,ebx
c0008ae4:	c1 e3 04             	shl    ebx,0x4
c0008ae7:	c1 e8 1c             	shr    eax,0x1c
c0008aea:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008aef:	50                   	push   eax
c0008af0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008af4:	e8 cf fe ff ff       	call   c00089c8 <VgaText::putchar(char)>
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	4e                   	dec    esi
c0008afd:	75 e1                	jne    c0008ae0 <VgaText::putx(unsigned int)+0x20>
c0008aff:	83 c4 20             	add    esp,0x20
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	5f                   	pop    edi
c0008b05:	c3                   	ret    

c0008b06 <VgaText::puts(char const*)>:
c0008b06:	53                   	push   ebx
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008b0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008b11:	85 c0                	test   eax,eax
c0008b13:	74 12                	je     c0008b27 <VgaText::puts(char const*)+0x21>
c0008b15:	43                   	inc    ebx
c0008b16:	51                   	push   ecx
c0008b17:	51                   	push   ecx
c0008b18:	50                   	push   eax
c0008b19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1d:	e8 a6 fe ff ff       	call   c00089c8 <VgaText::putchar(char)>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	eb e7                	jmp    c0008b0e <VgaText::puts(char const*)+0x8>
c0008b27:	83 c4 08             	add    esp,0x8
c0008b2a:	5b                   	pop    ebx
c0008b2b:	c3                   	ret    

c0008b2c <VgaText::write(unsigned long long, void*, int*)>:
c0008b2c:	55                   	push   ebp
c0008b2d:	57                   	push   edi
c0008b2e:	56                   	push   esi
c0008b2f:	53                   	push   ebx
c0008b30:	83 ec 0c             	sub    esp,0xc
c0008b33:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008b37:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008b3f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b46:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b49:	39 eb                	cmp    ebx,ebp
c0008b4b:	74 13                	je     c0008b60 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b4d:	43                   	inc    ebx
c0008b4e:	50                   	push   eax
c0008b4f:	50                   	push   eax
c0008b50:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b54:	50                   	push   eax
c0008b55:	56                   	push   esi
c0008b56:	e8 6d fe ff ff       	call   c00089c8 <VgaText::putchar(char)>
c0008b5b:	83 c4 10             	add    esp,0x10
c0008b5e:	eb e9                	jmp    c0008b49 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b60:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b6b:	89 38                	mov    DWORD PTR [eax],edi
c0008b6d:	83 c4 0c             	add    esp,0xc
c0008b70:	31 c0                	xor    eax,eax
c0008b72:	5b                   	pop    ebx
c0008b73:	5e                   	pop    esi
c0008b74:	5f                   	pop    edi
c0008b75:	5d                   	pop    ebp
c0008b76:	c3                   	ret    
c0008b77:	90                   	nop

c0008b78 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b78:	55                   	push   ebp
c0008b79:	57                   	push   edi
c0008b7a:	56                   	push   esi
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b88:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b8f:	50                   	push   eax
c0008b90:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b95:	50                   	push   eax
c0008b96:	e8 b3 fa ff ff       	call   c000864e <VgaText::combineColours(unsigned char, unsigned char)>
c0008b9b:	5a                   	pop    edx
c0008b9c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba0:	59                   	pop    ecx
c0008ba1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008ba4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ba8:	0f b7 f6             	movzx  esi,si
c0008bab:	0f b6 e8             	movzx  ebp,al
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008bb6:	85 c0                	test   eax,eax
c0008bb8:	0f 84 ef 00 00 00    	je     c0008cad <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008bbe:	83 f8 0d             	cmp    eax,0xd
c0008bc1:	75 0c                	jne    c0008bcf <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008bc3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008bca:	e9 d8 00 00 00       	jmp    c0008ca7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bcf:	83 f8 0a             	cmp    eax,0xa
c0008bd2:	75 44                	jne    c0008c18 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008bd4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008bd7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008bde:	8d 48 01             	lea    ecx,[eax+0x1]
c0008be1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008be4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008be7:	75 0f                	jne    c0008bf8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008be9:	83 ec 0c             	sub    esp,0xc
c0008bec:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008bef:	53                   	push   ebx
c0008bf0:	e8 6b fa ff ff       	call   c0008660 <VgaText::scrollScreen()>
c0008bf5:	83 c4 10             	add    esp,0x10
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	53                   	push   ebx
c0008bfc:	e8 69 f9 ff ff       	call   c000856a <VgaText::updateCursor()>
c0008c01:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008c0b:	0f b7 f6             	movzx  esi,si
c0008c0e:	01 f6                	add    esi,esi
c0008c10:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c13:	e9 8f 00 00 00       	jmp    c0008ca7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c18:	83 f8 08             	cmp    eax,0x8
c0008c1b:	75 34                	jne    c0008c51 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008c1d:	51                   	push   ecx
c0008c1e:	51                   	push   ecx
c0008c1f:	6a 01                	push   0x1
c0008c21:	53                   	push   ebx
c0008c22:	e8 af fc ff ff       	call   c00088d6 <VgaText::decrementCursor(bool)>
c0008c27:	5e                   	pop    esi
c0008c28:	58                   	pop    eax
c0008c29:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c2c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c2f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c32:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c35:	6a 20                	push   0x20
c0008c37:	53                   	push   ebx
c0008c38:	e8 c5 fa ff ff       	call   c0008702 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c3d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c41:	83 c4 20             	add    esp,0x20
c0008c44:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008c47:	0f b7 f6             	movzx  esi,si
c0008c4a:	01 f6                	add    esi,esi
c0008c4c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c4f:	eb 56                	jmp    c0008ca7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c51:	52                   	push   edx
c0008c52:	52                   	push   edx
c0008c53:	55                   	push   ebp
c0008c54:	50                   	push   eax
c0008c55:	e8 98 fa ff ff       	call   c00086f2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c5a:	83 c4 10             	add    esp,0x10
c0008c5d:	66 89 06             	mov    WORD PTR [esi],ax
c0008c60:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c66:	75 1d                	jne    c0008c85 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c68:	83 ec 0c             	sub    esp,0xc
c0008c6b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c6e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c71:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c75:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c79:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c7c:	50                   	push   eax
c0008c7d:	e8 ae 02 01 00       	call   c0018f30 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c82:	83 c4 20             	add    esp,0x20
c0008c85:	83 c6 02             	add    esi,0x2
c0008c88:	50                   	push   eax
c0008c89:	50                   	push   eax
c0008c8a:	6a 00                	push   0x0
c0008c8c:	53                   	push   ebx
c0008c8d:	e8 f0 fb ff ff       	call   c0008882 <VgaText::incrementCursor(bool)>
c0008c92:	83 c4 10             	add    esp,0x10
c0008c95:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c99:	75 0c                	jne    c0008ca7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c9b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c9f:	0f b7 f6             	movzx  esi,si
c0008ca2:	01 f6                	add    esi,esi
c0008ca4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ca7:	47                   	inc    edi
c0008ca8:	e9 06 ff ff ff       	jmp    c0008bb3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008cad:	83 ec 0c             	sub    esp,0xc
c0008cb0:	53                   	push   ebx
c0008cb1:	e8 b4 f8 ff ff       	call   c000856a <VgaText::updateCursor()>
c0008cb6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008cbd:	83 c4 1c             	add    esp,0x1c
c0008cc0:	5b                   	pop    ebx
c0008cc1:	5e                   	pop    esi
c0008cc2:	5f                   	pop    edi
c0008cc3:	5d                   	pop    ebp
c0008cc4:	c3                   	ret    
c0008cc5:	90                   	nop

c0008cc6 <VgaText::VgaText(char const*)>:
c0008cc6:	56                   	push   esi
c0008cc7:	53                   	push   ebx
c0008cc8:	83 ec 04             	sub    esp,0x4
c0008ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccf:	83 ec 08             	sub    esp,0x8
c0008cd2:	6a 00                	push   0x0
c0008cd4:	50                   	push   eax
c0008cd5:	e8 44 05 00 00       	call   c000921e <UnixFile::UnixFile(int)>
c0008cda:	83 c4 10             	add    esp,0x10
c0008cdd:	ba fc 0f 02 c0       	mov    edx,0xc0020ffc
c0008ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce6:	89 10                	mov    DWORD PTR [eax],edx
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d12:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d28:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d33:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d3e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d45:	83 ec 0c             	sub    esp,0xc
c0008d48:	6a 01                	push   0x1
c0008d4a:	e8 1e 09 00 00       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	89 c2                	mov    edx,eax
c0008d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d58:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d5b:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d65:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d68:	89 c6                	mov    esi,eax
c0008d6a:	e8 b0 f0 ff ff       	call   c0007e1f <Phys::allocatePage()>
c0008d6f:	68 05 0c 00 00       	push   0xc05
c0008d74:	56                   	push   esi
c0008d75:	50                   	push   eax
c0008d76:	53                   	push   ebx
c0008d77:	e8 04 10 00 00       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d86:	83 ec 04             	sub    esp,0x4
c0008d89:	68 a0 0f 00 00       	push   0xfa0
c0008d8e:	6a 00                	push   0x0
c0008d90:	50                   	push   eax
c0008d91:	e8 5a 77 ff ff       	call   c00004f0 <memset>
c0008d96:	83 c4 10             	add    esp,0x10
c0008d99:	83 ec 04             	sub    esp,0x4
c0008d9c:	6a 00                	push   0x0
c0008d9e:	6a 07                	push   0x7
c0008da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008da4:	e8 6b f8 ff ff       	call   c0008614 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008da9:	83 c4 10             	add    esp,0x10
c0008dac:	83 ec 04             	sub    esp,0x4
c0008daf:	6a 00                	push   0x0
c0008db1:	6a 00                	push   0x0
c0008db3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008db7:	e8 e6 f9 ff ff       	call   c00087a2 <VgaText::setCursor(int, int)>
c0008dbc:	83 c4 10             	add    esp,0x10
c0008dbf:	83 ec 0c             	sub    esp,0xc
c0008dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008dc6:	e8 39 fa ff ff       	call   c0008804 <VgaText::clearScreen()>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dd2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dda:	05 82 00 00 00       	add    eax,0x82
c0008ddf:	83 ec 04             	sub    esp,0x4
c0008de2:	68 80 00 00 00       	push   0x80
c0008de7:	6a 00                	push   0x0
c0008de9:	50                   	push   eax
c0008dea:	e8 01 77 ff ff       	call   c00004f0 <memset>
c0008def:	83 c4 10             	add    esp,0x10
c0008df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008df6:	05 02 01 00 00       	add    eax,0x102
c0008dfb:	83 ec 04             	sub    esp,0x4
c0008dfe:	68 80 00 00 00       	push   0x80
c0008e03:	6a 00                	push   0x0
c0008e05:	50                   	push   eax
c0008e06:	e8 e5 76 ff ff       	call   c00004f0 <memset>
c0008e0b:	83 c4 10             	add    esp,0x10
c0008e0e:	90                   	nop
c0008e0f:	83 c4 04             	add    esp,0x4
c0008e12:	5b                   	pop    ebx
c0008e13:	5e                   	pop    esi
c0008e14:	c3                   	ret    
c0008e15:	90                   	nop

c0008e16 <VgaText::receiveKey(unsigned char)>:
c0008e16:	55                   	push   ebp
c0008e17:	57                   	push   edi
c0008e18:	56                   	push   esi
c0008e19:	53                   	push   ebx
c0008e1a:	83 ec 2c             	sub    esp,0x2c
c0008e1d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008e21:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008e25:	89 ef                	mov    edi,ebp
c0008e27:	81 e7 ff 00 00 00    	and    edi,0xff
c0008e2d:	0f 84 66 01 00 00    	je     c0008f99 <VgaText::receiveKey(unsigned char)+0x183>
c0008e33:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008e39:	83 ff 08             	cmp    edi,0x8
c0008e3c:	75 73                	jne    c0008eb1 <VgaText::receiveKey(unsigned char)+0x9b>
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	56                   	push   esi
c0008e42:	e8 29 77 ff ff       	call   c0000570 <strlen>
c0008e47:	83 c4 10             	add    esp,0x10
c0008e4a:	85 c0                	test   eax,eax
c0008e4c:	0f 84 02 01 00 00    	je     c0008f54 <VgaText::receiveKey(unsigned char)+0x13e>
c0008e52:	50                   	push   eax
c0008e53:	50                   	push   eax
c0008e54:	6a 08                	push   0x8
c0008e56:	53                   	push   ebx
c0008e57:	e8 6c fb ff ff       	call   c00089c8 <VgaText::putchar(char)>
c0008e5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e5f:	e8 0c 77 ff ff       	call   c0000570 <strlen>
c0008e64:	83 c4 10             	add    esp,0x10
c0008e67:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e6f:	83 fa 0d             	cmp    edx,0xd
c0008e72:	89 d0                	mov    eax,edx
c0008e74:	0f 95 c1             	setne  cl
c0008e77:	83 fa 1f             	cmp    edx,0x1f
c0008e7a:	0f 9e c2             	setle  dl
c0008e7d:	0f b6 d2             	movzx  edx,dl
c0008e80:	85 ca                	test   edx,ecx
c0008e82:	74 17                	je     c0008e9b <VgaText::receiveKey(unsigned char)+0x85>
c0008e84:	83 e8 08             	sub    eax,0x8
c0008e87:	3c 02                	cmp    al,0x2
c0008e89:	76 10                	jbe    c0008e9b <VgaText::receiveKey(unsigned char)+0x85>
c0008e8b:	55                   	push   ebp
c0008e8c:	55                   	push   ebp
c0008e8d:	68 e7 0f 02 c0       	push   0xc0020fe7
c0008e92:	53                   	push   ebx
c0008e93:	e8 6e fc ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0008e98:	83 c4 10             	add    esp,0x10
c0008e9b:	83 ec 0c             	sub    esp,0xc
c0008e9e:	56                   	push   esi
c0008e9f:	e8 cc 76 ff ff       	call   c0000570 <strlen>
c0008ea4:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008eac:	e9 a0 00 00 00       	jmp    c0008f51 <VgaText::receiveKey(unsigned char)+0x13b>
c0008eb1:	83 ec 0c             	sub    esp,0xc
c0008eb4:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008eba:	50                   	push   eax
c0008ebb:	e8 b0 76 ff ff       	call   c0000570 <strlen>
c0008ec0:	89 34 24             	mov    DWORD PTR [esp],esi
c0008ec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ec7:	e8 a4 76 ff ff       	call   c0000570 <strlen>
c0008ecc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008ed7:	3d 80 00 00 00       	cmp    eax,0x80
c0008edc:	0f 87 b7 00 00 00    	ja     c0008f99 <VgaText::receiveKey(unsigned char)+0x183>
c0008ee2:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008ee5:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008ee8:	3c 1e                	cmp    al,0x1e
c0008eea:	0f 96 c0             	setbe  al
c0008eed:	80 fa 01             	cmp    dl,0x1
c0008ef0:	0f 97 c2             	seta   dl
c0008ef3:	0f b6 d2             	movzx  edx,dl
c0008ef6:	85 c2                	test   edx,eax
c0008ef8:	74 2e                	je     c0008f28 <VgaText::receiveKey(unsigned char)+0x112>
c0008efa:	83 ff 0d             	cmp    edi,0xd
c0008efd:	74 29                	je     c0008f28 <VgaText::receiveKey(unsigned char)+0x112>
c0008eff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008f02:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008f05:	68 ed 0f 02 c0       	push   0xc0020fed
c0008f0a:	53                   	push   ebx
c0008f0b:	e8 68 fc ff ff       	call   c0008b78 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008f10:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008f13:	8d 45 40             	lea    eax,[ebp+0x40]
c0008f16:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008f19:	0f b6 c0             	movzx  eax,al
c0008f1c:	50                   	push   eax
c0008f1d:	53                   	push   ebx
c0008f1e:	e8 d5 f9 ff ff       	call   c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008f23:	83 c4 20             	add    esp,0x20
c0008f26:	eb 11                	jmp    c0008f39 <VgaText::receiveKey(unsigned char)+0x123>
c0008f28:	89 e8                	mov    eax,ebp
c0008f2a:	51                   	push   ecx
c0008f2b:	0f be c0             	movsx  eax,al
c0008f2e:	51                   	push   ecx
c0008f2f:	50                   	push   eax
c0008f30:	53                   	push   ebx
c0008f31:	e8 92 fa ff ff       	call   c00089c8 <VgaText::putchar(char)>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008f3e:	89 e8                	mov    eax,ebp
c0008f40:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008f44:	52                   	push   edx
c0008f45:	52                   	push   edx
c0008f46:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008f4a:	50                   	push   eax
c0008f4b:	56                   	push   esi
c0008f4c:	e8 ef 78 ff ff       	call   c0000840 <strcat>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008f5a:	b0 01                	mov    al,0x1
c0008f5c:	83 ff 1c             	cmp    edi,0x1c
c0008f5f:	77 0e                	ja     c0008f6f <VgaText::receiveKey(unsigned char)+0x159>
c0008f61:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f66:	89 f9                	mov    ecx,edi
c0008f68:	d3 e8                	shr    eax,cl
c0008f6a:	f7 d0                	not    eax
c0008f6c:	83 e0 01             	and    eax,0x1
c0008f6f:	84 c0                	test   al,al
c0008f71:	74 04                	je     c0008f77 <VgaText::receiveKey(unsigned char)+0x161>
c0008f73:	84 d2                	test   dl,dl
c0008f75:	74 22                	je     c0008f99 <VgaText::receiveKey(unsigned char)+0x183>
c0008f77:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f7d:	50                   	push   eax
c0008f7e:	50                   	push   eax
c0008f7f:	56                   	push   esi
c0008f80:	53                   	push   ebx
c0008f81:	e8 ba 78 ff ff       	call   c0000840 <strcat>
c0008f86:	83 c4 0c             	add    esp,0xc
c0008f89:	68 80 00 00 00       	push   0x80
c0008f8e:	6a 00                	push   0x0
c0008f90:	56                   	push   esi
c0008f91:	e8 5a 75 ff ff       	call   c00004f0 <memset>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	83 c4 2c             	add    esp,0x2c
c0008f9c:	5b                   	pop    ebx
c0008f9d:	5e                   	pop    esi
c0008f9e:	5f                   	pop    edi
c0008f9f:	5d                   	pop    ebp
c0008fa0:	c3                   	ret    
c0008fa1:	90                   	nop

c0008fa2 <VgaText::doUpdate()>:
c0008fa2:	c3                   	ret    
c0008fa3:	90                   	nop

c0008fa4 <TSS::TSS()>:
c0008fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fa8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008faf:	90                   	nop
c0008fb0:	c3                   	ret    
c0008fb1:	90                   	nop
c0008fb2:	66 90                	xchg   ax,ax

c0008fb4 <TSS::setESP(unsigned long)>:
c0008fb4:	55                   	push   ebp
c0008fb5:	89 e5                	mov    ebp,esp
c0008fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc3:	90                   	nop
c0008fc4:	5d                   	pop    ebp
c0008fc5:	c3                   	ret    
c0008fc6:	66 90                	xchg   ax,ax

c0008fc8 <TSS::flush()>:
c0008fc8:	55                   	push   ebp
c0008fc9:	89 e5                	mov    ebp,esp
c0008fcb:	83 ec 10             	sub    esp,0x10
c0008fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fd3:	83 c8 03             	or     eax,0x3
c0008fd6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008fda:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008fde:	66 89 d0             	mov    ax,dx
c0008fe1:	0f 00 d8             	ltr    ax
c0008fe4:	90                   	nop
c0008fe5:	c9                   	leave  
c0008fe6:	c3                   	ret    
c0008fe7:	90                   	nop

c0008fe8 <TSS::setup(unsigned long, unsigned long)>:
c0008fe8:	55                   	push   ebp
c0008fe9:	89 e5                	mov    ebp,esp
c0008feb:	83 ec 18             	sub    esp,0x18
c0008fee:	83 ec 0c             	sub    esp,0xc
c0008ff1:	6a 68                	push   0x68
c0008ff3:	e8 1e eb ff ff       	call   c0007b16 <malloc>
c0008ff8:	83 c4 10             	add    esp,0x10
c0008ffb:	89 c2                	mov    edx,eax
c0008ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009000:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009009:	83 ec 04             	sub    esp,0x4
c000900c:	6a 68                	push   0x68
c000900e:	6a 00                	push   0x0
c0009010:	50                   	push   eax
c0009011:	e8 da 74 ff ff       	call   c00004f0 <memset>
c0009016:	83 c4 10             	add    esp,0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009067:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000906d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009073:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000907f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000908b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000908e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009097:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000909a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000909d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090a3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00090aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090b0:	0f 20 da             	mov    edx,cr3
c00090b3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00090b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00090b9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00090bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090c2:	83 ec 08             	sub    esp,0x8
c00090c5:	50                   	push   eax
c00090c6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090c9:	50                   	push   eax
c00090ca:	e8 b5 e2 ff ff       	call   c0007384 <GDTEntry::setBase(unsigned int)>
c00090cf:	83 c4 10             	add    esp,0x10
c00090d2:	83 ec 08             	sub    esp,0x8
c00090d5:	6a 68                	push   0x68
c00090d7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090da:	50                   	push   eax
c00090db:	e8 c0 e2 ff ff       	call   c00073a0 <GDTEntry::setLimit(unsigned int)>
c00090e0:	83 c4 10             	add    esp,0x10
c00090e3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090e7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090ea:	83 e0 0f             	and    eax,0xf
c00090ed:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090f0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090f3:	83 c8 40             	or     eax,0x40
c00090f6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090f9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009104:	05 78 01 00 00       	add    eax,0x178
c0009109:	83 ec 04             	sub    esp,0x4
c000910c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000910f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009112:	50                   	push   eax
c0009113:	e8 bc e2 ff ff       	call   c00073d4 <GDT::addEntry(GDTEntry)>
c0009118:	83 c4 10             	add    esp,0x10
c000911b:	89 c2                	mov    edx,eax
c000911d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009120:	89 10                	mov    DWORD PTR [eax],edx
c0009122:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009127:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000912d:	05 78 01 00 00       	add    eax,0x178
c0009132:	83 ec 0c             	sub    esp,0xc
c0009135:	50                   	push   eax
c0009136:	e8 c3 e2 ff ff       	call   c00073fe <GDT::flush()>
c000913b:	83 c4 10             	add    esp,0x10
c000913e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009141:	8b 00                	mov    eax,DWORD PTR [eax]
c0009143:	c9                   	leave  
c0009144:	c3                   	ret    
c0009145:	90                   	nop

c0009146 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000914a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009151:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009156:	75 08                	jne    c0009160 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009158:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915e:	eb 38                	jmp    c0009198 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009160:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009165:	75 17                	jne    c000917e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009175:	8b 10                	mov    edx,DWORD PTR [eax]
c0009177:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000917b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000917e:	89 c1                	mov    ecx,eax
c0009180:	83 e1 fd             	and    ecx,0xfffffffd
c0009183:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009189:	74 cd                	je     c0009158 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000918b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009190:	83 e0 ef             	and    eax,0xffffffef
c0009193:	83 f8 08             	cmp    eax,0x8
c0009196:	76 c0                	jbe    c0009158 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009198:	31 c0                	xor    eax,eax
c000919a:	c3                   	ret    
c000919b:	90                   	nop

c000919c <ReservedFilename::isAtty()>:
c000919c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091a3:	31 c0                	xor    eax,eax
c00091a5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00091ab:	74 09                	je     c00091b6 <ReservedFilename::isAtty()+0x1a>
c00091ad:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00091b3:	0f 94 c0             	sete   al
c00091b6:	c3                   	ret    
c00091b7:	90                   	nop

c00091b8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00091b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00091c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00091c7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00091cc:	75 08                	jne    c00091d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00091ce:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091d4:	eb 3d                	jmp    c0009213 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091d6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091db:	75 17                	jne    c00091f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00091ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091f1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091f9:	75 04                	jne    c00091ff <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091fb:	89 0a                	mov    DWORD PTR [edx],ecx
c00091fd:	eb 14                	jmp    c0009213 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091ff:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009204:	74 c8                	je     c00091ce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009206:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000920b:	83 e0 ef             	and    eax,0xffffffef
c000920e:	83 f8 08             	cmp    eax,0x8
c0009211:	76 bb                	jbe    c00091ce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009213:	31 c0                	xor    eax,eax
c0009215:	c3                   	ret    

c0009216 <UnixFile::getFileDescriptor()>:
c0009216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000921a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000921d:	c3                   	ret    

c000921e <UnixFile::UnixFile(int)>:
c000921e:	53                   	push   ebx
c000921f:	83 ec 28             	sub    esp,0x28
c0009222:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c0009227:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000922b:	89 10                	mov    DWORD PTR [eax],edx
c000922d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009235:	0f 8f 90 01 00 00    	jg     c00093cb <UnixFile::UnixFile(int)+0x1ad>
c000923b:	a1 80 38 02 c0       	mov    eax,ds:0xc0023880
c0009240:	8d 50 01             	lea    edx,[eax+0x1]
c0009243:	89 15 80 38 02 c0    	mov    DWORD PTR ds:0xc0023880,edx
c0009249:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000924d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009250:	83 ec 08             	sub    esp,0x8
c0009253:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009257:	68 98 6f 02 c0       	push   0xc0026f98
c000925c:	e8 d7 68 01 00       	call   c001fb38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009269:	83 f0 01             	xor    eax,0x1
c000926c:	0f b6 c0             	movzx  eax,al
c000926f:	85 c0                	test   eax,eax
c0009271:	0f 84 55 01 00 00    	je     c00093cc <UnixFile::UnixFile(int)+0x1ae>
c0009277:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000927e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000928d:	e8 84 e8 ff ff       	call   c0007b16 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 03 ff ff 0f       	push   0xfffff03
c000929f:	53                   	push   ebx
c00092a0:	e8 2d 01 00 00       	call   c00093d2 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c00092ae:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092bd:	e8 54 e8 ff ff       	call   c0007b16 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 01 ff ff 0f       	push   0xfffff01
c00092cf:	53                   	push   ebx
c00092d0:	e8 fd 00 00 00       	call   c00093d2 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c00092de:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00092e6:	83 ec 0c             	sub    esp,0xc
c00092e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092ed:	e8 24 e8 ff ff       	call   c0007b16 <malloc>
c00092f2:	83 c4 10             	add    esp,0x10
c00092f5:	89 c3                	mov    ebx,eax
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	68 00 ff ff 0f       	push   0xfffff00
c00092ff:	53                   	push   ebx
c0009300:	e8 cd 00 00 00       	call   c00093d2 <ReservedFilename::ReservedFilename(int)>
c0009305:	83 c4 10             	add    esp,0x10
c0009308:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c000930e:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009316:	83 ec 0c             	sub    esp,0xc
c0009319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931d:	e8 f4 e7 ff ff       	call   c0007b16 <malloc>
c0009322:	83 c4 10             	add    esp,0x10
c0009325:	89 c3                	mov    ebx,eax
c0009327:	83 ec 08             	sub    esp,0x8
c000932a:	68 02 ff ff 0f       	push   0xfffff02
c000932f:	53                   	push   ebx
c0009330:	e8 9d 00 00 00       	call   c00093d2 <ReservedFilename::ReservedFilename(int)>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c000933e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009346:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000934b:	7f 7f                	jg     c00093cc <UnixFile::UnixFile(int)+0x1ae>
c000934d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009355:	83 ec 0c             	sub    esp,0xc
c0009358:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000935c:	e8 b5 e7 ff ff       	call   c0007b16 <malloc>
c0009361:	83 c4 10             	add    esp,0x10
c0009364:	89 c3                	mov    ebx,eax
c0009366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000936a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000936f:	83 ec 08             	sub    esp,0x8
c0009372:	50                   	push   eax
c0009373:	53                   	push   ebx
c0009374:	e8 59 00 00 00       	call   c00093d2 <ReservedFilename::ReservedFilename(int)>
c0009379:	83 c4 10             	add    esp,0x10
c000937c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009380:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009387:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000938f:	83 ec 0c             	sub    esp,0xc
c0009392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009396:	e8 7b e7 ff ff       	call   c0007b16 <malloc>
c000939b:	83 c4 10             	add    esp,0x10
c000939e:	89 c3                	mov    ebx,eax
c00093a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093a4:	05 20 ff ff 0f       	add    eax,0xfffff20
c00093a9:	83 ec 08             	sub    esp,0x8
c00093ac:	50                   	push   eax
c00093ad:	53                   	push   ebx
c00093ae:	e8 1f 00 00 00       	call   c00093d2 <ReservedFilename::ReservedFilename(int)>
c00093b3:	83 c4 10             	add    esp,0x10
c00093b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093ba:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c00093c1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00093c6:	e9 7b ff ff ff       	jmp    c0009346 <UnixFile::UnixFile(int)+0x128>
c00093cb:	90                   	nop
c00093cc:	83 c4 28             	add    esp,0x28
c00093cf:	5b                   	pop    ebx
c00093d0:	c3                   	ret    
c00093d1:	90                   	nop

c00093d2 <ReservedFilename::ReservedFilename(int)>:
c00093d2:	83 ec 0c             	sub    esp,0xc
c00093d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093d9:	83 ec 08             	sub    esp,0x8
c00093dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093e0:	50                   	push   eax
c00093e1:	e8 38 fe ff ff       	call   c000921e <UnixFile::UnixFile(int)>
c00093e6:	83 c4 10             	add    esp,0x10
c00093e9:	ba e0 10 02 c0       	mov    edx,0xc00210e0
c00093ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f2:	89 10                	mov    DWORD PTR [eax],edx
c00093f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093ff:	90                   	nop
c0009400:	83 c4 0c             	add    esp,0xc
c0009403:	c3                   	ret    

c0009404 <UnixFile::~UnixFile()>:
c0009404:	83 ec 1c             	sub    esp,0x1c
c0009407:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c000940c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009410:	89 10                	mov    DWORD PTR [eax],edx
c0009412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009419:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000941e:	7f 76                	jg     c0009496 <UnixFile::~UnixFile()+0x92>
c0009420:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	68 98 6f 02 c0       	push   0xc0026f98
c0009430:	e8 d7 67 01 00       	call   c001fc0c <LinkedList<UnixFile>::getFirstElement()>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000943c:	83 ec 0c             	sub    esp,0xc
c000943f:	68 98 6f 02 c0       	push   0xc0026f98
c0009444:	e8 cb 67 01 00       	call   c001fc14 <LinkedList<UnixFile>::removeFirst()>
c0009449:	83 c4 10             	add    esp,0x10
c000944c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009450:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009454:	74 43                	je     c0009499 <UnixFile::~UnixFile()+0x95>
c0009456:	83 ec 08             	sub    esp,0x8
c0009459:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000945d:	68 98 6f 02 c0       	push   0xc0026f98
c0009462:	e8 d1 66 01 00       	call   c001fb38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000946e:	8d 50 01             	lea    edx,[eax+0x1]
c0009471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009475:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000947a:	0f 94 c0             	sete   al
c000947d:	0f b6 c0             	movzx  eax,al
c0009480:	85 c0                	test   eax,eax
c0009482:	74 a4                	je     c0009428 <UnixFile::~UnixFile()+0x24>
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	68 9c 10 02 c0       	push   0xc002109c
c000948c:	e8 66 82 00 00       	call   c00116f7 <KePanic(char const*)>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	eb 92                	jmp    c0009428 <UnixFile::~UnixFile()+0x24>
c0009496:	90                   	nop
c0009497:	eb 01                	jmp    c000949a <UnixFile::~UnixFile()+0x96>
c0009499:	90                   	nop
c000949a:	90                   	nop
c000949b:	83 c4 1c             	add    esp,0x1c
c000949e:	c3                   	ret    
c000949f:	90                   	nop

c00094a0 <UnixFile::~UnixFile()>:
c00094a0:	83 ec 0c             	sub    esp,0xc
c00094a3:	83 ec 0c             	sub    esp,0xc
c00094a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094aa:	e8 55 ff ff ff       	call   c0009404 <UnixFile::~UnixFile()>
c00094af:	83 c4 10             	add    esp,0x10
c00094b2:	83 ec 08             	sub    esp,0x8
c00094b5:	6a 0c                	push   0xc
c00094b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094bb:	e8 b8 13 00 00       	call   c000a878 <operator delete(void*, unsigned long)>
c00094c0:	83 c4 10             	add    esp,0x10
c00094c3:	83 c4 0c             	add    esp,0xc
c00094c6:	c3                   	ret    
c00094c7:	90                   	nop

c00094c8 <ReservedFilename::~ReservedFilename()>:
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	ba e0 10 02 c0       	mov    edx,0xc00210e0
c00094d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094d4:	89 10                	mov    DWORD PTR [eax],edx
c00094d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	50                   	push   eax
c00094de:	e8 21 ff ff ff       	call   c0009404 <UnixFile::~UnixFile()>
c00094e3:	83 c4 10             	add    esp,0x10
c00094e6:	90                   	nop
c00094e7:	83 c4 0c             	add    esp,0xc
c00094ea:	c3                   	ret    
c00094eb:	90                   	nop

c00094ec <ReservedFilename::~ReservedFilename()>:
c00094ec:	83 ec 0c             	sub    esp,0xc
c00094ef:	83 ec 0c             	sub    esp,0xc
c00094f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094f6:	e8 cd ff ff ff       	call   c00094c8 <ReservedFilename::~ReservedFilename()>
c00094fb:	83 c4 10             	add    esp,0x10
c00094fe:	83 ec 08             	sub    esp,0x8
c0009501:	6a 0c                	push   0xc
c0009503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009507:	e8 6c 13 00 00       	call   c000a878 <operator delete(void*, unsigned long)>
c000950c:	83 c4 10             	add    esp,0x10
c000950f:	83 c4 0c             	add    esp,0xc
c0009512:	c3                   	ret    

c0009513 <KeGetFileFromDescriptor(int)>:
c0009513:	53                   	push   ebx
c0009514:	83 ec 08             	sub    esp,0x8
c0009517:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000951b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009521:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009527:	7f 2c                	jg     c0009555 <KeGetFileFromDescriptor(int)+0x42>
c0009529:	83 ec 0c             	sub    esp,0xc
c000952c:	68 98 6f 02 c0       	push   0xc0026f98
c0009531:	e8 d6 66 01 00       	call   c001fc0c <LinkedList<UnixFile>::getFirstElement()>
c0009536:	83 c4 10             	add    esp,0x10
c0009539:	85 c0                	test   eax,eax
c000953b:	75 04                	jne    c0009541 <KeGetFileFromDescriptor(int)+0x2e>
c000953d:	31 c0                	xor    eax,eax
c000953f:	eb 6e                	jmp    c00095af <KeGetFileFromDescriptor(int)+0x9c>
c0009541:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009544:	74 69                	je     c00095af <KeGetFileFromDescriptor(int)+0x9c>
c0009546:	52                   	push   edx
c0009547:	52                   	push   edx
c0009548:	50                   	push   eax
c0009549:	68 98 6f 02 c0       	push   0xc0026f98
c000954e:	e8 63 67 01 00       	call   c001fcb6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009553:	eb e1                	jmp    c0009536 <KeGetFileFromDescriptor(int)+0x23>
c0009555:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c000955a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009560:	74 4d                	je     c00095af <KeGetFileFromDescriptor(int)+0x9c>
c0009562:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009567:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000956d:	74 40                	je     c00095af <KeGetFileFromDescriptor(int)+0x9c>
c000956f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009574:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000957a:	74 33                	je     c00095af <KeGetFileFromDescriptor(int)+0x9c>
c000957c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009581:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009587:	74 26                	je     c00095af <KeGetFileFromDescriptor(int)+0x9c>
c0009589:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000958f:	83 f8 08             	cmp    eax,0x8
c0009592:	77 09                	ja     c000959d <KeGetFileFromDescriptor(int)+0x8a>
c0009594:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000959b:	eb 12                	jmp    c00095af <KeGetFileFromDescriptor(int)+0x9c>
c000959d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00095a3:	83 fb 08             	cmp    ebx,0x8
c00095a6:	77 95                	ja     c000953d <KeGetFileFromDescriptor(int)+0x2a>
c00095a8:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c00095af:	83 c4 08             	add    esp,0x8
c00095b2:	5b                   	pop    ebx
c00095b3:	c3                   	ret    

c00095b4 <__static_initialization_and_destruction_0(int, int)>:
c00095b4:	83 ec 0c             	sub    esp,0xc
c00095b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095bc:	75 34                	jne    c00095f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00095be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00095c6:	75 2a                	jne    c00095f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00095c8:	83 ec 0c             	sub    esp,0xc
c00095cb:	68 98 6f 02 c0       	push   0xc0026f98
c00095d0:	e8 21 65 01 00       	call   c001faf6 <LinkedList<UnixFile>::LinkedList()>
c00095d5:	83 c4 10             	add    esp,0x10
c00095d8:	83 ec 04             	sub    esp,0x4
c00095db:	68 04 38 02 c0       	push   0xc0023804
c00095e0:	68 98 6f 02 c0       	push   0xc0026f98
c00095e5:	68 f4 fa 01 c0       	push   0xc001faf4
c00095ea:	e8 39 12 00 00       	call   c000a828 <__cxa_atexit>
c00095ef:	83 c4 10             	add    esp,0x10
c00095f2:	90                   	nop
c00095f3:	83 c4 0c             	add    esp,0xc
c00095f6:	c3                   	ret    

c00095f7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095f7:	83 ec 0c             	sub    esp,0xc
c00095fa:	83 ec 08             	sub    esp,0x8
c00095fd:	68 ff ff 00 00       	push   0xffff
c0009602:	6a 01                	push   0x1
c0009604:	e8 ab ff ff ff       	call   c00095b4 <__static_initialization_and_destruction_0(int, int)>
c0009609:	83 c4 10             	add    esp,0x10
c000960c:	83 c4 0c             	add    esp,0xc
c000960f:	c3                   	ret    

c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009610:	53                   	push   ebx
c0009611:	8b 15 88 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023888
c0009617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000961b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000961f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0009625:	89 d8                	mov    eax,ebx
c0009627:	d1 e8                	shr    eax,1
c0009629:	01 d0                	add    eax,edx
c000962b:	80 e3 01             	and    bl,0x1
c000962e:	8a 10                	mov    dl,BYTE PTR [eax]
c0009630:	75 09                	jne    c000963b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0009632:	83 e2 f0             	and    edx,0xfffffff0
c0009635:	09 ca                	or     edx,ecx
c0009637:	88 10                	mov    BYTE PTR [eax],dl
c0009639:	5b                   	pop    ebx
c000963a:	c3                   	ret    
c000963b:	83 e2 0f             	and    edx,0xf
c000963e:	0f b6 c9             	movzx  ecx,cl
c0009641:	c1 e1 04             	shl    ecx,0x4
c0009644:	09 ca                	or     edx,ecx
c0009646:	88 10                	mov    BYTE PTR [eax],dl
c0009648:	5b                   	pop    ebx
c0009649:	c3                   	ret    

c000964a <Virt::getPageState(unsigned long)>:
c000964a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000964e:	8b 0d 88 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023888
c0009654:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000965a:	89 d0                	mov    eax,edx
c000965c:	d1 e8                	shr    eax,1
c000965e:	80 e2 01             	and    dl,0x1
c0009661:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009664:	74 03                	je     c0009669 <Virt::getPageState(unsigned long)+0x1f>
c0009666:	c1 e8 04             	shr    eax,0x4
c0009669:	83 e0 0f             	and    eax,0xf
c000966c:	c3                   	ret    

c000966d <Virt::allocateKernelVirtualPages(int)>:
c000966d:	55                   	push   ebp
c000966e:	31 ed                	xor    ebp,ebp
c0009670:	57                   	push   edi
c0009671:	31 ff                	xor    edi,edi
c0009673:	56                   	push   esi
c0009674:	53                   	push   ebx
c0009675:	31 db                	xor    ebx,ebx
c0009677:	83 ec 0c             	sub    esp,0xc
c000967a:	8b 35 84 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023884
c0009680:	56                   	push   esi
c0009681:	e8 c4 ff ff ff       	call   c000964a <Virt::getPageState(unsigned long)>
c0009686:	5a                   	pop    edx
c0009687:	84 c0                	test   al,al
c0009689:	75 41                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0x5f>
c000968b:	85 db                	test   ebx,ebx
c000968d:	75 02                	jne    c0009691 <Virt::allocateKernelVirtualPages(int)+0x24>
c000968f:	89 f5                	mov    ebp,esi
c0009691:	83 c3 01             	add    ebx,0x1
c0009694:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009698:	74 5f                	je     c00096f9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000969a:	83 c6 01             	add    esi,0x1
c000969d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00096a3:	76 34                	jbe    c00096d9 <Virt::allocateKernelVirtualPages(int)+0x6c>
c00096a5:	c7 05 84 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023884,0xc8000
c00096af:	f7 c7 01 00 00 00    	test   edi,0x1
c00096b5:	75 2a                	jne    c00096e1 <Virt::allocateKernelVirtualPages(int)+0x74>
c00096b7:	be 00 80 0c 00       	mov    esi,0xc8000
c00096bc:	bf 01 00 00 00       	mov    edi,0x1
c00096c1:	56                   	push   esi
c00096c2:	e8 83 ff ff ff       	call   c000964a <Virt::getPageState(unsigned long)>
c00096c7:	5a                   	pop    edx
c00096c8:	84 c0                	test   al,al
c00096ca:	74 bf                	je     c000968b <Virt::allocateKernelVirtualPages(int)+0x1e>
c00096cc:	31 db                	xor    ebx,ebx
c00096ce:	83 c6 01             	add    esi,0x1
c00096d1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00096d7:	77 cc                	ja     c00096a5 <Virt::allocateKernelVirtualPages(int)+0x38>
c00096d9:	89 35 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,esi
c00096df:	eb 9f                	jmp    c0009680 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096e1:	83 ec 0c             	sub    esp,0xc
c00096e4:	68 f4 10 02 c0       	push   0xc00210f4
c00096e9:	e8 09 80 00 00       	call   c00116f7 <KePanic(char const*)>
c00096ee:	8b 35 84 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023884
c00096f4:	83 c4 10             	add    esp,0x10
c00096f7:	eb 87                	jmp    c0009680 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096f9:	89 2d 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,ebp
c00096ff:	83 fb 01             	cmp    ebx,0x1
c0009702:	74 6f                	je     c0009773 <Virt::allocateKernelVirtualPages(int)+0x106>
c0009704:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009708:	85 c9                	test   ecx,ecx
c000970a:	74 49                	je     c0009755 <Virt::allocateKernelVirtualPages(int)+0xe8>
c000970c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009710:	89 e8                	mov    eax,ebp
c0009712:	31 db                	xor    ebx,ebx
c0009714:	8d 79 ff             	lea    edi,[ecx-0x1]
c0009717:	eb 18                	jmp    c0009731 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0009719:	6a 01                	push   0x1
c000971b:	83 c3 01             	add    ebx,0x1
c000971e:	50                   	push   eax
c000971f:	e8 ec fe ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009724:	58                   	pop    eax
c0009725:	5a                   	pop    edx
c0009726:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000972a:	74 29                	je     c0009755 <Virt::allocateKernelVirtualPages(int)+0xe8>
c000972c:	a1 84 38 02 c0       	mov    eax,ds:0xc0023884
c0009731:	8d 50 01             	lea    edx,[eax+0x1]
c0009734:	85 db                	test   ebx,ebx
c0009736:	89 15 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,edx
c000973c:	74 24                	je     c0009762 <Virt::allocateKernelVirtualPages(int)+0xf5>
c000973e:	39 df                	cmp    edi,ebx
c0009740:	75 d7                	jne    c0009719 <Virt::allocateKernelVirtualPages(int)+0xac>
c0009742:	6a 03                	push   0x3
c0009744:	83 c3 01             	add    ebx,0x1
c0009747:	50                   	push   eax
c0009748:	e8 c3 fe ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000974d:	59                   	pop    ecx
c000974e:	5e                   	pop    esi
c000974f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009753:	75 d7                	jne    c000972c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009755:	83 c4 0c             	add    esp,0xc
c0009758:	89 e8                	mov    eax,ebp
c000975a:	5b                   	pop    ebx
c000975b:	c1 e0 0c             	shl    eax,0xc
c000975e:	5e                   	pop    esi
c000975f:	5f                   	pop    edi
c0009760:	5d                   	pop    ebp
c0009761:	c3                   	ret    
c0009762:	6a 02                	push   0x2
c0009764:	bb 01 00 00 00       	mov    ebx,0x1
c0009769:	50                   	push   eax
c000976a:	e8 a1 fe ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000976f:	58                   	pop    eax
c0009770:	5a                   	pop    edx
c0009771:	eb b9                	jmp    c000972c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009773:	6a 04                	push   0x4
c0009775:	8d 45 01             	lea    eax,[ebp+0x1]
c0009778:	55                   	push   ebp
c0009779:	a3 84 38 02 c0       	mov    ds:0xc0023884,eax
c000977e:	e8 8d fe ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009783:	5b                   	pop    ebx
c0009784:	89 e8                	mov    eax,ebp
c0009786:	5e                   	pop    esi
c0009787:	c1 e0 0c             	shl    eax,0xc
c000978a:	83 c4 0c             	add    esp,0xc
c000978d:	5b                   	pop    ebx
c000978e:	5e                   	pop    esi
c000978f:	5f                   	pop    edi
c0009790:	5d                   	pop    ebp
c0009791:	c3                   	ret    

c0009792 <Virt::freeSwapfilePage(unsigned long)>:
c0009792:	53                   	push   ebx
c0009793:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009799:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000979d:	b8 01 00 00 00       	mov    eax,0x1
c00097a2:	89 cb                	mov    ebx,ecx
c00097a4:	d3 e0                	shl    eax,cl
c00097a6:	c1 eb 05             	shr    ebx,0x5
c00097a9:	f7 d0                	not    eax
c00097ab:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00097ae:	21 c1                	and    ecx,eax
c00097b0:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00097b3:	5b                   	pop    ebx
c00097b4:	c3                   	ret    

c00097b5 <Virt::swapIDToSector(unsigned long)>:
c00097b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097b9:	8b 15 8c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002388c
c00097bf:	8b 0d 94 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023894
c00097c5:	0f af c2             	imul   eax,edx
c00097c8:	01 c8                	add    eax,ecx
c00097ca:	c3                   	ret    

c00097cb <Virt::allocateSwapfilePage()>:
c00097cb:	55                   	push   ebp
c00097cc:	31 d2                	xor    edx,edx
c00097ce:	57                   	push   edi
c00097cf:	56                   	push   esi
c00097d0:	53                   	push   ebx
c00097d1:	83 ec 0c             	sub    esp,0xc
c00097d4:	8b 0d 8c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002388c
c00097da:	a1 90 38 02 c0       	mov    eax,ds:0xc0023890
c00097df:	f7 f1                	div    ecx
c00097e1:	39 0d 90 38 02 c0    	cmp    DWORD PTR ds:0xc0023890,ecx
c00097e7:	72 2f                	jb     c0009818 <Virt::allocateSwapfilePage()+0x4d>
c00097e9:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c00097ef:	8b 16                	mov    edx,DWORD PTR [esi]
c00097f1:	f6 c2 01             	test   dl,0x1
c00097f4:	74 3e                	je     c0009834 <Virt::allocateSwapfilePage()+0x69>
c00097f6:	31 c9                	xor    ecx,ecx
c00097f8:	bf 01 00 00 00       	mov    edi,0x1
c00097fd:	eb 12                	jmp    c0009811 <Virt::allocateSwapfilePage()+0x46>
c00097ff:	89 fd                	mov    ebp,edi
c0009801:	89 ca                	mov    edx,ecx
c0009803:	d3 e5                	shl    ebp,cl
c0009805:	c1 ea 05             	shr    edx,0x5
c0009808:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000980b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000980d:	85 ea                	test   edx,ebp
c000980f:	74 2c                	je     c000983d <Virt::allocateSwapfilePage()+0x72>
c0009811:	83 c1 01             	add    ecx,0x1
c0009814:	39 c8                	cmp    eax,ecx
c0009816:	77 e7                	ja     c00097ff <Virt::allocateSwapfilePage()+0x34>
c0009818:	83 ec 0c             	sub    esp,0xc
c000981b:	68 88 13 02 c0       	push   0xc0021388
c0009820:	e8 d2 7e 00 00       	call   c00116f7 <KePanic(char const*)>
c0009825:	83 c4 10             	add    esp,0x10
c0009828:	31 c9                	xor    ecx,ecx
c000982a:	83 c4 0c             	add    esp,0xc
c000982d:	89 c8                	mov    eax,ecx
c000982f:	5b                   	pop    ebx
c0009830:	5e                   	pop    esi
c0009831:	5f                   	pop    edi
c0009832:	5d                   	pop    ebp
c0009833:	c3                   	ret    
c0009834:	89 f3                	mov    ebx,esi
c0009836:	bd 01 00 00 00       	mov    ebp,0x1
c000983b:	31 c9                	xor    ecx,ecx
c000983d:	09 ea                	or     edx,ebp
c000983f:	89 c8                	mov    eax,ecx
c0009841:	89 13                	mov    DWORD PTR [ebx],edx
c0009843:	83 c4 0c             	add    esp,0xc
c0009846:	5b                   	pop    ebx
c0009847:	5e                   	pop    esi
c0009848:	5f                   	pop    edi
c0009849:	5d                   	pop    ebp
c000984a:	c3                   	ret    

c000984b <Virt::virtualMemorySetup()>:
c000984b:	53                   	push   ebx
c000984c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009851:	6a 0f                	push   0xf
c0009853:	53                   	push   ebx
c0009854:	83 c3 01             	add    ebx,0x1
c0009857:	e8 b4 fd ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000985c:	58                   	pop    eax
c000985d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009863:	5a                   	pop    edx
c0009864:	75 eb                	jne    c0009851 <Virt::virtualMemorySetup()+0x6>
c0009866:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000986b:	6a 00                	push   0x0
c000986d:	53                   	push   ebx
c000986e:	83 c3 01             	add    ebx,0x1
c0009871:	e8 9a fd ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009876:	59                   	pop    ecx
c0009877:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000987d:	58                   	pop    eax
c000987e:	75 eb                	jne    c000986b <Virt::virtualMemorySetup()+0x20>
c0009880:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009885:	6a 0f                	push   0xf
c0009887:	53                   	push   ebx
c0009888:	83 c3 01             	add    ebx,0x1
c000988b:	e8 80 fd ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009890:	58                   	pop    eax
c0009891:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009897:	5a                   	pop    edx
c0009898:	75 eb                	jne    c0009885 <Virt::virtualMemorySetup()+0x3a>
c000989a:	5b                   	pop    ebx
c000989b:	c3                   	ret    

c000989c <Virt::setupPageSwapping(int)>:
c000989c:	53                   	push   ebx
c000989d:	83 ec 0c             	sub    esp,0xc
c00098a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00098a4:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c00098a9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00098af:	8b 10                	mov    edx,DWORD PTR [eax]
c00098b1:	53                   	push   ebx
c00098b2:	c1 e3 0b             	shl    ebx,0xb
c00098b5:	68 9f 13 02 c0       	push   0xc002139f
c00098ba:	50                   	push   eax
c00098bb:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00098be:	89 1d 90 38 02 c0    	mov    DWORD PTR ds:0xc0023890,ebx
c00098c4:	c6 05 98 38 02 c0 43 	mov    BYTE PTR ds:0xc0023898,0x43
c00098cb:	c1 eb 08             	shr    ebx,0x8
c00098ce:	a3 94 38 02 c0       	mov    ds:0xc0023894,eax
c00098d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098d6:	c7 05 8c 38 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002388c,0x8
c00098e0:	e8 31 e2 ff ff       	call   c0007b16 <malloc>
c00098e5:	83 c4 0c             	add    esp,0xc
c00098e8:	89 c1                	mov    ecx,eax
c00098ea:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c00098ef:	31 d2                	xor    edx,edx
c00098f1:	a1 90 38 02 c0       	mov    eax,ds:0xc0023890
c00098f6:	f7 35 8c 38 02 c0    	div    DWORD PTR ds:0xc002388c
c00098fc:	c1 e8 05             	shr    eax,0x5
c00098ff:	50                   	push   eax
c0009900:	6a 00                	push   0x0
c0009902:	51                   	push   ecx
c0009903:	e8 e8 6b ff ff       	call   c00004f0 <memset>
c0009908:	83 c4 18             	add    esp,0x18
c000990b:	5b                   	pop    ebx
c000990c:	c3                   	ret    
c000990d:	90                   	nop

c000990e <VAS::setCPUSpecific(unsigned long)>:
c000990e:	c3                   	ret    
c000990f:	90                   	nop

c0009910 <VAS::VAS(VAS*)>:
c0009910:	83 ec 0c             	sub    esp,0xc
c0009913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009917:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000991e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009922:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009929:	83 ec 0c             	sub    esp,0xc
c000992c:	68 14 11 02 c0       	push   0xc0021114
c0009931:	e8 c1 7d 00 00       	call   c00116f7 <KePanic(char const*)>
c0009936:	83 c4 10             	add    esp,0x10
c0009939:	90                   	nop
c000993a:	83 c4 0c             	add    esp,0xc
c000993d:	c3                   	ret    

c000993e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000993e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009942:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0009947:	89 c2                	mov    edx,eax
c0009949:	c1 e8 0a             	shr    eax,0xa
c000994c:	c1 ea 16             	shr    edx,0x16
c000994f:	83 f9 01             	cmp    ecx,0x1
c0009952:	19 c9                	sbb    ecx,ecx
c0009954:	c1 e2 0c             	shl    edx,0xc
c0009957:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000995d:	25 fc 0f 00 00       	and    eax,0xffc
c0009962:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009969:	01 d0                	add    eax,edx
c000996b:	c3                   	ret    

c000996c <VAS::getPageTableEntry(unsigned long)>:
c000996c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009970:	89 ca                	mov    edx,ecx
c0009972:	c1 e9 0a             	shr    ecx,0xa
c0009975:	c1 ea 16             	shr    edx,0x16
c0009978:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000997e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009984:	c1 e0 0c             	shl    eax,0xc
c0009987:	8d 04 08             	lea    eax,[eax+ecx*1]
c000998a:	c3                   	ret    

c000998b <Virt::freeKernelVirtualPages(unsigned long)>:
c000998b:	55                   	push   ebp
c000998c:	57                   	push   edi
c000998d:	bf 01 00 00 00       	mov    edi,0x1
c0009992:	56                   	push   esi
c0009993:	53                   	push   ebx
c0009994:	83 ec 1c             	sub    esp,0x1c
c0009997:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000999b:	c1 ee 0c             	shr    esi,0xc
c000999e:	eb 48                	jmp    c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00099a0:	83 ec 08             	sub    esp,0x8
c00099a3:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00099a8:	55                   	push   ebp
c00099a9:	50                   	push   eax
c00099aa:	e8 bd ff ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c00099af:	83 c4 10             	add    esp,0x10
c00099b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00099b4:	f6 c6 04             	test   dh,0x4
c00099b7:	75 70                	jne    c0009a29 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099bf:	83 fb 04             	cmp    ebx,0x4
c00099c2:	0f 84 8a 00 00 00    	je     c0009a52 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00099c8:	83 fb 02             	cmp    ebx,0x2
c00099cb:	0f 84 9a 00 00 00    	je     c0009a6b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00099d1:	83 fb 03             	cmp    ebx,0x3
c00099d4:	0f 84 be 00 00 00    	je     c0009a98 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00099da:	83 fb 01             	cmp    ebx,0x1
c00099dd:	0f 84 a2 00 00 00    	je     c0009a85 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099e3:	83 c6 01             	add    esi,0x1
c00099e6:	31 ff                	xor    edi,edi
c00099e8:	56                   	push   esi
c00099e9:	89 f5                	mov    ebp,esi
c00099eb:	e8 5a fc ff ff       	call   c000964a <Virt::getPageState(unsigned long)>
c00099f0:	c1 e5 0c             	shl    ebp,0xc
c00099f3:	0f b6 d8             	movzx  ebx,al
c00099f6:	5a                   	pop    edx
c00099f7:	85 db                	test   ebx,ebx
c00099f9:	75 a5                	jne    c00099a0 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00099fb:	83 ec 0c             	sub    esp,0xc
c00099fe:	68 b6 13 02 c0       	push   0xc00213b6
c0009a03:	e8 ef 7c 00 00       	call   c00116f7 <KePanic(char const*)>
c0009a08:	5a                   	pop    edx
c0009a09:	59                   	pop    ecx
c0009a0a:	55                   	push   ebp
c0009a0b:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c0009a11:	55                   	push   ebp
c0009a12:	e8 55 ff ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c0009a17:	83 c4 10             	add    esp,0x10
c0009a1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a1c:	f6 c6 04             	test   dh,0x4
c0009a1f:	75 08                	jne    c0009a29 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009a21:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a27:	eb ba                	jmp    c00099e3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a2d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009a33:	83 ec 0c             	sub    esp,0xc
c0009a36:	52                   	push   edx
c0009a37:	e8 7a e3 ff ff       	call   c0007db6 <Phys::freePage(unsigned long)>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	83 fb 04             	cmp    ebx,0x4
c0009a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a4c:	0f 85 76 ff ff ff    	jne    c00099c8 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0009a52:	83 e7 01             	and    edi,0x1
c0009a55:	75 46                	jne    c0009a9d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0009a57:	c7 44 24 30 38 11 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021138
c0009a5f:	83 c4 1c             	add    esp,0x1c
c0009a62:	5b                   	pop    ebx
c0009a63:	5e                   	pop    esi
c0009a64:	5f                   	pop    edi
c0009a65:	5d                   	pop    ebp
c0009a66:	e9 8c 7c 00 00       	jmp    c00116f7 <KePanic(char const*)>
c0009a6b:	83 e7 01             	and    edi,0x1
c0009a6e:	75 15                	jne    c0009a85 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a70:	83 ec 0c             	sub    esp,0xc
c0009a73:	68 d2 13 02 c0       	push   0xc00213d2
c0009a78:	e8 7a 7c 00 00       	call   c00116f7 <KePanic(char const*)>
c0009a7d:	83 c4 10             	add    esp,0x10
c0009a80:	e9 5e ff ff ff       	jmp    c00099e3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a85:	83 ec 08             	sub    esp,0x8
c0009a88:	6a 00                	push   0x0
c0009a8a:	56                   	push   esi
c0009a8b:	e8 80 fb ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a90:	83 c4 10             	add    esp,0x10
c0009a93:	e9 4b ff ff ff       	jmp    c00099e3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a98:	83 e7 01             	and    edi,0x1
c0009a9b:	75 16                	jne    c0009ab3 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a9d:	83 ec 08             	sub    esp,0x8
c0009aa0:	6a 00                	push   0x0
c0009aa2:	56                   	push   esi
c0009aa3:	e8 68 fb ff ff       	call   c0009610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009aa8:	83 c4 10             	add    esp,0x10
c0009aab:	83 c4 1c             	add    esp,0x1c
c0009aae:	5b                   	pop    ebx
c0009aaf:	5e                   	pop    esi
c0009ab0:	5f                   	pop    edi
c0009ab1:	5d                   	pop    ebp
c0009ab2:	c3                   	ret    
c0009ab3:	c7 44 24 30 ee 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc00213ee
c0009abb:	83 c4 1c             	add    esp,0x1c
c0009abe:	5b                   	pop    ebx
c0009abf:	5e                   	pop    esi
c0009ac0:	5f                   	pop    edi
c0009ac1:	5d                   	pop    ebp
c0009ac2:	e9 30 7c 00 00       	jmp    c00116f7 <KePanic(char const*)>
c0009ac7:	90                   	nop

c0009ac8 <VAS::freeAllocatedPages(unsigned long)>:
c0009ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ad0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009ad4:	74 09                	je     c0009adf <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009ad6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009ada:	e9 ac fe ff ff       	jmp    c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c0009adf:	c7 44 24 04 5c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002115c
c0009ae7:	e9 b9 0e 00 00       	jmp    c000a9a5 <Dbg::kprintf(char const*, ...)>

c0009aec <VAS::virtualToPhysical(unsigned long)>:
c0009aec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009af0:	50                   	push   eax
c0009af1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009af5:	52                   	push   edx
c0009af6:	e8 71 fe ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c0009afb:	59                   	pop    ecx
c0009afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009afe:	5a                   	pop    edx
c0009aff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b04:	c3                   	ret    
c0009b05:	90                   	nop

c0009b06 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009b06:	55                   	push   ebp
c0009b07:	57                   	push   edi
c0009b08:	56                   	push   esi
c0009b09:	53                   	push   ebx
c0009b0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b0e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009b12:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009b16:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009b1a:	85 db                	test   ebx,ebx
c0009b1c:	7e 24                	jle    c0009b42 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009b1e:	c1 e3 0c             	shl    ebx,0xc
c0009b21:	01 f3                	add    ebx,esi
c0009b23:	56                   	push   esi
c0009b24:	81 c6 00 10 00 00    	add    esi,0x1000
c0009b2a:	55                   	push   ebp
c0009b2b:	e8 3c fe ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c0009b30:	5a                   	pop    edx
c0009b31:	59                   	pop    ecx
c0009b32:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009b38:	21 f9                	and    ecx,edi
c0009b3a:	09 d1                	or     ecx,edx
c0009b3c:	39 f3                	cmp    ebx,esi
c0009b3e:	89 08                	mov    DWORD PTR [eax],ecx
c0009b40:	75 e1                	jne    c0009b23 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009b42:	5b                   	pop    ebx
c0009b43:	5e                   	pop    esi
c0009b44:	5f                   	pop    edi
c0009b45:	5d                   	pop    ebp
c0009b46:	c3                   	ret    
c0009b47:	90                   	nop

c0009b48 <VAS::VAS()>:
c0009b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b62:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b73:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b7a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b81:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b86:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b8b:	29 c2                	sub    edx,eax
c0009b8d:	89 d0                	mov    eax,edx
c0009b8f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b94:	c1 e8 0c             	shr    eax,0xc
c0009b97:	89 c2                	mov    edx,eax
c0009b99:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b9e:	6a 04                	push   0x4
c0009ba0:	6a ff                	push   0xffffffff
c0009ba2:	52                   	push   edx
c0009ba3:	50                   	push   eax
c0009ba4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ba8:	e8 59 ff ff ff       	call   c0009b06 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009bad:	83 c4 14             	add    esp,0x14
c0009bb0:	90                   	nop
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::setToWriteCombining(unsigned long, int)>:
c0009bb2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009bb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bbd:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009bc4:	75 01                	jne    c0009bc7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009bc6:	c3                   	ret    
c0009bc7:	68 80 00 00 00       	push   0x80
c0009bcc:	6a ff                	push   0xffffffff
c0009bce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009bd2:	50                   	push   eax
c0009bd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009bd7:	52                   	push   edx
c0009bd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009bdc:	51                   	push   ecx
c0009bdd:	e8 24 ff ff ff       	call   c0009b06 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009be2:	83 c4 14             	add    esp,0x14
c0009be5:	c3                   	ret    

c0009be6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009be6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bf1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bf4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009bf9:	83 f8 01             	cmp    eax,0x1
c0009bfc:	19 c0                	sbb    eax,eax
c0009bfe:	83 ca 03             	or     edx,0x3
c0009c01:	83 e0 fc             	and    eax,0xfffffffc
c0009c04:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009c0b:	0f 20 d8             	mov    eax,cr3
c0009c0e:	0f 22 d8             	mov    cr3,eax
c0009c11:	c3                   	ret    

c0009c12 <VAS::~VAS()>:
c0009c12:	83 ec 2c             	sub    esp,0x2c
c0009c15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009c1d:	fa                   	cli    
c0009c1e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009c23:	83 c0 01             	add    eax,0x1
c0009c26:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009c2b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c35:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009c3f:	6a 01                	push   0x1
c0009c41:	50                   	push   eax
c0009c42:	e8 9f ff ff ff       	call   c0009be6 <VAS::mapOtherVASIn(bool, VAS*)>
c0009c47:	83 c4 0c             	add    esp,0xc
c0009c4a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c52:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c5a:	0f 8f d8 00 00 00    	jg     c0009d38 <VAS::~VAS()+0x126>
c0009c60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c6b:	c1 e2 02             	shl    edx,0x2
c0009c6e:	01 d0                	add    eax,edx
c0009c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7a:	83 e0 01             	and    eax,0x1
c0009c7d:	0f 84 ab 00 00 00    	je     c0009d2e <VAS::~VAS()+0x11c>
c0009c83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c8b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c93:	7f 74                	jg     c0009d09 <VAS::~VAS()+0xf7>
c0009c95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c99:	c1 e0 0a             	shl    eax,0xa
c0009c9c:	89 c2                	mov    edx,eax
c0009c9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ca2:	01 d0                	add    eax,edx
c0009ca4:	c1 e0 0c             	shl    eax,0xc
c0009ca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cb5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009cbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009cbf:	6a 01                	push   0x1
c0009cc1:	50                   	push   eax
c0009cc2:	e8 77 fc ff ff       	call   c000993e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009cc7:	83 c4 0c             	add    esp,0xc
c0009cca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cdc:	25 01 04 00 00       	and    eax,0x401
c0009ce1:	3d 01 04 00 00       	cmp    eax,0x401
c0009ce6:	75 1a                	jne    c0009d02 <VAS::~VAS()+0xf0>
c0009ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cf1:	83 ec 0c             	sub    esp,0xc
c0009cf4:	50                   	push   eax
c0009cf5:	e8 bc e0 ff ff       	call   c0007db6 <Phys::freePage(unsigned long)>
c0009cfa:	83 c4 10             	add    esp,0x10
c0009cfd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d02:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009d07:	eb 82                	jmp    c0009c8b <VAS::~VAS()+0x79>
c0009d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0d:	25 00 04 00 00       	and    eax,0x400
c0009d12:	74 1a                	je     c0009d2e <VAS::~VAS()+0x11c>
c0009d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d1d:	83 ec 0c             	sub    esp,0xc
c0009d20:	50                   	push   eax
c0009d21:	e8 90 e0 ff ff       	call   c0007db6 <Phys::freePage(unsigned long)>
c0009d26:	83 c4 10             	add    esp,0x10
c0009d29:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d2e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009d33:	e9 1a ff ff ff       	jmp    c0009c52 <VAS::~VAS()+0x40>
c0009d38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d3f:	83 ec 0c             	sub    esp,0xc
c0009d42:	50                   	push   eax
c0009d43:	e8 43 fc ff ff       	call   c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c0009d48:	83 c4 10             	add    esp,0x10
c0009d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d52:	83 ec 0c             	sub    esp,0xc
c0009d55:	50                   	push   eax
c0009d56:	e8 5b e0 ff ff       	call   c0007db6 <Phys::freePage(unsigned long)>
c0009d5b:	83 c4 10             	add    esp,0x10
c0009d5e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d63:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d68:	83 e8 01             	sub    eax,0x1
c0009d6b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d70:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d75:	85 c0                	test   eax,eax
c0009d77:	75 01                	jne    c0009d7a <VAS::~VAS()+0x168>
c0009d79:	fb                   	sti    
c0009d7a:	90                   	nop
c0009d7b:	83 c4 2c             	add    esp,0x2c
c0009d7e:	c3                   	ret    
c0009d7f:	90                   	nop

c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d80:	55                   	push   ebp
c0009d81:	57                   	push   edi
c0009d82:	56                   	push   esi
c0009d83:	53                   	push   ebx
c0009d84:	83 ec 1c             	sub    esp,0x1c
c0009d87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d8f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d95:	77 08                	ja     c0009d9f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d97:	0f 20 d8             	mov    eax,cr3
c0009d9a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d9d:	75 49                	jne    c0009de8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009da3:	09 d8                	or     eax,ebx
c0009da5:	a9 ff 0f 00 00       	test   eax,0xfff
c0009daa:	75 59                	jne    c0009e05 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009dac:	89 de                	mov    esi,ebx
c0009dae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009db1:	c1 ee 16             	shr    esi,0x16
c0009db4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009dbb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009dbf:	74 56                	je     c0009e17 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009dc1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009dc5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009dc9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009dcf:	c1 eb 0a             	shr    ebx,0xa
c0009dd2:	c1 e6 0c             	shl    esi,0xc
c0009dd5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009ddb:	09 d0                	or     eax,edx
c0009ddd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009de0:	83 c4 1c             	add    esp,0x1c
c0009de3:	5b                   	pop    ebx
c0009de4:	5e                   	pop    esi
c0009de5:	5f                   	pop    edi
c0009de6:	5d                   	pop    ebp
c0009de7:	c3                   	ret    
c0009de8:	83 ec 0c             	sub    esp,0xc
c0009deb:	68 80 11 02 c0       	push   0xc0021180
c0009df0:	e8 b0 0b 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0009df5:	83 c4 10             	add    esp,0x10
c0009df8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dfc:	09 d8                	or     eax,ebx
c0009dfe:	a9 ff 0f 00 00       	test   eax,0xfff
c0009e03:	74 a7                	je     c0009dac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009e05:	83 ec 0c             	sub    esp,0xc
c0009e08:	68 e8 11 02 c0       	push   0xc00211e8
c0009e0d:	e8 e5 78 00 00       	call   c00116f7 <KePanic(char const*)>
c0009e12:	83 c4 10             	add    esp,0x10
c0009e15:	eb 95                	jmp    c0009dac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009e17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e1b:	e8 ff df ff ff       	call   c0007e1f <Phys::allocatePage()>
c0009e20:	83 ec 0c             	sub    esp,0xc
c0009e23:	89 c5                	mov    ebp,eax
c0009e25:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009e2b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e2f:	6a 01                	push   0x1
c0009e31:	e8 37 f8 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c0009e36:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e3d:	6a 01                	push   0x1
c0009e3f:	50                   	push   eax
c0009e40:	55                   	push   ebp
c0009e41:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e47:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e4b:	51                   	push   ecx
c0009e4c:	e8 29 01 00 00       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e51:	83 c4 1c             	add    esp,0x1c
c0009e54:	68 00 10 00 00       	push   0x1000
c0009e59:	6a 00                	push   0x0
c0009e5b:	50                   	push   eax
c0009e5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e60:	e8 8b 66 ff ff       	call   c00004f0 <memset>
c0009e65:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e69:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e6c:	e8 1a fb ff ff       	call   c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e75:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e7e:	e9 3e ff ff ff       	jmp    c0009dc1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e83:	90                   	nop

c0009e84 <VAS::allocatePages(int, int)>:
c0009e84:	55                   	push   ebp
c0009e85:	57                   	push   edi
c0009e86:	56                   	push   esi
c0009e87:	53                   	push   ebx
c0009e88:	83 ec 1c             	sub    esp,0x1c
c0009e8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e93:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e97:	75 71                	jne    c0009f0a <VAS::allocatePages(int, int)+0x86>
c0009e99:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea0:	85 c0                	test   eax,eax
c0009ea2:	74 4d                	je     c0009ef1 <VAS::allocatePages(int, int)+0x6d>
c0009ea4:	89 dd                	mov    ebp,ebx
c0009ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eaa:	c1 e5 0c             	shl    ebp,0xc
c0009ead:	01 c5                	add    ebp,eax
c0009eaf:	85 db                	test   ebx,ebx
c0009eb1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009eb4:	7e 29                	jle    c0009edf <VAS::allocatePages(int, int)+0x5b>
c0009eb6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	e8 56 df ff ff       	call   c0007e1f <Phys::allocatePage()>
c0009ec9:	57                   	push   edi
c0009eca:	53                   	push   ebx
c0009ecb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed1:	50                   	push   eax
c0009ed2:	56                   	push   esi
c0009ed3:	e8 a8 fe ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ed8:	83 c4 10             	add    esp,0x10
c0009edb:	39 dd                	cmp    ebp,ebx
c0009edd:	75 e5                	jne    c0009ec4 <VAS::allocatePages(int, int)+0x40>
c0009edf:	0f 20 d8             	mov    eax,cr3
c0009ee2:	0f 22 d8             	mov    cr3,eax
c0009ee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ee9:	83 c4 1c             	add    esp,0x1c
c0009eec:	5b                   	pop    ebx
c0009eed:	5e                   	pop    esi
c0009eee:	5f                   	pop    edi
c0009eef:	5d                   	pop    ebp
c0009ef0:	c3                   	ret    
c0009ef1:	83 ec 0c             	sub    esp,0xc
c0009ef4:	68 0c 12 02 c0       	push   0xc002120c
c0009ef9:	e8 f9 77 00 00       	call   c00116f7 <KePanic(char const*)>
c0009efe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009f01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	eb 9a                	jmp    c0009ea4 <VAS::allocatePages(int, int)+0x20>
c0009f0a:	83 ec 0c             	sub    esp,0xc
c0009f0d:	53                   	push   ebx
c0009f0e:	e8 5a f7 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c0009f13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f1f:	77 37                	ja     c0009f58 <VAS::allocatePages(int, int)+0xd4>
c0009f21:	85 db                	test   ebx,ebx
c0009f23:	7e ba                	jle    c0009edf <VAS::allocatePages(int, int)+0x5b>
c0009f25:	c1 e3 0c             	shl    ebx,0xc
c0009f28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f30:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009f33:	81 cf 00 04 00 00    	or     edi,0x400
c0009f39:	89 c3                	mov    ebx,eax
c0009f3b:	e8 df de ff ff       	call   c0007e1f <Phys::allocatePage()>
c0009f40:	57                   	push   edi
c0009f41:	53                   	push   ebx
c0009f42:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f48:	50                   	push   eax
c0009f49:	56                   	push   esi
c0009f4a:	e8 31 fe ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	39 dd                	cmp    ebp,ebx
c0009f54:	75 e5                	jne    c0009f3b <VAS::allocatePages(int, int)+0xb7>
c0009f56:	eb 87                	jmp    c0009edf <VAS::allocatePages(int, int)+0x5b>
c0009f58:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f63:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f6a:	74 b5                	je     c0009f21 <VAS::allocatePages(int, int)+0x9d>
c0009f6c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f70:	80 ce 01             	or     dh,0x1
c0009f73:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f77:	eb a8                	jmp    c0009f21 <VAS::allocatePages(int, int)+0x9d>
c0009f79:	90                   	nop

c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f7a:	55                   	push   ebp
c0009f7b:	57                   	push   edi
c0009f7c:	56                   	push   esi
c0009f7d:	53                   	push   ebx
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f85:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f8d:	85 db                	test   ebx,ebx
c0009f8f:	7e 2f                	jle    c0009fc0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f91:	c1 e3 0c             	shl    ebx,0xc
c0009f94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f98:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f9c:	01 d3                	add    ebx,edx
c0009f9e:	55                   	push   ebp
c0009f9f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009fa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009fa7:	29 c2                	sub    edx,eax
c0009fa9:	01 f2                	add    edx,esi
c0009fab:	52                   	push   edx
c0009fac:	56                   	push   esi
c0009fad:	81 c6 00 10 00 00    	add    esi,0x1000
c0009fb3:	57                   	push   edi
c0009fb4:	e8 c7 fd ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fb9:	83 c4 10             	add    esp,0x10
c0009fbc:	39 de                	cmp    esi,ebx
c0009fbe:	75 de                	jne    c0009f9e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009fc0:	0f 20 d8             	mov    eax,cr3
c0009fc3:	0f 22 d8             	mov    cr3,eax
c0009fc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009fca:	83 c4 0c             	add    esp,0xc
c0009fcd:	5b                   	pop    ebx
c0009fce:	5e                   	pop    esi
c0009fcf:	5f                   	pop    edi
c0009fd0:	5d                   	pop    ebp
c0009fd1:	c3                   	ret    

c0009fd2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009fd2:	55                   	push   ebp
c0009fd3:	57                   	push   edi
c0009fd4:	56                   	push   esi
c0009fd5:	53                   	push   ebx
c0009fd6:	83 ec 1c             	sub    esp,0x1c
c0009fd9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fdd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009fe1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009fe5:	09 f8                	or     eax,edi
c0009fe7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009feb:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ff0:	75 4f                	jne    c000a041 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009ff6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009ff9:	c1 eb 16             	shr    ebx,0x16
c0009ffc:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a003:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a007:	74 52                	je     c000a05b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a009:	0f b6 f2             	movzx  esi,dl
c000a00c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a010:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a014:	c1 e8 0a             	shr    eax,0xa
c000a017:	83 fe 01             	cmp    esi,0x1
c000a01a:	19 d2                	sbb    edx,edx
c000a01c:	c1 e3 0c             	shl    ebx,0xc
c000a01f:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a025:	25 fc 0f 00 00       	and    eax,0xffc
c000a02a:	01 d8                	add    eax,ebx
c000a02c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a030:	09 d9                	or     ecx,ebx
c000a032:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a039:	83 c4 1c             	add    esp,0x1c
c000a03c:	5b                   	pop    ebx
c000a03d:	5e                   	pop    esi
c000a03e:	5f                   	pop    edi
c000a03f:	5d                   	pop    ebp
c000a040:	c3                   	ret    
c000a041:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a045:	83 ec 0c             	sub    esp,0xc
c000a048:	68 38 12 02 c0       	push   0xc0021238
c000a04d:	e8 a5 76 00 00       	call   c00116f7 <KePanic(char const*)>
c000a052:	83 c4 10             	add    esp,0x10
c000a055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a059:	eb 97                	jmp    c0009ff2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a05b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a05f:	e8 bb dd ff ff       	call   c0007e1f <Phys::allocatePage()>
c000a064:	83 ec 0c             	sub    esp,0xc
c000a067:	89 c5                	mov    ebp,eax
c000a069:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a06f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a073:	6a 01                	push   0x1
c000a075:	e8 f3 f5 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c000a07a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a081:	6a 01                	push   0x1
c000a083:	50                   	push   eax
c000a084:	55                   	push   ebp
c000a085:	81 cd 07 04 00 00    	or     ebp,0x407
c000a08b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a08f:	51                   	push   ecx
c000a090:	e8 e5 fe ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a095:	83 c4 1c             	add    esp,0x1c
c000a098:	68 00 10 00 00       	push   0x1000
c000a09d:	6a 00                	push   0x0
c000a09f:	50                   	push   eax
c000a0a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0a4:	e8 47 64 ff ff       	call   c00004f0 <memset>
c000a0a9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a0ad:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a0b0:	e8 d6 f8 ff ff       	call   c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c000a0b5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a0b8:	83 c4 10             	add    esp,0x10
c000a0bb:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a0be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a0c2:	e9 42 ff ff ff       	jmp    c000a009 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a0c7:	90                   	nop

c000a0c8 <VAS::VAS(bool)>:
c000a0c8:	53                   	push   ebx
c000a0c9:	83 ec 28             	sub    esp,0x28
c000a0cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a0d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a0df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ee:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0f2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0f5:	e8 25 dd ff ff       	call   c0007e1f <Phys::allocatePage()>
c000a0fa:	89 c2                	mov    edx,eax
c000a0fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a100:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a103:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a109:	83 ec 0c             	sub    esp,0xc
c000a10c:	6a 01                	push   0x1
c000a10e:	e8 5a f5 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c000a113:	83 c4 10             	add    esp,0x10
c000a116:	89 c2                	mov    edx,eax
c000a118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a11c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a11f:	83 ec 0c             	sub    esp,0xc
c000a122:	6a 03                	push   0x3
c000a124:	6a 01                	push   0x1
c000a126:	52                   	push   edx
c000a127:	50                   	push   eax
c000a128:	53                   	push   ebx
c000a129:	e8 4c fe ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a12e:	83 c4 20             	add    esp,0x20
c000a131:	89 c2                	mov    edx,eax
c000a133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a137:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a13a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a142:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a14a:	7f 1d                	jg     c000a169 <VAS::VAS(bool)+0xa1>
c000a14c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a150:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a153:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a157:	c1 e2 02             	shl    edx,0x2
c000a15a:	01 d0                	add    eax,edx
c000a15c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a162:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a167:	eb d9                	jmp    c000a142 <VAS::VAS(bool)+0x7a>
c000a169:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a171:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a179:	7f 7e                	jg     c000a1f9 <VAS::VAS(bool)+0x131>
c000a17b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a17f:	2d 00 02 00 00       	sub    eax,0x200
c000a184:	c1 e0 0c             	shl    eax,0xc
c000a187:	83 c8 05             	or     eax,0x5
c000a18a:	89 c2                	mov    edx,eax
c000a18c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a191:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a197:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a19d:	83 e0 10             	and    eax,0x10
c000a1a0:	0f b6 c0             	movzx  eax,al
c000a1a3:	85 c0                	test   eax,eax
c000a1a5:	74 07                	je     c000a1ae <VAS::VAS(bool)+0xe6>
c000a1a7:	b8 00 01 00 00       	mov    eax,0x100
c000a1ac:	eb 05                	jmp    c000a1b3 <VAS::VAS(bool)+0xeb>
c000a1ae:	b8 00 00 00 00       	mov    eax,0x0
c000a1b3:	09 d0                	or     eax,edx
c000a1b5:	89 c1                	mov    ecx,eax
c000a1b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1c2:	c1 e2 02             	shl    edx,0x2
c000a1c5:	01 d0                	add    eax,edx
c000a1c7:	89 ca                	mov    edx,ecx
c000a1c9:	89 10                	mov    DWORD PTR [eax],edx
c000a1cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1cf:	2d 40 03 00 00       	sub    eax,0x340
c000a1d4:	83 f8 7f             	cmp    eax,0x7f
c000a1d7:	77 16                	ja     c000a1ef <VAS::VAS(bool)+0x127>
c000a1d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1e4:	c1 e2 02             	shl    edx,0x2
c000a1e7:	01 d0                	add    eax,edx
c000a1e9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1ef:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1f4:	e9 78 ff ff ff       	jmp    c000a171 <VAS::VAS(bool)+0xa9>
c000a1f9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a204:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a20a:	83 e0 10             	and    eax,0x10
c000a20d:	0f b6 c0             	movzx  eax,al
c000a210:	85 c0                	test   eax,eax
c000a212:	74 07                	je     c000a21b <VAS::VAS(bool)+0x153>
c000a214:	b8 03 41 00 00       	mov    eax,0x4103
c000a219:	eb 05                	jmp    c000a220 <VAS::VAS(bool)+0x158>
c000a21b:	b8 03 40 00 00       	mov    eax,0x4003
c000a220:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a224:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a227:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a22d:	89 02                	mov    DWORD PTR [edx],eax
c000a22f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a233:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a236:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a23b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a241:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a247:	83 e0 10             	and    eax,0x10
c000a24a:	0f b6 c0             	movzx  eax,al
c000a24d:	85 c0                	test   eax,eax
c000a24f:	74 07                	je     c000a258 <VAS::VAS(bool)+0x190>
c000a251:	b8 00 01 00 00       	mov    eax,0x100
c000a256:	eb 05                	jmp    c000a25d <VAS::VAS(bool)+0x195>
c000a258:	b8 00 00 00 00       	mov    eax,0x0
c000a25d:	09 c2                	or     edx,eax
c000a25f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a263:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a266:	05 fc 0f 00 00       	add    eax,0xffc
c000a26b:	83 ca 03             	or     edx,0x3
c000a26e:	89 10                	mov    DWORD PTR [eax],edx
c000a270:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a275:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a27b:	83 ec 0c             	sub    esp,0xc
c000a27e:	50                   	push   eax
c000a27f:	e8 36 2a 00 00       	call   c000ccba <Device::getName()>
c000a284:	83 c4 10             	add    esp,0x10
c000a287:	83 ec 08             	sub    esp,0x8
c000a28a:	68 08 14 02 c0       	push   0xc0021408
c000a28f:	50                   	push   eax
c000a290:	e8 bb 64 ff ff       	call   c0000750 <strcmp>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	85 c0                	test   eax,eax
c000a29a:	0f 94 c0             	sete   al
c000a29d:	0f b6 c0             	movzx  eax,al
c000a2a0:	85 c0                	test   eax,eax
c000a2a2:	74 68                	je     c000a30c <VAS::VAS(bool)+0x244>
c000a2a4:	fa                   	cli    
c000a2a5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a2aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2b0:	05 7c 09 00 00       	add    eax,0x97c
c000a2b5:	83 ec 0c             	sub    esp,0xc
c000a2b8:	50                   	push   eax
c000a2b9:	e8 50 d3 ff ff       	call   c000760e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2c6:	89 c3                	mov    ebx,eax
c000a2c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a2cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2d3:	05 7c 09 00 00       	add    eax,0x97c
c000a2d8:	83 ec 0c             	sub    esp,0xc
c000a2db:	50                   	push   eax
c000a2dc:	e8 2d d3 ff ff       	call   c000760e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	83 ec 08             	sub    esp,0x8
c000a2e7:	50                   	push   eax
c000a2e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2ec:	e8 7b f6 ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c000a2f1:	83 c4 10             	add    esp,0x10
c000a2f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2fb:	6a 11                	push   0x11
c000a2fd:	53                   	push   ebx
c000a2fe:	50                   	push   eax
c000a2ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a303:	e8 78 fa ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	fb                   	sti    
c000a30c:	90                   	nop
c000a30d:	83 c4 28             	add    esp,0x28
c000a310:	5b                   	pop    ebx
c000a311:	c3                   	ret    

c000a312 <VAS::evict(unsigned long)>:
c000a312:	55                   	push   ebp
c000a313:	57                   	push   edi
c000a314:	56                   	push   esi
c000a315:	53                   	push   ebx
c000a316:	83 ec 1c             	sub    esp,0x1c
c000a319:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a31d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a321:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a325:	e8 a1 f4 ff ff       	call   c00097cb <Virt::allocateSwapfilePage()>
c000a32a:	89 c7                	mov    edi,eax
c000a32c:	a1 8c 38 02 c0       	mov    eax,ds:0xc002388c
c000a331:	85 c0                	test   eax,eax
c000a333:	7e 40                	jle    c000a375 <VAS::evict(unsigned long)+0x63>
c000a335:	89 ee                	mov    esi,ebp
c000a337:	31 db                	xor    ebx,ebx
c000a339:	83 ec 0c             	sub    esp,0xc
c000a33c:	57                   	push   edi
c000a33d:	e8 73 f4 ff ff       	call   c00097b5 <Virt::swapIDToSector(unsigned long)>
c000a342:	89 34 24             	mov    DWORD PTR [esp],esi
c000a345:	01 d8                	add    eax,ebx
c000a347:	6a 01                	push   0x1
c000a349:	31 d2                	xor    edx,edx
c000a34b:	83 c3 01             	add    ebx,0x1
c000a34e:	52                   	push   edx
c000a34f:	81 c6 00 02 00 00    	add    esi,0x200
c000a355:	50                   	push   eax
c000a356:	0f be 05 98 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023898
c000a35d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a364:	50                   	push   eax
c000a365:	e8 0a 3b 00 00       	call   c000de74 <LogicalDisk::write(unsigned long long, int, void*)>
c000a36a:	83 c4 20             	add    esp,0x20
c000a36d:	39 1d 8c 38 02 c0    	cmp    DWORD PTR ds:0xc002388c,ebx
c000a373:	7f c4                	jg     c000a339 <VAS::evict(unsigned long)+0x27>
c000a375:	83 ec 08             	sub    esp,0x8
c000a378:	c1 e7 0c             	shl    edi,0xc
c000a37b:	55                   	push   ebp
c000a37c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a380:	50                   	push   eax
c000a381:	e8 e6 f5 ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c000a386:	8b 10                	mov    edx,DWORD PTR [eax]
c000a388:	89 d3                	mov    ebx,edx
c000a38a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a390:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a396:	09 d7                	or     edi,edx
c000a398:	89 38                	mov    DWORD PTR [eax],edi
c000a39a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a39d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a3a3:	83 c2 01             	add    edx,0x1
c000a3a6:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a3ac:	e8 05 da ff ff       	call   c0007db6 <Phys::freePage(unsigned long)>
c000a3b1:	0f 20 d8             	mov    eax,cr3
c000a3b4:	0f 22 d8             	mov    cr3,eax
c000a3b7:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a3bd:	51                   	push   ecx
c000a3be:	55                   	push   ebp
c000a3bf:	53                   	push   ebx
c000a3c0:	68 5c 12 02 c0       	push   0xc002125c
c000a3c5:	e8 db 05 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a3ca:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a3cf:	c7 44 24 50 16 14 02 c0 	mov    DWORD PTR [esp+0x50],0xc0021416
c000a3d7:	8d 50 01             	lea    edx,[eax+0x1]
c000a3da:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a3de:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a3e4:	83 c4 3c             	add    esp,0x3c
c000a3e7:	5b                   	pop    ebx
c000a3e8:	5e                   	pop    esi
c000a3e9:	5f                   	pop    edi
c000a3ea:	5d                   	pop    ebp
c000a3eb:	e9 b5 05 00 00       	jmp    c000a9a5 <Dbg::kprintf(char const*, ...)>

c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3f0:	55                   	push   ebp
c000a3f1:	57                   	push   edi
c000a3f2:	56                   	push   esi
c000a3f3:	53                   	push   ebx
c000a3f4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3fa:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a401:	89 f3                	mov    ebx,esi
c000a403:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a409:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a40f:	77 22                	ja     c000a433 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a411:	83 ec 08             	sub    esp,0x8
c000a414:	56                   	push   esi
c000a415:	68 39 14 02 c0       	push   0xc0021439
c000a41a:	e8 86 05 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a41f:	83 c4 10             	add    esp,0x10
c000a422:	85 db                	test   ebx,ebx
c000a424:	75 2a                	jne    c000a450 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a426:	31 c0                	xor    eax,eax
c000a428:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a42e:	5b                   	pop    ebx
c000a42f:	5e                   	pop    esi
c000a430:	5f                   	pop    edi
c000a431:	5d                   	pop    ebp
c000a432:	c3                   	ret    
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 27 14 02 c0       	push   0xc0021427
c000a43b:	e8 b7 72 00 00       	call   c00116f7 <KePanic(char const*)>
c000a440:	5f                   	pop    edi
c000a441:	5d                   	pop    ebp
c000a442:	56                   	push   esi
c000a443:	68 39 14 02 c0       	push   0xc0021439
c000a448:	e8 58 05 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a44d:	83 c4 10             	add    esp,0x10
c000a450:	83 ec 08             	sub    esp,0x8
c000a453:	53                   	push   ebx
c000a454:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a45b:	51                   	push   ecx
c000a45c:	e8 0b f5 ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	89 c2                	mov    edx,eax
c000a466:	85 c0                	test   eax,eax
c000a468:	74 bc                	je     c000a426 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a46a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a46c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a472:	0f 85 c0 00 00 00    	jne    c000a538 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a478:	89 e8                	mov    eax,ebp
c000a47a:	25 01 04 00 00       	and    eax,0x401
c000a47f:	3d 00 04 00 00       	cmp    eax,0x400
c000a484:	75 a0                	jne    c000a426 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a486:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a48a:	c1 ed 0c             	shr    ebp,0xc
c000a48d:	e8 8d d9 ff ff       	call   c0007e1f <Phys::allocatePage()>
c000a492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a496:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a498:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a49e:	09 c1                	or     ecx,eax
c000a4a0:	81 c9 01 08 00 00    	or     ecx,0x801
c000a4a6:	89 0a                	mov    DWORD PTR [edx],ecx
c000a4a8:	8b 15 8c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002388c
c000a4ae:	85 d2                	test   edx,edx
c000a4b0:	7e 40                	jle    c000a4f2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a4b2:	89 df                	mov    edi,ebx
c000a4b4:	31 f6                	xor    esi,esi
c000a4b6:	83 ec 0c             	sub    esp,0xc
c000a4b9:	55                   	push   ebp
c000a4ba:	e8 f6 f2 ff ff       	call   c00097b5 <Virt::swapIDToSector(unsigned long)>
c000a4bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4c2:	01 f0                	add    eax,esi
c000a4c4:	6a 01                	push   0x1
c000a4c6:	31 d2                	xor    edx,edx
c000a4c8:	83 c6 01             	add    esi,0x1
c000a4cb:	52                   	push   edx
c000a4cc:	81 c7 00 02 00 00    	add    edi,0x200
c000a4d2:	50                   	push   eax
c000a4d3:	0f be 05 98 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023898
c000a4da:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a4e1:	50                   	push   eax
c000a4e2:	e8 21 39 00 00       	call   c000de08 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4e7:	83 c4 20             	add    esp,0x20
c000a4ea:	39 35 8c 38 02 c0    	cmp    DWORD PTR ds:0xc002388c,esi
c000a4f0:	7f c4                	jg     c000a4b6 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a4f2:	83 ec 04             	sub    esp,0x4
c000a4f5:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4fa:	83 e8 01             	sub    eax,0x1
c000a4fd:	50                   	push   eax
c000a4fe:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a503:	53                   	push   ebx
c000a504:	68 4c 14 02 c0       	push   0xc002144c
c000a509:	e8 97 04 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a50e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a511:	e8 7c f2 ff ff       	call   c0009792 <Virt::freeSwapfilePage(unsigned long)>
c000a516:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a51b:	83 c4 10             	add    esp,0x10
c000a51e:	83 e8 01             	sub    eax,0x1
c000a521:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a526:	85 c0                	test   eax,eax
c000a528:	75 01                	jne    c000a52b <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a52a:	fb                   	sti    
c000a52b:	0f 20 d8             	mov    eax,cr3
c000a52e:	0f 22 d8             	mov    cr3,eax
c000a531:	b0 01                	mov    al,0x1
c000a533:	e9 f0 fe ff ff       	jmp    c000a428 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a538:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a53c:	bd 00 10 00 00       	mov    ebp,0x1000
c000a541:	83 ec 0c             	sub    esp,0xc
c000a544:	89 de                	mov    esi,ebx
c000a546:	68 8c 12 02 c0       	push   0xc002128c
c000a54b:	e8 55 04 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a550:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a554:	e8 c6 d8 ff ff       	call   c0007e1f <Phys::allocatePage()>
c000a559:	89 e9                	mov    ecx,ebp
c000a55b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a55d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a561:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a563:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a569:	09 c8                	or     eax,ecx
c000a56b:	83 c8 02             	or     eax,0x2
c000a56e:	89 02                	mov    DWORD PTR [edx],eax
c000a570:	0f 20 d8             	mov    eax,cr3
c000a573:	0f 22 d8             	mov    cr3,eax
c000a576:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a57a:	89 df                	mov    edi,ebx
c000a57c:	89 e9                	mov    ecx,ebp
c000a57e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a580:	b0 01                	mov    al,0x1
c000a582:	83 c4 10             	add    esp,0x10
c000a585:	e9 9e fe ff ff       	jmp    c000a428 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a58a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a58a:	55                   	push   ebp
c000a58b:	57                   	push   edi
c000a58c:	56                   	push   esi
c000a58d:	53                   	push   ebx
c000a58e:	83 ec 28             	sub    esp,0x28
c000a591:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a595:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a599:	50                   	push   eax
c000a59a:	e8 ce f0 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c000a59f:	83 c4 0c             	add    esp,0xc
c000a5a2:	89 c5                	mov    ebp,eax
c000a5a4:	6a 07                	push   0x7
c000a5a6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a5aa:	52                   	push   edx
c000a5ab:	56                   	push   esi
c000a5ac:	e8 d3 f8 ff ff       	call   c0009e84 <VAS::allocatePages(int, int)>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 c7                	mov    edi,eax
c000a5b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a5ba:	85 c9                	test   ecx,ecx
c000a5bc:	74 2f                	je     c000a5ed <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a5be:	31 db                	xor    ebx,ebx
c000a5c0:	e8 5a d8 ff ff       	call   c0007e1f <Phys::allocatePage()>
c000a5c5:	83 c3 01             	add    ebx,0x1
c000a5c8:	6a 03                	push   0x3
c000a5ca:	55                   	push   ebp
c000a5cb:	50                   	push   eax
c000a5cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d0:	56                   	push   esi
c000a5d1:	e8 aa f7 ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5d6:	6a 07                	push   0x7
c000a5d8:	57                   	push   edi
c000a5d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5dd:	50                   	push   eax
c000a5de:	56                   	push   esi
c000a5df:	e8 9c f7 ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5e4:	83 c4 20             	add    esp,0x20
c000a5e7:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a5eb:	75 d3                	jne    c000a5c0 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5f1:	89 28                	mov    DWORD PTR [eax],ebp
c000a5f3:	83 c4 1c             	add    esp,0x1c
c000a5f6:	89 f8                	mov    eax,edi
c000a5f8:	5b                   	pop    ebx
c000a5f9:	5e                   	pop    esi
c000a5fa:	5f                   	pop    edi
c000a5fb:	5d                   	pop    ebp
c000a5fc:	c3                   	ret    
c000a5fd:	90                   	nop

c000a5fe <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5fe:	53                   	push   ebx
c000a5ff:	83 ec 14             	sub    esp,0x14
c000a602:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a606:	68 ac 12 02 c0       	push   0xc00212ac
c000a60b:	e8 95 03 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a610:	c7 04 24 0c 13 02 c0 	mov    DWORD PTR [esp],0xc002130c
c000a617:	e8 89 03 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a61c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a620:	83 c4 18             	add    esp,0x18
c000a623:	5b                   	pop    ebx
c000a624:	e9 62 f3 ff ff       	jmp    c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c000a629:	90                   	nop

c000a62a <VAS::scanForEviction()>:
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	31 f6                	xor    esi,esi
c000a62e:	53                   	push   ebx
c000a62f:	83 ec 10             	sub    esp,0x10
c000a632:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a636:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a639:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a63f:	75 0e                	jne    c000a64f <VAS::scanForEviction()+0x25>
c000a641:	89 da                	mov    edx,ebx
c000a643:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a646:	c1 ea 16             	shr    edx,0x16
c000a649:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a64d:	74 57                	je     c000a6a6 <VAS::scanForEviction()+0x7c>
c000a64f:	53                   	push   ebx
c000a650:	57                   	push   edi
c000a651:	e8 16 f3 ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c000a656:	5a                   	pop    edx
c000a657:	8b 10                	mov    edx,DWORD PTR [eax]
c000a659:	59                   	pop    ecx
c000a65a:	89 d1                	mov    ecx,edx
c000a65c:	c1 e9 0c             	shr    ecx,0xc
c000a65f:	74 10                	je     c000a671 <VAS::scanForEviction()+0x47>
c000a661:	89 d1                	mov    ecx,edx
c000a663:	81 e1 01 08 00 00    	and    ecx,0x801
c000a669:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a66f:	74 40                	je     c000a6b1 <VAS::scanForEviction()+0x87>
c000a671:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a677:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a67d:	76 2d                	jbe    c000a6ac <VAS::scanForEviction()+0x82>
c000a67f:	83 c6 01             	add    esi,0x1
c000a682:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a689:	83 fe 03             	cmp    esi,0x3
c000a68c:	74 32                	je     c000a6c0 <VAS::scanForEviction()+0x96>
c000a68e:	31 db                	xor    ebx,ebx
c000a690:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a696:	75 b7                	jne    c000a64f <VAS::scanForEviction()+0x25>
c000a698:	89 da                	mov    edx,ebx
c000a69a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a69d:	c1 ea 16             	shr    edx,0x16
c000a6a0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6a4:	75 a9                	jne    c000a64f <VAS::scanForEviction()+0x25>
c000a6a6:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6ac:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a6af:	eb 88                	jmp    c000a639 <VAS::scanForEviction()+0xf>
c000a6b1:	f6 c2 20             	test   dl,0x20
c000a6b4:	74 13                	je     c000a6c9 <VAS::scanForEviction()+0x9f>
c000a6b6:	83 e2 df             	and    edx,0xffffffdf
c000a6b9:	89 10                	mov    DWORD PTR [eax],edx
c000a6bb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a6be:	eb b1                	jmp    c000a671 <VAS::scanForEviction()+0x47>
c000a6c0:	83 c4 10             	add    esp,0x10
c000a6c3:	31 c0                	xor    eax,eax
c000a6c5:	5b                   	pop    ebx
c000a6c6:	5e                   	pop    esi
c000a6c7:	5f                   	pop    edi
c000a6c8:	c3                   	ret    
c000a6c9:	83 ec 08             	sub    esp,0x8
c000a6cc:	89 d0                	mov    eax,edx
c000a6ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6d7:	53                   	push   ebx
c000a6d8:	68 61 14 02 c0       	push   0xc0021461
c000a6dd:	e8 c3 02 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a6e2:	58                   	pop    eax
c000a6e3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6e6:	5a                   	pop    edx
c000a6e7:	51                   	push   ecx
c000a6e8:	57                   	push   edi
c000a6e9:	e8 24 fc ff ff       	call   c000a312 <VAS::evict(unsigned long)>
c000a6ee:	5b                   	pop    ebx
c000a6ef:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6f2:	5e                   	pop    esi
c000a6f3:	50                   	push   eax
c000a6f4:	68 75 14 02 c0       	push   0xc0021475
c000a6f9:	e8 a7 02 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a6fe:	58                   	pop    eax
c000a6ff:	5a                   	pop    edx
c000a700:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a704:	50                   	push   eax
c000a705:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a709:	68 88 14 02 c0       	push   0xc0021488
c000a70e:	e8 92 02 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a713:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a716:	83 c4 10             	add    esp,0x10
c000a719:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a71f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a723:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a726:	83 c4 10             	add    esp,0x10
c000a729:	5b                   	pop    ebx
c000a72a:	5e                   	pop    esi
c000a72b:	5f                   	pop    edi
c000a72c:	c3                   	ret    

c000a72d <mapVASFirstTime>:
c000a72d:	55                   	push   ebp
c000a72e:	57                   	push   edi
c000a72f:	56                   	push   esi
c000a730:	53                   	push   ebx
c000a731:	83 ec 0c             	sub    esp,0xc
c000a734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a739:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a73c:	83 fa 01             	cmp    edx,0x1
c000a73f:	0f 84 cb 00 00 00    	je     c000a810 <mapVASFirstTime+0xe3>
c000a745:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a748:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a74b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a750:	c1 e5 15             	shl    ebp,0x15
c000a753:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a758:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a75e:	29 eb                	sub    ebx,ebp
c000a760:	29 ef                	sub    edi,ebp
c000a762:	e8 b8 d6 ff ff       	call   c0007e1f <Phys::allocatePage()>
c000a767:	83 ec 0c             	sub    esp,0xc
c000a76a:	68 03 04 00 00       	push   0x403
c000a76f:	6a 01                	push   0x1
c000a771:	53                   	push   ebx
c000a772:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a778:	50                   	push   eax
c000a779:	56                   	push   esi
c000a77a:	e8 fb f7 ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a77f:	83 c4 20             	add    esp,0x20
c000a782:	39 fb                	cmp    ebx,edi
c000a784:	75 dc                	jne    c000a762 <mapVASFirstTime+0x35>
c000a786:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a78b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a790:	29 eb                	sub    ebx,ebp
c000a792:	29 ef                	sub    edi,ebp
c000a794:	e8 86 d6 ff ff       	call   c0007e1f <Phys::allocatePage()>
c000a799:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a79d:	83 fa 01             	cmp    edx,0x1
c000a7a0:	19 d2                	sbb    edx,edx
c000a7a2:	83 ec 0c             	sub    esp,0xc
c000a7a5:	83 e2 04             	and    edx,0x4
c000a7a8:	81 c2 03 04 00 00    	add    edx,0x403
c000a7ae:	52                   	push   edx
c000a7af:	6a 01                	push   0x1
c000a7b1:	53                   	push   ebx
c000a7b2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7b8:	50                   	push   eax
c000a7b9:	56                   	push   esi
c000a7ba:	e8 bb f7 ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7bf:	83 c4 20             	add    esp,0x20
c000a7c2:	39 df                	cmp    edi,ebx
c000a7c4:	75 ce                	jne    c000a794 <mapVASFirstTime+0x67>
c000a7c6:	83 ec 0c             	sub    esp,0xc
c000a7c9:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a7ce:	6a 04                	push   0x4
c000a7d0:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a7d6:	6a ff                	push   0xffffffff
c000a7d8:	c1 eb 0c             	shr    ebx,0xc
c000a7db:	53                   	push   ebx
c000a7dc:	68 00 50 02 c0       	push   0xc0025000
c000a7e1:	56                   	push   esi
c000a7e2:	e8 1f f3 ff ff       	call   c0009b06 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7e7:	83 c4 14             	add    esp,0x14
c000a7ea:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7ef:	6a 04                	push   0x4
c000a7f1:	6a ff                	push   0xffffffff
c000a7f3:	53                   	push   ebx
c000a7f4:	68 00 50 02 c0       	push   0xc0025000
c000a7f9:	50                   	push   eax
c000a7fa:	e8 07 f3 ff ff       	call   c0009b06 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7ff:	0f 20 d8             	mov    eax,cr3
c000a802:	0f 22 d8             	mov    cr3,eax
c000a805:	83 c4 20             	add    esp,0x20
c000a808:	83 c4 0c             	add    esp,0xc
c000a80b:	5b                   	pop    ebx
c000a80c:	5e                   	pop    esi
c000a80d:	5f                   	pop    edi
c000a80e:	5d                   	pop    ebp
c000a80f:	c3                   	ret    
c000a810:	83 ec 0c             	sub    esp,0xc
c000a813:	68 95 14 02 c0       	push   0xc0021495
c000a818:	e8 88 01 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	83 c4 0c             	add    esp,0xc
c000a823:	5b                   	pop    ebx
c000a824:	5e                   	pop    esi
c000a825:	5f                   	pop    edi
c000a826:	5d                   	pop    ebp
c000a827:	c3                   	ret    

c000a828 <__cxa_atexit>:
c000a828:	31 c0                	xor    eax,eax
c000a82a:	c3                   	ret    

c000a82b <__cxa_finalize>:
c000a82b:	c3                   	ret    

c000a82c <__stack_chk_fail>:
c000a82c:	55                   	push   ebp
c000a82d:	89 e5                	mov    ebp,esp
c000a82f:	83 ec 10             	sub    esp,0x10
c000a832:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a835:	68 ae 14 02 c0       	push   0xc00214ae
c000a83a:	e8 66 01 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a83f:	58                   	pop    eax
c000a840:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a843:	5a                   	pop    edx
c000a844:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a847:	68 ae 14 02 c0       	push   0xc00214ae
c000a84c:	e8 54 01 00 00       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000a851:	c7 04 24 b6 14 02 c0 	mov    DWORD PTR [esp],0xc00214b6
c000a858:	e8 9a 6e 00 00       	call   c00116f7 <KePanic(char const*)>
c000a85d:	83 c4 10             	add    esp,0x10
c000a860:	c9                   	leave  
c000a861:	c3                   	ret    

c000a862 <__cxa_pure_virtual>:
c000a862:	83 ec 18             	sub    esp,0x18
c000a865:	68 ce 14 02 c0       	push   0xc00214ce
c000a86a:	e8 88 6e 00 00       	call   c00116f7 <KePanic(char const*)>
c000a86f:	83 c4 1c             	add    esp,0x1c
c000a872:	c3                   	ret    

c000a873 <operator new[](unsigned long)>:
c000a873:	e9 9e d2 ff ff       	jmp    c0007b16 <malloc>

c000a878 <operator delete(void*, unsigned long)>:
c000a878:	e9 b9 d2 ff ff       	jmp    c0007b36 <rfree>

c000a87d <operator delete[](void*)>:
c000a87d:	e9 b4 d2 ff ff       	jmp    c0007b36 <rfree>

c000a882 <operator delete[](void*, unsigned long)>:
c000a882:	e9 af d2 ff ff       	jmp    c0007b36 <rfree>

c000a887 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a887:	55                   	push   ebp
c000a888:	57                   	push   edi
c000a889:	56                   	push   esi
c000a88a:	be d7 0f 02 c0       	mov    esi,0xc0020fd7
c000a88f:	53                   	push   ebx
c000a890:	83 ec 20             	sub    esp,0x20
c000a893:	a0 d6 0f 02 c0       	mov    al,ds:0xc0020fd6
c000a898:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a89c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a8a0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a8a4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a8a8:	b8 10 00 00 00       	mov    eax,0x10
c000a8ad:	f7 c7 02 00 00 00    	test   edi,0x2
c000a8b3:	75 60                	jne    c000a915 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a8b5:	89 c1                	mov    ecx,eax
c000a8b7:	c1 e9 02             	shr    ecx,0x2
c000a8ba:	fc                   	cld    
c000a8bb:	31 d2                	xor    edx,edx
c000a8bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a8bf:	a8 02                	test   al,0x2
c000a8c1:	74 0b                	je     c000a8ce <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a8c3:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8c6:	66 89 17             	mov    WORD PTR [edi],dx
c000a8c9:	ba 02 00 00 00       	mov    edx,0x2
c000a8ce:	a8 01                	test   al,0x1
c000a8d0:	74 06                	je     c000a8d8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8d2:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a8d5:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a8d8:	89 ee                	mov    esi,ebp
c000a8da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a8de:	eb 02                	jmp    c000a8e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8e0:	89 c6                	mov    esi,eax
c000a8e2:	31 d2                	xor    edx,edx
c000a8e4:	83 c1 01             	add    ecx,0x1
c000a8e7:	89 f0                	mov    eax,esi
c000a8e9:	f7 f3                	div    ebx
c000a8eb:	39 de                	cmp    esi,ebx
c000a8ed:	73 f1                	jae    c000a8e0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a8ef:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8f2:	eb 02                	jmp    c000a8f6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a8f4:	89 c5                	mov    ebp,eax
c000a8f6:	31 d2                	xor    edx,edx
c000a8f8:	83 e9 01             	sub    ecx,0x1
c000a8fb:	89 e8                	mov    eax,ebp
c000a8fd:	f7 f3                	div    ebx
c000a8ff:	39 dd                	cmp    ebp,ebx
c000a901:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a905:	88 11                	mov    BYTE PTR [ecx],dl
c000a907:	73 eb                	jae    c000a8f4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a909:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a90d:	83 c4 20             	add    esp,0x20
c000a910:	5b                   	pop    ebx
c000a911:	5e                   	pop    esi
c000a912:	5f                   	pop    edi
c000a913:	5d                   	pop    ebp
c000a914:	c3                   	ret    
c000a915:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a918:	83 c7 02             	add    edi,0x2
c000a91b:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a91f:	83 c6 02             	add    esi,0x2
c000a922:	83 e8 02             	sub    eax,0x2
c000a925:	eb 8e                	jmp    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a927 <Dbg::logc(char)>:
c000a927:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a92b:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a932:	75 12                	jne    c000a946 <Dbg::logc(char)+0x1f>
c000a934:	ba fd 03 00 00       	mov    edx,0x3fd
c000a939:	ec                   	in     al,dx
c000a93a:	a8 20                	test   al,0x20
c000a93c:	74 fb                	je     c000a939 <Dbg::logc(char)+0x12>
c000a93e:	ba f8 03 00 00       	mov    edx,0x3f8
c000a943:	88 c8                	mov    al,cl
c000a945:	ee                   	out    dx,al
c000a946:	c3                   	ret    

c000a947 <Dbg::logs(char*)>:
c000a947:	53                   	push   ebx
c000a948:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a94c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a94f:	85 c0                	test   eax,eax
c000a951:	74 11                	je     c000a964 <Dbg::logs(char*)+0x1d>
c000a953:	83 c3 01             	add    ebx,0x1
c000a956:	50                   	push   eax
c000a957:	e8 cb ff ff ff       	call   c000a927 <Dbg::logc(char)>
c000a95c:	58                   	pop    eax
c000a95d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a960:	85 c0                	test   eax,eax
c000a962:	75 ef                	jne    c000a953 <Dbg::logs(char*)+0xc>
c000a964:	5b                   	pop    ebx
c000a965:	c3                   	ret    

c000a966 <Dbg::logWriteInt(unsigned int)>:
c000a966:	83 ec 10             	sub    esp,0x10
c000a969:	6a 0a                	push   0xa
c000a96b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a96f:	50                   	push   eax
c000a970:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a974:	50                   	push   eax
c000a975:	e8 0d ff ff ff       	call   c000a887 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a97a:	50                   	push   eax
c000a97b:	e8 c7 ff ff ff       	call   c000a947 <Dbg::logs(char*)>
c000a980:	83 c4 20             	add    esp,0x20
c000a983:	c3                   	ret    

c000a984 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a984:	83 ec 10             	sub    esp,0x10
c000a987:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a98b:	50                   	push   eax
c000a98c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a990:	50                   	push   eax
c000a991:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a995:	52                   	push   edx
c000a996:	e8 ec fe ff ff       	call   c000a887 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a99b:	50                   	push   eax
c000a99c:	e8 a6 ff ff ff       	call   c000a947 <Dbg::logs(char*)>
c000a9a1:	83 c4 20             	add    esp,0x20
c000a9a4:	c3                   	ret    

c000a9a5 <Dbg::kprintf(char const*, ...)>:
c000a9a5:	55                   	push   ebp
c000a9a6:	57                   	push   edi
c000a9a7:	56                   	push   esi
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 0c             	sub    esp,0xc
c000a9ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9b0:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a9b7:	74 08                	je     c000a9c1 <Dbg::kprintf(char const*, ...)+0x1c>
c000a9b9:	83 c4 0c             	add    esp,0xc
c000a9bc:	5b                   	pop    ebx
c000a9bd:	5e                   	pop    esi
c000a9be:	5f                   	pop    edi
c000a9bf:	5d                   	pop    ebp
c000a9c0:	c3                   	ret    
c000a9c1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a9c5:	31 ff                	xor    edi,edi
c000a9c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9ce:	85 c0                	test   eax,eax
c000a9d0:	74 e7                	je     c000a9b9 <Dbg::kprintf(char const*, ...)+0x14>
c000a9d2:	8d 77 01             	lea    esi,[edi+0x1]
c000a9d5:	83 f8 25             	cmp    eax,0x25
c000a9d8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9db:	75 47                	jne    c000aa24 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9dd:	83 c7 02             	add    edi,0x2
c000a9e0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9e3:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9e6:	83 e8 25             	sub    eax,0x25
c000a9e9:	0f b6 c0             	movzx  eax,al
c000a9ec:	83 f8 53             	cmp    eax,0x53
c000a9ef:	0f 87 ce 00 00 00    	ja     c000aac3 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9f5:	ff 24 85 e4 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb1c]
c000a9fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa00:	89 c8                	mov    eax,ecx
c000aa02:	83 c1 04             	add    ecx,0x4
c000aa05:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa09:	8b 28                	mov    ebp,DWORD PTR [eax]
c000aa0b:	55                   	push   ebp
c000aa0c:	e8 55 ff ff ff       	call   c000a966 <Dbg::logWriteInt(unsigned int)>
c000aa11:	58                   	pop    eax
c000aa12:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa15:	85 c0                	test   eax,eax
c000aa17:	74 a0                	je     c000a9b9 <Dbg::kprintf(char const*, ...)+0x14>
c000aa19:	8d 77 01             	lea    esi,[edi+0x1]
c000aa1c:	83 f8 25             	cmp    eax,0x25
c000aa1f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa22:	74 b9                	je     c000a9dd <Dbg::kprintf(char const*, ...)+0x38>
c000aa24:	50                   	push   eax
c000aa25:	89 f7                	mov    edi,esi
c000aa27:	e8 fb fe ff ff       	call   c000a927 <Dbg::logc(char)>
c000aa2c:	89 ee                	mov    esi,ebp
c000aa2e:	58                   	pop    eax
c000aa2f:	eb e1                	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa35:	89 c8                	mov    eax,ecx
c000aa37:	83 c1 04             	add    ecx,0x4
c000aa3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa3c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa40:	50                   	push   eax
c000aa41:	e8 01 ff ff ff       	call   c000a947 <Dbg::logs(char*)>
c000aa46:	58                   	pop    eax
c000aa47:	eb c9                	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa4d:	89 d0                	mov    eax,edx
c000aa4f:	83 c2 04             	add    edx,0x4
c000aa52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa56:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa58:	50                   	push   eax
c000aa59:	e8 08 ff ff ff       	call   c000a966 <Dbg::logWriteInt(unsigned int)>
c000aa5e:	58                   	pop    eax
c000aa5f:	eb b1                	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa65:	89 d0                	mov    eax,edx
c000aa67:	83 c2 04             	add    edx,0x4
c000aa6a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa71:	50                   	push   eax
c000aa72:	e8 b0 fe ff ff       	call   c000a927 <Dbg::logc(char)>
c000aa77:	58                   	pop    eax
c000aa78:	eb 98                	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa7e:	89 c8                	mov    eax,ecx
c000aa80:	83 c1 04             	add    ecx,0x4
c000aa83:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa87:	6a 10                	push   0x10
c000aa89:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa8b:	51                   	push   ecx
c000aa8c:	e8 f3 fe ff ff       	call   c000a984 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa91:	5d                   	pop    ebp
c000aa92:	58                   	pop    eax
c000aa93:	e9 7a ff ff ff       	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa9c:	89 d0                	mov    eax,edx
c000aa9e:	83 c2 08             	add    edx,0x8
c000aaa1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaa5:	6a 10                	push   0x10
c000aaa7:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa9:	50                   	push   eax
c000aaaa:	e8 d5 fe ff ff       	call   c000a984 <Dbg::logWriteIntBase(unsigned int, int)>
c000aaaf:	58                   	pop    eax
c000aab0:	5a                   	pop    edx
c000aab1:	e9 5c ff ff ff       	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aab6:	6a 25                	push   0x25
c000aab8:	e8 6a fe ff ff       	call   c000a927 <Dbg::logc(char)>
c000aabd:	5a                   	pop    edx
c000aabe:	e9 4f ff ff ff       	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aac3:	6a 25                	push   0x25
c000aac5:	e8 5d fe ff ff       	call   c000a927 <Dbg::logc(char)>
c000aaca:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aace:	50                   	push   eax
c000aacf:	e8 53 fe ff ff       	call   c000a927 <Dbg::logc(char)>
c000aad4:	5a                   	pop    edx
c000aad5:	59                   	pop    ecx
c000aad6:	e9 37 ff ff ff       	jmp    c000aa12 <Dbg::kprintf(char const*, ...)+0x6d>
c000aadb:	90                   	nop

c000aadc <KiUbsanPrintDetails(char const*, void*)>:
c000aadc:	83 ec 1c             	sub    esp,0x1c
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aae6:	68 34 16 02 c0       	push   0xc0021634
c000aaeb:	e8 b5 fe ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aaf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aafb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaff:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab01:	83 ec 08             	sub    esp,0x8
c000ab04:	50                   	push   eax
c000ab05:	68 48 16 02 c0       	push   0xc0021648
c000ab0a:	e8 96 fe ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ab0f:	83 c4 10             	add    esp,0x10
c000ab12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ab16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ab19:	83 ec 08             	sub    esp,0x8
c000ab1c:	50                   	push   eax
c000ab1d:	68 52 16 02 c0       	push   0xc0021652
c000ab22:	e8 7e fe ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ab2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ab31:	83 ec 08             	sub    esp,0x8
c000ab34:	50                   	push   eax
c000ab35:	68 5c 16 02 c0       	push   0xc002165c
c000ab3a:	e8 66 fe ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	90                   	nop
c000ab43:	83 c4 1c             	add    esp,0x1c
c000ab46:	c3                   	ret    
c000ab47:	90                   	nop

c000ab48 <__ubsan_handle_type_mismatch_v1>:
c000ab48:	83 ec 0c             	sub    esp,0xc
c000ab4b:	83 ec 08             	sub    esp,0x8
c000ab4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab52:	68 a0 17 02 c0       	push   0xc00217a0
c000ab57:	e8 80 ff ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ab5c:	83 c4 10             	add    esp,0x10
c000ab5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab64:	75 16                	jne    c000ab7c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab66:	83 ec 0c             	sub    esp,0xc
c000ab69:	68 66 16 02 c0       	push   0xc0021666
c000ab6e:	e8 32 fe ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	e9 91 00 00 00       	jmp    c000ac0c <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab7b:	90                   	nop
c000ab7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab80:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab83:	85 c0                	test   eax,eax
c000ab85:	74 29                	je     c000abb0 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab8e:	83 e8 01             	sub    eax,0x1
c000ab91:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab95:	75 19                	jne    c000abb0 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab97:	83 ec 08             	sub    esp,0x8
c000ab9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9e:	68 c0 17 02 c0       	push   0xc00217c0
c000aba3:	e8 fd fd ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000aba8:	83 c4 10             	add    esp,0x10
c000abab:	eb 5f                	jmp    c000ac0c <__ubsan_handle_type_mismatch_v1+0xc4>
c000abad:	8d 76 00             	lea    esi,[esi+0x0]
c000abb0:	83 ec 0c             	sub    esp,0xc
c000abb3:	68 7b 16 02 c0       	push   0xc002167b
c000abb8:	e8 e8 fd ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000abbd:	83 c4 10             	add    esp,0x10
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000abc7:	0f b6 c0             	movzx  eax,al
c000abca:	83 ec 08             	sub    esp,0x8
c000abcd:	50                   	push   eax
c000abce:	68 95 16 02 c0       	push   0xc0021695
c000abd3:	e8 cd fd ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abe2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000abe5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abed:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000abf0:	0f b6 c0             	movzx  eax,al
c000abf3:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c000abfa:	51                   	push   ecx
c000abfb:	52                   	push   edx
c000abfc:	50                   	push   eax
c000abfd:	68 e8 17 02 c0       	push   0xc00217e8
c000ac02:	e8 9e fd ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ac07:	83 c4 10             	add    esp,0x10
c000ac0a:	66 90                	xchg   ax,ax
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	68 a0 17 02 c0       	push   0xc00217a0
c000ac14:	e8 de 6a 00 00       	call   c00116f7 <KePanic(char const*)>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	90                   	nop
c000ac1d:	83 c4 0c             	add    esp,0xc
c000ac20:	c3                   	ret    
c000ac21:	8d 76 00             	lea    esi,[esi+0x0]

c000ac24 <__ubsan_handle_pointer_overflow>:
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	83 ec 08             	sub    esp,0x8
c000ac2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac2e:	68 30 18 02 c0       	push   0xc0021830
c000ac33:	e8 a4 fe ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ac38:	83 c4 10             	add    esp,0x10
c000ac3b:	83 ec 0c             	sub    esp,0xc
c000ac3e:	68 30 18 02 c0       	push   0xc0021830
c000ac43:	e8 af 6a 00 00       	call   c00116f7 <KePanic(char const*)>
c000ac48:	83 c4 10             	add    esp,0x10
c000ac4b:	90                   	nop
c000ac4c:	83 c4 0c             	add    esp,0xc
c000ac4f:	c3                   	ret    

c000ac50 <__ubsan_handle_out_of_bounds>:
c000ac50:	83 ec 0c             	sub    esp,0xc
c000ac53:	83 ec 08             	sub    esp,0x8
c000ac56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac5a:	68 a0 16 02 c0       	push   0xc00216a0
c000ac5f:	e8 78 fe ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	68 a0 16 02 c0       	push   0xc00216a0
c000ac6f:	e8 83 6a 00 00       	call   c00116f7 <KePanic(char const*)>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	90                   	nop
c000ac78:	83 c4 0c             	add    esp,0xc
c000ac7b:	c3                   	ret    

c000ac7c <__ubsan_handle_add_overflow>:
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	83 ec 08             	sub    esp,0x8
c000ac82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac86:	68 bd 16 02 c0       	push   0xc00216bd
c000ac8b:	e8 4c fe ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ac90:	83 c4 10             	add    esp,0x10
c000ac93:	83 ec 0c             	sub    esp,0xc
c000ac96:	68 bd 16 02 c0       	push   0xc00216bd
c000ac9b:	e8 57 6a 00 00       	call   c00116f7 <KePanic(char const*)>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	90                   	nop
c000aca4:	83 c4 0c             	add    esp,0xc
c000aca7:	c3                   	ret    

c000aca8 <__ubsan_handle_load_invalid_value>:
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	83 ec 08             	sub    esp,0x8
c000acae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acb2:	68 50 18 02 c0       	push   0xc0021850
c000acb7:	e8 20 fe ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	83 ec 0c             	sub    esp,0xc
c000acc2:	68 50 18 02 c0       	push   0xc0021850
c000acc7:	e8 2b 6a 00 00       	call   c00116f7 <KePanic(char const*)>
c000accc:	83 c4 10             	add    esp,0x10
c000accf:	90                   	nop
c000acd0:	83 c4 0c             	add    esp,0xc
c000acd3:	c3                   	ret    

c000acd4 <__ubsan_handle_divrem_overflow>:
c000acd4:	83 ec 0c             	sub    esp,0xc
c000acd7:	83 ec 08             	sub    esp,0x8
c000acda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acde:	68 74 18 02 c0       	push   0xc0021874
c000ace3:	e8 f4 fd ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	83 ec 0c             	sub    esp,0xc
c000acee:	68 74 18 02 c0       	push   0xc0021874
c000acf3:	e8 ff 69 00 00       	call   c00116f7 <KePanic(char const*)>
c000acf8:	83 c4 10             	add    esp,0x10
c000acfb:	90                   	nop
c000acfc:	83 c4 0c             	add    esp,0xc
c000acff:	c3                   	ret    

c000ad00 <__ubsan_handle_mul_overflow>:
c000ad00:	83 ec 0c             	sub    esp,0xc
c000ad03:	83 ec 08             	sub    esp,0x8
c000ad06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad0a:	68 d9 16 02 c0       	push   0xc00216d9
c000ad0f:	e8 c8 fd ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ad14:	83 c4 10             	add    esp,0x10
c000ad17:	83 ec 0c             	sub    esp,0xc
c000ad1a:	68 d9 16 02 c0       	push   0xc00216d9
c000ad1f:	e8 d3 69 00 00       	call   c00116f7 <KePanic(char const*)>
c000ad24:	83 c4 10             	add    esp,0x10
c000ad27:	90                   	nop
c000ad28:	83 c4 0c             	add    esp,0xc
c000ad2b:	c3                   	ret    

c000ad2c <__ubsan_handle_sub_overflow>:
c000ad2c:	83 ec 0c             	sub    esp,0xc
c000ad2f:	83 ec 08             	sub    esp,0x8
c000ad32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad36:	68 f5 16 02 c0       	push   0xc00216f5
c000ad3b:	e8 9c fd ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ad40:	83 c4 10             	add    esp,0x10
c000ad43:	83 ec 0c             	sub    esp,0xc
c000ad46:	68 f5 16 02 c0       	push   0xc00216f5
c000ad4b:	e8 a7 69 00 00       	call   c00116f7 <KePanic(char const*)>
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	90                   	nop
c000ad54:	83 c4 0c             	add    esp,0xc
c000ad57:	c3                   	ret    

c000ad58 <__ubsan_handle_shift_out_of_bounds>:
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	83 ec 08             	sub    esp,0x8
c000ad5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad62:	68 94 18 02 c0       	push   0xc0021894
c000ad67:	e8 70 fd ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ad6c:	83 c4 10             	add    esp,0x10
c000ad6f:	83 ec 0c             	sub    esp,0xc
c000ad72:	68 94 18 02 c0       	push   0xc0021894
c000ad77:	e8 7b 69 00 00       	call   c00116f7 <KePanic(char const*)>
c000ad7c:	83 c4 10             	add    esp,0x10
c000ad7f:	90                   	nop
c000ad80:	83 c4 0c             	add    esp,0xc
c000ad83:	c3                   	ret    

c000ad84 <__ubsan_handle_negate_overflow>:
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	83 ec 08             	sub    esp,0x8
c000ad8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad8e:	68 b8 18 02 c0       	push   0xc00218b8
c000ad93:	e8 44 fd ff ff       	call   c000aadc <KiUbsanPrintDetails(char const*, void*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	83 ec 0c             	sub    esp,0xc
c000ad9e:	68 b8 18 02 c0       	push   0xc00218b8
c000ada3:	e8 4f 69 00 00       	call   c00116f7 <KePanic(char const*)>
c000ada8:	83 c4 10             	add    esp,0x10
c000adab:	90                   	nop
c000adac:	83 c4 0c             	add    esp,0xc
c000adaf:	c3                   	ret    

c000adb0 <KiIsHashInTable(unsigned short)>:
c000adb0:	0f b7 d0             	movzx  edx,ax
c000adb3:	83 e0 07             	and    eax,0x7
c000adb6:	c1 fa 03             	sar    edx,0x3
c000adb9:	88 c1                	mov    cl,al
c000adbb:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000adc2:	d3 fa                	sar    edx,cl
c000adc4:	89 d0                	mov    eax,edx
c000adc6:	83 e0 01             	and    eax,0x1
c000adc9:	c3                   	ret    

c000adca <KiSetHashInTable(unsigned short, bool)>:
c000adca:	56                   	push   esi
c000adcb:	53                   	push   ebx
c000adcc:	0f b7 d8             	movzx  ebx,ax
c000adcf:	83 e0 07             	and    eax,0x7
c000add2:	c1 fb 03             	sar    ebx,0x3
c000add5:	89 c1                	mov    ecx,eax
c000add7:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000adde:	b8 01 00 00 00       	mov    eax,0x1
c000ade3:	d3 e0                	shl    eax,cl
c000ade5:	84 d2                	test   dl,dl
c000ade7:	74 04                	je     c000aded <KiSetHashInTable(unsigned short, bool)+0x23>
c000ade9:	09 f0                	or     eax,esi
c000adeb:	eb 04                	jmp    c000adf1 <KiSetHashInTable(unsigned short, bool)+0x27>
c000aded:	f7 d0                	not    eax
c000adef:	21 f0                	and    eax,esi
c000adf1:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000adf7:	5b                   	pop    ebx
c000adf8:	5e                   	pop    esi
c000adf9:	c3                   	ret    

c000adfa <KiFlushSymlinkChanges()>:
c000adfa:	57                   	push   edi
c000adfb:	56                   	push   esi
c000adfc:	53                   	push   ebx
c000adfd:	83 ec 1c             	sub    esp,0x1c
c000ae00:	68 14 01 00 00       	push   0x114
c000ae05:	e8 0c cd ff ff       	call   c0007b16 <malloc>
c000ae0a:	83 c4 0c             	add    esp,0xc
c000ae0d:	89 c3                	mov    ebx,eax
c000ae0f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ae15:	68 d7 18 02 c0       	push   0xc00218d7
c000ae1a:	50                   	push   eax
c000ae1b:	e8 8c 0d 00 00       	call   c000bbac <File::File(char const*, Process*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	85 db                	test   ebx,ebx
c000ae25:	75 10                	jne    c000ae37 <KiFlushSymlinkChanges()+0x3d>
c000ae27:	83 ec 0c             	sub    esp,0xc
c000ae2a:	68 f5 18 02 c0       	push   0xc00218f5
c000ae2f:	e8 c3 68 00 00       	call   c00116f7 <KePanic(char const*)>
c000ae34:	83 c4 10             	add    esp,0x10
c000ae37:	50                   	push   eax
c000ae38:	50                   	push   eax
c000ae39:	6a 06                	push   0x6
c000ae3b:	53                   	push   ebx
c000ae3c:	e8 89 0d 00 00       	call   c000bbca <File::open(FileOpenMode)>
c000ae41:	83 c4 10             	add    esp,0x10
c000ae44:	85 c0                	test   eax,eax
c000ae46:	74 10                	je     c000ae58 <KiFlushSymlinkChanges()+0x5e>
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	68 0f 19 02 c0       	push   0xc002190f
c000ae50:	e8 a2 68 00 00       	call   c00116f7 <KePanic(char const*)>
c000ae55:	83 c4 10             	add    esp,0x10
c000ae58:	31 f6                	xor    esi,esi
c000ae5a:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae60:	7e 70                	jle    c000aed2 <KiFlushSymlinkChanges()+0xd8>
c000ae62:	83 ec 0c             	sub    esp,0xc
c000ae65:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae67:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae6b:	89 f0                	mov    eax,esi
c000ae6d:	57                   	push   edi
c000ae6e:	c1 e0 08             	shl    eax,0x8
c000ae71:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae76:	50                   	push   eax
c000ae77:	6a 00                	push   0x0
c000ae79:	68 00 01 00 00       	push   0x100
c000ae7e:	53                   	push   ebx
c000ae7f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae82:	83 c4 20             	add    esp,0x20
c000ae85:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae8d:	74 10                	je     c000ae9f <KiFlushSymlinkChanges()+0xa5>
c000ae8f:	83 ec 0c             	sub    esp,0xc
c000ae92:	68 29 19 02 c0       	push   0xc0021929
c000ae97:	e8 5b 68 00 00       	call   c00116f7 <KePanic(char const*)>
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	83 ec 0c             	sub    esp,0xc
c000aea2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aea4:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000aeab:	57                   	push   edi
c000aeac:	52                   	push   edx
c000aead:	6a 00                	push   0x0
c000aeaf:	6a 08                	push   0x8
c000aeb1:	53                   	push   ebx
c000aeb2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000aeb5:	83 c4 20             	add    esp,0x20
c000aeb8:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000aebd:	74 10                	je     c000aecf <KiFlushSymlinkChanges()+0xd5>
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	68 43 19 02 c0       	push   0xc0021943
c000aec7:	e8 2b 68 00 00       	call   c00116f7 <KePanic(char const*)>
c000aecc:	83 c4 10             	add    esp,0x10
c000aecf:	46                   	inc    esi
c000aed0:	eb 88                	jmp    c000ae5a <KiFlushSymlinkChanges()+0x60>
c000aed2:	83 ec 0c             	sub    esp,0xc
c000aed5:	53                   	push   ebx
c000aed6:	e8 4d 0d 00 00       	call   c000bc28 <File::close()>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	85 db                	test   ebx,ebx
c000aee0:	74 0c                	je     c000aeee <KiFlushSymlinkChanges()+0xf4>
c000aee2:	83 ec 0c             	sub    esp,0xc
c000aee5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aee7:	53                   	push   ebx
c000aee8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000aef8:	83 c4 10             	add    esp,0x10
c000aefb:	5b                   	pop    ebx
c000aefc:	5e                   	pop    esi
c000aefd:	5f                   	pop    edi
c000aefe:	c3                   	ret    

c000aeff <KiDeinitialiseSymlinks(void*)>:
c000aeff:	e9 f6 fe ff ff       	jmp    c000adfa <KiFlushSymlinkChanges()>

c000af04 <KiGetSymlinkHash(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	89 c3                	mov    ebx,eax
c000af07:	83 ec 14             	sub    esp,0x14
c000af0a:	50                   	push   eax
c000af0b:	e8 60 56 ff ff       	call   c0000570 <strlen>
c000af10:	5a                   	pop    edx
c000af11:	59                   	pop    ecx
c000af12:	50                   	push   eax
c000af13:	53                   	push   ebx
c000af14:	e8 60 61 00 00       	call   c0011079 <KeCalculateCRC32(unsigned char*, int)>
c000af19:	83 c4 18             	add    esp,0x18
c000af1c:	89 c2                	mov    edx,eax
c000af1e:	5b                   	pop    ebx
c000af1f:	c1 ea 10             	shr    edx,0x10
c000af22:	31 d0                	xor    eax,edx
c000af24:	c3                   	ret    

c000af25 <KiCreateSymlinkID()>:
c000af25:	55                   	push   ebp
c000af26:	57                   	push   edi
c000af27:	56                   	push   esi
c000af28:	53                   	push   ebx
c000af29:	31 db                	xor    ebx,ebx
c000af2b:	83 ec 1c             	sub    esp,0x1c
c000af2e:	e8 12 69 00 00       	call   c0011845 <KeRand()>
c000af33:	43                   	inc    ebx
c000af34:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af3a:	31 d2                	xor    edx,edx
c000af3c:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af3f:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af43:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af49:	c1 e0 1f             	shl    eax,0x1f
c000af4c:	89 d7                	mov    edi,edx
c000af4e:	89 c6                	mov    esi,eax
c000af50:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000af54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af5c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af62:	75 10                	jne    c000af74 <KiCreateSymlinkID()+0x4f>
c000af64:	83 ec 0c             	sub    esp,0xc
c000af67:	68 5d 19 02 c0       	push   0xc002195d
c000af6c:	e8 86 67 00 00       	call   c00116f7 <KePanic(char const*)>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af78:	75 04                	jne    c000af7e <KiCreateSymlinkID()+0x59>
c000af7a:	39 f5                	cmp    ebp,esi
c000af7c:	74 b0                	je     c000af2e <KiCreateSymlinkID()+0x9>
c000af7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af86:	31 f0                	xor    eax,esi
c000af88:	83 c4 1c             	add    esp,0x1c
c000af8b:	31 fa                	xor    edx,edi
c000af8d:	5b                   	pop    ebx
c000af8e:	5e                   	pop    esi
c000af8f:	5f                   	pop    edi
c000af90:	5d                   	pop    ebp
c000af91:	c3                   	ret    

c000af92 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af92:	53                   	push   ebx
c000af93:	83 ec 0c             	sub    esp,0xc
c000af96:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000afa2:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afa7:	68 00 01 00 00       	push   0x100
c000afac:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000afb3:	6a 00                	push   0x0
c000afb5:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000afbc:	c1 e0 08             	shl    eax,0x8
c000afbf:	05 00 70 02 c0       	add    eax,0xc0027000
c000afc4:	50                   	push   eax
c000afc5:	e8 26 55 ff ff       	call   c00004f0 <memset>
c000afca:	58                   	pop    eax
c000afcb:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afd0:	5a                   	pop    edx
c000afd1:	c1 e0 08             	shl    eax,0x8
c000afd4:	53                   	push   ebx
c000afd5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afda:	50                   	push   eax
c000afdb:	e8 60 56 ff ff       	call   c0000640 <strcpy>
c000afe0:	89 d8                	mov    eax,ebx
c000afe2:	e8 1d ff ff ff       	call   c000af04 <KiGetSymlinkHash(char const*)>
c000afe7:	59                   	pop    ecx
c000afe8:	0f b7 d8             	movzx  ebx,ax
c000afeb:	58                   	pop    eax
c000afec:	53                   	push   ebx
c000afed:	68 66 19 02 c0       	push   0xc0021966
c000aff2:	e8 ae f9 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000aff7:	89 d8                	mov    eax,ebx
c000aff9:	ba 01 00 00 00       	mov    edx,0x1
c000affe:	e8 c7 fd ff ff       	call   c000adca <KiSetHashInTable(unsigned short, bool)>
c000b003:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000b008:	83 c4 10             	add    esp,0x10
c000b00b:	40                   	inc    eax
c000b00c:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000b011:	83 f8 03             	cmp    eax,0x3
c000b014:	7e 09                	jle    c000b01f <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000b016:	83 c4 08             	add    esp,0x8
c000b019:	5b                   	pop    ebx
c000b01a:	e9 db fd ff ff       	jmp    c000adfa <KiFlushSymlinkChanges()>
c000b01f:	83 c4 08             	add    esp,0x8
c000b022:	5b                   	pop    ebx
c000b023:	c3                   	ret    

c000b024 <KeInitialiseSymlinks()>:
c000b024:	57                   	push   edi
c000b025:	56                   	push   esi
c000b026:	53                   	push   ebx
c000b027:	81 ec 14 01 00 00    	sub    esp,0x114
c000b02d:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b037:	68 00 20 00 00       	push   0x2000
c000b03c:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b046:	6a 00                	push   0x0
c000b048:	68 00 74 02 c0       	push   0xc0027400
c000b04d:	e8 9e 54 ff ff       	call   c00004f0 <memset>
c000b052:	59                   	pop    ecx
c000b053:	5b                   	pop    ebx
c000b054:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b05a:	68 7a 19 02 c0       	push   0xc002197a
c000b05f:	e8 41 f9 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000b064:	5e                   	pop    esi
c000b065:	5f                   	pop    edi
c000b066:	6a 00                	push   0x0
c000b068:	68 ff ae 00 c0       	push   0xc000aeff
c000b06d:	e8 72 5e 00 00       	call   c0010ee4 <KeRegisterAtexit(void (*)(void*), void*)>
c000b072:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b079:	e8 98 ca ff ff       	call   c0007b16 <malloc>
c000b07e:	83 c4 0c             	add    esp,0xc
c000b081:	89 c3                	mov    ebx,eax
c000b083:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b089:	68 d7 18 02 c0       	push   0xc00218d7
c000b08e:	50                   	push   eax
c000b08f:	e8 18 0b 00 00       	call   c000bbac <File::File(char const*, Process*)>
c000b094:	83 c4 10             	add    esp,0x10
c000b097:	85 db                	test   ebx,ebx
c000b099:	75 10                	jne    c000b0ab <KeInitialiseSymlinks()+0x87>
c000b09b:	83 ec 0c             	sub    esp,0xc
c000b09e:	68 97 19 02 c0       	push   0xc0021997
c000b0a3:	e8 4f 66 00 00       	call   c00116f7 <KePanic(char const*)>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	53                   	push   ebx
c000b0af:	e8 da 0d 00 00       	call   c000be8e <File::exists()>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	84 c0                	test   al,al
c000b0b9:	75 3a                	jne    c000b0f5 <KeInitialiseSymlinks()+0xd1>
c000b0bb:	52                   	push   edx
c000b0bc:	52                   	push   edx
c000b0bd:	6a 12                	push   0x12
c000b0bf:	53                   	push   ebx
c000b0c0:	e8 05 0b 00 00       	call   c000bbca <File::open(FileOpenMode)>
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	85 c0                	test   eax,eax
c000b0ca:	74 10                	je     c000b0dc <KeInitialiseSymlinks()+0xb8>
c000b0cc:	83 ec 0c             	sub    esp,0xc
c000b0cf:	68 b4 19 02 c0       	push   0xc00219b4
c000b0d4:	e8 1e 66 00 00       	call   c00116f7 <KePanic(char const*)>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	83 ec 0c             	sub    esp,0xc
c000b0df:	53                   	push   ebx
c000b0e0:	e8 43 0b 00 00       	call   c000bc28 <File::close()>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	85 db                	test   ebx,ebx
c000b0ea:	0f 84 9e 00 00 00    	je     c000b18e <KeInitialiseSymlinks()+0x16a>
c000b0f0:	e9 8d 00 00 00       	jmp    c000b182 <KeInitialiseSymlinks()+0x15e>
c000b0f5:	50                   	push   eax
c000b0f6:	50                   	push   eax
c000b0f7:	6a 01                	push   0x1
c000b0f9:	53                   	push   ebx
c000b0fa:	e8 cb 0a 00 00       	call   c000bbca <File::open(FileOpenMode)>
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	85 c0                	test   eax,eax
c000b104:	74 10                	je     c000b116 <KeInitialiseSymlinks()+0xf2>
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	68 d1 19 02 c0       	push   0xc00219d1
c000b10e:	e8 e4 65 00 00       	call   c00116f7 <KePanic(char const*)>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b11f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b123:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b125:	57                   	push   edi
c000b126:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b12a:	56                   	push   esi
c000b12b:	6a 00                	push   0x0
c000b12d:	68 00 01 00 00       	push   0x100
c000b132:	53                   	push   ebx
c000b133:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b136:	83 c4 20             	add    esp,0x20
c000b139:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b141:	75 33                	jne    c000b176 <KeInitialiseSymlinks()+0x152>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b148:	57                   	push   edi
c000b149:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b14d:	52                   	push   edx
c000b14e:	6a 00                	push   0x0
c000b150:	6a 08                	push   0x8
c000b152:	53                   	push   ebx
c000b153:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b156:	83 c4 20             	add    esp,0x20
c000b159:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b15e:	75 16                	jne    c000b176 <KeInitialiseSymlinks()+0x152>
c000b160:	89 f0                	mov    eax,esi
c000b162:	e8 9d fd ff ff       	call   c000af04 <KiGetSymlinkHash(char const*)>
c000b167:	ba 01 00 00 00       	mov    edx,0x1
c000b16c:	0f b7 c0             	movzx  eax,ax
c000b16f:	e8 56 fc ff ff       	call   c000adca <KiSetHashInTable(unsigned short, bool)>
c000b174:	eb a0                	jmp    c000b116 <KeInitialiseSymlinks()+0xf2>
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	53                   	push   ebx
c000b17a:	e8 a9 0a 00 00       	call   c000bc28 <File::close()>
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	83 ec 0c             	sub    esp,0xc
c000b185:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b187:	53                   	push   ebx
c000b188:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	81 c4 10 01 00 00    	add    esp,0x110
c000b194:	5b                   	pop    ebx
c000b195:	5e                   	pop    esi
c000b196:	5f                   	pop    edi
c000b197:	c3                   	ret    

c000b198 <KiIsSymlinkRegistered(char const*)>:
c000b198:	55                   	push   ebp
c000b199:	57                   	push   edi
c000b19a:	56                   	push   esi
c000b19b:	53                   	push   ebx
c000b19c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b1a2:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b1a9:	89 f0                	mov    eax,esi
c000b1ab:	e8 54 fd ff ff       	call   c000af04 <KiGetSymlinkHash(char const*)>
c000b1b0:	0f b7 c0             	movzx  eax,ax
c000b1b3:	53                   	push   ebx
c000b1b4:	56                   	push   esi
c000b1b5:	50                   	push   eax
c000b1b6:	68 ec 19 02 c0       	push   0xc00219ec
c000b1bb:	e8 e5 f7 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000b1c0:	89 f0                	mov    eax,esi
c000b1c2:	e8 3d fd ff ff       	call   c000af04 <KiGetSymlinkHash(char const*)>
c000b1c7:	0f b7 c0             	movzx  eax,ax
c000b1ca:	e8 e1 fb ff ff       	call   c000adb0 <KiIsHashInTable(unsigned short)>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	88 c1                	mov    cl,al
c000b1d4:	31 d2                	xor    edx,edx
c000b1d6:	31 c0                	xor    eax,eax
c000b1d8:	84 c9                	test   cl,cl
c000b1da:	0f 84 31 01 00 00    	je     c000b311 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1e0:	31 db                	xor    ebx,ebx
c000b1e2:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b1e8:	7e 30                	jle    c000b21a <KiIsSymlinkRegistered(char const*)+0x82>
c000b1ea:	89 d8                	mov    eax,ebx
c000b1ec:	51                   	push   ecx
c000b1ed:	c1 e0 08             	shl    eax,0x8
c000b1f0:	51                   	push   ecx
c000b1f1:	05 00 70 02 c0       	add    eax,0xc0027000
c000b1f6:	50                   	push   eax
c000b1f7:	56                   	push   esi
c000b1f8:	e8 53 55 ff ff       	call   c0000750 <strcmp>
c000b1fd:	83 c4 10             	add    esp,0x10
c000b200:	85 c0                	test   eax,eax
c000b202:	75 13                	jne    c000b217 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b204:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b20b:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b212:	e9 fa 00 00 00       	jmp    c000b311 <KiIsSymlinkRegistered(char const*)+0x179>
c000b217:	43                   	inc    ebx
c000b218:	eb c8                	jmp    c000b1e2 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b21a:	83 ec 0c             	sub    esp,0xc
c000b21d:	68 14 01 00 00       	push   0x114
c000b222:	e8 ef c8 ff ff       	call   c0007b16 <malloc>
c000b227:	83 c4 0c             	add    esp,0xc
c000b22a:	89 c3                	mov    ebx,eax
c000b22c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b232:	68 d7 18 02 c0       	push   0xc00218d7
c000b237:	50                   	push   eax
c000b238:	e8 6f 09 00 00       	call   c000bbac <File::File(char const*, Process*)>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	85 db                	test   ebx,ebx
c000b242:	75 12                	jne    c000b256 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	68 01 1a 02 c0       	push   0xc0021a01
c000b24c:	e8 a6 64 00 00       	call   c00116f7 <KePanic(char const*)>
c000b251:	83 c4 10             	add    esp,0x10
c000b254:	eb 10                	jmp    c000b266 <KiIsSymlinkRegistered(char const*)+0xce>
c000b256:	83 ec 0c             	sub    esp,0xc
c000b259:	53                   	push   ebx
c000b25a:	e8 2f 0c 00 00       	call   c000be8e <File::exists()>
c000b25f:	83 c4 10             	add    esp,0x10
c000b262:	84 c0                	test   al,al
c000b264:	74 de                	je     c000b244 <KiIsSymlinkRegistered(char const*)+0xac>
c000b266:	52                   	push   edx
c000b267:	52                   	push   edx
c000b268:	6a 01                	push   0x1
c000b26a:	53                   	push   ebx
c000b26b:	e8 5a 09 00 00       	call   c000bbca <File::open(FileOpenMode)>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	85 c0                	test   eax,eax
c000b275:	74 10                	je     c000b287 <KiIsSymlinkRegistered(char const*)+0xef>
c000b277:	83 ec 0c             	sub    esp,0xc
c000b27a:	68 1c 1a 02 c0       	push   0xc0021a1c
c000b27f:	e8 73 64 00 00       	call   c00116f7 <KePanic(char const*)>
c000b284:	83 c4 10             	add    esp,0x10
c000b287:	83 ec 0c             	sub    esp,0xc
c000b28a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b28c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b290:	55                   	push   ebp
c000b291:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b295:	57                   	push   edi
c000b296:	6a 00                	push   0x0
c000b298:	68 00 01 00 00       	push   0x100
c000b29d:	53                   	push   ebx
c000b29e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2a1:	83 c4 20             	add    esp,0x20
c000b2a4:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b2ac:	75 4b                	jne    c000b2f9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2b3:	55                   	push   ebp
c000b2b4:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b2b8:	52                   	push   edx
c000b2b9:	6a 00                	push   0x0
c000b2bb:	6a 08                	push   0x8
c000b2bd:	53                   	push   ebx
c000b2be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2c1:	83 c4 20             	add    esp,0x20
c000b2c4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b2c9:	75 2e                	jne    c000b2f9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b2cb:	50                   	push   eax
c000b2cc:	50                   	push   eax
c000b2cd:	57                   	push   edi
c000b2ce:	56                   	push   esi
c000b2cf:	e8 7c 54 ff ff       	call   c0000750 <strcmp>
c000b2d4:	83 c4 10             	add    esp,0x10
c000b2d7:	85 c0                	test   eax,eax
c000b2d9:	75 ac                	jne    c000b287 <KiIsSymlinkRegistered(char const*)+0xef>
c000b2db:	83 ec 0c             	sub    esp,0xc
c000b2de:	53                   	push   ebx
c000b2df:	e8 44 09 00 00       	call   c000bc28 <File::close()>
c000b2e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b2f4:	83 c4 10             	add    esp,0x10
c000b2f7:	eb 18                	jmp    c000b311 <KiIsSymlinkRegistered(char const*)+0x179>
c000b2f9:	83 ec 0c             	sub    esp,0xc
c000b2fc:	53                   	push   ebx
c000b2fd:	e8 26 09 00 00       	call   c000bc28 <File::close()>
c000b302:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b304:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b307:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	31 c0                	xor    eax,eax
c000b30f:	31 d2                	xor    edx,edx
c000b311:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b317:	5b                   	pop    ebx
c000b318:	5e                   	pop    esi
c000b319:	5f                   	pop    edi
c000b31a:	5d                   	pop    ebp
c000b31b:	c3                   	ret    

c000b31c <KeDereferenceSymlink(char const*, char*)>:
c000b31c:	55                   	push   ebp
c000b31d:	57                   	push   edi
c000b31e:	56                   	push   esi
c000b31f:	53                   	push   ebx
c000b320:	83 ec 48             	sub    esp,0x48
c000b323:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b327:	56                   	push   esi
c000b328:	e8 6b fe ff ff       	call   c000b198 <KiIsSymlinkRegistered(char const*)>
c000b32d:	83 c4 10             	add    esp,0x10
c000b330:	89 c7                	mov    edi,eax
c000b332:	89 d0                	mov    eax,edx
c000b334:	09 f8                	or     eax,edi
c000b336:	75 07                	jne    c000b33f <KeDereferenceSymlink(char const*, char*)+0x23>
c000b338:	31 c0                	xor    eax,eax
c000b33a:	e9 7c 01 00 00       	jmp    c000b4bb <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b33f:	83 ec 0c             	sub    esp,0xc
c000b342:	89 d5                	mov    ebp,edx
c000b344:	68 14 01 00 00       	push   0x114
c000b349:	e8 c8 c7 ff ff       	call   c0007b16 <malloc>
c000b34e:	83 c4 0c             	add    esp,0xc
c000b351:	89 c3                	mov    ebx,eax
c000b353:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b359:	56                   	push   esi
c000b35a:	50                   	push   eax
c000b35b:	e8 4c 08 00 00       	call   c000bbac <File::File(char const*, Process*)>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	85 db                	test   ebx,ebx
c000b365:	0f 84 32 01 00 00    	je     c000b49d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b36b:	56                   	push   esi
c000b36c:	56                   	push   esi
c000b36d:	6a 01                	push   0x1
c000b36f:	53                   	push   ebx
c000b370:	e8 55 08 00 00       	call   c000bbca <File::open(FileOpenMode)>
c000b375:	83 c4 10             	add    esp,0x10
c000b378:	85 c0                	test   eax,eax
c000b37a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b37c:	74 09                	je     c000b387 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	53                   	push   ebx
c000b382:	e9 10 01 00 00       	jmp    c000b497 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b387:	83 ec 0c             	sub    esp,0xc
c000b38a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b38e:	56                   	push   esi
c000b38f:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b393:	52                   	push   edx
c000b394:	6a 00                	push   0x0
c000b396:	6a 08                	push   0x8
c000b398:	53                   	push   ebx
c000b399:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b39c:	83 c4 20             	add    esp,0x20
c000b39f:	85 c0                	test   eax,eax
c000b3a1:	0f 85 e2 00 00 00    	jne    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3a7:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b3ac:	0f 85 d7 00 00 00    	jne    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3b2:	83 ec 0c             	sub    esp,0xc
c000b3b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3b7:	56                   	push   esi
c000b3b8:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b3bc:	52                   	push   edx
c000b3bd:	6a 00                	push   0x0
c000b3bf:	6a 08                	push   0x8
c000b3c1:	53                   	push   ebx
c000b3c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b3c5:	83 c4 20             	add    esp,0x20
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	0f 85 b9 00 00 00    	jne    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b3d5:	0f 85 ae 00 00 00    	jne    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3db:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b3df:	0f 85 53 ff ff ff    	jne    c000b338 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3e5:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b3e9:	0f 85 49 ff ff ff    	jne    c000b338 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3ef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b3f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3ff:	51                   	push   ecx
c000b400:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b404:	50                   	push   eax
c000b405:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b409:	50                   	push   eax
c000b40a:	53                   	push   ebx
c000b40b:	e8 bc 0a 00 00       	call   c000becc <File::stat(unsigned long long*, bool*)>
c000b410:	83 c4 10             	add    esp,0x10
c000b413:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b418:	75 6f                	jne    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b41a:	31 c9                	xor    ecx,ecx
c000b41c:	bf 0f 00 00 00       	mov    edi,0xf
c000b421:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b425:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b429:	39 c7                	cmp    edi,eax
c000b42b:	89 cf                	mov    edi,ecx
c000b42d:	19 d7                	sbb    edi,edx
c000b42f:	73 58                	jae    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b431:	83 c0 f0             	add    eax,0xfffffff0
c000b434:	bf ff 00 00 00       	mov    edi,0xff
c000b439:	83 d2 ff             	adc    edx,0xffffffff
c000b43c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b440:	39 c7                	cmp    edi,eax
c000b442:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b446:	19 d1                	sbb    ecx,edx
c000b448:	72 53                	jb     c000b49d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b44a:	40                   	inc    eax
c000b44b:	52                   	push   edx
c000b44c:	50                   	push   eax
c000b44d:	6a 00                	push   0x0
c000b44f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b453:	e8 98 50 ff ff       	call   c00004f0 <memset>
c000b458:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b45a:	89 34 24             	mov    DWORD PTR [esp],esi
c000b45d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b461:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b465:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b469:	53                   	push   ebx
c000b46a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b46d:	83 c4 20             	add    esp,0x20
c000b470:	85 c0                	test   eax,eax
c000b472:	75 15                	jne    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b478:	89 c7                	mov    edi,eax
c000b47a:	c1 ff 1f             	sar    edi,0x1f
c000b47d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b481:	75 06                	jne    c000b489 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b483:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b487:	74 19                	je     c000b4a2 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b489:	83 ec 0c             	sub    esp,0xc
c000b48c:	53                   	push   ebx
c000b48d:	e8 96 07 00 00       	call   c000bc28 <File::close()>
c000b492:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b494:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b497:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b49a:	83 c4 10             	add    esp,0x10
c000b49d:	83 c8 ff             	or     eax,0xffffffff
c000b4a0:	eb 19                	jmp    c000b4bb <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	53                   	push   ebx
c000b4a6:	e8 7d 07 00 00       	call   c000bc28 <File::close()>
c000b4ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	b8 01 00 00 00       	mov    eax,0x1
c000b4bb:	83 c4 3c             	add    esp,0x3c
c000b4be:	5b                   	pop    ebx
c000b4bf:	5e                   	pop    esi
c000b4c0:	5f                   	pop    edi
c000b4c1:	5d                   	pop    ebp
c000b4c2:	c3                   	ret    

c000b4c3 <KeCreateSymlink(char const*, char const*)>:
c000b4c3:	55                   	push   ebp
c000b4c4:	57                   	push   edi
c000b4c5:	56                   	push   esi
c000b4c6:	53                   	push   ebx
c000b4c7:	83 ec 38             	sub    esp,0x38
c000b4ca:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b4ce:	68 14 01 00 00       	push   0x114
c000b4d3:	e8 3e c6 ff ff       	call   c0007b16 <malloc>
c000b4d8:	6a 00                	push   0x0
c000b4da:	89 c3                	mov    ebx,eax
c000b4dc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b4e6:	50                   	push   eax
c000b4e7:	e8 e2 05 00 00       	call   c000bace <File::File(char const*, Process*, bool)>
c000b4ec:	83 c4 20             	add    esp,0x20
c000b4ef:	b8 01 00 00 00       	mov    eax,0x1
c000b4f4:	85 db                	test   ebx,ebx
c000b4f6:	0f 84 19 01 00 00    	je     c000b615 <KeCreateSymlink(char const*, char const*)+0x152>
c000b4fc:	52                   	push   edx
c000b4fd:	52                   	push   edx
c000b4fe:	6a 12                	push   0x12
c000b500:	53                   	push   ebx
c000b501:	e8 c4 06 00 00       	call   c000bbca <File::open(FileOpenMode)>
c000b506:	83 c4 10             	add    esp,0x10
c000b509:	85 c0                	test   eax,eax
c000b50b:	74 0b                	je     c000b518 <KeCreateSymlink(char const*, char const*)+0x55>
c000b50d:	83 ec 0c             	sub    esp,0xc
c000b510:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b512:	53                   	push   ebx
c000b513:	e9 f2 00 00 00       	jmp    c000b60a <KeCreateSymlink(char const*, char const*)+0x147>
c000b518:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b51c:	be 69 1a 02 c0       	mov    esi,0xc0021a69
c000b521:	b9 09 00 00 00       	mov    ecx,0x9
c000b526:	fc                   	cld    
c000b527:	83 ec 0c             	sub    esp,0xc
c000b52a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b52c:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b530:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b532:	56                   	push   esi
c000b533:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b537:	52                   	push   edx
c000b538:	6a 00                	push   0x0
c000b53a:	6a 08                	push   0x8
c000b53c:	53                   	push   ebx
c000b53d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b540:	83 c4 20             	add    esp,0x20
c000b543:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b548:	0f 85 ae 00 00 00    	jne    c000b5fc <KeCreateSymlink(char const*, char const*)+0x139>
c000b54e:	85 c0                	test   eax,eax
c000b550:	0f 85 a6 00 00 00    	jne    c000b5fc <KeCreateSymlink(char const*, char const*)+0x139>
c000b556:	e8 ca f9 ff ff       	call   c000af25 <KiCreateSymlinkID()>
c000b55b:	83 ec 0c             	sub    esp,0xc
c000b55e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b562:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b566:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b568:	56                   	push   esi
c000b569:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b56d:	52                   	push   edx
c000b56e:	6a 00                	push   0x0
c000b570:	6a 08                	push   0x8
c000b572:	53                   	push   ebx
c000b573:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b576:	83 c4 20             	add    esp,0x20
c000b579:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b57e:	75 7c                	jne    c000b5fc <KeCreateSymlink(char const*, char const*)+0x139>
c000b580:	85 c0                	test   eax,eax
c000b582:	75 78                	jne    c000b5fc <KeCreateSymlink(char const*, char const*)+0x139>
c000b584:	83 ec 0c             	sub    esp,0xc
c000b587:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b589:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b58c:	55                   	push   ebp
c000b58d:	e8 de 4f ff ff       	call   c0000570 <strlen>
c000b592:	89 34 24             	mov    DWORD PTR [esp],esi
c000b595:	31 d2                	xor    edx,edx
c000b597:	55                   	push   ebp
c000b598:	52                   	push   edx
c000b599:	50                   	push   eax
c000b59a:	53                   	push   ebx
c000b59b:	ff d7                	call   edi
c000b59d:	83 c4 14             	add    esp,0x14
c000b5a0:	89 c6                	mov    esi,eax
c000b5a2:	55                   	push   ebp
c000b5a3:	e8 c8 4f ff ff       	call   c0000570 <strlen>
c000b5a8:	83 c4 10             	add    esp,0x10
c000b5ab:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b5af:	75 4b                	jne    c000b5fc <KeCreateSymlink(char const*, char const*)+0x139>
c000b5b1:	85 f6                	test   esi,esi
c000b5b3:	75 47                	jne    c000b5fc <KeCreateSymlink(char const*, char const*)+0x139>
c000b5b5:	50                   	push   eax
c000b5b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5ba:	55                   	push   ebp
c000b5bb:	68 37 1a 02 c0       	push   0xc0021a37
c000b5c0:	e8 e0 f3 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000b5c5:	83 c4 0c             	add    esp,0xc
c000b5c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b5cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b5d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b5d4:	e8 b9 f9 ff ff       	call   c000af92 <KeRegisterSymlink(char const*, unsigned long long)>
c000b5d9:	c7 04 24 5c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a5c
c000b5e0:	e8 c0 f3 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000b5e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5e8:	e8 3b 06 00 00       	call   c000bc28 <File::close()>
c000b5ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5f5:	83 c4 10             	add    esp,0x10
c000b5f8:	31 c0                	xor    eax,eax
c000b5fa:	eb 19                	jmp    c000b615 <KeCreateSymlink(char const*, char const*)+0x152>
c000b5fc:	83 ec 0c             	sub    esp,0xc
c000b5ff:	53                   	push   ebx
c000b600:	e8 23 06 00 00       	call   c000bc28 <File::close()>
c000b605:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b607:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b60a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b60d:	83 c4 10             	add    esp,0x10
c000b610:	b8 01 00 00 00       	mov    eax,0x1
c000b615:	83 c4 2c             	add    esp,0x2c
c000b618:	5b                   	pop    ebx
c000b619:	5e                   	pop    esi
c000b61a:	5f                   	pop    edi
c000b61b:	5d                   	pop    ebp
c000b61c:	c3                   	ret    
c000b61d:	90                   	nop

c000b61e <File::read(unsigned long long, void*, int*)>:
c000b61e:	53                   	push   ebx
c000b61f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b623:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b627:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b62e:	83 f8 19             	cmp    eax,0x19
c000b631:	77 35                	ja     c000b668 <File::read(unsigned long long, void*, int*)+0x4a>
c000b633:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b63a:	85 c0                	test   eax,eax
c000b63c:	74 2a                	je     c000b668 <File::read(unsigned long long, void*, int*)+0x4a>
c000b63e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b644:	85 c0                	test   eax,eax
c000b646:	74 20                	je     c000b668 <File::read(unsigned long long, void*, int*)+0x4a>
c000b648:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b64c:	74 21                	je     c000b66f <File::read(unsigned long long, void*, int*)+0x51>
c000b64e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b650:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b654:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b65a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b662:	5b                   	pop    ebx
c000b663:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b666:	ff e0                	jmp    eax
c000b668:	b8 0b 00 00 00       	mov    eax,0xb
c000b66d:	eb 05                	jmp    c000b674 <File::read(unsigned long long, void*, int*)+0x56>
c000b66f:	b8 05 00 00 00       	mov    eax,0x5
c000b674:	5b                   	pop    ebx
c000b675:	c3                   	ret    

c000b676 <File::write(unsigned long long, void*, int*)>:
c000b676:	53                   	push   ebx
c000b677:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b67b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b67f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b686:	83 f8 19             	cmp    eax,0x19
c000b689:	77 35                	ja     c000b6c0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b68b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b692:	85 c0                	test   eax,eax
c000b694:	74 2a                	je     c000b6c0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b696:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b69c:	85 c0                	test   eax,eax
c000b69e:	74 20                	je     c000b6c0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6a4:	74 21                	je     c000b6c7 <File::write(unsigned long long, void*, int*)+0x51>
c000b6a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6ac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6ba:	5b                   	pop    ebx
c000b6bb:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b6be:	ff e0                	jmp    eax
c000b6c0:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c5:	eb 05                	jmp    c000b6cc <File::write(unsigned long long, void*, int*)+0x56>
c000b6c7:	b8 05 00 00 00       	mov    eax,0x5
c000b6cc:	5b                   	pop    ebx
c000b6cd:	c3                   	ret    

c000b6ce <Directory::read(unsigned long long, void*, int*)>:
c000b6ce:	53                   	push   ebx
c000b6cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6de:	83 f8 19             	cmp    eax,0x19
c000b6e1:	77 35                	ja     c000b718 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6e3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6ea:	85 c0                	test   eax,eax
c000b6ec:	74 2a                	je     c000b718 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6ee:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6f4:	85 c0                	test   eax,eax
c000b6f6:	74 20                	je     c000b718 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6fc:	74 21                	je     c000b71f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b700:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b704:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b70a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b70e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b712:	5b                   	pop    ebx
c000b713:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b716:	ff e0                	jmp    eax
c000b718:	b8 0b 00 00 00       	mov    eax,0xb
c000b71d:	eb 05                	jmp    c000b724 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b71f:	b8 05 00 00 00       	mov    eax,0x5
c000b724:	5b                   	pop    ebx
c000b725:	c3                   	ret    

c000b726 <Directory::write(unsigned long long, void*, int*)>:
c000b726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b72a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b731:	b8 0b 00 00 00       	mov    eax,0xb
c000b736:	83 fa 19             	cmp    edx,0x19
c000b739:	77 18                	ja     c000b753 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b73b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b742:	85 d2                	test   edx,edx
c000b744:	74 0d                	je     c000b753 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b746:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b74d:	19 c0                	sbb    eax,eax
c000b74f:	83 e0 0a             	and    eax,0xa
c000b752:	40                   	inc    eax
c000b753:	c3                   	ret    

c000b754 <File::isAtty()>:
c000b754:	31 c0                	xor    eax,eax
c000b756:	c3                   	ret    
c000b757:	90                   	nop

c000b758 <Directory::isAtty()>:
c000b758:	31 c0                	xor    eax,eax
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b75c:	b8 0a 00 00 00       	mov    eax,0xa
c000b761:	c3                   	ret    

c000b762 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b762:	b8 0a 00 00 00       	mov    eax,0xa
c000b767:	c3                   	ret    

c000b768 <Filesystem::allocateSwapfile(char const*, int)>:
c000b768:	31 c0                	xor    eax,eax
c000b76a:	31 d2                	xor    edx,edx
c000b76c:	c3                   	ret    
c000b76d:	90                   	nop

c000b76e <File::~File()>:
c000b76e:	83 ec 0c             	sub    esp,0xc
c000b771:	ba 28 1b 02 c0       	mov    edx,0xc0021b28
c000b776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77a:	89 10                	mov    DWORD PTR [eax],edx
c000b77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b780:	83 ec 0c             	sub    esp,0xc
c000b783:	50                   	push   eax
c000b784:	e8 7b dc ff ff       	call   c0009404 <UnixFile::~UnixFile()>
c000b789:	83 c4 10             	add    esp,0x10
c000b78c:	90                   	nop
c000b78d:	83 c4 0c             	add    esp,0xc
c000b790:	c3                   	ret    
c000b791:	90                   	nop

c000b792 <File::~File()>:
c000b792:	83 ec 0c             	sub    esp,0xc
c000b795:	83 ec 0c             	sub    esp,0xc
c000b798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79c:	e8 cd ff ff ff       	call   c000b76e <File::~File()>
c000b7a1:	83 c4 10             	add    esp,0x10
c000b7a4:	83 ec 08             	sub    esp,0x8
c000b7a7:	68 14 01 00 00       	push   0x114
c000b7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b0:	e8 c3 f0 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000b7b5:	83 c4 10             	add    esp,0x10
c000b7b8:	83 c4 0c             	add    esp,0xc
c000b7bb:	c3                   	ret    

c000b7bc <Directory::~Directory()>:
c000b7bc:	83 ec 0c             	sub    esp,0xc
c000b7bf:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c000b7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7c8:	89 10                	mov    DWORD PTR [eax],edx
c000b7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ce:	83 ec 0c             	sub    esp,0xc
c000b7d1:	50                   	push   eax
c000b7d2:	e8 2d dc ff ff       	call   c0009404 <UnixFile::~UnixFile()>
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	90                   	nop
c000b7db:	83 c4 0c             	add    esp,0xc
c000b7de:	c3                   	ret    
c000b7df:	90                   	nop

c000b7e0 <Directory::~Directory()>:
c000b7e0:	83 ec 0c             	sub    esp,0xc
c000b7e3:	83 ec 0c             	sub    esp,0xc
c000b7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ea:	e8 cd ff ff ff       	call   c000b7bc <Directory::~Directory()>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	83 ec 08             	sub    esp,0x8
c000b7f5:	68 14 01 00 00       	push   0x114
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	e8 75 f0 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	83 c4 0c             	add    esp,0xc
c000b809:	c3                   	ret    

c000b80a <Filesystem::Filesystem()>:
c000b80a:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c000b80f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b813:	89 10                	mov    DWORD PTR [eax],edx
c000b815:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b81f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b826:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b82b:	90                   	nop
c000b82c:	c3                   	ret    
c000b82d:	90                   	nop

c000b82e <Filesystem::~Filesystem()>:
c000b82e:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c000b833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b837:	89 10                	mov    DWORD PTR [eax],edx
c000b839:	90                   	nop
c000b83a:	c3                   	ret    
c000b83b:	90                   	nop

c000b83c <Filesystem::~Filesystem()>:
c000b83c:	83 ec 0c             	sub    esp,0xc
c000b83f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b843:	e8 e6 ff ff ff       	call   c000b82e <Filesystem::~Filesystem()>
c000b848:	83 c4 04             	add    esp,0x4
c000b84b:	83 ec 08             	sub    esp,0x8
c000b84e:	6a 08                	push   0x8
c000b850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b854:	e8 1f f0 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000b859:	83 c4 10             	add    esp,0x10
c000b85c:	83 c4 0c             	add    esp,0xc
c000b85f:	c3                   	ret    

c000b860 <Fs::getcwd(Process*, char*, int)>:
c000b860:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b864:	31 c0                	xor    eax,eax
c000b866:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b869:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b86d:	7d 15                	jge    c000b884 <Fs::getcwd(Process*, char*, int)+0x24>
c000b86f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b873:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b87a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b87d:	84 c9                	test   cl,cl
c000b87f:	74 06                	je     c000b887 <Fs::getcwd(Process*, char*, int)+0x27>
c000b881:	40                   	inc    eax
c000b882:	eb e2                	jmp    c000b866 <Fs::getcwd(Process*, char*, int)+0x6>
c000b884:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b887:	31 c0                	xor    eax,eax
c000b889:	c3                   	ret    

c000b88a <Fs::initVFS()>:
c000b88a:	83 ec 18             	sub    esp,0x18
c000b88d:	6a 08                	push   0x8
c000b88f:	e8 82 c2 ff ff       	call   c0007b16 <malloc>
c000b894:	89 04 24             	mov    DWORD PTR [esp],eax
c000b897:	e8 ac e4 00 00       	call   c0019d48 <FAT::FAT()>
c000b89c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b8a3:	e8 6e c2 ff ff       	call   c0007b16 <malloc>
c000b8a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8ab:	e8 c4 f3 00 00       	call   c001ac74 <ISO9660::ISO9660()>
c000b8b0:	83 c4 1c             	add    esp,0x1c
c000b8b3:	c3                   	ret    

c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b8b4:	55                   	push   ebp
c000b8b5:	57                   	push   edi
c000b8b6:	56                   	push   esi
c000b8b7:	53                   	push   ebx
c000b8b8:	81 ec 10 04 00 00    	sub    esp,0x410
c000b8be:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b8c5:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b8cc:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b8d4:	68 00 04 00 00       	push   0x400
c000b8d9:	6a 00                	push   0x0
c000b8db:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b8df:	57                   	push   edi
c000b8e0:	e8 0b 4c ff ff       	call   c00004f0 <memset>
c000b8e5:	83 c4 10             	add    esp,0x10
c000b8e8:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b8ec:	75 0b                	jne    c000b8f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b8ee:	50                   	push   eax
c000b8ef:	50                   	push   eax
c000b8f0:	55                   	push   ebp
c000b8f1:	57                   	push   edi
c000b8f2:	e8 49 4d ff ff       	call   c0000640 <strcpy>
c000b8f7:	eb 51                	jmp    c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b8f9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b8fd:	83 f8 5c             	cmp    eax,0x5c
c000b900:	74 05                	je     c000b907 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b902:	83 f8 2f             	cmp    eax,0x2f
c000b905:	75 1e                	jne    c000b925 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b907:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b90e:	8a 00                	mov    al,BYTE PTR [eax]
c000b910:	3c 60                	cmp    al,0x60
c000b912:	7e 03                	jle    c000b917 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b914:	83 e8 20             	sub    eax,0x20
c000b917:	88 04 24             	mov    BYTE PTR [esp],al
c000b91a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b921:	50                   	push   eax
c000b922:	50                   	push   eax
c000b923:	eb 1e                	jmp    c000b943 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b925:	50                   	push   eax
c000b926:	50                   	push   eax
c000b927:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b92e:	57                   	push   edi
c000b92f:	e8 0c 4d ff ff       	call   c0000640 <strcpy>
c000b934:	58                   	pop    eax
c000b935:	5a                   	pop    edx
c000b936:	68 f7 2a 02 c0       	push   0xc0022af7
c000b93b:	57                   	push   edi
c000b93c:	e8 ff 4e ff ff       	call   c0000840 <strcat>
c000b941:	59                   	pop    ecx
c000b942:	58                   	pop    eax
c000b943:	55                   	push   ebp
c000b944:	57                   	push   edi
c000b945:	e8 f6 4e ff ff       	call   c0000840 <strcat>
c000b94a:	83 c4 10             	add    esp,0x10
c000b94d:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b950:	3c 60                	cmp    al,0x60
c000b952:	7e 03                	jle    c000b957 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b954:	83 e8 20             	sub    eax,0x20
c000b957:	88 04 24             	mov    BYTE PTR [esp],al
c000b95a:	88 06                	mov    BYTE PTR [esi],al
c000b95c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b963:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b969:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b96d:	bf 03 00 00 00       	mov    edi,0x3
c000b972:	b8 03 00 00 00       	mov    eax,0x3
c000b977:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b97b:	89 e9                	mov    ecx,ebp
c000b97d:	85 ed                	test   ebp,ebp
c000b97f:	0f 84 97 00 00 00    	je     c000ba1c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b985:	8d 57 01             	lea    edx,[edi+0x1]
c000b988:	83 fd 5c             	cmp    ebp,0x5c
c000b98b:	74 05                	je     c000b992 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b98d:	83 fd 2f             	cmp    ebp,0x2f
c000b990:	75 12                	jne    c000b9a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b992:	89 c5                	mov    ebp,eax
c000b994:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b999:	74 09                	je     c000b9a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b99b:	40                   	inc    eax
c000b99c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b9a0:	89 d7                	mov    edi,edx
c000b9a2:	eb d3                	jmp    c000b977 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b9a4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b9a9:	0f be e9             	movsx  ebp,cl
c000b9ac:	75 5e                	jne    c000ba0c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9ae:	83 fd 2e             	cmp    ebp,0x2e
c000b9b1:	75 59                	jne    c000ba0c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9b3:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b9b7:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b9bc:	74 18                	je     c000b9d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b9be:	83 fd 2e             	cmp    ebp,0x2e
c000b9c1:	74 53                	je     c000ba16 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9c3:	89 fa                	mov    edx,edi
c000b9c5:	42                   	inc    edx
c000b9c6:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9ca:	83 f9 2f             	cmp    ecx,0x2f
c000b9cd:	74 f6                	je     c000b9c5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9cf:	83 f9 5c             	cmp    ecx,0x5c
c000b9d2:	74 f1                	je     c000b9c5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9d4:	eb ca                	jmp    c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9d6:	83 fd 2e             	cmp    ebp,0x2e
c000b9d9:	74 3b                	je     c000ba16 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9db:	83 f8 03             	cmp    eax,0x3
c000b9de:	74 c0                	je     c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9e0:	42                   	inc    edx
c000b9e1:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9e5:	83 f9 5c             	cmp    ecx,0x5c
c000b9e8:	74 f6                	je     c000b9e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9ea:	83 f9 2f             	cmp    ecx,0x2f
c000b9ed:	74 f1                	je     c000b9e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9ef:	48                   	dec    eax
c000b9f0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9f4:	75 06                	jne    c000b9fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9f6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9fa:	eb f3                	jmp    c000b9ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b9fc:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000ba00:	74 07                	je     c000ba09 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000ba02:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba06:	48                   	dec    eax
c000ba07:	eb f3                	jmp    c000b9fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000ba09:	40                   	inc    eax
c000ba0a:	eb 94                	jmp    c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba0c:	83 fd 5c             	cmp    ebp,0x5c
c000ba0f:	74 8f                	je     c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba11:	83 fd 2f             	cmp    ebp,0x2f
c000ba14:	74 8a                	je     c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba16:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000ba19:	40                   	inc    eax
c000ba1a:	eb 84                	jmp    c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba1c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba20:	83 ec 0c             	sub    esp,0xc
c000ba23:	56                   	push   esi
c000ba24:	e8 47 4b ff ff       	call   c0000570 <strlen>
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000ba31:	74 17                	je     c000ba4a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba33:	83 ec 0c             	sub    esp,0xc
c000ba36:	56                   	push   esi
c000ba37:	e8 34 4b ff ff       	call   c0000570 <strlen>
c000ba3c:	83 c4 10             	add    esp,0x10
c000ba3f:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba44:	74 04                	je     c000ba4a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba46:	31 ff                	xor    edi,edi
c000ba48:	eb 5c                	jmp    c000baa6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	56                   	push   esi
c000ba4e:	e8 1d 4b ff ff       	call   c0000570 <strlen>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba5b:	74 e9                	je     c000ba46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba5d:	83 ec 0c             	sub    esp,0xc
c000ba60:	56                   	push   esi
c000ba61:	e8 0a 4b ff ff       	call   c0000570 <strlen>
c000ba66:	83 c4 10             	add    esp,0x10
c000ba69:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba6e:	eb b0                	jmp    c000ba20 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba70:	52                   	push   edx
c000ba71:	52                   	push   edx
c000ba72:	56                   	push   esi
c000ba73:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba77:	55                   	push   ebp
c000ba78:	e8 c3 4b ff ff       	call   c0000640 <strcpy>
c000ba7d:	59                   	pop    ecx
c000ba7e:	58                   	pop    eax
c000ba7f:	56                   	push   esi
c000ba80:	55                   	push   ebp
c000ba81:	e8 96 f8 ff ff       	call   c000b31c <KeDereferenceSymlink(char const*, char*)>
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	48                   	dec    eax
c000ba8a:	75 37                	jne    c000bac3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba8c:	50                   	push   eax
c000ba8d:	56                   	push   esi
c000ba8e:	55                   	push   ebp
c000ba8f:	68 72 1a 02 c0       	push   0xc0021a72
c000ba94:	e8 0c ef ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	8d 47 01             	lea    eax,[edi+0x1]
c000ba9f:	83 ff 14             	cmp    edi,0x14
c000baa2:	74 08                	je     c000baac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000baa4:	89 c7                	mov    edi,eax
c000baa6:	85 db                	test   ebx,ebx
c000baa8:	75 c6                	jne    c000ba70 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000baaa:	eb 17                	jmp    c000bac3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000baac:	83 ec 0c             	sub    esp,0xc
c000baaf:	bf 15 00 00 00       	mov    edi,0x15
c000bab4:	68 8d 1a 02 c0       	push   0xc0021a8d
c000bab9:	e8 39 5c 00 00       	call   c00116f7 <KePanic(char const*)>
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	eb e3                	jmp    c000baa6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000bac3:	81 c4 0c 04 00 00    	add    esp,0x40c
c000bac9:	5b                   	pop    ebx
c000baca:	5e                   	pop    esi
c000bacb:	5f                   	pop    edi
c000bacc:	5d                   	pop    ebp
c000bacd:	c3                   	ret    

c000bace <File::File(char const*, Process*, bool)>:
c000bace:	83 ec 1c             	sub    esp,0x1c
c000bad1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000bad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000badd:	83 ec 08             	sub    esp,0x8
c000bae0:	6a 00                	push   0x0
c000bae2:	50                   	push   eax
c000bae3:	e8 36 d7 ff ff       	call   c000921e <UnixFile::UnixFile(int)>
c000bae8:	83 c4 10             	add    esp,0x10
c000baeb:	ba 28 1b 02 c0       	mov    edx,0xc0021b28
c000baf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf4:	89 10                	mov    DWORD PTR [eax],edx
c000baf6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bafb:	85 c0                	test   eax,eax
c000bafd:	74 0f                	je     c000bb0e <File::File(char const*, Process*, bool)+0x40>
c000baff:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bb04:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bb08:	74 04                	je     c000bb0e <File::File(char const*, Process*, bool)+0x40>
c000bb0a:	b0 01                	mov    al,0x1
c000bb0c:	eb 02                	jmp    c000bb10 <File::File(char const*, Process*, bool)+0x42>
c000bb0e:	b0 00                	mov    al,0x0
c000bb10:	0f b6 c0             	movzx  eax,al
c000bb13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb17:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bb1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb21:	83 c2 0d             	add    edx,0xd
c000bb24:	50                   	push   eax
c000bb25:	51                   	push   ecx
c000bb26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb2a:	52                   	push   edx
c000bb2b:	e8 84 fd ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb30:	83 c4 10             	add    esp,0x10
c000bb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb37:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb3a:	83 e8 41             	sub    eax,0x41
c000bb3d:	88 c2                	mov    dl,al
c000bb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb43:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb55:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb5b:	0f b6 c0             	movzx  eax,al
c000bb5e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb65:	85 c0                	test   eax,eax
c000bb67:	74 3e                	je     c000bba7 <File::File(char const*, Process*, bool)+0xd9>
c000bb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb73:	0f b6 c0             	movzx  eax,al
c000bb76:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb7d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb83:	85 c0                	test   eax,eax
c000bb85:	75 20                	jne    c000bba7 <File::File(char const*, Process*, bool)+0xd9>
c000bb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb91:	0f b6 c0             	movzx  eax,al
c000bb94:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb9b:	83 ec 0c             	sub    esp,0xc
c000bb9e:	50                   	push   eax
c000bb9f:	e8 a2 21 00 00       	call   c000dd46 <LogicalDisk::mount()>
c000bba4:	83 c4 10             	add    esp,0x10
c000bba7:	90                   	nop
c000bba8:	83 c4 1c             	add    esp,0x1c
c000bbab:	c3                   	ret    

c000bbac <File::File(char const*, Process*)>:
c000bbac:	83 ec 0c             	sub    esp,0xc
c000bbaf:	6a 01                	push   0x1
c000bbb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbbd:	e8 0c ff ff ff       	call   c000bace <File::File(char const*, Process*, bool)>
c000bbc2:	83 c4 10             	add    esp,0x10
c000bbc5:	90                   	nop
c000bbc6:	83 c4 0c             	add    esp,0xc
c000bbc9:	c3                   	ret    

c000bbca <File::open(FileOpenMode)>:
c000bbca:	53                   	push   ebx
c000bbcb:	b8 0b 00 00 00       	mov    eax,0xb
c000bbd0:	83 ec 08             	sub    esp,0x8
c000bbd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbd7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbde:	83 fa 19             	cmp    edx,0x19
c000bbe1:	77 40                	ja     c000bc23 <File::open(FileOpenMode)+0x59>
c000bbe3:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbea:	85 d2                	test   edx,edx
c000bbec:	74 35                	je     c000bc23 <File::open(FileOpenMode)+0x59>
c000bbee:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbf4:	85 d2                	test   edx,edx
c000bbf6:	74 2b                	je     c000bc23 <File::open(FileOpenMode)+0x59>
c000bbf8:	b8 06 00 00 00       	mov    eax,0x6
c000bbfd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bc01:	75 20                	jne    c000bc23 <File::open(FileOpenMode)+0x59>
c000bc03:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc05:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bc0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc0f:	51                   	push   ecx
c000bc10:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bc13:	51                   	push   ecx
c000bc14:	52                   	push   edx
c000bc15:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	85 c0                	test   eax,eax
c000bc1d:	75 04                	jne    c000bc23 <File::open(FileOpenMode)+0x59>
c000bc1f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bc23:	83 c4 08             	add    esp,0x8
c000bc26:	5b                   	pop    ebx
c000bc27:	c3                   	ret    

c000bc28 <File::close()>:
c000bc28:	53                   	push   ebx
c000bc29:	b8 0b 00 00 00       	mov    eax,0xb
c000bc2e:	83 ec 08             	sub    esp,0x8
c000bc31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc35:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc3c:	83 f9 19             	cmp    ecx,0x19
c000bc3f:	77 41                	ja     c000bc82 <File::close()+0x5a>
c000bc41:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc48:	85 db                	test   ebx,ebx
c000bc4a:	74 36                	je     c000bc82 <File::close()+0x5a>
c000bc4c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc53:	74 2d                	je     c000bc82 <File::close()+0x5a>
c000bc55:	b8 05 00 00 00       	mov    eax,0x5
c000bc5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc5e:	74 22                	je     c000bc82 <File::close()+0x5a>
c000bc60:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc64:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc6b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc71:	53                   	push   ebx
c000bc72:	53                   	push   ebx
c000bc73:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc75:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc7b:	50                   	push   eax
c000bc7c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc7f:	83 c4 10             	add    esp,0x10
c000bc82:	83 c4 08             	add    esp,0x8
c000bc85:	5b                   	pop    ebx
c000bc86:	c3                   	ret    
c000bc87:	90                   	nop

c000bc88 <File::seek(unsigned long long)>:
c000bc88:	56                   	push   esi
c000bc89:	53                   	push   ebx
c000bc8a:	b8 0b 00 00 00       	mov    eax,0xb
c000bc8f:	51                   	push   ecx
c000bc90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc98:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bca3:	83 fa 19             	cmp    edx,0x19
c000bca6:	77 31                	ja     c000bcd9 <File::seek(unsigned long long)+0x51>
c000bca8:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcaf:	85 d2                	test   edx,edx
c000bcb1:	74 26                	je     c000bcd9 <File::seek(unsigned long long)+0x51>
c000bcb3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcb9:	85 d2                	test   edx,edx
c000bcbb:	74 1c                	je     c000bcd9 <File::seek(unsigned long long)+0x51>
c000bcbd:	b8 05 00 00 00       	mov    eax,0x5
c000bcc2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcc6:	74 11                	je     c000bcd9 <File::seek(unsigned long long)+0x51>
c000bcc8:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcca:	53                   	push   ebx
c000bccb:	51                   	push   ecx
c000bccc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcd2:	52                   	push   edx
c000bcd3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bcd6:	83 c4 10             	add    esp,0x10
c000bcd9:	5a                   	pop    edx
c000bcda:	5b                   	pop    ebx
c000bcdb:	5e                   	pop    esi
c000bcdc:	c3                   	ret    
c000bcdd:	90                   	nop

c000bcde <File::truncate(unsigned long long)>:
c000bcde:	56                   	push   esi
c000bcdf:	53                   	push   ebx
c000bce0:	b8 0b 00 00 00       	mov    eax,0xb
c000bce5:	51                   	push   ecx
c000bce6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcee:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bcf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcf9:	83 fa 19             	cmp    edx,0x19
c000bcfc:	77 31                	ja     c000bd2f <File::truncate(unsigned long long)+0x51>
c000bcfe:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd05:	85 d2                	test   edx,edx
c000bd07:	74 26                	je     c000bd2f <File::truncate(unsigned long long)+0x51>
c000bd09:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd0f:	85 d2                	test   edx,edx
c000bd11:	74 1c                	je     c000bd2f <File::truncate(unsigned long long)+0x51>
c000bd13:	b8 05 00 00 00       	mov    eax,0x5
c000bd18:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd1c:	74 11                	je     c000bd2f <File::truncate(unsigned long long)+0x51>
c000bd1e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd20:	53                   	push   ebx
c000bd21:	51                   	push   ecx
c000bd22:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd28:	52                   	push   edx
c000bd29:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	5a                   	pop    edx
c000bd30:	5b                   	pop    ebx
c000bd31:	5e                   	pop    esi
c000bd32:	c3                   	ret    
c000bd33:	90                   	nop

c000bd34 <File::tell(unsigned long long*)>:
c000bd34:	83 ec 0c             	sub    esp,0xc
c000bd37:	b8 0b 00 00 00       	mov    eax,0xb
c000bd3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd47:	83 fa 19             	cmp    edx,0x19
c000bd4a:	77 34                	ja     c000bd80 <File::tell(unsigned long long*)+0x4c>
c000bd4c:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd53:	85 d2                	test   edx,edx
c000bd55:	74 29                	je     c000bd80 <File::tell(unsigned long long*)+0x4c>
c000bd57:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd5d:	85 d2                	test   edx,edx
c000bd5f:	74 1f                	je     c000bd80 <File::tell(unsigned long long*)+0x4c>
c000bd61:	b8 05 00 00 00       	mov    eax,0x5
c000bd66:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd6a:	74 14                	je     c000bd80 <File::tell(unsigned long long*)+0x4c>
c000bd6c:	50                   	push   eax
c000bd6d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd73:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd79:	52                   	push   edx
c000bd7a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd7d:	83 c4 10             	add    esp,0x10
c000bd80:	83 c4 0c             	add    esp,0xc
c000bd83:	c3                   	ret    

c000bd84 <File::rewind()>:
c000bd84:	83 ec 10             	sub    esp,0x10
c000bd87:	6a 00                	push   0x0
c000bd89:	6a 00                	push   0x0
c000bd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd8f:	e8 f4 fe ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c000bd94:	83 c4 1c             	add    esp,0x1c
c000bd97:	c3                   	ret    

c000bd98 <File::unlink()>:
c000bd98:	83 ec 0c             	sub    esp,0xc
c000bd9b:	b8 0b 00 00 00       	mov    eax,0xb
c000bda0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bda4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdab:	83 f9 19             	cmp    ecx,0x19
c000bdae:	77 2f                	ja     c000bddf <File::unlink()+0x47>
c000bdb0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdb7:	85 c9                	test   ecx,ecx
c000bdb9:	74 24                	je     c000bddf <File::unlink()+0x47>
c000bdbb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdc1:	85 c9                	test   ecx,ecx
c000bdc3:	74 1a                	je     c000bddf <File::unlink()+0x47>
c000bdc5:	b8 06 00 00 00       	mov    eax,0x6
c000bdca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdce:	75 0f                	jne    c000bddf <File::unlink()+0x47>
c000bdd0:	83 c2 0d             	add    edx,0xd
c000bdd3:	50                   	push   eax
c000bdd4:	50                   	push   eax
c000bdd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdd7:	52                   	push   edx
c000bdd8:	51                   	push   ecx
c000bdd9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bddc:	83 c4 10             	add    esp,0x10
c000bddf:	83 c4 0c             	add    esp,0xc
c000bde2:	c3                   	ret    
c000bde3:	90                   	nop

c000bde4 <File::rename(char const*)>:
c000bde4:	83 ec 0c             	sub    esp,0xc
c000bde7:	b8 0b 00 00 00       	mov    eax,0xb
c000bdec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdf7:	83 f9 19             	cmp    ecx,0x19
c000bdfa:	77 32                	ja     c000be2e <File::rename(char const*)+0x4a>
c000bdfc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be03:	85 c9                	test   ecx,ecx
c000be05:	74 27                	je     c000be2e <File::rename(char const*)+0x4a>
c000be07:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be0d:	85 c9                	test   ecx,ecx
c000be0f:	74 1d                	je     c000be2e <File::rename(char const*)+0x4a>
c000be11:	b8 06 00 00 00       	mov    eax,0x6
c000be16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be1a:	75 12                	jne    c000be2e <File::rename(char const*)+0x4a>
c000be1c:	83 c2 0d             	add    edx,0xd
c000be1f:	50                   	push   eax
c000be20:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be26:	52                   	push   edx
c000be27:	51                   	push   ecx
c000be28:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be2b:	83 c4 10             	add    esp,0x10
c000be2e:	83 c4 0c             	add    esp,0xc
c000be31:	c3                   	ret    

c000be32 <File::chfatattr(unsigned char, unsigned char)>:
c000be32:	57                   	push   edi
c000be33:	b8 0b 00 00 00       	mov    eax,0xb
c000be38:	56                   	push   esi
c000be39:	53                   	push   ebx
c000be3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be49:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be4d:	83 f9 19             	cmp    ecx,0x19
c000be50:	77 37                	ja     c000be89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be52:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be59:	85 c9                	test   ecx,ecx
c000be5b:	74 2c                	je     c000be89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be5d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be63:	85 c9                	test   ecx,ecx
c000be65:	74 22                	je     c000be89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be67:	b8 06 00 00 00       	mov    eax,0x6
c000be6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be70:	75 17                	jne    c000be89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be72:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be74:	89 f0                	mov    eax,esi
c000be76:	83 c2 0d             	add    edx,0xd
c000be79:	0f b6 f0             	movzx  esi,al
c000be7c:	0f b6 db             	movzx  ebx,bl
c000be7f:	56                   	push   esi
c000be80:	53                   	push   ebx
c000be81:	52                   	push   edx
c000be82:	51                   	push   ecx
c000be83:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	5b                   	pop    ebx
c000be8a:	5e                   	pop    esi
c000be8b:	5f                   	pop    edi
c000be8c:	c3                   	ret    
c000be8d:	90                   	nop

c000be8e <File::exists()>:
c000be8e:	83 ec 0c             	sub    esp,0xc
c000be91:	31 c0                	xor    eax,eax
c000be93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be97:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be9e:	83 f9 19             	cmp    ecx,0x19
c000bea1:	77 24                	ja     c000bec7 <File::exists()+0x39>
c000bea3:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000beaa:	85 c9                	test   ecx,ecx
c000beac:	74 19                	je     c000bec7 <File::exists()+0x39>
c000beae:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000beb4:	85 c9                	test   ecx,ecx
c000beb6:	74 0f                	je     c000bec7 <File::exists()+0x39>
c000beb8:	83 c2 0d             	add    edx,0xd
c000bebb:	50                   	push   eax
c000bebc:	50                   	push   eax
c000bebd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bebf:	52                   	push   edx
c000bec0:	51                   	push   ecx
c000bec1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	83 c4 0c             	add    esp,0xc
c000beca:	c3                   	ret    
c000becb:	90                   	nop

c000becc <File::stat(unsigned long long*, bool*)>:
c000becc:	56                   	push   esi
c000becd:	53                   	push   ebx
c000bece:	50                   	push   eax
c000becf:	b8 0b 00 00 00       	mov    eax,0xb
c000bed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bed8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bedc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bee3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bee7:	83 f9 19             	cmp    ecx,0x19
c000beea:	77 3d                	ja     c000bf29 <File::stat(unsigned long long*, bool*)+0x5d>
c000beec:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bef3:	85 c9                	test   ecx,ecx
c000bef5:	74 32                	je     c000bf29 <File::stat(unsigned long long*, bool*)+0x5d>
c000bef7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000befd:	85 c9                	test   ecx,ecx
c000beff:	74 28                	je     c000bf29 <File::stat(unsigned long long*, bool*)+0x5d>
c000bf01:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf07:	74 13                	je     c000bf1c <File::stat(unsigned long long*, bool*)+0x50>
c000bf09:	83 ec 04             	sub    esp,0x4
c000bf0c:	56                   	push   esi
c000bf0d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf13:	51                   	push   ecx
c000bf14:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bf17:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bf1a:	eb 0a                	jmp    c000bf26 <File::stat(unsigned long long*, bool*)+0x5a>
c000bf1c:	53                   	push   ebx
c000bf1d:	83 c2 0d             	add    edx,0xd
c000bf20:	56                   	push   esi
c000bf21:	52                   	push   edx
c000bf22:	51                   	push   ecx
c000bf23:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bf26:	83 c4 10             	add    esp,0x10
c000bf29:	5a                   	pop    edx
c000bf2a:	5b                   	pop    ebx
c000bf2b:	5e                   	pop    esi
c000bf2c:	c3                   	ret    

c000bf2d <Fs::setcwd(Process*, char*)>:
c000bf2d:	55                   	push   ebp
c000bf2e:	57                   	push   edi
c000bf2f:	56                   	push   esi
c000bf30:	53                   	push   ebx
c000bf31:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf37:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf3e:	6a 00                	push   0x0
c000bf40:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf46:	57                   	push   edi
c000bf47:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf4e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf52:	56                   	push   esi
c000bf53:	e8 5c f9 ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf58:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf5b:	e8 10 46 ff ff       	call   c0000570 <strlen>
c000bf60:	83 c4 10             	add    esp,0x10
c000bf63:	83 f8 02             	cmp    eax,0x2
c000bf66:	77 15                	ja     c000bf7d <Fs::setcwd(Process*, char*)+0x50>
c000bf68:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf6d:	83 eb 41             	sub    ebx,0x41
c000bf70:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf77:	85 c0                	test   eax,eax
c000bf79:	75 1c                	jne    c000bf97 <Fs::setcwd(Process*, char*)+0x6a>
c000bf7b:	eb 2f                	jmp    c000bfac <Fs::setcwd(Process*, char*)+0x7f>
c000bf7d:	83 ec 0c             	sub    esp,0xc
c000bf80:	56                   	push   esi
c000bf81:	e8 ea 45 ff ff       	call   c0000570 <strlen>
c000bf86:	83 c4 10             	add    esp,0x10
c000bf89:	83 f8 03             	cmp    eax,0x3
c000bf8c:	75 57                	jne    c000bfe5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf8e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf93:	75 50                	jne    c000bfe5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf95:	eb d1                	jmp    c000bf68 <Fs::setcwd(Process*, char*)+0x3b>
c000bf97:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf9e:	75 0c                	jne    c000bfac <Fs::setcwd(Process*, char*)+0x7f>
c000bfa0:	83 ec 0c             	sub    esp,0xc
c000bfa3:	50                   	push   eax
c000bfa4:	e8 9d 1d 00 00       	call   c000dd46 <LogicalDisk::mount()>
c000bfa9:	83 c4 10             	add    esp,0x10
c000bfac:	b8 03 00 00 00       	mov    eax,0x3
c000bfb1:	83 fb 19             	cmp    ebx,0x19
c000bfb4:	0f 87 c6 00 00 00    	ja     c000c080 <Fs::setcwd(Process*, char*)+0x153>
c000bfba:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bfc1:	b8 05 00 00 00       	mov    eax,0x5
c000bfc6:	85 d2                	test   edx,edx
c000bfc8:	0f 84 b2 00 00 00    	je     c000c080 <Fs::setcwd(Process*, char*)+0x153>
c000bfce:	b8 06 00 00 00       	mov    eax,0x6
c000bfd3:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfda:	0f 85 92 00 00 00    	jne    c000c072 <Fs::setcwd(Process*, char*)+0x145>
c000bfe0:	e9 9b 00 00 00       	jmp    c000c080 <Fs::setcwd(Process*, char*)+0x153>
c000bfe5:	83 ec 0c             	sub    esp,0xc
c000bfe8:	68 14 01 00 00       	push   0x114
c000bfed:	e8 24 bb ff ff       	call   c0007b16 <malloc>
c000bff2:	83 c4 0c             	add    esp,0xc
c000bff5:	89 c3                	mov    ebx,eax
c000bff7:	55                   	push   ebp
c000bff8:	56                   	push   esi
c000bff9:	50                   	push   eax
c000bffa:	e8 ad fb ff ff       	call   c000bbac <File::File(char const*, Process*)>
c000bfff:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000c004:	83 c4 0c             	add    esp,0xc
c000c007:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c00b:	50                   	push   eax
c000c00c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c010:	50                   	push   eax
c000c011:	53                   	push   ebx
c000c012:	e8 b5 fe ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c000c017:	83 c4 10             	add    esp,0x10
c000c01a:	83 f8 02             	cmp    eax,0x2
c000c01d:	74 27                	je     c000c046 <Fs::setcwd(Process*, char*)+0x119>
c000c01f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c024:	75 1c                	jne    c000c042 <Fs::setcwd(Process*, char*)+0x115>
c000c026:	b8 02 00 00 00       	mov    eax,0x2
c000c02b:	85 db                	test   ebx,ebx
c000c02d:	74 51                	je     c000c080 <Fs::setcwd(Process*, char*)+0x153>
c000c02f:	83 ec 0c             	sub    esp,0xc
c000c032:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c034:	53                   	push   ebx
c000c035:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	b8 02 00 00 00       	mov    eax,0x2
c000c040:	eb 3e                	jmp    c000c080 <Fs::setcwd(Process*, char*)+0x153>
c000c042:	85 c0                	test   eax,eax
c000c044:	74 1c                	je     c000c062 <Fs::setcwd(Process*, char*)+0x135>
c000c046:	b8 01 00 00 00       	mov    eax,0x1
c000c04b:	85 db                	test   ebx,ebx
c000c04d:	74 31                	je     c000c080 <Fs::setcwd(Process*, char*)+0x153>
c000c04f:	83 ec 0c             	sub    esp,0xc
c000c052:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c054:	53                   	push   ebx
c000c055:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c058:	83 c4 10             	add    esp,0x10
c000c05b:	b8 01 00 00 00       	mov    eax,0x1
c000c060:	eb 1e                	jmp    c000c080 <Fs::setcwd(Process*, char*)+0x153>
c000c062:	85 db                	test   ebx,ebx
c000c064:	74 0c                	je     c000c072 <Fs::setcwd(Process*, char*)+0x145>
c000c066:	83 ec 0c             	sub    esp,0xc
c000c069:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c06b:	53                   	push   ebx
c000c06c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c06f:	83 c4 10             	add    esp,0x10
c000c072:	50                   	push   eax
c000c073:	50                   	push   eax
c000c074:	56                   	push   esi
c000c075:	57                   	push   edi
c000c076:	e8 c5 45 ff ff       	call   c0000640 <strcpy>
c000c07b:	83 c4 10             	add    esp,0x10
c000c07e:	31 c0                	xor    eax,eax
c000c080:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c086:	5b                   	pop    ebx
c000c087:	5e                   	pop    esi
c000c088:	5f                   	pop    edi
c000c089:	5d                   	pop    ebp
c000c08a:	c3                   	ret    
c000c08b:	90                   	nop

c000c08c <Directory::Directory(char const*, Process*)>:
c000c08c:	83 ec 0c             	sub    esp,0xc
c000c08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c093:	83 ec 08             	sub    esp,0x8
c000c096:	6a 00                	push   0x0
c000c098:	50                   	push   eax
c000c099:	e8 80 d1 ff ff       	call   c000921e <UnixFile::UnixFile(int)>
c000c09e:	83 c4 10             	add    esp,0x10
c000c0a1:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c000c0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0aa:	89 10                	mov    DWORD PTR [eax],edx
c000c0ac:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c0b1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0b5:	0f 95 c0             	setne  al
c000c0b8:	0f b6 c0             	movzx  eax,al
c000c0bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c0bf:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c0c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0c9:	83 c2 0d             	add    edx,0xd
c000c0cc:	50                   	push   eax
c000c0cd:	51                   	push   ecx
c000c0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d2:	52                   	push   edx
c000c0d3:	e8 dc f7 ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0d8:	83 c4 10             	add    esp,0x10
c000c0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0df:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0e2:	83 e8 41             	sub    eax,0x41
c000c0e5:	88 c2                	mov    dl,al
c000c0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0eb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c103:	0f b6 c0             	movzx  eax,al
c000c106:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c10d:	85 c0                	test   eax,eax
c000c10f:	74 3e                	je     c000c14f <Directory::Directory(char const*, Process*)+0xc3>
c000c111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c115:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c11b:	0f b6 c0             	movzx  eax,al
c000c11e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c125:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c12b:	85 c0                	test   eax,eax
c000c12d:	75 20                	jne    c000c14f <Directory::Directory(char const*, Process*)+0xc3>
c000c12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c139:	0f b6 c0             	movzx  eax,al
c000c13c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	50                   	push   eax
c000c147:	e8 fa 1b 00 00       	call   c000dd46 <LogicalDisk::mount()>
c000c14c:	83 c4 10             	add    esp,0x10
c000c14f:	90                   	nop
c000c150:	83 c4 0c             	add    esp,0xc
c000c153:	c3                   	ret    

c000c154 <Directory::open()>:
c000c154:	53                   	push   ebx
c000c155:	b8 0b 00 00 00       	mov    eax,0xb
c000c15a:	83 ec 08             	sub    esp,0x8
c000c15d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c161:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c168:	83 fa 19             	cmp    edx,0x19
c000c16b:	77 3d                	ja     c000c1aa <Directory::open()+0x56>
c000c16d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c174:	85 d2                	test   edx,edx
c000c176:	74 32                	je     c000c1aa <Directory::open()+0x56>
c000c178:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c17e:	85 d2                	test   edx,edx
c000c180:	74 28                	je     c000c1aa <Directory::open()+0x56>
c000c182:	b8 06 00 00 00       	mov    eax,0x6
c000c187:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c18b:	75 1d                	jne    c000c1aa <Directory::open()+0x56>
c000c18d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c193:	50                   	push   eax
c000c194:	8b 02                	mov    eax,DWORD PTR [edx]
c000c196:	51                   	push   ecx
c000c197:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c19a:	51                   	push   ecx
c000c19b:	52                   	push   edx
c000c19c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c19f:	83 c4 10             	add    esp,0x10
c000c1a2:	85 c0                	test   eax,eax
c000c1a4:	75 04                	jne    c000c1aa <Directory::open()+0x56>
c000c1a6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c1aa:	83 c4 08             	add    esp,0x8
c000c1ad:	5b                   	pop    ebx
c000c1ae:	c3                   	ret    
c000c1af:	90                   	nop

c000c1b0 <Directory::close()>:
c000c1b0:	53                   	push   ebx
c000c1b1:	b8 0b 00 00 00       	mov    eax,0xb
c000c1b6:	83 ec 08             	sub    esp,0x8
c000c1b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1bd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1c4:	83 f9 19             	cmp    ecx,0x19
c000c1c7:	77 41                	ja     c000c20a <Directory::close()+0x5a>
c000c1c9:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1d0:	85 db                	test   ebx,ebx
c000c1d2:	74 36                	je     c000c20a <Directory::close()+0x5a>
c000c1d4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1db:	74 2d                	je     c000c20a <Directory::close()+0x5a>
c000c1dd:	b8 05 00 00 00       	mov    eax,0x5
c000c1e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1e6:	74 22                	je     c000c20a <Directory::close()+0x5a>
c000c1e8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1ec:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1f3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1f9:	53                   	push   ebx
c000c1fa:	53                   	push   ebx
c000c1fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1fd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c203:	50                   	push   eax
c000c204:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	83 c4 08             	add    esp,0x8
c000c20d:	5b                   	pop    ebx
c000c20e:	c3                   	ret    
c000c20f:	90                   	nop

c000c210 <Directory::unlink()>:
c000c210:	83 ec 0c             	sub    esp,0xc
c000c213:	b8 0b 00 00 00       	mov    eax,0xb
c000c218:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c21c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c223:	83 f9 19             	cmp    ecx,0x19
c000c226:	77 2f                	ja     c000c257 <Directory::unlink()+0x47>
c000c228:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c22f:	85 c9                	test   ecx,ecx
c000c231:	74 24                	je     c000c257 <Directory::unlink()+0x47>
c000c233:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c239:	85 c9                	test   ecx,ecx
c000c23b:	74 1a                	je     c000c257 <Directory::unlink()+0x47>
c000c23d:	b8 06 00 00 00       	mov    eax,0x6
c000c242:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c246:	75 0f                	jne    c000c257 <Directory::unlink()+0x47>
c000c248:	83 c2 0d             	add    edx,0xd
c000c24b:	50                   	push   eax
c000c24c:	50                   	push   eax
c000c24d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c24f:	52                   	push   edx
c000c250:	51                   	push   ecx
c000c251:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c254:	83 c4 10             	add    esp,0x10
c000c257:	83 c4 0c             	add    esp,0xc
c000c25a:	c3                   	ret    
c000c25b:	90                   	nop

c000c25c <Directory::rename(char const*)>:
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	b8 0b 00 00 00       	mov    eax,0xb
c000c264:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c268:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c26f:	83 f9 19             	cmp    ecx,0x19
c000c272:	77 32                	ja     c000c2a6 <Directory::rename(char const*)+0x4a>
c000c274:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c27b:	85 c9                	test   ecx,ecx
c000c27d:	74 27                	je     c000c2a6 <Directory::rename(char const*)+0x4a>
c000c27f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c285:	85 c9                	test   ecx,ecx
c000c287:	74 1d                	je     c000c2a6 <Directory::rename(char const*)+0x4a>
c000c289:	b8 06 00 00 00       	mov    eax,0x6
c000c28e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c292:	75 12                	jne    c000c2a6 <Directory::rename(char const*)+0x4a>
c000c294:	83 c2 0d             	add    edx,0xd
c000c297:	50                   	push   eax
c000c298:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c29a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c29e:	52                   	push   edx
c000c29f:	51                   	push   ecx
c000c2a0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c2a3:	83 c4 10             	add    esp,0x10
c000c2a6:	83 c4 0c             	add    esp,0xc
c000c2a9:	c3                   	ret    

c000c2aa <Directory::exists()>:
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	31 c0                	xor    eax,eax
c000c2af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2b3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2ba:	83 f9 19             	cmp    ecx,0x19
c000c2bd:	77 24                	ja     c000c2e3 <Directory::exists()+0x39>
c000c2bf:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2c6:	85 c9                	test   ecx,ecx
c000c2c8:	74 19                	je     c000c2e3 <Directory::exists()+0x39>
c000c2ca:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2d0:	85 c9                	test   ecx,ecx
c000c2d2:	74 0f                	je     c000c2e3 <Directory::exists()+0x39>
c000c2d4:	83 c2 0d             	add    edx,0xd
c000c2d7:	50                   	push   eax
c000c2d8:	50                   	push   eax
c000c2d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2db:	52                   	push   edx
c000c2dc:	51                   	push   ecx
c000c2dd:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2e0:	83 c4 10             	add    esp,0x10
c000c2e3:	83 c4 0c             	add    esp,0xc
c000c2e6:	c3                   	ret    
c000c2e7:	90                   	nop

c000c2e8 <Directory::read(dirent*)>:
c000c2e8:	83 ec 1c             	sub    esp,0x1c
c000c2eb:	b8 0b 00 00 00       	mov    eax,0xb
c000c2f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2fb:	83 f9 19             	cmp    ecx,0x19
c000c2fe:	77 30                	ja     c000c330 <Directory::read(dirent*)+0x48>
c000c300:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c307:	85 c9                	test   ecx,ecx
c000c309:	74 25                	je     c000c330 <Directory::read(dirent*)+0x48>
c000c30b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c312:	74 1c                	je     c000c330 <Directory::read(dirent*)+0x48>
c000c314:	83 ec 0c             	sub    esp,0xc
c000c317:	8b 02                	mov    eax,DWORD PTR [edx]
c000c319:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c31d:	51                   	push   ecx
c000c31e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c322:	6a 00                	push   0x0
c000c324:	68 10 01 00 00       	push   0x110
c000c329:	52                   	push   edx
c000c32a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c32d:	83 c4 20             	add    esp,0x20
c000c330:	83 c4 1c             	add    esp,0x1c
c000c333:	c3                   	ret    

c000c334 <Directory::create()>:
c000c334:	83 ec 0c             	sub    esp,0xc
c000c337:	b8 0b 00 00 00       	mov    eax,0xb
c000c33c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c340:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c347:	83 f9 19             	cmp    ecx,0x19
c000c34a:	77 2f                	ja     c000c37b <Directory::create()+0x47>
c000c34c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c353:	85 c9                	test   ecx,ecx
c000c355:	74 24                	je     c000c37b <Directory::create()+0x47>
c000c357:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c35d:	85 c9                	test   ecx,ecx
c000c35f:	74 1a                	je     c000c37b <Directory::create()+0x47>
c000c361:	b8 06 00 00 00       	mov    eax,0x6
c000c366:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c36a:	75 0f                	jne    c000c37b <Directory::create()+0x47>
c000c36c:	83 c2 0d             	add    edx,0xd
c000c36f:	50                   	push   eax
c000c370:	50                   	push   eax
c000c371:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c373:	52                   	push   edx
c000c374:	51                   	push   ecx
c000c375:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c378:	83 c4 10             	add    esp,0x10
c000c37b:	83 c4 0c             	add    esp,0xc
c000c37e:	c3                   	ret    
c000c37f:	90                   	nop

c000c380 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c380:	b8 0a 00 00 00       	mov    eax,0xa
c000c385:	c3                   	ret    
c000c386:	66 90                	xchg   ax,ax

c000c388 <Bus::Bus(char const*)>:
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38f:	83 ec 08             	sub    esp,0x8
c000c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c396:	50                   	push   eax
c000c397:	e8 22 08 00 00       	call   c000cbbe <Device::Device(char const*)>
c000c39c:	83 c4 10             	add    esp,0x10
c000c39f:	ba 60 1b 02 c0       	mov    edx,0xc0021b60
c000c3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a8:	89 10                	mov    DWORD PTR [eax],edx
c000c3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ae:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c3b8:	90                   	nop
c000c3b9:	83 c4 0c             	add    esp,0xc
c000c3bc:	c3                   	ret    
c000c3bd:	90                   	nop
c000c3be:	66 90                	xchg   ax,ax

c000c3c0 <Bus::~Bus()>:
c000c3c0:	83 ec 0c             	sub    esp,0xc
c000c3c3:	ba 60 1b 02 c0       	mov    edx,0xc0021b60
c000c3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3cc:	89 10                	mov    DWORD PTR [eax],edx
c000c3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d2:	83 ec 0c             	sub    esp,0xc
c000c3d5:	50                   	push   eax
c000c3d6:	e8 4d 05 00 00       	call   c000c928 <Device::~Device()>
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	90                   	nop
c000c3df:	83 c4 0c             	add    esp,0xc
c000c3e2:	c3                   	ret    
c000c3e3:	90                   	nop

c000c3e4 <Bus::~Bus()>:
c000c3e4:	83 ec 0c             	sub    esp,0xc
c000c3e7:	83 ec 0c             	sub    esp,0xc
c000c3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ee:	e8 cd ff ff ff       	call   c000c3c0 <Bus::~Bus()>
c000c3f3:	83 c4 10             	add    esp,0x10
c000c3f6:	83 ec 08             	sub    esp,0x8
c000c3f9:	68 58 01 00 00       	push   0x158
c000c3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c402:	e8 71 e4 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	83 c4 0c             	add    esp,0xc
c000c40d:	c3                   	ret    

c000c40e <beepThread(void*)>:
c000c40e:	83 ec 0c             	sub    esp,0xc
c000c411:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c41a:	48                   	dec    eax
c000c41b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c420:	75 01                	jne    c000c423 <beepThread(void*)+0x15>
c000c422:	fb                   	sti    
c000c423:	83 ec 0c             	sub    esp,0xc
c000c426:	6b c2 0a             	imul   eax,edx,0xa
c000c429:	50                   	push   eax
c000c42a:	e8 dd a0 00 00       	call   c001650c <milliTenthSleep(unsigned int)>
c000c42f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c436:	e8 2c c0 00 00       	call   c0018467 <HalMakeBeep(int)>
c000c43b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c443:	83 c4 1c             	add    esp,0x1c
c000c446:	e9 a5 9f 00 00       	jmp    c00163f0 <blockTask(TaskState)>

c000c44b <Krnl::beep(int, int, bool)>:
c000c44b:	56                   	push   esi
c000c44c:	53                   	push   ebx
c000c44d:	83 ec 10             	sub    esp,0x10
c000c450:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c454:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45c:	e8 06 c0 00 00       	call   c0018467 <HalMakeBeep(int)>
c000c461:	83 c4 10             	add    esp,0x10
c000c464:	89 f0                	mov    eax,esi
c000c466:	84 c0                	test   al,al
c000c468:	74 1e                	je     c000c488 <Krnl::beep(int, int, bool)+0x3d>
c000c46a:	83 ec 0c             	sub    esp,0xc
c000c46d:	6b db 0a             	imul   ebx,ebx,0xa
c000c470:	53                   	push   ebx
c000c471:	e8 96 a0 00 00       	call   c001650c <milliTenthSleep(unsigned int)>
c000c476:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c47e:	83 c4 14             	add    esp,0x14
c000c481:	5b                   	pop    ebx
c000c482:	5e                   	pop    esi
c000c483:	e9 df bf 00 00       	jmp    c0018467 <HalMakeBeep(int)>
c000c488:	68 e6 00 00 00       	push   0xe6
c000c48d:	53                   	push   ebx
c000c48e:	68 0e c4 00 c0       	push   0xc000c40e
c000c493:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c499:	e8 ee 9a 00 00       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c000c49e:	83 c4 14             	add    esp,0x14
c000c4a1:	5b                   	pop    ebx
c000c4a2:	5e                   	pop    esi
c000c4a3:	c3                   	ret    

c000c4a4 <User::loadClockSettings(int)>:
c000c4a4:	53                   	push   ebx
c000c4a5:	83 ec 14             	sub    esp,0x14
c000c4a8:	68 14 01 00 00       	push   0x114
c000c4ad:	e8 64 b6 ff ff       	call   c0007b16 <malloc>
c000c4b2:	83 c4 0c             	add    esp,0xc
c000c4b5:	89 c3                	mov    ebx,eax
c000c4b7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4bd:	68 84 1b 02 c0       	push   0xc0021b84
c000c4c2:	50                   	push   eax
c000c4c3:	e8 e4 f6 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c000c4c8:	58                   	pop    eax
c000c4c9:	5a                   	pop    edx
c000c4ca:	6a 01                	push   0x1
c000c4cc:	53                   	push   ebx
c000c4cd:	e8 f8 f6 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c000c4d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4d5:	e8 4e f7 ff ff       	call   c000bc28 <File::close()>
c000c4da:	83 c4 10             	add    esp,0x10
c000c4dd:	85 db                	test   ebx,ebx
c000c4df:	74 0f                	je     c000c4f0 <User::loadClockSettings(int)+0x4c>
c000c4e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4ea:	83 c4 08             	add    esp,0x8
c000c4ed:	5b                   	pop    ebx
c000c4ee:	ff e0                	jmp    eax
c000c4f0:	83 c4 08             	add    esp,0x8
c000c4f3:	5b                   	pop    ebx
c000c4f4:	c3                   	ret    
c000c4f5:	90                   	nop

c000c4f6 <Clock::Clock(char const*)>:
c000c4f6:	83 ec 0c             	sub    esp,0xc
c000c4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4fd:	83 ec 08             	sub    esp,0x8
c000c500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c504:	50                   	push   eax
c000c505:	e8 b4 06 00 00       	call   c000cbbe <Device::Device(char const*)>
c000c50a:	83 c4 10             	add    esp,0x10
c000c50d:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c000c512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c516:	89 10                	mov    DWORD PTR [eax],edx
c000c518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c51c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c526:	90                   	nop
c000c527:	83 c4 0c             	add    esp,0xc
c000c52a:	c3                   	ret    
c000c52b:	90                   	nop

c000c52c <Clock::~Clock()>:
c000c52c:	83 ec 0c             	sub    esp,0xc
c000c52f:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c000c534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c538:	89 10                	mov    DWORD PTR [eax],edx
c000c53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c53e:	83 ec 0c             	sub    esp,0xc
c000c541:	50                   	push   eax
c000c542:	e8 e1 03 00 00       	call   c000c928 <Device::~Device()>
c000c547:	83 c4 10             	add    esp,0x10
c000c54a:	90                   	nop
c000c54b:	83 c4 0c             	add    esp,0xc
c000c54e:	c3                   	ret    
c000c54f:	90                   	nop

c000c550 <Clock::~Clock()>:
c000c550:	83 ec 0c             	sub    esp,0xc
c000c553:	83 ec 0c             	sub    esp,0xc
c000c556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c55a:	e8 cd ff ff ff       	call   c000c52c <Clock::~Clock()>
c000c55f:	83 c4 10             	add    esp,0x10
c000c562:	83 ec 08             	sub    esp,0x8
c000c565:	68 58 01 00 00       	push   0x158
c000c56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c56e:	e8 05 e3 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000c573:	83 c4 10             	add    esp,0x10
c000c576:	83 c4 0c             	add    esp,0xc
c000c579:	c3                   	ret    

c000c57a <Clock::timeInSecondsLocal()>:
c000c57a:	53                   	push   ebx
c000c57b:	83 ec 14             	sub    esp,0x14
c000c57e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c582:	8b 10                	mov    edx,DWORD PTR [eax]
c000c584:	50                   	push   eax
c000c585:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c588:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c58f:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c595:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c59b:	89 cb                	mov    ebx,ecx
c000c59d:	c1 fb 1f             	sar    ebx,0x1f
c000c5a0:	01 c8                	add    eax,ecx
c000c5a2:	11 da                	adc    edx,ebx
c000c5a4:	83 c4 10             	add    esp,0x10
c000c5a7:	31 c9                	xor    ecx,ecx
c000c5a9:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5b0:	74 05                	je     c000c5b7 <Clock::timeInSecondsLocal()+0x3d>
c000c5b2:	b9 08 07 00 00       	mov    ecx,0x708
c000c5b7:	31 db                	xor    ebx,ebx
c000c5b9:	01 c8                	add    eax,ecx
c000c5bb:	11 da                	adc    edx,ebx
c000c5bd:	83 c4 08             	add    esp,0x8
c000c5c0:	5b                   	pop    ebx
c000c5c1:	c3                   	ret    

c000c5c2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c5c2:	57                   	push   edi
c000c5c3:	56                   	push   esi
c000c5c4:	53                   	push   ebx
c000c5c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5d3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5d6:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5dd:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5e3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5e9:	99                   	cdq    
c000c5ea:	29 c6                	sub    esi,eax
c000c5ec:	19 d7                	sbb    edi,edx
c000c5ee:	89 f0                	mov    eax,esi
c000c5f0:	89 fa                	mov    edx,edi
c000c5f2:	31 f6                	xor    esi,esi
c000c5f4:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5fb:	74 05                	je     c000c602 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5fd:	be 08 07 00 00       	mov    esi,0x708
c000c602:	31 ff                	xor    edi,edi
c000c604:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c608:	29 f0                	sub    eax,esi
c000c60a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c60e:	19 fa                	sbb    edx,edi
c000c610:	89 d8                	mov    eax,ebx
c000c612:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c616:	5b                   	pop    ebx
c000c617:	5e                   	pop    esi
c000c618:	5f                   	pop    edi
c000c619:	ff e0                	jmp    eax

c000c61b <datetimeToSeconds(datetime_t)>:
c000c61b:	55                   	push   ebp
c000c61c:	57                   	push   edi
c000c61d:	56                   	push   esi
c000c61e:	53                   	push   ebx
c000c61f:	83 ec 0c             	sub    esp,0xc
c000c622:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c626:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c62a:	89 d6                	mov    esi,edx
c000c62c:	0f b6 c7             	movzx  eax,bh
c000c62f:	c1 ee 10             	shr    esi,0x10
c000c632:	6b e8 3c             	imul   ebp,eax,0x3c
c000c635:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c63b:	0f b6 ce             	movzx  ecx,dh
c000c63e:	89 df                	mov    edi,ebx
c000c640:	49                   	dec    ecx
c000c641:	c1 ef 10             	shr    edi,0x10
c000c644:	0f b6 db             	movzx  ebx,bl
c000c647:	89 f8                	mov    eax,edi
c000c649:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c64f:	0f b6 f8             	movzx  edi,al
c000c652:	0f b6 d2             	movzx  edx,dl
c000c655:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c659:	01 d8                	add    eax,ebx
c000c65b:	0f b7 de             	movzx  ebx,si
c000c65e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c661:	c1 f8 1f             	sar    eax,0x1f
c000c664:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c668:	0f b6 c1             	movzx  eax,cl
c000c66b:	8b 0c 85 e0 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde420]
c000c672:	83 f8 01             	cmp    eax,0x1
c000c675:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c679:	76 27                	jbe    c000c6a2 <datetimeToSeconds(datetime_t)+0x87>
c000c67b:	83 e6 03             	and    esi,0x3
c000c67e:	75 22                	jne    c000c6a2 <datetimeToSeconds(datetime_t)+0x87>
c000c680:	31 d2                	xor    edx,edx
c000c682:	be 64 00 00 00       	mov    esi,0x64
c000c687:	89 d8                	mov    eax,ebx
c000c689:	f7 f6                	div    esi
c000c68b:	85 d2                	test   edx,edx
c000c68d:	75 12                	jne    c000c6a1 <datetimeToSeconds(datetime_t)+0x86>
c000c68f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c695:	be 90 01 00 00       	mov    esi,0x190
c000c69a:	99                   	cdq    
c000c69b:	f7 fe                	idiv   esi
c000c69d:	85 d2                	test   edx,edx
c000c69f:	75 01                	jne    c000c6a2 <datetimeToSeconds(datetime_t)+0x87>
c000c6a1:	41                   	inc    ecx
c000c6a2:	83 fb 46             	cmp    ebx,0x46
c000c6a5:	76 48                	jbe    c000c6ef <datetimeToSeconds(datetime_t)+0xd4>
c000c6a7:	be 46 00 00 00       	mov    esi,0x46
c000c6ac:	bf 64 00 00 00       	mov    edi,0x64
c000c6b1:	bd 90 01 00 00       	mov    ebp,0x190
c000c6b6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6bb:	f7 c6 03 00 00 00    	test   esi,0x3
c000c6c1:	75 23                	jne    c000c6e6 <datetimeToSeconds(datetime_t)+0xcb>
c000c6c3:	89 f0                	mov    eax,esi
c000c6c5:	99                   	cdq    
c000c6c6:	f7 ff                	idiv   edi
c000c6c8:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6cd:	85 d2                	test   edx,edx
c000c6cf:	75 15                	jne    c000c6e6 <datetimeToSeconds(datetime_t)+0xcb>
c000c6d1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6d7:	99                   	cdq    
c000c6d8:	f7 fd                	idiv   ebp
c000c6da:	83 fa 01             	cmp    edx,0x1
c000c6dd:	19 c0                	sbb    eax,eax
c000c6df:	f7 d0                	not    eax
c000c6e1:	05 6e 01 00 00       	add    eax,0x16e
c000c6e6:	01 c1                	add    ecx,eax
c000c6e8:	46                   	inc    esi
c000c6e9:	39 de                	cmp    esi,ebx
c000c6eb:	7c c9                	jl     c000c6b6 <datetimeToSeconds(datetime_t)+0x9b>
c000c6ed:	eb 34                	jmp    c000c723 <datetimeToSeconds(datetime_t)+0x108>
c000c6ef:	74 32                	je     c000c723 <datetimeToSeconds(datetime_t)+0x108>
c000c6f1:	b8 45 00 00 00       	mov    eax,0x45
c000c6f6:	89 c2                	mov    edx,eax
c000c6f8:	83 e2 03             	and    edx,0x3
c000c6fb:	39 d8                	cmp    eax,ebx
c000c6fd:	7e 0f                	jle    c000c70e <datetimeToSeconds(datetime_t)+0xf3>
c000c6ff:	83 fa 01             	cmp    edx,0x1
c000c702:	19 d2                	sbb    edx,edx
c000c704:	48                   	dec    eax
c000c705:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c70c:	eb e8                	jmp    c000c6f6 <datetimeToSeconds(datetime_t)+0xdb>
c000c70e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c713:	85 d2                	test   edx,edx
c000c715:	75 0a                	jne    c000c721 <datetimeToSeconds(datetime_t)+0x106>
c000c717:	83 fb 01             	cmp    ebx,0x1
c000c71a:	19 c0                	sbb    eax,eax
c000c71c:	05 6e 01 00 00       	add    eax,0x16e
c000c721:	29 c1                	sub    ecx,eax
c000c723:	b8 80 51 01 00       	mov    eax,0x15180
c000c728:	f7 e9                	imul   ecx
c000c72a:	03 04 24             	add    eax,DWORD PTR [esp]
c000c72d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c731:	83 c4 0c             	add    esp,0xc
c000c734:	5b                   	pop    ebx
c000c735:	5e                   	pop    esi
c000c736:	5f                   	pop    edi
c000c737:	5d                   	pop    ebp
c000c738:	c3                   	ret    
c000c739:	90                   	nop

c000c73a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c73a:	57                   	push   edi
c000c73b:	56                   	push   esi
c000c73c:	53                   	push   ebx
c000c73d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c741:	8b 06                	mov    eax,DWORD PTR [esi]
c000c743:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c746:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c74a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c74e:	e8 c8 fe ff ff       	call   c000c61b <datetimeToSeconds(datetime_t)>
c000c753:	59                   	pop    ecx
c000c754:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c75b:	5b                   	pop    ebx
c000c75c:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c762:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c768:	89 cb                	mov    ebx,ecx
c000c76a:	c1 fb 1f             	sar    ebx,0x1f
c000c76d:	29 c8                	sub    eax,ecx
c000c76f:	19 da                	sbb    edx,ebx
c000c771:	31 c9                	xor    ecx,ecx
c000c773:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c77a:	74 05                	je     c000c781 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c77c:	b9 08 07 00 00       	mov    ecx,0x708
c000c781:	31 db                	xor    ebx,ebx
c000c783:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c787:	29 c8                	sub    eax,ecx
c000c789:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c78d:	19 da                	sbb    edx,ebx
c000c78f:	89 f8                	mov    eax,edi
c000c791:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c795:	5b                   	pop    ebx
c000c796:	5e                   	pop    esi
c000c797:	5f                   	pop    edi
c000c798:	ff e0                	jmp    eax

c000c79a <secondsToDatetime(unsigned long long)>:
c000c79a:	55                   	push   ebp
c000c79b:	57                   	push   edi
c000c79c:	56                   	push   esi
c000c79d:	53                   	push   ebx
c000c79e:	83 ec 1c             	sub    esp,0x1c
c000c7a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c7a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c7a9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c7ad:	6a 00                	push   0x0
c000c7af:	68 80 51 01 00       	push   0x15180
c000c7b4:	55                   	push   ebp
c000c7b5:	57                   	push   edi
c000c7b6:	e8 95 30 01 00       	call   c001f850 <__udivdi3>
c000c7bb:	83 c4 10             	add    esp,0x10
c000c7be:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	6a 00                	push   0x0
c000c7ca:	68 80 51 01 00       	push   0x15180
c000c7cf:	55                   	push   ebp
c000c7d0:	57                   	push   edi
c000c7d1:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7d6:	e8 75 31 01 00       	call   c001f950 <__umoddi3>
c000c7db:	83 c4 10             	add    esp,0x10
c000c7de:	99                   	cdq    
c000c7df:	f7 ff                	idiv   edi
c000c7e1:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7e6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7e9:	89 d0                	mov    eax,edx
c000c7eb:	99                   	cdq    
c000c7ec:	f7 ff                	idiv   edi
c000c7ee:	85 db                	test   ebx,ebx
c000c7f0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7f3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7f6:	79 11                	jns    c000c809 <secondsToDatetime(unsigned long long)+0x6f>
c000c7f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7fc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c802:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c807:	eb 07                	jmp    c000c810 <secondsToDatetime(unsigned long long)+0x76>
c000c809:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c80e:	89 d8                	mov    eax,ebx
c000c810:	bf b4 05 00 00       	mov    edi,0x5b4
c000c815:	99                   	cdq    
c000c816:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c81b:	f7 f9                	idiv   ecx
c000c81d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c822:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c826:	31 d2                	xor    edx,edx
c000c828:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c830:	01 c3                	add    ebx,eax
c000c832:	89 d8                	mov    eax,ebx
c000c834:	f7 f1                	div    ecx
c000c836:	31 d2                	xor    edx,edx
c000c838:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c83b:	89 d8                	mov    eax,ebx
c000c83d:	f7 f7                	div    edi
c000c83f:	31 d2                	xor    edx,edx
c000c841:	29 c1                	sub    ecx,eax
c000c843:	89 d8                	mov    eax,ebx
c000c845:	f7 f5                	div    ebp
c000c847:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c84c:	29 c1                	sub    ecx,eax
c000c84e:	31 d2                	xor    edx,edx
c000c850:	89 c8                	mov    eax,ecx
c000c852:	f7 f5                	div    ebp
c000c854:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c85d:	31 d2                	xor    edx,edx
c000c85f:	89 c8                	mov    eax,ecx
c000c861:	f7 f5                	div    ebp
c000c863:	31 d2                	xor    edx,edx
c000c865:	01 c3                	add    ebx,eax
c000c867:	89 c8                	mov    eax,ecx
c000c869:	f7 f7                	div    edi
c000c86b:	bf 99 00 00 00       	mov    edi,0x99
c000c870:	29 c3                	sub    ebx,eax
c000c872:	31 d2                	xor    edx,edx
c000c874:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c87c:	29 c3                	sub    ebx,eax
c000c87e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c881:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c884:	bb 05 00 00 00       	mov    ebx,0x5
c000c889:	83 c1 02             	add    ecx,0x2
c000c88c:	89 c8                	mov    eax,ecx
c000c88e:	f7 f7                	div    edi
c000c890:	31 d2                	xor    edx,edx
c000c892:	89 c7                	mov    edi,eax
c000c894:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c89a:	83 c0 02             	add    eax,0x2
c000c89d:	f7 f3                	div    ebx
c000c89f:	89 eb                	mov    ebx,ebp
c000c8a1:	29 c3                	sub    ebx,eax
c000c8a3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c8a9:	88 1e                	mov    BYTE PTR [esi],bl
c000c8ab:	19 c0                	sbb    eax,eax
c000c8ad:	31 d2                	xor    edx,edx
c000c8af:	83 e0 0c             	and    eax,0xc
c000c8b2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c8b6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c8be:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c8c2:	83 f9 01             	cmp    ecx,0x1
c000c8c5:	0f 96 c2             	setbe  dl
c000c8c8:	41                   	inc    ecx
c000c8c9:	01 d0                	add    eax,edx
c000c8cb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8ce:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8d2:	83 c4 1c             	add    esp,0x1c
c000c8d5:	89 f0                	mov    eax,esi
c000c8d7:	5b                   	pop    ebx
c000c8d8:	5e                   	pop    esi
c000c8d9:	5f                   	pop    edi
c000c8da:	5d                   	pop    ebp
c000c8db:	c2 04 00             	ret    0x4

c000c8de <Clock::timeInDatetimeLocal()>:
c000c8de:	53                   	push   ebx
c000c8df:	83 ec 14             	sub    esp,0x14
c000c8e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8ea:	e8 8b fc ff ff       	call   c000c57a <Clock::timeInSecondsLocal()>
c000c8ef:	83 c4 0c             	add    esp,0xc
c000c8f2:	52                   	push   edx
c000c8f3:	50                   	push   eax
c000c8f4:	53                   	push   ebx
c000c8f5:	e8 a0 fe ff ff       	call   c000c79a <secondsToDatetime(unsigned long long)>
c000c8fa:	89 d8                	mov    eax,ebx
c000c8fc:	83 c4 14             	add    esp,0x14
c000c8ff:	5b                   	pop    ebx
c000c900:	c2 04 00             	ret    0x4
c000c903:	90                   	nop

c000c904 <Device::hibernate()>:
c000c904:	c3                   	ret    
c000c905:	90                   	nop

c000c906 <Device::wake()>:
c000c906:	c3                   	ret    
c000c907:	90                   	nop

c000c908 <Device::detect()>:
c000c908:	c3                   	ret    
c000c909:	90                   	nop

c000c90a <Device::disableLegacy()>:
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <Device::powerSaving(PowerSavingLevel)>:
c000c90c:	c3                   	ret    
c000c90d:	90                   	nop

c000c90e <DriverlessDevice::close(int, int, void*)>:
c000c90e:	31 c0                	xor    eax,eax
c000c910:	c3                   	ret    
c000c911:	90                   	nop

c000c912 <DriverlessDevice::detect()>:
c000c912:	c3                   	ret    
c000c913:	90                   	nop

c000c914 <DriverlessDevice::open(int, int, void*)>:
c000c914:	83 ec 18             	sub    esp,0x18
c000c917:	68 10 1c 02 c0       	push   0xc0021c10
c000c91c:	e8 d6 4d 00 00       	call   c00116f7 <KePanic(char const*)>
c000c921:	83 c8 ff             	or     eax,0xffffffff
c000c924:	83 c4 1c             	add    esp,0x1c
c000c927:	c3                   	ret    

c000c928 <Device::~Device()>:
c000c928:	ba 70 1c 02 c0       	mov    edx,0xc0021c70
c000c92d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c931:	89 10                	mov    DWORD PTR [eax],edx
c000c933:	90                   	nop
c000c934:	c3                   	ret    
c000c935:	90                   	nop

c000c936 <Device::~Device()>:
c000c936:	83 ec 0c             	sub    esp,0xc
c000c939:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c93d:	e8 e6 ff ff ff       	call   c000c928 <Device::~Device()>
c000c942:	83 c4 04             	add    esp,0x4
c000c945:	83 ec 08             	sub    esp,0x8
c000c948:	68 58 01 00 00       	push   0x158
c000c94d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c951:	e8 22 df ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000c956:	83 c4 10             	add    esp,0x10
c000c959:	83 c4 0c             	add    esp,0xc
c000c95c:	c3                   	ret    
c000c95d:	90                   	nop

c000c95e <Device::findAndLoadDriver()>:
c000c95e:	c7 44 24 04 2e 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c2e
c000c966:	e9 3a e0 ff ff       	jmp    c000a9a5 <Dbg::kprintf(char const*, ...)>
c000c96b:	90                   	nop

c000c96c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c96c:	57                   	push   edi
c000c96d:	b9 09 00 00 00       	mov    ecx,0x9
c000c972:	56                   	push   esi
c000c973:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c977:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c97b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c985:	81 c7 18 01 00 00    	add    edi,0x118
c000c98b:	fc                   	cld    
c000c98c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c98e:	5e                   	pop    esi
c000c98f:	5f                   	pop    edi
c000c990:	c3                   	ret    
c000c991:	90                   	nop

c000c992 <Device::preOpenACPI(void*, char*, char*)>:
c000c992:	57                   	push   edi
c000c993:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c998:	56                   	push   esi
c000c999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c99d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9a1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c9ab:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c9b1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c9b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9bd:	b9 0e 00 00 00       	mov    ecx,0xe
c000c9c2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c9c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9ce:	5e                   	pop    esi
c000c9cf:	5f                   	pop    edi
c000c9d0:	c3                   	ret    
c000c9d1:	90                   	nop

c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9d2:	53                   	push   ebx
c000c9d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9e3:	0f b6 c0             	movzx  eax,al
c000c9e6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9f6:	5b                   	pop    ebx
c000c9f7:	e9 a8 05 00 00       	jmp    c000cfa4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9fc <Device::getParent()>:
c000c9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca00:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ca06:	c3                   	ret    
c000ca07:	90                   	nop

c000ca08 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ca08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca10:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ca15:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca21:	e9 e6 06 00 00       	jmp    c000d10c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca26 <Device::addChild(Device*)>:
c000ca26:	53                   	push   ebx
c000ca27:	83 ec 08             	sub    esp,0x8
c000ca2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca32:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca38:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca40:	85 d2                	test   edx,edx
c000ca42:	74 04                	je     c000ca48 <Device::addChild(Device*)+0x22>
c000ca44:	89 d3                	mov    ebx,edx
c000ca46:	eb f6                	jmp    c000ca3e <Device::addChild(Device*)+0x18>
c000ca48:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca4b:	83 ec 0c             	sub    esp,0xc
c000ca4e:	6a 08                	push   0x8
c000ca50:	e8 c1 b0 ff ff       	call   c0007b16 <malloc>
c000ca55:	89 03                	mov    DWORD PTR [ebx],eax
c000ca57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca5d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca64:	83 c4 18             	add    esp,0x18
c000ca67:	5b                   	pop    ebx
c000ca68:	c3                   	ret    
c000ca69:	90                   	nop

c000ca6a <Device::removeAllChildren()>:
c000ca6a:	56                   	push   esi
c000ca6b:	53                   	push   ebx
c000ca6c:	52                   	push   edx
c000ca6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca71:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca7a:	74 17                	je     c000ca93 <Device::removeAllChildren()+0x29>
c000ca7c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca7f:	85 c0                	test   eax,eax
c000ca81:	74 0c                	je     c000ca8f <Device::removeAllChildren()+0x25>
c000ca83:	83 ec 0c             	sub    esp,0xc
c000ca86:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca88:	50                   	push   eax
c000ca89:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca8c:	83 c4 10             	add    esp,0x10
c000ca8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca91:	eb e4                	jmp    c000ca77 <Device::removeAllChildren()+0xd>
c000ca93:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca9f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000caa5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000caac:	58                   	pop    eax
c000caad:	5b                   	pop    ebx
c000caae:	5e                   	pop    esi
c000caaf:	c3                   	ret    

c000cab0 <Device::hibernateAll()>:
c000cab0:	53                   	push   ebx
c000cab1:	83 ec 14             	sub    esp,0x14
c000cab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caba:	53                   	push   ebx
c000cabb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cabe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caca:	74 0f                	je     c000cadb <Device::hibernateAll()+0x2b>
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cad2:	e8 d9 ff ff ff       	call   c000cab0 <Device::hibernateAll()>
c000cad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad9:	eb e9                	jmp    c000cac4 <Device::hibernateAll()+0x14>
c000cadb:	83 c4 08             	add    esp,0x8
c000cade:	5b                   	pop    ebx
c000cadf:	c3                   	ret    

c000cae0 <Device::wakeAll()>:
c000cae0:	53                   	push   ebx
c000cae1:	83 ec 14             	sub    esp,0x14
c000cae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caea:	53                   	push   ebx
c000caeb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000caee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cafa:	74 0f                	je     c000cb0b <Device::wakeAll()+0x2b>
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb02:	e8 d9 ff ff ff       	call   c000cae0 <Device::wakeAll()>
c000cb07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb09:	eb e9                	jmp    c000caf4 <Device::wakeAll()+0x14>
c000cb0b:	83 c4 08             	add    esp,0x8
c000cb0e:	5b                   	pop    ebx
c000cb0f:	c3                   	ret    

c000cb10 <Device::detectAll()>:
c000cb10:	53                   	push   ebx
c000cb11:	83 ec 14             	sub    esp,0x14
c000cb14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb18:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb1a:	53                   	push   ebx
c000cb1b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cb1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb24:	83 c4 10             	add    esp,0x10
c000cb27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb2a:	74 0f                	je     c000cb3b <Device::detectAll()+0x2b>
c000cb2c:	83 ec 0c             	sub    esp,0xc
c000cb2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb32:	e8 d9 ff ff ff       	call   c000cb10 <Device::detectAll()>
c000cb37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb39:	eb e9                	jmp    c000cb24 <Device::detectAll()+0x14>
c000cb3b:	83 c4 08             	add    esp,0x8
c000cb3e:	5b                   	pop    ebx
c000cb3f:	c3                   	ret    

c000cb40 <Device::disableLegacyAll()>:
c000cb40:	c3                   	ret    
c000cb41:	90                   	nop

c000cb42 <Device::loadDriversForAll()>:
c000cb42:	c3                   	ret    
c000cb43:	90                   	nop

c000cb44 <Device::closeAll()>:
c000cb44:	53                   	push   ebx
c000cb45:	83 ec 08             	sub    esp,0x8
c000cb48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb4e:	6a 00                	push   0x0
c000cb50:	6a 00                	push   0x0
c000cb52:	6a 00                	push   0x0
c000cb54:	53                   	push   ebx
c000cb55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb5e:	83 c4 10             	add    esp,0x10
c000cb61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb64:	74 0f                	je     c000cb75 <Device::closeAll()+0x31>
c000cb66:	83 ec 0c             	sub    esp,0xc
c000cb69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb6c:	e8 d3 ff ff ff       	call   c000cb44 <Device::closeAll()>
c000cb71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb73:	eb e9                	jmp    c000cb5e <Device::closeAll()+0x1a>
c000cb75:	83 c4 08             	add    esp,0x8
c000cb78:	5b                   	pop    ebx
c000cb79:	c3                   	ret    

c000cb7a <Device::powerSavingAll(PowerSavingLevel)>:
c000cb7a:	56                   	push   esi
c000cb7b:	53                   	push   ebx
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb83:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb87:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb89:	56                   	push   esi
c000cb8a:	53                   	push   ebx
c000cb8b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb94:	83 c4 10             	add    esp,0x10
c000cb97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb9a:	74 0f                	je     c000cbab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb9c:	52                   	push   edx
c000cb9d:	52                   	push   edx
c000cb9e:	56                   	push   esi
c000cb9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cba2:	e8 d3 ff ff ff       	call   c000cb7a <Device::powerSavingAll(PowerSavingLevel)>
c000cba7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cba9:	eb e9                	jmp    c000cb94 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cbab:	58                   	pop    eax
c000cbac:	5b                   	pop    ebx
c000cbad:	5e                   	pop    esi
c000cbae:	c3                   	ret    
c000cbaf:	90                   	nop

c000cbb0 <Device::setName(char const*)>:
c000cbb0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cbb8:	e9 83 3a ff ff       	jmp    c0000640 <strcpy>
c000cbbd:	90                   	nop

c000cbbe <Device::Device(char const*)>:
c000cbbe:	83 ec 1c             	sub    esp,0x1c
c000cbc1:	ba 70 1c 02 c0       	mov    edx,0xc0021c70
c000cbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbca:	89 10                	mov    DWORD PTR [eax],edx
c000cbcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbde:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc04:	83 ec 08             	sub    esp,0x8
c000cc07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0f:	e8 9c ff ff ff       	call   c000cbb0 <Device::setName(char const*)>
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc1f:	83 ec 0c             	sub    esp,0xc
c000cc22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc26:	e8 eb ae ff ff       	call   c0007b16 <malloc>
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc3f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc49:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc59:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc6a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc75:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc80:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc8e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc9c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccaa:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ccb4:	90                   	nop
c000ccb5:	83 c4 1c             	add    esp,0x1c
c000ccb8:	c3                   	ret    
c000ccb9:	90                   	nop

c000ccba <Device::getName()>:
c000ccba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccbe:	05 d0 00 00 00       	add    eax,0xd0
c000ccc3:	c3                   	ret    

c000ccc4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ccc4:	83 ec 0c             	sub    esp,0xc
c000ccc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cccb:	83 ec 08             	sub    esp,0x8
c000ccce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd2:	50                   	push   eax
c000ccd3:	e8 e6 fe ff ff       	call   c000cbbe <Device::Device(char const*)>
c000ccd8:	83 c4 10             	add    esp,0x10
c000ccdb:	ba 9c 1c 02 c0       	mov    edx,0xc0021c9c
c000cce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce4:	89 10                	mov    DWORD PTR [eax],edx
c000cce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccea:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccf4:	90                   	nop
c000ccf5:	83 c4 0c             	add    esp,0xc
c000ccf8:	c3                   	ret    
c000ccf9:	90                   	nop

c000ccfa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccfa:	57                   	push   edi
c000ccfb:	56                   	push   esi
c000ccfc:	53                   	push   ebx
c000ccfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd01:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cd05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd09:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cd0f:	75 0c                	jne    c000cd1d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cd11:	52                   	push   edx
c000cd12:	52                   	push   edx
c000cd13:	53                   	push   ebx
c000cd14:	56                   	push   esi
c000cd15:	e8 e8 2f 01 00       	call   c001fd02 <LinkedList<Device>::addElement(Device*)>
c000cd1a:	83 c4 10             	add    esp,0x10
c000cd1d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd23:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd26:	74 12                	je     c000cd3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd28:	50                   	push   eax
c000cd29:	57                   	push   edi
c000cd2a:	56                   	push   esi
c000cd2b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd2e:	e8 c7 ff ff ff       	call   c000ccfa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd33:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd35:	83 c4 10             	add    esp,0x10
c000cd38:	eb e9                	jmp    c000cd23 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd3a:	5b                   	pop    ebx
c000cd3b:	5e                   	pop    esi
c000cd3c:	5f                   	pop    edi
c000cd3d:	c3                   	ret    

c000cd3e <getDevicesOfType(DeviceType)>:
c000cd3e:	53                   	push   ebx
c000cd3f:	83 ec 14             	sub    esp,0x14
c000cd42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd46:	53                   	push   ebx
c000cd47:	e8 92 30 01 00       	call   c001fdde <LinkedList<Device>::LinkedList()>
c000cd4c:	83 c4 0c             	add    esp,0xc
c000cd4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd53:	53                   	push   ebx
c000cd54:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd5a:	e8 9b ff ff ff       	call   c000ccfa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd5f:	89 d8                	mov    eax,ebx
c000cd61:	83 c4 18             	add    esp,0x18
c000cd64:	5b                   	pop    ebx
c000cd65:	c2 04 00             	ret    0x4

c000cd68 <HardDiskController::HardDiskController(char const*)>:
c000cd68:	83 ec 0c             	sub    esp,0xc
c000cd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6f:	83 ec 08             	sub    esp,0x8
c000cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd76:	50                   	push   eax
c000cd77:	e8 42 fe ff ff       	call   c000cbbe <Device::Device(char const*)>
c000cd7c:	83 c4 10             	add    esp,0x10
c000cd7f:	ba c8 1c 02 c0       	mov    edx,0xc0021cc8
c000cd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd88:	89 10                	mov    DWORD PTR [eax],edx
c000cd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd98:	90                   	nop
c000cd99:	83 c4 0c             	add    esp,0xc
c000cd9c:	c3                   	ret    
c000cd9d:	90                   	nop
c000cd9e:	66 90                	xchg   ax,ax

c000cda0 <HardDiskController::~HardDiskController()>:
c000cda0:	83 ec 0c             	sub    esp,0xc
c000cda3:	ba c8 1c 02 c0       	mov    edx,0xc0021cc8
c000cda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdac:	89 10                	mov    DWORD PTR [eax],edx
c000cdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb2:	83 ec 0c             	sub    esp,0xc
c000cdb5:	50                   	push   eax
c000cdb6:	e8 6d fb ff ff       	call   c000c928 <Device::~Device()>
c000cdbb:	83 c4 10             	add    esp,0x10
c000cdbe:	90                   	nop
c000cdbf:	83 c4 0c             	add    esp,0xc
c000cdc2:	c3                   	ret    
c000cdc3:	90                   	nop

c000cdc4 <HardDiskController::~HardDiskController()>:
c000cdc4:	83 ec 0c             	sub    esp,0xc
c000cdc7:	83 ec 0c             	sub    esp,0xc
c000cdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdce:	e8 cd ff ff ff       	call   c000cda0 <HardDiskController::~HardDiskController()>
c000cdd3:	83 c4 10             	add    esp,0x10
c000cdd6:	83 ec 08             	sub    esp,0x8
c000cdd9:	68 58 01 00 00       	push   0x158
c000cdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde2:	e8 91 da ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000cde7:	83 c4 10             	add    esp,0x10
c000cdea:	83 c4 0c             	add    esp,0xc
c000cded:	c3                   	ret    

c000cdee <PhysicalDisk::eject()>:
c000cdee:	83 c8 ff             	or     eax,0xffffffff
c000cdf1:	c3                   	ret    

c000cdf2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdf2:	83 ec 0c             	sub    esp,0xc
c000cdf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf9:	83 ec 08             	sub    esp,0x8
c000cdfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce00:	50                   	push   eax
c000ce01:	e8 b8 fd ff ff       	call   c000cbbe <Device::Device(char const*)>
c000ce06:	83 c4 10             	add    esp,0x10
c000ce09:	ba f4 1c 02 c0       	mov    edx,0xc0021cf4
c000ce0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce12:	89 10                	mov    DWORD PTR [eax],edx
c000ce14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce23:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce54:	90                   	nop
c000ce55:	83 c4 0c             	add    esp,0xc
c000ce58:	c3                   	ret    
c000ce59:	90                   	nop

c000ce5a <PhysicalDisk::startCache()>:
c000ce5a:	56                   	push   esi
c000ce5b:	53                   	push   ebx
c000ce5c:	83 ec 10             	sub    esp,0x10
c000ce5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce63:	6a 44                	push   0x44
c000ce65:	e8 ac ac ff ff       	call   c0007b16 <malloc>
c000ce6a:	89 c6                	mov    esi,eax
c000ce6c:	58                   	pop    eax
c000ce6d:	5a                   	pop    edx
c000ce6e:	53                   	push   ebx
c000ce6f:	56                   	push   esi
c000ce70:	e8 7b 17 00 00       	call   c000e5f0 <VCache::VCache(PhysicalDisk*)>
c000ce75:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce7b:	83 c4 14             	add    esp,0x14
c000ce7e:	5b                   	pop    ebx
c000ce7f:	5e                   	pop    esi
c000ce80:	c3                   	ret    
c000ce81:	90                   	nop

c000ce82 <PhysicalDisk::~PhysicalDisk()>:
c000ce82:	83 ec 0c             	sub    esp,0xc
c000ce85:	ba f4 1c 02 c0       	mov    edx,0xc0021cf4
c000ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8e:	89 10                	mov    DWORD PTR [eax],edx
c000ce90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	50                   	push   eax
c000ce98:	e8 8b fa ff ff       	call   c000c928 <Device::~Device()>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	90                   	nop
c000cea1:	83 c4 0c             	add    esp,0xc
c000cea4:	c3                   	ret    
c000cea5:	90                   	nop

c000cea6 <PhysicalDisk::~PhysicalDisk()>:
c000cea6:	83 ec 0c             	sub    esp,0xc
c000cea9:	83 ec 0c             	sub    esp,0xc
c000ceac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb0:	e8 cd ff ff ff       	call   c000ce82 <PhysicalDisk::~PhysicalDisk()>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	83 ec 08             	sub    esp,0x8
c000cebb:	68 6c 01 00 00       	push   0x16c
c000cec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec4:	e8 af d9 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	83 c4 0c             	add    esp,0xc
c000cecf:	c3                   	ret    

c000ced0 <int_handler>:
c000ced0:	55                   	push   ebp
c000ced1:	57                   	push   edi
c000ced2:	56                   	push   esi
c000ced3:	53                   	push   ebx
c000ced4:	83 ec 0c             	sub    esp,0xc
c000ced7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cedb:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cee2:	74 0b                	je     c000ceef <int_handler+0x1f>
c000cee4:	fa                   	cli    
c000cee5:	f4                   	hlt    
c000cee6:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ceed:	75 f5                	jne    c000cee4 <int_handler+0x14>
c000ceef:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cef2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cef5:	83 f8 17             	cmp    eax,0x17
c000cef8:	76 40                	jbe    c000cf3a <int_handler+0x6a>
c000cefa:	c1 e6 04             	shl    esi,0x4
c000cefd:	31 db                	xor    ebx,ebx
c000ceff:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cf05:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cf0b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cf0f:	85 c0                	test   eax,eax
c000cf11:	74 13                	je     c000cf26 <int_handler+0x56>
c000cf13:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf16:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf1a:	74 2c                	je     c000cf48 <int_handler+0x78>
c000cf1c:	83 ec 08             	sub    esp,0x8
c000cf1f:	52                   	push   edx
c000cf20:	57                   	push   edi
c000cf21:	ff d0                	call   eax
c000cf23:	83 c4 10             	add    esp,0x10
c000cf26:	83 c3 01             	add    ebx,0x1
c000cf29:	83 fb 04             	cmp    ebx,0x4
c000cf2c:	75 dd                	jne    c000cf0b <int_handler+0x3b>
c000cf2e:	83 c4 0c             	add    esp,0xc
c000cf31:	31 c0                	xor    eax,eax
c000cf33:	5b                   	pop    ebx
c000cf34:	31 d2                	xor    edx,edx
c000cf36:	5e                   	pop    esi
c000cf37:	5f                   	pop    edi
c000cf38:	5d                   	pop    ebp
c000cf39:	c3                   	ret    
c000cf3a:	83 ec 0c             	sub    esp,0xc
c000cf3d:	50                   	push   eax
c000cf3e:	e8 61 b5 00 00       	call   c00184a4 <HalEndOfInterrupt(int)>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	eb b2                	jmp    c000cefa <int_handler+0x2a>
c000cf48:	83 ec 08             	sub    esp,0x8
c000cf4b:	52                   	push   edx
c000cf4c:	57                   	push   edi
c000cf4d:	ff d0                	call   eax
c000cf4f:	83 c4 10             	add    esp,0x10
c000cf52:	83 c4 0c             	add    esp,0xc
c000cf55:	5b                   	pop    ebx
c000cf56:	5e                   	pop    esi
c000cf57:	5f                   	pop    edi
c000cf58:	5d                   	pop    ebp
c000cf59:	c3                   	ret    

c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf5a:	56                   	push   esi
c000cf5b:	31 c0                	xor    eax,eax
c000cf5d:	53                   	push   ebx
c000cf5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf66:	89 ca                	mov    edx,ecx
c000cf68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf6c:	c1 e2 04             	shl    edx,0x4
c000cf6f:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf77:	74 17                	je     c000cf90 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf79:	83 c0 01             	add    eax,0x1
c000cf7c:	83 f8 04             	cmp    eax,0x4
c000cf7f:	75 ee                	jne    c000cf6f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf81:	c7 44 24 0c 24 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d24
c000cf89:	5b                   	pop    ebx
c000cf8a:	5e                   	pop    esi
c000cf8b:	e9 67 47 00 00       	jmp    c00116f7 <KePanic(char const*)>
c000cf90:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf93:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf9a:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cfa1:	5b                   	pop    ebx
c000cfa2:	5e                   	pop    esi
c000cfa3:	c3                   	ret    

c000cfa4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cfa4:	57                   	push   edi
c000cfa5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfab:	56                   	push   esi
c000cfac:	53                   	push   ebx
c000cfad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cfb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfb5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfbc:	74 54                	je     c000d012 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cfbe:	89 c7                	mov    edi,eax
c000cfc0:	84 c0                	test   al,al
c000cfc2:	74 1d                	je     c000cfe1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cfc4:	83 fe 0f             	cmp    esi,0xf
c000cfc7:	0f 8f d5 00 00 00    	jg     c000d0a2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cfcd:	0f b6 b6 c8 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc738]
c000cfd4:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfdc:	d1 ef                	shr    edi,1
c000cfde:	83 e7 01             	and    edi,0x1
c000cfe1:	83 ec 08             	sub    esp,0x8
c000cfe4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfe9:	31 db                	xor    ebx,ebx
c000cfeb:	50                   	push   eax
c000cfec:	68 31 1d 02 c0       	push   0xc0021d31
c000cff1:	e8 af d9 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000cff6:	83 c4 10             	add    esp,0x10
c000cff9:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cffe:	85 c0                	test   eax,eax
c000d000:	7f 55                	jg     c000d057 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d002:	83 ec 0c             	sub    esp,0xc
c000d005:	68 48 1d 02 c0       	push   0xc0021d48
c000d00a:	e8 e8 46 00 00       	call   c00116f7 <KePanic(char const*)>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	8d 7e 20             	lea    edi,[esi+0x20]
c000d015:	89 f8                	mov    eax,edi
c000d017:	31 d2                	xor    edx,edx
c000d019:	c1 e0 04             	shl    eax,0x4
c000d01c:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d023:	85 c9                	test   ecx,ecx
c000d025:	0f 84 8e 00 00 00    	je     c000d0b9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000d02b:	83 c2 01             	add    edx,0x1
c000d02e:	83 fa 04             	cmp    edx,0x4
c000d031:	75 e9                	jne    c000d01c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d033:	83 ec 0c             	sub    esp,0xc
c000d036:	68 9c 1d 02 c0       	push   0xc0021d9c
c000d03b:	e8 b7 46 00 00       	call   c00116f7 <KePanic(char const*)>
c000d040:	83 c4 10             	add    esp,0x10
c000d043:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d048:	5b                   	pop    ebx
c000d049:	5e                   	pop    esi
c000d04a:	5f                   	pop    edi
c000d04b:	c3                   	ret    
c000d04c:	83 c3 01             	add    ebx,0x1
c000d04f:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d055:	7e ab                	jle    c000d002 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d057:	83 ec 08             	sub    esp,0x8
c000d05a:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d061:	56                   	push   esi
c000d062:	50                   	push   eax
c000d063:	e8 c6 1b 01 00       	call   c001ec2e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d068:	83 c4 10             	add    esp,0x10
c000d06b:	84 c0                	test   al,al
c000d06d:	74 dd                	je     c000d04c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d06f:	83 ec 04             	sub    esp,0x4
c000d072:	89 f8                	mov    eax,edi
c000d074:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d07b:	0f b6 f8             	movzx  edi,al
c000d07e:	57                   	push   edi
c000d07f:	8d 7e 20             	lea    edi,[esi+0x20]
c000d082:	6a 00                	push   0x0
c000d084:	89 f8                	mov    eax,edi
c000d086:	0f b6 c0             	movzx  eax,al
c000d089:	50                   	push   eax
c000d08a:	89 f0                	mov    eax,esi
c000d08c:	6a 00                	push   0x0
c000d08e:	0f b6 c0             	movzx  eax,al
c000d091:	6a 00                	push   0x0
c000d093:	50                   	push   eax
c000d094:	53                   	push   ebx
c000d095:	e8 00 1d 01 00       	call   c001ed9a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d09a:	83 c4 20             	add    esp,0x20
c000d09d:	e9 73 ff ff ff       	jmp    c000d015 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d0a2:	83 ec 0c             	sub    esp,0xc
c000d0a5:	31 ff                	xor    edi,edi
c000d0a7:	68 64 1d 02 c0       	push   0xc0021d64
c000d0ac:	e8 46 46 00 00       	call   c00116f7 <KePanic(char const*)>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	e9 28 ff ff ff       	jmp    c000cfe1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d0b9:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d0bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0c0:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d0cb:	5b                   	pop    ebx
c000d0cc:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0d3:	89 f0                	mov    eax,esi
c000d0d5:	5e                   	pop    esi
c000d0d6:	5f                   	pop    edi
c000d0d7:	c3                   	ret    

c000d0d8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0e0:	c1 e0 04             	shl    eax,0x4
c000d0e3:	8d 50 10             	lea    edx,[eax+0x10]
c000d0e6:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0ec:	74 08                	je     c000d0f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0ee:	83 c0 04             	add    eax,0x4
c000d0f1:	39 d0                	cmp    eax,edx
c000d0f3:	75 f1                	jne    c000d0e6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0f5:	c3                   	ret    
c000d0f6:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d100:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d10a:	eb e2                	jmp    c000d0ee <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d10c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d10c:	53                   	push   ebx
c000d10d:	83 ec 08             	sub    esp,0x8
c000d110:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d114:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d119:	74 0e                	je     c000d129 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d11b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d120:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d127:	75 37                	jne    c000d160 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12d:	83 c0 20             	add    eax,0x20
c000d130:	c1 e0 04             	shl    eax,0x4
c000d133:	8d 50 10             	lea    edx,[eax+0x10]
c000d136:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d13c:	74 0c                	je     c000d14a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d13e:	83 c0 04             	add    eax,0x4
c000d141:	39 d0                	cmp    eax,edx
c000d143:	75 f1                	jne    c000d136 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d145:	83 c4 08             	add    esp,0x8
c000d148:	5b                   	pop    ebx
c000d149:	c3                   	ret    
c000d14a:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d154:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d15e:	eb de                	jmp    c000d13e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d160:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d165:	7f 11                	jg     c000d178 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16b:	0f b6 80 c8 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc738]
c000d172:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d176:	eb b1                	jmp    c000d129 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d178:	83 ec 0c             	sub    esp,0xc
c000d17b:	68 55 1d 02 c0       	push   0xc0021d55
c000d180:	e8 72 45 00 00       	call   c00116f7 <KePanic(char const*)>
c000d185:	83 c4 10             	add    esp,0x10
c000d188:	eb 9f                	jmp    c000d129 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d18a <setupINTS()>:
c000d18a:	31 c0                	xor    eax,eax
c000d18c:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d196:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d1a0:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d1aa:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d1b4:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d1be:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d1c8:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d1d2:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d1dc:	83 c0 10             	add    eax,0x10
c000d1df:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1e4:	75 a6                	jne    c000d18c <setupINTS()+0x2>
c000d1e6:	c3                   	ret    

c000d1e7 <convertLegacyIRQNumber(int)>:
c000d1e7:	83 ec 0c             	sub    esp,0xc
c000d1ea:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1fb:	74 0c                	je     c000d209 <convertLegacyIRQNumber(int)+0x22>
c000d1fd:	83 f8 0f             	cmp    eax,0xf
c000d200:	7f 0b                	jg     c000d20d <convertLegacyIRQNumber(int)+0x26>
c000d202:	0f b6 80 c8 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc738]
c000d209:	83 c4 0c             	add    esp,0xc
c000d20c:	c3                   	ret    
c000d20d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d211:	83 ec 0c             	sub    esp,0xc
c000d214:	68 64 1d 02 c0       	push   0xc0021d64
c000d219:	e8 d9 44 00 00       	call   c00116f7 <KePanic(char const*)>
c000d21e:	83 c4 10             	add    esp,0x10
c000d221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d225:	83 c4 0c             	add    esp,0xc
c000d228:	c3                   	ret    
c000d229:	90                   	nop

c000d22a <startGUI(void*)>:
c000d22a:	55                   	push   ebp
c000d22b:	89 e5                	mov    ebp,esp
c000d22d:	53                   	push   ebx
c000d22e:	83 ec 04             	sub    esp,0x4
c000d231:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d236:	83 e8 01             	sub    eax,0x1
c000d239:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d23e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d243:	85 c0                	test   eax,eax
c000d245:	75 01                	jne    c000d248 <startGUI(void*)+0x1e>
c000d247:	fb                   	sti    
c000d248:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d24e:	83 ec 08             	sub    esp,0x8
c000d251:	6a 01                	push   0x1
c000d253:	68 c1 1d 02 c0       	push   0xc0021dc1
c000d258:	e8 20 85 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c000d25d:	83 c4 10             	add    esp,0x10
c000d260:	83 ec 08             	sub    esp,0x8
c000d263:	53                   	push   ebx
c000d264:	50                   	push   eax
c000d265:	e8 44 87 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c000d26a:	83 c4 10             	add    esp,0x10
c000d26d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d273:	83 ec 08             	sub    esp,0x8
c000d276:	6a 01                	push   0x1
c000d278:	68 db 1d 02 c0       	push   0xc0021ddb
c000d27d:	e8 fb 84 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	83 ec 08             	sub    esp,0x8
c000d288:	53                   	push   ebx
c000d289:	50                   	push   eax
c000d28a:	e8 1f 87 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c000d28f:	83 c4 10             	add    esp,0x10
c000d292:	90                   	nop
c000d293:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d296:	c9                   	leave  
c000d297:	c3                   	ret    

c000d298 <startGUIVESA(void*)>:
c000d298:	55                   	push   ebp
c000d299:	89 e5                	mov    ebp,esp
c000d29b:	53                   	push   ebx
c000d29c:	83 ec 04             	sub    esp,0x4
c000d29f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2a4:	83 e8 01             	sub    eax,0x1
c000d2a7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2ac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2b1:	85 c0                	test   eax,eax
c000d2b3:	75 01                	jne    c000d2b6 <startGUIVESA(void*)+0x1e>
c000d2b5:	fb                   	sti    
c000d2b6:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2bc:	83 ec 08             	sub    esp,0x8
c000d2bf:	6a 01                	push   0x1
c000d2c1:	68 f9 1d 02 c0       	push   0xc0021df9
c000d2c6:	e8 b2 84 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	83 ec 08             	sub    esp,0x8
c000d2d1:	53                   	push   ebx
c000d2d2:	50                   	push   eax
c000d2d3:	e8 d6 86 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c000d2d8:	83 c4 10             	add    esp,0x10
c000d2db:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2e1:	83 ec 08             	sub    esp,0x8
c000d2e4:	6a 01                	push   0x1
c000d2e6:	68 db 1d 02 c0       	push   0xc0021ddb
c000d2eb:	e8 8d 84 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	83 ec 08             	sub    esp,0x8
c000d2f6:	53                   	push   ebx
c000d2f7:	50                   	push   eax
c000d2f8:	e8 b1 86 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c000d2fd:	83 c4 10             	add    esp,0x10
c000d300:	90                   	nop
c000d301:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d304:	c9                   	leave  
c000d305:	c3                   	ret    

c000d306 <sendKeyToTerminal(unsigned char)>:
c000d306:	55                   	push   ebp
c000d307:	89 e5                	mov    ebp,esp
c000d309:	83 ec 28             	sub    esp,0x28
c000d30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d30f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d312:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d317:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d31b:	83 ec 08             	sub    esp,0x8
c000d31e:	52                   	push   edx
c000d31f:	50                   	push   eax
c000d320:	e8 f1 ba ff ff       	call   c0008e16 <VgaText::receiveKey(unsigned char)>
c000d325:	83 c4 10             	add    esp,0x10
c000d328:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d32c:	83 f8 0a             	cmp    eax,0xa
c000d32f:	74 16                	je     c000d347 <sendKeyToTerminal(unsigned char)+0x41>
c000d331:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d335:	83 f8 03             	cmp    eax,0x3
c000d338:	74 0d                	je     c000d347 <sendKeyToTerminal(unsigned char)+0x41>
c000d33a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d33e:	83 f8 1c             	cmp    eax,0x1c
c000d341:	0f 85 97 00 00 00    	jne    c000d3de <sendKeyToTerminal(unsigned char)+0xd8>
c000d347:	fa                   	cli    
c000d348:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d34d:	83 c0 01             	add    eax,0x1
c000d350:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d355:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d35a:	83 c0 01             	add    eax,0x1
c000d35d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d362:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d367:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d36a:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d374:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d378:	74 1f                	je     c000d399 <sendKeyToTerminal(unsigned char)+0x93>
c000d37a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d37d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d380:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d383:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d386:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d389:	83 ec 0c             	sub    esp,0xc
c000d38c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d38f:	e8 60 93 00 00       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c000d394:	83 c4 10             	add    esp,0x10
c000d397:	eb db                	jmp    c000d374 <sendKeyToTerminal(unsigned char)+0x6e>
c000d399:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d39e:	83 e8 01             	sub    eax,0x1
c000d3a1:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3a6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3ab:	85 c0                	test   eax,eax
c000d3ad:	75 18                	jne    c000d3c7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3af:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	74 0f                	je     c000d3c7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3b8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3c2:	e8 15 8e 00 00       	call   c00161dc <schedule()>
c000d3c7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3cc:	83 e8 01             	sub    eax,0x1
c000d3cf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3d4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3d9:	85 c0                	test   eax,eax
c000d3db:	75 01                	jne    c000d3de <sendKeyToTerminal(unsigned char)+0xd8>
c000d3dd:	fb                   	sti    
c000d3de:	90                   	nop
c000d3df:	c9                   	leave  
c000d3e0:	c3                   	ret    

c000d3e1 <sendKeyboardToken(KeyboardToken)>:
c000d3e1:	55                   	push   ebp
c000d3e2:	89 e5                	mov    ebp,esp
c000d3e4:	83 ec 18             	sub    esp,0x18
c000d3e7:	e8 5b 43 00 00       	call   c0011747 <KeUserIOReceived()>
c000d3ec:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f2:	0f b7 c0             	movzx  eax,ax
c000d3f5:	83 f2 01             	xor    edx,0x1
c000d3f8:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3fe:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d403:	85 c0                	test   eax,eax
c000d405:	74 24                	je     c000d42b <sendKeyboardToken(KeyboardToken)+0x4a>
c000d407:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d40d:	83 ec 04             	sub    esp,0x4
c000d410:	68 40 b4 02 c0       	push   0xc002b440
c000d415:	83 ec 08             	sub    esp,0x8
c000d418:	89 e2                	mov    edx,esp
c000d41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41d:	89 02                	mov    DWORD PTR [edx],eax
c000d41f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d422:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d426:	ff d1                	call   ecx
c000d428:	83 c4 10             	add    esp,0x10
c000d42b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d42f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d432:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d437:	0f b6 d2             	movzx  edx,dl
c000d43a:	0f b6 c0             	movzx  eax,al
c000d43d:	39 c2                	cmp    edx,eax
c000d43f:	74 1c                	je     c000d45d <sendKeyboardToken(KeyboardToken)+0x7c>
c000d441:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d444:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d449:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d44e:	0f b6 c0             	movzx  eax,al
c000d451:	83 ec 0c             	sub    esp,0xc
c000d454:	50                   	push   eax
c000d455:	e8 08 b1 ff ff       	call   c0008562 <setTerminalScrollLock(bool)>
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d460:	0f b6 c0             	movzx  eax,al
c000d463:	85 c0                	test   eax,eax
c000d465:	0f 84 da 00 00 00    	je     c000d545 <sendKeyboardToken(KeyboardToken)+0x164>
c000d46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46e:	0f b7 c0             	movzx  eax,ax
c000d471:	3d 18 03 00 00       	cmp    eax,0x318
c000d476:	75 06                	jne    c000d47e <sendKeyboardToken(KeyboardToken)+0x9d>
c000d478:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d47e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d481:	0f b7 c0             	movzx  eax,ax
c000d484:	3d 19 03 00 00       	cmp    eax,0x319
c000d489:	75 06                	jne    c000d491 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d48b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d494:	0f b7 c0             	movzx  eax,ax
c000d497:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d49c:	75 06                	jne    c000d4a4 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d49e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d4a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a7:	0f b7 c0             	movzx  eax,ax
c000d4aa:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4af:	75 06                	jne    c000d4b7 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4b1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ba:	0f b7 c0             	movzx  eax,ax
c000d4bd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4c2:	75 06                	jne    c000d4ca <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4c4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cd:	0f b7 c0             	movzx  eax,ax
c000d4d0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4d5:	75 06                	jne    c000d4dd <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4d7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e0:	0f b7 c0             	movzx  eax,ax
c000d4e3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4e8:	75 06                	jne    c000d4f0 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4ea:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f3:	0f b7 c0             	movzx  eax,ax
c000d4f6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4fb:	75 06                	jne    c000d503 <sendKeyboardToken(KeyboardToken)+0x122>
c000d4fd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d506:	0f b7 c0             	movzx  eax,ax
c000d509:	3d 20 03 00 00       	cmp    eax,0x320
c000d50e:	75 06                	jne    c000d516 <sendKeyboardToken(KeyboardToken)+0x135>
c000d510:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d519:	0f b7 c0             	movzx  eax,ax
c000d51c:	3d 21 03 00 00       	cmp    eax,0x321
c000d521:	75 06                	jne    c000d529 <sendKeyboardToken(KeyboardToken)+0x148>
c000d523:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52c:	0f b7 c0             	movzx  eax,ax
c000d52f:	3d 22 03 00 00       	cmp    eax,0x322
c000d534:	0f 85 f1 00 00 00    	jne    c000d62b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d53a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d540:	e9 e6 00 00 00       	jmp    c000d62b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d548:	0f b7 c0             	movzx  eax,ax
c000d54b:	3d 18 03 00 00       	cmp    eax,0x318
c000d550:	75 0a                	jne    c000d55c <sendKeyboardToken(KeyboardToken)+0x17b>
c000d552:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d558:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55f:	0f b7 c0             	movzx  eax,ax
c000d562:	3d 19 03 00 00       	cmp    eax,0x319
c000d567:	75 0a                	jne    c000d573 <sendKeyboardToken(KeyboardToken)+0x192>
c000d569:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d56f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d576:	0f b7 c0             	movzx  eax,ax
c000d579:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d57e:	75 0a                	jne    c000d58a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d580:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d586:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58d:	0f b7 c0             	movzx  eax,ax
c000d590:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d595:	75 0a                	jne    c000d5a1 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d597:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d59d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a4:	0f b7 c0             	movzx  eax,ax
c000d5a7:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5ac:	75 0a                	jne    c000d5b8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5ae:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bb:	0f b7 c0             	movzx  eax,ax
c000d5be:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5c3:	75 0a                	jne    c000d5cf <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5c5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d2:	0f b7 c0             	movzx  eax,ax
c000d5d5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5da:	75 0a                	jne    c000d5e6 <sendKeyboardToken(KeyboardToken)+0x205>
c000d5dc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e9:	0f b7 c0             	movzx  eax,ax
c000d5ec:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5f1:	75 0a                	jne    c000d5fd <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5f3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d600:	0f b7 c0             	movzx  eax,ax
c000d603:	3d 20 03 00 00       	cmp    eax,0x320
c000d608:	75 0a                	jne    c000d614 <sendKeyboardToken(KeyboardToken)+0x233>
c000d60a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d610:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d617:	0f b7 c0             	movzx  eax,ax
c000d61a:	3d 21 03 00 00       	cmp    eax,0x321
c000d61f:	75 0a                	jne    c000d62b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d621:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d627:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d62e:	0f b7 c0             	movzx  eax,ax
c000d631:	3d 00 02 00 00       	cmp    eax,0x200
c000d636:	75 2f                	jne    c000d667 <sendKeyboardToken(KeyboardToken)+0x286>
c000d638:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d63d:	83 f0 01             	xor    eax,0x1
c000d640:	0f b6 c0             	movzx  eax,al
c000d643:	85 c0                	test   eax,eax
c000d645:	74 20                	je     c000d667 <sendKeyboardToken(KeyboardToken)+0x286>
c000d647:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d64c:	6a 01                	push   0x1
c000d64e:	6a 00                	push   0x0
c000d650:	68 2a d2 00 c0       	push   0xc000d22a
c000d655:	50                   	push   eax
c000d656:	e8 31 89 00 00       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c000d65b:	83 c4 10             	add    esp,0x10
c000d65e:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d665:	eb 3a                	jmp    c000d6a1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66a:	0f b7 c0             	movzx  eax,ax
c000d66d:	3d 01 02 00 00       	cmp    eax,0x201
c000d672:	75 2d                	jne    c000d6a1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d674:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d679:	83 f0 01             	xor    eax,0x1
c000d67c:	0f b6 c0             	movzx  eax,al
c000d67f:	85 c0                	test   eax,eax
c000d681:	74 1e                	je     c000d6a1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d683:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d688:	6a 01                	push   0x1
c000d68a:	6a 00                	push   0x0
c000d68c:	68 98 d2 00 c0       	push   0xc000d298
c000d691:	50                   	push   eax
c000d692:	e8 f5 88 00 00       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a4:	0f b7 c0             	movzx  eax,ax
c000d6a7:	3d 25 03 00 00       	cmp    eax,0x325
c000d6ac:	75 06                	jne    c000d6b4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6ae:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b7:	0f b7 c0             	movzx  eax,ax
c000d6ba:	3d 24 03 00 00       	cmp    eax,0x324
c000d6bf:	75 06                	jne    c000d6c7 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6c1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ca:	0f b7 c0             	movzx  eax,ax
c000d6cd:	3d 23 03 00 00       	cmp    eax,0x323
c000d6d2:	75 06                	jne    c000d6da <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6d4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6dd:	0f b7 c0             	movzx  eax,ax
c000d6e0:	3d 26 03 00 00       	cmp    eax,0x326
c000d6e5:	75 06                	jne    c000d6ed <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6e7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f0:	0f b7 c0             	movzx  eax,ax
c000d6f3:	3d 27 03 00 00       	cmp    eax,0x327
c000d6f8:	75 06                	jne    c000d700 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6fa:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d703:	0f b7 c0             	movzx  eax,ax
c000d706:	3d 22 03 00 00       	cmp    eax,0x322
c000d70b:	75 06                	jne    c000d713 <sendKeyboardToken(KeyboardToken)+0x332>
c000d70d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d713:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d717:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d71a:	83 f0 01             	xor    eax,0x1
c000d71d:	0f b6 c0             	movzx  eax,al
c000d720:	85 c0                	test   eax,eax
c000d722:	74 7c                	je     c000d7a0 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d724:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d729:	0f b6 c0             	movzx  eax,al
c000d72c:	85 c0                	test   eax,eax
c000d72e:	74 43                	je     c000d773 <sendKeyboardToken(KeyboardToken)+0x392>
c000d730:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d734:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d738:	85 c0                	test   eax,eax
c000d73a:	74 2b                	je     c000d767 <sendKeyboardToken(KeyboardToken)+0x386>
c000d73c:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d742:	89 d0                	mov    eax,edx
c000d744:	c1 e0 02             	shl    eax,0x2
c000d747:	01 d0                	add    eax,edx
c000d749:	01 c0                	add    eax,eax
c000d74b:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d753:	0f b7 c0             	movzx  eax,ax
c000d756:	8d 50 d0             	lea    edx,[eax-0x30]
c000d759:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d75e:	01 d0                	add    eax,edx
c000d760:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d765:	eb 71                	jmp    c000d7d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d767:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d771:	eb 65                	jmp    c000d7d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d773:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d778:	85 c0                	test   eax,eax
c000d77a:	74 18                	je     c000d794 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d77c:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d781:	0f b6 c0             	movzx  eax,al
c000d784:	83 ec 0c             	sub    esp,0xc
c000d787:	50                   	push   eax
c000d788:	e8 79 fb ff ff       	call   c000d306 <sendKeyToTerminal(unsigned char)>
c000d78d:	83 c4 10             	add    esp,0x10
c000d790:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d794:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d79e:	eb 38                	jmp    c000d7d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a3:	0f b7 c0             	movzx  eax,ax
c000d7a6:	3d 01 01 00 00       	cmp    eax,0x101
c000d7ab:	75 2b                	jne    c000d7d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7ad:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7b2:	85 c0                	test   eax,eax
c000d7b4:	74 18                	je     c000d7ce <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7b6:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7bb:	0f b6 c0             	movzx  eax,al
c000d7be:	83 ec 0c             	sub    esp,0xc
c000d7c1:	50                   	push   eax
c000d7c2:	e8 3f fb ff ff       	call   c000d306 <sendKeyToTerminal(unsigned char)>
c000d7c7:	83 c4 10             	add    esp,0x10
c000d7ca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7ce:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7d8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7db:	83 f0 01             	xor    eax,0x1
c000d7de:	0f b6 c0             	movzx  eax,al
c000d7e1:	85 c0                	test   eax,eax
c000d7e3:	74 5a                	je     c000d83f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7e5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7e8:	83 f0 01             	xor    eax,0x1
c000d7eb:	0f b6 c0             	movzx  eax,al
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	74 4d                	je     c000d83f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7f2:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7f7:	83 f0 01             	xor    eax,0x1
c000d7fa:	0f b6 c0             	movzx  eax,al
c000d7fd:	85 c0                	test   eax,eax
c000d7ff:	74 3e                	je     c000d83f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d804:	0f b7 c0             	movzx  eax,ax
c000d807:	83 f8 1f             	cmp    eax,0x1f
c000d80a:	76 0b                	jbe    c000d817 <sendKeyboardToken(KeyboardToken)+0x436>
c000d80c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80f:	0f b7 c0             	movzx  eax,ax
c000d812:	83 f8 7e             	cmp    eax,0x7e
c000d815:	76 16                	jbe    c000d82d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81a:	0f b7 c0             	movzx  eax,ax
c000d81d:	83 f8 0a             	cmp    eax,0xa
c000d820:	74 0b                	je     c000d82d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d825:	0f b7 c0             	movzx  eax,ax
c000d828:	83 f8 08             	cmp    eax,0x8
c000d82b:	75 12                	jne    c000d83f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d82d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d830:	0f b6 c0             	movzx  eax,al
c000d833:	83 ec 0c             	sub    esp,0xc
c000d836:	50                   	push   eax
c000d837:	e8 ca fa ff ff       	call   c000d306 <sendKeyToTerminal(unsigned char)>
c000d83c:	83 c4 10             	add    esp,0x10
c000d83f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d842:	83 f0 01             	xor    eax,0x1
c000d845:	0f b6 c0             	movzx  eax,al
c000d848:	85 c0                	test   eax,eax
c000d84a:	74 5d                	je     c000d8a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d84c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d84f:	83 f0 01             	xor    eax,0x1
c000d852:	0f b6 c0             	movzx  eax,al
c000d855:	85 c0                	test   eax,eax
c000d857:	74 50                	je     c000d8a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d859:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d85e:	0f b6 c0             	movzx  eax,al
c000d861:	85 c0                	test   eax,eax
c000d863:	74 44                	je     c000d8a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d868:	0f b7 c0             	movzx  eax,ax
c000d86b:	83 f8 3f             	cmp    eax,0x3f
c000d86e:	76 39                	jbe    c000d8a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d873:	0f b7 c0             	movzx  eax,ax
c000d876:	83 f8 7f             	cmp    eax,0x7f
c000d879:	77 2e                	ja     c000d8a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d87b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d87e:	88 c2                	mov    dl,al
c000d880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d883:	0f b7 c0             	movzx  eax,ax
c000d886:	83 f8 5f             	cmp    eax,0x5f
c000d889:	76 04                	jbe    c000d88f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d88b:	b0 20                	mov    al,0x20
c000d88d:	eb 02                	jmp    c000d891 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d88f:	b0 00                	mov    al,0x0
c000d891:	89 d1                	mov    ecx,edx
c000d893:	29 c1                	sub    ecx,eax
c000d895:	89 c8                	mov    eax,ecx
c000d897:	83 e8 40             	sub    eax,0x40
c000d89a:	0f b6 c0             	movzx  eax,al
c000d89d:	83 ec 0c             	sub    esp,0xc
c000d8a0:	50                   	push   eax
c000d8a1:	e8 60 fa ff ff       	call   c000d306 <sendKeyToTerminal(unsigned char)>
c000d8a6:	83 c4 10             	add    esp,0x10
c000d8a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8ac:	0f b7 c0             	movzx  eax,ax
c000d8af:	3d 00 03 00 00       	cmp    eax,0x300
c000d8b4:	75 12                	jne    c000d8c8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8b9:	83 f0 01             	xor    eax,0x1
c000d8bc:	0f b6 c0             	movzx  eax,al
c000d8bf:	85 c0                	test   eax,eax
c000d8c1:	74 05                	je     c000d8c8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8c3:	e8 9b ac ff ff       	call   c0008563 <doTerminalCycle()>
c000d8c8:	90                   	nop
c000d8c9:	c9                   	leave  
c000d8ca:	c3                   	ret    

c000d8cb <clearInternalKeybuffer(VgaText*)>:
c000d8cb:	55                   	push   ebp
c000d8cc:	89 e5                	mov    ebp,esp
c000d8ce:	83 ec 08             	sub    esp,0x8
c000d8d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8d4:	05 02 01 00 00       	add    eax,0x102
c000d8d9:	83 ec 0c             	sub    esp,0xc
c000d8dc:	50                   	push   eax
c000d8dd:	e8 8e 2c ff ff       	call   c0000570 <strlen>
c000d8e2:	83 c4 10             	add    esp,0x10
c000d8e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8e8:	81 c2 02 01 00 00    	add    edx,0x102
c000d8ee:	83 ec 04             	sub    esp,0x4
c000d8f1:	50                   	push   eax
c000d8f2:	6a 00                	push   0x0
c000d8f4:	52                   	push   edx
c000d8f5:	e8 f6 2b ff ff       	call   c00004f0 <memset>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	90                   	nop
c000d8fe:	c9                   	leave  
c000d8ff:	c3                   	ret    

c000d900 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d900:	55                   	push   ebp
c000d901:	89 e5                	mov    ebp,esp
c000d903:	83 ec 18             	sub    esp,0x18
c000d906:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d90b:	85 c0                	test   eax,eax
c000d90d:	74 2a                	je     c000d939 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d90f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d915:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d91b:	83 ec 04             	sub    esp,0x4
c000d91e:	68 40 b4 02 c0       	push   0xc002b440
c000d923:	83 ec 08             	sub    esp,0x8
c000d926:	89 e2                	mov    edx,esp
c000d928:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d92b:	89 02                	mov    DWORD PTR [edx],eax
c000d92d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d930:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d934:	ff d1                	call   ecx
c000d936:	83 c4 10             	add    esp,0x10
c000d939:	fb                   	sti    
c000d93a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d941:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d945:	0f 84 0d 01 00 00    	je     c000da58 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d94b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d94e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d954:	0f be c0             	movsx  eax,al
c000d957:	85 c0                	test   eax,eax
c000d959:	75 2c                	jne    c000d987 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d95b:	fa                   	cli    
c000d95c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d961:	83 c0 01             	add    eax,0x1
c000d964:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d969:	e8 6e 88 00 00       	call   c00161dc <schedule()>
c000d96e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d973:	83 e8 01             	sub    eax,0x1
c000d976:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d97b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d980:	85 c0                	test   eax,eax
c000d982:	75 c7                	jne    c000d94b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d984:	fb                   	sti    
c000d985:	eb c4                	jmp    c000d94b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d987:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d98a:	8d 50 01             	lea    edx,[eax+0x1]
c000d98d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d990:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d993:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d999:	88 10                	mov    BYTE PTR [eax],dl
c000d99b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d99e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d9a4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d9a7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9ab:	83 f8 03             	cmp    eax,0x3
c000d9ae:	75 1e                	jne    c000d9ce <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ba:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9c0:	83 ec 08             	sub    esp,0x8
c000d9c3:	6a 02                	push   0x2
c000d9c5:	50                   	push   eax
c000d9c6:	e8 cf 41 00 00       	call   c0011b9a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9d2:	83 f8 1c             	cmp    eax,0x1c
c000d9d5:	75 1e                	jne    c000d9f5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9e1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9e7:	83 ec 08             	sub    esp,0x8
c000d9ea:	6a 09                	push   0x9
c000d9ec:	50                   	push   eax
c000d9ed:	e8 a8 41 00 00       	call   c0011b9a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9f2:	83 c4 10             	add    esp,0x10
c000d9f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9f8:	05 02 01 00 00       	add    eax,0x102
c000d9fd:	83 ec 0c             	sub    esp,0xc
c000da00:	50                   	push   eax
c000da01:	e8 6a 2b ff ff       	call   c0000570 <strlen>
c000da06:	83 c4 10             	add    esp,0x10
c000da09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da0c:	81 c2 02 01 00 00    	add    edx,0x102
c000da12:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da15:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da18:	81 c2 02 01 00 00    	add    edx,0x102
c000da1e:	83 ec 04             	sub    esp,0x4
c000da21:	50                   	push   eax
c000da22:	51                   	push   ecx
c000da23:	52                   	push   edx
c000da24:	e8 a7 29 ff ff       	call   c00003d0 <memmove>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da30:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da34:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da38:	83 f8 0a             	cmp    eax,0xa
c000da3b:	74 16                	je     c000da53 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da3d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da41:	83 f8 03             	cmp    eax,0x3
c000da44:	74 0d                	je     c000da53 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da46:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da4a:	83 f8 1c             	cmp    eax,0x1c
c000da4d:	0f 85 ee fe ff ff    	jne    c000d941 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da56:	eb 03                	jmp    c000da5b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da5b:	c9                   	leave  
c000da5c:	c3                   	ret    
c000da5d:	90                   	nop

c000da5e <Keyboard::Keyboard(char const*)>:
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da65:	83 ec 08             	sub    esp,0x8
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	50                   	push   eax
c000da6d:	e8 4c f1 ff ff       	call   c000cbbe <Device::Device(char const*)>
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	ba 1c 1e 02 c0       	mov    edx,0xc0021e1c
c000da7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7e:	89 10                	mov    DWORD PTR [eax],edx
c000da80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da84:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da8e:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da95:	90                   	nop
c000da96:	83 c4 0c             	add    esp,0xc
c000da99:	c3                   	ret    

c000da9a <Keyboard::~Keyboard()>:
c000da9a:	83 ec 0c             	sub    esp,0xc
c000da9d:	ba 1c 1e 02 c0       	mov    edx,0xc0021e1c
c000daa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa6:	89 10                	mov    DWORD PTR [eax],edx
c000daa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	50                   	push   eax
c000dab0:	e8 73 ee ff ff       	call   c000c928 <Device::~Device()>
c000dab5:	83 c4 10             	add    esp,0x10
c000dab8:	90                   	nop
c000dab9:	83 c4 0c             	add    esp,0xc
c000dabc:	c3                   	ret    
c000dabd:	90                   	nop

c000dabe <Keyboard::~Keyboard()>:
c000dabe:	83 ec 0c             	sub    esp,0xc
c000dac1:	83 ec 0c             	sub    esp,0xc
c000dac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac8:	e8 cd ff ff ff       	call   c000da9a <Keyboard::~Keyboard()>
c000dacd:	83 c4 10             	add    esp,0x10
c000dad0:	83 ec 08             	sub    esp,0x8
c000dad3:	68 5c 01 00 00       	push   0x15c
c000dad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dadc:	e8 97 cd ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	83 c4 0c             	add    esp,0xc
c000dae7:	c3                   	ret    

c000dae8 <LogicalDisk::close(int, int, void*)>:
c000dae8:	83 c8 ff             	or     eax,0xffffffff
c000daeb:	c3                   	ret    

c000daec <LogicalDisk::~LogicalDisk()>:
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	ba 94 1e 02 c0       	mov    edx,0xc0021e94
c000daf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf8:	89 10                	mov    DWORD PTR [eax],edx
c000dafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafe:	83 ec 0c             	sub    esp,0xc
c000db01:	50                   	push   eax
c000db02:	e8 21 ee ff ff       	call   c000c928 <Device::~Device()>
c000db07:	83 c4 10             	add    esp,0x10
c000db0a:	90                   	nop
c000db0b:	83 c4 0c             	add    esp,0xc
c000db0e:	c3                   	ret    
c000db0f:	90                   	nop

c000db10 <LogicalDisk::~LogicalDisk()>:
c000db10:	83 ec 0c             	sub    esp,0xc
c000db13:	83 ec 0c             	sub    esp,0xc
c000db16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1a:	e8 cd ff ff ff       	call   c000daec <LogicalDisk::~LogicalDisk()>
c000db1f:	83 c4 10             	add    esp,0x10
c000db22:	83 ec 08             	sub    esp,0x8
c000db25:	68 78 01 00 00       	push   0x178
c000db2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db2e:	e8 45 cd ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000db33:	83 c4 10             	add    esp,0x10
c000db36:	83 c4 0c             	add    esp,0xc
c000db39:	c3                   	ret    

c000db3a <LogicalDisk::open(int, int, void*)>:
c000db3a:	83 ec 18             	sub    esp,0x18
c000db3d:	68 48 1e 02 c0       	push   0xc0021e48
c000db42:	e8 b0 3b 00 00       	call   c00116f7 <KePanic(char const*)>
c000db47:	83 c8 ff             	or     eax,0xffffffff
c000db4a:	83 c4 1c             	add    esp,0x1c
c000db4d:	c3                   	ret    

c000db4e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db4e:	53                   	push   ebx
c000db4f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db5b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db61:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db67:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db6d:	77 10                	ja     c000db7f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db6f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db75:	89 d3                	mov    ebx,edx
c000db77:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db7d:	72 05                	jb     c000db84 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db7f:	83 c8 ff             	or     eax,0xffffffff
c000db82:	89 c2                	mov    edx,eax
c000db84:	5b                   	pop    ebx
c000db85:	c3                   	ret    

c000db86 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db86:	56                   	push   esi
c000db87:	83 c8 ff             	or     eax,0xffffffff
c000db8a:	53                   	push   ebx
c000db8b:	89 c2                	mov    edx,eax
c000db8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db91:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db99:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db9f:	77 27                	ja     c000dbc8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dba1:	89 d8                	mov    eax,ebx
c000dba3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dba9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dbaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbb4:	89 c2                	mov    edx,eax
c000dbb6:	73 10                	jae    c000dbc8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbb8:	89 c8                	mov    eax,ecx
c000dbba:	89 da                	mov    edx,ebx
c000dbbc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbc2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbc8:	5b                   	pop    ebx
c000dbc9:	5e                   	pop    esi
c000dbca:	c3                   	ret    
c000dbcb:	90                   	nop

c000dbcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbcc:	83 ec 1c             	sub    esp,0x1c
c000dbcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbe3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf2:	83 ec 08             	sub    esp,0x8
c000dbf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbf9:	50                   	push   eax
c000dbfa:	e8 bf ef ff ff       	call   c000cbbe <Device::Device(char const*)>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	ba 94 1e 02 c0       	mov    edx,0xc0021e94
c000dc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc0b:	89 10                	mov    DWORD PTR [eax],edx
c000dc0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc11:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc32:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc48:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc4e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc5f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc65:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc73:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc87:	90                   	nop
c000dc88:	83 c4 1c             	add    esp,0x1c
c000dc8b:	c3                   	ret    

c000dc8c <LogicalDisk::assignDriveLetter()>:
c000dc8c:	55                   	push   ebp
c000dc8d:	57                   	push   edi
c000dc8e:	56                   	push   esi
c000dc8f:	53                   	push   ebx
c000dc90:	83 ec 14             	sub    esp,0x14
c000dc93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc97:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc9d:	b0 41                	mov    al,0x41
c000dc9f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dca5:	84 d2                	test   dl,dl
c000dca7:	75 02                	jne    c000dcab <LogicalDisk::assignDriveLetter()+0x1f>
c000dca9:	b0 43                	mov    al,0x43
c000dcab:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dcb1:	0f b6 ca             	movzx  ecx,dl
c000dcb4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dcb8:	0f be e8             	movsx  ebp,al
c000dcbb:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dcc1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dcc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcc9:	3c 43                	cmp    al,0x43
c000dccb:	75 10                	jne    c000dcdd <LogicalDisk::assignDriveLetter()+0x51>
c000dccd:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dcd4:	75 5a                	jne    c000dd30 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcd6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dcdb:	75 53                	jne    c000dd30 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcdd:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dce0:	ba 01 00 00 00       	mov    edx,0x1
c000dce5:	89 34 24             	mov    DWORD PTR [esp],esi
c000dce8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dceb:	d3 e2                	shl    edx,cl
c000dced:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcf1:	89 d7                	mov    edi,edx
c000dcf3:	89 d6                	mov    esi,edx
c000dcf5:	c1 ff 1f             	sar    edi,0x1f
c000dcf8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcfc:	21 f9                	and    ecx,edi
c000dcfe:	09 d1                	or     ecx,edx
c000dd00:	75 2e                	jne    c000dd30 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd02:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dd0a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd10:	09 f2                	or     edx,esi
c000dd12:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd15:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd1b:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd26:	09 fa                	or     edx,edi
c000dd28:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd2e:	eb 0d                	jmp    c000dd3d <LogicalDisk::assignDriveLetter()+0xb1>
c000dd30:	8d 50 01             	lea    edx,[eax+0x1]
c000dd33:	45                   	inc    ebp
c000dd34:	88 d0                	mov    al,dl
c000dd36:	80 fa 5b             	cmp    dl,0x5b
c000dd39:	75 8e                	jne    c000dcc9 <LogicalDisk::assignDriveLetter()+0x3d>
c000dd3b:	31 c0                	xor    eax,eax
c000dd3d:	83 c4 14             	add    esp,0x14
c000dd40:	5b                   	pop    ebx
c000dd41:	5e                   	pop    esi
c000dd42:	5f                   	pop    edi
c000dd43:	5d                   	pop    ebp
c000dd44:	c3                   	ret    
c000dd45:	90                   	nop

c000dd46 <LogicalDisk::mount()>:
c000dd46:	56                   	push   esi
c000dd47:	53                   	push   ebx
c000dd48:	53                   	push   ebx
c000dd49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd4d:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd53:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd5d:	85 db                	test   ebx,ebx
c000dd5f:	74 27                	je     c000dd88 <LogicalDisk::mount()+0x42>
c000dd61:	51                   	push   ecx
c000dd62:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd69:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd6b:	83 e8 41             	sub    eax,0x41
c000dd6e:	50                   	push   eax
c000dd6f:	56                   	push   esi
c000dd70:	53                   	push   ebx
c000dd71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd74:	83 c4 10             	add    esp,0x10
c000dd77:	84 c0                	test   al,al
c000dd79:	74 08                	je     c000dd83 <LogicalDisk::mount()+0x3d>
c000dd7b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd81:	eb 07                	jmp    c000dd8a <LogicalDisk::mount()+0x44>
c000dd83:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd86:	eb d5                	jmp    c000dd5d <LogicalDisk::mount()+0x17>
c000dd88:	31 c0                	xor    eax,eax
c000dd8a:	5a                   	pop    edx
c000dd8b:	5b                   	pop    ebx
c000dd8c:	5e                   	pop    esi
c000dd8d:	c3                   	ret    

c000dd8e <LogicalDisk::unmount()>:
c000dd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd92:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd9c:	c3                   	ret    
c000dd9d:	90                   	nop

c000dd9e <LogicalDisk::eject()>:
c000dd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dda2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dda8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ddb1:	90                   	nop

c000ddb2 <LogicalDisk::unassignDriveLetter()>:
c000ddb2:	57                   	push   edi
c000ddb3:	56                   	push   esi
c000ddb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddb8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ddbf:	85 c9                	test   ecx,ecx
c000ddc1:	75 0f                	jne    c000ddd2 <LogicalDisk::unassignDriveLetter()+0x20>
c000ddc3:	c7 44 24 0c 6c 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e6c
c000ddcb:	5e                   	pop    esi
c000ddcc:	5f                   	pop    edi
c000ddcd:	e9 25 39 00 00       	jmp    c00116f7 <KePanic(char const*)>
c000ddd2:	83 e9 41             	sub    ecx,0x41
c000ddd5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dddc:	b8 01 00 00 00       	mov    eax,0x1
c000dde1:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddec:	d3 e0                	shl    eax,cl
c000ddee:	89 c7                	mov    edi,eax
c000ddf0:	f7 d0                	not    eax
c000ddf2:	c1 ff 1f             	sar    edi,0x1f
c000ddf5:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddfb:	89 fe                	mov    esi,edi
c000ddfd:	f7 d6                	not    esi
c000ddff:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000de05:	5e                   	pop    esi
c000de06:	5f                   	pop    edi
c000de07:	c3                   	ret    

c000de08 <LogicalDisk::read(unsigned long long, int, void*)>:
c000de08:	57                   	push   edi
c000de09:	56                   	push   esi
c000de0a:	53                   	push   ebx
c000de0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de13:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de1b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de21:	77 41                	ja     c000de64 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de23:	99                   	cdq    
c000de24:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de2a:	01 c8                	add    eax,ecx
c000de2c:	11 da                	adc    edx,ebx
c000de2e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de34:	19 d7                	sbb    edi,edx
c000de36:	72 33                	jb     c000de6b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de38:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de3e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de44:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de48:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de4c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de52:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de5c:	5b                   	pop    ebx
c000de5d:	5e                   	pop    esi
c000de5e:	5f                   	pop    edi
c000de5f:	e9 c6 0a 00 00       	jmp    c000e92a <VCache::read(unsigned long long, int, void*)>
c000de64:	b8 05 00 00 00       	mov    eax,0x5
c000de69:	eb 05                	jmp    c000de70 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de6b:	b8 07 00 00 00       	mov    eax,0x7
c000de70:	5b                   	pop    ebx
c000de71:	5e                   	pop    esi
c000de72:	5f                   	pop    edi
c000de73:	c3                   	ret    

c000de74 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de74:	57                   	push   edi
c000de75:	56                   	push   esi
c000de76:	53                   	push   ebx
c000de77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de7f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de87:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de8d:	77 41                	ja     c000ded0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de8f:	99                   	cdq    
c000de90:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de96:	01 c8                	add    eax,ecx
c000de98:	11 da                	adc    edx,ebx
c000de9a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dea0:	19 d7                	sbb    edi,edx
c000dea2:	72 33                	jb     c000ded7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dea4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000deaa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000deb0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deb4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000deb8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000debe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dec4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec8:	5b                   	pop    ebx
c000dec9:	5e                   	pop    esi
c000deca:	5f                   	pop    edi
c000decb:	e9 6c 09 00 00       	jmp    c000e83c <VCache::write(unsigned long long, int, void*)>
c000ded0:	b8 05 00 00 00       	mov    eax,0x5
c000ded5:	eb 05                	jmp    c000dedc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ded7:	b8 07 00 00 00       	mov    eax,0x7
c000dedc:	5b                   	pop    ebx
c000dedd:	5e                   	pop    esi
c000dede:	5f                   	pop    edi
c000dedf:	c3                   	ret    

c000dee0 <Mouse::Mouse(char const*)>:
c000dee0:	83 ec 0c             	sub    esp,0xc
c000dee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee7:	83 ec 08             	sub    esp,0x8
c000deea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deee:	50                   	push   eax
c000deef:	e8 ca ec ff ff       	call   c000cbbe <Device::Device(char const*)>
c000def4:	83 c4 10             	add    esp,0x10
c000def7:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c000defc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df00:	89 10                	mov    DWORD PTR [eax],edx
c000df02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df06:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df10:	90                   	nop
c000df11:	83 c4 0c             	add    esp,0xc
c000df14:	c3                   	ret    
c000df15:	90                   	nop
c000df16:	66 90                	xchg   ax,ax

c000df18 <Mouse::~Mouse()>:
c000df18:	83 ec 0c             	sub    esp,0xc
c000df1b:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c000df20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df24:	89 10                	mov    DWORD PTR [eax],edx
c000df26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2a:	83 ec 0c             	sub    esp,0xc
c000df2d:	50                   	push   eax
c000df2e:	e8 f5 e9 ff ff       	call   c000c928 <Device::~Device()>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	90                   	nop
c000df37:	83 c4 0c             	add    esp,0xc
c000df3a:	c3                   	ret    
c000df3b:	90                   	nop

c000df3c <Mouse::~Mouse()>:
c000df3c:	83 ec 0c             	sub    esp,0xc
c000df3f:	83 ec 0c             	sub    esp,0xc
c000df42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df46:	e8 cd ff ff ff       	call   c000df18 <Mouse::~Mouse()>
c000df4b:	83 c4 10             	add    esp,0x10
c000df4e:	83 ec 08             	sub    esp,0x8
c000df51:	68 58 01 00 00       	push   0x158
c000df56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5a:	e8 19 c9 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	83 c4 0c             	add    esp,0xc
c000df65:	c3                   	ret    

c000df66 <NIC::getMAC()>:
c000df66:	31 c0                	xor    eax,eax
c000df68:	31 d2                	xor    edx,edx
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <NIC::write(int, unsigned char*, int*)>:
c000df6c:	b8 01 00 00 00       	mov    eax,0x1
c000df71:	c3                   	ret    

c000df72 <NIC::NIC(char const*)>:
c000df72:	83 ec 0c             	sub    esp,0xc
c000df75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df79:	83 ec 08             	sub    esp,0x8
c000df7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df80:	50                   	push   eax
c000df81:	e8 38 ec ff ff       	call   c000cbbe <Device::Device(char const*)>
c000df86:	83 c4 10             	add    esp,0x10
c000df89:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c000df8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df92:	89 10                	mov    DWORD PTR [eax],edx
c000df94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df98:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dfa2:	90                   	nop
c000dfa3:	83 c4 0c             	add    esp,0xc
c000dfa6:	c3                   	ret    
c000dfa7:	90                   	nop

c000dfa8 <NIC::~NIC()>:
c000dfa8:	83 ec 0c             	sub    esp,0xc
c000dfab:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c000dfb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb4:	89 10                	mov    DWORD PTR [eax],edx
c000dfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfba:	83 ec 0c             	sub    esp,0xc
c000dfbd:	50                   	push   eax
c000dfbe:	e8 65 e9 ff ff       	call   c000c928 <Device::~Device()>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	90                   	nop
c000dfc7:	83 c4 0c             	add    esp,0xc
c000dfca:	c3                   	ret    
c000dfcb:	90                   	nop

c000dfcc <NIC::~NIC()>:
c000dfcc:	83 ec 0c             	sub    esp,0xc
c000dfcf:	83 ec 0c             	sub    esp,0xc
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 cd ff ff ff       	call   c000dfa8 <NIC::~NIC()>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	83 ec 08             	sub    esp,0x8
c000dfe1:	68 58 01 00 00       	push   0x158
c000dfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfea:	e8 89 c8 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	83 c4 0c             	add    esp,0xc
c000dff5:	c3                   	ret    

c000dff6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dff6:	55                   	push   ebp
c000dff7:	57                   	push   edi
c000dff8:	56                   	push   esi
c000dff9:	53                   	push   ebx
c000dffa:	81 ec 28 01 00 00    	sub    esp,0x128
c000e000:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000e007:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000e00e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000e015:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000e01c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e020:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e024:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e02b:	e8 8a ec ff ff       	call   c000ccba <Device::getName()>
c000e030:	5a                   	pop    edx
c000e031:	59                   	pop    ecx
c000e032:	50                   	push   eax
c000e033:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e037:	55                   	push   ebp
c000e038:	e8 03 26 ff ff       	call   c0000640 <strcpy>
c000e03d:	5b                   	pop    ebx
c000e03e:	58                   	pop    eax
c000e03f:	68 18 1f 02 c0       	push   0xc0021f18
c000e044:	55                   	push   ebp
c000e045:	e8 f6 27 ff ff       	call   c0000840 <strcat>
c000e04a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e051:	e8 c0 9a ff ff       	call   c0007b16 <malloc>
c000e056:	83 c4 0c             	add    esp,0xc
c000e059:	89 c3                	mov    ebx,eax
c000e05b:	57                   	push   edi
c000e05c:	56                   	push   esi
c000e05d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e061:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e065:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e06c:	55                   	push   ebp
c000e06d:	50                   	push   eax
c000e06e:	e8 59 fb ff ff       	call   c000dbcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e073:	83 c4 14             	add    esp,0x14
c000e076:	53                   	push   ebx
c000e077:	e8 10 fc ff ff       	call   c000dc8c <LogicalDisk::assignDriveLetter()>
c000e07c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e07f:	e8 c2 fc ff ff       	call   c000dd46 <LogicalDisk::mount()>
c000e084:	58                   	pop    eax
c000e085:	5a                   	pop    edx
c000e086:	53                   	push   ebx
c000e087:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e08e:	e8 93 e9 ff ff       	call   c000ca26 <Device::addChild(Device*)>
c000e093:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e099:	5b                   	pop    ebx
c000e09a:	5e                   	pop    esi
c000e09b:	5f                   	pop    edi
c000e09c:	5d                   	pop    ebp
c000e09d:	c3                   	ret    

c000e09e <createPartitionsForDisk(PhysicalDisk*)>:
c000e09e:	55                   	push   ebp
c000e09f:	57                   	push   edi
c000e0a0:	56                   	push   esi
c000e0a1:	53                   	push   ebx
c000e0a2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0a8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0b5:	3d 00 02 00 00       	cmp    eax,0x200
c000e0ba:	74 27                	je     c000e0e3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0bc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0c2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0c8:	83 ec 10             	sub    esp,0x10
c000e0cb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0cf:	99                   	cdq    
c000e0d0:	c1 e6 0a             	shl    esi,0xa
c000e0d3:	52                   	push   edx
c000e0d4:	89 fd                	mov    ebp,edi
c000e0d6:	50                   	push   eax
c000e0d7:	55                   	push   ebp
c000e0d8:	56                   	push   esi
c000e0d9:	e8 72 17 01 00       	call   c001f850 <__udivdi3>
c000e0de:	e9 b9 00 00 00       	jmp    c000e19c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0e3:	83 ec 0c             	sub    esp,0xc
c000e0e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0e8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0ec:	56                   	push   esi
c000e0ed:	6a 01                	push   0x1
c000e0ef:	6a 00                	push   0x0
c000e0f1:	6a 00                	push   0x0
c000e0f3:	53                   	push   ebx
c000e0f4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0f7:	83 c4 20             	add    esp,0x20
c000e0fa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e102:	75 0a                	jne    c000e10e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e104:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e10c:	74 2c                	je     c000e13a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e10e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e114:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e11a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e120:	83 ec 10             	sub    esp,0x10
c000e123:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e127:	89 f7                	mov    edi,esi
c000e129:	c1 e0 0a             	shl    eax,0xa
c000e12c:	c1 ff 1f             	sar    edi,0x1f
c000e12f:	57                   	push   edi
c000e130:	56                   	push   esi
c000e131:	52                   	push   edx
c000e132:	50                   	push   eax
c000e133:	e8 18 17 01 00       	call   c001f850 <__udivdi3>
c000e138:	eb 62                	jmp    c000e19c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e13a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e141:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e148:	89 cf                	mov    edi,ecx
c000e14a:	83 e2 7f             	and    edx,0x7f
c000e14d:	83 e7 7f             	and    edi,0x7f
c000e150:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e157:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e15a:	83 e0 7f             	and    eax,0x7f
c000e15d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e160:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e167:	83 e0 7f             	and    eax,0x7f
c000e16a:	01 d0                	add    eax,edx
c000e16c:	89 c5                	mov    ebp,eax
c000e16e:	84 c0                	test   al,al
c000e170:	74 41                	je     c000e1b3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e172:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e178:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e17e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e184:	83 ec 10             	sub    esp,0x10
c000e187:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e18b:	89 f7                	mov    edi,esi
c000e18d:	c1 e0 0a             	shl    eax,0xa
c000e190:	c1 ff 1f             	sar    edi,0x1f
c000e193:	57                   	push   edi
c000e194:	56                   	push   esi
c000e195:	52                   	push   edx
c000e196:	50                   	push   eax
c000e197:	e8 b4 16 01 00       	call   c001f850 <__udivdi3>
c000e19c:	83 c4 14             	add    esp,0x14
c000e19f:	52                   	push   edx
c000e1a0:	50                   	push   eax
c000e1a1:	6a 00                	push   0x0
c000e1a3:	6a 00                	push   0x0
c000e1a5:	53                   	push   ebx
c000e1a6:	e8 4b fe ff ff       	call   c000dff6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1ab:	83 c4 20             	add    esp,0x20
c000e1ae:	e9 73 01 00 00       	jmp    c000e326 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1b3:	89 f0                	mov    eax,esi
c000e1b5:	31 c9                	xor    ecx,ecx
c000e1b7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1be:	75 02                	jne    c000e1c2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1c0:	89 cd                	mov    ebp,ecx
c000e1c2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1c9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e1d0:	c1 e2 08             	shl    edx,0x8
c000e1d3:	c1 e6 10             	shl    esi,0x10
c000e1d6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1de:	09 f2                	or     edx,esi
c000e1e0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1e8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e1ef:	83 c0 10             	add    eax,0x10
c000e1f2:	09 f2                	or     edx,esi
c000e1f4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1fb:	c1 e6 18             	shl    esi,0x18
c000e1fe:	09 f2                	or     edx,esi
c000e200:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e207:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e20b:	c1 e6 10             	shl    esi,0x10
c000e20e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e215:	c1 e2 08             	shl    edx,0x8
c000e218:	09 f2                	or     edx,esi
c000e21a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e221:	09 f2                	or     edx,esi
c000e223:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e22a:	c1 e6 18             	shl    esi,0x18
c000e22d:	09 f2                	or     edx,esi
c000e22f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e233:	41                   	inc    ecx
c000e234:	83 f9 04             	cmp    ecx,0x4
c000e237:	0f 85 7a ff ff ff    	jne    c000e1b7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e241:	83 f0 01             	xor    eax,0x1
c000e244:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e248:	75 4f                	jne    c000e299 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e24a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e24e:	83 f0 01             	xor    eax,0x1
c000e251:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e255:	75 42                	jne    c000e299 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e257:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e25f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e267:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e26d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e273:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e279:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e27d:	89 f7                	mov    edi,esi
c000e27f:	c1 e0 0a             	shl    eax,0xa
c000e282:	c1 ff 1f             	sar    edi,0x1f
c000e285:	57                   	push   edi
c000e286:	56                   	push   esi
c000e287:	52                   	push   edx
c000e288:	50                   	push   eax
c000e289:	e8 c2 15 01 00       	call   c001f850 <__udivdi3>
c000e28e:	83 c4 10             	add    esp,0x10
c000e291:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e295:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e299:	89 e8                	mov    eax,ebp
c000e29b:	0f b6 e8             	movzx  ebp,al
c000e29e:	85 ed                	test   ebp,ebp
c000e2a0:	74 50                	je     c000e2f2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e2a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2be:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2ce:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2d2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2d6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2da:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2e2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2e6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2ea:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2ee:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2f2:	31 ed                	xor    ebp,ebp
c000e2f4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2f8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2fc:	89 f8                	mov    eax,edi
c000e2fe:	09 f0                	or     eax,esi
c000e300:	74 1e                	je     c000e320 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e302:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e306:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e30a:	89 d1                	mov    ecx,edx
c000e30c:	09 c1                	or     ecx,eax
c000e30e:	74 10                	je     c000e320 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e310:	83 ec 0c             	sub    esp,0xc
c000e313:	57                   	push   edi
c000e314:	56                   	push   esi
c000e315:	52                   	push   edx
c000e316:	50                   	push   eax
c000e317:	53                   	push   ebx
c000e318:	e8 d9 fc ff ff       	call   c000dff6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e31d:	83 c4 20             	add    esp,0x20
c000e320:	45                   	inc    ebp
c000e321:	83 fd 04             	cmp    ebp,0x4
c000e324:	75 ce                	jne    c000e2f4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e326:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e32c:	5b                   	pop    ebx
c000e32d:	5e                   	pop    esi
c000e32e:	5f                   	pop    edi
c000e32f:	5d                   	pop    ebp
c000e330:	c3                   	ret    
c000e331:	66 90                	xchg   ax,ax
c000e333:	90                   	nop

c000e334 <Serial::Serial(char const*)>:
c000e334:	83 ec 0c             	sub    esp,0xc
c000e337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33b:	83 ec 08             	sub    esp,0x8
c000e33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e342:	50                   	push   eax
c000e343:	e8 76 e8 ff ff       	call   c000cbbe <Device::Device(char const*)>
c000e348:	83 c4 10             	add    esp,0x10
c000e34b:	ba 2c 1f 02 c0       	mov    edx,0xc0021f2c
c000e350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e354:	89 10                	mov    DWORD PTR [eax],edx
c000e356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e364:	90                   	nop
c000e365:	83 c4 0c             	add    esp,0xc
c000e368:	c3                   	ret    
c000e369:	90                   	nop
c000e36a:	66 90                	xchg   ax,ax

c000e36c <Serial::~Serial()>:
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	ba 2c 1f 02 c0       	mov    edx,0xc0021f2c
c000e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e378:	89 10                	mov    DWORD PTR [eax],edx
c000e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37e:	83 ec 0c             	sub    esp,0xc
c000e381:	50                   	push   eax
c000e382:	e8 a1 e5 ff ff       	call   c000c928 <Device::~Device()>
c000e387:	83 c4 10             	add    esp,0x10
c000e38a:	90                   	nop
c000e38b:	83 c4 0c             	add    esp,0xc
c000e38e:	c3                   	ret    
c000e38f:	90                   	nop

c000e390 <Serial::~Serial()>:
c000e390:	83 ec 0c             	sub    esp,0xc
c000e393:	83 ec 0c             	sub    esp,0xc
c000e396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39a:	e8 cd ff ff ff       	call   c000e36c <Serial::~Serial()>
c000e39f:	83 c4 10             	add    esp,0x10
c000e3a2:	83 ec 08             	sub    esp,0x8
c000e3a5:	68 58 01 00 00       	push   0x158
c000e3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ae:	e8 c5 c4 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000e3b3:	83 c4 10             	add    esp,0x10
c000e3b6:	83 c4 0c             	add    esp,0xc
c000e3b9:	c3                   	ret    
c000e3ba:	66 90                	xchg   ax,ax

c000e3bc <Timer::Timer(char const*)>:
c000e3bc:	83 ec 0c             	sub    esp,0xc
c000e3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c3:	83 ec 08             	sub    esp,0x8
c000e3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ca:	50                   	push   eax
c000e3cb:	e8 ee e7 ff ff       	call   c000cbbe <Device::Device(char const*)>
c000e3d0:	83 c4 10             	add    esp,0x10
c000e3d3:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c000e3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3dc:	89 10                	mov    DWORD PTR [eax],edx
c000e3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3ec:	90                   	nop
c000e3ed:	83 c4 0c             	add    esp,0xc
c000e3f0:	c3                   	ret    
c000e3f1:	90                   	nop
c000e3f2:	66 90                	xchg   ax,ax

c000e3f4 <Timer::~Timer()>:
c000e3f4:	83 ec 0c             	sub    esp,0xc
c000e3f7:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c000e3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e400:	89 10                	mov    DWORD PTR [eax],edx
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	83 ec 0c             	sub    esp,0xc
c000e409:	50                   	push   eax
c000e40a:	e8 19 e5 ff ff       	call   c000c928 <Device::~Device()>
c000e40f:	83 c4 10             	add    esp,0x10
c000e412:	90                   	nop
c000e413:	83 c4 0c             	add    esp,0xc
c000e416:	c3                   	ret    
c000e417:	90                   	nop

c000e418 <Timer::~Timer()>:
c000e418:	83 ec 0c             	sub    esp,0xc
c000e41b:	83 ec 0c             	sub    esp,0xc
c000e41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e422:	e8 cd ff ff ff       	call   c000e3f4 <Timer::~Timer()>
c000e427:	83 c4 10             	add    esp,0x10
c000e42a:	83 ec 08             	sub    esp,0x8
c000e42d:	68 5c 01 00 00       	push   0x15c
c000e432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e436:	e8 3d c4 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	83 c4 0c             	add    esp,0xc
c000e441:	c3                   	ret    

c000e442 <Timer::read()>:
c000e442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e446:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e44c:	c3                   	ret    

c000e44d <setupTimer(int)>:
c000e44d:	53                   	push   ebx
c000e44e:	83 ec 14             	sub    esp,0x14
c000e451:	68 5c 01 00 00       	push   0x15c
c000e456:	e8 bb 96 ff ff       	call   c0007b16 <malloc>
c000e45b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e45e:	89 c3                	mov    ebx,eax
c000e460:	e8 53 0c 01 00       	call   c001f0b8 <PIT::PIT()>
c000e465:	58                   	pop    eax
c000e466:	5a                   	pop    edx
c000e467:	53                   	push   ebx
c000e468:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e46e:	e8 b3 e5 ff ff       	call   c000ca26 <Device::addChild(Device*)>
c000e473:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e475:	6a 00                	push   0x0
c000e477:	6a 00                	push   0x0
c000e479:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e47d:	53                   	push   ebx
c000e47e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e481:	89 d8                	mov    eax,ebx
c000e483:	83 c4 28             	add    esp,0x28
c000e486:	5b                   	pop    ebx
c000e487:	c3                   	ret    

c000e488 <timerHandler(unsigned int)>:
c000e488:	56                   	push   esi
c000e489:	53                   	push   ebx
c000e48a:	51                   	push   ecx
c000e48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e48f:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e495:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e49c:	0f 84 4a 01 00 00    	je     c000e5ec <timerHandler(unsigned int)+0x164>
c000e4a2:	fa                   	cli    
c000e4a3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4b2:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b7:	e8 64 19 01 00       	call   c001fe20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4bc:	83 c4 10             	add    esp,0x10
c000e4bf:	84 c0                	test   al,al
c000e4c1:	0f 85 a1 00 00 00    	jne    c000e568 <timerHandler(unsigned int)+0xe0>
c000e4c7:	83 ec 0c             	sub    esp,0xc
c000e4ca:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4cf:	e8 68 19 01 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4d4:	83 c4 10             	add    esp,0x10
c000e4d7:	89 c6                	mov    esi,eax
c000e4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4dc:	83 ec 0c             	sub    esp,0xc
c000e4df:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e4:	e8 53 19 01 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4e9:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4f0:	89 c3                	mov    ebx,eax
c000e4f2:	e8 4d 19 01 00       	call   c001fe44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4fa:	83 c4 10             	add    esp,0x10
c000e4fd:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e503:	77 23                	ja     c000e528 <timerHandler(unsigned int)+0xa0>
c000e505:	83 ec 0c             	sub    esp,0xc
c000e508:	53                   	push   ebx
c000e509:	e8 e6 81 00 00       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c000e50e:	83 c4 10             	add    esp,0x10
c000e511:	39 de                	cmp    esi,ebx
c000e513:	75 27                	jne    c000e53c <timerHandler(unsigned int)+0xb4>
c000e515:	83 ec 0c             	sub    esp,0xc
c000e518:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e51d:	e8 1a 19 01 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e522:	89 c6                	mov    esi,eax
c000e524:	eb 12                	jmp    c000e538 <timerHandler(unsigned int)+0xb0>
c000e526:	66 90                	xchg   ax,ax
c000e528:	52                   	push   edx
c000e529:	52                   	push   edx
c000e52a:	53                   	push   ebx
c000e52b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e530:	e8 cb 19 01 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e535:	8d 76 00             	lea    esi,[esi+0x0]
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	90                   	nop
c000e53c:	83 ec 0c             	sub    esp,0xc
c000e53f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e544:	e8 d7 18 01 00       	call   c001fe20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e549:	83 c4 10             	add    esp,0x10
c000e54c:	84 c0                	test   al,al
c000e54e:	75 18                	jne    c000e568 <timerHandler(unsigned int)+0xe0>
c000e550:	83 ec 0c             	sub    esp,0xc
c000e553:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e558:	e8 df 18 01 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e55d:	83 c4 10             	add    esp,0x10
c000e560:	39 f0                	cmp    eax,esi
c000e562:	0f 85 74 ff ff ff    	jne    c000e4dc <timerHandler(unsigned int)+0x54>
c000e568:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e56d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e571:	74 41                	je     c000e5b4 <timerHandler(unsigned int)+0x12c>
c000e573:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e57a:	74 38                	je     c000e5b4 <timerHandler(unsigned int)+0x12c>
c000e57c:	fa                   	cli    
c000e57d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e583:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e588:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e58e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e591:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e597:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e59a:	72 08                	jb     c000e5a4 <timerHandler(unsigned int)+0x11c>
c000e59c:	e8 3b 7c 00 00       	call   c00161dc <schedule()>
c000e5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5a4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5a9:	48                   	dec    eax
c000e5aa:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5af:	75 03                	jne    c000e5b4 <timerHandler(unsigned int)+0x12c>
c000e5b1:	fb                   	sti    
c000e5b2:	66 90                	xchg   ax,ax
c000e5b4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5b9:	48                   	dec    eax
c000e5ba:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5bf:	75 1b                	jne    c000e5dc <timerHandler(unsigned int)+0x154>
c000e5c1:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5c8:	74 12                	je     c000e5dc <timerHandler(unsigned int)+0x154>
c000e5ca:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5d4:	e8 03 7c 00 00       	call   c00161dc <schedule()>
c000e5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5dc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5e1:	48                   	dec    eax
c000e5e2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5e7:	75 03                	jne    c000e5ec <timerHandler(unsigned int)+0x164>
c000e5e9:	fb                   	sti    
c000e5ea:	66 90                	xchg   ax,ax
c000e5ec:	58                   	pop    eax
c000e5ed:	5b                   	pop    ebx
c000e5ee:	5e                   	pop    esi
c000e5ef:	c3                   	ret    

c000e5f0 <VCache::VCache(PhysicalDisk*)>:
c000e5f0:	53                   	push   ebx
c000e5f1:	83 ec 18             	sub    esp,0x18
c000e5f4:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c000e5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fd:	89 10                	mov    DWORD PTR [eax],edx
c000e5ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e603:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e619:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e620:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e632:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e648:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e650:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e657:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e65e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e662:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e66e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e672:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e681:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e689:	83 ec 0c             	sub    esp,0xc
c000e68c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e690:	e8 81 94 ff ff       	call   c0007b16 <malloc>
c000e695:	83 c4 10             	add    esp,0x10
c000e698:	89 c3                	mov    ebx,eax
c000e69a:	83 ec 0c             	sub    esp,0xc
c000e69d:	53                   	push   ebx
c000e69e:	e8 d5 78 00 00       	call   c0015f78 <Mutex::Mutex()>
c000e6a3:	83 c4 10             	add    esp,0x10
c000e6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6bc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6c7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6d8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6e8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6eb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e700:	05 00 02 00 00       	add    eax,0x200
c000e705:	c1 e0 03             	shl    eax,0x3
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	50                   	push   eax
c000e70c:	e8 05 94 ff ff       	call   c0007b16 <malloc>
c000e711:	83 c4 10             	add    esp,0x10
c000e714:	89 c2                	mov    edx,eax
c000e716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e71a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e71d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e721:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e730:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e734:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e73a:	89 d0                	mov    eax,edx
c000e73c:	c1 e0 02             	shl    eax,0x2
c000e73f:	01 d0                	add    eax,edx
c000e741:	c1 e0 04             	shl    eax,0x4
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	50                   	push   eax
c000e748:	e8 c9 93 ff ff       	call   c0007b16 <malloc>
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	89 c2                	mov    edx,eax
c000e752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e756:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e759:	90                   	nop
c000e75a:	83 c4 18             	add    esp,0x18
c000e75d:	5b                   	pop    ebx
c000e75e:	c3                   	ret    
c000e75f:	90                   	nop

c000e760 <VCache::invalidateReadBuffer()>:
c000e760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e764:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e76a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e76e:	c3                   	ret    
c000e76f:	90                   	nop

c000e770 <VCache::writeWriteBuffer()>:
c000e770:	53                   	push   ebx
c000e771:	83 ec 08             	sub    esp,0x8
c000e774:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e778:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e77c:	74 1e                	je     c000e79c <VCache::writeWriteBuffer()+0x2c>
c000e77e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e781:	83 ec 0c             	sub    esp,0xc
c000e784:	8b 10                	mov    edx,DWORD PTR [eax]
c000e786:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e789:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e78c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e78f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e792:	50                   	push   eax
c000e793:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e796:	83 c4 20             	add    esp,0x20
c000e799:	8d 76 00             	lea    esi,[esi+0x0]
c000e79c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e7a3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7aa:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7ae:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7b5:	83 c4 08             	add    esp,0x8
c000e7b8:	5b                   	pop    ebx
c000e7b9:	c3                   	ret    
c000e7ba:	66 90                	xchg   ax,ax

c000e7bc <VCache::~VCache()>:
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c000e7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c8:	89 10                	mov    DWORD PTR [eax],edx
c000e7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ce:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7d1:	0f b6 c0             	movzx  eax,al
c000e7d4:	85 c0                	test   eax,eax
c000e7d6:	74 10                	je     c000e7e8 <VCache::~VCache()+0x2c>
c000e7d8:	83 ec 0c             	sub    esp,0xc
c000e7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7df:	e8 8c ff ff ff       	call   c000e770 <VCache::writeWriteBuffer()>
c000e7e4:	83 c4 10             	add    esp,0x10
c000e7e7:	90                   	nop
c000e7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	50                   	push   eax
c000e7f3:	e8 2e 93 ff ff       	call   c0007b26 <free>
c000e7f8:	83 c4 10             	add    esp,0x10
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e802:	83 ec 0c             	sub    esp,0xc
c000e805:	50                   	push   eax
c000e806:	e8 1b 93 ff ff       	call   c0007b26 <free>
c000e80b:	83 c4 10             	add    esp,0x10
c000e80e:	90                   	nop
c000e80f:	83 c4 0c             	add    esp,0xc
c000e812:	c3                   	ret    
c000e813:	90                   	nop

c000e814 <VCache::~VCache()>:
c000e814:	83 ec 0c             	sub    esp,0xc
c000e817:	83 ec 0c             	sub    esp,0xc
c000e81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81e:	e8 99 ff ff ff       	call   c000e7bc <VCache::~VCache()>
c000e823:	83 c4 10             	add    esp,0x10
c000e826:	83 ec 08             	sub    esp,0x8
c000e829:	6a 44                	push   0x44
c000e82b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e82f:	e8 44 c0 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000e834:	83 c4 10             	add    esp,0x10
c000e837:	83 c4 0c             	add    esp,0xc
c000e83a:	c3                   	ret    
c000e83b:	90                   	nop

c000e83c <VCache::write(unsigned long long, int, void*)>:
c000e83c:	55                   	push   ebp
c000e83d:	57                   	push   edi
c000e83e:	56                   	push   esi
c000e83f:	53                   	push   ebx
c000e840:	83 ec 1c             	sub    esp,0x1c
c000e843:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e847:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e84b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e853:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e857:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e85b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e85f:	74 07                	je     c000e868 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e861:	53                   	push   ebx
c000e862:	e8 f9 fe ff ff       	call   c000e760 <VCache::invalidateReadBuffer()>
c000e867:	58                   	pop    eax
c000e868:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e86c:	74 62                	je     c000e8d0 <VCache::write(unsigned long long, int, void*)+0x94>
c000e86e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e871:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e875:	99                   	cdq    
c000e876:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e87a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e87d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e880:	31 c1                	xor    ecx,eax
c000e882:	89 d0                	mov    eax,edx
c000e884:	89 ca                	mov    edx,ecx
c000e886:	31 e8                	xor    eax,ebp
c000e888:	09 c2                	or     edx,eax
c000e88a:	75 38                	jne    c000e8c4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e88c:	83 ff 01             	cmp    edi,0x1
c000e88f:	75 33                	jne    c000e8c4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e891:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e894:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e898:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e89e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8a1:	0f af c8             	imul   ecx,eax
c000e8a4:	01 cf                	add    edi,ecx
c000e8a6:	89 c1                	mov    ecx,eax
c000e8a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8ad:	40                   	inc    eax
c000e8ae:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8b1:	83 f8 50             	cmp    eax,0x50
c000e8b4:	75 6a                	jne    c000e920 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8b6:	83 ec 0c             	sub    esp,0xc
c000e8b9:	53                   	push   ebx
c000e8ba:	e8 b1 fe ff ff       	call   c000e770 <VCache::writeWriteBuffer()>
c000e8bf:	83 c4 10             	add    esp,0x10
c000e8c2:	eb 5c                	jmp    c000e920 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8c4:	83 ec 0c             	sub    esp,0xc
c000e8c7:	53                   	push   ebx
c000e8c8:	e8 a3 fe ff ff       	call   c000e770 <VCache::writeWriteBuffer()>
c000e8cd:	83 c4 10             	add    esp,0x10
c000e8d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8d3:	83 ff 4f             	cmp    edi,0x4f
c000e8d6:	7f 20                	jg     c000e8f8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e8d8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8df:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8e2:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e8e5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8e9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8ec:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8f4:	eb 2a                	jmp    c000e920 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8f6:	66 90                	xchg   ax,ax
c000e8f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8fa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8fe:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e902:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e906:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e90a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e90e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e912:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e915:	83 c4 1c             	add    esp,0x1c
c000e918:	5b                   	pop    ebx
c000e919:	5e                   	pop    esi
c000e91a:	5f                   	pop    edi
c000e91b:	5d                   	pop    ebp
c000e91c:	ff e0                	jmp    eax
c000e91e:	66 90                	xchg   ax,ax
c000e920:	83 c4 1c             	add    esp,0x1c
c000e923:	31 c0                	xor    eax,eax
c000e925:	5b                   	pop    ebx
c000e926:	5e                   	pop    esi
c000e927:	5f                   	pop    edi
c000e928:	5d                   	pop    ebp
c000e929:	c3                   	ret    

c000e92a <VCache::read(unsigned long long, int, void*)>:
c000e92a:	55                   	push   ebp
c000e92b:	57                   	push   edi
c000e92c:	56                   	push   esi
c000e92d:	53                   	push   ebx
c000e92e:	83 ec 1c             	sub    esp,0x1c
c000e931:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e935:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e939:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e93d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e941:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e945:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e949:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e94d:	74 0d                	je     c000e95c <VCache::read(unsigned long long, int, void*)+0x32>
c000e94f:	83 ec 0c             	sub    esp,0xc
c000e952:	57                   	push   edi
c000e953:	e8 18 fe ff ff       	call   c000e770 <VCache::writeWriteBuffer()>
c000e958:	83 c4 10             	add    esp,0x10
c000e95b:	90                   	nop
c000e95c:	83 fd 01             	cmp    ebp,0x1
c000e95f:	0f 85 93 00 00 00    	jne    c000e9f8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e965:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e968:	89 04 24             	mov    DWORD PTR [esp],eax
c000e96b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e972:	0f 85 80 00 00 00    	jne    c000e9f8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e978:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e97b:	89 e9                	mov    ecx,ebp
c000e97d:	f7 d9                	neg    ecx
c000e97f:	89 c8                	mov    eax,ecx
c000e981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e985:	c1 f8 1f             	sar    eax,0x1f
c000e988:	21 d9                	and    ecx,ebx
c000e98a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e98e:	89 c8                	mov    eax,ecx
c000e990:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e994:	21 f1                	and    ecx,esi
c000e996:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e99a:	89 ca                	mov    edx,ecx
c000e99c:	74 2e                	je     c000e9cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e99e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e9a1:	75 29                	jne    c000e9cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9a3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9a6:	75 24                	jne    c000e9cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9ab:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9b1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9b4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9b7:	21 f3                	and    ebx,esi
c000e9b9:	0f af d9             	imul   ebx,ecx
c000e9bc:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9c3:	89 de                	mov    esi,ebx
c000e9c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9c7:	31 c0                	xor    eax,eax
c000e9c9:	eb 61                	jmp    c000ea2c <VCache::read(unsigned long long, int, void*)+0x102>
c000e9cb:	90                   	nop
c000e9cc:	83 ec 0c             	sub    esp,0xc
c000e9cf:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9d3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9d7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9da:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9dd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e9df:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9e2:	55                   	push   ebp
c000e9e3:	52                   	push   edx
c000e9e4:	50                   	push   eax
c000e9e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9e9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e9ec:	83 c4 20             	add    esp,0x20
c000e9ef:	85 c0                	test   eax,eax
c000e9f1:	75 39                	jne    c000ea2c <VCache::read(unsigned long long, int, void*)+0x102>
c000e9f3:	eb b3                	jmp    c000e9a8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9f8:	83 ec 0c             	sub    esp,0xc
c000e9fb:	57                   	push   edi
c000e9fc:	e8 5f fd ff ff       	call   c000e760 <VCache::invalidateReadBuffer()>
c000ea01:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea04:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea08:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea0a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea0e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea12:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea16:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea1a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea1e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea21:	83 c4 2c             	add    esp,0x2c
c000ea24:	5b                   	pop    ebx
c000ea25:	5e                   	pop    esi
c000ea26:	5f                   	pop    edi
c000ea27:	5d                   	pop    ebp
c000ea28:	ff e0                	jmp    eax
c000ea2a:	66 90                	xchg   ax,ax
c000ea2c:	83 c4 1c             	add    esp,0x1c
c000ea2f:	5b                   	pop    ebx
c000ea30:	5e                   	pop    esi
c000ea31:	5f                   	pop    edi
c000ea32:	5d                   	pop    ebp
c000ea33:	c3                   	ret    

c000ea34 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea34:	55                   	push   ebp
c000ea35:	57                   	push   edi
c000ea36:	56                   	push   esi
c000ea37:	53                   	push   ebx
c000ea38:	83 ec 1c             	sub    esp,0x1c
c000ea3b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea43:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea47:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea53:	01 df                	add    edi,ebx
c000ea55:	39 fb                	cmp    ebx,edi
c000ea57:	7d 1f                	jge    c000ea78 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea59:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea5d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea61:	7d 12                	jge    c000ea75 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea63:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea69:	53                   	push   ebx
c000ea6a:	55                   	push   ebp
c000ea6b:	45                   	inc    ebp
c000ea6c:	56                   	push   esi
c000ea6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea70:	83 c4 10             	add    esp,0x10
c000ea73:	eb e8                	jmp    c000ea5d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea75:	43                   	inc    ebx
c000ea76:	eb dd                	jmp    c000ea55 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea78:	83 c4 1c             	add    esp,0x1c
c000ea7b:	5b                   	pop    ebx
c000ea7c:	5e                   	pop    esi
c000ea7d:	5f                   	pop    edi
c000ea7e:	5d                   	pop    ebp
c000ea7f:	c3                   	ret    

c000ea80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea80:	55                   	push   ebp
c000ea81:	57                   	push   edi
c000ea82:	31 ff                	xor    edi,edi
c000ea84:	56                   	push   esi
c000ea85:	53                   	push   ebx
c000ea86:	83 ec 1c             	sub    esp,0x1c
c000ea89:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea8d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea91:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea98:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eaa1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eaa5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eaa9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eaac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eab0:	01 f9                	add    ecx,edi
c000eab2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eab6:	7d 2f                	jge    c000eae7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eab8:	31 f6                	xor    esi,esi
c000eaba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eabe:	01 f2                	add    edx,esi
c000eac0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eac4:	7d 1a                	jge    c000eae0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eac6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eac9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eacc:	46                   	inc    esi
c000eacd:	51                   	push   ecx
c000eace:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ead2:	52                   	push   edx
c000ead3:	55                   	push   ebp
c000ead4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eade:	eb da                	jmp    c000eaba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eae0:	47                   	inc    edi
c000eae1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eae5:	eb c5                	jmp    c000eaac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eae7:	83 c4 1c             	add    esp,0x1c
c000eaea:	5b                   	pop    ebx
c000eaeb:	5e                   	pop    esi
c000eaec:	5f                   	pop    edi
c000eaed:	5d                   	pop    ebp
c000eaee:	c3                   	ret    
c000eaef:	90                   	nop

c000eaf0 <Video::blit(unsigned int*, int, int, int, int)>:
c000eaf0:	55                   	push   ebp
c000eaf1:	57                   	push   edi
c000eaf2:	56                   	push   esi
c000eaf3:	53                   	push   ebx
c000eaf4:	83 ec 1c             	sub    esp,0x1c
c000eaf7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eafb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eaff:	85 c0                	test   eax,eax
c000eb01:	79 02                	jns    c000eb05 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eb03:	31 c0                	xor    eax,eax
c000eb05:	c1 e0 02             	shl    eax,0x2
c000eb08:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eb0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb10:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb14:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eb18:	39 d8                	cmp    eax,ebx
c000eb1a:	7e 49                	jle    c000eb65 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb1c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb22:	7c 41                	jl     c000eb65 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb24:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb2c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb30:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eb34:	39 f9                	cmp    ecx,edi
c000eb36:	7e 22                	jle    c000eb5a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eb38:	83 c5 04             	add    ebp,0x4
c000eb3b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb41:	7c 14                	jl     c000eb57 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb43:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb45:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb48:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb50:	56                   	push   esi
c000eb51:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb54:	83 c4 10             	add    esp,0x10
c000eb57:	47                   	inc    edi
c000eb58:	eb d2                	jmp    c000eb2c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb5e:	43                   	inc    ebx
c000eb5f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb63:	eb ab                	jmp    c000eb10 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb65:	83 c4 1c             	add    esp,0x1c
c000eb68:	5b                   	pop    ebx
c000eb69:	5e                   	pop    esi
c000eb6a:	5f                   	pop    edi
c000eb6b:	5d                   	pop    ebp
c000eb6c:	c3                   	ret    
c000eb6d:	90                   	nop

c000eb6e <Video::clearScreen(unsigned int)>:
c000eb6e:	57                   	push   edi
c000eb6f:	56                   	push   esi
c000eb70:	53                   	push   ebx
c000eb71:	31 db                	xor    ebx,ebx
c000eb73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb77:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb7d:	7e 1f                	jle    c000eb9e <Video::clearScreen(unsigned int)+0x30>
c000eb7f:	31 ff                	xor    edi,edi
c000eb81:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb87:	7e 12                	jle    c000eb9b <Video::clearScreen(unsigned int)+0x2d>
c000eb89:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb8f:	53                   	push   ebx
c000eb90:	57                   	push   edi
c000eb91:	47                   	inc    edi
c000eb92:	56                   	push   esi
c000eb93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb96:	83 c4 10             	add    esp,0x10
c000eb99:	eb e6                	jmp    c000eb81 <Video::clearScreen(unsigned int)+0x13>
c000eb9b:	43                   	inc    ebx
c000eb9c:	eb d9                	jmp    c000eb77 <Video::clearScreen(unsigned int)+0x9>
c000eb9e:	5b                   	pop    ebx
c000eb9f:	5e                   	pop    esi
c000eba0:	5f                   	pop    edi
c000eba1:	c3                   	ret    

c000eba2 <Video::putpixel(int, int, unsigned int)>:
c000eba2:	c7 44 24 04 a8 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021fa8
c000ebaa:	e9 48 2b 00 00       	jmp    c00116f7 <KePanic(char const*)>
c000ebaf:	90                   	nop

c000ebb0 <Video::readPixelApprox(int, int)>:
c000ebb0:	83 ec 18             	sub    esp,0x18
c000ebb3:	68 c9 1f 02 c0       	push   0xc0021fc9
c000ebb8:	e8 3a 2b 00 00       	call   c00116f7 <KePanic(char const*)>
c000ebbd:	31 c0                	xor    eax,eax
c000ebbf:	83 c4 1c             	add    esp,0x1c
c000ebc2:	c3                   	ret    
c000ebc3:	90                   	nop

c000ebc4 <Video::Video(char const*)>:
c000ebc4:	83 ec 0c             	sub    esp,0xc
c000ebc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebcb:	83 ec 08             	sub    esp,0x8
c000ebce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd2:	50                   	push   eax
c000ebd3:	e8 e6 df ff ff       	call   c000cbbe <Device::Device(char const*)>
c000ebd8:	83 c4 10             	add    esp,0x10
c000ebdb:	ba 44 20 02 c0       	mov    edx,0xc0022044
c000ebe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe4:	89 10                	mov    DWORD PTR [eax],edx
c000ebe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebf4:	90                   	nop
c000ebf5:	83 c4 0c             	add    esp,0xc
c000ebf8:	c3                   	ret    
c000ebf9:	90                   	nop

c000ebfa <Video::~Video()>:
c000ebfa:	83 ec 0c             	sub    esp,0xc
c000ebfd:	ba 44 20 02 c0       	mov    edx,0xc0022044
c000ec02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec06:	89 10                	mov    DWORD PTR [eax],edx
c000ec08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec0c:	83 ec 0c             	sub    esp,0xc
c000ec0f:	50                   	push   eax
c000ec10:	e8 13 dd ff ff       	call   c000c928 <Device::~Device()>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	90                   	nop
c000ec19:	83 c4 0c             	add    esp,0xc
c000ec1c:	c3                   	ret    
c000ec1d:	90                   	nop

c000ec1e <Video::~Video()>:
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	83 ec 0c             	sub    esp,0xc
c000ec24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec28:	e8 cd ff ff ff       	call   c000ebfa <Video::~Video()>
c000ec2d:	83 c4 10             	add    esp,0x10
c000ec30:	83 ec 08             	sub    esp,0x8
c000ec33:	68 64 01 00 00       	push   0x164
c000ec38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec3c:	e8 37 bc ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	83 c4 0c             	add    esp,0xc
c000ec47:	c3                   	ret    

c000ec48 <Video::isMonochrome()>:
c000ec48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec4c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec52:	c3                   	ret    
c000ec53:	90                   	nop

c000ec54 <Video::getWidth()>:
c000ec54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec58:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec5e:	c3                   	ret    
c000ec5f:	90                   	nop

c000ec60 <Video::getHeight()>:
c000ec60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec64:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec6a:	c3                   	ret    
c000ec6b:	90                   	nop

c000ec6c <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec6c:	55                   	push   ebp
c000ec6d:	57                   	push   edi
c000ec6e:	56                   	push   esi
c000ec6f:	53                   	push   ebx
c000ec70:	83 ec 2c             	sub    esp,0x2c
c000ec73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec77:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec7b:	83 f8 01             	cmp    eax,0x1
c000ec7e:	19 c9                	sbb    ecx,ecx
c000ec80:	31 db                	xor    ebx,ebx
c000ec82:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec86:	89 cd                	mov    ebp,ecx
c000ec88:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec90:	f7 d5                	not    ebp
c000ec92:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec98:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec9c:	01 d8                	add    eax,ebx
c000ec9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eca2:	56                   	push   esi
c000eca3:	e8 b8 ff ff ff       	call   c000ec60 <Video::getHeight()>
c000eca8:	59                   	pop    ecx
c000eca9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecad:	7e 70                	jle    c000ed1f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecaf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecb3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ecb7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecbe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecc2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ecc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eccd:	89 f8                	mov    eax,edi
c000eccf:	83 c0 20             	add    eax,0x20
c000ecd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ecd6:	56                   	push   esi
c000ecd7:	e8 78 ff ff ff       	call   c000ec54 <Video::getWidth()>
c000ecdc:	5a                   	pop    edx
c000ecdd:	39 c7                	cmp    edi,eax
c000ecdf:	7d 34                	jge    c000ed15 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ece1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ece6:	74 05                	je     c000eced <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ece8:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecea:	55                   	push   ebp
c000eceb:	eb 0d                	jmp    c000ecfa <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000eced:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecf2:	74 12                	je     c000ed06 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecf4:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecfa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecfe:	57                   	push   edi
c000ecff:	56                   	push   esi
c000ed00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed0a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed0e:	47                   	inc    edi
c000ed0f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ed13:	75 c1                	jne    c000ecd6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed15:	43                   	inc    ebx
c000ed16:	83 fb 20             	cmp    ebx,0x20
c000ed19:	0f 85 79 ff ff ff    	jne    c000ec98 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed1f:	83 c4 2c             	add    esp,0x2c
c000ed22:	5b                   	pop    ebx
c000ed23:	5e                   	pop    esi
c000ed24:	5f                   	pop    edi
c000ed25:	5d                   	pop    ebp
c000ed26:	c3                   	ret    
c000ed27:	90                   	nop

c000ed28 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed28:	55                   	push   ebp
c000ed29:	57                   	push   edi
c000ed2a:	56                   	push   esi
c000ed2b:	53                   	push   ebx
c000ed2c:	83 ec 28             	sub    esp,0x28
c000ed2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed33:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed37:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ed3b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ed3f:	c1 e6 08             	shl    esi,0x8
c000ed42:	01 c6                	add    esi,eax
c000ed44:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed48:	c1 e0 08             	shl    eax,0x8
c000ed4b:	01 d0                	add    eax,edx
c000ed4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed55:	0f af c6             	imul   eax,esi
c000ed58:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed5f:	50                   	push   eax
c000ed60:	e8 b1 8d ff ff       	call   c0007b16 <malloc>
c000ed65:	83 c4 10             	add    esp,0x10
c000ed68:	89 c7                	mov    edi,eax
c000ed6a:	85 c0                	test   eax,eax
c000ed6c:	75 10                	jne    c000ed7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed6e:	83 ec 0c             	sub    esp,0xc
c000ed71:	68 f4 1f 02 c0       	push   0xc0021ff4
c000ed76:	e8 7c 29 00 00       	call   c00116f7 <KePanic(char const*)>
c000ed7b:	83 c4 10             	add    esp,0x10
c000ed7e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed82:	ba 12 00 00 00       	mov    edx,0x12
c000ed87:	85 c0                	test   eax,eax
c000ed89:	74 11                	je     c000ed9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed8b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed8f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed93:	c1 fa 03             	sar    edx,0x3
c000ed96:	0f af d1             	imul   edx,ecx
c000ed99:	83 c2 12             	add    edx,0x12
c000ed9c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eda0:	74 04                	je     c000eda6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eda2:	85 f6                	test   esi,esi
c000eda4:	75 12                	jne    c000edb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eda6:	83 ec 0c             	sub    esp,0xc
c000eda9:	68 04 20 02 c0       	push   0xc0022004
c000edae:	e8 f2 bb ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000edb3:	e9 b8 00 00 00       	jmp    c000ee70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edb8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edbc:	83 f9 02             	cmp    ecx,0x2
c000edbf:	0f 85 96 00 00 00    	jne    c000ee5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000edc5:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000edca:	75 0e                	jne    c000edda <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edcc:	85 c0                	test   eax,eax
c000edce:	75 0a                	jne    c000edda <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edd0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000edd3:	83 e8 18             	sub    eax,0x18
c000edd6:	a8 f7                	test   al,0xf7
c000edd8:	74 0a                	je     c000ede4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000edda:	83 ec 0c             	sub    esp,0xc
c000eddd:	68 19 20 02 c0       	push   0xc0022019
c000ede2:	eb 7f                	jmp    c000ee63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ede4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edf4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000edf8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee00:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee04:	75 0c                	jne    c000ee12 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee06:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ee0b:	c1 e0 18             	shl    eax,0x18
c000ee0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee12:	45                   	inc    ebp
c000ee13:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee18:	c1 e1 10             	shl    ecx,0x10
c000ee1b:	89 c8                	mov    eax,ecx
c000ee1d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee22:	c1 e1 08             	shl    ecx,0x8
c000ee25:	09 c1                	or     ecx,eax
c000ee27:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee2b:	09 c1                	or     ecx,eax
c000ee2d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee31:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ee35:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee39:	c1 f8 03             	sar    eax,0x3
c000ee3c:	01 c2                	add    edx,eax
c000ee3e:	89 e8                	mov    eax,ebp
c000ee40:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee44:	39 c6                	cmp    esi,eax
c000ee46:	7f b0                	jg     c000edf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee50:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee53:	7e 22                	jle    c000ee77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee55:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee59:	eb 99                	jmp    c000edf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee5b:	50                   	push   eax
c000ee5c:	50                   	push   eax
c000ee5d:	51                   	push   ecx
c000ee5e:	68 27 20 02 c0       	push   0xc0022027
c000ee63:	e8 3d bb ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ee68:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee6b:	e8 b6 8c ff ff       	call   c0007b26 <free>
c000ee70:	83 c4 10             	add    esp,0x10
c000ee73:	31 ff                	xor    edi,edi
c000ee75:	eb 0f                	jmp    c000ee86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee7b:	89 30                	mov    DWORD PTR [eax],esi
c000ee7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee81:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee84:	89 30                	mov    DWORD PTR [eax],esi
c000ee86:	83 c4 1c             	add    esp,0x1c
c000ee89:	89 f8                	mov    eax,edi
c000ee8b:	5b                   	pop    ebx
c000ee8c:	5e                   	pop    esi
c000ee8d:	5f                   	pop    edi
c000ee8e:	5d                   	pop    ebp
c000ee8f:	c3                   	ret    

c000ee90 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee90:	55                   	push   ebp
c000ee91:	57                   	push   edi
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 28             	sub    esp,0x28
c000ee97:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee9f:	50                   	push   eax
c000eea0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eea4:	50                   	push   eax
c000eea5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eea9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eead:	56                   	push   esi
c000eeae:	e8 75 fe ff ff       	call   c000ed28 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	85 c0                	test   eax,eax
c000eeb8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eebc:	74 35                	je     c000eef3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eebe:	89 c7                	mov    edi,eax
c000eec0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eec4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eec8:	39 d8                	cmp    eax,ebx
c000eeca:	7e 27                	jle    c000eef3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eecc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eed0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eed4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eed8:	39 e8                	cmp    eax,ebp
c000eeda:	7e 14                	jle    c000eef0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eedc:	8b 06                	mov    eax,DWORD PTR [esi]
c000eede:	83 c7 04             	add    edi,0x4
c000eee1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eee4:	53                   	push   ebx
c000eee5:	55                   	push   ebp
c000eee6:	45                   	inc    ebp
c000eee7:	56                   	push   esi
c000eee8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eeeb:	83 c4 10             	add    esp,0x10
c000eeee:	eb e0                	jmp    c000eed0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eef0:	43                   	inc    ebx
c000eef1:	eb cd                	jmp    c000eec0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eef3:	83 c4 1c             	add    esp,0x1c
c000eef6:	5b                   	pop    ebx
c000eef7:	5e                   	pop    esi
c000eef8:	5f                   	pop    edi
c000eef9:	5d                   	pop    ebp
c000eefa:	c3                   	ret    
c000eefb:	90                   	nop

c000eefc <ACPI::close(int, int, void*)>:
c000eefc:	83 ec 1c             	sub    esp,0x1c
c000eeff:	83 ec 0c             	sub    esp,0xc
c000ef02:	68 88 20 02 c0       	push   0xc0022088
c000ef07:	e8 99 ba ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ef0c:	83 c4 10             	add    esp,0x10
c000ef0f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef17:	74 0b                	je     c000ef24 <ACPI::close(int, int, void*)+0x28>
c000ef19:	b8 00 00 00 00       	mov    eax,0x0
c000ef1e:	e9 01 01 00 00       	jmp    c000f024 <ACPI::close(int, int, void*)+0x128>
c000ef23:	90                   	nop
c000ef24:	83 ec 0c             	sub    esp,0xc
c000ef27:	68 97 20 02 c0       	push   0xc0022097
c000ef2c:	e8 74 ba ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ef31:	83 c4 10             	add    esp,0x10
c000ef34:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef39:	75 45                	jne    c000ef80 <ACPI::close(int, int, void*)+0x84>
c000ef3b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef40:	83 ec 08             	sub    esp,0x8
c000ef43:	50                   	push   eax
c000ef44:	68 a6 20 02 c0       	push   0xc00220a6
c000ef49:	e8 57 ba ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ef4e:	83 c4 10             	add    esp,0x10
c000ef51:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef56:	85 c0                	test   eax,eax
c000ef58:	74 0a                	je     c000ef64 <ACPI::close(int, int, void*)+0x68>
c000ef5a:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef5f:	ff d0                	call   eax
c000ef61:	8d 76 00             	lea    esi,[esi+0x0]
c000ef64:	83 ec 0c             	sub    esp,0xc
c000ef67:	68 74 22 02 c0       	push   0xc0022274
c000ef6c:	e8 86 27 00 00       	call   c00116f7 <KePanic(char const*)>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef79:	e9 a6 00 00 00       	jmp    c000f024 <ACPI::close(int, int, void*)+0x128>
c000ef7e:	66 90                	xchg   ax,ax
c000ef80:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef85:	0f 85 81 00 00 00    	jne    c000f00c <ACPI::close(int, int, void*)+0x110>
c000ef8b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef90:	83 ec 08             	sub    esp,0x8
c000ef93:	50                   	push   eax
c000ef94:	68 c4 20 02 c0       	push   0xc00220c4
c000ef99:	e8 07 ba ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efa6:	85 c0                	test   eax,eax
c000efa8:	74 0a                	je     c000efb4 <ACPI::close(int, int, void*)+0xb8>
c000efaa:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efaf:	ff d0                	call   eax
c000efb1:	8d 76 00             	lea    esi,[esi+0x0]
c000efb4:	83 ec 0c             	sub    esp,0xc
c000efb7:	68 df 20 02 c0       	push   0xc00220df
c000efbc:	e8 e4 b9 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000efc1:	83 c4 10             	add    esp,0x10
c000efc4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000efc9:	8d 76 00             	lea    esi,[esi+0x0]
c000efcc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efd1:	83 e0 02             	and    eax,0x2
c000efd4:	74 1e                	je     c000eff4 <ACPI::close(int, int, void*)+0xf8>
c000efd6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efe1:	89 c2                	mov    edx,eax
c000efe3:	ec                   	in     al,dx
c000efe4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efe8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eff0:	eb da                	jmp    c000efcc <ACPI::close(int, int, void*)+0xd0>
c000eff2:	66 90                	xchg   ax,ax
c000eff4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000effb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000f000:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f008:	ee                   	out    dx,al
c000f009:	8d 76 00             	lea    esi,[esi+0x0]
c000f00c:	83 ec 0c             	sub    esp,0xc
c000f00f:	68 f1 20 02 c0       	push   0xc00220f1
c000f014:	e8 8c b9 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c000f019:	83 c4 10             	add    esp,0x10
c000f01c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f021:	8d 76 00             	lea    esi,[esi+0x0]
c000f024:	83 c4 1c             	add    esp,0x1c
c000f027:	c3                   	ret    

c000f028 <findRSDP()>:
c000f028:	83 ec 1c             	sub    esp,0x1c
c000f02b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f030:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f036:	83 e0 04             	and    eax,0x4
c000f039:	0f b6 c0             	movzx  eax,al
c000f03c:	85 c0                	test   eax,eax
c000f03e:	75 08                	jne    c000f048 <findRSDP()+0x20>
c000f040:	b8 00 00 00 00       	mov    eax,0x0
c000f045:	eb 75                	jmp    c000f0bc <findRSDP()+0x94>
c000f047:	90                   	nop
c000f048:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f04d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f052:	7f 1c                	jg     c000f070 <findRSDP()+0x48>
c000f054:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f059:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f05f:	83 e2 fb             	and    edx,0xfffffffb
c000f062:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f068:	b8 00 00 00 00       	mov    eax,0x0
c000f06d:	eb 4d                	jmp    c000f0bc <findRSDP()+0x94>
c000f06f:	90                   	nop
c000f070:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f078:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f080:	77 32                	ja     c000f0b4 <findRSDP()+0x8c>
c000f082:	83 ec 04             	sub    esp,0x4
c000f085:	6a 08                	push   0x8
c000f087:	68 00 21 02 c0       	push   0xc0022100
c000f08c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f090:	e8 eb 12 ff ff       	call   c0000380 <memcmp>
c000f095:	83 c4 10             	add    esp,0x10
c000f098:	85 c0                	test   eax,eax
c000f09a:	0f 94 c0             	sete   al
c000f09d:	0f b6 c0             	movzx  eax,al
c000f0a0:	85 c0                	test   eax,eax
c000f0a2:	74 08                	je     c000f0ac <findRSDP()+0x84>
c000f0a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0a8:	eb 12                	jmp    c000f0bc <findRSDP()+0x94>
c000f0aa:	66 90                	xchg   ax,ax
c000f0ac:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f0b1:	eb c5                	jmp    c000f078 <findRSDP()+0x50>
c000f0b3:	90                   	nop
c000f0b4:	b8 00 00 00 00       	mov    eax,0x0
c000f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0bc:	83 c4 1c             	add    esp,0x1c
c000f0bf:	c3                   	ret    

c000f0c0 <loadACPITables(unsigned char*)>:
c000f0c0:	57                   	push   edi
c000f0c1:	56                   	push   esi
c000f0c2:	53                   	push   ebx
c000f0c3:	83 ec 60             	sub    esp,0x60
c000f0c6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f0cb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0d1:	83 e0 04             	and    eax,0x4
c000f0d4:	0f b6 c0             	movzx  eax,al
c000f0d7:	85 c0                	test   eax,eax
c000f0d9:	0f 84 41 02 00 00    	je     c000f320 <loadACPITables(unsigned char*)+0x260>
c000f0df:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0e4:	0f b6 c0             	movzx  eax,al
c000f0e7:	85 c0                	test   eax,eax
c000f0e9:	74 79                	je     c000f164 <loadACPITables(unsigned char*)+0xa4>
c000f0eb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0fa:	83 e8 24             	sub    eax,0x24
c000f0fd:	c1 e8 03             	shr    eax,0x3
c000f100:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f104:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f10c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f110:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f114:	0f 8d ba 00 00 00    	jge    c000f1d4 <loadACPITables(unsigned char*)+0x114>
c000f11a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f11e:	83 c0 24             	add    eax,0x24
c000f121:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f125:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f129:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f131:	c1 e0 03             	shl    eax,0x3
c000f134:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f138:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f13c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f13f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f141:	89 c1                	mov    ecx,eax
c000f143:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f148:	8d 50 01             	lea    edx,[eax+0x1]
c000f14b:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f151:	89 ca                	mov    edx,ecx
c000f153:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f15a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f15f:	eb ab                	jmp    c000f10c <loadACPITables(unsigned char*)+0x4c>
c000f161:	8d 76 00             	lea    esi,[esi+0x0]
c000f164:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f168:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f16c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f173:	83 e8 24             	sub    eax,0x24
c000f176:	c1 e8 02             	shr    eax,0x2
c000f179:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f17d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f185:	8d 76 00             	lea    esi,[esi+0x0]
c000f188:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f18c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f190:	7d 42                	jge    c000f1d4 <loadACPITables(unsigned char*)+0x114>
c000f192:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f196:	83 c0 24             	add    eax,0x24
c000f199:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f19d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f1a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f1a5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f1a9:	c1 e0 02             	shl    eax,0x2
c000f1ac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f1b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f1b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1b6:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1bb:	8d 50 01             	lea    edx,[eax+0x1]
c000f1be:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f1c4:	89 ca                	mov    edx,ecx
c000f1c6:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1cd:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f1d2:	eb b4                	jmp    c000f188 <loadACPITables(unsigned char*)+0xc8>
c000f1d4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1dc:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1e1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1e5:	0f 8d 39 01 00 00    	jge    c000f324 <loadACPITables(unsigned char*)+0x264>
c000f1eb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1ef:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f206:	25 ff 0f 00 00       	and    eax,0xfff
c000f20b:	89 c6                	mov    esi,eax
c000f20d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f213:	83 ec 0c             	sub    esp,0xc
c000f216:	6a 01                	push   0x1
c000f218:	e8 50 a4 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c000f21d:	83 c4 10             	add    esp,0x10
c000f220:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f224:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f22a:	83 ec 0c             	sub    esp,0xc
c000f22d:	6a 01                	push   0x1
c000f22f:	6a 01                	push   0x1
c000f231:	50                   	push   eax
c000f232:	52                   	push   edx
c000f233:	53                   	push   ebx
c000f234:	e8 41 ad ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f239:	83 c4 20             	add    esp,0x20
c000f23c:	09 f0                	or     eax,esi
c000f23e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f242:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f246:	c1 e0 03             	shl    eax,0x3
c000f249:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f24e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f256:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f25a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f26a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f26e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f276:	89 c6                	mov    esi,eax
c000f278:	89 d7                	mov    edi,edx
c000f27a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f27c:	89 c8                	mov    eax,ecx
c000f27e:	89 fa                	mov    edx,edi
c000f280:	89 f3                	mov    ebx,esi
c000f282:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f286:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f28a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f28e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f295:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f299:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f29d:	05 00 10 00 00       	add    eax,0x1000
c000f2a2:	c1 e8 0c             	shr    eax,0xc
c000f2a5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f2b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2b5:	25 ff 0f 00 00       	and    eax,0xfff
c000f2ba:	89 c6                	mov    esi,eax
c000f2bc:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2c2:	83 ec 0c             	sub    esp,0xc
c000f2c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f2c9:	e8 9f a3 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c000f2ce:	83 c4 10             	add    esp,0x10
c000f2d1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2d5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2db:	83 ec 0c             	sub    esp,0xc
c000f2de:	6a 01                	push   0x1
c000f2e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2e4:	50                   	push   eax
c000f2e5:	52                   	push   edx
c000f2e6:	53                   	push   ebx
c000f2e7:	e8 8e ac ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2ec:	83 c4 20             	add    esp,0x20
c000f2ef:	09 f0                	or     eax,esi
c000f2f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2f9:	83 ec 0c             	sub    esp,0xc
c000f2fc:	50                   	push   eax
c000f2fd:	e8 89 a6 ff ff       	call   c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c000f302:	83 c4 10             	add    esp,0x10
c000f305:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f309:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f30d:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f314:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f319:	e9 be fe ff ff       	jmp    c000f1dc <loadACPITables(unsigned char*)+0x11c>
c000f31e:	66 90                	xchg   ax,ax
c000f320:	90                   	nop
c000f321:	8d 76 00             	lea    esi,[esi+0x0]
c000f324:	83 c4 60             	add    esp,0x60
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    
c000f32b:	90                   	nop

c000f32c <findRSDT(unsigned char*)>:
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 50             	sub    esp,0x50
c000f332:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f337:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f33d:	83 e0 04             	and    eax,0x4
c000f340:	0f b6 c0             	movzx  eax,al
c000f343:	85 c0                	test   eax,eax
c000f345:	75 0d                	jne    c000f354 <findRSDT(unsigned char*)+0x28>
c000f347:	b8 00 00 00 00       	mov    eax,0x0
c000f34c:	e9 2b 01 00 00       	jmp    c000f47c <findRSDT(unsigned char*)+0x150>
c000f351:	8d 76 00             	lea    esi,[esi+0x0]
c000f354:	89 e0                	mov    eax,esp
c000f356:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f35a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f35e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f362:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f36a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f36e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f372:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f376:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f37a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f37e:	89 c6                	mov    esi,eax
c000f380:	89 d7                	mov    edi,edx
c000f382:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f384:	89 c8                	mov    eax,ecx
c000f386:	89 fa                	mov    edx,edi
c000f388:	89 f3                	mov    ebx,esi
c000f38a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f38e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f392:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f396:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f39a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f39e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f3a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3be:	25 ff 0f 00 00       	and    eax,0xfff
c000f3c3:	89 c6                	mov    esi,eax
c000f3c5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3cb:	83 ec 0c             	sub    esp,0xc
c000f3ce:	6a 02                	push   0x2
c000f3d0:	e8 98 a2 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c000f3d5:	83 c4 10             	add    esp,0x10
c000f3d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3e2:	83 ec 0c             	sub    esp,0xc
c000f3e5:	6a 01                	push   0x1
c000f3e7:	6a 02                	push   0x2
c000f3e9:	50                   	push   eax
c000f3ea:	52                   	push   edx
c000f3eb:	53                   	push   ebx
c000f3ec:	e8 89 ab ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	09 f0                	or     eax,esi
c000f3f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3fe:	25 ff 0f 00 00       	and    eax,0xfff
c000f403:	89 c6                	mov    esi,eax
c000f405:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f40b:	83 ec 0c             	sub    esp,0xc
c000f40e:	6a 02                	push   0x2
c000f410:	e8 58 a2 ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c000f415:	83 c4 10             	add    esp,0x10
c000f418:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f41c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f422:	83 ec 0c             	sub    esp,0xc
c000f425:	6a 01                	push   0x1
c000f427:	6a 02                	push   0x2
c000f429:	50                   	push   eax
c000f42a:	52                   	push   edx
c000f42b:	53                   	push   ebx
c000f42c:	e8 49 ab ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f431:	83 c4 20             	add    esp,0x20
c000f434:	09 f0                	or     eax,esi
c000f436:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f43a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f43f:	85 c0                	test   eax,eax
c000f441:	75 11                	jne    c000f454 <findRSDT(unsigned char*)+0x128>
c000f443:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f44a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f452:	eb 24                	jmp    c000f478 <findRSDT(unsigned char*)+0x14c>
c000f454:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f459:	83 f8 02             	cmp    eax,0x2
c000f45c:	75 12                	jne    c000f470 <findRSDT(unsigned char*)+0x144>
c000f45e:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f465:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f469:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f46d:	eb 09                	jmp    c000f478 <findRSDT(unsigned char*)+0x14c>
c000f46f:	90                   	nop
c000f470:	b8 00 00 00 00       	mov    eax,0x0
c000f475:	eb 05                	jmp    c000f47c <findRSDT(unsigned char*)+0x150>
c000f477:	90                   	nop
c000f478:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f47c:	83 c4 50             	add    esp,0x50
c000f47f:	5b                   	pop    ebx
c000f480:	5e                   	pop    esi
c000f481:	5f                   	pop    edi
c000f482:	c3                   	ret    
c000f483:	90                   	nop

c000f484 <findDataTable(unsigned char*, char*)>:
c000f484:	83 ec 1c             	sub    esp,0x1c
c000f487:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f48c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f492:	83 e0 04             	and    eax,0x4
c000f495:	0f b6 c0             	movzx  eax,al
c000f498:	85 c0                	test   eax,eax
c000f49a:	75 08                	jne    c000f4a4 <findDataTable(unsigned char*, char*)+0x20>
c000f49c:	b8 00 00 00 00       	mov    eax,0x0
c000f4a1:	eb 5d                	jmp    c000f500 <findDataTable(unsigned char*, char*)+0x7c>
c000f4a3:	90                   	nop
c000f4a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f4ac:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f4b1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f4b5:	7d 41                	jge    c000f4f8 <findDataTable(unsigned char*, char*)+0x74>
c000f4b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4bb:	c1 e0 03             	shl    eax,0x3
c000f4be:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f4c3:	83 ec 04             	sub    esp,0x4
c000f4c6:	6a 04                	push   0x4
c000f4c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4cc:	50                   	push   eax
c000f4cd:	e8 ae 0e ff ff       	call   c0000380 <memcmp>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	0f 94 c0             	sete   al
c000f4da:	0f b6 c0             	movzx  eax,al
c000f4dd:	85 c0                	test   eax,eax
c000f4df:	74 0f                	je     c000f4f0 <findDataTable(unsigned char*, char*)+0x6c>
c000f4e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e5:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4ec:	eb 12                	jmp    c000f500 <findDataTable(unsigned char*, char*)+0x7c>
c000f4ee:	66 90                	xchg   ax,ax
c000f4f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4f5:	eb b5                	jmp    c000f4ac <findDataTable(unsigned char*, char*)+0x28>
c000f4f7:	90                   	nop
c000f4f8:	b8 00 00 00 00       	mov    eax,0x0
c000f4fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <scanMADT()>:
c000f504:	53                   	push   ebx
c000f505:	83 ec 38             	sub    esp,0x38
c000f508:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f50d:	25 00 04 00 00       	and    eax,0x400
c000f512:	74 14                	je     c000f528 <scanMADT()+0x24>
c000f514:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f519:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f51f:	83 e2 fb             	and    edx,0xfffffffb
c000f522:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f528:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f52d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f533:	83 e0 04             	and    eax,0x4
c000f536:	0f b6 c0             	movzx  eax,al
c000f539:	85 c0                	test   eax,eax
c000f53b:	0f 84 6b 04 00 00    	je     c000f9ac <scanMADT()+0x4a8>
c000f541:	e8 e2 fa ff ff       	call   c000f028 <findRSDP()>
c000f546:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f54b:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f550:	85 c0                	test   eax,eax
c000f552:	75 1c                	jne    c000f570 <scanMADT()+0x6c>
c000f554:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f559:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f55f:	83 e2 fb             	and    edx,0xfffffffb
c000f562:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f568:	e9 47 04 00 00       	jmp    c000f9b4 <scanMADT()+0x4b0>
c000f56d:	8d 76 00             	lea    esi,[esi+0x0]
c000f570:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f575:	83 ec 0c             	sub    esp,0xc
c000f578:	50                   	push   eax
c000f579:	e8 ae fd ff ff       	call   c000f32c <findRSDT(unsigned char*)>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f586:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f58b:	85 c0                	test   eax,eax
c000f58d:	75 19                	jne    c000f5a8 <scanMADT()+0xa4>
c000f58f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f594:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f59a:	83 e2 fb             	and    edx,0xfffffffb
c000f59d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5a3:	e9 0c 04 00 00       	jmp    c000f9b4 <scanMADT()+0x4b0>
c000f5a8:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5ad:	83 ec 0c             	sub    esp,0xc
c000f5b0:	50                   	push   eax
c000f5b1:	e8 0a fb ff ff       	call   c000f0c0 <loadACPITables(unsigned char*)>
c000f5b6:	83 c4 10             	add    esp,0x10
c000f5b9:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5be:	83 ec 08             	sub    esp,0x8
c000f5c1:	68 09 21 02 c0       	push   0xc0022109
c000f5c6:	50                   	push   eax
c000f5c7:	e8 b8 fe ff ff       	call   c000f484 <findDataTable(unsigned char*, char*)>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f5d3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5d8:	75 1a                	jne    c000f5f4 <scanMADT()+0xf0>
c000f5da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5df:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5e5:	83 e2 fe             	and    edx,0xfffffffe
c000f5e8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5ee:	e9 c1 03 00 00       	jmp    c000f9b4 <scanMADT()+0x4b0>
c000f5f3:	90                   	nop
c000f5f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f600:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f603:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f607:	0f 87 a7 03 00 00    	ja     c000f9b4 <scanMADT()+0x4b0>
c000f60d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f615:	0f 87 99 03 00 00    	ja     c000f9b4 <scanMADT()+0x4b0>
c000f61b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f61f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f627:	8d 50 01             	lea    edx,[eax+0x1]
c000f62a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f62e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f632:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f636:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f63e:	8d 50 01             	lea    edx,[eax+0x1]
c000f641:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f645:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f649:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f64d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f651:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f656:	83 f8 02             	cmp    eax,0x2
c000f659:	0f 86 51 03 00 00    	jbe    c000f9b0 <scanMADT()+0x4ac>
c000f65f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f664:	85 c0                	test   eax,eax
c000f666:	75 58                	jne    c000f6c0 <scanMADT()+0x1bc>
c000f668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66c:	8d 50 01             	lea    edx,[eax+0x1]
c000f66f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f673:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f679:	0f b6 d2             	movzx  edx,dl
c000f67c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f680:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f684:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f68a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f68e:	8d 50 01             	lea    edx,[eax+0x1]
c000f691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f695:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f69b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f69e:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f6a4:	0f b6 d2             	movzx  edx,dl
c000f6a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6af:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f6b5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6ba:	e9 d9 02 00 00       	jmp    c000f998 <scanMADT()+0x494>
c000f6bf:	90                   	nop
c000f6c0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6c5:	83 f8 01             	cmp    eax,0x1
c000f6c8:	0f 85 1a 01 00 00    	jne    c000f7e8 <scanMADT()+0x2e4>
c000f6ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d2:	8d 50 01             	lea    edx,[eax+0x1]
c000f6d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6d9:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6df:	0f b6 d2             	movzx  edx,dl
c000f6e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6e6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6ea:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6f0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6fd:	01 d0                	add    eax,edx
c000f6ff:	83 c0 2c             	add    eax,0x2c
c000f702:	8a 00                	mov    al,BYTE PTR [eax]
c000f704:	0f b6 d0             	movzx  edx,al
c000f707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70b:	8d 48 01             	lea    ecx,[eax+0x1]
c000f70e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f712:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f716:	0f b6 c0             	movzx  eax,al
c000f719:	c1 e0 08             	shl    eax,0x8
c000f71c:	89 d1                	mov    ecx,edx
c000f71e:	09 c1                	or     ecx,eax
c000f720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f724:	8d 50 02             	lea    edx,[eax+0x2]
c000f727:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f72b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f72f:	0f b6 c0             	movzx  eax,al
c000f732:	c1 e0 10             	shl    eax,0x10
c000f735:	09 c1                	or     ecx,eax
c000f737:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f73b:	8d 50 03             	lea    edx,[eax+0x3]
c000f73e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f742:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f746:	0f b6 c0             	movzx  eax,al
c000f749:	c1 e0 18             	shl    eax,0x18
c000f74c:	09 c1                	or     ecx,eax
c000f74e:	89 ca                	mov    edx,ecx
c000f750:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f755:	0f b6 c0             	movzx  eax,al
c000f758:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f75f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f764:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f76c:	01 d0                	add    eax,edx
c000f76e:	83 c0 2c             	add    eax,0x2c
c000f771:	8a 00                	mov    al,BYTE PTR [eax]
c000f773:	0f b6 d0             	movzx  edx,al
c000f776:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f77d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f781:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f785:	0f b6 c0             	movzx  eax,al
c000f788:	c1 e0 08             	shl    eax,0x8
c000f78b:	89 d1                	mov    ecx,edx
c000f78d:	09 c1                	or     ecx,eax
c000f78f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f793:	8d 50 02             	lea    edx,[eax+0x2]
c000f796:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f79e:	0f b6 c0             	movzx  eax,al
c000f7a1:	c1 e0 10             	shl    eax,0x10
c000f7a4:	09 c1                	or     ecx,eax
c000f7a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7aa:	8d 50 03             	lea    edx,[eax+0x3]
c000f7ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7b5:	0f b6 c0             	movzx  eax,al
c000f7b8:	c1 e0 18             	shl    eax,0x18
c000f7bb:	09 c1                	or     ecx,eax
c000f7bd:	89 ca                	mov    edx,ecx
c000f7bf:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7c4:	0f b6 c0             	movzx  eax,al
c000f7c7:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f7ce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7d3:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7d8:	83 c0 01             	add    eax,0x1
c000f7db:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7e0:	e9 b3 01 00 00       	jmp    c000f998 <scanMADT()+0x494>
c000f7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f7e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7ed:	83 f8 02             	cmp    eax,0x2
c000f7f0:	0f 85 ea 00 00 00    	jne    c000f8e0 <scanMADT()+0x3dc>
c000f7f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7fa:	8d 50 01             	lea    edx,[eax+0x1]
c000f7fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f801:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f805:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f809:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f80d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f811:	8d 50 01             	lea    edx,[eax+0x1]
c000f814:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f818:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f81c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f820:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f824:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f828:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82c:	01 d0                	add    eax,edx
c000f82e:	83 c0 2c             	add    eax,0x2c
c000f831:	8a 00                	mov    al,BYTE PTR [eax]
c000f833:	0f b6 d0             	movzx  edx,al
c000f836:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f83a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f83d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f841:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f845:	0f b6 c0             	movzx  eax,al
c000f848:	c1 e0 08             	shl    eax,0x8
c000f84b:	89 d1                	mov    ecx,edx
c000f84d:	09 c1                	or     ecx,eax
c000f84f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f853:	8d 50 02             	lea    edx,[eax+0x2]
c000f856:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f85a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f85e:	0f b6 c0             	movzx  eax,al
c000f861:	c1 e0 10             	shl    eax,0x10
c000f864:	09 c1                	or     ecx,eax
c000f866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f86a:	8d 50 03             	lea    edx,[eax+0x3]
c000f86d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f871:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f875:	0f b6 c0             	movzx  eax,al
c000f878:	c1 e0 18             	shl    eax,0x18
c000f87b:	09 c8                	or     eax,ecx
c000f87d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f881:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f886:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f88a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f88e:	01 d0                	add    eax,edx
c000f890:	83 c0 2c             	add    eax,0x2c
c000f893:	8a 00                	mov    al,BYTE PTR [eax]
c000f895:	0f b6 c0             	movzx  eax,al
c000f898:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f89c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f89f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8a3:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f8a7:	0f b6 d2             	movzx  edx,dl
c000f8aa:	c1 e2 08             	shl    edx,0x8
c000f8ad:	09 d0                	or     eax,edx
c000f8af:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f8b4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8b9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f8be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f8c2:	88 90 c8 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc738],dl
c000f8c8:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f8cd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f8d2:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f8da:	e9 b9 00 00 00       	jmp    c000f998 <scanMADT()+0x494>
c000f8df:	90                   	nop
c000f8e0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8e5:	83 f8 04             	cmp    eax,0x4
c000f8e8:	0f 85 9a 00 00 00    	jne    c000f988 <scanMADT()+0x484>
c000f8ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f8f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f901:	0f b6 c0             	movzx  eax,al
c000f904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f908:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f90c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f910:	01 d0                	add    eax,edx
c000f912:	83 c0 2c             	add    eax,0x2c
c000f915:	8a 00                	mov    al,BYTE PTR [eax]
c000f917:	0f b6 d0             	movzx  edx,al
c000f91a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f91e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f921:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f925:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f929:	0f b6 c0             	movzx  eax,al
c000f92c:	c1 e0 08             	shl    eax,0x8
c000f92f:	09 d0                	or     eax,edx
c000f931:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f935:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f93a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f93e:	8d 50 01             	lea    edx,[eax+0x1]
c000f941:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f945:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f949:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f94d:	0f b6 c0             	movzx  eax,al
c000f950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f958:	c1 e0 08             	shl    eax,0x8
c000f95b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f95f:	89 c1                	mov    ecx,eax
c000f961:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f965:	c1 e0 18             	shl    eax,0x18
c000f968:	89 c3                	mov    ebx,eax
c000f96a:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f96f:	8d 50 01             	lea    edx,[eax+0x1]
c000f972:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f978:	09 d9                	or     ecx,ebx
c000f97a:	89 ca                	mov    edx,ecx
c000f97c:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f983:	eb 13                	jmp    c000f998 <scanMADT()+0x494>
c000f985:	8d 76 00             	lea    esi,[esi+0x0]
c000f988:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f98d:	83 f8 05             	cmp    eax,0x5
c000f990:	75 06                	jne    c000f998 <scanMADT()+0x494>
c000f992:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f997:	90                   	nop
c000f998:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f99d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9a1:	01 d0                	add    eax,edx
c000f9a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f9a7:	e9 50 fc ff ff       	jmp    c000f5fc <scanMADT()+0xf8>
c000f9ac:	90                   	nop
c000f9ad:	eb 05                	jmp    c000f9b4 <scanMADT()+0x4b0>
c000f9af:	90                   	nop
c000f9b0:	90                   	nop
c000f9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9b4:	83 c4 38             	add    esp,0x38
c000f9b7:	5b                   	pop    ebx
c000f9b8:	c3                   	ret    
c000f9b9:	90                   	nop
c000f9ba:	66 90                	xchg   ax,ax

c000f9bc <ACPI::ACPI()>:
c000f9bc:	83 ec 0c             	sub    esp,0xc
c000f9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c3:	83 ec 08             	sub    esp,0x8
c000f9c6:	68 0e 21 02 c0       	push   0xc002210e
c000f9cb:	50                   	push   eax
c000f9cc:	e8 ed d1 ff ff       	call   c000cbbe <Device::Device(char const*)>
c000f9d1:	83 c4 10             	add    esp,0x10
c000f9d4:	ba 18 23 02 c0       	mov    edx,0xc0022318
c000f9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9dd:	89 10                	mov    DWORD PTR [eax],edx
c000f9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ee:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9fc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000fa06:	e8 f9 fa ff ff       	call   c000f504 <scanMADT()>
c000fa0b:	90                   	nop
c000fa0c:	83 c4 0c             	add    esp,0xc
c000fa0f:	c3                   	ret    

c000fa10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000fa10:	83 ec 2c             	sub    esp,0x2c
c000fa13:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fa17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fa1b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa1f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000fa23:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000fa28:	88 d0                	mov    al,dl
c000fa2a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa2e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fa33:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa3b:	90                   	nop
c000fa3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa40:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa46:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa4a:	0f 8d b0 00 00 00    	jge    c000fb00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa58:	83 c2 2a             	add    edx,0x2a
c000fa5b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa64:	0f b7 c0             	movzx  eax,ax
c000fa67:	39 c2                	cmp    edx,eax
c000fa69:	0f 85 85 00 00 00    	jne    c000faf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa77:	83 c2 2a             	add    edx,0x2a
c000fa7a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa7e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa83:	0f b6 c0             	movzx  eax,al
c000fa86:	39 c2                	cmp    edx,eax
c000fa88:	75 6a                	jne    c000faf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa8a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa8f:	85 c0                	test   eax,eax
c000fa91:	74 3d                	je     c000fad0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa9b:	83 c2 2a             	add    edx,0x2a
c000fa9e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000faa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000faa9:	39 c2                	cmp    edx,eax
c000faab:	74 13                	je     c000fac0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000faad:	83 ec 0c             	sub    esp,0xc
c000fab0:	68 98 22 02 c0       	push   0xc0022298
c000fab5:	e8 3d 1c 00 00       	call   c00116f7 <KePanic(char const*)>
c000faba:	83 c4 10             	add    esp,0x10
c000fabd:	8d 76 00             	lea    esi,[esi+0x0]
c000fac0:	83 ec 0c             	sub    esp,0xc
c000fac3:	68 13 21 02 c0       	push   0xc0022113
c000fac8:	e8 2a 1c 00 00       	call   c00116f7 <KePanic(char const*)>
c000facd:	83 c4 10             	add    esp,0x10
c000fad0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fad4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fad8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fadc:	83 c2 2a             	add    edx,0x2a
c000fadf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fae3:	8b 02                	mov    eax,DWORD PTR [edx]
c000fae5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fae8:	89 01                	mov    DWORD PTR [ecx],eax
c000faea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000faed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000faf2:	66 90                	xchg   ax,ax
c000faf4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000faf9:	e9 3e ff ff ff       	jmp    c000fa3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fafe:	66 90                	xchg   ax,ax
c000fb00:	90                   	nop
c000fb01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb05:	83 c4 2c             	add    esp,0x2c
c000fb08:	c2 04 00             	ret    0x4
c000fb0b:	90                   	nop

c000fb0c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fb0c:	83 ec 1c             	sub    esp,0x1c
c000fb0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb13:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fb17:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fb1b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fb20:	88 c8                	mov    al,cl
c000fb22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fb26:	88 d0                	mov    al,dl
c000fb28:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fb2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb30:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb3d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fb41:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fb45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb49:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb53:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fb56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb5a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb63:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb69:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb6d:	83 c0 01             	add    eax,0x1
c000fb70:	88 c1                	mov    cl,al
c000fb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb76:	83 c2 2a             	add    edx,0x2a
c000fb79:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb81:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb8e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb92:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb9a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fba0:	8d 50 01             	lea    edx,[eax+0x1]
c000fba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fbb7:	3d 00 02 00 00       	cmp    eax,0x200
c000fbbc:	75 12                	jne    c000fbd0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fbbe:	83 ec 0c             	sub    esp,0xc
c000fbc1:	68 22 21 02 c0       	push   0xc0022122
c000fbc6:	e8 2c 1b 00 00       	call   c00116f7 <KePanic(char const*)>
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	66 90                	xchg   ax,ax
c000fbd0:	90                   	nop
c000fbd1:	83 c4 1c             	add    esp,0x1c
c000fbd4:	c3                   	ret    
c000fbd5:	90                   	nop
c000fbd6:	66 90                	xchg   ax,ax

c000fbd8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fbd8:	b8 00 00 00 00       	mov    eax,0x0
c000fbdd:	c3                   	ret    
c000fbde:	66 90                	xchg   ax,ax

c000fbe0 <ACPI::detectPCI()>:
c000fbe0:	53                   	push   ebx
c000fbe1:	83 ec 28             	sub    esp,0x28
c000fbe4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbe9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbf3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbf9:	83 e0 04             	and    eax,0x4
c000fbfc:	0f b6 c0             	movzx  eax,al
c000fbff:	85 c0                	test   eax,eax
c000fc01:	74 2d                	je     c000fc30 <ACPI::detectPCI()+0x50>
c000fc03:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fc08:	83 ec 08             	sub    esp,0x8
c000fc0b:	68 3f 21 02 c0       	push   0xc002213f
c000fc10:	50                   	push   eax
c000fc11:	e8 6e f8 ff ff       	call   c000f484 <findDataTable(unsigned char*, char*)>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc1d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fc22:	74 0c                	je     c000fc30 <ACPI::detectPCI()+0x50>
c000fc24:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc29:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc2e:	66 90                	xchg   ax,ax
c000fc30:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc3c:	8a 00                	mov    al,BYTE PTR [eax]
c000fc3e:	0f b6 c0             	movzx  eax,al
c000fc41:	83 f8 01             	cmp    eax,0x1
c000fc44:	75 0e                	jne    c000fc54 <ACPI::detectPCI()+0x74>
c000fc46:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc4b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc50:	eb 2e                	jmp    c000fc80 <ACPI::detectPCI()+0xa0>
c000fc52:	66 90                	xchg   ax,ax
c000fc54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc58:	8a 00                	mov    al,BYTE PTR [eax]
c000fc5a:	0f b6 c0             	movzx  eax,al
c000fc5d:	83 f8 02             	cmp    eax,0x2
c000fc60:	75 1e                	jne    c000fc80 <ACPI::detectPCI()+0xa0>
c000fc62:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc67:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc6c:	85 c0                	test   eax,eax
c000fc6e:	74 10                	je     c000fc80 <ACPI::detectPCI()+0xa0>
c000fc70:	83 ec 0c             	sub    esp,0xc
c000fc73:	68 c8 22 02 c0       	push   0xc00222c8
c000fc78:	e8 7a 1a 00 00       	call   c00116f7 <KePanic(char const*)>
c000fc7d:	83 c4 10             	add    esp,0x10
c000fc80:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc84:	83 f0 01             	xor    eax,0x1
c000fc87:	0f b6 c0             	movzx  eax,al
c000fc8a:	85 c0                	test   eax,eax
c000fc8c:	74 46                	je     c000fcd4 <ACPI::detectPCI()+0xf4>
c000fc8e:	e8 9d 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc97:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc9c:	75 0e                	jne    c000fcac <ACPI::detectPCI()+0xcc>
c000fc9e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fca3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fca8:	eb 2a                	jmp    c000fcd4 <ACPI::detectPCI()+0xf4>
c000fcaa:	66 90                	xchg   ax,ax
c000fcac:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fcb1:	75 21                	jne    c000fcd4 <ACPI::detectPCI()+0xf4>
c000fcb3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcb8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fcbd:	85 c0                	test   eax,eax
c000fcbf:	74 13                	je     c000fcd4 <ACPI::detectPCI()+0xf4>
c000fcc1:	83 ec 0c             	sub    esp,0xc
c000fcc4:	68 c8 22 02 c0       	push   0xc00222c8
c000fcc9:	e8 29 1a 00 00       	call   c00116f7 <KePanic(char const*)>
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	8d 76 00             	lea    esi,[esi+0x0]
c000fcd4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fcd9:	85 c0                	test   eax,eax
c000fcdb:	0f 84 87 00 00 00    	je     c000fd68 <ACPI::detectPCI()+0x188>
c000fce1:	83 ec 0c             	sub    esp,0xc
c000fce4:	68 44 21 02 c0       	push   0xc0022144
c000fce9:	e8 09 13 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c000fcee:	83 c4 10             	add    esp,0x10
c000fcf1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcf9:	83 ec 0c             	sub    esp,0xc
c000fcfc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd00:	e8 11 7e ff ff       	call   c0007b16 <malloc>
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	89 c3                	mov    ebx,eax
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	53                   	push   ebx
c000fd0e:	e8 a1 b5 00 00       	call   c001b2b4 <PCI::PCI()>
c000fd13:	83 c4 10             	add    esp,0x10
c000fd16:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fd1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd1e:	83 ec 08             	sub    esp,0x8
c000fd21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd25:	50                   	push   eax
c000fd26:	e8 fb cc ff ff       	call   c000ca26 <Device::addChild(Device*)>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd32:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd34:	83 c0 08             	add    eax,0x8
c000fd37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd39:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd3e:	85 d2                	test   edx,edx
c000fd40:	74 0a                	je     c000fd4c <ACPI::detectPCI()+0x16c>
c000fd42:	ba 01 00 00 00       	mov    edx,0x1
c000fd47:	eb 0b                	jmp    c000fd54 <ACPI::detectPCI()+0x174>
c000fd49:	8d 76 00             	lea    esi,[esi+0x0]
c000fd4c:	ba 02 00 00 00       	mov    edx,0x2
c000fd51:	8d 76 00             	lea    esi,[esi+0x0]
c000fd54:	6a 00                	push   0x0
c000fd56:	6a 00                	push   0x0
c000fd58:	52                   	push   edx
c000fd59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd5d:	ff d0                	call   eax
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	e9 91 00 00 00       	jmp    c000fdf8 <ACPI::detectPCI()+0x218>
c000fd67:	90                   	nop
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	68 5c 21 02 c0       	push   0xc002215c
c000fd70:	e8 82 12 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd7f:	83 ec 0c             	sub    esp,0xc
c000fd82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd86:	e8 8b 7d ff ff       	call   c0007b16 <malloc>
c000fd8b:	83 c4 10             	add    esp,0x10
c000fd8e:	89 c3                	mov    ebx,eax
c000fd90:	83 ec 0c             	sub    esp,0xc
c000fd93:	53                   	push   ebx
c000fd94:	e8 b5 c0 00 00       	call   c001be4e <IDE::IDE()>
c000fd99:	83 c4 10             	add    esp,0x10
c000fd9c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fda0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fda4:	83 ec 08             	sub    esp,0x8
c000fda7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fdab:	50                   	push   eax
c000fdac:	e8 75 cc ff ff       	call   c000ca26 <Device::addChild(Device*)>
c000fdb1:	83 c4 10             	add    esp,0x10
c000fdb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdb8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fdc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdc6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fdcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdd3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fde0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde2:	83 c0 08             	add    eax,0x8
c000fde5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde7:	6a 00                	push   0x0
c000fde9:	6a 00                	push   0x0
c000fdeb:	6a 00                	push   0x0
c000fded:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdf1:	ff d0                	call   eax
c000fdf3:	83 c4 10             	add    esp,0x10
c000fdf6:	66 90                	xchg   ax,ax
c000fdf8:	90                   	nop
c000fdf9:	83 c4 28             	add    esp,0x28
c000fdfc:	5b                   	pop    ebx
c000fdfd:	c3                   	ret    
c000fdfe:	66 90                	xchg   ax,ax

c000fe00 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fe00:	83 ec 1c             	sub    esp,0x1c
c000fe03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe07:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe0a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe0e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe13:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe18:	83 ec 08             	sub    esp,0x8
c000fe1b:	52                   	push   edx
c000fe1c:	50                   	push   eax
c000fe1d:	e8 b8 73 ff ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c000fe22:	83 c4 10             	add    esp,0x10
c000fe25:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fe29:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe2e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe33:	83 ec 04             	sub    esp,0x4
c000fe36:	6a 01                	push   0x1
c000fe38:	52                   	push   edx
c000fe39:	50                   	push   eax
c000fe3a:	e8 b5 74 ff ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	90                   	nop
c000fe43:	83 c4 1c             	add    esp,0x1c
c000fe46:	c3                   	ret    
c000fe47:	90                   	nop

c000fe48 <ACPI::sleep()>:
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe50:	85 c0                	test   eax,eax
c000fe52:	74 08                	je     c000fe5c <ACPI::sleep()+0x14>
c000fe54:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe59:	ff d0                	call   eax
c000fe5b:	90                   	nop
c000fe5c:	90                   	nop
c000fe5d:	83 c4 0c             	add    esp,0xc
c000fe60:	c3                   	ret    
c000fe61:	90                   	nop
c000fe62:	66 90                	xchg   ax,ax

c000fe64 <ACPI::open(int, int, void*)>:
c000fe64:	57                   	push   edi
c000fe65:	56                   	push   esi
c000fe66:	53                   	push   ebx
c000fe67:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe6d:	83 ec 0c             	sub    esp,0xc
c000fe70:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe77:	e8 64 fd ff ff       	call   c000fbe0 <ACPI::detectPCI()>
c000fe7c:	83 c4 10             	add    esp,0x10
c000fe7f:	83 ec 0c             	sub    esp,0xc
c000fe82:	68 f0 22 02 c0       	push   0xc00222f0
c000fe87:	e8 6b 11 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe94:	8a 00                	mov    al,BYTE PTR [eax]
c000fe96:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fe9d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fea5:	83 f8 01             	cmp    eax,0x1
c000fea8:	75 12                	jne    c000febc <ACPI::open(int, int, void*)+0x58>
c000feaa:	83 ec 0c             	sub    esp,0xc
c000fead:	68 71 21 02 c0       	push   0xc0022171
c000feb2:	e8 4c 4e 00 00       	call   c0014d03 <Thr::loadKernelSymbolTable(char const*)>
c000feb7:	83 c4 10             	add    esp,0x10
c000feba:	eb 34                	jmp    c000fef0 <ACPI::open(int, int, void*)+0x8c>
c000febc:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fec4:	3d bb 00 00 00       	cmp    eax,0xbb
c000fec9:	75 15                	jne    c000fee0 <ACPI::open(int, int, void*)+0x7c>
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	68 8f 21 02 c0       	push   0xc002218f
c000fed3:	e8 2b 4e 00 00       	call   c0014d03 <Thr::loadKernelSymbolTable(char const*)>
c000fed8:	83 c4 10             	add    esp,0x10
c000fedb:	eb 13                	jmp    c000fef0 <ACPI::open(int, int, void*)+0x8c>
c000fedd:	8d 76 00             	lea    esi,[esi+0x0]
c000fee0:	83 ec 0c             	sub    esp,0xc
c000fee3:	68 ad 21 02 c0       	push   0xc00221ad
c000fee8:	e8 0a 18 00 00       	call   c00116f7 <KePanic(char const*)>
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fef8:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ff03:	83 ec 0c             	sub    esp,0xc
c000ff06:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff0d:	e8 04 7c ff ff       	call   c0007b16 <malloc>
c000ff12:	83 c4 10             	add    esp,0x10
c000ff15:	89 c3                	mov    ebx,eax
c000ff17:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff1c:	83 ec 04             	sub    esp,0x4
c000ff1f:	50                   	push   eax
c000ff20:	68 c7 21 02 c0       	push   0xc00221c7
c000ff25:	53                   	push   ebx
c000ff26:	e8 81 bc ff ff       	call   c000bbac <File::File(char const*, Process*)>
c000ff2b:	83 c4 10             	add    esp,0x10
c000ff2e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ff35:	83 ec 08             	sub    esp,0x8
c000ff38:	6a 01                	push   0x1
c000ff3a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff41:	e8 84 bc ff ff       	call   c000bbca <File::open(FileOpenMode)>
c000ff46:	83 c4 10             	add    esp,0x10
c000ff49:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ff50:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ff58:	75 16                	jne    c000ff70 <ACPI::open(int, int, void*)+0x10c>
c000ff5a:	83 ec 0c             	sub    esp,0xc
c000ff5d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff64:	e8 bf bc ff ff       	call   c000bc28 <File::close()>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	eb 0a                	jmp    c000ff78 <ACPI::open(int, int, void*)+0x114>
c000ff6e:	66 90                	xchg   ax,ax
c000ff70:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff78:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff80:	74 1e                	je     c000ffa0 <ACPI::open(int, int, void*)+0x13c>
c000ff82:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ff89:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff8b:	83 c0 08             	add    eax,0x8
c000ff8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff90:	83 ec 0c             	sub    esp,0xc
c000ff93:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff9a:	ff d0                	call   eax
c000ff9c:	83 c4 10             	add    esp,0x10
c000ff9f:	90                   	nop
c000ffa0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ffa7:	83 f0 01             	xor    eax,0x1
c000ffaa:	0f b6 c0             	movzx  eax,al
c000ffad:	85 c0                	test   eax,eax
c000ffaf:	74 43                	je     c000fff4 <ACPI::open(int, int, void*)+0x190>
c000ffb1:	83 ec 0c             	sub    esp,0xc
c000ffb4:	68 e5 21 02 c0       	push   0xc00221e5
c000ffb9:	e8 39 10 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c000ffbe:	83 c4 10             	add    esp,0x10
c000ffc1:	83 ec 04             	sub    esp,0x4
c000ffc4:	6a 0c                	push   0xc
c000ffc6:	68 00 22 02 c0       	push   0xc0022200
c000ffcb:	68 11 22 02 c0       	push   0xc0022211
c000ffd0:	e8 6b 3f 00 00       	call   c0013f40 <Reg::readIntWithDefault(char*, char*, int)>
c000ffd5:	83 c4 10             	add    esp,0x10
c000ffd8:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ffdf:	83 ec 0c             	sub    esp,0xc
c000ffe2:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ffe9:	e8 ae 98 ff ff       	call   c000989c <Virt::setupPageSwapping(int)>
c000ffee:	83 c4 10             	add    esp,0x10
c000fff1:	8d 76 00             	lea    esi,[esi+0x0]
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	68 75 0c 02 c0       	push   0xc0020c75
c000fffc:	e8 f6 0f 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0010001:	83 c4 10             	add    esp,0x10
c0010004:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001000b:	83 ec 08             	sub    esp,0x8
c001000e:	6a 13                	push   0x13
c0010010:	50                   	push   eax
c0010011:	e8 28 cd ff ff       	call   c000cd3e <getDevicesOfType(DeviceType)>
c0010016:	83 c4 0c             	add    esp,0xc
c0010019:	8d 76 00             	lea    esi,[esi+0x0]
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010026:	50                   	push   eax
c0010027:	e8 04 00 01 00       	call   c0020030 <LinkedList<Device>::isEmpty()>
c001002c:	83 c4 10             	add    esp,0x10
c001002f:	83 f0 01             	xor    eax,0x1
c0010032:	0f b6 c0             	movzx  eax,al
c0010035:	85 c0                	test   eax,eax
c0010037:	0f 84 47 01 00 00    	je     c0010184 <ACPI::open(int, int, void*)+0x320>
c001003d:	83 ec 0c             	sub    esp,0xc
c0010040:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010047:	50                   	push   eax
c0010048:	e8 ff ff 00 00       	call   c002004c <LinkedList<Device>::getFirstElement()>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0010057:	83 ec 0c             	sub    esp,0xc
c001005a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010061:	50                   	push   eax
c0010062:	e8 ed ff 00 00       	call   c0020054 <LinkedList<Device>::removeFirst()>
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0010071:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010078:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001007f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010083:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010089:	ba 09 00 00 00       	mov    edx,0x9
c001008e:	fc                   	cld    
c001008f:	89 c7                	mov    edi,eax
c0010091:	89 de                	mov    esi,ebx
c0010093:	89 d1                	mov    ecx,edx
c0010095:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010097:	83 ec 08             	sub    esp,0x8
c001009a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001009e:	50                   	push   eax
c001009f:	83 ec 24             	sub    esp,0x24
c00100a2:	89 e0                	mov    eax,esp
c00100a4:	89 c3                	mov    ebx,eax
c00100a6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00100aa:	ba 09 00 00 00       	mov    edx,0x9
c00100af:	89 df                	mov    edi,ebx
c00100b1:	89 c6                	mov    esi,eax
c00100b3:	89 d1                	mov    ecx,edx
c00100b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100b7:	e8 e2 b6 00 00       	call   c001b79e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00100bc:	83 c4 30             	add    esp,0x30
c00100bf:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00100c6:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00100ce:	0f 84 48 ff ff ff    	je     c001001c <ACPI::open(int, int, void*)+0x1b8>
c00100d4:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00100df:	83 ec 0c             	sub    esp,0xc
c00100e2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00100e9:	e8 28 7a ff ff       	call   c0007b16 <malloc>
c00100ee:	83 c4 10             	add    esp,0x10
c00100f1:	89 c3                	mov    ebx,eax
c00100f3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100f8:	83 ec 04             	sub    esp,0x4
c00100fb:	50                   	push   eax
c00100fc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010103:	53                   	push   ebx
c0010104:	e8 a3 ba ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0010113:	83 ec 0c             	sub    esp,0xc
c0010116:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001011d:	e8 6c bd ff ff       	call   c000be8e <File::exists()>
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	0f b6 c0             	movzx  eax,al
c0010128:	85 c0                	test   eax,eax
c001012a:	74 28                	je     c0010154 <ACPI::open(int, int, void*)+0x2f0>
c001012c:	83 ec 08             	sub    esp,0x8
c001012f:	6a 01                	push   0x1
c0010131:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010138:	e8 40 56 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c001013d:	83 c4 10             	add    esp,0x10
c0010140:	83 ec 08             	sub    esp,0x8
c0010143:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001014a:	50                   	push   eax
c001014b:	e8 5e 58 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c0010150:	83 c4 10             	add    esp,0x10
c0010153:	90                   	nop
c0010154:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001015c:	0f 84 ba fe ff ff    	je     c001001c <ACPI::open(int, int, void*)+0x1b8>
c0010162:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010169:	8b 00                	mov    eax,DWORD PTR [eax]
c001016b:	83 c0 08             	add    eax,0x8
c001016e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001017a:	ff d0                	call   eax
c001017c:	83 c4 10             	add    esp,0x10
c001017f:	e9 98 fe ff ff       	jmp    c001001c <ACPI::open(int, int, void*)+0x1b8>
c0010184:	83 ec 0c             	sub    esp,0xc
c0010187:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001018e:	50                   	push   eax
c001018f:	e8 98 fe 00 00       	call   c002002c <LinkedList<Device>::~LinkedList()>
c0010194:	83 c4 10             	add    esp,0x10
c0010197:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c001019d:	83 ec 08             	sub    esp,0x8
c00101a0:	6a 01                	push   0x1
c00101a2:	68 18 22 02 c0       	push   0xc0022218
c00101a7:	e8 d1 55 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c00101ac:	83 c4 10             	add    esp,0x10
c00101af:	83 ec 08             	sub    esp,0x8
c00101b2:	53                   	push   ebx
c00101b3:	50                   	push   eax
c00101b4:	e8 f5 57 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c00101b9:	83 c4 10             	add    esp,0x10
c00101bc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00101c1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00101c7:	83 e0 04             	and    eax,0x4
c00101ca:	0f b6 c0             	movzx  eax,al
c00101cd:	85 c0                	test   eax,eax
c00101cf:	0f 84 1b 01 00 00    	je     c00102f0 <ACPI::open(int, int, void*)+0x48c>
c00101d5:	83 ec 0c             	sub    esp,0xc
c00101d8:	68 35 22 02 c0       	push   0xc0022235
c00101dd:	e8 15 0e 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c00101e2:	83 c4 10             	add    esp,0x10
c00101e5:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00101f0:	83 ec 0c             	sub    esp,0xc
c00101f3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00101fa:	e8 17 79 ff ff       	call   c0007b16 <malloc>
c00101ff:	83 c4 10             	add    esp,0x10
c0010202:	89 c3                	mov    ebx,eax
c0010204:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010209:	83 ec 04             	sub    esp,0x4
c001020c:	50                   	push   eax
c001020d:	68 52 22 02 c0       	push   0xc0022252
c0010212:	53                   	push   ebx
c0010213:	e8 94 b9 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0010222:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001022a:	74 20                	je     c001024c <ACPI::open(int, int, void*)+0x3e8>
c001022c:	83 ec 0c             	sub    esp,0xc
c001022f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010236:	e8 53 bc ff ff       	call   c000be8e <File::exists()>
c001023b:	83 c4 10             	add    esp,0x10
c001023e:	0f b6 c0             	movzx  eax,al
c0010241:	85 c0                	test   eax,eax
c0010243:	74 07                	je     c001024c <ACPI::open(int, int, void*)+0x3e8>
c0010245:	b0 01                	mov    al,0x1
c0010247:	eb 07                	jmp    c0010250 <ACPI::open(int, int, void*)+0x3ec>
c0010249:	8d 76 00             	lea    esi,[esi+0x0]
c001024c:	b0 00                	mov    al,0x0
c001024e:	66 90                	xchg   ax,ax
c0010250:	0f b6 c0             	movzx  eax,al
c0010253:	85 c0                	test   eax,eax
c0010255:	74 25                	je     c001027c <ACPI::open(int, int, void*)+0x418>
c0010257:	83 ec 08             	sub    esp,0x8
c001025a:	6a 01                	push   0x1
c001025c:	68 52 22 02 c0       	push   0xc0022252
c0010261:	e8 17 55 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c0010266:	83 c4 10             	add    esp,0x10
c0010269:	83 ec 08             	sub    esp,0x8
c001026c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010273:	50                   	push   eax
c0010274:	e8 35 57 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c0010279:	83 c4 10             	add    esp,0x10
c001027c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010284:	74 2a                	je     c00102b0 <ACPI::open(int, int, void*)+0x44c>
c0010286:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001028e:	74 20                	je     c00102b0 <ACPI::open(int, int, void*)+0x44c>
c0010290:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0010297:	8b 00                	mov    eax,DWORD PTR [eax]
c0010299:	83 c0 08             	add    eax,0x8
c001029c:	8b 00                	mov    eax,DWORD PTR [eax]
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00102a8:	ff d0                	call   eax
c00102aa:	83 c4 10             	add    esp,0x10
c00102ad:	8d 76 00             	lea    esi,[esi+0x0]
c00102b0:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00102b5:	83 ec 08             	sub    esp,0x8
c00102b8:	68 6f 22 02 c0       	push   0xc002226f
c00102bd:	50                   	push   eax
c00102be:	e8 c1 f1 ff ff       	call   c000f484 <findDataTable(unsigned char*, char*)>
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00102cd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00102d5:	74 19                	je     c00102f0 <ACPI::open(int, int, void*)+0x48c>
c00102d7:	83 ec 08             	sub    esp,0x8
c00102da:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00102e1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00102e8:	e8 13 fb ff ff       	call   c000fe00 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00102ed:	83 c4 10             	add    esp,0x10
c00102f0:	b8 00 00 00 00       	mov    eax,0x0
c00102f5:	81 c4 70 01 00 00    	add    esp,0x170
c00102fb:	5b                   	pop    ebx
c00102fc:	5e                   	pop    esi
c00102fd:	5f                   	pop    edi
c00102fe:	c3                   	ret    
c00102ff:	90                   	nop

c0010300 <CPU::close(int, int, void*)>:
c0010300:	31 c0                	xor    eax,eax
c0010302:	c3                   	ret    
c0010303:	90                   	nop

c0010304 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010304:	60                   	pusha  
c0010305:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010309:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001030d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010311:	9c                   	pushf  
c0010312:	fa                   	cli    
c0010313:	0f 09                	wbinvd 
c0010315:	0f 30                	wrmsr  
c0010317:	9d                   	popf   
c0010318:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001031c:	89 02                	mov    DWORD PTR [edx],eax
c001031e:	61                   	popa   
c001031f:	c3                   	ret    

c0010320 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010320:	60                   	pusha  
c0010321:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010325:	9c                   	pushf  
c0010326:	fa                   	cli    
c0010327:	0f 09                	wbinvd 
c0010329:	31 c0                	xor    eax,eax
c001032b:	31 d2                	xor    edx,edx
c001032d:	0f 32                	rdmsr  
c001032f:	9d                   	popf   
c0010330:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010334:	89 02                	mov    DWORD PTR [edx],eax
c0010336:	61                   	popa   
c0010337:	c3                   	ret    

c0010338 <CPU::AMD_K6_writeback(int, int, int)>:
c0010338:	56                   	push   esi
c0010339:	53                   	push   ebx
c001033a:	83 ec 10             	sub    esp,0x10
c001033d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010341:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010346:	75 5d                	jne    c00103a5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010348:	83 f8 08             	cmp    eax,0x8
c001034b:	75 09                	jne    c0010356 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001034d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010352:	7e 13                	jle    c0010367 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010354:	eb 30                	jmp    c0010386 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010356:	83 f8 06             	cmp    eax,0x6
c0010359:	7c 4a                	jl     c00103a5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001035b:	83 f8 07             	cmp    eax,0x7
c001035e:	7e 07                	jle    c0010367 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010360:	83 f8 09             	cmp    eax,0x9
c0010363:	74 21                	je     c0010386 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010365:	eb 3e                	jmp    c00103a5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010367:	89 e6                	mov    esi,esp
c0010369:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001036f:	56                   	push   esi
c0010370:	c1 eb 15             	shr    ebx,0x15
c0010373:	68 82 00 00 c0       	push   0xc0000082
c0010378:	83 e3 7e             	and    ebx,0x7e
c001037b:	e8 a0 ff ff ff       	call   c0010320 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010380:	56                   	push   esi
c0010381:	6a 00                	push   0x0
c0010383:	53                   	push   ebx
c0010384:	eb 12                	jmp    c0010398 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010386:	89 e3                	mov    ebx,esp
c0010388:	53                   	push   ebx
c0010389:	68 82 00 00 c0       	push   0xc0000082
c001038e:	e8 8d ff ff ff       	call   c0010320 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010393:	53                   	push   ebx
c0010394:	6a 00                	push   0x0
c0010396:	6a 00                	push   0x0
c0010398:	68 82 00 00 c0       	push   0xc0000082
c001039d:	e8 62 ff ff ff       	call   c0010304 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00103a2:	83 c4 18             	add    esp,0x18
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	5b                   	pop    ebx
c00103a9:	5e                   	pop    esi
c00103aa:	c3                   	ret    
c00103ab:	90                   	nop

c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00103ac:	55                   	push   ebp
c00103ad:	57                   	push   edi
c00103ae:	56                   	push   esi
c00103af:	53                   	push   ebx
c00103b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00103b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00103bc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00103c0:	39 05 d8 38 02 c0    	cmp    DWORD PTR ds:0xc00238d8,eax
c00103c6:	75 23                	jne    c00103eb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00103c8:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00103cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00103d1:	89 06                	mov    DWORD PTR [esi],eax
c00103d3:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00103d8:	89 07                	mov    DWORD PTR [edi],eax
c00103da:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00103df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103e2:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00103e7:	89 02                	mov    DWORD PTR [edx],eax
c00103e9:	eb 3f                	jmp    c001042a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00103eb:	31 c9                	xor    ecx,ecx
c00103ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103f1:	0f a2                	cpuid  
c00103f3:	89 06                	mov    DWORD PTR [esi],eax
c00103f5:	89 1f                	mov    DWORD PTR [edi],ebx
c00103f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103fb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00103fe:	89 10                	mov    DWORD PTR [eax],edx
c0010400:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010404:	a3 d8 38 02 c0       	mov    ds:0xc00238d8,eax
c0010409:	8b 06                	mov    eax,DWORD PTR [esi]
c001040b:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010410:	8b 07                	mov    eax,DWORD PTR [edi]
c0010412:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010417:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001041a:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c001041f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010423:	8b 00                	mov    eax,DWORD PTR [eax]
c0010425:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001042a:	5b                   	pop    ebx
c001042b:	5e                   	pop    esi
c001042c:	5f                   	pop    edi
c001042d:	5d                   	pop    ebp
c001042e:	c3                   	ret    
c001042f:	90                   	nop

c0010430 <CPU::cpuidCheckEDX(unsigned int)>:
c0010430:	83 ec 10             	sub    esp,0x10
c0010433:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010437:	50                   	push   eax
c0010438:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001043c:	50                   	push   eax
c001043d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010441:	50                   	push   eax
c0010442:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010446:	50                   	push   eax
c0010447:	6a 01                	push   0x1
c0010449:	e8 5e ff ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001044e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010452:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010456:	0f 95 c0             	setne  al
c0010459:	83 c4 24             	add    esp,0x24
c001045c:	c3                   	ret    
c001045d:	90                   	nop

c001045e <CPU::cpuidCheckECX(unsigned int)>:
c001045e:	83 ec 10             	sub    esp,0x10
c0010461:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010465:	50                   	push   eax
c0010466:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046a:	50                   	push   eax
c001046b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046f:	50                   	push   eax
c0010470:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010474:	50                   	push   eax
c0010475:	6a 01                	push   0x1
c0010477:	e8 30 ff ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001047c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010480:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010484:	0f 95 c0             	setne  al
c0010487:	83 c4 24             	add    esp,0x24
c001048a:	c3                   	ret    
c001048b:	90                   	nop

c001048c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001048c:	83 ec 10             	sub    esp,0x10
c001048f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010493:	50                   	push   eax
c0010494:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010498:	50                   	push   eax
c0010499:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001049d:	50                   	push   eax
c001049e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104a2:	50                   	push   eax
c00104a3:	6a 07                	push   0x7
c00104a5:	e8 02 ff ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104ae:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00104b2:	0f 95 c0             	setne  al
c00104b5:	83 c4 24             	add    esp,0x24
c00104b8:	c3                   	ret    
c00104b9:	90                   	nop

c00104ba <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00104ba:	83 ec 10             	sub    esp,0x10
c00104bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104c1:	50                   	push   eax
c00104c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104c6:	50                   	push   eax
c00104c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104cb:	50                   	push   eax
c00104cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104d0:	50                   	push   eax
c00104d1:	6a 07                	push   0x7
c00104d3:	e8 d4 fe ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104dc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00104e0:	0f 95 c0             	setne  al
c00104e3:	83 c4 24             	add    esp,0x24
c00104e6:	c3                   	ret    
c00104e7:	90                   	nop

c00104e8 <CPU::CPU()>:
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ef:	83 ec 08             	sub    esp,0x8
c00104f2:	68 2d 24 02 c0       	push   0xc002242d
c00104f7:	50                   	push   eax
c00104f8:	e8 c1 c6 ff ff       	call   c000cbbe <Device::Device(char const*)>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	ba c0 24 02 c0       	mov    edx,0xc00224c0
c0010505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010509:	89 10                	mov    DWORD PTR [eax],edx
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051d:	05 78 01 00 00       	add    eax,0x178
c0010522:	83 ec 0c             	sub    esp,0xc
c0010525:	50                   	push   eax
c0010526:	e8 93 6e ff ff       	call   c00073be <GDT::GDT()>
c001052b:	83 c4 10             	add    esp,0x10
c001052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010532:	05 7c 09 00 00       	add    eax,0x97c
c0010537:	83 ec 0c             	sub    esp,0xc
c001053a:	50                   	push   eax
c001053b:	e8 cc 70 ff ff       	call   c000760c <IDT::IDT()>
c0010540:	83 c4 10             	add    esp,0x10
c0010543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010547:	05 7c 11 00 00       	add    eax,0x117c
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	50                   	push   eax
c0010550:	e8 4f 8a ff ff       	call   c0008fa4 <TSS::TSS()>
c0010555:	83 c4 10             	add    esp,0x10
c0010558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010567:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010571:	90                   	nop
c0010572:	83 c4 0c             	add    esp,0xc
c0010575:	c3                   	ret    

c0010576 <CPU::displayFeatures()>:
c0010576:	c3                   	ret    
c0010577:	90                   	nop

c0010578 <CPU::detectFeatures()>:
c0010578:	55                   	push   ebp
c0010579:	57                   	push   edi
c001057a:	56                   	push   esi
c001057b:	53                   	push   ebx
c001057c:	83 ec 30             	sub    esp,0x30
c001057f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010583:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001058d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010594:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001059a:	6a 0d                	push   0xd
c001059c:	6a 00                	push   0x0
c001059e:	55                   	push   ebp
c001059f:	e8 4c ff fe ff       	call   c00004f0 <memset>
c00105a4:	83 c4 10             	add    esp,0x10
c00105a7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00105ac:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00105b3:	0f 84 db 05 00 00    	je     c0010b94 <CPU::detectFeatures()+0x61c>
c00105b9:	83 ec 0c             	sub    esp,0xc
c00105bc:	89 ef                	mov    edi,ebp
c00105be:	6a 10                	push   0x10
c00105c0:	e8 6b fe ff ff       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c00105c5:	83 e0 01             	and    eax,0x1
c00105c8:	8d 14 00             	lea    edx,[eax+eax*1]
c00105cb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105d1:	83 e0 fd             	and    eax,0xfffffffd
c00105d4:	09 d0                	or     eax,edx
c00105d6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105dc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00105e3:	e8 48 fe ff ff       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c00105e8:	83 e0 01             	and    eax,0x1
c00105eb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105f2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105f8:	83 e0 fb             	and    eax,0xfffffffb
c00105fb:	09 d0                	or     eax,edx
c00105fd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010603:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001060a:	e8 21 fe ff ff       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c001060f:	83 e0 01             	and    eax,0x1
c0010612:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010619:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001061f:	83 e0 f7             	and    eax,0xfffffff7
c0010622:	09 d0                	or     eax,edx
c0010624:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001062a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010631:	e8 fa fd ff ff       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c0010636:	83 e0 01             	and    eax,0x1
c0010639:	c1 e0 04             	shl    eax,0x4
c001063c:	89 c2                	mov    edx,eax
c001063e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010644:	83 e0 ef             	and    eax,0xffffffef
c0010647:	09 d0                	or     eax,edx
c0010649:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001064f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010656:	e8 d5 fd ff ff       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c001065b:	83 e0 01             	and    eax,0x1
c001065e:	c1 e0 05             	shl    eax,0x5
c0010661:	89 c2                	mov    edx,eax
c0010663:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010669:	83 e0 df             	and    eax,0xffffffdf
c001066c:	09 d0                	or     eax,edx
c001066e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010674:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001067b:	e8 b0 fd ff ff       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c0010680:	83 e0 01             	and    eax,0x1
c0010683:	8d 14 00             	lea    edx,[eax+eax*1]
c0010686:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001068c:	83 e0 fd             	and    eax,0xfffffffd
c001068f:	09 d0                	or     eax,edx
c0010691:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010697:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001069e:	e8 8d fd ff ff       	call   c0010430 <CPU::cpuidCheckEDX(unsigned int)>
c00106a3:	83 e0 01             	and    eax,0x1
c00106a6:	c1 e0 06             	shl    eax,0x6
c00106a9:	89 c2                	mov    edx,eax
c00106ab:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106b1:	83 e0 bf             	and    eax,0xffffffbf
c00106b4:	09 d0                	or     eax,edx
c00106b6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106bc:	58                   	pop    eax
c00106bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c1:	50                   	push   eax
c00106c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c6:	50                   	push   eax
c00106c7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106cb:	56                   	push   esi
c00106cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106d0:	50                   	push   eax
c00106d1:	6a 00                	push   0x0
c00106d3:	e8 d4 fc ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106d8:	b8 04 00 00 00       	mov    eax,0x4
c00106dd:	89 c1                	mov    ecx,eax
c00106df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106e1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00106e7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00106eb:	89 c1                	mov    ecx,eax
c00106ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106ef:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00106f5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00106f9:	89 c1                	mov    ecx,eax
c00106fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106fd:	83 c4 18             	add    esp,0x18
c0010700:	68 3c 23 02 c0       	push   0xc002233c
c0010705:	55                   	push   ebp
c0010706:	e8 45 00 ff ff       	call   c0000750 <strcmp>
c001070b:	83 c4 10             	add    esp,0x10
c001070e:	85 c0                	test   eax,eax
c0010710:	75 0f                	jne    c0010721 <CPU::detectFeatures()+0x1a9>
c0010712:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001071c:	e9 22 02 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c0010721:	50                   	push   eax
c0010722:	50                   	push   eax
c0010723:	68 49 23 02 c0       	push   0xc0022349
c0010728:	55                   	push   ebp
c0010729:	e8 22 00 ff ff       	call   c0000750 <strcmp>
c001072e:	83 c4 10             	add    esp,0x10
c0010731:	85 c0                	test   eax,eax
c0010733:	74 dd                	je     c0010712 <CPU::detectFeatures()+0x19a>
c0010735:	50                   	push   eax
c0010736:	50                   	push   eax
c0010737:	68 56 23 02 c0       	push   0xc0022356
c001073c:	55                   	push   ebp
c001073d:	e8 0e 00 ff ff       	call   c0000750 <strcmp>
c0010742:	83 c4 10             	add    esp,0x10
c0010745:	85 c0                	test   eax,eax
c0010747:	74 2a                	je     c0010773 <CPU::detectFeatures()+0x1fb>
c0010749:	50                   	push   eax
c001074a:	50                   	push   eax
c001074b:	68 63 23 02 c0       	push   0xc0022363
c0010750:	55                   	push   ebp
c0010751:	e8 fa ff fe ff       	call   c0000750 <strcmp>
c0010756:	83 c4 10             	add    esp,0x10
c0010759:	85 c0                	test   eax,eax
c001075b:	74 16                	je     c0010773 <CPU::detectFeatures()+0x1fb>
c001075d:	50                   	push   eax
c001075e:	50                   	push   eax
c001075f:	68 70 23 02 c0       	push   0xc0022370
c0010764:	55                   	push   ebp
c0010765:	e8 e6 ff fe ff       	call   c0000750 <strcmp>
c001076a:	83 c4 10             	add    esp,0x10
c001076d:	85 c0                	test   eax,eax
c001076f:	74 48                	je     c00107b9 <CPU::detectFeatures()+0x241>
c0010771:	eb 0f                	jmp    c0010782 <CPU::detectFeatures()+0x20a>
c0010773:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001077d:	e9 c1 01 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c0010782:	50                   	push   eax
c0010783:	50                   	push   eax
c0010784:	68 7d 23 02 c0       	push   0xc002237d
c0010789:	55                   	push   ebp
c001078a:	e8 c1 ff fe ff       	call   c0000750 <strcmp>
c001078f:	83 c4 10             	add    esp,0x10
c0010792:	85 c0                	test   eax,eax
c0010794:	74 23                	je     c00107b9 <CPU::detectFeatures()+0x241>
c0010796:	57                   	push   edi
c0010797:	57                   	push   edi
c0010798:	68 8a 23 02 c0       	push   0xc002238a
c001079d:	55                   	push   ebp
c001079e:	e8 ad ff fe ff       	call   c0000750 <strcmp>
c00107a3:	83 c4 10             	add    esp,0x10
c00107a6:	85 c0                	test   eax,eax
c00107a8:	75 1e                	jne    c00107c8 <CPU::detectFeatures()+0x250>
c00107aa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107b4:	e9 8a 01 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c00107b9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00107c3:	e9 7b 01 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c00107c8:	56                   	push   esi
c00107c9:	56                   	push   esi
c00107ca:	68 97 23 02 c0       	push   0xc0022397
c00107cf:	55                   	push   ebp
c00107d0:	e8 7b ff fe ff       	call   c0000750 <strcmp>
c00107d5:	83 c4 10             	add    esp,0x10
c00107d8:	85 c0                	test   eax,eax
c00107da:	75 0f                	jne    c00107eb <CPU::detectFeatures()+0x273>
c00107dc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00107e6:	e9 58 01 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c00107eb:	51                   	push   ecx
c00107ec:	51                   	push   ecx
c00107ed:	68 56 23 02 c0       	push   0xc0022356
c00107f2:	55                   	push   ebp
c00107f3:	e8 58 ff fe ff       	call   c0000750 <strcmp>
c00107f8:	83 c4 10             	add    esp,0x10
c00107fb:	85 c0                	test   eax,eax
c00107fd:	75 0f                	jne    c001080e <CPU::detectFeatures()+0x296>
c00107ff:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010809:	e9 35 01 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c001080e:	52                   	push   edx
c001080f:	52                   	push   edx
c0010810:	68 a4 23 02 c0       	push   0xc00223a4
c0010815:	55                   	push   ebp
c0010816:	e8 35 ff fe ff       	call   c0000750 <strcmp>
c001081b:	83 c4 10             	add    esp,0x10
c001081e:	85 c0                	test   eax,eax
c0010820:	75 0f                	jne    c0010831 <CPU::detectFeatures()+0x2b9>
c0010822:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001082c:	e9 12 01 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c0010831:	50                   	push   eax
c0010832:	50                   	push   eax
c0010833:	68 b1 23 02 c0       	push   0xc00223b1
c0010838:	55                   	push   ebp
c0010839:	e8 12 ff fe ff       	call   c0000750 <strcmp>
c001083e:	83 c4 10             	add    esp,0x10
c0010841:	85 c0                	test   eax,eax
c0010843:	75 0f                	jne    c0010854 <CPU::detectFeatures()+0x2dc>
c0010845:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001084f:	e9 ef 00 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c0010854:	50                   	push   eax
c0010855:	50                   	push   eax
c0010856:	68 be 23 02 c0       	push   0xc00223be
c001085b:	55                   	push   ebp
c001085c:	e8 ef fe fe ff       	call   c0000750 <strcmp>
c0010861:	83 c4 10             	add    esp,0x10
c0010864:	85 c0                	test   eax,eax
c0010866:	75 0f                	jne    c0010877 <CPU::detectFeatures()+0x2ff>
c0010868:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010872:	e9 cc 00 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c0010877:	50                   	push   eax
c0010878:	50                   	push   eax
c0010879:	68 cb 23 02 c0       	push   0xc00223cb
c001087e:	55                   	push   ebp
c001087f:	e8 cc fe fe ff       	call   c0000750 <strcmp>
c0010884:	83 c4 10             	add    esp,0x10
c0010887:	85 c0                	test   eax,eax
c0010889:	75 0f                	jne    c001089a <CPU::detectFeatures()+0x322>
c001088b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010895:	e9 a9 00 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c001089a:	50                   	push   eax
c001089b:	50                   	push   eax
c001089c:	68 d8 23 02 c0       	push   0xc00223d8
c00108a1:	55                   	push   ebp
c00108a2:	e8 a9 fe fe ff       	call   c0000750 <strcmp>
c00108a7:	83 c4 10             	add    esp,0x10
c00108aa:	85 c0                	test   eax,eax
c00108ac:	75 0f                	jne    c00108bd <CPU::detectFeatures()+0x345>
c00108ae:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00108b8:	e9 86 00 00 00       	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c00108bd:	50                   	push   eax
c00108be:	50                   	push   eax
c00108bf:	68 e5 23 02 c0       	push   0xc00223e5
c00108c4:	55                   	push   ebp
c00108c5:	e8 86 fe fe ff       	call   c0000750 <strcmp>
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	85 c0                	test   eax,eax
c00108cf:	75 0c                	jne    c00108dd <CPU::detectFeatures()+0x365>
c00108d1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00108db:	eb 66                	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c00108dd:	50                   	push   eax
c00108de:	50                   	push   eax
c00108df:	68 f2 23 02 c0       	push   0xc00223f2
c00108e4:	55                   	push   ebp
c00108e5:	e8 66 fe fe ff       	call   c0000750 <strcmp>
c00108ea:	83 c4 10             	add    esp,0x10
c00108ed:	85 c0                	test   eax,eax
c00108ef:	75 0c                	jne    c00108fd <CPU::detectFeatures()+0x385>
c00108f1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00108fb:	eb 46                	jmp    c0010943 <CPU::detectFeatures()+0x3cb>
c00108fd:	57                   	push   edi
c00108fe:	57                   	push   edi
c00108ff:	68 ff 23 02 c0       	push   0xc00223ff
c0010904:	55                   	push   ebp
c0010905:	e8 46 fe fe ff       	call   c0000750 <strcmp>
c001090a:	83 c4 10             	add    esp,0x10
c001090d:	85 c0                	test   eax,eax
c001090f:	74 e0                	je     c00108f1 <CPU::detectFeatures()+0x379>
c0010911:	56                   	push   esi
c0010912:	56                   	push   esi
c0010913:	68 0c 24 02 c0       	push   0xc002240c
c0010918:	55                   	push   ebp
c0010919:	e8 32 fe fe ff       	call   c0000750 <strcmp>
c001091e:	83 c4 10             	add    esp,0x10
c0010921:	85 c0                	test   eax,eax
c0010923:	74 cc                	je     c00108f1 <CPU::detectFeatures()+0x379>
c0010925:	51                   	push   ecx
c0010926:	51                   	push   ecx
c0010927:	68 19 24 02 c0       	push   0xc0022419
c001092c:	55                   	push   ebp
c001092d:	e8 1e fe fe ff       	call   c0000750 <strcmp>
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	85 c0                	test   eax,eax
c0010937:	74 b8                	je     c00108f1 <CPU::detectFeatures()+0x379>
c0010939:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010943:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010948:	0f 86 be 00 00 00    	jbe    c0010a0c <CPU::detectFeatures()+0x494>
c001094e:	83 ec 0c             	sub    esp,0xc
c0010951:	68 80 00 00 00       	push   0x80
c0010956:	e8 31 fb ff ff       	call   c001048c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001095b:	83 e0 01             	and    eax,0x1
c001095e:	c1 e0 06             	shl    eax,0x6
c0010961:	89 c2                	mov    edx,eax
c0010963:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010969:	83 e0 bf             	and    eax,0xffffffbf
c001096c:	09 d0                	or     eax,edx
c001096e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010974:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001097b:	e8 0c fb ff ff       	call   c001048c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010980:	83 e0 01             	and    eax,0x1
c0010983:	c1 e0 04             	shl    eax,0x4
c0010986:	89 c2                	mov    edx,eax
c0010988:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001098e:	83 e0 ef             	and    eax,0xffffffef
c0010991:	09 d0                	or     eax,edx
c0010993:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010999:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00109a0:	e8 e7 fa ff ff       	call   c001048c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00109a5:	89 c2                	mov    edx,eax
c00109a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00109ad:	c1 e2 07             	shl    edx,0x7
c00109b0:	83 e0 7f             	and    eax,0x7f
c00109b3:	09 d0                	or     eax,edx
c00109b5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00109bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00109c2:	e8 f3 fa ff ff       	call   c00104ba <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109c7:	83 e0 01             	and    eax,0x1
c00109ca:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00109d1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109d7:	83 e0 f7             	and    eax,0xfffffff7
c00109da:	09 d0                	or     eax,edx
c00109dc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109e2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00109e9:	e8 cc fa ff ff       	call   c00104ba <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109ee:	83 c4 10             	add    esp,0x10
c00109f1:	83 e0 01             	and    eax,0x1
c00109f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00109fb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a01:	83 e0 fb             	and    eax,0xfffffffb
c0010a04:	09 d0                	or     eax,edx
c0010a06:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a0c:	83 ec 0c             	sub    esp,0xc
c0010a0f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a13:	50                   	push   eax
c0010a14:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a18:	50                   	push   eax
c0010a19:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010a1d:	57                   	push   edi
c0010a1e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010a22:	56                   	push   esi
c0010a23:	6a 01                	push   0x1
c0010a25:	e8 82 f9 ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a2e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010a34:	89 c1                	mov    ecx,eax
c0010a36:	83 e2 f0             	and    edx,0xfffffff0
c0010a39:	83 e1 0f             	and    ecx,0xf
c0010a3c:	09 ca                	or     edx,ecx
c0010a3e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010a44:	89 c2                	mov    edx,eax
c0010a46:	c1 ea 04             	shr    edx,0x4
c0010a49:	83 e2 0f             	and    edx,0xf
c0010a4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010a50:	89 d1                	mov    ecx,edx
c0010a52:	83 c4 20             	add    esp,0x20
c0010a55:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010a5b:	c1 e1 06             	shl    ecx,0x6
c0010a5e:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a64:	09 ca                	or     edx,ecx
c0010a66:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a6d:	89 c2                	mov    edx,eax
c0010a6f:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a75:	c1 ea 08             	shr    edx,0x8
c0010a78:	83 e1 3f             	and    ecx,0x3f
c0010a7b:	83 e2 0f             	and    edx,0xf
c0010a7e:	89 d5                	mov    ebp,edx
c0010a80:	83 e5 03             	and    ebp,0x3
c0010a83:	c1 e5 06             	shl    ebp,0x6
c0010a86:	09 e9                	or     ecx,ebp
c0010a88:	89 d5                	mov    ebp,edx
c0010a8a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010a90:	c1 ed 02             	shr    ebp,0x2
c0010a93:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010a99:	83 e1 c0             	and    ecx,0xffffffc0
c0010a9c:	09 e9                	or     ecx,ebp
c0010a9e:	89 c5                	mov    ebp,eax
c0010aa0:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010aa6:	c1 ed 08             	shr    ebp,0x8
c0010aa9:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010aaf:	83 e5 30             	and    ebp,0x30
c0010ab2:	83 e1 cf             	and    ecx,0xffffffcf
c0010ab5:	09 e9                	or     ecx,ebp
c0010ab7:	83 fa 06             	cmp    edx,0x6
c0010aba:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010ac0:	74 05                	je     c0010ac7 <CPU::detectFeatures()+0x54f>
c0010ac2:	83 fa 0f             	cmp    edx,0xf
c0010ac5:	75 64                	jne    c0010b2b <CPU::detectFeatures()+0x5b3>
c0010ac7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010acd:	89 c1                	mov    ecx,eax
c0010acf:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010ad5:	c1 e9 10             	shr    ecx,0x10
c0010ad8:	c1 e1 04             	shl    ecx,0x4
c0010adb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010adf:	0f b6 c9             	movzx  ecx,cl
c0010ae2:	c1 e1 06             	shl    ecx,0x6
c0010ae5:	09 e9                	or     ecx,ebp
c0010ae7:	83 fa 0f             	cmp    edx,0xf
c0010aea:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010af1:	75 38                	jne    c0010b2b <CPU::detectFeatures()+0x5b3>
c0010af3:	c1 e8 14             	shr    eax,0x14
c0010af6:	83 c0 0f             	add    eax,0xf
c0010af9:	0f b6 c0             	movzx  eax,al
c0010afc:	89 c2                	mov    edx,eax
c0010afe:	c1 e8 02             	shr    eax,0x2
c0010b01:	83 e2 03             	and    edx,0x3
c0010b04:	89 d1                	mov    ecx,edx
c0010b06:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010b0c:	c1 e1 06             	shl    ecx,0x6
c0010b0f:	83 e2 3f             	and    edx,0x3f
c0010b12:	09 ca                	or     edx,ecx
c0010b14:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010b1a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010b20:	83 e2 c0             	and    edx,0xffffffc0
c0010b23:	09 d0                	or     eax,edx
c0010b25:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010b2b:	83 ec 0c             	sub    esp,0xc
c0010b2e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b34:	83 c8 07             	or     eax,0x7
c0010b37:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b3d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010b41:	50                   	push   eax
c0010b42:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010b46:	55                   	push   ebp
c0010b47:	57                   	push   edi
c0010b48:	56                   	push   esi
c0010b49:	68 00 00 00 80       	push   0x80000000
c0010b4e:	e8 59 f8 ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b53:	83 c4 20             	add    esp,0x20
c0010b56:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010b5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010b62:	76 1e                	jbe    c0010b82 <CPU::detectFeatures()+0x60a>
c0010b64:	83 ec 0c             	sub    esp,0xc
c0010b67:	50                   	push   eax
c0010b68:	55                   	push   ebp
c0010b69:	57                   	push   edi
c0010b6a:	56                   	push   esi
c0010b6b:	68 01 00 00 80       	push   0x80000001
c0010b70:	e8 37 f8 ff ff       	call   c00103ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b75:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b7f:	83 c4 20             	add    esp,0x20
c0010b82:	52                   	push   edx
c0010b83:	52                   	push   edx
c0010b84:	68 25 24 02 c0       	push   0xc0022425
c0010b89:	53                   	push   ebx
c0010b8a:	e8 21 c0 ff ff       	call   c000cbb0 <Device::setName(char const*)>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	eb 69                	jmp    c0010bfd <CPU::detectFeatures()+0x685>
c0010b94:	50                   	push   eax
c0010b95:	50                   	push   eax
c0010b96:	68 8a 23 02 c0       	push   0xc002238a
c0010b9b:	55                   	push   ebp
c0010b9c:	e8 9f fa fe ff       	call   c0000640 <strcpy>
c0010ba1:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010bab:	e8 13 f6 fe ff       	call   c00001c3 <is486>
c0010bb0:	83 c4 10             	add    esp,0x10
c0010bb3:	85 c0                	test   eax,eax
c0010bb5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010bbb:	74 1f                	je     c0010bdc <CPU::detectFeatures()+0x664>
c0010bbd:	83 c8 07             	or     eax,0x7
c0010bc0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010bc6:	0f 20 c0             	mov    eax,cr0
c0010bc9:	83 e0 14             	and    eax,0x14
c0010bcc:	83 f8 04             	cmp    eax,0x4
c0010bcf:	75 10                	jne    c0010be1 <CPU::detectFeatures()+0x669>
c0010bd1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bd7:	83 e0 fd             	and    eax,0xfffffffd
c0010bda:	eb 1b                	jmp    c0010bf7 <CPU::detectFeatures()+0x67f>
c0010bdc:	83 e0 f8             	and    eax,0xfffffff8
c0010bdf:	eb df                	jmp    c0010bc0 <CPU::detectFeatures()+0x648>
c0010be1:	e8 b8 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010be6:	83 e0 01             	and    eax,0x1
c0010be9:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bec:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bf2:	83 e0 fd             	and    eax,0xfffffffd
c0010bf5:	09 d0                	or     eax,edx
c0010bf7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bfd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010c04:	74 17                	je     c0010c1d <CPU::detectFeatures()+0x6a5>
c0010c06:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010c0c:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010c12:	83 c8 10             	or     eax,0x10
c0010c15:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010c1b:	eb 20                	jmp    c0010c3d <CPU::detectFeatures()+0x6c5>
c0010c1d:	e8 7c f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010c22:	83 e0 01             	and    eax,0x1
c0010c25:	8d 14 00             	lea    edx,[eax+eax*1]
c0010c28:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010c2e:	83 e0 fd             	and    eax,0xfffffffd
c0010c31:	09 d0                	or     eax,edx
c0010c33:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c39:	a8 02                	test   al,0x2
c0010c3b:	75 c9                	jne    c0010c06 <CPU::detectFeatures()+0x68e>
c0010c3d:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010c44:	83 c4 2c             	add    esp,0x2c
c0010c47:	5b                   	pop    ebx
c0010c48:	5e                   	pop    esi
c0010c49:	5f                   	pop    edi
c0010c4a:	5d                   	pop    ebp
c0010c4b:	c3                   	ret    

c0010c4c <CPU::setupSMEP()>:
c0010c4c:	0f 20 e0             	mov    eax,cr4
c0010c4f:	0d 00 00 10 00       	or     eax,0x100000
c0010c54:	0f 22 e0             	mov    cr4,eax
c0010c57:	c3                   	ret    

c0010c58 <CPU::setupUMIP()>:
c0010c58:	0f 20 e0             	mov    eax,cr4
c0010c5b:	80 cc 08             	or     ah,0x8
c0010c5e:	0f 22 e0             	mov    cr4,eax
c0010c61:	c3                   	ret    

c0010c62 <CPU::setupTSC()>:
c0010c62:	0f 20 e0             	mov    eax,cr4
c0010c65:	83 c8 04             	or     eax,0x4
c0010c68:	0f 22 e0             	mov    cr4,eax
c0010c6b:	c3                   	ret    

c0010c6c <CPU::setupLargePages()>:
c0010c6c:	0f 20 e0             	mov    eax,cr4
c0010c6f:	83 c8 10             	or     eax,0x10
c0010c72:	0f 22 e0             	mov    cr4,eax
c0010c75:	c3                   	ret    

c0010c76 <CPU::setupPAT()>:
c0010c76:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c7b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c82:	74 2c                	je     c0010cb0 <CPU::setupPAT()+0x3a>
c0010c84:	53                   	push   ebx
c0010c85:	83 ec 10             	sub    esp,0x10
c0010c88:	68 77 02 00 00       	push   0x277
c0010c8d:	50                   	push   eax
c0010c8e:	e8 8f 64 ff ff       	call   c0007122 <Computer::rdmsr(unsigned int)>
c0010c93:	83 e2 f8             	and    edx,0xfffffff8
c0010c96:	83 ca 01             	or     edx,0x1
c0010c99:	52                   	push   edx
c0010c9a:	50                   	push   eax
c0010c9b:	68 77 02 00 00       	push   0x277
c0010ca0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010ca6:	e8 a3 64 ff ff       	call   c000714e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010cab:	83 c4 28             	add    esp,0x28
c0010cae:	5b                   	pop    ebx
c0010caf:	c3                   	ret    
c0010cb0:	c3                   	ret    
c0010cb1:	90                   	nop

c0010cb2 <CPU::setupMTRR()>:
c0010cb2:	c3                   	ret    
c0010cb3:	90                   	nop

c0010cb4 <CPU::setupGlobalPages()>:
c0010cb4:	0f 20 e0             	mov    eax,cr4
c0010cb7:	0c 80                	or     al,0x80
c0010cb9:	0f 22 e0             	mov    cr4,eax
c0010cbc:	c3                   	ret    
c0010cbd:	90                   	nop

c0010cbe <CPU::allowUsermodeDataAccess()>:
c0010cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010cc9:	74 03                	je     c0010cce <CPU::allowUsermodeDataAccess()+0x10>
c0010ccb:	0f 01 cb             	stac   
c0010cce:	c3                   	ret    
c0010ccf:	90                   	nop

c0010cd0 <CPU::prohibitUsermodeDataAccess()>:
c0010cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010cdb:	74 03                	je     c0010ce0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010cdd:	0f 01 ca             	clac   
c0010ce0:	c3                   	ret    
c0010ce1:	90                   	nop

c0010ce2 <CPU::setupSMAP()>:
c0010ce2:	0f 20 e0             	mov    eax,cr4
c0010ce5:	0d 00 00 20 00       	or     eax,0x200000
c0010cea:	0f 22 e0             	mov    cr4,eax
c0010ced:	eb e1                	jmp    c0010cd0 <CPU::prohibitUsermodeDataAccess()>
c0010cef:	90                   	nop

c0010cf0 <CPU::setupFeatures()>:
c0010cf0:	53                   	push   ebx
c0010cf1:	83 ec 08             	sub    esp,0x8
c0010cf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010cff:	74 18                	je     c0010d19 <CPU::setupFeatures()+0x29>
c0010d01:	83 ec 0c             	sub    esp,0xc
c0010d04:	68 31 24 02 c0       	push   0xc0022431
c0010d09:	e8 97 9c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010d0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d11:	e8 42 ff ff ff       	call   c0010c58 <CPU::setupUMIP()>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010d20:	74 18                	je     c0010d3a <CPU::setupFeatures()+0x4a>
c0010d22:	83 ec 0c             	sub    esp,0xc
c0010d25:	68 3b 24 02 c0       	push   0xc002243b
c0010d2a:	e8 76 9c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010d2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d32:	e8 2b ff ff ff       	call   c0010c62 <CPU::setupTSC()>
c0010d37:	83 c4 10             	add    esp,0x10
c0010d3a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010d41:	74 18                	je     c0010d5b <CPU::setupFeatures()+0x6b>
c0010d43:	83 ec 0c             	sub    esp,0xc
c0010d46:	68 44 24 02 c0       	push   0xc0022444
c0010d4b:	e8 55 9c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010d50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d53:	e8 14 ff ff ff       	call   c0010c6c <CPU::setupLargePages()>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d62:	74 18                	je     c0010d7c <CPU::setupFeatures()+0x8c>
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	68 4d 24 02 c0       	push   0xc002244d
c0010d6c:	e8 34 9c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010d71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d74:	e8 3b ff ff ff       	call   c0010cb4 <CPU::setupGlobalPages()>
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d83:	74 18                	je     c0010d9d <CPU::setupFeatures()+0xad>
c0010d85:	83 ec 0c             	sub    esp,0xc
c0010d88:	68 5f 24 02 c0       	push   0xc002245f
c0010d8d:	e8 13 9c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010d92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d95:	e8 dc fe ff ff       	call   c0010c76 <CPU::setupPAT()>
c0010d9a:	83 c4 10             	add    esp,0x10
c0010d9d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010da4:	74 11                	je     c0010db7 <CPU::setupFeatures()+0xc7>
c0010da6:	c7 44 24 10 68 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022468
c0010dae:	83 c4 08             	add    esp,0x8
c0010db1:	5b                   	pop    ebx
c0010db2:	e9 ee 9b ff ff       	jmp    c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010db7:	83 c4 08             	add    esp,0x8
c0010dba:	5b                   	pop    ebx
c0010dbb:	c3                   	ret    

c0010dbc <CPU::open(int, int, void*)>:
c0010dbc:	55                   	push   ebp
c0010dbd:	57                   	push   edi
c0010dbe:	56                   	push   esi
c0010dbf:	53                   	push   ebx
c0010dc0:	83 ec 18             	sub    esp,0x18
c0010dc3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dc7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010dcb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010dcf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010dd5:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010ddb:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010de1:	50                   	push   eax
c0010de2:	e8 39 66 ff ff       	call   c0007420 <GDT::setup()>
c0010de7:	83 c4 0c             	add    esp,0xc
c0010dea:	6a 00                	push   0x0
c0010dec:	68 ef be ad de       	push   0xdeadbeef
c0010df1:	55                   	push   ebp
c0010df2:	e8 f1 81 ff ff       	call   c0008fe8 <TSS::setup(unsigned long, unsigned long)>
c0010df7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010dfa:	e8 c9 81 ff ff       	call   c0008fc8 <TSS::flush()>
c0010dff:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010e05:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e08:	e8 75 68 ff ff       	call   c0007682 <IDT::setup()>
c0010e0d:	b8 00 04 00 00       	mov    eax,0x400
c0010e12:	0f 23 f8             	mov    db7,eax
c0010e15:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010e1f:	e8 fb 6f ff ff       	call   c0007e1f <Phys::allocatePage()>
c0010e24:	83 c4 10             	add    esp,0x10
c0010e27:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010e2d:	85 f6                	test   esi,esi
c0010e2f:	89 38                	mov    DWORD PTR [eax],edi
c0010e31:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010e37:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e3a:	74 10                	je     c0010e4c <CPU::open(int, int, void*)+0x90>
c0010e3c:	50                   	push   eax
c0010e3d:	50                   	push   eax
c0010e3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010e44:	56                   	push   esi
c0010e45:	e8 c4 8a ff ff       	call   c000990e <VAS::setCPUSpecific(unsigned long)>
c0010e4a:	eb 0d                	jmp    c0010e59 <CPU::open(int, int, void*)+0x9d>
c0010e4c:	83 ec 0c             	sub    esp,0xc
c0010e4f:	68 72 24 02 c0       	push   0xc0022472
c0010e54:	e8 9e 08 00 00       	call   c00116f7 <KePanic(char const*)>
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	83 ec 0c             	sub    esp,0xc
c0010e5f:	68 80 24 02 c0       	push   0xc0022480
c0010e64:	e8 8e 01 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0010e69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e6c:	e8 07 f7 ff ff       	call   c0010578 <CPU::detectFeatures()>
c0010e71:	c7 04 24 a3 24 02 c0 	mov    DWORD PTR [esp],0xc00224a3
c0010e78:	e8 7a 01 00 00       	call   c0010ff7 <KeSetBootMessage(char const*)>
c0010e7d:	e8 2f 74 00 00       	call   c00182b1 <HalInitialise()>
c0010e82:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010e87:	83 e0 10             	and    eax,0x10
c0010e8a:	83 f8 01             	cmp    eax,0x1
c0010e8d:	19 c0                	sbb    eax,eax
c0010e8f:	83 e0 46             	and    eax,0x46
c0010e92:	83 c0 1e             	add    eax,0x1e
c0010e95:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e98:	e8 b0 d5 ff ff       	call   c000e44d <setupTimer(int)>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010ea6:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010ead:	74 0c                	je     c0010ebb <CPU::open(int, int, void*)+0xff>
c0010eaf:	83 ec 0c             	sub    esp,0xc
c0010eb2:	53                   	push   ebx
c0010eb3:	e8 38 fe ff ff       	call   c0010cf0 <CPU::setupFeatures()>
c0010eb8:	83 c4 10             	add    esp,0x10
c0010ebb:	83 c4 0c             	add    esp,0xc
c0010ebe:	31 c0                	xor    eax,eax
c0010ec0:	5b                   	pop    ebx
c0010ec1:	5e                   	pop    esi
c0010ec2:	5f                   	pop    edi
c0010ec3:	5d                   	pop    ebp
c0010ec4:	c3                   	ret    

c0010ec5 <KeInitialiseAtexit()>:
c0010ec5:	83 ec 10             	sub    esp,0x10
c0010ec8:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010ed2:	6a 60                	push   0x60
c0010ed4:	6a 00                	push   0x0
c0010ed6:	68 20 be 02 c0       	push   0xc002be20
c0010edb:	e8 10 f6 fe ff       	call   c00004f0 <memset>
c0010ee0:	83 c4 1c             	add    esp,0x1c
c0010ee3:	c3                   	ret    

c0010ee4 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010ee4:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010ee9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010eed:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010ef4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ef8:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010eff:	40                   	inc    eax
c0010f00:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010f05:	83 f8 17             	cmp    eax,0x17
c0010f08:	7e 0d                	jle    c0010f17 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010f0a:	c7 44 24 04 e4 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224e4
c0010f12:	e9 e0 07 00 00       	jmp    c00116f7 <KePanic(char const*)>
c0010f17:	c3                   	ret    

c0010f18 <KeExecuteAtexit()>:
c0010f18:	53                   	push   ebx
c0010f19:	31 db                	xor    ebx,ebx
c0010f1b:	83 ec 08             	sub    esp,0x8
c0010f1e:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010f24:	7e 50                	jle    c0010f76 <KeExecuteAtexit()+0x5e>
c0010f26:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010f2d:	85 c0                	test   eax,eax
c0010f2f:	74 42                	je     c0010f73 <KeExecuteAtexit()+0x5b>
c0010f31:	51                   	push   ecx
c0010f32:	50                   	push   eax
c0010f33:	53                   	push   ebx
c0010f34:	68 fd 24 02 c0       	push   0xc00224fd
c0010f39:	e8 67 9a ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010f3e:	58                   	pop    eax
c0010f3f:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010f46:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010f4d:	c7 04 24 1f 25 02 c0 	mov    DWORD PTR [esp],0xc002251f
c0010f54:	e8 4c 9a ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010f59:	c7 04 24 7f 36 02 c0 	mov    DWORD PTR [esp],0xc002367f
c0010f60:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f6b:	e8 35 9a ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	43                   	inc    ebx
c0010f74:	eb a8                	jmp    c0010f1e <KeExecuteAtexit()+0x6>
c0010f76:	83 c4 08             	add    esp,0x8
c0010f79:	5b                   	pop    ebx
c0010f7a:	c3                   	ret    

c0010f7b <KeDisplaySplashScreen()>:
c0010f7b:	55                   	push   ebp
c0010f7c:	bd 05 00 00 00       	mov    ebp,0x5
c0010f81:	57                   	push   edi
c0010f82:	bf 0a 00 00 00       	mov    edi,0xa
c0010f87:	56                   	push   esi
c0010f88:	31 f6                	xor    esi,esi
c0010f8a:	53                   	push   ebx
c0010f8b:	31 db                	xor    ebx,ebx
c0010f8d:	83 ec 0c             	sub    esp,0xc
c0010f90:	0f b6 96 e0 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc720]
c0010f97:	89 d0                	mov    eax,edx
c0010f99:	85 d2                	test   edx,edx
c0010f9b:	74 52                	je     c0010fef <KeDisplaySplashScreen()+0x74>
c0010f9d:	80 bb 16 39 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc6ea],0xdb
c0010fa4:	75 13                	jne    c0010fb9 <KeDisplaySplashScreen()+0x3e>
c0010fa6:	0f b6 8b 15 39 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc6eb]
c0010fad:	83 e1 fe             	and    ecx,0xfffffffe
c0010fb0:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010fb6:	75 01                	jne    c0010fb9 <KeDisplaySplashScreen()+0x3e>
c0010fb8:	47                   	inc    edi
c0010fb9:	83 fa 0d             	cmp    edx,0xd
c0010fbc:	74 28                	je     c0010fe6 <KeDisplaySplashScreen()+0x6b>
c0010fbe:	83 fa 0a             	cmp    edx,0xa
c0010fc1:	75 0a                	jne    c0010fcd <KeDisplaySplashScreen()+0x52>
c0010fc3:	45                   	inc    ebp
c0010fc4:	bf 0a 00 00 00       	mov    edi,0xa
c0010fc9:	31 db                	xor    ebx,ebx
c0010fcb:	eb 19                	jmp    c0010fe6 <KeDisplaySplashScreen()+0x6b>
c0010fcd:	83 ec 0c             	sub    esp,0xc
c0010fd0:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010fd3:	55                   	push   ebp
c0010fd4:	0f be c0             	movsx  eax,al
c0010fd7:	52                   	push   edx
c0010fd8:	43                   	inc    ebx
c0010fd9:	6a 00                	push   0x0
c0010fdb:	6a 0e                	push   0xe
c0010fdd:	50                   	push   eax
c0010fde:	e8 4d 7f 00 00       	call   c0018f30 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010fe3:	83 c4 20             	add    esp,0x20
c0010fe6:	46                   	inc    esi
c0010fe7:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010fed:	75 a1                	jne    c0010f90 <KeDisplaySplashScreen()+0x15>
c0010fef:	83 c4 0c             	add    esp,0xc
c0010ff2:	5b                   	pop    ebx
c0010ff3:	5e                   	pop    esi
c0010ff4:	5f                   	pop    edi
c0010ff5:	5d                   	pop    ebp
c0010ff6:	c3                   	ret    

c0010ff7 <KeSetBootMessage(char const*)>:
c0010ff7:	57                   	push   edi
c0010ff8:	56                   	push   esi
c0010ff9:	53                   	push   ebx
c0010ffa:	81 ec a4 00 00 00    	sub    esp,0xa4
c0011000:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0011007:	68 9e 00 00 00       	push   0x9e
c001100c:	6a 00                	push   0x0
c001100e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0011012:	56                   	push   esi
c0011013:	e8 d8 f4 fe ff       	call   c00004f0 <memset>
c0011018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001101b:	e8 50 f5 fe ff       	call   c0000570 <strlen>
c0011020:	ba 50 00 00 00       	mov    edx,0x50
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	29 c2                	sub    edx,eax
c001102a:	31 c9                	xor    ecx,ecx
c001102c:	83 e2 fe             	and    edx,0xfffffffe
c001102f:	01 f2                	add    edx,esi
c0011031:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0011036:	84 c0                	test   al,al
c0011038:	74 0a                	je     c0011044 <KeSetBootMessage(char const*)+0x4d>
c001103a:	80 cc 0f             	or     ah,0xf
c001103d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0011041:	41                   	inc    ecx
c0011042:	eb ed                	jmp    c0011031 <KeSetBootMessage(char const*)+0x3a>
c0011044:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0011049:	b9 9e 00 00 00       	mov    ecx,0x9e
c001104e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011050:	81 c4 a0 00 00 00    	add    esp,0xa0
c0011056:	5b                   	pop    ebx
c0011057:	5e                   	pop    esi
c0011058:	5f                   	pop    edi
c0011059:	c3                   	ret    
c001105a:	66 90                	xchg   ax,ax

c001105c <Krnl::handlePowerButton()>:
c001105c:	83 ec 0c             	sub    esp,0xc
c001105f:	e8 ee 06 00 00       	call   c0011752 <KeHandlePowerButton()>
c0011064:	90                   	nop
c0011065:	83 c4 0c             	add    esp,0xc
c0011068:	c3                   	ret    
c0011069:	8d 76 00             	lea    esi,[esi+0x0]

c001106c <Krnl::handleSleepButton()>:
c001106c:	83 ec 0c             	sub    esp,0xc
c001106f:	e8 13 07 00 00       	call   c0011787 <KeHandleSleepButton()>
c0011074:	90                   	nop
c0011075:	83 c4 0c             	add    esp,0xc
c0011078:	c3                   	ret    

c0011079 <KeCalculateCRC32(unsigned char*, int)>:
c0011079:	53                   	push   ebx
c001107a:	83 c8 ff             	or     eax,0xffffffff
c001107d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011081:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011085:	01 cb                	add    ebx,ecx
c0011087:	39 d9                	cmp    ecx,ebx
c0011089:	74 15                	je     c00110a0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001108b:	41                   	inc    ecx
c001108c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001108f:	31 c2                	xor    edx,eax
c0011091:	c1 e8 08             	shr    eax,0x8
c0011094:	0f b6 d2             	movzx  edx,dl
c0011097:	33 04 95 40 3a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc5c0]
c001109e:	eb e7                	jmp    c0011087 <KeCalculateCRC32(unsigned char*, int)+0xe>
c00110a0:	f7 d0                	not    eax
c00110a2:	5b                   	pop    ebx
c00110a3:	c3                   	ret    

c00110a4 <EnvVarContainer::getEnv(char const*)>:
c00110a4:	57                   	push   edi
c00110a5:	56                   	push   esi
c00110a6:	53                   	push   ebx
c00110a7:	31 db                	xor    ebx,ebx
c00110a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110ad:	39 1e                	cmp    DWORD PTR [esi],ebx
c00110af:	7e 2b                	jle    c00110dc <EnvVarContainer::getEnv(char const*)+0x38>
c00110b1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00110b8:	50                   	push   eax
c00110b9:	50                   	push   eax
c00110ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00110c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00110c4:	e8 87 f6 fe ff       	call   c0000750 <strcmp>
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	85 c0                	test   eax,eax
c00110ce:	75 09                	jne    c00110d9 <EnvVarContainer::getEnv(char const*)+0x35>
c00110d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110d3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00110d7:	eb 05                	jmp    c00110de <EnvVarContainer::getEnv(char const*)+0x3a>
c00110d9:	43                   	inc    ebx
c00110da:	eb d1                	jmp    c00110ad <EnvVarContainer::getEnv(char const*)+0x9>
c00110dc:	31 c0                	xor    eax,eax
c00110de:	5b                   	pop    ebx
c00110df:	5e                   	pop    esi
c00110e0:	5f                   	pop    edi
c00110e1:	c3                   	ret    

c00110e2 <EnvVarContainer::setEnv(char const*, char const*)>:
c00110e2:	55                   	push   ebp
c00110e3:	57                   	push   edi
c00110e4:	56                   	push   esi
c00110e5:	53                   	push   ebx
c00110e6:	83 ec 28             	sub    esp,0x28
c00110e9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110ed:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00110f1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110f5:	56                   	push   esi
c00110f6:	e8 75 f4 fe ff       	call   c0000570 <strlen>
c00110fb:	40                   	inc    eax
c00110fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00110ff:	e8 12 6a ff ff       	call   c0007b16 <malloc>
c0011104:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011107:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001110b:	e8 60 f4 fe ff       	call   c0000570 <strlen>
c0011110:	40                   	inc    eax
c0011111:	89 04 24             	mov    DWORD PTR [esp],eax
c0011114:	e8 fd 69 ff ff       	call   c0007b16 <malloc>
c0011119:	89 34 24             	mov    DWORD PTR [esp],esi
c001111c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011120:	e8 4b f4 fe ff       	call   c0000570 <strlen>
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	40                   	inc    eax
c0011129:	50                   	push   eax
c001112a:	6a 00                	push   0x0
c001112c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011130:	e8 bb f3 fe ff       	call   c00004f0 <memset>
c0011135:	89 34 24             	mov    DWORD PTR [esp],esi
c0011138:	e8 33 f4 fe ff       	call   c0000570 <strlen>
c001113d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011141:	8d 48 01             	lea    ecx,[eax+0x1]
c0011144:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011146:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011149:	89 de                	mov    esi,ebx
c001114b:	e8 20 f4 fe ff       	call   c0000570 <strlen>
c0011150:	83 c4 0c             	add    esp,0xc
c0011153:	40                   	inc    eax
c0011154:	50                   	push   eax
c0011155:	6a 00                	push   0x0
c0011157:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001115b:	e8 90 f3 fe ff       	call   c00004f0 <memset>
c0011160:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011163:	e8 08 f4 fe ff       	call   c0000570 <strlen>
c0011168:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001116c:	8d 48 01             	lea    ecx,[eax+0x1]
c001116f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011171:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011174:	40                   	inc    eax
c0011175:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011178:	c1 e0 03             	shl    eax,0x3
c001117b:	5a                   	pop    edx
c001117c:	59                   	pop    ecx
c001117d:	50                   	push   eax
c001117e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011181:	e8 7c 69 ff ff       	call   c0007b02 <realloc>
c0011186:	8d 74 24 18          	lea    esi,[esp+0x18]
c001118a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001118d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011190:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011194:	b9 08 00 00 00       	mov    ecx,0x8
c0011199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001119b:	83 c4 2c             	add    esp,0x2c
c001119e:	5b                   	pop    ebx
c001119f:	5e                   	pop    esi
c00111a0:	5f                   	pop    edi
c00111a1:	5d                   	pop    ebp
c00111a2:	c3                   	ret    
c00111a3:	90                   	nop

c00111a4 <EnvVarContainer::deleteEnv(char const*)>:
c00111a4:	c3                   	ret    
c00111a5:	90                   	nop

c00111a6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00111a6:	55                   	push   ebp
c00111a7:	57                   	push   edi
c00111a8:	56                   	push   esi
c00111a9:	53                   	push   ebx
c00111aa:	81 ec 38 01 00 00    	sub    esp,0x138
c00111b0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00111b7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00111be:	68 14 01 00 00       	push   0x114
c00111c3:	e8 4e 69 ff ff       	call   c0007b16 <malloc>
c00111c8:	83 c4 0c             	add    esp,0xc
c00111cb:	89 c3                	mov    ebx,eax
c00111cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00111d0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00111d7:	50                   	push   eax
c00111d8:	e8 cf a9 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c00111dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111e0:	e8 a9 ac ff ff       	call   c000be8e <File::exists()>
c00111e5:	83 c4 10             	add    esp,0x10
c00111e8:	84 c0                	test   al,al
c00111ea:	75 31                	jne    c001121d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00111ec:	50                   	push   eax
c00111ed:	50                   	push   eax
c00111ee:	6a 12                	push   0x12
c00111f0:	53                   	push   ebx
c00111f1:	e8 d4 a9 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c00111f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111f8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00111fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00111fe:	e8 6d f3 fe ff       	call   c0000570 <strlen>
c0011203:	5a                   	pop    edx
c0011204:	31 d2                	xor    edx,edx
c0011206:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001120a:	51                   	push   ecx
c001120b:	56                   	push   esi
c001120c:	52                   	push   edx
c001120d:	50                   	push   eax
c001120e:	53                   	push   ebx
c001120f:	ff d7                	call   edi
c0011211:	83 c4 14             	add    esp,0x14
c0011214:	53                   	push   ebx
c0011215:	e8 0e aa ff ff       	call   c000bc28 <File::close()>
c001121a:	83 c4 10             	add    esp,0x10
c001121d:	56                   	push   esi
c001121e:	31 f6                	xor    esi,esi
c0011220:	68 00 01 00 00       	push   0x100
c0011225:	6a 00                	push   0x0
c0011227:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001122b:	50                   	push   eax
c001122c:	e8 bf f2 fe ff       	call   c00004f0 <memset>
c0011231:	5f                   	pop    edi
c0011232:	58                   	pop    eax
c0011233:	6a 01                	push   0x1
c0011235:	53                   	push   ebx
c0011236:	e8 8f a9 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011246:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001124e:	83 ec 0c             	sub    esp,0xc
c0011251:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011253:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011257:	51                   	push   ecx
c0011258:	8d 54 24 23          	lea    edx,[esp+0x23]
c001125c:	52                   	push   edx
c001125d:	6a 00                	push   0x0
c001125f:	6a 01                	push   0x1
c0011261:	53                   	push   ebx
c0011262:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011265:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001126a:	83 c4 20             	add    esp,0x20
c001126d:	89 c2                	mov    edx,eax
c001126f:	85 c0                	test   eax,eax
c0011271:	0f 84 36 01 00 00    	je     c00113ad <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011277:	83 f8 0d             	cmp    eax,0xd
c001127a:	0f 84 22 01 00 00    	je     c00113a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011280:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011285:	0f 84 f0 00 00 00    	je     c001137b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001128b:	83 f8 0a             	cmp    eax,0xa
c001128e:	74 13                	je     c00112a3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011290:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011295:	74 0c                	je     c00112a3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011297:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001129d:	0f 8e f6 00 00 00    	jle    c0011399 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00112a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112a7:	83 ec 0c             	sub    esp,0xc
c00112aa:	8d 78 01             	lea    edi,[eax+0x1]
c00112ad:	57                   	push   edi
c00112ae:	e8 63 68 ff ff       	call   c0007b16 <malloc>
c00112b3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00112b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00112bb:	8d 56 04             	lea    edx,[esi+0x4]
c00112be:	89 14 24             	mov    DWORD PTR [esp],edx
c00112c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00112c5:	e8 4c 68 ff ff       	call   c0007b16 <malloc>
c00112ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00112ce:	83 c4 0c             	add    esp,0xc
c00112d1:	57                   	push   edi
c00112d2:	6a 00                	push   0x0
c00112d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112d8:	e8 13 f2 fe ff       	call   c00004f0 <memset>
c00112dd:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112e1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00112e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00112e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112eb:	83 c4 0c             	add    esp,0xc
c00112ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112f2:	52                   	push   edx
c00112f3:	6a 00                	push   0x0
c00112f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112f9:	e8 f2 f1 fe ff       	call   c00004f0 <memset>
c00112fe:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011302:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011306:	89 34 24             	mov    DWORD PTR [esp],esi
c0011309:	e8 62 f2 fe ff       	call   c0000570 <strlen>
c001130e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011312:	89 c1                	mov    ecx,eax
c0011314:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011316:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011319:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001131c:	40                   	inc    eax
c001131d:	83 c4 10             	add    esp,0x10
c0011320:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011323:	85 d2                	test   edx,edx
c0011325:	75 0c                	jne    c0011333 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011327:	83 ec 0c             	sub    esp,0xc
c001132a:	6a 08                	push   0x8
c001132c:	e8 e5 67 ff ff       	call   c0007b16 <malloc>
c0011331:	eb 0c                	jmp    c001133f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011333:	c1 e0 03             	shl    eax,0x3
c0011336:	51                   	push   ecx
c0011337:	51                   	push   ecx
c0011338:	50                   	push   eax
c0011339:	52                   	push   edx
c001133a:	e8 c3 67 ff ff       	call   c0007b02 <realloc>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011345:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011348:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001134b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001134f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011353:	b9 08 00 00 00       	mov    ecx,0x8
c0011358:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001135a:	31 f6                	xor    esi,esi
c001135c:	50                   	push   eax
c001135d:	68 00 01 00 00       	push   0x100
c0011362:	6a 00                	push   0x0
c0011364:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011368:	50                   	push   eax
c0011369:	e8 82 f1 fe ff       	call   c00004f0 <memset>
c001136e:	83 c4 10             	add    esp,0x10
c0011371:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011379:	eb 27                	jmp    c00113a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001137b:	83 f8 3d             	cmp    eax,0x3d
c001137e:	74 1e                	je     c001139e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011380:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011386:	7f 07                	jg     c001138f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011388:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001138c:	46                   	inc    esi
c001138d:	eb 13                	jmp    c00113a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001138f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011397:	eb 09                	jmp    c00113a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011399:	83 f8 3d             	cmp    eax,0x3d
c001139c:	75 ea                	jne    c0011388 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001139e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00113a2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00113a7:	0f 85 99 fe ff ff    	jne    c0011246 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00113ad:	83 ec 0c             	sub    esp,0xc
c00113b0:	53                   	push   ebx
c00113b1:	e8 72 a8 ff ff       	call   c000bc28 <File::close()>
c00113b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113be:	81 c4 3c 01 00 00    	add    esp,0x13c
c00113c4:	5b                   	pop    ebx
c00113c5:	5e                   	pop    esi
c00113c6:	5f                   	pop    edi
c00113c7:	5d                   	pop    ebp
c00113c8:	c3                   	ret    
c00113c9:	90                   	nop

c00113ca <EnvVarContainer::__loadSystem()>:
c00113ca:	83 ec 10             	sub    esp,0x10
c00113cd:	68 40 3e 02 c0       	push   0xc0023e40
c00113d2:	68 24 25 02 c0       	push   0xc0022524
c00113d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113db:	e8 c6 fd ff ff       	call   c00111a6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00113e0:	83 c4 1c             	add    esp,0x1c
c00113e3:	c3                   	ret    

c00113e4 <EnvVarContainer::__loadUser()>:
c00113e4:	c3                   	ret    
c00113e5:	90                   	nop

c00113e6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00113e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00113fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011406:	90                   	nop
c0011407:	c3                   	ret    

c0011408 <EnvVarContainer::~EnvVarContainer()>:
c0011408:	83 ec 0c             	sub    esp,0xc
c001140b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001140f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011412:	85 c0                	test   eax,eax
c0011414:	74 1d                	je     c0011433 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001141a:	8b 00                	mov    eax,DWORD PTR [eax]
c001141c:	85 c0                	test   eax,eax
c001141e:	74 13                	je     c0011433 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011424:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011427:	83 ec 0c             	sub    esp,0xc
c001142a:	50                   	push   eax
c001142b:	e8 f6 66 ff ff       	call   c0007b26 <free>
c0011430:	83 c4 10             	add    esp,0x10
c0011433:	90                   	nop
c0011434:	83 c4 0c             	add    esp,0xc
c0011437:	c3                   	ret    

c0011438 <KeGetEnv(Process*, char const*)>:
c0011438:	53                   	push   ebx
c0011439:	83 ec 08             	sub    esp,0x8
c001143c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011440:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011444:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001144a:	74 04                	je     c0011450 <KeGetEnv(Process*, char const*)+0x18>
c001144c:	85 c0                	test   eax,eax
c001144e:	75 0b                	jne    c001145b <KeGetEnv(Process*, char const*)+0x23>
c0011450:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011455:	85 c0                	test   eax,eax
c0011457:	75 19                	jne    c0011472 <KeGetEnv(Process*, char const*)+0x3a>
c0011459:	eb 27                	jmp    c0011482 <KeGetEnv(Process*, char const*)+0x4a>
c001145b:	52                   	push   edx
c001145c:	52                   	push   edx
c001145d:	53                   	push   ebx
c001145e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011464:	e8 3b fc ff ff       	call   c00110a4 <EnvVarContainer::getEnv(char const*)>
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	85 c0                	test   eax,eax
c001146e:	75 28                	jne    c0011498 <KeGetEnv(Process*, char const*)+0x60>
c0011470:	eb de                	jmp    c0011450 <KeGetEnv(Process*, char const*)+0x18>
c0011472:	52                   	push   edx
c0011473:	52                   	push   edx
c0011474:	53                   	push   ebx
c0011475:	50                   	push   eax
c0011476:	e8 29 fc ff ff       	call   c00110a4 <EnvVarContainer::getEnv(char const*)>
c001147b:	83 c4 10             	add    esp,0x10
c001147e:	85 c0                	test   eax,eax
c0011480:	75 16                	jne    c0011498 <KeGetEnv(Process*, char const*)+0x60>
c0011482:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011486:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001148b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001148f:	83 c4 08             	add    esp,0x8
c0011492:	5b                   	pop    ebx
c0011493:	e9 0c fc ff ff       	jmp    c00110a4 <EnvVarContainer::getEnv(char const*)>
c0011498:	83 c4 08             	add    esp,0x8
c001149b:	5b                   	pop    ebx
c001149c:	c3                   	ret    

c001149d <KeSetEnvSystem(char const*, char const*)>:
c001149d:	83 ec 10             	sub    esp,0x10
c00114a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114a8:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00114ae:	e8 2f fc ff ff       	call   c00110e2 <EnvVarContainer::setEnv(char const*, char const*)>
c00114b3:	83 c4 1c             	add    esp,0x1c
c00114b6:	c3                   	ret    

c00114b7 <KeSetEnvUser(char const*, char const*)>:
c00114b7:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00114bc:	85 c0                	test   eax,eax
c00114be:	74 15                	je     c00114d5 <KeSetEnvUser(char const*, char const*)+0x1e>
c00114c0:	83 ec 10             	sub    esp,0x10
c00114c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114cb:	50                   	push   eax
c00114cc:	e8 11 fc ff ff       	call   c00110e2 <EnvVarContainer::setEnv(char const*, char const*)>
c00114d1:	83 c4 1c             	add    esp,0x1c
c00114d4:	c3                   	ret    
c00114d5:	c3                   	ret    

c00114d6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00114d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114da:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00114e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114e4:	e9 f9 fb ff ff       	jmp    c00110e2 <EnvVarContainer::setEnv(char const*, char const*)>

c00114e9 <KeDeleteEnvSystem(char const*)>:
c00114e9:	c3                   	ret    

c00114ea <KeDeleteEnvUser(char const*)>:
c00114ea:	c3                   	ret    

c00114eb <KeDeleteEnvProcess(Process*, char const*)>:
c00114eb:	c3                   	ret    

c00114ec <KeNewProcessEnv(Process*)>:
c00114ec:	83 ec 28             	sub    esp,0x28
c00114ef:	6a 0c                	push   0xc
c00114f1:	e8 20 66 ff ff       	call   c0007b16 <malloc>
c00114f6:	5a                   	pop    edx
c00114f7:	59                   	pop    ecx
c00114f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114fc:	50                   	push   eax
c00114fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011501:	e8 e0 fe ff ff       	call   c00113e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001150a:	83 c4 2c             	add    esp,0x2c
c001150d:	c3                   	ret    

c001150e <KeCopyProcessEnv(Process*, Process*)>:
c001150e:	57                   	push   edi
c001150f:	56                   	push   esi
c0011510:	53                   	push   ebx
c0011511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011515:	83 ec 0c             	sub    esp,0xc
c0011518:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001151e:	6a 0c                	push   0xc
c0011520:	e8 f1 65 ff ff       	call   c0007b16 <malloc>
c0011525:	89 c3                	mov    ebx,eax
c0011527:	58                   	pop    eax
c0011528:	5a                   	pop    edx
c0011529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001152d:	53                   	push   ebx
c001152e:	e8 b3 fe ff ff       	call   c00113e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011533:	8b 07                	mov    eax,DWORD PTR [edi]
c0011535:	89 03                	mov    DWORD PTR [ebx],eax
c0011537:	c1 e0 03             	shl    eax,0x3
c001153a:	89 04 24             	mov    DWORD PTR [esp],eax
c001153d:	e8 d4 65 ff ff       	call   c0007b16 <malloc>
c0011542:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011545:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011547:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001154a:	c1 e1 03             	shl    ecx,0x3
c001154d:	89 c7                	mov    edi,eax
c001154f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011551:	83 c4 10             	add    esp,0x10
c0011554:	89 d8                	mov    eax,ebx
c0011556:	5b                   	pop    ebx
c0011557:	5e                   	pop    esi
c0011558:	5f                   	pop    edi
c0011559:	c3                   	ret    

c001155a <KeLoadSystemEnv()>:
c001155a:	53                   	push   ebx
c001155b:	83 ec 14             	sub    esp,0x14
c001155e:	6a 0c                	push   0xc
c0011560:	e8 b1 65 ff ff       	call   c0007b16 <malloc>
c0011565:	89 c3                	mov    ebx,eax
c0011567:	58                   	pop    eax
c0011568:	5a                   	pop    edx
c0011569:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001156f:	53                   	push   ebx
c0011570:	e8 71 fe ff ff       	call   c00113e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011575:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011578:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001157e:	e8 47 fe ff ff       	call   c00113ca <EnvVarContainer::__loadSystem()>
c0011583:	83 c4 18             	add    esp,0x18
c0011586:	5b                   	pop    ebx
c0011587:	c3                   	ret    

c0011588 <KeLoadUserEnv()>:
c0011588:	53                   	push   ebx
c0011589:	83 ec 14             	sub    esp,0x14
c001158c:	6a 0c                	push   0xc
c001158e:	e8 83 65 ff ff       	call   c0007b16 <malloc>
c0011593:	89 c3                	mov    ebx,eax
c0011595:	58                   	pop    eax
c0011596:	5a                   	pop    edx
c0011597:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001159d:	53                   	push   ebx
c001159e:	e8 43 fe ff ff       	call   c00113e6 <EnvVarContainer::EnvVarContainer(Process*)>
c00115a3:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00115a9:	83 c4 18             	add    esp,0x18
c00115ac:	5b                   	pop    ebx
c00115ad:	c3                   	ret    

c00115ae <KeFlushEnv()>:
c00115ae:	c3                   	ret    

c00115af <KeGetProcessTotalEnvCount(Process*)>:
c00115af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b3:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00115b9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00115bf:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00115c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00115c6:	03 01                	add    eax,DWORD PTR [ecx]
c00115c8:	85 d2                	test   edx,edx
c00115ca:	74 02                	je     c00115ce <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00115cc:	03 02                	add    eax,DWORD PTR [edx]
c00115ce:	c3                   	ret    

c00115cf <KeGetProcessEnvPair(Process*, int)>:
c00115cf:	57                   	push   edi
c00115d0:	56                   	push   esi
c00115d1:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00115d7:	53                   	push   ebx
c00115d8:	85 f6                	test   esi,esi
c00115da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115e2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00115e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00115ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c00115ee:	75 16                	jne    c0011606 <KeGetProcessEnvPair(Process*, int)+0x37>
c00115f0:	39 c2                	cmp    edx,eax
c00115f2:	7c 16                	jl     c001160a <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115f4:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00115fa:	8b 31                	mov    esi,DWORD PTR [ecx]
c00115fc:	01 c6                	add    esi,eax
c00115fe:	39 d6                	cmp    esi,edx
c0011600:	7e 3c                	jle    c001163e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011602:	29 c2                	sub    edx,eax
c0011604:	eb 04                	jmp    c001160a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011606:	39 c2                	cmp    edx,eax
c0011608:	7d 05                	jge    c001160f <KeGetProcessEnvPair(Process*, int)+0x40>
c001160a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001160d:	eb 20                	jmp    c001162f <KeGetProcessEnvPair(Process*, int)+0x60>
c001160f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011611:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011614:	39 d1                	cmp    ecx,edx
c0011616:	7e 04                	jle    c001161c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011618:	29 c2                	sub    edx,eax
c001161a:	eb 10                	jmp    c001162c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001161c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011622:	03 0e                	add    ecx,DWORD PTR [esi]
c0011624:	39 d1                	cmp    ecx,edx
c0011626:	7e 16                	jle    c001163e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011628:	29 c2                	sub    edx,eax
c001162a:	29 fa                	sub    edx,edi
c001162c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001162f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011632:	8b 02                	mov    eax,DWORD PTR [edx]
c0011634:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011637:	89 03                	mov    DWORD PTR [ebx],eax
c0011639:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001163c:	eb 1d                	jmp    c001165b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	68 46 25 02 c0       	push   0xc0022546
c0011646:	e8 ac 00 00 00       	call   c00116f7 <KePanic(char const*)>
c001164b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011651:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011658:	83 c4 10             	add    esp,0x10
c001165b:	89 d8                	mov    eax,ebx
c001165d:	5b                   	pop    ebx
c001165e:	5e                   	pop    esi
c001165f:	5f                   	pop    edi
c0011660:	c2 04 00             	ret    0x4

c0011663 <CPU::current()>:
c0011663:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011668:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001166e:	c3                   	ret    

c001166f <operator new(unsigned long)>:
c001166f:	e9 a2 64 ff ff       	jmp    c0007b16 <malloc>

c0011674 <operator delete(void*)>:
c0011674:	e9 bd 64 ff ff       	jmp    c0007b36 <rfree>

c0011679 <disableIRQs()>:
c0011679:	fa                   	cli    
c001167a:	c3                   	ret    

c001167b <enableIRQs()>:
c001167b:	fb                   	sti    
c001167c:	c3                   	ret    

c001167d <lockScheduler()>:
c001167d:	fa                   	cli    
c001167e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011684:	c3                   	ret    

c0011685 <unlockScheduler()>:
c0011685:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001168a:	48                   	dec    eax
c001168b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011690:	75 01                	jne    c0011693 <unlockScheduler()+0xe>
c0011692:	fb                   	sti    
c0011693:	c3                   	ret    

c0011694 <lockStuff()>:
c0011694:	fa                   	cli    
c0011695:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001169b:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00116a1:	c3                   	ret    

c00116a2 <unlockStuff()>:
c00116a2:	83 ec 0c             	sub    esp,0xc
c00116a5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00116aa:	48                   	dec    eax
c00116ab:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00116b0:	75 18                	jne    c00116ca <unlockStuff()+0x28>
c00116b2:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00116b9:	74 0f                	je     c00116ca <unlockStuff()+0x28>
c00116bb:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00116c5:	e8 12 4b 00 00       	call   c00161dc <schedule()>
c00116ca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116cf:	48                   	dec    eax
c00116d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116d5:	75 01                	jne    c00116d8 <unlockStuff()+0x36>
c00116d7:	fb                   	sti    
c00116d8:	83 c4 0c             	add    esp,0xc
c00116db:	c3                   	ret    

c00116dc <Virt::getAKernelVAS()>:
c00116dc:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00116e1:	c3                   	ret    

c00116e2 <__not_memcpy>:
c00116e2:	57                   	push   edi
c00116e3:	56                   	push   esi
c00116e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00116f0:	89 c7                	mov    edi,eax
c00116f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116f4:	5e                   	pop    esi
c00116f5:	5f                   	pop    edi
c00116f6:	c3                   	ret    

c00116f7 <KePanic(char const*)>:
c00116f7:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00116fe:	e9 7f 6a 00 00       	jmp    c0018182 <HalPanic(char const*)>

c0011703 <KePowerThread(void*)>:
c0011703:	83 ec 0c             	sub    esp,0xc
c0011706:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001170b:	48                   	dec    eax
c001170c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011711:	75 01                	jne    c0011714 <KePowerThread(void*)+0x11>
c0011713:	fb                   	sti    
c0011714:	83 ec 0c             	sub    esp,0xc
c0011717:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001171e:	6a 0a                	push   0xa
c0011720:	e8 fb 4d 00 00       	call   c0016520 <sleep(unsigned int)>
c0011725:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	eb e3                	jmp    c0011714 <KePowerThread(void*)+0x11>

c0011731 <KeChangePowerSettings(PowerSettings)>:
c0011731:	57                   	push   edi
c0011732:	b9 09 00 00 00       	mov    ecx,0x9
c0011737:	56                   	push   esi
c0011738:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001173d:	fc                   	cld    
c001173e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011742:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011744:	5e                   	pop    esi
c0011745:	5f                   	pop    edi
c0011746:	c3                   	ret    

c0011747 <KeUserIOReceived()>:
c0011747:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011751:	c3                   	ret    

c0011752 <KeHandlePowerButton()>:
c0011752:	83 ec 0c             	sub    esp,0xc
c0011755:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001175a:	83 f8 02             	cmp    eax,0x2
c001175d:	75 10                	jne    c001176f <KeHandlePowerButton()+0x1d>
c001175f:	83 ec 0c             	sub    esp,0xc
c0011762:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011768:	e8 1d 5a ff ff       	call   c000718a <Computer::shutdown()>
c001176d:	eb 11                	jmp    c0011780 <KeHandlePowerButton()+0x2e>
c001176f:	48                   	dec    eax
c0011770:	75 11                	jne    c0011783 <KeHandlePowerButton()+0x31>
c0011772:	83 ec 0c             	sub    esp,0xc
c0011775:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001177b:	e8 3a 5a ff ff       	call   c00071ba <Computer::sleep()>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	83 c4 0c             	add    esp,0xc
c0011786:	c3                   	ret    

c0011787 <KeHandleSleepButton()>:
c0011787:	83 ec 0c             	sub    esp,0xc
c001178a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001178f:	83 f8 02             	cmp    eax,0x2
c0011792:	75 10                	jne    c00117a4 <KeHandleSleepButton()+0x1d>
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001179d:	e8 e8 59 ff ff       	call   c000718a <Computer::shutdown()>
c00117a2:	eb 11                	jmp    c00117b5 <KeHandleSleepButton()+0x2e>
c00117a4:	48                   	dec    eax
c00117a5:	75 11                	jne    c00117b8 <KeHandleSleepButton()+0x31>
c00117a7:	83 ec 0c             	sub    esp,0xc
c00117aa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00117b0:	e8 05 5a ff ff       	call   c00071ba <Computer::sleep()>
c00117b5:	83 c4 10             	add    esp,0x10
c00117b8:	83 c4 0c             	add    esp,0xc
c00117bb:	c3                   	ret    

c00117bc <KeSetupPowerManager()>:
c00117bc:	83 ec 0c             	sub    esp,0xc
c00117bf:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00117c9:	68 f0 00 00 00       	push   0xf0
c00117ce:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00117d5:	6a 00                	push   0x0
c00117d7:	68 03 17 01 c0       	push   0xc0011703
c00117dc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00117e2:	e8 a5 47 00 00       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c00117e7:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00117f1:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00117fb:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011805:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001180f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011819:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011823:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001182d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011837:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011841:	83 c4 1c             	add    esp,0x1c
c0011844:	c3                   	ret    

c0011845 <KeRand()>:
c0011845:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001184f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011859:	53                   	push   ebx
c001185a:	01 c1                	add    ecx,eax
c001185c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011861:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011867:	01 ca                	add    edx,ecx
c0011869:	05 ef 04 b5 00       	add    eax,0xb504ef
c001186e:	83 d2 00             	adc    edx,0x0
c0011871:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011876:	0f b7 da             	movzx  ebx,dx
c0011879:	89 da                	mov    edx,ebx
c001187b:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011881:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011885:	5b                   	pop    ebx
c0011886:	c3                   	ret    

c0011887 <KeSeedRand(unsigned int)>:
c0011887:	53                   	push   ebx
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001188f:	e8 0d 6c 00 00       	call   c00184a1 <HalGetRand()>
c0011894:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001189e:	31 d8                	xor    eax,ebx
c00118a0:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00118a5:	e8 9b ff ff ff       	call   c0011845 <KeRand()>
c00118aa:	83 c4 08             	add    esp,0x8
c00118ad:	5b                   	pop    ebx
c00118ae:	eb 95                	jmp    c0011845 <KeRand()>

c00118b0 <KeInitRand()>:
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	e8 de 69 00 00       	call   c0018296 <HalQueryPerformanceCounter()>
c00118b8:	0f 20 da             	mov    edx,cr3
c00118bb:	0f 22 da             	mov    cr3,edx
c00118be:	0f 20 da             	mov    edx,cr3
c00118c1:	0f 22 da             	mov    cr3,edx
c00118c4:	0f 20 da             	mov    edx,cr3
c00118c7:	0f 22 da             	mov    cr3,edx
c00118ca:	0f 20 da             	mov    edx,cr3
c00118cd:	0f 22 da             	mov    cr3,edx
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00118d8:	50                   	push   eax
c00118d9:	e8 a9 ff ff ff       	call   c0011887 <KeSeedRand(unsigned int)>
c00118de:	83 c4 1c             	add    esp,0x1c
c00118e1:	c3                   	ret    
c00118e2:	66 90                	xchg   ax,ax

c00118e4 <KeResolveCompatibilitySymbol(char*)>:
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	83 ec 08             	sub    esp,0x8
c00118ea:	68 60 25 02 c0       	push   0xc0022560
c00118ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f3:	e8 58 ee fe ff       	call   c0000750 <strcmp>
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	85 c0                	test   eax,eax
c00118fd:	0f 94 c0             	sete   al
c0011900:	0f b6 c0             	movzx  eax,al
c0011903:	85 c0                	test   eax,eax
c0011905:	74 0d                	je     c0011914 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011907:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c001190c:	e9 8b 01 00 00       	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011911:	8d 76 00             	lea    esi,[esi+0x0]
c0011914:	83 ec 08             	sub    esp,0x8
c0011917:	68 69 25 02 c0       	push   0xc0022569
c001191c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011920:	e8 2b ee fe ff       	call   c0000750 <strcmp>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	85 c0                	test   eax,eax
c001192a:	0f 94 c0             	sete   al
c001192d:	0f b6 c0             	movzx  eax,al
c0011930:	85 c0                	test   eax,eax
c0011932:	74 0c                	je     c0011940 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011934:	b8 50 f8 01 c0       	mov    eax,0xc001f850
c0011939:	e9 5e 01 00 00       	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001193e:	66 90                	xchg   ax,ax
c0011940:	83 ec 08             	sub    esp,0x8
c0011943:	68 73 25 02 c0       	push   0xc0022573
c0011948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001194c:	e8 ff ed fe ff       	call   c0000750 <strcmp>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	85 c0                	test   eax,eax
c0011956:	0f 94 c0             	sete   al
c0011959:	0f b6 c0             	movzx  eax,al
c001195c:	85 c0                	test   eax,eax
c001195e:	74 0c                	je     c001196c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011960:	b8 84 f5 01 c0       	mov    eax,0xc001f584
c0011965:	e9 32 01 00 00       	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001196a:	66 90                	xchg   ax,ax
c001196c:	83 ec 08             	sub    esp,0x8
c001196f:	68 7c 25 02 c0       	push   0xc002257c
c0011974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011978:	e8 d3 ed fe ff       	call   c0000750 <strcmp>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	85 c0                	test   eax,eax
c0011982:	0f 94 c0             	sete   al
c0011985:	0f b6 c0             	movzx  eax,al
c0011988:	85 c0                	test   eax,eax
c001198a:	74 0c                	je     c0011998 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001198c:	b8 f7 16 01 c0       	mov    eax,0xc00116f7
c0011991:	e9 06 01 00 00       	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011996:	66 90                	xchg   ax,ax
c0011998:	83 ec 08             	sub    esp,0x8
c001199b:	68 8f 25 02 c0       	push   0xc002258f
c00119a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119a4:	e8 a7 ed fe ff       	call   c0000750 <strcmp>
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	85 c0                	test   eax,eax
c00119ae:	0f 94 c0             	sete   al
c00119b1:	0f b6 c0             	movzx  eax,al
c00119b4:	85 c0                	test   eax,eax
c00119b6:	74 0c                	je     c00119c4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00119b8:	b8 f7 0f 01 c0       	mov    eax,0xc0010ff7
c00119bd:	e9 da 00 00 00       	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119c2:	66 90                	xchg   ax,ax
c00119c4:	83 ec 08             	sub    esp,0x8
c00119c7:	68 ac 25 02 c0       	push   0xc00225ac
c00119cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d0:	e8 7b ed fe ff       	call   c0000750 <strcmp>
c00119d5:	83 c4 10             	add    esp,0x10
c00119d8:	85 c0                	test   eax,eax
c00119da:	0f 94 c0             	sete   al
c00119dd:	0f b6 c0             	movzx  eax,al
c00119e0:	85 c0                	test   eax,eax
c00119e2:	74 0c                	je     c00119f0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00119e4:	b8 50 f9 01 c0       	mov    eax,0xc001f950
c00119e9:	e9 ae 00 00 00       	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119ee:	66 90                	xchg   ax,ax
c00119f0:	83 ec 08             	sub    esp,0x8
c00119f3:	68 b6 25 02 c0       	push   0xc00225b6
c00119f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119fc:	e8 4f ed fe ff       	call   c0000750 <strcmp>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	85 c0                	test   eax,eax
c0011a06:	0f 94 c0             	sete   al
c0011a09:	0f b6 c0             	movzx  eax,al
c0011a0c:	85 c0                	test   eax,eax
c0011a0e:	74 0c                	je     c0011a1c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011a10:	b8 d0 f6 01 c0       	mov    eax,0xc001f6d0
c0011a15:	e9 82 00 00 00       	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a1a:	66 90                	xchg   ax,ax
c0011a1c:	83 ec 08             	sub    esp,0x8
c0011a1f:	68 bf 25 02 c0       	push   0xc00225bf
c0011a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a28:	e8 23 ed fe ff       	call   c0000750 <strcmp>
c0011a2d:	83 c4 10             	add    esp,0x10
c0011a30:	85 c0                	test   eax,eax
c0011a32:	0f 94 c0             	sete   al
c0011a35:	0f b6 c0             	movzx  eax,al
c0011a38:	85 c0                	test   eax,eax
c0011a3a:	74 08                	je     c0011a44 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011a3c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a41:	eb 59                	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a43:	90                   	nop
c0011a44:	83 ec 08             	sub    esp,0x8
c0011a47:	68 d7 25 02 c0       	push   0xc00225d7
c0011a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a50:	e8 fb ec fe ff       	call   c0000750 <strcmp>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	85 c0                	test   eax,eax
c0011a5a:	0f 94 c0             	sete   al
c0011a5d:	0f b6 c0             	movzx  eax,al
c0011a60:	85 c0                	test   eax,eax
c0011a62:	74 08                	je     c0011a6c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a64:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a69:	eb 31                	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a6b:	90                   	nop
c0011a6c:	83 ec 08             	sub    esp,0x8
c0011a6f:	68 e4 25 02 c0       	push   0xc00225e4
c0011a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a78:	e8 d3 ec fe ff       	call   c0000750 <strcmp>
c0011a7d:	83 c4 10             	add    esp,0x10
c0011a80:	85 c0                	test   eax,eax
c0011a82:	0f 94 c0             	sete   al
c0011a85:	0f b6 c0             	movzx  eax,al
c0011a88:	85 c0                	test   eax,eax
c0011a8a:	74 08                	je     c0011a94 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011a8c:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011a91:	eb 09                	jmp    c0011a9c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a93:	90                   	nop
c0011a94:	b8 00 00 00 00       	mov    eax,0x0
c0011a99:	8d 76 00             	lea    esi,[esi+0x0]
c0011a9c:	83 c4 0c             	add    esp,0xc
c0011a9f:	c3                   	ret    

c0011aa0 <KiSigKill(int)>:
c0011aa0:	83 ec 0c             	sub    esp,0xc
c0011aa3:	6a 00                	push   0x0
c0011aa5:	6a 00                	push   0x0
c0011aa7:	6a ff                	push   0xffffffff
c0011aa9:	6a 01                	push   0x1
c0011aab:	e8 a2 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011ab0:	83 c4 1c             	add    esp,0x1c
c0011ab3:	c3                   	ret    

c0011ab4 <KiDefaultSignalHandlerIgnore(int)>:
c0011ab4:	c3                   	ret    

c0011ab5 <KiDefaultSignalHandlerPause(int)>:
c0011ab5:	57                   	push   edi
c0011ab6:	b9 07 00 00 00       	mov    ecx,0x7
c0011abb:	56                   	push   esi
c0011abc:	be 2d 26 02 c0       	mov    esi,0xc002262d
c0011ac1:	83 ec 24             	sub    esp,0x24
c0011ac4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011ac8:	fc                   	cld    
c0011ac9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011acb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011acf:	50                   	push   eax
c0011ad0:	6a 00                	push   0x0
c0011ad2:	6a 00                	push   0x0
c0011ad4:	6a 27                	push   0x27
c0011ad6:	e8 77 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011adb:	83 c4 34             	add    esp,0x34
c0011ade:	5e                   	pop    esi
c0011adf:	5f                   	pop    edi
c0011ae0:	c3                   	ret    

c0011ae1 <KiDefaultSignalHandlerResume(int)>:
c0011ae1:	57                   	push   edi
c0011ae2:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011ae7:	56                   	push   esi
c0011ae8:	be 49 26 02 c0       	mov    esi,0xc0022649
c0011aed:	83 ec 24             	sub    esp,0x24
c0011af0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011af4:	fc                   	cld    
c0011af5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011af7:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011afb:	50                   	push   eax
c0011afc:	6a 00                	push   0x0
c0011afe:	6a 00                	push   0x0
c0011b00:	6a 27                	push   0x27
c0011b02:	e8 4b 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011b07:	83 c4 34             	add    esp,0x34
c0011b0a:	5e                   	pop    esi
c0011b0b:	5f                   	pop    edi
c0011b0c:	c3                   	ret    

c0011b0d <KeDeinitSignals(SigHandlerBlock*)>:
c0011b0d:	e9 14 60 ff ff       	jmp    c0007b26 <free>

c0011b12 <KeInitSignals()>:
c0011b12:	53                   	push   ebx
c0011b13:	83 ec 14             	sub    esp,0x14
c0011b16:	68 c8 00 00 00       	push   0xc8
c0011b1b:	e8 f6 5f ff ff       	call   c0007b16 <malloc>
c0011b20:	83 c4 0c             	add    esp,0xc
c0011b23:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011b2d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011b37:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011b3e:	89 c3                	mov    ebx,eax
c0011b40:	6a 20                	push   0x20
c0011b42:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011b48:	6a 00                	push   0x0
c0011b4a:	50                   	push   eax
c0011b4b:	e8 a0 e9 fe ff       	call   c00004f0 <memset>
c0011b50:	83 c4 0c             	add    esp,0xc
c0011b53:	6a 44                	push   0x44
c0011b55:	6a 00                	push   0x0
c0011b57:	53                   	push   ebx
c0011b58:	e8 93 e9 fe ff       	call   c00004f0 <memset>
c0011b5d:	89 d8                	mov    eax,ebx
c0011b5f:	83 c4 18             	add    esp,0x18
c0011b62:	5b                   	pop    ebx
c0011b63:	c3                   	ret    

c0011b64 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b64:	53                   	push   ebx
c0011b65:	b8 01 00 00 00       	mov    eax,0x1
c0011b6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b72:	83 f9 10             	cmp    ecx,0x10
c0011b75:	7f 21                	jg     c0011b98 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b77:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b7e:	89 03                	mov    DWORD PTR [ebx],eax
c0011b80:	b8 01 00 00 00       	mov    eax,0x1
c0011b85:	d3 e0                	shl    eax,cl
c0011b87:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011b8b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011b8e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011b96:	31 c0                	xor    eax,eax
c0011b98:	5b                   	pop    ebx
c0011b99:	c3                   	ret    

c0011b9a <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011b9a:	55                   	push   ebp
c0011b9b:	57                   	push   edi
c0011b9c:	bf 08 00 00 00       	mov    edi,0x8
c0011ba1:	56                   	push   esi
c0011ba2:	53                   	push   ebx
c0011ba3:	83 ec 18             	sub    esp,0x18
c0011ba6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011baa:	68 66 26 02 c0       	push   0xc0022666
c0011baf:	e8 f1 8d ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0011bb4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bbb:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	31 c9                	xor    ecx,ecx
c0011bc6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011bca:	99                   	cdq    
c0011bcb:	f7 ff                	idiv   edi
c0011bcd:	8d 42 24             	lea    eax,[edx+0x24]
c0011bd0:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011bd4:	85 f6                	test   esi,esi
c0011bd6:	75 1a                	jne    c0011bf2 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011bd8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011bdc:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011be0:	50                   	push   eax
c0011be1:	50                   	push   eax
c0011be2:	52                   	push   edx
c0011be3:	68 77 26 02 c0       	push   0xc0022677
c0011be8:	e8 b8 8d ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	eb 1b                	jmp    c0011c0d <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011bf2:	41                   	inc    ecx
c0011bf3:	83 f9 08             	cmp    ecx,0x8
c0011bf6:	75 ce                	jne    c0011bc6 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	be 01 00 00 00       	mov    esi,0x1
c0011c00:	68 98 26 02 c0       	push   0xc0022698
c0011c05:	e8 9b 8d ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0011c0a:	83 c4 10             	add    esp,0x10
c0011c0d:	83 c4 0c             	add    esp,0xc
c0011c10:	89 f0                	mov    eax,esi
c0011c12:	5b                   	pop    ebx
c0011c13:	5e                   	pop    esi
c0011c14:	5f                   	pop    edi
c0011c15:	5d                   	pop    ebp
c0011c16:	c3                   	ret    

c0011c17 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011c17:	55                   	push   ebp
c0011c18:	57                   	push   edi
c0011c19:	56                   	push   esi
c0011c1a:	53                   	push   ebx
c0011c1b:	51                   	push   ecx
c0011c1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c20:	85 db                	test   ebx,ebx
c0011c22:	0f 84 bc 00 00 00    	je     c0011ce4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c28:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011c2f:	0f 84 af 00 00 00    	je     c0011ce4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c35:	31 c9                	xor    ecx,ecx
c0011c37:	bf 08 00 00 00       	mov    edi,0x8
c0011c3c:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011c42:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011c45:	99                   	cdq    
c0011c46:	f7 ff                	idiv   edi
c0011c48:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011c4f:	85 ed                	test   ebp,ebp
c0011c51:	0f 84 9e 00 00 00    	je     c0011cf5 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011c57:	89 e9                	mov    ecx,ebp
c0011c59:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011c5f:	bf 01 00 00 00       	mov    edi,0x1
c0011c64:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c67:	d3 e7                	shl    edi,cl
c0011c69:	31 c9                	xor    ecx,ecx
c0011c6b:	b8 01 00 00 00       	mov    eax,0x1
c0011c70:	d3 e0                	shl    eax,cl
c0011c72:	85 04 24             	test   DWORD PTR [esp],eax
c0011c75:	74 06                	je     c0011c7d <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c77:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c7b:	75 67                	jne    c0011ce4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c7d:	41                   	inc    ecx
c0011c7e:	83 f9 11             	cmp    ecx,0x11
c0011c81:	75 e8                	jne    c0011c6b <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c83:	46                   	inc    esi
c0011c84:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011c87:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c8d:	09 f8                	or     eax,edi
c0011c8f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011c9a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011ca0:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011ca7:	31 c0                	xor    eax,eax
c0011ca9:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011cb1:	74 09                	je     c0011cbc <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011cb3:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011cba:	eb 06                	jmp    c0011cc2 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011cbc:	40                   	inc    eax
c0011cbd:	83 f8 08             	cmp    eax,0x8
c0011cc0:	75 e7                	jne    c0011ca9 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011cc2:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011cc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011cc9:	83 fd 09             	cmp    ebp,0x9
c0011ccc:	89 2a                	mov    DWORD PTR [edx],ebp
c0011cce:	75 07                	jne    c0011cd7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011cd0:	b8 a0 1a 01 c0       	mov    eax,0xc0011aa0
c0011cd5:	eb 31                	jmp    c0011d08 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cd7:	83 f8 01             	cmp    eax,0x1
c0011cda:	75 0c                	jne    c0011ce8 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011cdc:	f7 d7                	not    edi
c0011cde:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011ce4:	31 c0                	xor    eax,eax
c0011ce6:	eb 20                	jmp    c0011d08 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011ce8:	85 c0                	test   eax,eax
c0011cea:	75 1c                	jne    c0011d08 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cec:	8b 04 ad a0 3e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc160]
c0011cf3:	eb 13                	jmp    c0011d08 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cf5:	46                   	inc    esi
c0011cf6:	41                   	inc    ecx
c0011cf7:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011cfd:	83 f9 08             	cmp    ecx,0x8
c0011d00:	0f 85 36 ff ff ff    	jne    c0011c3c <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011d06:	eb dc                	jmp    c0011ce4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011d08:	5a                   	pop    edx
c0011d09:	5b                   	pop    ebx
c0011d0a:	5e                   	pop    esi
c0011d0b:	5f                   	pop    edi
c0011d0c:	5d                   	pop    ebp
c0011d0d:	c3                   	ret    

c0011d0e <KiCheckSignalZ>:
c0011d0e:	83 ec 10             	sub    esp,0x10
c0011d11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011d15:	50                   	push   eax
c0011d16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d1e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d24:	e8 ee fe ff ff       	call   c0011c17 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011d29:	5a                   	pop    edx
c0011d2a:	31 d2                	xor    edx,edx
c0011d2c:	59                   	pop    ecx
c0011d2d:	85 c0                	test   eax,eax
c0011d2f:	74 19                	je     c0011d4a <KiCheckSignalZ+0x3c>
c0011d31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011d37:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011d3a:	89 02                	mov    DWORD PTR [edx],eax
c0011d3c:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d47:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011d4a:	89 d0                	mov    eax,edx
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	c3                   	ret    

c0011d50 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011d50:	56                   	push   esi
c0011d51:	53                   	push   ebx
c0011d52:	bb 01 00 00 00       	mov    ebx,0x1
c0011d57:	52                   	push   edx
c0011d58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d5c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d60:	d3 e3                	shl    ebx,cl
c0011d62:	83 f9 10             	cmp    ecx,0x10
c0011d65:	7f 08                	jg     c0011d6f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d67:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d6d:	75 10                	jne    c0011d7f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d6f:	83 ec 0c             	sub    esp,0xc
c0011d72:	68 a9 26 02 c0       	push   0xc00226a9
c0011d77:	e8 7b f9 ff ff       	call   c00116f7 <KePanic(char const*)>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	f7 d3                	not    ebx
c0011d81:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011d87:	58                   	pop    eax
c0011d88:	5b                   	pop    ebx
c0011d89:	5e                   	pop    esi
c0011d8a:	c3                   	ret    

c0011d8b <KiFinishSignalZ>:
c0011d8b:	53                   	push   ebx
c0011d8c:	83 ec 10             	sub    esp,0x10
c0011d8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d93:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d9e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011da4:	e8 a7 ff ff ff       	call   c0011d50 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011da9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011daf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011db6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011dbd:	83 c4 18             	add    esp,0x18
c0011dc0:	5b                   	pop    ebx
c0011dc1:	c3                   	ret    

c0011dc2 <SysSeekDir(regs*)>:
c0011dc2:	31 c0                	xor    eax,eax
c0011dc4:	31 d2                	xor    edx,edx
c0011dc6:	c3                   	ret    

c0011dc7 <SysTellDir(regs*)>:
c0011dc7:	31 c0                	xor    eax,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	c3                   	ret    

c0011dcc <SysVerify(regs*)>:
c0011dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dd0:	31 d2                	xor    edx,edx
c0011dd2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011dd5:	c3                   	ret    

c0011dd6 <SysGetArgc(regs*)>:
c0011dd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ddb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dde:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011de4:	89 c2                	mov    edx,eax
c0011de6:	c1 fa 1f             	sar    edx,0x1f
c0011de9:	c3                   	ret    

c0011dea <SysTTYName(regs*)>:
c0011dea:	b8 01 00 00 00       	mov    eax,0x1
c0011def:	31 d2                	xor    edx,edx
c0011df1:	c3                   	ret    

c0011df2 <SysFormatDisk(regs*)>:
c0011df2:	56                   	push   esi
c0011df3:	53                   	push   ebx
c0011df4:	83 ec 04             	sub    esp,0x4
c0011df7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011dfb:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011e01:	eb 28                	jmp    c0011e2b <SysFormatDisk(regs*)+0x39>
c0011e03:	83 ec 0c             	sub    esp,0xc
c0011e06:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011e09:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011e0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011e0e:	51                   	push   ecx
c0011e0f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011e12:	51                   	push   ecx
c0011e13:	50                   	push   eax
c0011e14:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011e1b:	50                   	push   eax
c0011e1c:	53                   	push   ebx
c0011e1d:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011e20:	83 c4 20             	add    esp,0x20
c0011e23:	83 f8 08             	cmp    eax,0x8
c0011e26:	75 14                	jne    c0011e3c <SysFormatDisk(regs*)+0x4a>
c0011e28:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011e2b:	85 db                	test   ebx,ebx
c0011e2d:	75 d4                	jne    c0011e03 <SysFormatDisk(regs*)+0x11>
c0011e2f:	83 c4 04             	add    esp,0x4
c0011e32:	b8 03 00 00 00       	mov    eax,0x3
c0011e37:	31 d2                	xor    edx,edx
c0011e39:	5b                   	pop    ebx
c0011e3a:	5e                   	pop    esi
c0011e3b:	c3                   	ret    
c0011e3c:	85 c0                	test   eax,eax
c0011e3e:	74 1f                	je     c0011e5f <SysFormatDisk(regs*)+0x6d>
c0011e40:	83 f8 09             	cmp    eax,0x9
c0011e43:	74 0d                	je     c0011e52 <SysFormatDisk(regs*)+0x60>
c0011e45:	83 c4 04             	add    esp,0x4
c0011e48:	b8 02 00 00 00       	mov    eax,0x2
c0011e4d:	31 d2                	xor    edx,edx
c0011e4f:	5b                   	pop    ebx
c0011e50:	5e                   	pop    esi
c0011e51:	c3                   	ret    
c0011e52:	83 c4 04             	add    esp,0x4
c0011e55:	b8 01 00 00 00       	mov    eax,0x1
c0011e5a:	31 d2                	xor    edx,edx
c0011e5c:	5b                   	pop    ebx
c0011e5d:	5e                   	pop    esi
c0011e5e:	c3                   	ret    
c0011e5f:	83 c4 04             	add    esp,0x4
c0011e62:	31 c0                	xor    eax,eax
c0011e64:	31 d2                	xor    edx,edx
c0011e66:	5b                   	pop    ebx
c0011e67:	5e                   	pop    esi
c0011e68:	c3                   	ret    

c0011e69 <SysSetDiskVolumeLabel(regs*)>:
c0011e69:	56                   	push   esi
c0011e6a:	53                   	push   ebx
c0011e6b:	83 ec 04             	sub    esp,0x4
c0011e6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e72:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e75:	83 f8 19             	cmp    eax,0x19
c0011e78:	77 33                	ja     c0011ead <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e7a:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e81:	85 c9                	test   ecx,ecx
c0011e83:	74 28                	je     c0011ead <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e85:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011e88:	85 db                	test   ebx,ebx
c0011e8a:	74 21                	je     c0011ead <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e8c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011e92:	85 d2                	test   edx,edx
c0011e94:	74 17                	je     c0011ead <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e96:	8b 32                	mov    esi,DWORD PTR [edx]
c0011e98:	53                   	push   ebx
c0011e99:	50                   	push   eax
c0011e9a:	51                   	push   ecx
c0011e9b:	52                   	push   edx
c0011e9c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e9f:	83 c4 10             	add    esp,0x10
c0011ea2:	89 c2                	mov    edx,eax
c0011ea4:	83 c4 04             	add    esp,0x4
c0011ea7:	c1 fa 1f             	sar    edx,0x1f
c0011eaa:	5b                   	pop    ebx
c0011eab:	5e                   	pop    esi
c0011eac:	c3                   	ret    
c0011ead:	83 c4 04             	add    esp,0x4
c0011eb0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011eb5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eba:	5b                   	pop    ebx
c0011ebb:	5e                   	pop    esi
c0011ebc:	c3                   	ret    

c0011ebd <SysGetDiskVolumeLabel(regs*)>:
c0011ebd:	57                   	push   edi
c0011ebe:	56                   	push   esi
c0011ebf:	53                   	push   ebx
c0011ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011ec7:	83 fa 19             	cmp    edx,0x19
c0011eca:	77 3c                	ja     c0011f08 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ecc:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011ed3:	85 c9                	test   ecx,ecx
c0011ed5:	74 31                	je     c0011f08 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ed7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011eda:	85 db                	test   ebx,ebx
c0011edc:	74 2a                	je     c0011f08 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ede:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ee1:	85 f6                	test   esi,esi
c0011ee3:	74 23                	je     c0011f08 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ee5:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011eeb:	85 c0                	test   eax,eax
c0011eed:	74 19                	je     c0011f08 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ef4:	56                   	push   esi
c0011ef5:	53                   	push   ebx
c0011ef6:	52                   	push   edx
c0011ef7:	51                   	push   ecx
c0011ef8:	50                   	push   eax
c0011ef9:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011efc:	83 c4 20             	add    esp,0x20
c0011eff:	89 c2                	mov    edx,eax
c0011f01:	5b                   	pop    ebx
c0011f02:	c1 fa 1f             	sar    edx,0x1f
c0011f05:	5e                   	pop    esi
c0011f06:	5f                   	pop    edi
c0011f07:	c3                   	ret    
c0011f08:	5b                   	pop    ebx
c0011f09:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011f0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f13:	5e                   	pop    esi
c0011f14:	5f                   	pop    edi
c0011f15:	c3                   	ret    

c0011f16 <SysShutdown(regs*)>:
c0011f16:	83 ec 0c             	sub    esp,0xc
c0011f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f20:	85 c0                	test   eax,eax
c0011f22:	74 18                	je     c0011f3c <SysShutdown(regs*)+0x26>
c0011f24:	83 f8 01             	cmp    eax,0x1
c0011f27:	74 38                	je     c0011f61 <SysShutdown(regs*)+0x4b>
c0011f29:	83 f8 02             	cmp    eax,0x2
c0011f2c:	74 24                	je     c0011f52 <SysShutdown(regs*)+0x3c>
c0011f2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f33:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f38:	83 c4 0c             	add    esp,0xc
c0011f3b:	c3                   	ret    
c0011f3c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f41:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f43:	6a 00                	push   0x0
c0011f45:	6a 00                	push   0x0
c0011f47:	6a 00                	push   0x0
c0011f49:	50                   	push   eax
c0011f4a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f4d:	83 c4 10             	add    esp,0x10
c0011f50:	eb dc                	jmp    c0011f2e <SysShutdown(regs*)+0x18>
c0011f52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f57:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f59:	6a 00                	push   0x0
c0011f5b:	6a 00                	push   0x0
c0011f5d:	6a 01                	push   0x1
c0011f5f:	eb e8                	jmp    c0011f49 <SysShutdown(regs*)+0x33>
c0011f61:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f66:	85 c0                	test   eax,eax
c0011f68:	74 02                	je     c0011f6c <SysShutdown(regs*)+0x56>
c0011f6a:	ff d0                	call   eax
c0011f6c:	31 c0                	xor    eax,eax
c0011f6e:	31 d2                	xor    edx,edx
c0011f70:	83 c4 0c             	add    esp,0xc
c0011f73:	c3                   	ret    

c0011f74 <SysRealpath(regs*)>:
c0011f74:	83 ec 0c             	sub    esp,0xc
c0011f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f7b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f7e:	85 d2                	test   edx,edx
c0011f80:	74 07                	je     c0011f89 <SysRealpath(regs*)+0x15>
c0011f82:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f85:	85 c0                	test   eax,eax
c0011f87:	75 0b                	jne    c0011f94 <SysRealpath(regs*)+0x20>
c0011f89:	b8 01 00 00 00       	mov    eax,0x1
c0011f8e:	31 d2                	xor    edx,edx
c0011f90:	83 c4 0c             	add    esp,0xc
c0011f93:	c3                   	ret    
c0011f94:	6a 00                	push   0x0
c0011f96:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f9c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011f9f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011fa5:	51                   	push   ecx
c0011fa6:	52                   	push   edx
c0011fa7:	50                   	push   eax
c0011fa8:	e8 07 99 ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	31 c0                	xor    eax,eax
c0011fb2:	31 d2                	xor    edx,edx
c0011fb4:	83 c4 0c             	add    esp,0xc
c0011fb7:	c3                   	ret    

c0011fb8 <SysReadDir(regs*)>:
c0011fb8:	53                   	push   ebx
c0011fb9:	83 ec 18             	sub    esp,0x18
c0011fbc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fc0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fc3:	83 f8 02             	cmp    eax,0x2
c0011fc6:	76 61                	jbe    c0012029 <SysReadDir(regs*)+0x71>
c0011fc8:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011fcf:	77 49                	ja     c001201a <SysReadDir(regs*)+0x62>
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	50                   	push   eax
c0011fd5:	e8 39 75 ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	85 c0                	test   eax,eax
c0011fdf:	74 39                	je     c001201a <SysReadDir(regs*)+0x62>
c0011fe1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fe9:	83 ec 0c             	sub    esp,0xc
c0011fec:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ff2:	51                   	push   ecx
c0011ff3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ff6:	51                   	push   ecx
c0011ff7:	6a 00                	push   0x0
c0011ff9:	68 10 01 00 00       	push   0x110
c0011ffe:	50                   	push   eax
c0011fff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012002:	83 c4 20             	add    esp,0x20
c0012005:	85 c0                	test   eax,eax
c0012007:	74 29                	je     c0012032 <SysReadDir(regs*)+0x7a>
c0012009:	83 f8 07             	cmp    eax,0x7
c001200c:	74 1b                	je     c0012029 <SysReadDir(regs*)+0x71>
c001200e:	b8 02 00 00 00       	mov    eax,0x2
c0012013:	31 d2                	xor    edx,edx
c0012015:	83 c4 18             	add    esp,0x18
c0012018:	5b                   	pop    ebx
c0012019:	c3                   	ret    
c001201a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001201f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012024:	83 c4 18             	add    esp,0x18
c0012027:	5b                   	pop    ebx
c0012028:	c3                   	ret    
c0012029:	b8 01 00 00 00       	mov    eax,0x1
c001202e:	31 d2                	xor    edx,edx
c0012030:	eb e3                	jmp    c0012015 <SysReadDir(regs*)+0x5d>
c0012032:	31 c0                	xor    eax,eax
c0012034:	31 d2                	xor    edx,edx
c0012036:	eb dd                	jmp    c0012015 <SysReadDir(regs*)+0x5d>

c0012038 <SysIsATTY(regs*)>:
c0012038:	83 ec 0c             	sub    esp,0xc
c001203b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001203f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012042:	83 f8 02             	cmp    eax,0x2
c0012045:	76 07                	jbe    c001204e <SysIsATTY(regs*)+0x16>
c0012047:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001204c:	75 26                	jne    c0012074 <SysIsATTY(regs*)+0x3c>
c001204e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012053:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012056:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001205c:	85 c0                	test   eax,eax
c001205e:	74 24                	je     c0012084 <SysIsATTY(regs*)+0x4c>
c0012060:	83 ec 0c             	sub    esp,0xc
c0012063:	8b 10                	mov    edx,DWORD PTR [eax]
c0012065:	50                   	push   eax
c0012066:	ff 12                	call   DWORD PTR [edx]
c0012068:	31 d2                	xor    edx,edx
c001206a:	0f b6 c0             	movzx  eax,al
c001206d:	83 c4 10             	add    esp,0x10
c0012070:	83 c4 0c             	add    esp,0xc
c0012073:	c3                   	ret    
c0012074:	83 ec 0c             	sub    esp,0xc
c0012077:	50                   	push   eax
c0012078:	e8 96 74 ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	85 c0                	test   eax,eax
c0012082:	75 dc                	jne    c0012060 <SysIsATTY(regs*)+0x28>
c0012084:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012089:	ba ff ff ff ff       	mov    edx,0xffffffff
c001208e:	83 c4 0c             	add    esp,0xc
c0012091:	c3                   	ret    

c0012092 <SysSeek(regs*)>:
c0012092:	53                   	push   ebx
c0012093:	83 ec 08             	sub    esp,0x8
c0012096:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001209a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001209d:	8d 50 fd             	lea    edx,[eax-0x3]
c00120a0:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00120a6:	77 32                	ja     c00120da <SysSeek(regs*)+0x48>
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	50                   	push   eax
c00120ac:	e8 62 74 ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c00120b1:	83 c4 0c             	add    esp,0xc
c00120b4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00120b7:	31 db                	xor    ebx,ebx
c00120b9:	53                   	push   ebx
c00120ba:	51                   	push   ecx
c00120bb:	50                   	push   eax
c00120bc:	e8 c7 9b ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	85 c0                	test   eax,eax
c00120c6:	0f 95 c0             	setne  al
c00120c9:	31 d2                	xor    edx,edx
c00120cb:	0f b6 c0             	movzx  eax,al
c00120ce:	f7 d8                	neg    eax
c00120d0:	83 d2 00             	adc    edx,0x0
c00120d3:	83 c4 08             	add    esp,0x8
c00120d6:	f7 da                	neg    edx
c00120d8:	5b                   	pop    ebx
c00120d9:	c3                   	ret    
c00120da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120e4:	83 c4 08             	add    esp,0x8
c00120e7:	5b                   	pop    ebx
c00120e8:	c3                   	ret    

c00120e9 <SysTell(regs*)>:
c00120e9:	53                   	push   ebx
c00120ea:	83 ec 08             	sub    esp,0x8
c00120ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120f4:	83 f8 02             	cmp    eax,0x2
c00120f7:	76 4e                	jbe    c0012147 <SysTell(regs*)+0x5e>
c00120f9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120fe:	76 19                	jbe    c0012119 <SysTell(regs*)+0x30>
c0012100:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012103:	31 d2                	xor    edx,edx
c0012105:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001210b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012112:	31 c0                	xor    eax,eax
c0012114:	83 c4 08             	add    esp,0x8
c0012117:	5b                   	pop    ebx
c0012118:	c3                   	ret    
c0012119:	83 ec 0c             	sub    esp,0xc
c001211c:	50                   	push   eax
c001211d:	e8 f1 73 ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c0012122:	5a                   	pop    edx
c0012123:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012126:	59                   	pop    ecx
c0012127:	53                   	push   ebx
c0012128:	50                   	push   eax
c0012129:	e8 06 9c ff ff       	call   c000bd34 <File::tell(unsigned long long*)>
c001212e:	83 c4 10             	add    esp,0x10
c0012131:	85 c0                	test   eax,eax
c0012133:	0f 95 c0             	setne  al
c0012136:	31 d2                	xor    edx,edx
c0012138:	0f b6 c0             	movzx  eax,al
c001213b:	f7 d8                	neg    eax
c001213d:	83 d2 00             	adc    edx,0x0
c0012140:	83 c4 08             	add    esp,0x8
c0012143:	f7 da                	neg    edx
c0012145:	5b                   	pop    ebx
c0012146:	c3                   	ret    
c0012147:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001214c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012151:	83 c4 08             	add    esp,0x8
c0012154:	5b                   	pop    ebx
c0012155:	c3                   	ret    

c0012156 <SysSize(regs*)>:
c0012156:	53                   	push   ebx
c0012157:	83 ec 18             	sub    esp,0x18
c001215a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001215e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012161:	83 f8 02             	cmp    eax,0x2
c0012164:	76 54                	jbe    c00121ba <SysSize(regs*)+0x64>
c0012166:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001216b:	76 19                	jbe    c0012186 <SysSize(regs*)+0x30>
c001216d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012170:	31 d2                	xor    edx,edx
c0012172:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012178:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001217f:	31 c0                	xor    eax,eax
c0012181:	83 c4 18             	add    esp,0x18
c0012184:	5b                   	pop    ebx
c0012185:	c3                   	ret    
c0012186:	83 ec 0c             	sub    esp,0xc
c0012189:	50                   	push   eax
c001218a:	e8 84 73 ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c001218f:	83 c4 0c             	add    esp,0xc
c0012192:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012196:	52                   	push   edx
c0012197:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001219a:	52                   	push   edx
c001219b:	50                   	push   eax
c001219c:	e8 2b 9d ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	85 c0                	test   eax,eax
c00121a6:	0f 95 c0             	setne  al
c00121a9:	31 d2                	xor    edx,edx
c00121ab:	0f b6 c0             	movzx  eax,al
c00121ae:	f7 d8                	neg    eax
c00121b0:	83 d2 00             	adc    edx,0x0
c00121b3:	83 c4 18             	add    esp,0x18
c00121b6:	f7 da                	neg    edx
c00121b8:	5b                   	pop    ebx
c00121b9:	c3                   	ret    
c00121ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121c4:	83 c4 18             	add    esp,0x18
c00121c7:	5b                   	pop    ebx
c00121c8:	c3                   	ret    

c00121c9 <SysSizeFromFilename(regs*)>:
c00121c9:	55                   	push   ebp
c00121ca:	57                   	push   edi
c00121cb:	56                   	push   esi
c00121cc:	53                   	push   ebx
c00121cd:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121d3:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121da:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121dd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121e0:	85 f6                	test   esi,esi
c00121e2:	74 34                	je     c0012218 <SysSizeFromFilename(regs*)+0x4f>
c00121e4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121ea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121ed:	83 f8 02             	cmp    eax,0x2
c00121f0:	76 2d                	jbe    c001221f <SysSizeFromFilename(regs*)+0x56>
c00121f2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121f7:	76 3b                	jbe    c0012234 <SysSizeFromFilename(regs*)+0x6b>
c00121f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012202:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012209:	81 c4 5c 02 00 00    	add    esp,0x25c
c001220f:	31 c0                	xor    eax,eax
c0012211:	5b                   	pop    ebx
c0012212:	31 d2                	xor    edx,edx
c0012214:	5e                   	pop    esi
c0012215:	5f                   	pop    edi
c0012216:	5d                   	pop    ebp
c0012217:	c3                   	ret    
c0012218:	89 f8                	mov    eax,edi
c001221a:	83 f8 02             	cmp    eax,0x2
c001221d:	77 d3                	ja     c00121f2 <SysSizeFromFilename(regs*)+0x29>
c001221f:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012225:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001222a:	5b                   	pop    ebx
c001222b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012230:	5e                   	pop    esi
c0012231:	5f                   	pop    edi
c0012232:	5d                   	pop    ebp
c0012233:	c3                   	ret    
c0012234:	83 ec 0c             	sub    esp,0xc
c0012237:	68 14 01 00 00       	push   0x114
c001223c:	e8 d5 58 ff ff       	call   c0007b16 <malloc>
c0012241:	6a 01                	push   0x1
c0012243:	89 c5                	mov    ebp,eax
c0012245:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001224a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001224d:	51                   	push   ecx
c001224e:	57                   	push   edi
c001224f:	55                   	push   ebp
c0012250:	e8 79 98 ff ff       	call   c000bace <File::File(char const*, Process*, bool)>
c0012255:	83 c4 1c             	add    esp,0x1c
c0012258:	8d 44 24 23          	lea    eax,[esp+0x23]
c001225c:	50                   	push   eax
c001225d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012260:	53                   	push   ebx
c0012261:	55                   	push   ebp
c0012262:	e8 65 9c ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c0012267:	83 c4 10             	add    esp,0x10
c001226a:	85 ed                	test   ebp,ebp
c001226c:	74 15                	je     c0012283 <SysSizeFromFilename(regs*)+0xba>
c001226e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012272:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012275:	83 ec 0c             	sub    esp,0xc
c0012278:	55                   	push   ebp
c0012279:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001227c:	83 c4 10             	add    esp,0x10
c001227f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012283:	85 c0                	test   eax,eax
c0012285:	75 98                	jne    c001221f <SysSizeFromFilename(regs*)+0x56>
c0012287:	6a 00                	push   0x0
c0012289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001228e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012291:	05 0c 01 00 00       	add    eax,0x10c
c0012296:	50                   	push   eax
c0012297:	57                   	push   edi
c0012298:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001229f:	53                   	push   ebx
c00122a0:	e8 0f 96 ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122a5:	58                   	pop    eax
c00122a6:	5a                   	pop    edx
c00122a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00122ab:	50                   	push   eax
c00122ac:	53                   	push   ebx
c00122ad:	e8 6a 90 ff ff       	call   c000b31c <KeDereferenceSymlink(char const*, char*)>
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	83 f8 01             	cmp    eax,0x1
c00122b8:	74 1a                	je     c00122d4 <SysSizeFromFilename(regs*)+0x10b>
c00122ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00122bf:	74 26                	je     c00122e7 <SysSizeFromFilename(regs*)+0x11e>
c00122c1:	85 f6                	test   esi,esi
c00122c3:	0f 84 40 ff ff ff    	je     c0012209 <SysSizeFromFilename(regs*)+0x40>
c00122c9:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122cf:	e9 35 ff ff ff       	jmp    c0012209 <SysSizeFromFilename(regs*)+0x40>
c00122d4:	85 f6                	test   esi,esi
c00122d6:	0f 84 2d ff ff ff    	je     c0012209 <SysSizeFromFilename(regs*)+0x40>
c00122dc:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122e2:	e9 22 ff ff ff       	jmp    c0012209 <SysSizeFromFilename(regs*)+0x40>
c00122e7:	85 f6                	test   esi,esi
c00122e9:	0f 84 1a ff ff ff    	je     c0012209 <SysSizeFromFilename(regs*)+0x40>
c00122ef:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122f5:	e9 0f ff ff ff       	jmp    c0012209 <SysSizeFromFilename(regs*)+0x40>

c00122fa <SysSizeFromFilenameNoSymlink(regs*)>:
c00122fa:	55                   	push   ebp
c00122fb:	57                   	push   edi
c00122fc:	56                   	push   esi
c00122fd:	53                   	push   ebx
c00122fe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012304:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001230b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001230e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012311:	85 f6                	test   esi,esi
c0012313:	74 34                	je     c0012349 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0012315:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001231b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001231e:	83 f8 02             	cmp    eax,0x2
c0012321:	76 2d                	jbe    c0012350 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012323:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012328:	76 3b                	jbe    c0012365 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001232a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001232d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012333:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001233a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012340:	31 c0                	xor    eax,eax
c0012342:	5b                   	pop    ebx
c0012343:	31 d2                	xor    edx,edx
c0012345:	5e                   	pop    esi
c0012346:	5f                   	pop    edi
c0012347:	5d                   	pop    ebp
c0012348:	c3                   	ret    
c0012349:	89 f8                	mov    eax,edi
c001234b:	83 f8 02             	cmp    eax,0x2
c001234e:	77 d3                	ja     c0012323 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012350:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012356:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001235b:	5b                   	pop    ebx
c001235c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012361:	5e                   	pop    esi
c0012362:	5f                   	pop    edi
c0012363:	5d                   	pop    ebp
c0012364:	c3                   	ret    
c0012365:	83 ec 0c             	sub    esp,0xc
c0012368:	68 14 01 00 00       	push   0x114
c001236d:	e8 a4 57 ff ff       	call   c0007b16 <malloc>
c0012372:	6a 00                	push   0x0
c0012374:	89 c5                	mov    ebp,eax
c0012376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001237b:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001237e:	51                   	push   ecx
c001237f:	57                   	push   edi
c0012380:	55                   	push   ebp
c0012381:	e8 48 97 ff ff       	call   c000bace <File::File(char const*, Process*, bool)>
c0012386:	83 c4 1c             	add    esp,0x1c
c0012389:	8d 44 24 23          	lea    eax,[esp+0x23]
c001238d:	50                   	push   eax
c001238e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012391:	53                   	push   ebx
c0012392:	55                   	push   ebp
c0012393:	e8 34 9b ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c0012398:	83 c4 10             	add    esp,0x10
c001239b:	85 ed                	test   ebp,ebp
c001239d:	74 15                	je     c00123b4 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001239f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123a3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00123a6:	83 ec 0c             	sub    esp,0xc
c00123a9:	55                   	push   ebp
c00123aa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00123ad:	83 c4 10             	add    esp,0x10
c00123b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123b4:	85 c0                	test   eax,eax
c00123b6:	75 98                	jne    c0012350 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00123b8:	6a 00                	push   0x0
c00123ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123c2:	05 0c 01 00 00       	add    eax,0x10c
c00123c7:	50                   	push   eax
c00123c8:	57                   	push   edi
c00123c9:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00123d0:	53                   	push   ebx
c00123d1:	e8 de 94 ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00123d6:	58                   	pop    eax
c00123d7:	5a                   	pop    edx
c00123d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00123dc:	50                   	push   eax
c00123dd:	53                   	push   ebx
c00123de:	e8 39 8f ff ff       	call   c000b31c <KeDereferenceSymlink(char const*, char*)>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	83 f8 01             	cmp    eax,0x1
c00123e9:	74 1a                	je     c0012405 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00123eb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00123f0:	74 26                	je     c0012418 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00123f2:	85 f6                	test   esi,esi
c00123f4:	0f 84 40 ff ff ff    	je     c001233a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123fa:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012400:	e9 35 ff ff ff       	jmp    c001233a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012405:	85 f6                	test   esi,esi
c0012407:	0f 84 2d ff ff ff    	je     c001233a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001240d:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012413:	e9 22 ff ff ff       	jmp    c001233a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012418:	85 f6                	test   esi,esi
c001241a:	0f 84 1a ff ff ff    	je     c001233a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012420:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012426:	e9 0f ff ff ff       	jmp    c001233a <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001242b <SysClose(regs*)>:
c001242b:	53                   	push   ebx
c001242c:	83 ec 08             	sub    esp,0x8
c001242f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012433:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012436:	83 f8 02             	cmp    eax,0x2
c0012439:	76 41                	jbe    c001247c <SysClose(regs*)+0x51>
c001243b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012441:	83 fa 01             	cmp    edx,0x1
c0012444:	76 2d                	jbe    c0012473 <SysClose(regs*)+0x48>
c0012446:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001244b:	77 2f                	ja     c001247c <SysClose(regs*)+0x51>
c001244d:	83 ec 0c             	sub    esp,0xc
c0012450:	50                   	push   eax
c0012451:	e8 bd 70 ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c0012456:	89 c3                	mov    ebx,eax
c0012458:	89 04 24             	mov    DWORD PTR [esp],eax
c001245b:	e8 c8 97 ff ff       	call   c000bc28 <File::close()>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	85 db                	test   ebx,ebx
c0012465:	74 0c                	je     c0012473 <SysClose(regs*)+0x48>
c0012467:	83 ec 0c             	sub    esp,0xc
c001246a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001246c:	53                   	push   ebx
c001246d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012470:	83 c4 10             	add    esp,0x10
c0012473:	31 c0                	xor    eax,eax
c0012475:	31 d2                	xor    edx,edx
c0012477:	83 c4 08             	add    esp,0x8
c001247a:	5b                   	pop    ebx
c001247b:	c3                   	ret    
c001247c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012481:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012486:	83 c4 08             	add    esp,0x8
c0012489:	5b                   	pop    ebx
c001248a:	c3                   	ret    

c001248b <SysOpenDir(regs*)>:
c001248b:	56                   	push   esi
c001248c:	53                   	push   ebx
c001248d:	83 ec 04             	sub    esp,0x4
c0012490:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012494:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012497:	85 c9                	test   ecx,ecx
c0012499:	74 5d                	je     c00124f8 <SysOpenDir(regs*)+0x6d>
c001249b:	83 ec 0c             	sub    esp,0xc
c001249e:	68 14 01 00 00       	push   0x114
c00124a3:	e8 6e 56 ff ff       	call   c0007b16 <malloc>
c00124a8:	83 c4 0c             	add    esp,0xc
c00124ab:	89 c6                	mov    esi,eax
c00124ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124b5:	50                   	push   eax
c00124b6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00124b9:	52                   	push   edx
c00124ba:	56                   	push   esi
c00124bb:	e8 cc 9b ff ff       	call   c000c08c <Directory::Directory(char const*, Process*)>
c00124c0:	83 c4 10             	add    esp,0x10
c00124c3:	85 f6                	test   esi,esi
c00124c5:	74 31                	je     c00124f8 <SysOpenDir(regs*)+0x6d>
c00124c7:	83 ec 0c             	sub    esp,0xc
c00124ca:	56                   	push   esi
c00124cb:	e8 84 9c ff ff       	call   c000c154 <Directory::open()>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	85 c0                	test   eax,eax
c00124d5:	75 21                	jne    c00124f8 <SysOpenDir(regs*)+0x6d>
c00124d7:	83 ec 0c             	sub    esp,0xc
c00124da:	56                   	push   esi
c00124db:	e8 36 6d ff ff       	call   c0009216 <UnixFile::getFileDescriptor()>
c00124e0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124e3:	83 c4 10             	add    esp,0x10
c00124e6:	89 02                	mov    DWORD PTR [edx],eax
c00124e8:	c1 f8 1f             	sar    eax,0x1f
c00124eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124ee:	83 c4 04             	add    esp,0x4
c00124f1:	31 c0                	xor    eax,eax
c00124f3:	31 d2                	xor    edx,edx
c00124f5:	5b                   	pop    ebx
c00124f6:	5e                   	pop    esi
c00124f7:	c3                   	ret    
c00124f8:	83 c4 04             	add    esp,0x4
c00124fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012500:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012505:	5b                   	pop    ebx
c0012506:	5e                   	pop    esi
c0012507:	c3                   	ret    

c0012508 <SysMakeDir(regs*)>:
c0012508:	56                   	push   esi
c0012509:	53                   	push   ebx
c001250a:	83 ec 10             	sub    esp,0x10
c001250d:	68 14 01 00 00       	push   0x114
c0012512:	e8 ff 55 ff ff       	call   c0007b16 <malloc>
c0012517:	83 c4 0c             	add    esp,0xc
c001251a:	89 c3                	mov    ebx,eax
c001251c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012521:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012524:	50                   	push   eax
c0012525:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012529:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001252c:	52                   	push   edx
c001252d:	53                   	push   ebx
c001252e:	e8 59 9b ff ff       	call   c000c08c <Directory::Directory(char const*, Process*)>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	85 db                	test   ebx,ebx
c0012538:	74 2c                	je     c0012566 <SysMakeDir(regs*)+0x5e>
c001253a:	83 ec 0c             	sub    esp,0xc
c001253d:	53                   	push   ebx
c001253e:	e8 f1 9d ff ff       	call   c000c334 <Directory::create()>
c0012543:	89 c6                	mov    esi,eax
c0012545:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012547:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001254a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001254d:	83 c4 10             	add    esp,0x10
c0012550:	31 c0                	xor    eax,eax
c0012552:	85 f6                	test   esi,esi
c0012554:	0f 95 c0             	setne  al
c0012557:	31 d2                	xor    edx,edx
c0012559:	f7 d8                	neg    eax
c001255b:	83 d2 00             	adc    edx,0x0
c001255e:	83 c4 04             	add    esp,0x4
c0012561:	f7 da                	neg    edx
c0012563:	5b                   	pop    ebx
c0012564:	5e                   	pop    esi
c0012565:	c3                   	ret    
c0012566:	83 c4 04             	add    esp,0x4
c0012569:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001256e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012573:	5b                   	pop    ebx
c0012574:	5e                   	pop    esi
c0012575:	c3                   	ret    

c0012576 <SysCloseDir(regs*)>:
c0012576:	53                   	push   ebx
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001257e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012581:	8d 50 fd             	lea    edx,[eax-0x3]
c0012584:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001258a:	77 2f                	ja     c00125bb <SysCloseDir(regs*)+0x45>
c001258c:	83 ec 0c             	sub    esp,0xc
c001258f:	50                   	push   eax
c0012590:	e8 7e 6f ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c0012595:	89 c3                	mov    ebx,eax
c0012597:	89 04 24             	mov    DWORD PTR [esp],eax
c001259a:	e8 11 9c ff ff       	call   c000c1b0 <Directory::close()>
c001259f:	83 c4 10             	add    esp,0x10
c00125a2:	85 db                	test   ebx,ebx
c00125a4:	74 0c                	je     c00125b2 <SysCloseDir(regs*)+0x3c>
c00125a6:	83 ec 0c             	sub    esp,0xc
c00125a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125ab:	53                   	push   ebx
c00125ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125af:	83 c4 10             	add    esp,0x10
c00125b2:	31 c0                	xor    eax,eax
c00125b4:	31 d2                	xor    edx,edx
c00125b6:	83 c4 08             	add    esp,0x8
c00125b9:	5b                   	pop    ebx
c00125ba:	c3                   	ret    
c00125bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125c5:	83 c4 08             	add    esp,0x8
c00125c8:	5b                   	pop    ebx
c00125c9:	c3                   	ret    

c00125ca <SysWait(regs*)>:
c00125ca:	83 ec 10             	sub    esp,0x10
c00125cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00125d4:	52                   	push   edx
c00125d5:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00125d8:	51                   	push   ecx
c00125d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00125dc:	50                   	push   eax
c00125dd:	e8 46 3e 00 00       	call   c0016428 <waitTask(int, int*, int)>
c00125e2:	83 c4 1c             	add    esp,0x1c
c00125e5:	89 c2                	mov    edx,eax
c00125e7:	c1 fa 1f             	sar    edx,0x1f
c00125ea:	c3                   	ret    

c00125eb <SysNotImpl(regs*)>:
c00125eb:	83 ec 18             	sub    esp,0x18
c00125ee:	68 ba 26 02 c0       	push   0xc00226ba
c00125f3:	e8 ff f0 ff ff       	call   c00116f7 <KePanic(char const*)>
c00125f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012602:	83 c4 1c             	add    esp,0x1c
c0012605:	c3                   	ret    

c0012606 <SysPanic(regs*)>:
c0012606:	83 ec 18             	sub    esp,0x18
c0012609:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001260d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012610:	50                   	push   eax
c0012611:	e8 e1 f0 ff ff       	call   c00116f7 <KePanic(char const*)>
c0012616:	b8 01 00 00 00       	mov    eax,0x1
c001261b:	31 d2                	xor    edx,edx
c001261d:	83 c4 1c             	add    esp,0x1c
c0012620:	c3                   	ret    

c0012621 <SysRmdir(regs*)>:
c0012621:	56                   	push   esi
c0012622:	53                   	push   ebx
c0012623:	83 ec 20             	sub    esp,0x20
c0012626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001262a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001262d:	68 14 01 00 00       	push   0x114
c0012632:	e8 df 54 ff ff       	call   c0007b16 <malloc>
c0012637:	6a 00                	push   0x0
c0012639:	89 c3                	mov    ebx,eax
c001263b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012640:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012643:	50                   	push   eax
c0012644:	56                   	push   esi
c0012645:	53                   	push   ebx
c0012646:	e8 83 94 ff ff       	call   c000bace <File::File(char const*, Process*, bool)>
c001264b:	83 c4 14             	add    esp,0x14
c001264e:	53                   	push   ebx
c001264f:	e8 44 97 ff ff       	call   c000bd98 <File::unlink()>
c0012654:	83 c4 10             	add    esp,0x10
c0012657:	85 db                	test   ebx,ebx
c0012659:	74 14                	je     c001266f <SysRmdir(regs*)+0x4e>
c001265b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001265f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012661:	83 ec 0c             	sub    esp,0xc
c0012664:	53                   	push   ebx
c0012665:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012668:	83 c4 10             	add    esp,0x10
c001266b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001266f:	85 c0                	test   eax,eax
c0012671:	0f 95 c0             	setne  al
c0012674:	31 d2                	xor    edx,edx
c0012676:	0f b6 c0             	movzx  eax,al
c0012679:	f7 d8                	neg    eax
c001267b:	83 d2 00             	adc    edx,0x0
c001267e:	83 c4 14             	add    esp,0x14
c0012681:	f7 da                	neg    edx
c0012683:	5b                   	pop    ebx
c0012684:	5e                   	pop    esi
c0012685:	c3                   	ret    

c0012686 <SysUnlink(regs*)>:
c0012686:	56                   	push   esi
c0012687:	53                   	push   ebx
c0012688:	83 ec 20             	sub    esp,0x20
c001268b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001268f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012692:	68 14 01 00 00       	push   0x114
c0012697:	e8 7a 54 ff ff       	call   c0007b16 <malloc>
c001269c:	6a 00                	push   0x0
c001269e:	89 c3                	mov    ebx,eax
c00126a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126a8:	50                   	push   eax
c00126a9:	56                   	push   esi
c00126aa:	53                   	push   ebx
c00126ab:	e8 1e 94 ff ff       	call   c000bace <File::File(char const*, Process*, bool)>
c00126b0:	83 c4 14             	add    esp,0x14
c00126b3:	53                   	push   ebx
c00126b4:	e8 df 96 ff ff       	call   c000bd98 <File::unlink()>
c00126b9:	83 c4 10             	add    esp,0x10
c00126bc:	85 db                	test   ebx,ebx
c00126be:	74 14                	je     c00126d4 <SysUnlink(regs*)+0x4e>
c00126c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126c4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00126c6:	83 ec 0c             	sub    esp,0xc
c00126c9:	53                   	push   ebx
c00126ca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126d4:	85 c0                	test   eax,eax
c00126d6:	0f 95 c0             	setne  al
c00126d9:	31 d2                	xor    edx,edx
c00126db:	0f b6 c0             	movzx  eax,al
c00126de:	f7 d8                	neg    eax
c00126e0:	83 d2 00             	adc    edx,0x0
c00126e3:	83 c4 14             	add    esp,0x14
c00126e6:	f7 da                	neg    edx
c00126e8:	5b                   	pop    ebx
c00126e9:	5e                   	pop    esi
c00126ea:	c3                   	ret    

c00126eb <SysGetArgv(regs*)>:
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00126f2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00126f5:	85 c0                	test   eax,eax
c00126f7:	78 2c                	js     c0012725 <SysGetArgv(regs*)+0x3a>
c00126f9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00126ff:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012702:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012708:	7d 1b                	jge    c0012725 <SysGetArgv(regs*)+0x3a>
c001270a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012711:	85 c0                	test   eax,eax
c0012713:	74 18                	je     c001272d <SysGetArgv(regs*)+0x42>
c0012715:	83 ec 08             	sub    esp,0x8
c0012718:	50                   	push   eax
c0012719:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001271c:	50                   	push   eax
c001271d:	e8 1e df fe ff       	call   c0000640 <strcpy>
c0012722:	83 c4 10             	add    esp,0x10
c0012725:	31 c0                	xor    eax,eax
c0012727:	31 d2                	xor    edx,edx
c0012729:	83 c4 0c             	add    esp,0xc
c001272c:	c3                   	ret    
c001272d:	b8 01 00 00 00       	mov    eax,0x1
c0012732:	31 d2                	xor    edx,edx
c0012734:	83 c4 0c             	add    esp,0xc
c0012737:	c3                   	ret    

c0012738 <SysUSleep(regs*)>:
c0012738:	83 ec 1c             	sub    esp,0x1c
c001273b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001273f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012742:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012745:	6a 00                	push   0x0
c0012747:	6a 64                	push   0x64
c0012749:	52                   	push   edx
c001274a:	50                   	push   eax
c001274b:	e8 00 d1 00 00       	call   c001f850 <__udivdi3>
c0012750:	83 c4 14             	add    esp,0x14
c0012753:	50                   	push   eax
c0012754:	e8 b3 3d 00 00       	call   c001650c <milliTenthSleep(unsigned int)>
c0012759:	31 c0                	xor    eax,eax
c001275b:	31 d2                	xor    edx,edx
c001275d:	83 c4 1c             	add    esp,0x1c
c0012760:	c3                   	ret    

c0012761 <SysSpawn(regs*)>:
c0012761:	56                   	push   esi
c0012762:	53                   	push   ebx
c0012763:	83 ec 04             	sub    esp,0x4
c0012766:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001276a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001276d:	85 f6                	test   esi,esi
c001276f:	75 0a                	jne    c001277b <SysSpawn(regs*)+0x1a>
c0012771:	83 c4 04             	add    esp,0x4
c0012774:	31 c0                	xor    eax,eax
c0012776:	31 d2                	xor    edx,edx
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	c3                   	ret    
c001277b:	83 ec 0c             	sub    esp,0xc
c001277e:	68 24 07 00 00       	push   0x724
c0012783:	e8 8e 53 ff ff       	call   c0007b16 <malloc>
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001278e:	89 c6                	mov    esi,eax
c0012790:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012793:	85 c9                	test   ecx,ecx
c0012795:	75 39                	jne    c00127d0 <SysSpawn(regs*)+0x6f>
c0012797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001279c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001279f:	52                   	push   edx
c00127a0:	50                   	push   eax
c00127a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127a4:	50                   	push   eax
c00127a5:	56                   	push   esi
c00127a6:	e8 b1 33 00 00       	call   c0015b5c <Process::Process(char const*, Process*, char**)>
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00127b5:	75 ba                	jne    c0012771 <SysSpawn(regs*)+0x10>
c00127b7:	83 ec 0c             	sub    esp,0xc
c00127ba:	56                   	push   esi
c00127bb:	e8 d8 38 00 00       	call   c0016098 <Process::createUserThread()>
c00127c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	89 c2                	mov    edx,eax
c00127c7:	83 c4 04             	add    esp,0x4
c00127ca:	c1 fa 1f             	sar    edx,0x1f
c00127cd:	5b                   	pop    ebx
c00127ce:	5e                   	pop    esi
c00127cf:	c3                   	ret    
c00127d0:	31 c0                	xor    eax,eax
c00127d2:	eb cb                	jmp    c001279f <SysSpawn(regs*)+0x3e>

c00127d4 <SysGetEnv(regs*)>:
c00127d4:	57                   	push   edi
c00127d5:	56                   	push   esi
c00127d6:	53                   	push   ebx
c00127d7:	83 ec 1c             	sub    esp,0x1c
c00127da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00127de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127e3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00127e6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00127e9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00127ec:	51                   	push   ecx
c00127ed:	e8 bd ed ff ff       	call   c00115af <KeGetProcessTotalEnvCount(Process*)>
c00127f2:	83 c4 10             	add    esp,0x10
c00127f5:	39 c7                	cmp    edi,eax
c00127f7:	7c 14                	jl     c001280d <SysGetEnv(regs*)+0x39>
c00127f9:	85 f6                	test   esi,esi
c00127fb:	75 0b                	jne    c0012808 <SysGetEnv(regs*)+0x34>
c00127fd:	83 c4 10             	add    esp,0x10
c0012800:	31 c0                	xor    eax,eax
c0012802:	5b                   	pop    ebx
c0012803:	31 d2                	xor    edx,edx
c0012805:	5e                   	pop    esi
c0012806:	5f                   	pop    edi
c0012807:	c3                   	ret    
c0012808:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001280b:	eb f0                	jmp    c00127fd <SysGetEnv(regs*)+0x29>
c001280d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012811:	83 ec 04             	sub    esp,0x4
c0012814:	57                   	push   edi
c0012815:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001281b:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001281e:	57                   	push   edi
c001281f:	50                   	push   eax
c0012820:	e8 aa ed ff ff       	call   c00115cf <KeGetProcessEnvPair(Process*, int)>
c0012825:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001282c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012830:	83 c4 0c             	add    esp,0xc
c0012833:	85 d2                	test   edx,edx
c0012835:	75 23                	jne    c001285a <SysGetEnv(regs*)+0x86>
c0012837:	83 ec 0c             	sub    esp,0xc
c001283a:	50                   	push   eax
c001283b:	e8 30 dd fe ff       	call   c0000570 <strlen>
c0012840:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012843:	89 c3                	mov    ebx,eax
c0012845:	e8 26 dd fe ff       	call   c0000570 <strlen>
c001284a:	83 c4 10             	add    esp,0x10
c001284d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012851:	83 c4 10             	add    esp,0x10
c0012854:	31 d2                	xor    edx,edx
c0012856:	5b                   	pop    ebx
c0012857:	5e                   	pop    esi
c0012858:	5f                   	pop    edi
c0012859:	c3                   	ret    
c001285a:	83 ec 08             	sub    esp,0x8
c001285d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012860:	50                   	push   eax
c0012861:	56                   	push   esi
c0012862:	e8 d9 dd fe ff       	call   c0000640 <strcpy>
c0012867:	58                   	pop    eax
c0012868:	5a                   	pop    edx
c0012869:	68 d4 26 02 c0       	push   0xc00226d4
c001286e:	56                   	push   esi
c001286f:	e8 cc df fe ff       	call   c0000840 <strcat>
c0012874:	59                   	pop    ecx
c0012875:	5b                   	pop    ebx
c0012876:	57                   	push   edi
c0012877:	56                   	push   esi
c0012878:	e8 c3 df fe ff       	call   c0000840 <strcat>
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	e9 78 ff ff ff       	jmp    c00127fd <SysGetEnv(regs*)+0x29>

c0012885 <SysSetFatAttrib(regs*)>:
c0012885:	57                   	push   edi
c0012886:	56                   	push   esi
c0012887:	53                   	push   ebx
c0012888:	83 ec 1c             	sub    esp,0x1c
c001288b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001288f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012892:	68 14 01 00 00       	push   0x114
c0012897:	e8 7a 52 ff ff       	call   c0007b16 <malloc>
c001289c:	83 c4 0c             	add    esp,0xc
c001289f:	89 c3                	mov    ebx,eax
c00128a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00128a9:	50                   	push   eax
c00128aa:	57                   	push   edi
c00128ab:	53                   	push   ebx
c00128ac:	e8 fb 92 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c00128b1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00128b4:	83 c4 0c             	add    esp,0xc
c00128b7:	0f b6 d4             	movzx  edx,ah
c00128ba:	0f b6 c0             	movzx  eax,al
c00128bd:	52                   	push   edx
c00128be:	50                   	push   eax
c00128bf:	53                   	push   ebx
c00128c0:	e8 6d 95 ff ff       	call   c000be32 <File::chfatattr(unsigned char, unsigned char)>
c00128c5:	83 c4 10             	add    esp,0x10
c00128c8:	85 db                	test   ebx,ebx
c00128ca:	74 14                	je     c00128e0 <SysSetFatAttrib(regs*)+0x5b>
c00128cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00128d2:	83 ec 0c             	sub    esp,0xc
c00128d5:	53                   	push   ebx
c00128d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00128d9:	83 c4 10             	add    esp,0x10
c00128dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128e0:	85 c0                	test   eax,eax
c00128e2:	0f 95 c0             	setne  al
c00128e5:	31 d2                	xor    edx,edx
c00128e7:	0f b6 c0             	movzx  eax,al
c00128ea:	f7 d8                	neg    eax
c00128ec:	83 d2 00             	adc    edx,0x0
c00128ef:	83 c4 10             	add    esp,0x10
c00128f2:	f7 da                	neg    edx
c00128f4:	5b                   	pop    ebx
c00128f5:	5e                   	pop    esi
c00128f6:	5f                   	pop    edi
c00128f7:	c3                   	ret    

c00128f8 <SysPipe(regs*)>:
c00128f8:	57                   	push   edi
c00128f9:	56                   	push   esi
c00128fa:	53                   	push   ebx
c00128fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ff:	83 ec 0c             	sub    esp,0xc
c0012902:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012905:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012908:	6a 20                	push   0x20
c001290a:	e8 07 52 ff ff       	call   c0007b16 <malloc>
c001290f:	89 c3                	mov    ebx,eax
c0012911:	58                   	pop    eax
c0012912:	5a                   	pop    edx
c0012913:	68 00 50 00 00       	push   0x5000
c0012918:	53                   	push   ebx
c0012919:	e8 6a 5b ff ff       	call   c0008488 <Pipe::Pipe(int)>
c001291e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012921:	e8 f0 68 ff ff       	call   c0009216 <UnixFile::getFileDescriptor()>
c0012926:	89 07                	mov    DWORD PTR [edi],eax
c0012928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001292b:	e8 e6 68 ff ff       	call   c0009216 <UnixFile::getFileDescriptor()>
c0012930:	83 c4 10             	add    esp,0x10
c0012933:	89 06                	mov    DWORD PTR [esi],eax
c0012935:	31 d2                	xor    edx,edx
c0012937:	5b                   	pop    ebx
c0012938:	31 c0                	xor    eax,eax
c001293a:	5e                   	pop    esi
c001293b:	5f                   	pop    edi
c001293c:	c3                   	ret    

c001293d <SysGetUnixTime(regs*)>:
c001293d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012942:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012948:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001294c:	e9 29 9c ff ff       	jmp    c000c57a <Clock::timeInSecondsLocal()>

c0012951 <string_ends_with(char const*, char const*)>:
c0012951:	57                   	push   edi
c0012952:	56                   	push   esi
c0012953:	53                   	push   ebx
c0012954:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012958:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	53                   	push   ebx
c0012960:	e8 0b dc fe ff       	call   c0000570 <strlen>
c0012965:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012968:	89 c6                	mov    esi,eax
c001296a:	e8 01 dc fe ff       	call   c0000570 <strlen>
c001296f:	83 c4 10             	add    esp,0x10
c0012972:	39 c6                	cmp    esi,eax
c0012974:	7d 06                	jge    c001297c <string_ends_with(char const*, char const*)+0x2b>
c0012976:	5b                   	pop    ebx
c0012977:	31 c0                	xor    eax,eax
c0012979:	5e                   	pop    esi
c001297a:	5f                   	pop    edi
c001297b:	c3                   	ret    
c001297c:	83 ec 08             	sub    esp,0x8
c001297f:	29 c6                	sub    esi,eax
c0012981:	57                   	push   edi
c0012982:	01 f3                	add    ebx,esi
c0012984:	53                   	push   ebx
c0012985:	e8 c6 dd fe ff       	call   c0000750 <strcmp>
c001298a:	83 c4 10             	add    esp,0x10
c001298d:	85 c0                	test   eax,eax
c001298f:	5b                   	pop    ebx
c0012990:	0f 94 c0             	sete   al
c0012993:	5e                   	pop    esi
c0012994:	0f b6 c0             	movzx  eax,al
c0012997:	5f                   	pop    edi
c0012998:	c3                   	ret    

c0012999 <SysOpen(regs*)>:
c0012999:	56                   	push   esi
c001299a:	53                   	push   ebx
c001299b:	81 ec 04 01 00 00    	sub    esp,0x104
c00129a1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00129a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129ab:	85 c0                	test   eax,eax
c00129ad:	0f 84 bc 01 00 00    	je     c0012b6f <SysOpen(regs*)+0x1d6>
c00129b3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129b6:	85 c0                	test   eax,eax
c00129b8:	0f 84 b1 01 00 00    	je     c0012b6f <SysOpen(regs*)+0x1d6>
c00129be:	6a 00                	push   0x0
c00129c0:	68 d6 26 02 c0       	push   0xc00226d6
c00129c5:	50                   	push   eax
c00129c6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129ca:	56                   	push   esi
c00129cb:	e8 e4 8e ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00129d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00129d3:	e8 98 db fe ff       	call   c0000570 <strlen>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	83 e8 01             	sub    eax,0x1
c00129de:	74 21                	je     c0012a01 <SysOpen(regs*)+0x68>
c00129e0:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00129e4:	eb 12                	jmp    c00129f8 <SysOpen(regs*)+0x5f>
c00129e6:	83 fa 3a             	cmp    edx,0x3a
c00129e9:	74 12                	je     c00129fd <SysOpen(regs*)+0x64>
c00129eb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00129ef:	83 e8 01             	sub    eax,0x1
c00129f2:	74 0d                	je     c0012a01 <SysOpen(regs*)+0x68>
c00129f4:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00129f8:	83 fa 2e             	cmp    edx,0x2e
c00129fb:	75 e9                	jne    c00129e6 <SysOpen(regs*)+0x4d>
c00129fd:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012a01:	83 ec 08             	sub    esp,0x8
c0012a04:	68 da 26 02 c0       	push   0xc00226da
c0012a09:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a0c:	50                   	push   eax
c0012a0d:	e8 3f ff ff ff       	call   c0012951 <string_ends_with(char const*, char const*)>
c0012a12:	83 c4 10             	add    esp,0x10
c0012a15:	85 c0                	test   eax,eax
c0012a17:	74 1d                	je     c0012a36 <SysOpen(regs*)+0x9d>
c0012a19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a1c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012a22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a29:	81 c4 04 01 00 00    	add    esp,0x104
c0012a2f:	31 c0                	xor    eax,eax
c0012a31:	31 d2                	xor    edx,edx
c0012a33:	5b                   	pop    ebx
c0012a34:	5e                   	pop    esi
c0012a35:	c3                   	ret    
c0012a36:	83 ec 08             	sub    esp,0x8
c0012a39:	68 df 26 02 c0       	push   0xc00226df
c0012a3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a41:	50                   	push   eax
c0012a42:	e8 0a ff ff ff       	call   c0012951 <string_ends_with(char const*, char const*)>
c0012a47:	83 c4 10             	add    esp,0x10
c0012a4a:	85 c0                	test   eax,eax
c0012a4c:	75 cb                	jne    c0012a19 <SysOpen(regs*)+0x80>
c0012a4e:	83 ec 08             	sub    esp,0x8
c0012a51:	68 db 26 02 c0       	push   0xc00226db
c0012a56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a59:	50                   	push   eax
c0012a5a:	e8 f1 dc fe ff       	call   c0000750 <strcmp>
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	85 c0                	test   eax,eax
c0012a64:	74 b3                	je     c0012a19 <SysOpen(regs*)+0x80>
c0012a66:	83 ec 08             	sub    esp,0x8
c0012a69:	68 da 26 02 c0       	push   0xc00226da
c0012a6e:	56                   	push   esi
c0012a6f:	e8 dd fe ff ff       	call   c0012951 <string_ends_with(char const*, char const*)>
c0012a74:	83 c4 10             	add    esp,0x10
c0012a77:	85 c0                	test   eax,eax
c0012a79:	75 9e                	jne    c0012a19 <SysOpen(regs*)+0x80>
c0012a7b:	83 ec 08             	sub    esp,0x8
c0012a7e:	68 e4 26 02 c0       	push   0xc00226e4
c0012a83:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a86:	50                   	push   eax
c0012a87:	e8 c5 fe ff ff       	call   c0012951 <string_ends_with(char const*, char const*)>
c0012a8c:	83 c4 10             	add    esp,0x10
c0012a8f:	85 c0                	test   eax,eax
c0012a91:	0f 85 eb 00 00 00    	jne    c0012b82 <SysOpen(regs*)+0x1e9>
c0012a97:	83 ec 08             	sub    esp,0x8
c0012a9a:	68 e9 26 02 c0       	push   0xc00226e9
c0012a9f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012aa2:	50                   	push   eax
c0012aa3:	e8 a9 fe ff ff       	call   c0012951 <string_ends_with(char const*, char const*)>
c0012aa8:	83 c4 10             	add    esp,0x10
c0012aab:	85 c0                	test   eax,eax
c0012aad:	0f 85 cf 00 00 00    	jne    c0012b82 <SysOpen(regs*)+0x1e9>
c0012ab3:	83 ec 08             	sub    esp,0x8
c0012ab6:	68 e5 26 02 c0       	push   0xc00226e5
c0012abb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012abe:	51                   	push   ecx
c0012abf:	e8 8c dc fe ff       	call   c0000750 <strcmp>
c0012ac4:	83 c4 10             	add    esp,0x10
c0012ac7:	85 c0                	test   eax,eax
c0012ac9:	0f 84 b3 00 00 00    	je     c0012b82 <SysOpen(regs*)+0x1e9>
c0012acf:	83 ec 08             	sub    esp,0x8
c0012ad2:	68 e4 26 02 c0       	push   0xc00226e4
c0012ad7:	56                   	push   esi
c0012ad8:	e8 74 fe ff ff       	call   c0012951 <string_ends_with(char const*, char const*)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	85 c0                	test   eax,eax
c0012ae2:	0f 85 9a 00 00 00    	jne    c0012b82 <SysOpen(regs*)+0x1e9>
c0012ae8:	83 ec 0c             	sub    esp,0xc
c0012aeb:	68 14 01 00 00       	push   0x114
c0012af0:	e8 21 50 ff ff       	call   c0007b16 <malloc>
c0012af5:	83 c4 0c             	add    esp,0xc
c0012af8:	89 c6                	mov    esi,eax
c0012afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012aff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b02:	50                   	push   eax
c0012b03:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012b06:	52                   	push   edx
c0012b07:	56                   	push   esi
c0012b08:	e8 9f 90 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	85 f6                	test   esi,esi
c0012b12:	74 5b                	je     c0012b6f <SysOpen(regs*)+0x1d6>
c0012b14:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012b17:	0f b6 c2             	movzx  eax,dl
c0012b1a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012b1d:	89 d0                	mov    eax,edx
c0012b1f:	83 e0 01             	and    eax,0x1
c0012b22:	f6 c2 02             	test   dl,0x2
c0012b25:	74 03                	je     c0012b2a <SysOpen(regs*)+0x191>
c0012b27:	83 c8 02             	or     eax,0x2
c0012b2a:	f6 c2 04             	test   dl,0x4
c0012b2d:	74 03                	je     c0012b32 <SysOpen(regs*)+0x199>
c0012b2f:	83 c8 04             	or     eax,0x4
c0012b32:	f6 c2 08             	test   dl,0x8
c0012b35:	74 03                	je     c0012b3a <SysOpen(regs*)+0x1a1>
c0012b37:	83 c8 0a             	or     eax,0xa
c0012b3a:	80 e2 10             	and    dl,0x10
c0012b3d:	74 03                	je     c0012b42 <SysOpen(regs*)+0x1a9>
c0012b3f:	83 c8 12             	or     eax,0x12
c0012b42:	83 ec 08             	sub    esp,0x8
c0012b45:	50                   	push   eax
c0012b46:	56                   	push   esi
c0012b47:	e8 7e 90 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	85 c0                	test   eax,eax
c0012b51:	75 1c                	jne    c0012b6f <SysOpen(regs*)+0x1d6>
c0012b53:	83 ec 0c             	sub    esp,0xc
c0012b56:	56                   	push   esi
c0012b57:	e8 ba 66 ff ff       	call   c0009216 <UnixFile::getFileDescriptor()>
c0012b5c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012b5f:	83 c4 10             	add    esp,0x10
c0012b62:	89 02                	mov    DWORD PTR [edx],eax
c0012b64:	c1 f8 1f             	sar    eax,0x1f
c0012b67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b6a:	e9 ba fe ff ff       	jmp    c0012a29 <SysOpen(regs*)+0x90>
c0012b6f:	81 c4 04 01 00 00    	add    esp,0x104
c0012b75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b7f:	5b                   	pop    ebx
c0012b80:	5e                   	pop    esi
c0012b81:	c3                   	ret    
c0012b82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b85:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b8b:	e9 92 fe ff ff       	jmp    c0012a22 <SysOpen(regs*)+0x89>

c0012b90 <KeSystemCall(regs*, void*)>:
c0012b90:	53                   	push   ebx
c0012b91:	83 ec 08             	sub    esp,0x8
c0012b94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b98:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b9b:	83 f8 3e             	cmp    eax,0x3e
c0012b9e:	77 16                	ja     c0012bb6 <KeSystemCall(regs*, void*)+0x26>
c0012ba0:	8b 14 85 00 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc100]
c0012ba7:	85 d2                	test   edx,edx
c0012ba9:	74 0b                	je     c0012bb6 <KeSystemCall(regs*, void*)+0x26>
c0012bab:	83 ec 0c             	sub    esp,0xc
c0012bae:	53                   	push   ebx
c0012baf:	ff d2                	call   edx
c0012bb1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012bb4:	eb 0d                	jmp    c0012bc3 <KeSystemCall(regs*, void*)+0x33>
c0012bb6:	52                   	push   edx
c0012bb7:	52                   	push   edx
c0012bb8:	50                   	push   eax
c0012bb9:	68 ee 26 02 c0       	push   0xc00226ee
c0012bbe:	e8 e2 7d ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012bcb:	31 d2                	xor    edx,edx
c0012bcd:	83 c4 08             	add    esp,0x8
c0012bd0:	5b                   	pop    ebx
c0012bd1:	c3                   	ret    
c0012bd2:	66 90                	xchg   ax,ax

c0012bd4 <KeSwitchEndian16(unsigned short)>:
c0012bd4:	83 ec 04             	sub    esp,0x4
c0012bd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bdb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012bdf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012be3:	c1 f8 08             	sar    eax,0x8
c0012be6:	89 c2                	mov    edx,eax
c0012be8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012bec:	c1 e0 08             	shl    eax,0x8
c0012bef:	09 d0                	or     eax,edx
c0012bf1:	83 c4 04             	add    esp,0x4
c0012bf4:	c3                   	ret    
c0012bf5:	8d 76 00             	lea    esi,[esi+0x0]

c0012bf8 <KeSwitchEndian32(unsigned int)>:
c0012bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bfc:	c1 e8 18             	shr    eax,0x18
c0012bff:	89 c2                	mov    edx,eax
c0012c01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c05:	c1 e0 08             	shl    eax,0x8
c0012c08:	25 00 00 ff 00       	and    eax,0xff0000
c0012c0d:	09 c2                	or     edx,eax
c0012c0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c13:	c1 e8 08             	shr    eax,0x8
c0012c16:	25 00 ff 00 00       	and    eax,0xff00
c0012c1b:	09 c2                	or     edx,eax
c0012c1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c21:	c1 e0 18             	shl    eax,0x18
c0012c24:	09 d0                	or     eax,edx
c0012c26:	c3                   	ret    
c0012c27:	90                   	nop

c0012c28 <EthernetCRC32(unsigned char*, int)>:
c0012c28:	83 ec 10             	sub    esp,0x10
c0012c2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012c30:	75 0a                	jne    c0012c3c <EthernetCRC32(unsigned char*, int)+0x14>
c0012c32:	b8 00 00 00 00       	mov    eax,0x0
c0012c37:	e9 8c 00 00 00       	jmp    c0012cc8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c3c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012c41:	7f 09                	jg     c0012c4c <EthernetCRC32(unsigned char*, int)+0x24>
c0012c43:	b8 00 00 00 00       	mov    eax,0x0
c0012c48:	eb 7e                	jmp    c0012cc8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c4a:	66 90                	xchg   ax,ax
c0012c4c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012c54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012c64:	7d 5a                	jge    c0012cc0 <EthernetCRC32(unsigned char*, int)+0x98>
c0012c66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c6e:	01 d0                	add    eax,edx
c0012c70:	8a 00                	mov    al,BYTE PTR [eax]
c0012c72:	0f b6 c0             	movzx  eax,al
c0012c75:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012c79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c81:	8d 76 00             	lea    esi,[esi+0x0]
c0012c84:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c89:	7f 2d                	jg     c0012cb8 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c8f:	83 e0 01             	and    eax,0x1
c0012c92:	74 10                	je     c0012ca4 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c98:	d1 e8                	shr    eax,1
c0012c9a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c9f:	eb 0b                	jmp    c0012cac <EthernetCRC32(unsigned char*, int)+0x84>
c0012ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ca8:	d1 e8                	shr    eax,1
c0012caa:	66 90                	xchg   ax,ax
c0012cac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012cb0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012cb5:	eb cd                	jmp    c0012c84 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012cb7:	90                   	nop
c0012cb8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012cbd:	eb 9d                	jmp    c0012c5c <EthernetCRC32(unsigned char*, int)+0x34>
c0012cbf:	90                   	nop
c0012cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cc4:	f7 d0                	not    eax
c0012cc6:	66 90                	xchg   ax,ax
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	c3                   	ret    

c0012ccc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012ccc:	83 ec 2c             	sub    esp,0x2c
c0012ccf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cd3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ce0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ce4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ce7:	0f b7 c0             	movzx  eax,ax
c0012cea:	3d 06 08 00 00       	cmp    eax,0x806
c0012cef:	75 13                	jne    c0012d04 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012cf1:	83 ec 0c             	sub    esp,0xc
c0012cf4:	68 02 27 02 c0       	push   0xc0022702
c0012cf9:	e8 a7 7c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	eb 25                	jmp    c0012d28 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012d03:	90                   	nop
c0012d04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d0b:	0f b7 c0             	movzx  eax,ax
c0012d0e:	3d 00 08 00 00       	cmp    eax,0x800
c0012d13:	75 13                	jne    c0012d28 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012d15:	83 ec 0c             	sub    esp,0xc
c0012d18:	68 18 27 02 c0       	push   0xc0022718
c0012d1d:	e8 83 7c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0012d22:	83 c4 10             	add    esp,0x10
c0012d25:	8d 76 00             	lea    esi,[esi+0x0]
c0012d28:	90                   	nop
c0012d29:	83 c4 2c             	add    esp,0x2c
c0012d2c:	c3                   	ret    

c0012d2d <CmOpen(char const*)>:
c0012d2d:	57                   	push   edi
c0012d2e:	56                   	push   esi
c0012d2f:	53                   	push   ebx
c0012d30:	83 ec 1c             	sub    esp,0x1c
c0012d33:	6a 30                	push   0x30
c0012d35:	e8 dc 4d ff ff       	call   c0007b16 <malloc>
c0012d3a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d41:	89 c3                	mov    ebx,eax
c0012d43:	e8 ce 4d ff ff       	call   c0007b16 <malloc>
c0012d48:	83 c4 0c             	add    esp,0xc
c0012d4b:	89 c6                	mov    esi,eax
c0012d4d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012d53:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d57:	50                   	push   eax
c0012d58:	e8 4f 8e ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0012d5d:	83 c4 0c             	add    esp,0xc
c0012d60:	89 33                	mov    DWORD PTR [ebx],esi
c0012d62:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012d66:	50                   	push   eax
c0012d67:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d6b:	50                   	push   eax
c0012d6c:	56                   	push   esi
c0012d6d:	e8 5a 91 ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c0012d72:	5a                   	pop    edx
c0012d73:	59                   	pop    ecx
c0012d74:	6a 01                	push   0x1
c0012d76:	ff 33                	push   DWORD PTR [ebx]
c0012d78:	e8 4d 8e ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0012d7d:	5e                   	pop    esi
c0012d7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d82:	e8 8f 4d ff ff       	call   c0007b16 <malloc>
c0012d87:	5a                   	pop    edx
c0012d88:	89 c7                	mov    edi,eax
c0012d8a:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d92:	56                   	push   esi
c0012d93:	57                   	push   edi
c0012d94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d9c:	50                   	push   eax
c0012d9d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012da0:	83 c4 14             	add    esp,0x14
c0012da3:	ff 33                	push   DWORD PTR [ebx]
c0012da5:	e8 7e 8e ff ff       	call   c000bc28 <File::close()>
c0012daa:	59                   	pop    ecx
c0012dab:	58                   	pop    eax
c0012dac:	6a 13                	push   0x13
c0012dae:	ff 33                	push   DWORD PTR [ebx]
c0012db0:	e8 15 8e ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0012db5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012db7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012dbc:	57                   	push   edi
c0012dbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012dc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012dc5:	50                   	push   eax
c0012dc6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012dc9:	83 c4 14             	add    esp,0x14
c0012dcc:	57                   	push   edi
c0012dcd:	e8 54 4d ff ff       	call   c0007b26 <free>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012dd8:	75 10                	jne    c0012dea <CmOpen(char const*)+0xbd>
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	68 2d 27 02 c0       	push   0xc002272d
c0012de2:	e8 10 e9 ff ff       	call   c00116f7 <KePanic(char const*)>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012ded:	50                   	push   eax
c0012dee:	6a 00                	push   0x0
c0012df0:	6a 00                	push   0x0
c0012df2:	ff 33                	push   DWORD PTR [ebx]
c0012df4:	e8 8f 8e ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0012df9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dfb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e00:	57                   	push   edi
c0012e01:	6a 00                	push   0x0
c0012e03:	6a 2b                	push   0x2b
c0012e05:	50                   	push   eax
c0012e06:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e09:	83 c4 1c             	add    esp,0x1c
c0012e0c:	6a 00                	push   0x0
c0012e0e:	6a 00                	push   0x0
c0012e10:	ff 33                	push   DWORD PTR [ebx]
c0012e12:	e8 71 8e ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0012e17:	83 c4 0c             	add    esp,0xc
c0012e1a:	6a 08                	push   0x8
c0012e1c:	68 3e 27 02 c0       	push   0xc002273e
c0012e21:	57                   	push   edi
c0012e22:	e8 59 d5 fe ff       	call   c0000380 <memcmp>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	85 c0                	test   eax,eax
c0012e2c:	74 10                	je     c0012e3e <CmOpen(char const*)+0x111>
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	68 47 27 02 c0       	push   0xc0022747
c0012e36:	e8 bc e8 ff ff       	call   c00116f7 <KePanic(char const*)>
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012e42:	89 d8                	mov    eax,ebx
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	5b                   	pop    ebx
c0012e48:	5e                   	pop    esi
c0012e49:	5f                   	pop    edi
c0012e4a:	c3                   	ret    

c0012e4b <CmClose(Reghive_Tag*)>:
c0012e4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e4f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e53:	74 0b                	je     c0012e60 <CmClose(Reghive_Tag*)+0x15>
c0012e55:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e5b:	e9 c8 8d ff ff       	jmp    c000bc28 <File::close()>
c0012e60:	c3                   	ret    

c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e61:	53                   	push   ebx
c0012e62:	83 ec 18             	sub    esp,0x18
c0012e65:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e69:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e6d:	74 29                	je     c0012e98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e6f:	50                   	push   eax
c0012e70:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e75:	99                   	cdq    
c0012e76:	52                   	push   edx
c0012e77:	50                   	push   eax
c0012e78:	ff 33                	push   DWORD PTR [ebx]
c0012e7a:	e8 09 8e ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0012e7f:	5a                   	pop    edx
c0012e80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e82:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e86:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e88:	51                   	push   ecx
c0012e89:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e8d:	6a 00                	push   0x0
c0012e8f:	6a 2b                	push   0x2b
c0012e91:	50                   	push   eax
c0012e92:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e95:	83 c4 20             	add    esp,0x20
c0012e98:	83 c4 18             	add    esp,0x18
c0012e9b:	5b                   	pop    ebx
c0012e9c:	c3                   	ret    

c0012e9d <CmGetString(Reghive_Tag*, int, char*)>:
c0012e9d:	55                   	push   ebp
c0012e9e:	57                   	push   edi
c0012e9f:	56                   	push   esi
c0012ea0:	53                   	push   ebx
c0012ea1:	31 db                	xor    ebx,ebx
c0012ea3:	83 ec 70             	sub    esp,0x70
c0012ea6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012ead:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012eb1:	50                   	push   eax
c0012eb2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012eb9:	55                   	push   ebp
c0012eba:	e8 a2 ff ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ebf:	83 c4 10             	add    esp,0x10
c0012ec2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012ec7:	c1 e0 08             	shl    eax,0x8
c0012eca:	89 c2                	mov    edx,eax
c0012ecc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012ed1:	09 d0                	or     eax,edx
c0012ed3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012ed8:	c1 e0 08             	shl    eax,0x8
c0012edb:	09 d0                	or     eax,edx
c0012edd:	74 25                	je     c0012f04 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012edf:	6b fb 0d             	imul   edi,ebx,0xd
c0012ee2:	52                   	push   edx
c0012ee3:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012ee7:	52                   	push   edx
c0012ee8:	50                   	push   eax
c0012ee9:	55                   	push   ebp
c0012eea:	e8 72 ff ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012eef:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012ef3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012efa:	b9 27 00 00 00       	mov    ecx,0x27
c0012eff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f01:	83 c4 10             	add    esp,0x10
c0012f04:	83 c3 03             	add    ebx,0x3
c0012f07:	83 fb 15             	cmp    ebx,0x15
c0012f0a:	75 b6                	jne    c0012ec2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012f0c:	83 c4 6c             	add    esp,0x6c
c0012f0f:	5b                   	pop    ebx
c0012f10:	5e                   	pop    esi
c0012f11:	5f                   	pop    edi
c0012f12:	5d                   	pop    ebp
c0012f13:	c3                   	ret    

c0012f14 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012f14:	83 ec 40             	sub    esp,0x40
c0012f17:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f1b:	50                   	push   eax
c0012f1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f24:	e8 38 ff ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	83 c8 ff             	or     eax,0xffffffff
c0012f2f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012f34:	75 19                	jne    c0012f4f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012f36:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012f3b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012f40:	c1 e0 08             	shl    eax,0x8
c0012f43:	09 c2                	or     edx,eax
c0012f45:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012f4a:	c1 e0 10             	shl    eax,0x10
c0012f4d:	09 d0                	or     eax,edx
c0012f4f:	83 c4 3c             	add    esp,0x3c
c0012f52:	c3                   	ret    

c0012f53 <CmGetNext(Reghive_Tag*, int)>:
c0012f53:	83 ec 40             	sub    esp,0x40
c0012f56:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f5a:	50                   	push   eax
c0012f5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f63:	e8 f9 fe ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f68:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012f6d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012f72:	c1 e0 08             	shl    eax,0x8
c0012f75:	09 c2                	or     edx,eax
c0012f77:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012f7c:	83 c4 4c             	add    esp,0x4c
c0012f7f:	c1 e0 10             	shl    eax,0x10
c0012f82:	09 d0                	or     eax,edx
c0012f84:	c3                   	ret    

c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f85:	53                   	push   ebx
c0012f86:	83 ec 18             	sub    esp,0x18
c0012f89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f8d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f91:	74 29                	je     c0012fbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f93:	50                   	push   eax
c0012f94:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f99:	99                   	cdq    
c0012f9a:	52                   	push   edx
c0012f9b:	50                   	push   eax
c0012f9c:	ff 33                	push   DWORD PTR [ebx]
c0012f9e:	e8 e5 8c ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0012fa3:	5a                   	pop    edx
c0012fa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fa6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012faa:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fac:	51                   	push   ecx
c0012fad:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012fb1:	6a 00                	push   0x0
c0012fb3:	6a 2b                	push   0x2b
c0012fb5:	50                   	push   eax
c0012fb6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012fb9:	83 c4 20             	add    esp,0x20
c0012fbc:	83 c4 18             	add    esp,0x18
c0012fbf:	5b                   	pop    ebx
c0012fc0:	c3                   	ret    

c0012fc1 <CmFreeExtent(Reghive_Tag*, int)>:
c0012fc1:	53                   	push   ebx
c0012fc2:	83 ec 3c             	sub    esp,0x3c
c0012fc5:	6a 2b                	push   0x2b
c0012fc7:	6a 00                	push   0x0
c0012fc9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012fcd:	53                   	push   ebx
c0012fce:	e8 1d d5 fe ff       	call   c00004f0 <memset>
c0012fd3:	83 c4 0c             	add    esp,0xc
c0012fd6:	53                   	push   ebx
c0012fd7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fdb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fdf:	e8 a1 ff ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fe4:	83 c4 48             	add    esp,0x48
c0012fe7:	5b                   	pop    ebx
c0012fe8:	c3                   	ret    

c0012fe9 <CmUpdateHeader(Reghive_Tag*)>:
c0012fe9:	83 ec 0c             	sub    esp,0xc
c0012fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012ff4:	74 10                	je     c0013006 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012ff6:	52                   	push   edx
c0012ff7:	8d 50 05             	lea    edx,[eax+0x5]
c0012ffa:	52                   	push   edx
c0012ffb:	6a 00                	push   0x0
c0012ffd:	50                   	push   eax
c0012ffe:	e8 82 ff ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013003:	83 c4 10             	add    esp,0x10
c0013006:	83 c4 0c             	add    esp,0xc
c0013009:	c3                   	ret    

c001300a <CmExpand(Reghive_Tag*, int)>:
c001300a:	57                   	push   edi
c001300b:	56                   	push   esi
c001300c:	83 ce ff             	or     esi,0xffffffff
c001300f:	53                   	push   ebx
c0013010:	83 ec 30             	sub    esp,0x30
c0013013:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013017:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001301b:	74 5f                	je     c001307c <CmExpand(Reghive_Tag*, int)+0x72>
c001301d:	31 d2                	xor    edx,edx
c001301f:	31 f6                	xor    esi,esi
c0013021:	50                   	push   eax
c0013022:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0013026:	52                   	push   edx
c0013027:	50                   	push   eax
c0013028:	ff 33                	push   DWORD PTR [ebx]
c001302a:	e8 59 8c ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c001302f:	83 c4 0c             	add    esp,0xc
c0013032:	6a 2b                	push   0x2b
c0013034:	6a 00                	push   0x0
c0013036:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001303a:	57                   	push   edi
c001303b:	e8 b0 d4 fe ff       	call   c00004f0 <memset>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0013047:	7d 1b                	jge    c0013064 <CmExpand(Reghive_Tag*, int)+0x5a>
c0013049:	83 ec 0c             	sub    esp,0xc
c001304c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001304e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0013052:	8b 10                	mov    edx,DWORD PTR [eax]
c0013054:	46                   	inc    esi
c0013055:	51                   	push   ecx
c0013056:	57                   	push   edi
c0013057:	6a 00                	push   0x0
c0013059:	6a 2b                	push   0x2b
c001305b:	50                   	push   eax
c001305c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001305f:	83 c4 20             	add    esp,0x20
c0013062:	eb df                	jmp    c0013043 <CmExpand(Reghive_Tag*, int)+0x39>
c0013064:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013068:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c001306b:	83 ec 0c             	sub    esp,0xc
c001306e:	01 f2                	add    edx,esi
c0013070:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0013073:	53                   	push   ebx
c0013074:	e8 70 ff ff ff       	call   c0012fe9 <CmUpdateHeader(Reghive_Tag*)>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	83 c4 30             	add    esp,0x30
c001307f:	89 f0                	mov    eax,esi
c0013081:	5b                   	pop    ebx
c0013082:	5e                   	pop    esi
c0013083:	5f                   	pop    edi
c0013084:	c3                   	ret    

c0013085 <CmFindUnusedExtent(Reghive_Tag*)>:
c0013085:	55                   	push   ebp
c0013086:	57                   	push   edi
c0013087:	56                   	push   esi
c0013088:	53                   	push   ebx
c0013089:	83 cb ff             	or     ebx,0xffffffff
c001308c:	83 ec 1c             	sub    esp,0x1c
c001308f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013093:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0013097:	74 68                	je     c0013101 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013099:	be 2b 00 00 00       	mov    esi,0x2b
c001309e:	51                   	push   ecx
c001309f:	31 ff                	xor    edi,edi
c00130a1:	6a 00                	push   0x0
c00130a3:	31 db                	xor    ebx,ebx
c00130a5:	6a 00                	push   0x0
c00130a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00130aa:	e8 d9 8b ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00130b5:	76 3b                	jbe    c00130f2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00130b7:	83 ec 0c             	sub    esp,0xc
c00130ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00130bd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00130c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00130c3:	51                   	push   ecx
c00130c4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00130c8:	51                   	push   ecx
c00130c9:	6a 00                	push   0x0
c00130cb:	6a 01                	push   0x1
c00130cd:	50                   	push   eax
c00130ce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00130d1:	83 c4 20             	add    esp,0x20
c00130d4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00130d9:	74 26                	je     c0013101 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00130db:	43                   	inc    ebx
c00130dc:	52                   	push   edx
c00130dd:	57                   	push   edi
c00130de:	56                   	push   esi
c00130df:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00130e2:	e8 a1 8b ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c00130e7:	83 c6 2b             	add    esi,0x2b
c00130ea:	83 d7 00             	adc    edi,0x0
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	eb c0                	jmp    c00130b2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00130f2:	50                   	push   eax
c00130f3:	50                   	push   eax
c00130f4:	6a 40                	push   0x40
c00130f6:	55                   	push   ebp
c00130f7:	e8 0e ff ff ff       	call   c001300a <CmExpand(Reghive_Tag*, int)>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	89 c3                	mov    ebx,eax
c0013101:	83 c4 1c             	add    esp,0x1c
c0013104:	89 d8                	mov    eax,ebx
c0013106:	5b                   	pop    ebx
c0013107:	5e                   	pop    esi
c0013108:	5f                   	pop    edi
c0013109:	5d                   	pop    ebp
c001310a:	c3                   	ret    

c001310b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001310b:	55                   	push   ebp
c001310c:	57                   	push   edi
c001310d:	56                   	push   esi
c001310e:	53                   	push   ebx
c001310f:	81 ec 88 00 00 00    	sub    esp,0x88
c0013115:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001311c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013123:	e8 5d ff ff ff       	call   c0013085 <CmFindUnusedExtent(Reghive_Tag*)>
c0013128:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001312c:	83 c4 0c             	add    esp,0xc
c001312f:	6a 2b                	push   0x2b
c0013131:	6a 00                	push   0x0
c0013133:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013137:	55                   	push   ebp
c0013138:	e8 b3 d3 fe ff       	call   c00004f0 <memset>
c001313d:	83 c4 10             	add    esp,0x10
c0013140:	85 db                	test   ebx,ebx
c0013142:	74 12                	je     c0013156 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013144:	51                   	push   ecx
c0013145:	55                   	push   ebp
c0013146:	53                   	push   ebx
c0013147:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001314e:	e8 0e fd ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001315a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013161:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013166:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013168:	85 db                	test   ebx,ebx
c001316a:	74 49                	je     c00131b5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001316c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013171:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013176:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001317a:	c1 e0 08             	shl    eax,0x8
c001317d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013183:	09 c8                	or     eax,ecx
c0013185:	74 11                	je     c0013198 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013187:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001318b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001318f:	c1 e8 10             	shr    eax,0x10
c0013192:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013196:	eb 0f                	jmp    c00131a7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013198:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001319d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00131a2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00131a7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00131ab:	c1 ea 08             	shr    edx,0x8
c00131ae:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00131b3:	eb 0f                	jmp    c00131c4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00131b5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00131ba:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00131bf:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00131c4:	52                   	push   edx
c00131c5:	8d 44 24 49          	lea    eax,[esp+0x49]
c00131c9:	50                   	push   eax
c00131ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131ce:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131d5:	e8 ab fd ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131da:	83 c4 10             	add    esp,0x10
c00131dd:	85 db                	test   ebx,ebx
c00131df:	74 12                	je     c00131f3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00131e1:	50                   	push   eax
c00131e2:	55                   	push   ebp
c00131e3:	53                   	push   ebx
c00131e4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131eb:	e8 95 fd ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131f0:	83 c4 10             	add    esp,0x10
c00131f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131f7:	83 c4 7c             	add    esp,0x7c
c00131fa:	5b                   	pop    ebx
c00131fb:	5e                   	pop    esi
c00131fc:	5f                   	pop    edi
c00131fd:	5d                   	pop    ebp
c00131fe:	c3                   	ret    

c00131ff <CmSetString(Reghive_Tag*, int, char const*)>:
c00131ff:	55                   	push   ebp
c0013200:	57                   	push   edi
c0013201:	56                   	push   esi
c0013202:	53                   	push   ebx
c0013203:	bb 27 00 00 00       	mov    ebx,0x27
c0013208:	81 ec 88 00 00 00    	sub    esp,0x88
c001320e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013215:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001321c:	e8 4f d3 fe ff       	call   c0000570 <strlen>
c0013221:	8d 48 26             	lea    ecx,[eax+0x26]
c0013224:	89 c8                	mov    eax,ecx
c0013226:	99                   	cdq    
c0013227:	f7 fb                	idiv   ebx
c0013229:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013236:	7e 10                	jle    c0013248 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013238:	83 ec 0c             	sub    esp,0xc
c001323b:	68 58 27 02 c0       	push   0xc0022758
c0013240:	e8 b2 e4 ff ff       	call   c00116f7 <KePanic(char const*)>
c0013245:	83 c4 10             	add    esp,0x10
c0013248:	31 ff                	xor    edi,edi
c001324a:	50                   	push   eax
c001324b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001324f:	53                   	push   ebx
c0013250:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013257:	56                   	push   esi
c0013258:	e8 04 fc ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001325d:	83 c4 10             	add    esp,0x10
c0013260:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013264:	89 d0                	mov    eax,edx
c0013266:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001326a:	c1 e0 08             	shl    eax,0x8
c001326d:	09 c2                	or     edx,eax
c001326f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013273:	c1 e2 08             	shl    edx,0x8
c0013276:	09 c2                	or     edx,eax
c0013278:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001327c:	7e 76                	jle    c00132f4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001327e:	85 d2                	test   edx,edx
c0013280:	75 25                	jne    c00132a7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0013282:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013287:	8d 44 24 45          	lea    eax,[esp+0x45]
c001328b:	50                   	push   eax
c001328c:	6a 00                	push   0x0
c001328e:	6a 00                	push   0x0
c0013290:	56                   	push   esi
c0013291:	e8 75 fe ff ff       	call   c001310b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	89 c2                	mov    edx,eax
c001329b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001329e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00132a1:	c1 f8 10             	sar    eax,0x10
c00132a4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00132a7:	55                   	push   ebp
c00132a8:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00132ac:	55                   	push   ebp
c00132ad:	52                   	push   edx
c00132ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00132b2:	56                   	push   esi
c00132b3:	e8 a9 fb ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132b8:	83 c4 0c             	add    esp,0xc
c00132bb:	6a 27                	push   0x27
c00132bd:	6a 00                	push   0x0
c00132bf:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00132c3:	51                   	push   ecx
c00132c4:	e8 27 d2 fe ff       	call   c00004f0 <memset>
c00132c9:	83 c4 0c             	add    esp,0xc
c00132cc:	6b c7 27             	imul   eax,edi,0x27
c00132cf:	6a 27                	push   0x27
c00132d1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00132d8:	50                   	push   eax
c00132d9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00132dd:	51                   	push   ecx
c00132de:	e8 9d d3 fe ff       	call   c0000680 <strncpy>
c00132e3:	83 c4 0c             	add    esp,0xc
c00132e6:	55                   	push   ebp
c00132e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00132eb:	52                   	push   edx
c00132ec:	56                   	push   esi
c00132ed:	e8 93 fc ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132f2:	eb 19                	jmp    c001330d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00132f4:	85 d2                	test   edx,edx
c00132f6:	74 18                	je     c0013310 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00132f8:	51                   	push   ecx
c00132f9:	51                   	push   ecx
c00132fa:	52                   	push   edx
c00132fb:	56                   	push   esi
c00132fc:	e8 c0 fc ff ff       	call   c0012fc1 <CmFreeExtent(Reghive_Tag*, int)>
c0013301:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013305:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013309:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	47                   	inc    edi
c0013311:	83 c3 03             	add    ebx,0x3
c0013314:	83 ff 07             	cmp    edi,0x7
c0013317:	0f 85 43 ff ff ff    	jne    c0013260 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001331d:	50                   	push   eax
c001331e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0013322:	50                   	push   eax
c0013323:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001332a:	56                   	push   esi
c001332b:	e8 55 fc ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013330:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013336:	5b                   	pop    ebx
c0013337:	5e                   	pop    esi
c0013338:	5f                   	pop    edi
c0013339:	5d                   	pop    ebp
c001333a:	c3                   	ret    

c001333b <CmGetMatch(char*, char*, bool, bool*)>:
c001333b:	56                   	push   esi
c001333c:	53                   	push   ebx
c001333d:	50                   	push   eax
c001333e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013342:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013347:	74 25                	je     c001336e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013349:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001334c:	31 db                	xor    ebx,ebx
c001334e:	50                   	push   eax
c001334f:	50                   	push   eax
c0013350:	8d 04 9d 00 40 02 c0 	lea    eax,[ebx*4-0x3ffdc000]
c0013357:	50                   	push   eax
c0013358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335c:	e8 ef d3 fe ff       	call   c0000750 <strcmp>
c0013361:	83 c4 10             	add    esp,0x10
c0013364:	85 c0                	test   eax,eax
c0013366:	74 2e                	je     c0013396 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013368:	43                   	inc    ebx
c0013369:	83 fb 3f             	cmp    ebx,0x3f
c001336c:	75 e0                	jne    c001334e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001336e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013371:	31 db                	xor    ebx,ebx
c0013373:	8d 04 9d 00 40 02 c0 	lea    eax,[ebx*4-0x3ffdc000]
c001337a:	51                   	push   ecx
c001337b:	51                   	push   ecx
c001337c:	50                   	push   eax
c001337d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013381:	e8 ca d3 fe ff       	call   c0000750 <strcmp>
c0013386:	83 c4 10             	add    esp,0x10
c0013389:	85 c0                	test   eax,eax
c001338b:	74 09                	je     c0013396 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001338d:	43                   	inc    ebx
c001338e:	83 fb 3f             	cmp    ebx,0x3f
c0013391:	75 e0                	jne    c0013373 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0013393:	83 cb ff             	or     ebx,0xffffffff
c0013396:	89 d8                	mov    eax,ebx
c0013398:	5a                   	pop    edx
c0013399:	5b                   	pop    ebx
c001339a:	5e                   	pop    esi
c001339b:	c3                   	ret    

c001339c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001339c:	55                   	push   ebp
c001339d:	31 c0                	xor    eax,eax
c001339f:	57                   	push   edi
c00133a0:	56                   	push   esi
c00133a1:	53                   	push   ebx
c00133a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00133aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00133ac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00133b0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00133b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133b7:	83 fd 1f             	cmp    ebp,0x1f
c00133ba:	7f 0b                	jg     c00133c7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00133bc:	0f b6 c2             	movzx  eax,dl
c00133bf:	d3 e0                	shl    eax,cl
c00133c1:	09 07                	or     DWORD PTR [edi],eax
c00133c3:	b0 01                	mov    al,0x1
c00133c5:	01 33                	add    DWORD PTR [ebx],esi
c00133c7:	5b                   	pop    ebx
c00133c8:	5e                   	pop    esi
c00133c9:	5f                   	pop    edi
c00133ca:	5d                   	pop    ebp
c00133cb:	c3                   	ret    

c00133cc <CmGetShift(unsigned int*, int*, int, bool*)>:
c00133cc:	57                   	push   edi
c00133cd:	56                   	push   esi
c00133ce:	53                   	push   ebx
c00133cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00133d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00133d7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00133db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00133df:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00133e1:	7c 17                	jl     c00133fa <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00133e3:	8b 17                	mov    edx,DWORD PTR [edi]
c00133e5:	b8 01 00 00 00       	mov    eax,0x1
c00133ea:	d3 e0                	shl    eax,cl
c00133ec:	48                   	dec    eax
c00133ed:	21 d0                	and    eax,edx
c00133ef:	d3 ea                	shr    edx,cl
c00133f1:	89 17                	mov    DWORD PTR [edi],edx
c00133f3:	29 0b                	sub    DWORD PTR [ebx],ecx
c00133f5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00133f8:	eb 05                	jmp    c00133ff <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00133fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00133fd:	31 c0                	xor    eax,eax
c00133ff:	5b                   	pop    ebx
c0013400:	5e                   	pop    esi
c0013401:	5f                   	pop    edi
c0013402:	c3                   	ret    

c0013403 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013403:	83 ec 40             	sub    esp,0x40
c0013406:	8d 44 24 09          	lea    eax,[esp+0x9]
c001340a:	50                   	push   eax
c001340b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001340f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013413:	e8 49 fa ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013418:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001341c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013420:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013424:	89 10                	mov    DWORD PTR [eax],edx
c0013426:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013429:	83 c4 4c             	add    esp,0x4c
c001342c:	c3                   	ret    

c001342d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001342d:	55                   	push   ebp
c001342e:	57                   	push   edi
c001342f:	56                   	push   esi
c0013430:	53                   	push   ebx
c0013431:	83 ec 40             	sub    esp,0x40
c0013434:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013438:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001343c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013440:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013444:	53                   	push   ebx
c0013445:	56                   	push   esi
c0013446:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001344a:	e8 12 fa ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001344f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013453:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013457:	83 c4 0c             	add    esp,0xc
c001345a:	53                   	push   ebx
c001345b:	56                   	push   esi
c001345c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013460:	e8 20 fb ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013465:	83 c4 4c             	add    esp,0x4c
c0013468:	5b                   	pop    ebx
c0013469:	5e                   	pop    esi
c001346a:	5f                   	pop    edi
c001346b:	5d                   	pop    ebp
c001346c:	c3                   	ret    

c001346d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001346d:	55                   	push   ebp
c001346e:	57                   	push   edi
c001346f:	56                   	push   esi
c0013470:	31 f6                	xor    esi,esi
c0013472:	53                   	push   ebx
c0013473:	31 db                	xor    ebx,ebx
c0013475:	83 ec 40             	sub    esp,0x40
c0013478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013480:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013488:	6a 12                	push   0x12
c001348a:	68 ee 00 00 00       	push   0xee
c001348f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013493:	e8 58 d0 fe ff       	call   c00004f0 <memset>
c0013498:	83 c4 10             	add    esp,0x10
c001349b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001349f:	6a 08                	push   0x8
c00134a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00134a5:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00134a9:	50                   	push   eax
c00134aa:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00134ae:	55                   	push   ebp
c00134af:	57                   	push   edi
c00134b0:	e8 e7 fe ff ff       	call   c001339c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00134b5:	83 c4 10             	add    esp,0x10
c00134b8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134bc:	50                   	push   eax
c00134bd:	6a 06                	push   0x6
c00134bf:	55                   	push   ebp
c00134c0:	57                   	push   edi
c00134c1:	e8 06 ff ff ff       	call   c00133cc <CmGetShift(unsigned int*, int*, int, bool*)>
c00134c6:	83 c4 10             	add    esp,0x10
c00134c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134ce:	74 07                	je     c00134d7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00134d0:	46                   	inc    esi
c00134d1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00134d5:	eb e1                	jmp    c00134b8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00134d7:	43                   	inc    ebx
c00134d8:	83 fb 12             	cmp    ebx,0x12
c00134db:	75 c2                	jne    c001349f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00134dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00134e1:	31 db                	xor    ebx,ebx
c00134e3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00134e6:	50                   	push   eax
c00134e7:	50                   	push   eax
c00134e8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00134ed:	43                   	inc    ebx
c00134ee:	8d 04 85 00 40 02 c0 	lea    eax,[eax*4-0x3ffdc000]
c00134f5:	50                   	push   eax
c00134f6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00134fa:	e8 41 d3 fe ff       	call   c0000840 <strcat>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	83 fb 18             	cmp    ebx,0x18
c0013505:	75 df                	jne    c00134e6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013507:	83 c4 3c             	add    esp,0x3c
c001350a:	31 c0                	xor    eax,eax
c001350c:	5b                   	pop    ebx
c001350d:	5e                   	pop    esi
c001350e:	5f                   	pop    edi
c001350f:	5d                   	pop    ebp
c0013510:	c3                   	ret    

c0013511 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013511:	83 ec 40             	sub    esp,0x40
c0013514:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013518:	50                   	push   eax
c0013519:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001351d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013521:	e8 3b f9 ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013526:	58                   	pop    eax
c0013527:	5a                   	pop    edx
c0013528:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001352c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013530:	50                   	push   eax
c0013531:	e8 37 ff ff ff       	call   c001346d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013536:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001353b:	83 c4 4c             	add    esp,0x4c
c001353e:	c3                   	ret    

c001353f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001353f:	55                   	push   ebp
c0013540:	57                   	push   edi
c0013541:	56                   	push   esi
c0013542:	53                   	push   ebx
c0013543:	31 db                	xor    ebx,ebx
c0013545:	83 ec 70             	sub    esp,0x70
c0013548:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001354f:	6a 30                	push   0x30
c0013551:	6a 00                	push   0x0
c0013553:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013557:	56                   	push   esi
c0013558:	e8 93 cf fe ff       	call   c00004f0 <memset>
c001355d:	83 c4 10             	add    esp,0x10
c0013560:	83 ec 0c             	sub    esp,0xc
c0013563:	57                   	push   edi
c0013564:	e8 07 d0 fe ff       	call   c0000570 <strlen>
c0013569:	83 c4 10             	add    esp,0x10
c001356c:	39 d8                	cmp    eax,ebx
c001356e:	76 16                	jbe    c0013586 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013577:	50                   	push   eax
c0013578:	e8 b3 d3 fe ff       	call   c0000930 <toupper>
c001357d:	83 c4 10             	add    esp,0x10
c0013580:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013583:	43                   	inc    ebx
c0013584:	eb da                	jmp    c0013560 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013586:	31 f6                	xor    esi,esi
c0013588:	52                   	push   edx
c0013589:	31 ff                	xor    edi,edi
c001358b:	6a 18                	push   0x18
c001358d:	6a 3f                	push   0x3f
c001358f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013593:	50                   	push   eax
c0013594:	e8 57 cf fe ff       	call   c00004f0 <memset>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00135a0:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00135a4:	84 c0                	test   al,al
c00135a6:	0f 84 b0 00 00 00    	je     c001365c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00135ac:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00135b0:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00135b5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00135b9:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00135be:	8d 6e 01             	lea    ebp,[esi+0x1]
c00135c1:	83 ec 0c             	sub    esp,0xc
c00135c4:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00135c8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00135cc:	53                   	push   ebx
c00135cd:	e8 9e cf fe ff       	call   c0000570 <strlen>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	85 c0                	test   eax,eax
c00135d7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135db:	74 0b                	je     c00135e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00135dd:	50                   	push   eax
c00135de:	6a 01                	push   0x1
c00135e0:	53                   	push   ebx
c00135e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135e5:	50                   	push   eax
c00135e6:	eb 0a                	jmp    c00135f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00135e8:	50                   	push   eax
c00135e9:	6a 00                	push   0x0
c00135eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00135ef:	50                   	push   eax
c00135f0:	6a 00                	push   0x0
c00135f2:	e8 44 fd ff ff       	call   c001333b <CmGetMatch(char*, char*, bool, bool*)>
c00135f7:	83 c4 10             	add    esp,0x10
c00135fa:	83 f8 ff             	cmp    eax,0xffffffff
c00135fd:	75 1a                	jne    c0013619 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00135ff:	83 ec 0c             	sub    esp,0xc
c0013602:	68 6d 27 02 c0       	push   0xc002276d
c0013607:	e8 eb e0 ff ff       	call   c00116f7 <KePanic(char const*)>
c001360c:	83 c4 10             	add    esp,0x10
c001360f:	b8 02 00 00 00       	mov    eax,0x2
c0013614:	e9 bc 00 00 00       	jmp    c00136d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013619:	83 ff 18             	cmp    edi,0x18
c001361c:	75 1a                	jne    c0013638 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001361e:	83 ec 0c             	sub    esp,0xc
c0013621:	68 82 27 02 c0       	push   0xc0022782
c0013626:	e8 cc e0 ff ff       	call   c00116f7 <KePanic(char const*)>
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	b8 01 00 00 00       	mov    eax,0x1
c0013633:	e9 9d 00 00 00       	jmp    c00136d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013638:	47                   	inc    edi
c0013639:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001363e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013642:	74 02                	je     c0013646 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013644:	89 ee                	mov    esi,ebp
c0013646:	83 ec 0c             	sub    esp,0xc
c0013649:	53                   	push   ebx
c001364a:	e8 21 cf fe ff       	call   c0000570 <strlen>
c001364f:	83 c4 10             	add    esp,0x10
c0013652:	85 c0                	test   eax,eax
c0013654:	74 06                	je     c001365c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013656:	46                   	inc    esi
c0013657:	e9 40 ff ff ff       	jmp    c001359c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001365c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013664:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001366c:	31 f6                	xor    esi,esi
c001366e:	50                   	push   eax
c001366f:	31 ff                	xor    edi,edi
c0013671:	6a 12                	push   0x12
c0013673:	68 ee 00 00 00       	push   0xee
c0013678:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001367f:	e8 6c ce fe ff       	call   c00004f0 <memset>
c0013684:	83 c4 10             	add    esp,0x10
c0013687:	83 fe 17             	cmp    esi,0x17
c001368a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001368e:	7e 26                	jle    c00136b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013690:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013694:	50                   	push   eax
c0013695:	6a 08                	push   0x8
c0013697:	55                   	push   ebp
c0013698:	53                   	push   ebx
c0013699:	e8 2e fd ff ff       	call   c00133cc <CmGetShift(unsigned int*, int*, int, bool*)>
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00136a6:	74 26                	je     c00136ce <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00136a8:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00136af:	4e                   	dec    esi
c00136b0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00136b3:	47                   	inc    edi
c00136b4:	eb 1c                	jmp    c00136d2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00136b6:	6a 06                	push   0x6
c00136b8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00136bd:	50                   	push   eax
c00136be:	55                   	push   ebp
c00136bf:	53                   	push   ebx
c00136c0:	e8 d7 fc ff ff       	call   c001339c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	84 c0                	test   al,al
c00136ca:	75 06                	jne    c00136d2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00136cc:	eb c2                	jmp    c0013690 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00136ce:	31 c0                	xor    eax,eax
c00136d0:	eb 03                	jmp    c00136d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00136d2:	46                   	inc    esi
c00136d3:	eb b2                	jmp    c0013687 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00136d5:	83 c4 6c             	add    esp,0x6c
c00136d8:	5b                   	pop    ebx
c00136d9:	5e                   	pop    esi
c00136da:	5f                   	pop    edi
c00136db:	5d                   	pop    ebp
c00136dc:	c3                   	ret    

c00136dd <CmCreateString(Reghive_Tag*, int, char const*)>:
c00136dd:	53                   	push   ebx
c00136de:	83 ec 3c             	sub    esp,0x3c
c00136e1:	6a 2b                	push   0x2b
c00136e3:	6a 00                	push   0x0
c00136e5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136e9:	53                   	push   ebx
c00136ea:	e8 01 ce fe ff       	call   c00004f0 <memset>
c00136ef:	58                   	pop    eax
c00136f0:	5a                   	pop    edx
c00136f1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136f5:	50                   	push   eax
c00136f6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136fa:	e8 40 fe ff ff       	call   c001353f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136ff:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013704:	83 c4 0c             	add    esp,0xc
c0013707:	6a 15                	push   0x15
c0013709:	6a 00                	push   0x0
c001370b:	8d 44 24 27          	lea    eax,[esp+0x27]
c001370f:	50                   	push   eax
c0013710:	e8 db cd fe ff       	call   c00004f0 <memset>
c0013715:	53                   	push   ebx
c0013716:	6a 00                	push   0x0
c0013718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001371c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013720:	e8 e6 f9 ff ff       	call   c001310b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013725:	83 c4 58             	add    esp,0x58
c0013728:	5b                   	pop    ebx
c0013729:	c3                   	ret    

c001372a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001372a:	56                   	push   esi
c001372b:	53                   	push   ebx
c001372c:	83 ec 48             	sub    esp,0x48
c001372f:	6a 12                	push   0x12
c0013731:	68 ff 00 00 00       	push   0xff
c0013736:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001373a:	56                   	push   esi
c001373b:	e8 b0 cd fe ff       	call   c00004f0 <memset>
c0013740:	5a                   	pop    edx
c0013741:	59                   	pop    ecx
c0013742:	56                   	push   esi
c0013743:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013747:	e8 f3 fd ff ff       	call   c001353f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001374c:	83 c4 10             	add    esp,0x10
c001374f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013753:	85 db                	test   ebx,ebx
c0013755:	74 42                	je     c0013799 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013757:	50                   	push   eax
c0013758:	8d 44 24 19          	lea    eax,[esp+0x19]
c001375c:	50                   	push   eax
c001375d:	53                   	push   ebx
c001375e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013762:	e8 fa f6 ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013767:	83 c4 0c             	add    esp,0xc
c001376a:	6a 12                	push   0x12
c001376c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013770:	50                   	push   eax
c0013771:	56                   	push   esi
c0013772:	e8 09 cc fe ff       	call   c0000380 <memcmp>
c0013777:	83 c4 10             	add    esp,0x10
c001377a:	85 c0                	test   eax,eax
c001377c:	74 1e                	je     c001379c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001377e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013783:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013788:	c1 e3 08             	shl    ebx,0x8
c001378b:	09 d8                	or     eax,ebx
c001378d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013792:	c1 e3 10             	shl    ebx,0x10
c0013795:	09 c3                	or     ebx,eax
c0013797:	eb ba                	jmp    c0013753 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013799:	83 cb ff             	or     ebx,0xffffffff
c001379c:	89 d8                	mov    eax,ebx
c001379e:	83 c4 44             	add    esp,0x44
c00137a1:	5b                   	pop    ebx
c00137a2:	5e                   	pop    esi
c00137a3:	c3                   	ret    

c00137a4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00137a4:	57                   	push   edi
c00137a5:	56                   	push   esi
c00137a6:	53                   	push   ebx
c00137a7:	83 ec 34             	sub    esp,0x34
c00137aa:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00137ae:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00137b2:	6a 2b                	push   0x2b
c00137b4:	6a 00                	push   0x0
c00137b6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00137ba:	53                   	push   ebx
c00137bb:	e8 30 cd fe ff       	call   c00004f0 <memset>
c00137c0:	58                   	pop    eax
c00137c1:	5a                   	pop    edx
c00137c2:	8d 44 24 11          	lea    eax,[esp+0x11]
c00137c6:	50                   	push   eax
c00137c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00137cb:	e8 6f fd ff ff       	call   c001353f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137d0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00137d4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00137d8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00137dc:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00137e0:	53                   	push   ebx
c00137e1:	6a 00                	push   0x0
c00137e3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137eb:	e8 1b f9 ff ff       	call   c001310b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137f0:	83 c4 50             	add    esp,0x50
c00137f3:	5b                   	pop    ebx
c00137f4:	5e                   	pop    esi
c00137f5:	5f                   	pop    edi
c00137f6:	c3                   	ret    

c00137f7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00137f7:	55                   	push   ebp
c00137f8:	57                   	push   edi
c00137f9:	56                   	push   esi
c00137fa:	53                   	push   ebx
c00137fb:	83 ec 40             	sub    esp,0x40
c00137fe:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013802:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013806:	6a 2b                	push   0x2b
c0013808:	6a 00                	push   0x0
c001380a:	8d 74 24 11          	lea    esi,[esp+0x11]
c001380e:	56                   	push   esi
c001380f:	e8 dc cc fe ff       	call   c00004f0 <memset>
c0013814:	5f                   	pop    edi
c0013815:	89 ef                	mov    edi,ebp
c0013817:	58                   	pop    eax
c0013818:	8d 44 24 11          	lea    eax,[esp+0x11]
c001381c:	50                   	push   eax
c001381d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013821:	e8 19 fd ff ff       	call   c001353f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013826:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001382b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013830:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013835:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001383a:	83 c4 10             	add    esp,0x10
c001383d:	85 ed                	test   ebp,ebp
c001383f:	74 14                	je     c0013855 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013841:	51                   	push   ecx
c0013842:	51                   	push   ecx
c0013843:	57                   	push   edi
c0013844:	53                   	push   ebx
c0013845:	e8 09 f7 ff ff       	call   c0012f53 <CmGetNext(Reghive_Tag*, int)>
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	85 c0                	test   eax,eax
c001384f:	74 04                	je     c0013855 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013851:	89 c7                	mov    edi,eax
c0013853:	eb e8                	jmp    c001383d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013855:	56                   	push   esi
c0013856:	6a 00                	push   0x0
c0013858:	57                   	push   edi
c0013859:	53                   	push   ebx
c001385a:	e8 ac f8 ff ff       	call   c001310b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001385f:	83 c4 0c             	add    esp,0xc
c0013862:	89 c7                	mov    edi,eax
c0013864:	56                   	push   esi
c0013865:	50                   	push   eax
c0013866:	53                   	push   ebx
c0013867:	e8 f5 f5 ff ff       	call   c0012e61 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001386c:	58                   	pop    eax
c001386d:	5a                   	pop    edx
c001386e:	6a 6c                	push   0x6c
c0013870:	6a 00                	push   0x0
c0013872:	6a 00                	push   0x0
c0013874:	68 93 27 02 c0       	push   0xc0022793
c0013879:	57                   	push   edi
c001387a:	53                   	push   ebx
c001387b:	e8 24 ff ff ff       	call   c00137a4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013880:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013884:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013888:	c1 e8 10             	shr    eax,0x10
c001388b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001388f:	83 c4 1c             	add    esp,0x1c
c0013892:	56                   	push   esi
c0013893:	57                   	push   edi
c0013894:	53                   	push   ebx
c0013895:	e8 eb f6 ff ff       	call   c0012f85 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001389a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001389f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00138a4:	c1 e0 08             	shl    eax,0x8
c00138a7:	09 c2                	or     edx,eax
c00138a9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00138ae:	83 c4 4c             	add    esp,0x4c
c00138b1:	c1 e0 10             	shl    eax,0x10
c00138b4:	5b                   	pop    ebx
c00138b5:	09 d0                	or     eax,edx
c00138b7:	5e                   	pop    esi
c00138b8:	5f                   	pop    edi
c00138b9:	5d                   	pop    ebp
c00138ba:	c3                   	ret    

c00138bb <zStrtok(char*, char const*)>:
c00138bb:	55                   	push   ebp
c00138bc:	57                   	push   edi
c00138bd:	56                   	push   esi
c00138be:	53                   	push   ebx
c00138bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138c7:	85 db                	test   ebx,ebx
c00138c9:	74 2f                	je     c00138fa <zStrtok(char*, char const*)+0x3f>
c00138cb:	85 c0                	test   eax,eax
c00138cd:	75 09                	jne    c00138d8 <zStrtok(char*, char const*)+0x1d>
c00138cf:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00138d4:	85 c0                	test   eax,eax
c00138d6:	74 50                	je     c0013928 <zStrtok(char*, char const*)+0x6d>
c00138d8:	31 c9                	xor    ecx,ecx
c00138da:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00138de:	74 03                	je     c00138e3 <zStrtok(char*, char const*)+0x28>
c00138e0:	41                   	inc    ecx
c00138e1:	eb f7                	jmp    c00138da <zStrtok(char*, char const*)+0x1f>
c00138e3:	31 d2                	xor    edx,edx
c00138e5:	39 ca                	cmp    edx,ecx
c00138e7:	74 15                	je     c00138fe <zStrtok(char*, char const*)+0x43>
c00138e9:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00138ed:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00138f0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00138f3:	39 ee                	cmp    esi,ebp
c00138f5:	74 13                	je     c001390a <zStrtok(char*, char const*)+0x4f>
c00138f7:	42                   	inc    edx
c00138f8:	eb eb                	jmp    c00138e5 <zStrtok(char*, char const*)+0x2a>
c00138fa:	31 c0                	xor    eax,eax
c00138fc:	eb 2a                	jmp    c0013928 <zStrtok(char*, char const*)+0x6d>
c00138fe:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013908:	eb 1e                	jmp    c0013928 <zStrtok(char*, char const*)+0x6d>
c001390a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001390d:	39 ce                	cmp    esi,ecx
c001390f:	75 0a                	jne    c001391b <zStrtok(char*, char const*)+0x60>
c0013911:	40                   	inc    eax
c0013912:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013917:	89 d8                	mov    eax,ebx
c0013919:	eb 0d                	jmp    c0013928 <zStrtok(char*, char const*)+0x6d>
c001391b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001391f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013922:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013928:	5b                   	pop    ebx
c0013929:	5e                   	pop    esi
c001392a:	5f                   	pop    edi
c001392b:	5d                   	pop    ebp
c001392c:	c3                   	ret    

c001392d <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001392d:	57                   	push   edi
c001392e:	56                   	push   esi
c001392f:	53                   	push   ebx
c0013930:	81 ec 08 01 00 00    	sub    esp,0x108
c0013936:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001393d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013944:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013948:	53                   	push   ebx
c0013949:	e8 f2 cc fe ff       	call   c0000640 <strcpy>
c001394e:	59                   	pop    ecx
c001394f:	5e                   	pop    esi
c0013950:	68 f7 2a 02 c0       	push   0xc0022af7
c0013955:	53                   	push   ebx
c0013956:	bb 01 00 00 00       	mov    ebx,0x1
c001395b:	e8 5b ff ff ff       	call   c00138bb <zStrtok(char*, char const*)>
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	85 c0                	test   eax,eax
c0013965:	74 3b                	je     c00139a2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013967:	52                   	push   edx
c0013968:	50                   	push   eax
c0013969:	6a 01                	push   0x1
c001396b:	57                   	push   edi
c001396c:	e8 b9 fd ff ff       	call   c001372a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013971:	59                   	pop    ecx
c0013972:	89 c3                	mov    ebx,eax
c0013974:	5e                   	pop    esi
c0013975:	68 f7 2a 02 c0       	push   0xc0022af7
c001397a:	6a 00                	push   0x0
c001397c:	e8 3a ff ff ff       	call   c00138bb <zStrtok(char*, char const*)>
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	89 c6                	mov    esi,eax
c0013986:	85 c0                	test   eax,eax
c0013988:	74 18                	je     c00139a2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001398a:	52                   	push   edx
c001398b:	52                   	push   edx
c001398c:	53                   	push   ebx
c001398d:	57                   	push   edi
c001398e:	e8 81 f5 ff ff       	call   c0012f14 <CmEnterDirectory(Reghive_Tag*, int)>
c0013993:	83 c4 10             	add    esp,0x10
c0013996:	89 c3                	mov    ebx,eax
c0013998:	83 f8 ff             	cmp    eax,0xffffffff
c001399b:	74 05                	je     c00139a2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001399d:	50                   	push   eax
c001399e:	56                   	push   esi
c001399f:	53                   	push   ebx
c00139a0:	eb c9                	jmp    c001396b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00139a2:	81 c4 00 01 00 00    	add    esp,0x100
c00139a8:	89 d8                	mov    eax,ebx
c00139aa:	5b                   	pop    ebx
c00139ab:	5e                   	pop    esi
c00139ac:	5f                   	pop    edi
c00139ad:	c3                   	ret    

c00139ae <CmDisplayTree(Reghive_Tag*, int, int)>:
c00139ae:	55                   	push   ebp
c00139af:	57                   	push   edi
c00139b0:	56                   	push   esi
c00139b1:	53                   	push   ebx
c00139b2:	83 ec 5c             	sub    esp,0x5c
c00139b5:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00139b9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00139bd:	85 db                	test   ebx,ebx
c00139bf:	0f 8e 84 00 00 00    	jle    c0013a49 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00139c5:	31 ed                	xor    ebp,ebp
c00139c7:	57                   	push   edi
c00139c8:	6a 32                	push   0x32
c00139ca:	6a 00                	push   0x0
c00139cc:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00139d0:	57                   	push   edi
c00139d1:	e8 1a cb fe ff       	call   c00004f0 <memset>
c00139d6:	83 c4 0c             	add    esp,0xc
c00139d9:	57                   	push   edi
c00139da:	53                   	push   ebx
c00139db:	56                   	push   esi
c00139dc:	e8 30 fb ff ff       	call   c0013511 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00139e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139e5:	83 c4 10             	add    esp,0x10
c00139e8:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00139ec:	7d 13                	jge    c0013a01 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	45                   	inc    ebp
c00139f2:	68 9b 2e 02 c0       	push   0xc0022e9b
c00139f7:	e8 a9 6f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00139fc:	83 c4 10             	add    esp,0x10
c00139ff:	eb e7                	jmp    c00139e8 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013a01:	51                   	push   ecx
c0013a02:	57                   	push   edi
c0013a03:	53                   	push   ebx
c0013a04:	68 99 27 02 c0       	push   0xc0022799
c0013a09:	e8 97 6f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013a16:	75 1e                	jne    c0013a36 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013a18:	52                   	push   edx
c0013a19:	52                   	push   edx
c0013a1a:	53                   	push   ebx
c0013a1b:	56                   	push   esi
c0013a1c:	e8 f3 f4 ff ff       	call   c0012f14 <CmEnterDirectory(Reghive_Tag*, int)>
c0013a21:	83 c4 0c             	add    esp,0xc
c0013a24:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013a28:	8d 51 04             	lea    edx,[ecx+0x4]
c0013a2b:	52                   	push   edx
c0013a2c:	50                   	push   eax
c0013a2d:	56                   	push   esi
c0013a2e:	e8 7b ff ff ff       	call   c00139ae <CmDisplayTree(Reghive_Tag*, int, int)>
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	50                   	push   eax
c0013a37:	50                   	push   eax
c0013a38:	53                   	push   ebx
c0013a39:	56                   	push   esi
c0013a3a:	e8 14 f5 ff ff       	call   c0012f53 <CmGetNext(Reghive_Tag*, int)>
c0013a3f:	83 c4 10             	add    esp,0x10
c0013a42:	89 c3                	mov    ebx,eax
c0013a44:	e9 74 ff ff ff       	jmp    c00139bd <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013a49:	83 c4 5c             	add    esp,0x5c
c0013a4c:	5b                   	pop    ebx
c0013a4d:	5e                   	pop    esi
c0013a4e:	5f                   	pop    edi
c0013a4f:	5d                   	pop    ebp
c0013a50:	c3                   	ret    

c0013a51 <CmSplitFinalSlashInPlace(char*)>:
c0013a51:	53                   	push   ebx
c0013a52:	83 ec 14             	sub    esp,0x14
c0013a55:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a59:	53                   	push   ebx
c0013a5a:	e8 11 cb fe ff       	call   c0000570 <strlen>
c0013a5f:	83 c4 10             	add    esp,0x10
c0013a62:	48                   	dec    eax
c0013a63:	85 c0                	test   eax,eax
c0013a65:	74 15                	je     c0013a7c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013a67:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013a6a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013a6e:	75 09                	jne    c0013a79 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013a70:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a73:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013a77:	eb 05                	jmp    c0013a7e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013a79:	48                   	dec    eax
c0013a7a:	eb e7                	jmp    c0013a63 <CmSplitFinalSlashInPlace(char*)+0x12>
c0013a7c:	31 c0                	xor    eax,eax
c0013a7e:	83 c4 08             	add    esp,0x8
c0013a81:	5b                   	pop    ebx
c0013a82:	c3                   	ret    

c0013a83 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a83:	55                   	push   ebp
c0013a84:	57                   	push   edi
c0013a85:	56                   	push   esi
c0013a86:	53                   	push   ebx
c0013a87:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a8d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a94:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013a96:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a99:	80 fa 40             	cmp    dl,0x40
c0013a9c:	75 1c                	jne    c0013aba <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013a9e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013aa1:	85 c9                	test   ecx,ecx
c0013aa3:	0f 84 09 01 00 00    	je     c0013bb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013aa9:	8d 43 01             	lea    eax,[ebx+0x1]
c0013aac:	83 f9 3a             	cmp    ecx,0x3a
c0013aaf:	74 04                	je     c0013ab5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013ab1:	89 c3                	mov    ebx,eax
c0013ab3:	eb e9                	jmp    c0013a9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013ab5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013ab8:	89 c3                	mov    ebx,eax
c0013aba:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013abe:	50                   	push   eax
c0013abf:	6a 40                	push   0x40
c0013ac1:	6a 00                	push   0x0
c0013ac3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013ac7:	50                   	push   eax
c0013ac8:	e8 23 ca fe ff       	call   c00004f0 <memset>
c0013acd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013ad4:	31 c0                	xor    eax,eax
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013ade:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013ae1:	89 d1                	mov    ecx,edx
c0013ae3:	85 d2                	test   edx,edx
c0013ae5:	0f 84 c7 00 00 00    	je     c0013bb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013aeb:	3d c7 00 00 00       	cmp    eax,0xc7
c0013af0:	0f 8f bc 00 00 00    	jg     c0013bb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013af6:	83 fa 0a             	cmp    edx,0xa
c0013af9:	0f 85 a4 00 00 00    	jne    c0013ba3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013aff:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013b04:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013b09:	89 c8                	mov    eax,ecx
c0013b0b:	a8 df                	test   al,0xdf
c0013b0d:	0f 94 c2             	sete   dl
c0013b10:	83 f9 23             	cmp    ecx,0x23
c0013b13:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013b18:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013b1c:	80 e2 01             	and    dl,0x1
c0013b1f:	75 4a                	jne    c0013b6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b21:	83 e8 09             	sub    eax,0x9
c0013b24:	3c 01                	cmp    al,0x1
c0013b26:	76 43                	jbe    c0013b6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b28:	83 f9 5b             	cmp    ecx,0x5b
c0013b2b:	75 42                	jne    c0013b6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013b2d:	83 fe 40             	cmp    esi,0x40
c0013b30:	75 39                	jne    c0013b6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013b39:	52                   	push   edx
c0013b3a:	e8 31 ca fe ff       	call   c0000570 <strlen>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	83 f8 3f             	cmp    eax,0x3f
c0013b45:	77 6b                	ja     c0013bb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b47:	50                   	push   eax
c0013b48:	50                   	push   eax
c0013b49:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013b4d:	52                   	push   edx
c0013b4e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b52:	52                   	push   edx
c0013b53:	e8 e8 ca fe ff       	call   c0000640 <strcpy>
c0013b58:	58                   	pop    eax
c0013b59:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b5d:	52                   	push   edx
c0013b5e:	e8 0d ca fe ff       	call   c0000570 <strlen>
c0013b63:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013b68:	83 c4 10             	add    esp,0x10
c0013b6b:	31 d2                	xor    edx,edx
c0013b6d:	eb 3b                	jmp    c0013baa <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013b6f:	83 fe 40             	cmp    esi,0x40
c0013b72:	74 06                	je     c0013b7a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013b74:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013b78:	eb 20                	jmp    c0013b9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013b7a:	50                   	push   eax
c0013b7b:	50                   	push   eax
c0013b7c:	55                   	push   ebp
c0013b7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b81:	50                   	push   eax
c0013b82:	e8 c9 cb fe ff       	call   c0000750 <strcmp>
c0013b87:	83 c4 10             	add    esp,0x10
c0013b8a:	85 c0                	test   eax,eax
c0013b8c:	75 dd                	jne    c0013b6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b8e:	eb e4                	jmp    c0013b74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013b90:	8d 50 01             	lea    edx,[eax+0x1]
c0013b93:	83 f9 3d             	cmp    ecx,0x3d
c0013b96:	74 1e                	je     c0013bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013b98:	89 d0                	mov    eax,edx
c0013b9a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013b9d:	85 c9                	test   ecx,ecx
c0013b9f:	75 ef                	jne    c0013b90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013ba1:	eb 0f                	jmp    c0013bb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ba3:	8d 50 01             	lea    edx,[eax+0x1]
c0013ba6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013baa:	47                   	inc    edi
c0013bab:	89 d0                	mov    eax,edx
c0013bad:	e9 2c ff ff ff       	jmp    c0013ade <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013bb2:	31 c0                	xor    eax,eax
c0013bb4:	eb 33                	jmp    c0013be9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013bb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013bba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013bbd:	50                   	push   eax
c0013bbe:	50                   	push   eax
c0013bbf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013bc3:	50                   	push   eax
c0013bc4:	53                   	push   ebx
c0013bc5:	e8 86 cb fe ff       	call   c0000750 <strcmp>
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	85 c0                	test   eax,eax
c0013bcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bd3:	75 96                	jne    c0013b6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013bd5:	51                   	push   ecx
c0013bd6:	51                   	push   ecx
c0013bd7:	52                   	push   edx
c0013bd8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013bdf:	e8 5c ca fe ff       	call   c0000640 <strcpy>
c0013be4:	83 c4 10             	add    esp,0x10
c0013be7:	b0 01                	mov    al,0x1
c0013be9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013bef:	5b                   	pop    ebx
c0013bf0:	5e                   	pop    esi
c0013bf1:	5f                   	pop    edi
c0013bf2:	5d                   	pop    ebp
c0013bf3:	c3                   	ret    

c0013bf4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013bf4:	57                   	push   edi
c0013bf5:	56                   	push   esi
c0013bf6:	53                   	push   ebx
c0013bf7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013bfd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013c04:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013c0b:	53                   	push   ebx
c0013c0c:	e8 5f c9 fe ff       	call   c0000570 <strlen>
c0013c11:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c14:	89 c7                	mov    edi,eax
c0013c16:	e8 55 c9 fe ff       	call   c0000570 <strlen>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013c22:	3d ff 00 00 00       	cmp    eax,0xff
c0013c27:	0f 87 d3 00 00 00    	ja     c0013d00 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c2d:	57                   	push   edi
c0013c2e:	57                   	push   edi
c0013c2f:	56                   	push   esi
c0013c30:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013c34:	56                   	push   esi
c0013c35:	e8 06 ca fe ff       	call   c0000640 <strcpy>
c0013c3a:	58                   	pop    eax
c0013c3b:	5a                   	pop    edx
c0013c3c:	68 f7 2a 02 c0       	push   0xc0022af7
c0013c41:	56                   	push   esi
c0013c42:	e8 f9 cb fe ff       	call   c0000840 <strcat>
c0013c47:	59                   	pop    ecx
c0013c48:	5f                   	pop    edi
c0013c49:	53                   	push   ebx
c0013c4a:	56                   	push   esi
c0013c4b:	e8 f0 cb fe ff       	call   c0000840 <strcat>
c0013c50:	58                   	pop    eax
c0013c51:	5a                   	pop    edx
c0013c52:	68 a3 27 02 c0       	push   0xc00227a3
c0013c57:	56                   	push   esi
c0013c58:	e8 e3 cb fe ff       	call   c0000840 <strcat>
c0013c5d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c64:	e8 ad 3e ff ff       	call   c0007b16 <malloc>
c0013c69:	83 c4 0c             	add    esp,0xc
c0013c6c:	89 c3                	mov    ebx,eax
c0013c6e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c74:	56                   	push   esi
c0013c75:	50                   	push   eax
c0013c76:	e8 31 7f ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0013c7b:	83 c4 10             	add    esp,0x10
c0013c7e:	85 db                	test   ebx,ebx
c0013c80:	74 7e                	je     c0013d00 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c82:	51                   	push   ecx
c0013c83:	51                   	push   ecx
c0013c84:	6a 01                	push   0x1
c0013c86:	53                   	push   ebx
c0013c87:	e8 3e 7f ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0013c8c:	83 c4 10             	add    esp,0x10
c0013c8f:	85 c0                	test   eax,eax
c0013c91:	74 08                	je     c0013c9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c93:	83 ec 0c             	sub    esp,0xc
c0013c96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c98:	53                   	push   ebx
c0013c99:	eb 5f                	jmp    c0013cfa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c9b:	52                   	push   edx
c0013c9c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013ca0:	50                   	push   eax
c0013ca1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013ca5:	50                   	push   eax
c0013ca6:	53                   	push   ebx
c0013ca7:	e8 20 82 ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c0013cac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013cb0:	83 c4 10             	add    esp,0x10
c0013cb3:	89 c1                	mov    ecx,eax
c0013cb5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013cb9:	74 31                	je     c0013cec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013cbb:	83 ec 0c             	sub    esp,0xc
c0013cbe:	50                   	push   eax
c0013cbf:	e8 52 3e ff ff       	call   c0007b16 <malloc>
c0013cc4:	89 c6                	mov    esi,eax
c0013cc6:	58                   	pop    eax
c0013cc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013ccd:	52                   	push   edx
c0013cce:	56                   	push   esi
c0013ccf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013cd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013cd7:	53                   	push   ebx
c0013cd8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cdb:	83 c4 20             	add    esp,0x20
c0013cde:	85 c0                	test   eax,eax
c0013ce0:	75 0a                	jne    c0013cec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013ce2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ce6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013cea:	74 18                	je     c0013d04 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013cec:	83 ec 0c             	sub    esp,0xc
c0013cef:	53                   	push   ebx
c0013cf0:	e8 33 7f ff ff       	call   c000bc28 <File::close()>
c0013cf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cfd:	83 c4 10             	add    esp,0x10
c0013d00:	31 c0                	xor    eax,eax
c0013d02:	eb 3b                	jmp    c0013d3f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	53                   	push   ebx
c0013d08:	e8 1b 7f ff ff       	call   c000bc28 <File::close()>
c0013d0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d15:	83 c4 0c             	add    esp,0xc
c0013d18:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013d1f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013d26:	56                   	push   esi
c0013d27:	e8 57 fd ff ff       	call   c0013a83 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d2f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013d33:	e8 ee 3d ff ff       	call   c0007b26 <free>
c0013d38:	83 c4 10             	add    esp,0x10
c0013d3b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013d3f:	81 c4 20 01 00 00    	add    esp,0x120
c0013d45:	5b                   	pop    ebx
c0013d46:	5e                   	pop    esi
c0013d47:	5f                   	pop    edi
c0013d48:	c3                   	ret    

c0013d49 <Reg::getLine(char*, char*, char*)>:
c0013d49:	57                   	push   edi
c0013d4a:	56                   	push   esi
c0013d4b:	53                   	push   ebx
c0013d4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d50:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d54:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d58:	57                   	push   edi
c0013d59:	56                   	push   esi
c0013d5a:	53                   	push   ebx
c0013d5b:	68 a8 27 02 c0       	push   0xc00227a8
c0013d60:	e8 8f fe ff ff       	call   c0013bf4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d65:	83 c4 10             	add    esp,0x10
c0013d68:	84 c0                	test   al,al
c0013d6a:	75 10                	jne    c0013d7c <Reg::getLine(char*, char*, char*)+0x33>
c0013d6c:	57                   	push   edi
c0013d6d:	56                   	push   esi
c0013d6e:	53                   	push   ebx
c0013d6f:	68 cd 27 02 c0       	push   0xc00227cd
c0013d74:	e8 7b fe ff ff       	call   c0013bf4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	5b                   	pop    ebx
c0013d7d:	5e                   	pop    esi
c0013d7e:	5f                   	pop    edi
c0013d7f:	c3                   	ret    

c0013d80 <Reg::readInt(char*, char*, int*)>:
c0013d80:	55                   	push   ebp
c0013d81:	57                   	push   edi
c0013d82:	56                   	push   esi
c0013d83:	53                   	push   ebx
c0013d84:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d8a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d8e:	55                   	push   ebp
c0013d8f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d96:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d9d:	e8 a7 ff ff ff       	call   c0013d49 <Reg::getLine(char*, char*, char*)>
c0013da2:	83 c4 10             	add    esp,0x10
c0013da5:	84 c0                	test   al,al
c0013da7:	0f 84 b6 00 00 00    	je     c0013e63 <Reg::readInt(char*, char*, int*)+0xe3>
c0013dad:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013db2:	83 fa 2b             	cmp    edx,0x2b
c0013db5:	74 0c                	je     c0013dc3 <Reg::readInt(char*, char*, int*)+0x43>
c0013db7:	83 fa 2d             	cmp    edx,0x2d
c0013dba:	75 0e                	jne    c0013dca <Reg::readInt(char*, char*, int*)+0x4a>
c0013dbc:	ba 01 00 00 00       	mov    edx,0x1
c0013dc1:	eb 0b                	jmp    c0013dce <Reg::readInt(char*, char*, int*)+0x4e>
c0013dc3:	ba 01 00 00 00       	mov    edx,0x1
c0013dc8:	eb 02                	jmp    c0013dcc <Reg::readInt(char*, char*, int*)+0x4c>
c0013dca:	31 d2                	xor    edx,edx
c0013dcc:	31 c0                	xor    eax,eax
c0013dce:	be 0a 00 00 00       	mov    esi,0xa
c0013dd3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013dd8:	75 21                	jne    c0013dfb <Reg::readInt(char*, char*, int*)+0x7b>
c0013dda:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013ddf:	83 f9 78             	cmp    ecx,0x78
c0013de2:	75 0a                	jne    c0013dee <Reg::readInt(char*, char*, int*)+0x6e>
c0013de4:	83 c2 02             	add    edx,0x2
c0013de7:	be 10 00 00 00       	mov    esi,0x10
c0013dec:	eb 0d                	jmp    c0013dfb <Reg::readInt(char*, char*, int*)+0x7b>
c0013dee:	83 f9 62             	cmp    ecx,0x62
c0013df1:	75 08                	jne    c0013dfb <Reg::readInt(char*, char*, int*)+0x7b>
c0013df3:	83 c2 02             	add    edx,0x2
c0013df6:	be 02 00 00 00       	mov    esi,0x2
c0013dfb:	01 d5                	add    ebp,edx
c0013dfd:	31 d2                	xor    edx,edx
c0013dff:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013e03:	83 f9 0d             	cmp    ecx,0xd
c0013e06:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e0a:	0f 94 c3             	sete   bl
c0013e0d:	85 c9                	test   ecx,ecx
c0013e0f:	89 df                	mov    edi,ebx
c0013e11:	0f 94 c3             	sete   bl
c0013e14:	09 df                	or     edi,ebx
c0013e16:	89 fb                	mov    ebx,edi
c0013e18:	83 e7 01             	and    edi,0x1
c0013e1b:	75 35                	jne    c0013e52 <Reg::readInt(char*, char*, int*)+0xd2>
c0013e1d:	0f af d6             	imul   edx,esi
c0013e20:	83 fe 10             	cmp    esi,0x10
c0013e23:	75 26                	jne    c0013e4b <Reg::readInt(char*, char*, int*)+0xcb>
c0013e25:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e29:	83 ef 41             	sub    edi,0x41
c0013e2c:	89 fb                	mov    ebx,edi
c0013e2e:	80 fb 05             	cmp    bl,0x5
c0013e31:	77 06                	ja     c0013e39 <Reg::readInt(char*, char*, int*)+0xb9>
c0013e33:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013e37:	eb 16                	jmp    c0013e4f <Reg::readInt(char*, char*, int*)+0xcf>
c0013e39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e3d:	83 eb 61             	sub    ebx,0x61
c0013e40:	80 fb 05             	cmp    bl,0x5
c0013e43:	77 06                	ja     c0013e4b <Reg::readInt(char*, char*, int*)+0xcb>
c0013e45:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013e49:	eb 04                	jmp    c0013e4f <Reg::readInt(char*, char*, int*)+0xcf>
c0013e4b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013e4f:	45                   	inc    ebp
c0013e50:	eb ad                	jmp    c0013dff <Reg::readInt(char*, char*, int*)+0x7f>
c0013e52:	84 c0                	test   al,al
c0013e54:	74 02                	je     c0013e58 <Reg::readInt(char*, char*, int*)+0xd8>
c0013e56:	f7 da                	neg    edx
c0013e58:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013e5f:	89 10                	mov    DWORD PTR [eax],edx
c0013e61:	88 d8                	mov    al,bl
c0013e63:	81 c4 ec 00 00 00    	add    esp,0xec
c0013e69:	5b                   	pop    ebx
c0013e6a:	5e                   	pop    esi
c0013e6b:	5f                   	pop    edi
c0013e6c:	5d                   	pop    ebp
c0013e6d:	c3                   	ret    

c0013e6e <Reg::readString(char*, char*, char*, int)>:
c0013e6e:	57                   	push   edi
c0013e6f:	56                   	push   esi
c0013e70:	53                   	push   ebx
c0013e71:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e77:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e7e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e82:	57                   	push   edi
c0013e83:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e8a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e91:	e8 b3 fe ff ff       	call   c0013d49 <Reg::getLine(char*, char*, char*)>
c0013e96:	83 c4 10             	add    esp,0x10
c0013e99:	89 c6                	mov    esi,eax
c0013e9b:	84 c0                	test   al,al
c0013e9d:	74 44                	je     c0013ee3 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e9f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013ea6:	31 c0                	xor    eax,eax
c0013ea8:	4a                   	dec    edx
c0013ea9:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013eac:	84 c9                	test   cl,cl
c0013eae:	74 0f                	je     c0013ebf <Reg::readString(char*, char*, char*, int)+0x51>
c0013eb0:	39 c2                	cmp    edx,eax
c0013eb2:	7e 0b                	jle    c0013ebf <Reg::readString(char*, char*, char*, int)+0x51>
c0013eb4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013eb7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013ebc:	40                   	inc    eax
c0013ebd:	eb ea                	jmp    c0013ea9 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013ebf:	83 ec 0c             	sub    esp,0xc
c0013ec2:	53                   	push   ebx
c0013ec3:	e8 a8 c6 fe ff       	call   c0000570 <strlen>
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013ed0:	75 11                	jne    c0013ee3 <Reg::readString(char*, char*, char*, int)+0x75>
c0013ed2:	83 ec 0c             	sub    esp,0xc
c0013ed5:	53                   	push   ebx
c0013ed6:	e8 95 c6 fe ff       	call   c0000570 <strlen>
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013ee3:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013ee9:	89 f0                	mov    eax,esi
c0013eeb:	5b                   	pop    ebx
c0013eec:	5e                   	pop    esi
c0013eed:	5f                   	pop    edi
c0013eee:	c3                   	ret    

c0013eef <Reg::readBool(char*, char*, bool*)>:
c0013eef:	83 ec 20             	sub    esp,0x20
c0013ef2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ef6:	50                   	push   eax
c0013ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eff:	e8 7c fe ff ff       	call   c0013d80 <Reg::readInt(char*, char*, int*)>
c0013f04:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013f09:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013f0d:	0f 95 02             	setne  BYTE PTR [edx]
c0013f10:	83 c4 2c             	add    esp,0x2c
c0013f13:	c3                   	ret    

c0013f14 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013f14:	53                   	push   ebx
c0013f15:	83 ec 1c             	sub    esp,0x1c
c0013f18:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013f1c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013f20:	50                   	push   eax
c0013f21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f29:	e8 c1 ff ff ff       	call   c0013eef <Reg::readBool(char*, char*, bool*)>
c0013f2e:	83 c4 10             	add    esp,0x10
c0013f31:	84 c0                	test   al,al
c0013f33:	74 04                	je     c0013f39 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013f35:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013f39:	88 d8                	mov    al,bl
c0013f3b:	83 c4 18             	add    esp,0x18
c0013f3e:	5b                   	pop    ebx
c0013f3f:	c3                   	ret    

c0013f40 <Reg::readIntWithDefault(char*, char*, int)>:
c0013f40:	53                   	push   ebx
c0013f41:	83 ec 1c             	sub    esp,0x1c
c0013f44:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f48:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f4c:	50                   	push   eax
c0013f4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f55:	e8 26 fe ff ff       	call   c0013d80 <Reg::readInt(char*, char*, int*)>
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	84 c0                	test   al,al
c0013f5f:	74 04                	je     c0013f65 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013f61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f65:	89 d8                	mov    eax,ebx
c0013f67:	83 c4 18             	add    esp,0x18
c0013f6a:	5b                   	pop    ebx
c0013f6b:	c3                   	ret    

c0013f6c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013f6c:	57                   	push   edi
c0013f6d:	56                   	push   esi
c0013f6e:	56                   	push   esi
c0013f6f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f77:	56                   	push   esi
c0013f78:	57                   	push   edi
c0013f79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f81:	e8 e8 fe ff ff       	call   c0013e6e <Reg::readString(char*, char*, char*, int)>
c0013f86:	83 c4 10             	add    esp,0x10
c0013f89:	84 c0                	test   al,al
c0013f8b:	75 1a                	jne    c0013fa7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f8d:	51                   	push   ecx
c0013f8e:	56                   	push   esi
c0013f8f:	6a 00                	push   0x0
c0013f91:	57                   	push   edi
c0013f92:	e8 59 c5 fe ff       	call   c00004f0 <memset>
c0013f97:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f9a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fa0:	83 c4 10             	add    esp,0x10
c0013fa3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013fa7:	89 f8                	mov    eax,edi
c0013fa9:	5a                   	pop    edx
c0013faa:	5e                   	pop    esi
c0013fab:	5f                   	pop    edi
c0013fac:	c3                   	ret    

c0013fad <SysEject(regs*)>:
c0013fad:	83 ec 0c             	sub    esp,0xc
c0013fb0:	83 ca ff             	or     edx,0xffffffff
c0013fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013fba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013fbf:	83 e9 41             	sub    ecx,0x41
c0013fc2:	83 f9 19             	cmp    ecx,0x19
c0013fc5:	77 18                	ja     c0013fdf <SysEject(regs*)+0x32>
c0013fc7:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013fce:	85 c9                	test   ecx,ecx
c0013fd0:	74 0d                	je     c0013fdf <SysEject(regs*)+0x32>
c0013fd2:	83 ec 0c             	sub    esp,0xc
c0013fd5:	51                   	push   ecx
c0013fd6:	e8 c3 9d ff ff       	call   c000dd9e <LogicalDisk::eject()>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	99                   	cdq    
c0013fdf:	83 c4 0c             	add    esp,0xc
c0013fe2:	c3                   	ret    

c0013fe3 <SysExit(regs*)>:
c0013fe3:	83 ec 18             	sub    esp,0x18
c0013fe6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fed:	e8 8a 2b 00 00       	call   c0016b7c <terminateTask(int)>
c0013ff2:	83 c8 ff             	or     eax,0xffffffff
c0013ff5:	83 c4 1c             	add    esp,0x1c
c0013ff8:	89 c2                	mov    edx,eax
c0013ffa:	c3                   	ret    

c0013ffb <SysGetCwd(regs*)>:
c0013ffb:	83 ec 10             	sub    esp,0x10
c0013ffe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014002:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014005:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014008:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001400d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014010:	e8 4b 78 ff ff       	call   c000b860 <Fs::getcwd(Process*, char*, int)>
c0014015:	83 c4 1c             	add    esp,0x1c
c0014018:	99                   	cdq    
c0014019:	c3                   	ret    

c001401a <SysGetPID(regs*)>:
c001401a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001401f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014022:	8b 00                	mov    eax,DWORD PTR [eax]
c0014024:	99                   	cdq    
c0014025:	c3                   	ret    

c0014026 <SysGetRAMData(regs*)>:
c0014026:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c001402c:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0014036:	99                   	cdq    
c0014037:	f7 f9                	idiv   ecx
c0014039:	c1 e0 18             	shl    eax,0x18
c001403c:	09 c8                	or     eax,ecx
c001403e:	99                   	cdq    
c001403f:	c3                   	ret    

c0014040 <SysGetVGAPtr(regs*)>:
c0014040:	55                   	push   ebp
c0014041:	57                   	push   edi
c0014042:	56                   	push   esi
c0014043:	53                   	push   ebx
c0014044:	83 ec 18             	sub    esp,0x18
c0014047:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001404b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001404e:	e8 f5 25 00 00       	call   c0016648 <Thr::processFromPID(int)>
c0014053:	83 c4 10             	add    esp,0x10
c0014056:	89 c1                	mov    ecx,eax
c0014058:	b8 01 00 00 00       	mov    eax,0x1
c001405d:	85 c9                	test   ecx,ecx
c001405f:	74 57                	je     c00140b8 <SysGetVGAPtr(regs*)+0x78>
c0014061:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0014067:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001406b:	74 0c                	je     c0014079 <SysGetVGAPtr(regs*)+0x39>
c001406d:	83 ec 0c             	sub    esp,0xc
c0014070:	55                   	push   ebp
c0014071:	e8 43 47 ff ff       	call   c00087b9 <setActiveTerminal(VgaText*)>
c0014076:	83 c4 10             	add    esp,0x10
c0014079:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001407c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001407f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014084:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014086:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014089:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001408c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014092:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014095:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014098:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001409e:	50                   	push   eax
c001409f:	50                   	push   eax
c00140a0:	68 e8 27 02 c0       	push   0xc00227e8
c00140a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140a8:	05 a8 0f 00 00       	add    eax,0xfa8
c00140ad:	50                   	push   eax
c00140ae:	e8 8d c5 fe ff       	call   c0000640 <strcpy>
c00140b3:	83 c4 10             	add    esp,0x10
c00140b6:	31 c0                	xor    eax,eax
c00140b8:	83 c4 0c             	add    esp,0xc
c00140bb:	31 d2                	xor    edx,edx
c00140bd:	5b                   	pop    ebx
c00140be:	5e                   	pop    esi
c00140bf:	5f                   	pop    edi
c00140c0:	5d                   	pop    ebp
c00140c1:	c3                   	ret    
c00140c2:	66 90                	xchg   ax,ax

c00140c4 <SysKill(regs*)>:
c00140c4:	53                   	push   ebx
c00140c5:	83 ec 08             	sub    esp,0x8
c00140c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140cc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00140d0:	75 16                	jne    c00140e8 <SysKill(regs*)+0x24>
c00140d2:	83 ec 0c             	sub    esp,0xc
c00140d5:	68 f2 27 02 c0       	push   0xc00227f2
c00140da:	e8 18 d6 ff ff       	call   c00116f7 <KePanic(char const*)>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	e9 89 00 00 00       	jmp    c0014170 <SysKill(regs*)+0xac>
c00140e7:	90                   	nop
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140f0:	e8 47 bd 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140f5:	8d 76 00             	lea    esi,[esi+0x0]
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	85 c0                	test   eax,eax
c00140fd:	74 19                	je     c0014118 <SysKill(regs*)+0x54>
c00140ff:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014102:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014105:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014107:	74 33                	je     c001413c <SysKill(regs*)+0x78>
c0014109:	52                   	push   edx
c001410a:	52                   	push   edx
c001410b:	50                   	push   eax
c001410c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014111:	e8 46 c0 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014116:	eb e0                	jmp    c00140f8 <SysKill(regs*)+0x34>
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014120:	e8 17 bd 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014125:	8d 76 00             	lea    esi,[esi+0x0]
c0014128:	83 c4 10             	add    esp,0x10
c001412b:	85 c0                	test   eax,eax
c001412d:	74 41                	je     c0014170 <SysKill(regs*)+0xac>
c001412f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014132:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014135:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014137:	75 27                	jne    c0014160 <SysKill(regs*)+0x9c>
c0014139:	8d 76 00             	lea    esi,[esi+0x0]
c001413c:	51                   	push   ecx
c001413d:	51                   	push   ecx
c001413e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014141:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014146:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014149:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001414f:	e8 46 da ff ff       	call   c0011b9a <KeRaiseSignal(SigHandlerBlock*, int)>
c0014154:	83 c4 10             	add    esp,0x10
c0014157:	31 c0                	xor    eax,eax
c0014159:	31 d2                	xor    edx,edx
c001415b:	eb 1b                	jmp    c0014178 <SysKill(regs*)+0xb4>
c001415d:	8d 76 00             	lea    esi,[esi+0x0]
c0014160:	52                   	push   edx
c0014161:	52                   	push   edx
c0014162:	50                   	push   eax
c0014163:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014168:	e8 ef bf 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001416d:	eb b9                	jmp    c0014128 <SysKill(regs*)+0x64>
c001416f:	90                   	nop
c0014170:	83 c8 ff             	or     eax,0xffffffff
c0014173:	89 c2                	mov    edx,eax
c0014175:	8d 76 00             	lea    esi,[esi+0x0]
c0014178:	83 c4 08             	add    esp,0x8
c001417b:	5b                   	pop    ebx
c001417c:	c3                   	ret    

c001417d <SysLoadDLL(regs*)>:
c001417d:	56                   	push   esi
c001417e:	53                   	push   ebx
c001417f:	31 d2                	xor    edx,edx
c0014181:	51                   	push   ecx
c0014182:	b8 01 00 00 00       	mov    eax,0x1
c0014187:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001418b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001418f:	0f 84 8c 00 00 00    	je     c0014221 <SysLoadDLL(regs*)+0xa4>
c0014195:	83 ec 0c             	sub    esp,0xc
c0014198:	68 14 01 00 00       	push   0x114
c001419d:	e8 74 39 ff ff       	call   c0007b16 <malloc>
c00141a2:	83 c4 0c             	add    esp,0xc
c00141a5:	89 c3                	mov    ebx,eax
c00141a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ac:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00141af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141b2:	53                   	push   ebx
c00141b3:	e8 f4 79 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	31 d2                	xor    edx,edx
c00141bd:	b8 02 00 00 00       	mov    eax,0x2
c00141c2:	85 db                	test   ebx,ebx
c00141c4:	74 5b                	je     c0014221 <SysLoadDLL(regs*)+0xa4>
c00141c6:	83 ec 0c             	sub    esp,0xc
c00141c9:	53                   	push   ebx
c00141ca:	e8 bf 7c ff ff       	call   c000be8e <File::exists()>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	84 c0                	test   al,al
c00141d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141d6:	75 11                	jne    c00141e9 <SysLoadDLL(regs*)+0x6c>
c00141d8:	83 ec 0c             	sub    esp,0xc
c00141db:	53                   	push   ebx
c00141dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141df:	83 c4 10             	add    esp,0x10
c00141e2:	b8 03 00 00 00       	mov    eax,0x3
c00141e7:	eb 36                	jmp    c001421f <SysLoadDLL(regs*)+0xa2>
c00141e9:	83 ec 0c             	sub    esp,0xc
c00141ec:	53                   	push   ebx
c00141ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141f0:	58                   	pop    eax
c00141f1:	5a                   	pop    edx
c00141f2:	6a 00                	push   0x0
c00141f4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141f7:	e8 81 15 00 00       	call   c001577d <Thr::loadDLL(char const*, bool)>
c00141fc:	83 c4 10             	add    esp,0x10
c00141ff:	89 c1                	mov    ecx,eax
c0014201:	31 d2                	xor    edx,edx
c0014203:	b8 04 00 00 00       	mov    eax,0x4
c0014208:	85 c9                	test   ecx,ecx
c001420a:	74 15                	je     c0014221 <SysLoadDLL(regs*)+0xa4>
c001420c:	53                   	push   ebx
c001420d:	53                   	push   ebx
c001420e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014214:	51                   	push   ecx
c0014215:	e8 94 17 00 00       	call   c00159ae <Thr::executeDLL(unsigned long, void*)>
c001421a:	83 c4 10             	add    esp,0x10
c001421d:	31 c0                	xor    eax,eax
c001421f:	31 d2                	xor    edx,edx
c0014221:	59                   	pop    ecx
c0014222:	5b                   	pop    ebx
c0014223:	5e                   	pop    esi
c0014224:	c3                   	ret    

c0014225 <SysRead(regs*)>:
c0014225:	57                   	push   edi
c0014226:	56                   	push   esi
c0014227:	53                   	push   ebx
c0014228:	83 ec 10             	sub    esp,0x10
c001422b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001422f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014232:	83 f8 02             	cmp    eax,0x2
c0014235:	77 10                	ja     c0014247 <SysRead(regs*)+0x22>
c0014237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001423c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001423f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014245:	eb 0e                	jmp    c0014255 <SysRead(regs*)+0x30>
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	50                   	push   eax
c001424b:	e8 c3 52 ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c0014250:	83 c4 10             	add    esp,0x10
c0014253:	89 c1                	mov    ecx,eax
c0014255:	83 c8 ff             	or     eax,0xffffffff
c0014258:	85 c9                	test   ecx,ecx
c001425a:	89 c2                	mov    edx,eax
c001425c:	74 28                	je     c0014286 <SysRead(regs*)+0x61>
c001425e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014266:	31 ff                	xor    edi,edi
c0014268:	83 ec 0c             	sub    esp,0xc
c001426b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001426d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014271:	52                   	push   edx
c0014272:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014275:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014278:	57                   	push   edi
c0014279:	56                   	push   esi
c001427a:	51                   	push   ecx
c001427b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001427e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014282:	83 c4 20             	add    esp,0x20
c0014285:	99                   	cdq    
c0014286:	83 c4 10             	add    esp,0x10
c0014289:	5b                   	pop    ebx
c001428a:	5e                   	pop    esi
c001428b:	5f                   	pop    edi
c001428c:	c3                   	ret    

c001428d <SysRegisterSignal(regs*)>:
c001428d:	83 ec 18             	sub    esp,0x18
c0014290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014294:	6a 00                	push   0x0
c0014296:	6a 00                	push   0x0
c0014298:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001429b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001429e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142a6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00142ac:	e8 b3 d8 ff ff       	call   c0011b64 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00142b1:	83 c4 2c             	add    esp,0x2c
c00142b4:	99                   	cdq    
c00142b5:	c3                   	ret    

c00142b6 <SysRegistryGetTypeFromPath(regs*)>:
c00142b6:	57                   	push   edi
c00142b7:	56                   	push   esi
c00142b8:	53                   	push   ebx
c00142b9:	81 ec 38 01 00 00    	sub    esp,0x138
c00142bf:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00142c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142c9:	68 13 28 02 c0       	push   0xc0022813
c00142ce:	e8 d2 66 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00142d3:	5a                   	pop    edx
c00142d4:	59                   	pop    ecx
c00142d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142d8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142db:	e8 4d f6 ff ff       	call   c001392d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142e0:	5f                   	pop    edi
c00142e1:	89 c6                	mov    esi,eax
c00142e3:	5a                   	pop    edx
c00142e4:	50                   	push   eax
c00142e5:	68 33 28 02 c0       	push   0xc0022833
c00142ea:	e8 b6 66 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00142ef:	83 c4 10             	add    esp,0x10
c00142f2:	85 f6                	test   esi,esi
c00142f4:	74 28                	je     c001431e <SysRegistryGetTypeFromPath(regs*)+0x68>
c00142f6:	50                   	push   eax
c00142f7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142fb:	57                   	push   edi
c00142fc:	56                   	push   esi
c00142fd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014300:	e8 0c f2 ff ff       	call   c0013511 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014305:	83 c4 0c             	add    esp,0xc
c0014308:	89 c3                	mov    ebx,eax
c001430a:	57                   	push   edi
c001430b:	50                   	push   eax
c001430c:	68 3b 28 02 c0       	push   0xc002283b
c0014311:	e8 8f 66 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0014316:	89 d8                	mov    eax,ebx
c0014318:	83 c4 10             	add    esp,0x10
c001431b:	99                   	cdq    
c001431c:	eb 05                	jmp    c0014323 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001431e:	83 c8 ff             	or     eax,0xffffffff
c0014321:	89 c2                	mov    edx,eax
c0014323:	81 c4 30 01 00 00    	add    esp,0x130
c0014329:	5b                   	pop    ebx
c001432a:	5e                   	pop    esi
c001432b:	5f                   	pop    edi
c001432c:	c3                   	ret    

c001432d <SysRegistryReadExtent(regs*)>:
c001432d:	83 ec 1c             	sub    esp,0x1c
c0014330:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014334:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014337:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001433a:	85 c0                	test   eax,eax
c001433c:	79 1f                	jns    c001435d <SysRegistryReadExtent(regs*)+0x30>
c001433e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014343:	52                   	push   edx
c0014344:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014348:	52                   	push   edx
c0014349:	50                   	push   eax
c001434a:	51                   	push   ecx
c001434b:	e8 b3 f0 ff ff       	call   c0013403 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014350:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014354:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014358:	83 c4 10             	add    esp,0x10
c001435b:	eb 14                	jmp    c0014371 <SysRegistryReadExtent(regs*)+0x44>
c001435d:	83 ec 04             	sub    esp,0x4
c0014360:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014363:	50                   	push   eax
c0014364:	51                   	push   ecx
c0014365:	e8 33 eb ff ff       	call   c0012e9d <CmGetString(Reghive_Tag*, int, char*)>
c001436a:	83 c4 10             	add    esp,0x10
c001436d:	31 c0                	xor    eax,eax
c001436f:	31 d2                	xor    edx,edx
c0014371:	83 c4 1c             	add    esp,0x1c
c0014374:	c3                   	ret    

c0014375 <SysRegistryPathToExtentLookup(regs*)>:
c0014375:	53                   	push   ebx
c0014376:	83 ec 10             	sub    esp,0x10
c0014379:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001437d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014380:	68 51 28 02 c0       	push   0xc0022851
c0014385:	e8 1b 66 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001438a:	58                   	pop    eax
c001438b:	5a                   	pop    edx
c001438c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001438f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014392:	e8 96 f5 ff ff       	call   c001392d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014397:	83 c4 18             	add    esp,0x18
c001439a:	99                   	cdq    
c001439b:	5b                   	pop    ebx
c001439c:	c3                   	ret    

c001439d <SysRegistryEnterDirectory(regs*)>:
c001439d:	53                   	push   ebx
c001439e:	83 ec 10             	sub    esp,0x10
c00143a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143a8:	68 74 28 02 c0       	push   0xc0022874
c00143ad:	e8 f3 65 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00143b2:	58                   	pop    eax
c00143b3:	5a                   	pop    edx
c00143b4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143b7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143ba:	e8 55 eb ff ff       	call   c0012f14 <CmEnterDirectory(Reghive_Tag*, int)>
c00143bf:	83 c4 18             	add    esp,0x18
c00143c2:	99                   	cdq    
c00143c3:	5b                   	pop    ebx
c00143c4:	c3                   	ret    

c00143c5 <SysRegistryGetNext(regs*)>:
c00143c5:	53                   	push   ebx
c00143c6:	83 ec 10             	sub    esp,0x10
c00143c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143cd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143d0:	68 92 28 02 c0       	push   0xc0022892
c00143d5:	e8 cb 65 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00143da:	58                   	pop    eax
c00143db:	5a                   	pop    edx
c00143dc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143df:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143e2:	e8 6c eb ff ff       	call   c0012f53 <CmGetNext(Reghive_Tag*, int)>
c00143e7:	83 c4 18             	add    esp,0x18
c00143ea:	99                   	cdq    
c00143eb:	5b                   	pop    ebx
c00143ec:	c3                   	ret    

c00143ed <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00143ed:	57                   	push   edi
c00143ee:	56                   	push   esi
c00143ef:	53                   	push   ebx
c00143f0:	81 ec 34 01 00 00    	sub    esp,0x134
c00143f6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00143fd:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014401:	57                   	push   edi
c0014402:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014405:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014408:	e8 04 f1 ff ff       	call   c0013511 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001440d:	89 c3                	mov    ebx,eax
c001440f:	58                   	pop    eax
c0014410:	5a                   	pop    edx
c0014411:	57                   	push   edi
c0014412:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014415:	e8 26 c2 fe ff       	call   c0000640 <strcpy>
c001441a:	89 d8                	mov    eax,ebx
c001441c:	81 c4 40 01 00 00    	add    esp,0x140
c0014422:	99                   	cdq    
c0014423:	5b                   	pop    ebx
c0014424:	5e                   	pop    esi
c0014425:	5f                   	pop    edi
c0014426:	c3                   	ret    

c0014427 <SysRegistryOpen(regs*)>:
c0014427:	83 ec 18             	sub    esp,0x18
c001442a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001442e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014431:	e8 f7 e8 ff ff       	call   c0012d2d <CmOpen(char const*)>
c0014436:	83 c4 1c             	add    esp,0x1c
c0014439:	99                   	cdq    
c001443a:	c3                   	ret    

c001443b <SysRegistryClose(regs*)>:
c001443b:	83 ec 18             	sub    esp,0x18
c001443e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014442:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014445:	e8 01 ea ff ff       	call   c0012e4b <CmClose(Reghive_Tag*)>
c001444a:	31 c0                	xor    eax,eax
c001444c:	31 d2                	xor    edx,edx
c001444e:	83 c4 1c             	add    esp,0x1c
c0014451:	c3                   	ret    

c0014452 <SysSbrk(regs*)>:
c0014452:	56                   	push   esi
c0014453:	53                   	push   ebx
c0014454:	50                   	push   eax
c0014455:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001445a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001445e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014461:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014464:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001446a:	85 db                	test   ebx,ebx
c001446c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001446f:	74 02                	je     c0014473 <SysSbrk(regs*)+0x21>
c0014471:	79 06                	jns    c0014479 <SysSbrk(regs*)+0x27>
c0014473:	89 f0                	mov    eax,esi
c0014475:	31 d2                	xor    edx,edx
c0014477:	eb 2a                	jmp    c00144a3 <SysSbrk(regs*)+0x51>
c0014479:	83 c8 ff             	or     eax,0xffffffff
c001447c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014482:	89 c2                	mov    edx,eax
c0014484:	77 1d                	ja     c00144a3 <SysSbrk(regs*)+0x51>
c0014486:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001448c:	50                   	push   eax
c001448d:	c1 ea 0c             	shr    edx,0xc
c0014490:	68 07 0c 00 00       	push   0xc07
c0014495:	52                   	push   edx
c0014496:	51                   	push   ecx
c0014497:	e8 e8 59 ff ff       	call   c0009e84 <VAS::allocatePages(int, int)>
c001449c:	89 f0                	mov    eax,esi
c001449e:	31 d2                	xor    edx,edx
c00144a0:	83 c4 10             	add    esp,0x10
c00144a3:	59                   	pop    ecx
c00144a4:	5b                   	pop    ebx
c00144a5:	5e                   	pop    esi
c00144a6:	c3                   	ret    

c00144a7 <SysSetCwd(regs*)>:
c00144a7:	83 ec 14             	sub    esp,0x14
c00144aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00144b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144b9:	e8 6f 7a ff ff       	call   c000bf2d <Fs::setcwd(Process*, char*)>
c00144be:	83 c4 1c             	add    esp,0x1c
c00144c1:	99                   	cdq    
c00144c2:	c3                   	ret    

c00144c3 <SysSetTime(regs*)>:
c00144c3:	55                   	push   ebp
c00144c4:	31 c9                	xor    ecx,ecx
c00144c6:	57                   	push   edi
c00144c7:	bd 0c 00 00 00       	mov    ebp,0xc
c00144cc:	56                   	push   esi
c00144cd:	53                   	push   ebx
c00144ce:	31 db                	xor    ebx,ebx
c00144d0:	83 ec 10             	sub    esp,0x10
c00144d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144d7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00144da:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00144dd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00144e0:	89 c2                	mov    edx,eax
c00144e2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00144e8:	83 e2 1f             	and    edx,0x1f
c00144eb:	c1 e7 10             	shl    edi,0x10
c00144ee:	42                   	inc    edx
c00144ef:	c1 e8 05             	shr    eax,0x5
c00144f2:	88 d1                	mov    cl,dl
c00144f4:	31 d2                	xor    edx,edx
c00144f6:	f7 f5                	div    ebp
c00144f8:	89 dd                	mov    ebp,ebx
c00144fa:	88 d5                	mov    ch,dl
c00144fc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014502:	0f b7 c1             	movzx  eax,cx
c0014505:	31 d2                	xor    edx,edx
c0014507:	09 f8                	or     eax,edi
c0014509:	bf 3c 00 00 00       	mov    edi,0x3c
c001450e:	89 c1                	mov    ecx,eax
c0014510:	89 f0                	mov    eax,esi
c0014512:	f7 f7                	div    edi
c0014514:	c1 e2 10             	shl    edx,0x10
c0014517:	09 d5                	or     ebp,edx
c0014519:	31 d2                	xor    edx,edx
c001451b:	89 eb                	mov    ebx,ebp
c001451d:	f7 f7                	div    edi
c001451f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014524:	88 d7                	mov    bh,dl
c0014526:	89 f0                	mov    eax,esi
c0014528:	31 d2                	xor    edx,edx
c001452a:	f7 f7                	div    edi
c001452c:	bf 18 00 00 00       	mov    edi,0x18
c0014531:	31 d2                	xor    edx,edx
c0014533:	f7 f7                	div    edi
c0014535:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001453a:	88 d3                	mov    bl,dl
c001453c:	53                   	push   ebx
c001453d:	51                   	push   ecx
c001453e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014544:	e8 f1 81 ff ff       	call   c000c73a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014549:	83 c4 1c             	add    esp,0x1c
c001454c:	83 f0 01             	xor    eax,0x1
c001454f:	5b                   	pop    ebx
c0014550:	0f b6 c0             	movzx  eax,al
c0014553:	5e                   	pop    esi
c0014554:	31 d2                	xor    edx,edx
c0014556:	5f                   	pop    edi
c0014557:	5d                   	pop    ebp
c0014558:	c3                   	ret    

c0014559 <SysSymlink(regs*)>:
c0014559:	56                   	push   esi
c001455a:	83 c8 ff             	or     eax,0xffffffff
c001455d:	53                   	push   ebx
c001455e:	89 c2                	mov    edx,eax
c0014560:	81 ec 34 02 00 00    	sub    esp,0x234
c0014566:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c001456d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014571:	74 50                	je     c00145c3 <SysSymlink(regs*)+0x6a>
c0014573:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014576:	85 c9                	test   ecx,ecx
c0014578:	74 49                	je     c00145c3 <SysSymlink(regs*)+0x6a>
c001457a:	6a 01                	push   0x1
c001457c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014581:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014584:	05 0c 01 00 00       	add    eax,0x10c
c0014589:	50                   	push   eax
c001458a:	51                   	push   ecx
c001458b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001458f:	56                   	push   esi
c0014590:	e8 1f 73 ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014595:	6a 01                	push   0x1
c0014597:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001459c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001459f:	05 0c 01 00 00       	add    eax,0x10c
c00145a4:	50                   	push   eax
c00145a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145a8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00145af:	53                   	push   ebx
c00145b0:	e8 ff 72 ff ff       	call   c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00145b5:	83 c4 18             	add    esp,0x18
c00145b8:	56                   	push   esi
c00145b9:	53                   	push   ebx
c00145ba:	e8 04 6f ff ff       	call   c000b4c3 <KeCreateSymlink(char const*, char const*)>
c00145bf:	83 c4 10             	add    esp,0x10
c00145c2:	99                   	cdq    
c00145c3:	81 c4 34 02 00 00    	add    esp,0x234
c00145c9:	5b                   	pop    ebx
c00145ca:	5e                   	pop    esi
c00145cb:	c3                   	ret    

c00145cc <SysTimezone(regs*)>:
c00145cc:	53                   	push   ebx
c00145cd:	83 ec 08             	sub    esp,0x8
c00145d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145d4:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00145d8:	75 17                	jne    c00145f1 <SysTimezone(regs*)+0x25>
c00145da:	83 ec 0c             	sub    esp,0xc
c00145dd:	68 a9 28 02 c0       	push   0xc00228a9
c00145e2:	e8 be 63 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00145e7:	83 c8 ff             	or     eax,0xffffffff
c00145ea:	83 c4 10             	add    esp,0x10
c00145ed:	89 c2                	mov    edx,eax
c00145ef:	eb 20                	jmp    c0014611 <SysTimezone(regs*)+0x45>
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	68 be 28 02 c0       	push   0xc00228be
c00145f9:	e8 a7 63 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00145fe:	58                   	pop    eax
c00145ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014602:	e8 9d 7e ff ff       	call   c000c4a4 <User::loadClockSettings(int)>
c0014607:	83 c4 10             	add    esp,0x10
c001460a:	b8 01 00 00 00       	mov    eax,0x1
c001460f:	31 d2                	xor    edx,edx
c0014611:	83 c4 08             	add    esp,0x8
c0014614:	5b                   	pop    ebx
c0014615:	c3                   	ret    

c0014616 <SysTruncate(regs*)>:
c0014616:	55                   	push   ebp
c0014617:	57                   	push   edi
c0014618:	31 ff                	xor    edi,edi
c001461a:	56                   	push   esi
c001461b:	53                   	push   ebx
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014623:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014626:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014629:	89 ce                	mov    esi,ecx
c001462b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001462f:	0f 84 9a 00 00 00    	je     c00146cf <SysTruncate(regs*)+0xb9>
c0014635:	83 ec 0c             	sub    esp,0xc
c0014638:	68 14 01 00 00       	push   0x114
c001463d:	e8 d4 34 ff ff       	call   c0007b16 <malloc>
c0014642:	83 c4 0c             	add    esp,0xc
c0014645:	89 c3                	mov    ebx,eax
c0014647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001464c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001464f:	55                   	push   ebp
c0014650:	53                   	push   ebx
c0014651:	e8 56 75 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0014656:	83 c4 10             	add    esp,0x10
c0014659:	31 d2                	xor    edx,edx
c001465b:	b8 03 00 00 00       	mov    eax,0x3
c0014660:	85 db                	test   ebx,ebx
c0014662:	0f 84 a2 00 00 00    	je     c001470a <SysTruncate(regs*)+0xf4>
c0014668:	51                   	push   ecx
c0014669:	51                   	push   ecx
c001466a:	6a 02                	push   0x2
c001466c:	53                   	push   ebx
c001466d:	e8 58 75 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0014672:	83 c4 10             	add    esp,0x10
c0014675:	85 c0                	test   eax,eax
c0014677:	74 13                	je     c001468c <SysTruncate(regs*)+0x76>
c0014679:	83 ec 0c             	sub    esp,0xc
c001467c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001467e:	53                   	push   ebx
c001467f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014682:	83 c4 10             	add    esp,0x10
c0014685:	b8 04 00 00 00       	mov    eax,0x4
c001468a:	eb 7c                	jmp    c0014708 <SysTruncate(regs*)+0xf2>
c001468c:	52                   	push   edx
c001468d:	57                   	push   edi
c001468e:	56                   	push   esi
c001468f:	53                   	push   ebx
c0014690:	e8 49 76 ff ff       	call   c000bcde <File::truncate(unsigned long long)>
c0014695:	83 c4 10             	add    esp,0x10
c0014698:	85 c0                	test   eax,eax
c001469a:	74 1b                	je     c00146b7 <SysTruncate(regs*)+0xa1>
c001469c:	83 ec 0c             	sub    esp,0xc
c001469f:	53                   	push   ebx
c00146a0:	e8 83 75 ff ff       	call   c000bc28 <File::close()>
c00146a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	b8 05 00 00 00       	mov    eax,0x5
c00146b5:	eb 51                	jmp    c0014708 <SysTruncate(regs*)+0xf2>
c00146b7:	83 ec 0c             	sub    esp,0xc
c00146ba:	53                   	push   ebx
c00146bb:	e8 68 75 ff ff       	call   c000bc28 <File::close()>
c00146c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146c8:	83 c4 10             	add    esp,0x10
c00146cb:	31 c0                	xor    eax,eax
c00146cd:	eb 39                	jmp    c0014708 <SysTruncate(regs*)+0xf2>
c00146cf:	31 d2                	xor    edx,edx
c00146d1:	b8 01 00 00 00       	mov    eax,0x1
c00146d6:	83 fd 02             	cmp    ebp,0x2
c00146d9:	7e 2f                	jle    c001470a <SysTruncate(regs*)+0xf4>
c00146db:	83 ec 0c             	sub    esp,0xc
c00146de:	51                   	push   ecx
c00146df:	e8 2f 4e ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	89 c1                	mov    ecx,eax
c00146e9:	31 d2                	xor    edx,edx
c00146eb:	b8 02 00 00 00       	mov    eax,0x2
c00146f0:	85 c9                	test   ecx,ecx
c00146f2:	74 16                	je     c001470a <SysTruncate(regs*)+0xf4>
c00146f4:	50                   	push   eax
c00146f5:	57                   	push   edi
c00146f6:	56                   	push   esi
c00146f7:	51                   	push   ecx
c00146f8:	e8 e1 75 ff ff       	call   c000bcde <File::truncate(unsigned long long)>
c00146fd:	83 c4 10             	add    esp,0x10
c0014700:	85 c0                	test   eax,eax
c0014702:	0f 95 c0             	setne  al
c0014705:	0f b6 c0             	movzx  eax,al
c0014708:	31 d2                	xor    edx,edx
c001470a:	83 c4 0c             	add    esp,0xc
c001470d:	5b                   	pop    ebx
c001470e:	5e                   	pop    esi
c001470f:	5f                   	pop    edi
c0014710:	5d                   	pop    ebp
c0014711:	c3                   	ret    

c0014712 <SysWrite(regs*)>:
c0014712:	57                   	push   edi
c0014713:	56                   	push   esi
c0014714:	53                   	push   ebx
c0014715:	83 ec 10             	sub    esp,0x10
c0014718:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001471c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001471f:	83 f8 02             	cmp    eax,0x2
c0014722:	77 10                	ja     c0014734 <SysWrite(regs*)+0x22>
c0014724:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014729:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001472c:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014732:	eb 0e                	jmp    c0014742 <SysWrite(regs*)+0x30>
c0014734:	83 ec 0c             	sub    esp,0xc
c0014737:	50                   	push   eax
c0014738:	e8 d6 4d ff ff       	call   c0009513 <KeGetFileFromDescriptor(int)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	89 c1                	mov    ecx,eax
c0014742:	83 c8 ff             	or     eax,0xffffffff
c0014745:	85 c9                	test   ecx,ecx
c0014747:	89 c2                	mov    edx,eax
c0014749:	74 28                	je     c0014773 <SysWrite(regs*)+0x61>
c001474b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014753:	31 ff                	xor    edi,edi
c0014755:	83 ec 0c             	sub    esp,0xc
c0014758:	8b 01                	mov    eax,DWORD PTR [ecx]
c001475a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001475e:	52                   	push   edx
c001475f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014762:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014765:	57                   	push   edi
c0014766:	56                   	push   esi
c0014767:	51                   	push   ecx
c0014768:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001476b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001476f:	83 c4 20             	add    esp,0x20
c0014772:	99                   	cdq    
c0014773:	83 c4 10             	add    esp,0x10
c0014776:	5b                   	pop    ebx
c0014777:	5e                   	pop    esi
c0014778:	5f                   	pop    edi
c0014779:	c3                   	ret    

c001477a <SysWsbe(regs*)>:
c001477a:	57                   	push   edi
c001477b:	b9 0b 00 00 00       	mov    ecx,0xb
c0014780:	56                   	push   esi
c0014781:	be fd 28 02 c0       	mov    esi,0xc00228fd
c0014786:	53                   	push   ebx
c0014787:	83 ec 30             	sub    esp,0x30
c001478a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001478e:	fc                   	cld    
c001478f:	83 ec 0c             	sub    esp,0xc
c0014792:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014794:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014798:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001479d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147a0:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00147a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00147a8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00147ab:	57                   	push   edi
c00147ac:	e8 bf bd fe ff       	call   c0000570 <strlen>
c00147b1:	5a                   	pop    edx
c00147b2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00147b6:	52                   	push   edx
c00147b7:	31 d2                	xor    edx,edx
c00147b9:	57                   	push   edi
c00147ba:	52                   	push   edx
c00147bb:	50                   	push   eax
c00147bc:	56                   	push   esi
c00147bd:	ff d3                	call   ebx
c00147bf:	83 c4 14             	add    esp,0x14
c00147c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00147c6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00147c9:	e8 ae 23 00 00       	call   c0016b7c <terminateTask(int)>
c00147ce:	83 c4 40             	add    esp,0x40
c00147d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00147d6:	5b                   	pop    ebx
c00147d7:	31 d2                	xor    edx,edx
c00147d9:	5e                   	pop    esi
c00147da:	5f                   	pop    edi
c00147db:	c3                   	ret    

c00147dc <SysYield(regs*)>:
c00147dc:	83 ec 0c             	sub    esp,0xc
c00147df:	fa                   	cli    
c00147e0:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147e6:	e8 f1 19 00 00       	call   c00161dc <schedule()>
c00147eb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00147f0:	48                   	dec    eax
c00147f1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00147f6:	75 01                	jne    c00147f9 <SysYield(regs*)+0x1d>
c00147f8:	fb                   	sti    
c00147f9:	31 c0                	xor    eax,eax
c00147fb:	31 d2                	xor    edx,edx
c00147fd:	83 c4 0c             	add    esp,0xc
c0014800:	c3                   	ret    

c0014801 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014801:	55                   	push   ebp
c0014802:	57                   	push   edi
c0014803:	56                   	push   esi
c0014804:	53                   	push   ebx
c0014805:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001480b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014813:	0f 95 c0             	setne  al
c0014816:	31 d2                	xor    edx,edx
c0014818:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014820:	0f 94 c2             	sete   dl
c0014823:	85 c2                	test   edx,eax
c0014825:	74 34                	je     c001485b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014827:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014832:	74 27                	je     c001485b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014834:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001483b:	05 00 10 00 00       	add    eax,0x1000
c0014840:	89 c1                	mov    ecx,eax
c0014842:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014847:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001484d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014854:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001485b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014862:	83 ec 0c             	sub    esp,0xc
c0014865:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001486b:	6a 01                	push   0x1
c001486d:	e8 fb 4d ff ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c0014872:	83 c4 10             	add    esp,0x10
c0014875:	89 c3                	mov    ebx,eax
c0014877:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001487d:	0f 86 25 01 00 00    	jbe    c00149a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014883:	c1 ee 0c             	shr    esi,0xc
c0014886:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001488d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014891:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014899:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00148a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148a4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00148ab:	29 ef                	sub    edi,ebp
c00148ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00148b1:	0f 83 f8 00 00 00    	jae    c00149af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00148b7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00148bd:	76 05                	jbe    c00148c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00148bf:	bf 00 10 00 00       	mov    edi,0x1000
c00148c4:	83 ec 0c             	sub    esp,0xc
c00148c7:	31 d2                	xor    edx,edx
c00148c9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00148d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00148d6:	50                   	push   eax
c00148d7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00148db:	56                   	push   esi
c00148dc:	52                   	push   edx
c00148dd:	57                   	push   edi
c00148de:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00148e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148e8:	83 c4 20             	add    esp,0x20
c00148eb:	85 c0                	test   eax,eax
c00148ed:	75 06                	jne    c00148f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00148ef:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00148f3:	74 13                	je     c0014908 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00148f5:	83 ec 0c             	sub    esp,0xc
c00148f8:	53                   	push   ebx
c00148f9:	e8 8d 50 ff ff       	call   c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c00148fe:	83 c4 10             	add    esp,0x10
c0014901:	31 c0                	xor    eax,eax
c0014903:	e9 7c 01 00 00       	jmp    c0014a84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014908:	fa                   	cli    
c0014909:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001490f:	e8 0b 35 ff ff       	call   c0007e1f <Phys::allocatePage()>
c0014914:	6a 07                	push   0x7
c0014916:	89 c7                	mov    edi,eax
c0014918:	53                   	push   ebx
c0014919:	50                   	push   eax
c001491a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001491f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014922:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014928:	e8 53 54 ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c001492d:	83 c4 0c             	add    esp,0xc
c0014930:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014937:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001493d:	6a 00                	push   0x0
c001493f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014944:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014947:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001494d:	e8 94 52 ff ff       	call   c0009be6 <VAS::mapOtherVASIn(bool, VAS*)>
c0014952:	58                   	pop    eax
c0014953:	5a                   	pop    edx
c0014954:	68 07 0c 00 00       	push   0xc07
c0014959:	55                   	push   ebp
c001495a:	57                   	push   edi
c001495b:	89 df                	mov    edi,ebx
c001495d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014964:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001496a:	6a 00                	push   0x0
c001496c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014971:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014974:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001497a:	e8 53 56 ff ff       	call   c0009fd2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001497f:	b9 00 10 00 00       	mov    ecx,0x1000
c0014984:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014986:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001498b:	83 c4 20             	add    esp,0x20
c001498e:	48                   	dec    eax
c001498f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014994:	85 c0                	test   eax,eax
c0014996:	75 01                	jne    c0014999 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014998:	fb                   	sti    
c0014999:	81 c5 00 10 00 00    	add    ebp,0x1000
c001499f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00149a3:	e9 f1 fe ff ff       	jmp    c0014899 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00149a8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00149af:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00149b6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00149bc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00149c2:	0f 86 ae 00 00 00    	jbe    c0014a76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00149c8:	fa                   	cli    
c00149c9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00149cf:	c1 ee 0c             	shr    esi,0xc
c00149d2:	51                   	push   ecx
c00149d3:	31 ff                	xor    edi,edi
c00149d5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00149dc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149e2:	6a 00                	push   0x0
c00149e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149ec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149f2:	e8 ef 51 ff ff       	call   c0009be6 <VAS::mapOtherVASIn(bool, VAS*)>
c00149f7:	83 c4 10             	add    esp,0x10
c00149fa:	e8 20 34 ff ff       	call   c0007e1f <Phys::allocatePage()>
c00149ff:	47                   	inc    edi
c0014a00:	6a 07                	push   0x7
c0014a02:	53                   	push   ebx
c0014a03:	50                   	push   eax
c0014a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a0e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014a11:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014a17:	e8 64 53 ff ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014a1c:	58                   	pop    eax
c0014a1d:	5a                   	pop    edx
c0014a1e:	68 07 0c 00 00       	push   0xc07
c0014a23:	55                   	push   ebp
c0014a24:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014a2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a2e:	50                   	push   eax
c0014a2f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014a36:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a3c:	6a 00                	push   0x0
c0014a3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a46:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a4c:	e8 81 55 ff ff       	call   c0009fd2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014a51:	83 c4 1c             	add    esp,0x1c
c0014a54:	68 00 10 00 00       	push   0x1000
c0014a59:	6a 00                	push   0x0
c0014a5b:	53                   	push   ebx
c0014a5c:	e8 8f ba fe ff       	call   c00004f0 <memset>
c0014a61:	83 c4 10             	add    esp,0x10
c0014a64:	39 fe                	cmp    esi,edi
c0014a66:	77 92                	ja     c00149fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014a68:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014a6d:	48                   	dec    eax
c0014a6e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014a73:	75 01                	jne    c0014a76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014a75:	fb                   	sti    
c0014a76:	83 ec 0c             	sub    esp,0xc
c0014a79:	53                   	push   ebx
c0014a7a:	e8 0c 4f ff ff       	call   c000998b <Virt::freeKernelVirtualPages(unsigned long)>
c0014a7f:	83 c4 10             	add    esp,0x10
c0014a82:	b0 01                	mov    al,0x1
c0014a84:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a8a:	5b                   	pop    ebx
c0014a8b:	5e                   	pop    esi
c0014a8c:	5f                   	pop    edi
c0014a8d:	5d                   	pop    ebp
c0014a8e:	c3                   	ret    

c0014a8f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a8f:	55                   	push   ebp
c0014a90:	57                   	push   edi
c0014a91:	56                   	push   esi
c0014a92:	53                   	push   ebx
c0014a93:	83 ec 48             	sub    esp,0x48
c0014a96:	68 14 01 00 00       	push   0x114
c0014a9b:	e8 76 30 ff ff       	call   c0007b16 <malloc>
c0014aa0:	83 c4 0c             	add    esp,0xc
c0014aa3:	89 c6                	mov    esi,eax
c0014aa5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014aa9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014aad:	50                   	push   eax
c0014aae:	e8 f9 70 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0014ab3:	58                   	pop    eax
c0014ab4:	5a                   	pop    edx
c0014ab5:	6a 01                	push   0x1
c0014ab7:	56                   	push   esi
c0014ab8:	e8 0d 71 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0014abd:	83 c4 10             	add    esp,0x10
c0014ac0:	85 c0                	test   eax,eax
c0014ac2:	0f 85 43 01 00 00    	jne    c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ac8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014ad0:	83 ec 0c             	sub    esp,0xc
c0014ad3:	6a 34                	push   0x34
c0014ad5:	e8 3c 30 ff ff       	call   c0007b16 <malloc>
c0014ada:	89 c3                	mov    ebx,eax
c0014adc:	58                   	pop    eax
c0014add:	8b 06                	mov    eax,DWORD PTR [esi]
c0014adf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014ae3:	57                   	push   edi
c0014ae4:	53                   	push   ebx
c0014ae5:	6a 00                	push   0x0
c0014ae7:	6a 34                	push   0x34
c0014ae9:	56                   	push   esi
c0014aea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014aed:	83 c4 20             	add    esp,0x20
c0014af0:	85 c0                	test   eax,eax
c0014af2:	0f 85 13 01 00 00    	jne    c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014af8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014afe:	0f 85 07 01 00 00    	jne    c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b07:	85 c0                	test   eax,eax
c0014b09:	0f 84 fc 00 00 00    	je     c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b0f:	31 d2                	xor    edx,edx
c0014b11:	55                   	push   ebp
c0014b12:	52                   	push   edx
c0014b13:	50                   	push   eax
c0014b14:	56                   	push   esi
c0014b15:	e8 6e 71 ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	85 c0                	test   eax,eax
c0014b1f:	0f 85 e6 00 00 00    	jne    c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b25:	83 ec 0c             	sub    esp,0xc
c0014b28:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014b2b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014b33:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b37:	0f af c2             	imul   eax,edx
c0014b3a:	50                   	push   eax
c0014b3b:	e8 d6 2f ff ff       	call   c0007b16 <malloc>
c0014b40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b46:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b4d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b51:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b55:	0f af c2             	imul   eax,edx
c0014b58:	99                   	cdq    
c0014b59:	52                   	push   edx
c0014b5a:	50                   	push   eax
c0014b5b:	56                   	push   esi
c0014b5c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b5f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014b62:	83 c4 20             	add    esp,0x20
c0014b65:	85 c0                	test   eax,eax
c0014b67:	0f 84 9e 00 00 00    	je     c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b6d:	31 d2                	xor    edx,edx
c0014b6f:	51                   	push   ecx
c0014b70:	52                   	push   edx
c0014b71:	50                   	push   eax
c0014b72:	56                   	push   esi
c0014b73:	e8 10 71 ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	85 c0                	test   eax,eax
c0014b7d:	0f 85 88 00 00 00    	jne    c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b83:	83 ec 0c             	sub    esp,0xc
c0014b86:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b8a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b8e:	31 ed                	xor    ebp,ebp
c0014b90:	0f af c2             	imul   eax,edx
c0014b93:	50                   	push   eax
c0014b94:	e8 7d 2f ff ff       	call   c0007b16 <malloc>
c0014b99:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b9f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ba6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014baa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014bae:	0f af c2             	imul   eax,edx
c0014bb1:	99                   	cdq    
c0014bb2:	52                   	push   edx
c0014bb3:	50                   	push   eax
c0014bb4:	56                   	push   esi
c0014bb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bb8:	83 c4 20             	add    esp,0x20
c0014bbb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014bc3:	0f b7 fd             	movzx  edi,bp
c0014bc6:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014bca:	73 7d                	jae    c0014c49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014bcc:	c1 e7 05             	shl    edi,0x5
c0014bcf:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014bd3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014bd6:	75 6b                	jne    c0014c43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014bd8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014bdb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bdf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014be2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014be6:	52                   	push   edx
c0014be7:	31 d2                	xor    edx,edx
c0014be9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014bec:	52                   	push   edx
c0014bed:	50                   	push   eax
c0014bee:	56                   	push   esi
c0014bef:	e8 94 70 ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0014bf4:	83 c4 10             	add    esp,0x10
c0014bf7:	85 c0                	test   eax,eax
c0014bf9:	74 17                	je     c0014c12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014bfb:	83 ec 0c             	sub    esp,0xc
c0014bfe:	68 29 29 02 c0       	push   0xc0022929
c0014c03:	e8 9d 5d ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0014c08:	83 c4 10             	add    esp,0x10
c0014c0b:	31 c0                	xor    eax,eax
c0014c0d:	e9 87 00 00 00       	jmp    c0014c99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014c12:	83 ec 0c             	sub    esp,0xc
c0014c15:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c18:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014c1b:	50                   	push   eax
c0014c1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c24:	56                   	push   esi
c0014c25:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014c29:	e8 d3 fb ff ff       	call   c0014801 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014c2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c32:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014c36:	83 c4 20             	add    esp,0x20
c0014c39:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014c3d:	73 04                	jae    c0014c43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014c43:	45                   	inc    ebp
c0014c44:	e9 7a ff ff ff       	jmp    c0014bc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014c49:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014c4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c55:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014c5b:	83 ec 0c             	sub    esp,0xc
c0014c5e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014c64:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c69:	05 00 10 00 00       	add    eax,0x1000
c0014c6e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c75:	e8 ac 2e ff ff       	call   c0007b26 <free>
c0014c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c7d:	e8 a4 2e ff ff       	call   c0007b26 <free>
c0014c82:	58                   	pop    eax
c0014c83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c87:	e8 9a 2e ff ff       	call   c0007b26 <free>
c0014c8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c8f:	e8 94 6f ff ff       	call   c000bc28 <File::close()>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	b0 01                	mov    al,0x1
c0014c99:	83 c4 3c             	add    esp,0x3c
c0014c9c:	5b                   	pop    ebx
c0014c9d:	5e                   	pop    esi
c0014c9e:	5f                   	pop    edi
c0014c9f:	5d                   	pop    ebp
c0014ca0:	c3                   	ret    

c0014ca1 <Thr::runtimeReferenceHelper()>:
c0014ca1:	83 ec 18             	sub    esp,0x18
c0014ca4:	68 31 29 02 c0       	push   0xc0022931
c0014ca9:	e8 f7 5c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0014cae:	fa                   	cli    
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	eb fe                	jmp    c0014cb2 <Thr::runtimeReferenceHelper()+0x11>

c0014cb4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014cb4:	57                   	push   edi
c0014cb5:	56                   	push   esi
c0014cb6:	53                   	push   ebx
c0014cb7:	31 db                	xor    ebx,ebx
c0014cb9:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014cbf:	7e 3c                	jle    c0014cfd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014cc1:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014cc8:	31 ff                	xor    edi,edi
c0014cca:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014cd1:	7e 27                	jle    c0014cfa <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014cd3:	50                   	push   eax
c0014cd4:	50                   	push   eax
c0014cd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cdb:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014ce2:	50                   	push   eax
c0014ce3:	e8 68 ba fe ff       	call   c0000750 <strcmp>
c0014ce8:	83 c4 10             	add    esp,0x10
c0014ceb:	85 c0                	test   eax,eax
c0014ced:	75 05                	jne    c0014cf4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014cef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014cf2:	eb 0b                	jmp    c0014cff <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014cf4:	83 c6 10             	add    esi,0x10
c0014cf7:	47                   	inc    edi
c0014cf8:	eb d0                	jmp    c0014cca <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014cfa:	43                   	inc    ebx
c0014cfb:	eb bc                	jmp    c0014cb9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014cfd:	31 c0                	xor    eax,eax
c0014cff:	5b                   	pop    ebx
c0014d00:	5e                   	pop    esi
c0014d01:	5f                   	pop    edi
c0014d02:	c3                   	ret    

c0014d03 <Thr::loadKernelSymbolTable(char const*)>:
c0014d03:	55                   	push   ebp
c0014d04:	57                   	push   edi
c0014d05:	56                   	push   esi
c0014d06:	53                   	push   ebx
c0014d07:	83 ec 68             	sub    esp,0x68
c0014d0a:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014d10:	68 14 01 00 00       	push   0x114
c0014d15:	e8 fc 2d ff ff       	call   c0007b16 <malloc>
c0014d1a:	83 c4 0c             	add    esp,0xc
c0014d1d:	89 c3                	mov    ebx,eax
c0014d1f:	56                   	push   esi
c0014d20:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014d24:	50                   	push   eax
c0014d25:	e8 82 6e ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0014d2a:	5e                   	pop    esi
c0014d2b:	5f                   	pop    edi
c0014d2c:	6a 01                	push   0x1
c0014d2e:	53                   	push   ebx
c0014d2f:	e8 96 6e ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	85 c0                	test   eax,eax
c0014d39:	74 0a                	je     c0014d45 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014d3b:	83 ec 0c             	sub    esp,0xc
c0014d3e:	68 53 29 02 c0       	push   0xc0022953
c0014d43:	eb 34                	jmp    c0014d79 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014d45:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014d4d:	83 ec 0c             	sub    esp,0xc
c0014d50:	6a 34                	push   0x34
c0014d52:	e8 bf 2d ff ff       	call   c0007b16 <malloc>
c0014d57:	59                   	pop    ecx
c0014d58:	89 c7                	mov    edi,eax
c0014d5a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014d5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d60:	56                   	push   esi
c0014d61:	57                   	push   edi
c0014d62:	6a 00                	push   0x0
c0014d64:	6a 34                	push   0x34
c0014d66:	53                   	push   ebx
c0014d67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d6a:	83 c4 20             	add    esp,0x20
c0014d6d:	85 c0                	test   eax,eax
c0014d6f:	74 17                	je     c0014d88 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d71:	83 ec 0c             	sub    esp,0xc
c0014d74:	68 6a 29 02 c0       	push   0xc002296a
c0014d79:	e8 79 c9 ff ff       	call   c00116f7 <KePanic(char const*)>
c0014d7e:	83 c4 10             	add    esp,0x10
c0014d81:	31 c0                	xor    eax,eax
c0014d83:	e9 31 02 00 00       	jmp    c0014fb9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d88:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d8e:	75 e1                	jne    c0014d71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d90:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d93:	85 c0                	test   eax,eax
c0014d95:	74 da                	je     c0014d71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d97:	52                   	push   edx
c0014d98:	31 d2                	xor    edx,edx
c0014d9a:	52                   	push   edx
c0014d9b:	50                   	push   eax
c0014d9c:	53                   	push   ebx
c0014d9d:	e8 e6 6e ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	85 c0                	test   eax,eax
c0014da7:	75 c8                	jne    c0014d71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014da9:	83 ec 0c             	sub    esp,0xc
c0014dac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014db0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014db4:	31 ed                	xor    ebp,ebp
c0014db6:	0f af c2             	imul   eax,edx
c0014db9:	50                   	push   eax
c0014dba:	e8 57 2d ff ff       	call   c0007b16 <malloc>
c0014dbf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014dc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014dcc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014dd0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014dd4:	0f af c2             	imul   eax,edx
c0014dd7:	99                   	cdq    
c0014dd8:	52                   	push   edx
c0014dd9:	50                   	push   eax
c0014dda:	53                   	push   ebx
c0014ddb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dde:	83 c4 20             	add    esp,0x20
c0014de1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014de9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014df1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014df9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e01:	0f b7 f5             	movzx  esi,bp
c0014e04:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014e08:	0f 83 a7 00 00 00    	jae    c0014eb5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014e0e:	6b f6 28             	imul   esi,esi,0x28
c0014e11:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014e15:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014e18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e1c:	50                   	push   eax
c0014e1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e21:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014e25:	8b 16                	mov    edx,DWORD PTR [esi]
c0014e27:	6b c0 28             	imul   eax,eax,0x28
c0014e2a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014e2e:	89 d0                	mov    eax,edx
c0014e30:	31 d2                	xor    edx,edx
c0014e32:	52                   	push   edx
c0014e33:	50                   	push   eax
c0014e34:	53                   	push   ebx
c0014e35:	e8 4e 6e ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0014e3a:	83 c4 0c             	add    esp,0xc
c0014e3d:	6a 20                	push   0x20
c0014e3f:	6a 00                	push   0x0
c0014e41:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e45:	52                   	push   edx
c0014e46:	e8 a5 b6 fe ff       	call   c00004f0 <memset>
c0014e4b:	58                   	pop    eax
c0014e4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e4e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014e52:	51                   	push   ecx
c0014e53:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014e57:	52                   	push   edx
c0014e58:	6a 00                	push   0x0
c0014e5a:	6a 1f                	push   0x1f
c0014e5c:	53                   	push   ebx
c0014e5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e60:	83 c4 18             	add    esp,0x18
c0014e63:	68 81 29 02 c0       	push   0xc0022981
c0014e68:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e6c:	52                   	push   edx
c0014e6d:	e8 de b8 fe ff       	call   c0000750 <strcmp>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	85 c0                	test   eax,eax
c0014e77:	75 0f                	jne    c0014e88 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e88:	50                   	push   eax
c0014e89:	50                   	push   eax
c0014e8a:	68 89 29 02 c0       	push   0xc0022989
c0014e8f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e93:	50                   	push   eax
c0014e94:	e8 b7 b8 fe ff       	call   c0000750 <strcmp>
c0014e99:	83 c4 10             	add    esp,0x10
c0014e9c:	85 c0                	test   eax,eax
c0014e9e:	75 0f                	jne    c0014eaf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014ea0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ea3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ea7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eaf:	45                   	inc    ebp
c0014eb0:	e9 4c ff ff ff       	jmp    c0014e01 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014eb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014eba:	75 10                	jne    c0014ecc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014ebc:	83 ec 0c             	sub    esp,0xc
c0014ebf:	68 91 29 02 c0       	push   0xc0022991
c0014ec4:	e8 2e c8 ff ff       	call   c00116f7 <KePanic(char const*)>
c0014ec9:	83 c4 10             	add    esp,0x10
c0014ecc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ed1:	75 10                	jne    c0014ee3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014ed3:	83 ec 0c             	sub    esp,0xc
c0014ed6:	68 91 29 02 c0       	push   0xc0022991
c0014edb:	e8 17 c8 ff ff       	call   c00116f7 <KePanic(char const*)>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	31 d2                	xor    edx,edx
c0014ee5:	50                   	push   eax
c0014ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eea:	52                   	push   edx
c0014eeb:	50                   	push   eax
c0014eec:	53                   	push   ebx
c0014eed:	e8 96 6d ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0014ef2:	5a                   	pop    edx
c0014ef3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ef7:	e8 1a 2c ff ff       	call   c0007b16 <malloc>
c0014efc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f04:	31 c9                	xor    ecx,ecx
c0014f06:	5e                   	pop    esi
c0014f07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f09:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014f0d:	55                   	push   ebp
c0014f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f12:	51                   	push   ecx
c0014f13:	52                   	push   edx
c0014f14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014f18:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014f1c:	53                   	push   ebx
c0014f1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f20:	83 c4 14             	add    esp,0x14
c0014f23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f27:	e8 ea 2b ff ff       	call   c0007b16 <malloc>
c0014f2c:	89 c6                	mov    esi,eax
c0014f2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f33:	56                   	push   esi
c0014f34:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f38:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014f3c:	51                   	push   ecx
c0014f3d:	52                   	push   edx
c0014f3e:	53                   	push   ebx
c0014f3f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f46:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014f4c:	83 c4 1c             	add    esp,0x1c
c0014f4f:	c1 e8 04             	shr    eax,0x4
c0014f52:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014f59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f5d:	31 d2                	xor    edx,edx
c0014f5f:	52                   	push   edx
c0014f60:	50                   	push   eax
c0014f61:	53                   	push   ebx
c0014f62:	e8 21 6d ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0014f67:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f69:	31 d2                	xor    edx,edx
c0014f6b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f6e:	56                   	push   esi
c0014f6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f73:	52                   	push   edx
c0014f74:	50                   	push   eax
c0014f75:	53                   	push   ebx
c0014f76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f79:	83 c4 14             	add    esp,0x14
c0014f7c:	53                   	push   ebx
c0014f7d:	e8 a6 6c ff ff       	call   c000bc28 <File::close()>
c0014f82:	5d                   	pop    ebp
c0014f83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f87:	e8 9a 2b ff ff       	call   c0007b26 <free>
c0014f8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f8f:	e8 92 2b ff ff       	call   c0007b26 <free>
c0014f94:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f9d:	8d 50 01             	lea    edx,[eax+0x1]
c0014fa0:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014fa7:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014fae:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014fb4:	83 c4 10             	add    esp,0x10
c0014fb7:	b0 01                	mov    al,0x1
c0014fb9:	83 c4 5c             	add    esp,0x5c
c0014fbc:	5b                   	pop    ebx
c0014fbd:	5e                   	pop    esi
c0014fbe:	5f                   	pop    edi
c0014fbf:	5d                   	pop    ebp
c0014fc0:	c3                   	ret    

c0014fc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014fc1:	55                   	push   ebp
c0014fc2:	57                   	push   edi
c0014fc3:	56                   	push   esi
c0014fc4:	53                   	push   ebx
c0014fc5:	81 ec 68 03 00 00    	sub    esp,0x368
c0014fcb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014fd2:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014fd8:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014fdc:	68 14 01 00 00       	push   0x114
c0014fe1:	e8 30 2b ff ff       	call   c0007b16 <malloc>
c0014fe6:	83 c4 0c             	add    esp,0xc
c0014fe9:	89 c5                	mov    ebp,eax
c0014feb:	53                   	push   ebx
c0014fec:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ff3:	50                   	push   eax
c0014ff4:	e8 b3 6b ff ff       	call   c000bbac <File::File(char const*, Process*)>
c0014ff9:	5e                   	pop    esi
c0014ffa:	5f                   	pop    edi
c0014ffb:	6a 01                	push   0x1
c0014ffd:	55                   	push   ebp
c0014ffe:	e8 c7 6b ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	85 c0                	test   eax,eax
c0015008:	0f 85 aa 06 00 00    	jne    c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001500e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015016:	83 ec 0c             	sub    esp,0xc
c0015019:	6a 34                	push   0x34
c001501b:	e8 f6 2a ff ff       	call   c0007b16 <malloc>
c0015020:	5b                   	pop    ebx
c0015021:	89 c7                	mov    edi,eax
c0015023:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015027:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001502a:	53                   	push   ebx
c001502b:	57                   	push   edi
c001502c:	6a 00                	push   0x0
c001502e:	6a 34                	push   0x34
c0015030:	55                   	push   ebp
c0015031:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015034:	83 c4 20             	add    esp,0x20
c0015037:	85 c0                	test   eax,eax
c0015039:	0f 85 79 06 00 00    	jne    c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001503f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015045:	0f 85 6d 06 00 00    	jne    c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001504b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001504e:	85 c0                	test   eax,eax
c0015050:	0f 84 62 06 00 00    	je     c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015056:	31 d2                	xor    edx,edx
c0015058:	51                   	push   ecx
c0015059:	52                   	push   edx
c001505a:	50                   	push   eax
c001505b:	55                   	push   ebp
c001505c:	e8 27 6c ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	85 c0                	test   eax,eax
c0015066:	0f 85 4c 06 00 00    	jne    c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001506c:	83 ec 0c             	sub    esp,0xc
c001506f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015072:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015076:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001507a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001507e:	0f af c2             	imul   eax,edx
c0015081:	50                   	push   eax
c0015082:	e8 8f 2a ff ff       	call   c0007b16 <malloc>
c0015087:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001508a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001508e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015091:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015095:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015099:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001509d:	0f af c2             	imul   eax,edx
c00150a0:	99                   	cdq    
c00150a1:	52                   	push   edx
c00150a2:	50                   	push   eax
c00150a3:	55                   	push   ebp
c00150a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150a7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00150aa:	83 c4 20             	add    esp,0x20
c00150ad:	85 c0                	test   eax,eax
c00150af:	0f 84 03 06 00 00    	je     c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150b5:	52                   	push   edx
c00150b6:	31 d2                	xor    edx,edx
c00150b8:	52                   	push   edx
c00150b9:	50                   	push   eax
c00150ba:	55                   	push   ebp
c00150bb:	e8 c8 6b ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c00150c0:	83 c4 10             	add    esp,0x10
c00150c3:	85 c0                	test   eax,eax
c00150c5:	0f 85 ed 05 00 00    	jne    c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150cb:	83 ec 0c             	sub    esp,0xc
c00150ce:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150d2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150d6:	31 f6                	xor    esi,esi
c00150d8:	0f af c2             	imul   eax,edx
c00150db:	50                   	push   eax
c00150dc:	e8 35 2a ff ff       	call   c0007b16 <malloc>
c00150e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00150e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00150ef:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150f3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150f7:	0f af c2             	imul   eax,edx
c00150fa:	99                   	cdq    
c00150fb:	52                   	push   edx
c00150fc:	50                   	push   eax
c00150fd:	55                   	push   ebp
c00150fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015101:	83 c4 20             	add    esp,0x20
c0015104:	0f b7 de             	movzx  ebx,si
c0015107:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c001510b:	0f 83 87 00 00 00    	jae    c0015198 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015111:	c1 e3 05             	shl    ebx,0x5
c0015114:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015118:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001511b:	75 75                	jne    c0015192 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001511d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015120:	31 d2                	xor    edx,edx
c0015122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015126:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001512d:	50                   	push   eax
c001512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015131:	52                   	push   edx
c0015132:	50                   	push   eax
c0015133:	55                   	push   ebp
c0015134:	e8 4f 6b ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0015139:	83 c4 10             	add    esp,0x10
c001513c:	85 c0                	test   eax,eax
c001513e:	0f 85 74 05 00 00    	jne    c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015144:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001514b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001514e:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015152:	31 d2                	xor    edx,edx
c0015154:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015158:	83 ec 0c             	sub    esp,0xc
c001515b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001515f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015166:	50                   	push   eax
c0015167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001516b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516f:	52                   	push   edx
c0015170:	50                   	push   eax
c0015171:	55                   	push   ebp
c0015172:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015175:	83 c4 1c             	add    esp,0x1c
c0015178:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001517b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001517e:	50                   	push   eax
c001517f:	6a 00                	push   0x0
c0015181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015185:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015189:	50                   	push   eax
c001518a:	e8 61 b3 fe ff       	call   c00004f0 <memset>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	46                   	inc    esi
c0015193:	e9 6c ff ff ff       	jmp    c0015104 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015198:	53                   	push   ebx
c0015199:	31 db                	xor    ebx,ebx
c001519b:	68 00 01 00 00       	push   0x100
c00151a0:	6a 00                	push   0x0
c00151a2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00151a6:	50                   	push   eax
c00151a7:	e8 44 b3 fe ff       	call   c00004f0 <memset>
c00151ac:	83 c4 0c             	add    esp,0xc
c00151af:	68 00 01 00 00       	push   0x100
c00151b4:	6a 00                	push   0x0
c00151b6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00151bd:	50                   	push   eax
c00151be:	e8 2d b3 fe ff       	call   c00004f0 <memset>
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00151ce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00151d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00151de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00151e6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00151ee:	0f b7 f3             	movzx  esi,bx
c00151f1:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00151f5:	0f 83 2d 01 00 00    	jae    c0015328 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00151fb:	6b f6 28             	imul   esi,esi,0x28
c00151fe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015202:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015209:	52                   	push   edx
c001520a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001520e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015212:	8b 06                	mov    eax,DWORD PTR [esi]
c0015214:	6b d2 28             	imul   edx,edx,0x28
c0015217:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001521b:	31 d2                	xor    edx,edx
c001521d:	52                   	push   edx
c001521e:	50                   	push   eax
c001521f:	55                   	push   ebp
c0015220:	e8 63 6a ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0015225:	83 c4 0c             	add    esp,0xc
c0015228:	6a 20                	push   0x20
c001522a:	6a 00                	push   0x0
c001522c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015233:	51                   	push   ecx
c0015234:	e8 b7 b2 fe ff       	call   c00004f0 <memset>
c0015239:	59                   	pop    ecx
c001523a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001523d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015241:	52                   	push   edx
c0015242:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015249:	51                   	push   ecx
c001524a:	6a 00                	push   0x0
c001524c:	6a 1f                	push   0x1f
c001524e:	55                   	push   ebp
c001524f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015252:	83 c4 1c             	add    esp,0x1c
c0015255:	6a 09                	push   0x9
c0015257:	68 ab 29 02 c0       	push   0xc00229ab
c001525c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015263:	51                   	push   ecx
c0015264:	e8 17 b1 fe ff       	call   c0000380 <memcmp>
c0015269:	83 c4 10             	add    esp,0x10
c001526c:	85 c0                	test   eax,eax
c001526e:	75 21                	jne    c0015291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015278:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001527c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015280:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015283:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001528a:	89 d0                	mov    eax,edx
c001528c:	40                   	inc    eax
c001528d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015291:	50                   	push   eax
c0015292:	6a 09                	push   0x9
c0015294:	68 b5 29 02 c0       	push   0xc00229b5
c0015299:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152a0:	50                   	push   eax
c00152a1:	e8 da b0 fe ff       	call   c0000380 <memcmp>
c00152a6:	83 c4 10             	add    esp,0x10
c00152a9:	85 c0                	test   eax,eax
c00152ab:	75 21                	jne    c00152ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00152ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152b9:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00152bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152c0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00152c7:	89 d0                	mov    eax,edx
c00152c9:	40                   	inc    eax
c00152ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ce:	50                   	push   eax
c00152cf:	50                   	push   eax
c00152d0:	68 81 29 02 c0       	push   0xc0022981
c00152d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152dc:	50                   	push   eax
c00152dd:	e8 6e b4 fe ff       	call   c0000750 <strcmp>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	85 c0                	test   eax,eax
c00152e7:	75 0f                	jne    c00152f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00152e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00152f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152f8:	50                   	push   eax
c00152f9:	50                   	push   eax
c00152fa:	68 89 29 02 c0       	push   0xc0022989
c00152ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015306:	50                   	push   eax
c0015307:	e8 44 b4 fe ff       	call   c0000750 <strcmp>
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	85 c0                	test   eax,eax
c0015311:	75 0f                	jne    c0015322 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015313:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015316:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001531a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001531e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015322:	43                   	inc    ebx
c0015323:	e9 c6 fe ff ff       	jmp    c00151ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015328:	31 d2                	xor    edx,edx
c001532a:	50                   	push   eax
c001532b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001532f:	52                   	push   edx
c0015330:	50                   	push   eax
c0015331:	55                   	push   ebp
c0015332:	e8 51 69 ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c0015337:	58                   	pop    eax
c0015338:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001533c:	e8 d5 27 ff ff       	call   c0007b16 <malloc>
c0015341:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015344:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015348:	31 d2                	xor    edx,edx
c001534a:	58                   	pop    eax
c001534b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001534f:	53                   	push   ebx
c0015350:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015354:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015358:	52                   	push   edx
c0015359:	50                   	push   eax
c001535a:	55                   	push   ebp
c001535b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001535e:	83 c4 14             	add    esp,0x14
c0015361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015365:	e8 ac 27 ff ff       	call   c0007b16 <malloc>
c001536a:	31 d2                	xor    edx,edx
c001536c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015370:	83 c4 0c             	add    esp,0xc
c0015373:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015377:	52                   	push   edx
c0015378:	50                   	push   eax
c0015379:	55                   	push   ebp
c001537a:	e8 09 69 ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c001537f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015382:	31 d2                	xor    edx,edx
c0015384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015387:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001538b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001538f:	52                   	push   edx
c0015390:	50                   	push   eax
c0015391:	55                   	push   ebp
c0015392:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015395:	83 c4 20             	add    esp,0x20
c0015398:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001539d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00153a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00153a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153ad:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00153b1:	0f 84 05 03 00 00    	je     c00156bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00153b7:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00153be:	31 d2                	xor    edx,edx
c00153c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153c4:	c1 e8 03             	shr    eax,0x3
c00153c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00153cb:	51                   	push   ecx
c00153cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153d0:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00153d4:	52                   	push   edx
c00153d5:	50                   	push   eax
c00153d6:	55                   	push   ebp
c00153d7:	e8 ac 68 ff ff       	call   c000bc88 <File::seek(unsigned long long)>
c00153dc:	5b                   	pop    ebx
c00153dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153e1:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00153e8:	e8 29 27 ff ff       	call   c0007b16 <malloc>
c00153ed:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00153f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00153f4:	31 d2                	xor    edx,edx
c00153f6:	5e                   	pop    esi
c00153f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00153fb:	50                   	push   eax
c00153fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015400:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015404:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001540b:	52                   	push   edx
c001540c:	50                   	push   eax
c001540d:	55                   	push   ebp
c001540e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015411:	83 c4 20             	add    esp,0x20
c0015414:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001541c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015420:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015424:	0f 8d 76 02 00 00    	jge    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001542a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001542e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015432:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015437:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001543a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001543e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015442:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015446:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001544a:	c1 e8 08             	shr    eax,0x8
c001544d:	89 c6                	mov    esi,eax
c001544f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015453:	c1 e6 04             	shl    esi,0x4
c0015456:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001545a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001545d:	85 db                	test   ebx,ebx
c001545f:	0f 85 b3 00 00 00    	jne    c0015518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015465:	83 ec 0c             	sub    esp,0xc
c0015468:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001546c:	03 06                	add    eax,DWORD PTR [esi]
c001546e:	50                   	push   eax
c001546f:	e8 40 f8 ff ff       	call   c0014cb4 <Thr::getAddressOfKernelSymbol(char const*)>
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	89 c3                	mov    ebx,eax
c0015479:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001547e:	85 c0                	test   eax,eax
c0015480:	0f 85 92 00 00 00    	jne    c0015518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015486:	83 ec 0c             	sub    esp,0xc
c0015489:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001548d:	03 06                	add    eax,DWORD PTR [esi]
c001548f:	50                   	push   eax
c0015490:	e8 4f c4 ff ff       	call   c00118e4 <KeResolveCompatibilitySymbol(char*)>
c0015495:	83 c4 10             	add    esp,0x10
c0015498:	89 c3                	mov    ebx,eax
c001549a:	85 c0                	test   eax,eax
c001549c:	75 7a                	jne    c0015518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001549e:	51                   	push   ecx
c001549f:	51                   	push   ecx
c00154a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154a4:	03 06                	add    eax,DWORD PTR [esi]
c00154a6:	50                   	push   eax
c00154a7:	68 bf 29 02 c0       	push   0xc00229bf
c00154ac:	e8 f4 54 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00154b1:	58                   	pop    eax
c00154b2:	5a                   	pop    edx
c00154b3:	68 d9 29 02 c0       	push   0xc00229d9
c00154b8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154bf:	50                   	push   eax
c00154c0:	e8 7b b1 fe ff       	call   c0000640 <strcpy>
c00154c5:	59                   	pop    ecx
c00154c6:	58                   	pop    eax
c00154c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154cb:	03 06                	add    eax,DWORD PTR [esi]
c00154cd:	50                   	push   eax
c00154ce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154d5:	50                   	push   eax
c00154d6:	e8 65 b3 fe ff       	call   c0000840 <strcat>
c00154db:	58                   	pop    eax
c00154dc:	5a                   	pop    edx
c00154dd:	68 6f 2a 02 c0       	push   0xc0022a6f
c00154e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154e9:	50                   	push   eax
c00154ea:	e8 51 b3 fe ff       	call   c0000840 <strcat>
c00154ef:	83 c4 10             	add    esp,0x10
c00154f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154f7:	0f 84 5d 01 00 00    	je     c001565a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154fd:	83 ec 0c             	sub    esp,0xc
c0015500:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015507:	50                   	push   eax
c0015508:	e8 ea c1 ff ff       	call   c00116f7 <KePanic(char const*)>
c001550d:	83 c4 10             	add    esp,0x10
c0015510:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015514:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015518:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001551d:	83 f8 01             	cmp    eax,0x1
c0015520:	0f 85 8f 00 00 00    	jne    c00155b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015526:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001552d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015531:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015535:	01 ce                	add    esi,ecx
c0015537:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001553f:	0f 94 c0             	sete   al
c0015542:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001554a:	0f 94 c2             	sete   dl
c001554d:	09 c2                	or     edx,eax
c001554f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015551:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015556:	0f b6 d2             	movzx  edx,dl
c0015559:	74 41                	je     c001559c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001555b:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001555e:	85 d2                	test   edx,edx
c0015560:	75 15                	jne    c0015577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015562:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015566:	66 83 f8 0c          	cmp    ax,0xc
c001556a:	76 05                	jbe    c0015571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001556c:	b8 0c 00 00 00       	mov    eax,0xc
c0015571:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015575:	76 37                	jbe    c00155ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015577:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001557b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015580:	0f 84 d4 00 00 00    	je     c001565a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015586:	83 ec 0c             	sub    esp,0xc
c0015589:	68 f0 29 02 c0       	push   0xc00229f0
c001558e:	e8 64 c1 ff ff       	call   c00116f7 <KePanic(char const*)>
c0015593:	83 c4 10             	add    esp,0x10
c0015596:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001559a:	eb 12                	jmp    c00155ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001559c:	01 c1                	add    ecx,eax
c001559e:	85 d2                	test   edx,edx
c00155a0:	75 0c                	jne    c00155ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00155a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00155a6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00155aa:	77 02                	ja     c00155ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00155ac:	01 d9                	add    ecx,ebx
c00155ae:	89 0e                	mov    DWORD PTR [esi],ecx
c00155b0:	e9 e2 00 00 00       	jmp    c0015697 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155b5:	83 f8 02             	cmp    eax,0x2
c00155b8:	75 77                	jne    c0015631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00155ba:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00155c1:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00155c5:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00155c9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00155d1:	74 21                	je     c00155f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155d3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00155db:	74 17                	je     c00155f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155dd:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00155e1:	b8 0a 00 00 00       	mov    eax,0xa
c00155e6:	83 fa 0e             	cmp    edx,0xe
c00155e9:	77 03                	ja     c00155ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00155eb:	8d 42 fc             	lea    eax,[edx-0x4]
c00155ee:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00155f2:	76 17                	jbe    c001560b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00155f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00155f9:	74 5f                	je     c001565a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155fb:	83 ec 0c             	sub    esp,0xc
c00155fe:	68 0c 2a 02 c0       	push   0xc0022a0c
c0015603:	e8 ef c0 ff ff       	call   c00116f7 <KePanic(char const*)>
c0015608:	83 c4 10             	add    esp,0x10
c001560b:	8b 06                	mov    eax,DWORD PTR [esi]
c001560d:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015612:	74 13                	je     c0015627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015614:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015618:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001561f:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015623:	01 d0                	add    eax,edx
c0015625:	eb 04                	jmp    c001562b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015627:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001562b:	01 c3                	add    ebx,eax
c001562d:	89 1e                	mov    DWORD PTR [esi],ebx
c001562f:	eb 66                	jmp    c0015697 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015631:	52                   	push   edx
c0015632:	52                   	push   edx
c0015633:	50                   	push   eax
c0015634:	68 28 2a 02 c0       	push   0xc0022a28
c0015639:	e8 67 53 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001563e:	83 c4 10             	add    esp,0x10
c0015641:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015646:	74 12                	je     c001565a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015648:	83 ec 0c             	sub    esp,0xc
c001564b:	68 33 2a 02 c0       	push   0xc0022a33
c0015650:	e8 a2 c0 ff ff       	call   c00116f7 <KePanic(char const*)>
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	eb 3d                	jmp    c0015697 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001565a:	83 ec 0c             	sub    esp,0xc
c001565d:	55                   	push   ebp
c001565e:	e8 c5 65 ff ff       	call   c000bc28 <File::close()>
c0015663:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015666:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015669:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001566c:	59                   	pop    ecx
c001566d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015671:	e8 b0 24 ff ff       	call   c0007b26 <free>
c0015676:	5b                   	pop    ebx
c0015677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001567b:	e8 a6 24 ff ff       	call   c0007b26 <free>
c0015680:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015683:	e8 9e 24 ff ff       	call   c0007b26 <free>
c0015688:	5e                   	pop    esi
c0015689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001568d:	e8 94 24 ff ff       	call   c0007b26 <free>
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	eb 21                	jmp    c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015697:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001569b:	e9 7c fd ff ff       	jmp    c001541c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00156a0:	83 ec 0c             	sub    esp,0xc
c00156a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156a7:	e8 7a 24 ff ff       	call   c0007b26 <free>
c00156ac:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00156b0:	83 c4 10             	add    esp,0x10
c00156b3:	e9 f1 fc ff ff       	jmp    c00153a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00156b8:	31 c0                	xor    eax,eax
c00156ba:	eb 33                	jmp    c00156ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	55                   	push   ebp
c00156c0:	e8 63 65 ff ff       	call   c000bc28 <File::close()>
c00156c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00156c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156ce:	58                   	pop    eax
c00156cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156d3:	e8 4e 24 ff ff       	call   c0007b26 <free>
c00156d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156db:	e8 46 24 ff ff       	call   c0007b26 <free>
c00156e0:	5a                   	pop    edx
c00156e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156e5:	e8 3c 24 ff ff       	call   c0007b26 <free>
c00156ea:	83 c4 10             	add    esp,0x10
c00156ed:	b0 01                	mov    al,0x1
c00156ef:	81 c4 5c 03 00 00    	add    esp,0x35c
c00156f5:	5b                   	pop    ebx
c00156f6:	5e                   	pop    esi
c00156f7:	5f                   	pop    edi
c00156f8:	5d                   	pop    ebp
c00156f9:	c3                   	ret    

c00156fa <Thr::getDriverBaseFromAddress(unsigned long)>:
c00156fa:	56                   	push   esi
c00156fb:	31 d2                	xor    edx,edx
c00156fd:	53                   	push   ebx
c00156fe:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015704:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015708:	39 d3                	cmp    ebx,edx
c001570a:	7e 1b                	jle    c0015727 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001570c:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015713:	39 c8                	cmp    eax,ecx
c0015715:	77 0d                	ja     c0015724 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015717:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c001571e:	01 c6                	add    esi,eax
c0015720:	39 ce                	cmp    esi,ecx
c0015722:	77 05                	ja     c0015729 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015724:	42                   	inc    edx
c0015725:	eb e1                	jmp    c0015708 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015727:	31 c0                	xor    eax,eax
c0015729:	5b                   	pop    ebx
c001572a:	5e                   	pop    esi
c001572b:	c3                   	ret    

c001572c <Thr::getDriverNameFromAddress(unsigned long)>:
c001572c:	53                   	push   ebx
c001572d:	31 c0                	xor    eax,eax
c001572f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015733:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015739:	39 c3                	cmp    ebx,eax
c001573b:	7e 22                	jle    c001575f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001573d:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015744:	39 ca                	cmp    edx,ecx
c0015746:	77 14                	ja     c001575c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015748:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001574f:	39 ca                	cmp    edx,ecx
c0015751:	76 09                	jbe    c001575c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015753:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c001575a:	eb 05                	jmp    c0015761 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001575c:	40                   	inc    eax
c001575d:	eb da                	jmp    c0015739 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001575f:	31 c0                	xor    eax,eax
c0015761:	5b                   	pop    ebx
c0015762:	c3                   	ret    

c0015763 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015763:	53                   	push   ebx
c0015764:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015768:	53                   	push   ebx
c0015769:	e8 8c ff ff ff       	call   c00156fa <Thr::getDriverBaseFromAddress(unsigned long)>
c001576e:	5a                   	pop    edx
c001576f:	31 d2                	xor    edx,edx
c0015771:	85 c0                	test   eax,eax
c0015773:	74 04                	je     c0015779 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015775:	89 da                	mov    edx,ebx
c0015777:	29 c2                	sub    edx,eax
c0015779:	89 d0                	mov    eax,edx
c001577b:	5b                   	pop    ebx
c001577c:	c3                   	ret    

c001577d <Thr::loadDLL(char const*, bool)>:
c001577d:	55                   	push   ebp
c001577e:	57                   	push   edi
c001577f:	56                   	push   esi
c0015780:	53                   	push   ebx
c0015781:	81 ec 34 01 00 00    	sub    esp,0x134
c0015787:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001578e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015795:	56                   	push   esi
c0015796:	68 4b 2a 02 c0       	push   0xc0022a4b
c001579b:	e8 05 52 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00157a0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00157a7:	e8 6a 23 ff ff       	call   c0007b16 <malloc>
c00157ac:	83 c4 0c             	add    esp,0xc
c00157af:	89 c3                	mov    ebx,eax
c00157b1:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00157b7:	56                   	push   esi
c00157b8:	50                   	push   eax
c00157b9:	e8 ee 63 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c00157be:	83 c4 10             	add    esp,0x10
c00157c1:	85 db                	test   ebx,ebx
c00157c3:	75 3c                	jne    c0015801 <Thr::loadDLL(char const*, bool)+0x84>
c00157c5:	89 f8                	mov    eax,edi
c00157c7:	84 c0                	test   al,al
c00157c9:	0f 84 d2 01 00 00    	je     c00159a1 <Thr::loadDLL(char const*, bool)+0x224>
c00157cf:	55                   	push   ebp
c00157d0:	55                   	push   ebp
c00157d1:	68 5c 2a 02 c0       	push   0xc0022a5c
c00157d6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00157da:	55                   	push   ebp
c00157db:	e8 60 ae fe ff       	call   c0000640 <strcpy>
c00157e0:	58                   	pop    eax
c00157e1:	5a                   	pop    edx
c00157e2:	56                   	push   esi
c00157e3:	55                   	push   ebp
c00157e4:	e8 57 b0 fe ff       	call   c0000840 <strcat>
c00157e9:	59                   	pop    ecx
c00157ea:	58                   	pop    eax
c00157eb:	68 6f 2a 02 c0       	push   0xc0022a6f
c00157f0:	55                   	push   ebp
c00157f1:	e8 4a b0 fe ff       	call   c0000840 <strcat>
c00157f6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00157f9:	e8 f9 be ff ff       	call   c00116f7 <KePanic(char const*)>
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	51                   	push   ecx
c0015802:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015806:	50                   	push   eax
c0015807:	8d 44 24 20          	lea    eax,[esp+0x20]
c001580b:	50                   	push   eax
c001580c:	53                   	push   ebx
c001580d:	e8 ba 66 ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c0015812:	83 c4 10             	add    esp,0x10
c0015815:	85 db                	test   ebx,ebx
c0015817:	74 0c                	je     c0015825 <Thr::loadDLL(char const*, bool)+0xa8>
c0015819:	83 ec 0c             	sub    esp,0xc
c001581c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001581e:	53                   	push   ebx
c001581f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001582a:	75 0a                	jne    c0015836 <Thr::loadDLL(char const*, bool)+0xb9>
c001582c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015830:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015834:	75 3c                	jne    c0015872 <Thr::loadDLL(char const*, bool)+0xf5>
c0015836:	89 f8                	mov    eax,edi
c0015838:	84 c0                	test   al,al
c001583a:	0f 84 49 01 00 00    	je     c0015989 <Thr::loadDLL(char const*, bool)+0x20c>
c0015840:	51                   	push   ecx
c0015841:	51                   	push   ecx
c0015842:	68 5c 2a 02 c0       	push   0xc0022a5c
c0015847:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001584b:	53                   	push   ebx
c001584c:	e8 ef ad fe ff       	call   c0000640 <strcpy>
c0015851:	5d                   	pop    ebp
c0015852:	58                   	pop    eax
c0015853:	56                   	push   esi
c0015854:	53                   	push   ebx
c0015855:	e8 e6 af fe ff       	call   c0000840 <strcat>
c001585a:	58                   	pop    eax
c001585b:	5a                   	pop    edx
c001585c:	68 6f 2a 02 c0       	push   0xc0022a6f
c0015861:	53                   	push   ebx
c0015862:	e8 d9 af fe ff       	call   c0000840 <strcat>
c0015867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001586a:	e8 88 be ff ff       	call   c00116f7 <KePanic(char const*)>
c001586f:	83 c4 10             	add    esp,0x10
c0015872:	52                   	push   edx
c0015873:	6a 03                	push   0x3
c0015875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015879:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001587d:	05 ff 0f 00 00       	add    eax,0xfff
c0015882:	83 d2 00             	adc    edx,0x0
c0015885:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015889:	50                   	push   eax
c001588a:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015890:	e8 ef 45 ff ff       	call   c0009e84 <VAS::allocatePages(int, int)>
c0015895:	59                   	pop    ecx
c0015896:	89 c3                	mov    ebx,eax
c0015898:	5d                   	pop    ebp
c0015899:	50                   	push   eax
c001589a:	68 3a 0f 02 c0       	push   0xc0020f3a
c001589f:	e8 01 51 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00158a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00158a7:	e8 c4 ac fe ff       	call   c0000570 <strlen>
c00158ac:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c00158b2:	40                   	inc    eax
c00158b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00158b6:	e8 5b 22 ff ff       	call   c0007b16 <malloc>
c00158bb:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c00158c2:	58                   	pop    eax
c00158c3:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00158c8:	5a                   	pop    edx
c00158c9:	56                   	push   esi
c00158ca:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00158d1:	e8 6a ad fe ff       	call   c0000640 <strcpy>
c00158d6:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00158db:	8d 50 01             	lea    edx,[eax+0x1]
c00158de:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00158e5:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00158eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00158ef:	83 c4 0c             	add    esp,0xc
c00158f2:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00158f9:	6a 01                	push   0x1
c00158fb:	53                   	push   ebx
c00158fc:	56                   	push   esi
c00158fd:	e8 bf f6 ff ff       	call   c0014fc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	0f b6 c0             	movzx  eax,al
c0015908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001590c:	85 c0                	test   eax,eax
c001590e:	0f 85 89 00 00 00    	jne    c001599d <Thr::loadDLL(char const*, bool)+0x220>
c0015914:	89 f8                	mov    eax,edi
c0015916:	84 c0                	test   al,al
c0015918:	74 73                	je     c001598d <Thr::loadDLL(char const*, bool)+0x210>
c001591a:	83 ec 0c             	sub    esp,0xc
c001591d:	68 71 2a 02 c0       	push   0xc0022a71
c0015922:	e8 d0 bd ff ff       	call   c00116f7 <KePanic(char const*)>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	eb 61                	jmp    c001598d <Thr::loadDLL(char const*, bool)+0x210>
c001592c:	50                   	push   eax
c001592d:	50                   	push   eax
c001592e:	89 e8                	mov    eax,ebp
c0015930:	c1 e0 0c             	shl    eax,0xc
c0015933:	01 d8                	add    eax,ebx
c0015935:	50                   	push   eax
c0015936:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001593c:	e8 2b 40 ff ff       	call   c000996c <VAS::getPageTableEntry(unsigned long)>
c0015941:	83 c4 10             	add    esp,0x10
c0015944:	8b 00                	mov    eax,DWORD PTR [eax]
c0015946:	a8 60                	test   al,0x60
c0015948:	75 11                	jne    c001595b <Thr::loadDLL(char const*, bool)+0x1de>
c001594a:	83 ec 0c             	sub    esp,0xc
c001594d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015952:	50                   	push   eax
c0015953:	e8 5e 24 ff ff       	call   c0007db6 <Phys::freePage(unsigned long)>
c0015958:	83 c4 10             	add    esp,0x10
c001595b:	45                   	inc    ebp
c001595c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015960:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015964:	05 ff 0f 00 00       	add    eax,0xfff
c0015969:	bf 00 00 00 00       	mov    edi,0x0
c001596e:	83 d2 00             	adc    edx,0x0
c0015971:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015975:	c1 ea 0c             	shr    edx,0xc
c0015978:	39 c5                	cmp    ebp,eax
c001597a:	89 d1                	mov    ecx,edx
c001597c:	89 f8                	mov    eax,edi
c001597e:	19 c8                	sbb    eax,ecx
c0015980:	72 aa                	jb     c001592c <Thr::loadDLL(char const*, bool)+0x1af>
c0015982:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015987:	75 18                	jne    c00159a1 <Thr::loadDLL(char const*, bool)+0x224>
c0015989:	31 db                	xor    ebx,ebx
c001598b:	eb 14                	jmp    c00159a1 <Thr::loadDLL(char const*, bool)+0x224>
c001598d:	83 ec 0c             	sub    esp,0xc
c0015990:	68 90 2a 02 c0       	push   0xc0022a90
c0015995:	e8 5d bd ff ff       	call   c00116f7 <KePanic(char const*)>
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	31 ed                	xor    ebp,ebp
c001599f:	eb bb                	jmp    c001595c <Thr::loadDLL(char const*, bool)+0x1df>
c00159a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00159a7:	89 d8                	mov    eax,ebx
c00159a9:	5b                   	pop    ebx
c00159aa:	5e                   	pop    esi
c00159ab:	5f                   	pop    edi
c00159ac:	5d                   	pop    ebp
c00159ad:	c3                   	ret    

c00159ae <Thr::executeDLL(unsigned long, void*)>:
c00159ae:	56                   	push   esi
c00159af:	53                   	push   ebx
c00159b0:	52                   	push   edx
c00159b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00159b9:	85 db                	test   ebx,ebx
c00159bb:	75 10                	jne    c00159cd <Thr::executeDLL(unsigned long, void*)+0x1f>
c00159bd:	83 ec 0c             	sub    esp,0xc
c00159c0:	68 ac 2a 02 c0       	push   0xc0022aac
c00159c5:	e8 2d bd ff ff       	call   c00116f7 <KePanic(char const*)>
c00159ca:	83 c4 10             	add    esp,0x10
c00159cd:	50                   	push   eax
c00159ce:	50                   	push   eax
c00159cf:	53                   	push   ebx
c00159d0:	68 d6 2a 02 c0       	push   0xc0022ad6
c00159d5:	e8 cb 4f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00159da:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00159de:	89 d8                	mov    eax,ebx
c00159e0:	83 c4 14             	add    esp,0x14
c00159e3:	5b                   	pop    ebx
c00159e4:	5e                   	pop    esi
c00159e5:	ff e0                	jmp    eax
c00159e7:	90                   	nop

c00159e8 <userModeEntryPoint(void*)>:
c00159e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00159ed:	83 e8 01             	sub    eax,0x1
c00159f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00159f5:	75 01                	jne    c00159f8 <userModeEntryPoint(void*)+0x10>
c00159f7:	fb                   	sti    
c00159f8:	fb                   	sti    
c00159f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a01:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a0b:	e9 2f a8 fe ff       	jmp    c000023f <goToUsermode>

c0015a10 <changeTSS>:
c0015a10:	83 ec 14             	sub    esp,0x14
c0015a13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a18:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015a1b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015a20:	c1 e2 15             	shl    edx,0x15
c0015a23:	29 d0                	sub    eax,edx
c0015a25:	50                   	push   eax
c0015a26:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015a2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a31:	05 7c 11 00 00       	add    eax,0x117c
c0015a36:	50                   	push   eax
c0015a37:	e8 78 35 ff ff       	call   c0008fb4 <TSS::setESP(unsigned long)>
c0015a3c:	83 c4 1c             	add    esp,0x1c
c0015a3f:	c3                   	ret    

c0015a40 <switchToThread(ThreadControlBlock*)>:
c0015a40:	57                   	push   edi
c0015a41:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015a47:	56                   	push   esi
c0015a48:	85 c9                	test   ecx,ecx
c0015a4a:	53                   	push   ebx
c0015a4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a4f:	0f 85 8b 00 00 00    	jne    c0015ae0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015a55:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015a59:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015a5f:	74 7b                	je     c0015adc <switchToThread(ThreadControlBlock*)+0x9c>
c0015a61:	b8 00 04 00 00       	mov    eax,0x400
c0015a66:	29 d0                	sub    eax,edx
c0015a68:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015a6b:	d1 f8                	sar    eax,1
c0015a6d:	01 d0                	add    eax,edx
c0015a6f:	90                   	nop
c0015a70:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a73:	e8 1e 28 00 00       	call   c0018296 <HalQueryPerformanceCounter()>
c0015a78:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a7d:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a83:	89 c6                	mov    esi,eax
c0015a85:	89 d7                	mov    edi,edx
c0015a87:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a8d:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a92:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a98:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a9e:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015aa4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015aaa:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015ab0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015ab3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015ab6:	01 c6                	add    esi,eax
c0015ab8:	11 d7                	adc    edi,edx
c0015aba:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015abd:	83 ec 0c             	sub    esp,0xc
c0015ac0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015ac3:	53                   	push   ebx
c0015ac4:	e8 ae a7 fe ff       	call   c0000277 <switchToThreadASM>
c0015ac9:	0f 20 c0             	mov    eax,cr0
c0015acc:	83 c8 08             	or     eax,0x8
c0015acf:	0f 22 c0             	mov    cr0,eax
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	5b                   	pop    ebx
c0015ad6:	5e                   	pop    esi
c0015ad7:	5f                   	pop    edi
c0015ad8:	c3                   	ret    
c0015ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0015adc:	31 c0                	xor    eax,eax
c0015ade:	eb 90                	jmp    c0015a70 <switchToThread(ThreadControlBlock*)+0x30>
c0015ae0:	5b                   	pop    ebx
c0015ae1:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015aeb:	5e                   	pop    esi
c0015aec:	5f                   	pop    edi
c0015aed:	c3                   	ret    
c0015aee:	66 90                	xchg   ax,ax

c0015af0 <Process::addArgs(char**)>:
c0015af0:	57                   	push   edi
c0015af1:	56                   	push   esi
c0015af2:	53                   	push   ebx
c0015af3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015af7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015afb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015b05:	85 ff                	test   edi,edi
c0015b07:	74 4f                	je     c0015b58 <Process::addArgs(char**)+0x68>
c0015b09:	8b 07                	mov    eax,DWORD PTR [edi]
c0015b0b:	85 c0                	test   eax,eax
c0015b0d:	74 49                	je     c0015b58 <Process::addArgs(char**)+0x68>
c0015b0f:	31 db                	xor    ebx,ebx
c0015b11:	8d 76 00             	lea    esi,[esi+0x0]
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	50                   	push   eax
c0015b18:	e8 53 aa fe ff       	call   c0000570 <strlen>
c0015b1d:	83 c0 01             	add    eax,0x1
c0015b20:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b23:	e8 ee 1f ff ff       	call   c0007b16 <malloc>
c0015b28:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015b2f:	5a                   	pop    edx
c0015b30:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015b33:	59                   	pop    ecx
c0015b34:	83 c3 01             	add    ebx,0x1
c0015b37:	52                   	push   edx
c0015b38:	50                   	push   eax
c0015b39:	e8 02 ab fe ff       	call   c0000640 <strcpy>
c0015b3e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	83 c1 01             	add    ecx,0x1
c0015b4a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015b50:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015b53:	85 c0                	test   eax,eax
c0015b55:	75 bd                	jne    c0015b14 <Process::addArgs(char**)+0x24>
c0015b57:	90                   	nop
c0015b58:	5b                   	pop    ebx
c0015b59:	5e                   	pop    esi
c0015b5a:	5f                   	pop    edi
c0015b5b:	c3                   	ret    

c0015b5c <Process::Process(char const*, Process*, char**)>:
c0015b5c:	56                   	push   esi
c0015b5d:	53                   	push   ebx
c0015b5e:	83 ec 14             	sub    esp,0x14
c0015b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b65:	05 0c 02 00 00       	add    eax,0x20c
c0015b6a:	bb 07 00 00 00       	mov    ebx,0x7
c0015b6f:	89 c6                	mov    esi,eax
c0015b71:	8d 76 00             	lea    esi,[esi+0x0]
c0015b74:	85 db                	test   ebx,ebx
c0015b76:	78 14                	js     c0015b8c <Process::Process(char const*, Process*, char**)+0x30>
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	56                   	push   esi
c0015b7c:	e8 e7 a5 00 00       	call   c0020168 <ThreadControlBlock::ThreadControlBlock()>
c0015b81:	83 c4 10             	add    esp,0x10
c0015b84:	83 c6 5f             	add    esi,0x5f
c0015b87:	83 eb 01             	sub    ebx,0x1
c0015b8a:	eb e8                	jmp    c0015b74 <Process::Process(char const*, Process*, char**)+0x18>
c0015b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b90:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015ba2:	83 ec 0c             	sub    esp,0xc
c0015ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ba9:	e8 3e b9 ff ff       	call   c00114ec <KeNewProcessEnv(Process*)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	89 c2                	mov    edx,eax
c0015bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015bca:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0015bcf:	8d 50 01             	lea    edx,[eax+0x1]
c0015bd2:	89 15 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,edx
c0015bd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bdc:	89 02                	mov    DWORD PTR [edx],eax
c0015bde:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015be6:	83 ec 0c             	sub    esp,0xc
c0015be9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015bed:	e8 24 1f ff ff       	call   c0007b16 <malloc>
c0015bf2:	83 c4 10             	add    esp,0x10
c0015bf5:	89 c3                	mov    ebx,eax
c0015bf7:	83 ec 08             	sub    esp,0x8
c0015bfa:	6a 00                	push   0x0
c0015bfc:	53                   	push   ebx
c0015bfd:	e8 c6 44 ff ff       	call   c000a0c8 <VAS::VAS(bool)>
c0015c02:	83 c4 10             	add    esp,0x10
c0015c05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c09:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c13:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c25:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c2b:	e8 e2 be ff ff       	call   c0011b12 <KeInitSignals()>
c0015c30:	89 c2                	mov    edx,eax
c0015c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c36:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c46:	85 c0                	test   eax,eax
c0015c48:	74 42                	je     c0015c8c <Process::Process(char const*, Process*, char**)+0x130>
c0015c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c4e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c54:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c68:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c78:	05 0c 01 00 00       	add    eax,0x10c
c0015c7d:	83 ec 08             	sub    esp,0x8
c0015c80:	52                   	push   edx
c0015c81:	50                   	push   eax
c0015c82:	e8 b9 a9 fe ff       	call   c0000640 <strcpy>
c0015c87:	83 c4 10             	add    esp,0x10
c0015c8a:	eb 64                	jmp    c0015cf0 <Process::Process(char const*, Process*, char**)+0x194>
c0015c8c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c94:	83 ec 0c             	sub    esp,0xc
c0015c97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c9b:	e8 76 1e ff ff       	call   c0007b16 <malloc>
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	89 c3                	mov    ebx,eax
c0015ca5:	83 ec 08             	sub    esp,0x8
c0015ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cac:	53                   	push   ebx
c0015cad:	e8 14 30 ff ff       	call   c0008cc6 <VgaText::VgaText(char const*)>
c0015cb2:	83 c4 10             	add    esp,0x10
c0015cb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015cbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015cc9:	83 ec 0c             	sub    esp,0xc
c0015ccc:	50                   	push   eax
c0015ccd:	e8 92 28 ff ff       	call   c0008564 <addToTerminalCycle(VgaText*)>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cd9:	05 0c 01 00 00       	add    eax,0x10c
c0015cde:	83 ec 08             	sub    esp,0x8
c0015ce1:	68 f5 2a 02 c0       	push   0xc0022af5
c0015ce6:	50                   	push   eax
c0015ce7:	e8 54 a9 fe ff       	call   c0000640 <strcpy>
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	90                   	nop
c0015cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cf4:	83 c0 0c             	add    eax,0xc
c0015cf7:	83 ec 08             	sub    esp,0x8
c0015cfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cfe:	50                   	push   eax
c0015cff:	e8 3c a9 fe ff       	call   c0000640 <strcpy>
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	83 ec 08             	sub    esp,0x8
c0015d0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d12:	e8 d9 fd ff ff       	call   c0015af0 <Process::addArgs(char**)>
c0015d17:	83 c4 10             	add    esp,0x10
c0015d1a:	83 ec 08             	sub    esp,0x8
c0015d1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d25:	e8 65 ed ff ff       	call   c0014a8f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015d35:	83 f0 01             	xor    eax,0x1
c0015d38:	88 c2                	mov    dl,al
c0015d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d3e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015d44:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015d49:	83 ec 04             	sub    esp,0x4
c0015d4c:	50                   	push   eax
c0015d4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d51:	68 4c 2b 02 c0       	push   0xc0022b4c
c0015d56:	e8 4a 4c ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0015d5b:	83 c4 10             	add    esp,0x10
c0015d5e:	90                   	nop
c0015d5f:	83 c4 14             	add    esp,0x14
c0015d62:	5b                   	pop    ebx
c0015d63:	5e                   	pop    esi
c0015d64:	c3                   	ret    
c0015d65:	90                   	nop
c0015d66:	66 90                	xchg   ax,ax

c0015d68 <Process::Process(bool, char const*, Process*, char**)>:
c0015d68:	56                   	push   esi
c0015d69:	53                   	push   ebx
c0015d6a:	83 ec 24             	sub    esp,0x24
c0015d6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d79:	05 0c 02 00 00       	add    eax,0x20c
c0015d7e:	bb 07 00 00 00       	mov    ebx,0x7
c0015d83:	89 c6                	mov    esi,eax
c0015d85:	8d 76 00             	lea    esi,[esi+0x0]
c0015d88:	85 db                	test   ebx,ebx
c0015d8a:	78 14                	js     c0015da0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	56                   	push   esi
c0015d90:	e8 d3 a3 00 00       	call   c0020168 <ThreadControlBlock::ThreadControlBlock()>
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	83 c6 5f             	add    esi,0x5f
c0015d9b:	83 eb 01             	sub    ebx,0x1
c0015d9e:	eb e8                	jmp    c0015d88 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015da0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015dab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015daf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015db6:	83 ec 0c             	sub    esp,0xc
c0015db9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015dbd:	e8 2a b7 ff ff       	call   c00114ec <KeNewProcessEnv(Process*)>
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	89 c2                	mov    edx,eax
c0015dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015dd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015dde:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0015de3:	8d 50 01             	lea    edx,[eax+0x1]
c0015de6:	89 15 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,edx
c0015dec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015df0:	89 02                	mov    DWORD PTR [edx],eax
c0015df2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015dfa:	83 ec 0c             	sub    esp,0xc
c0015dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e01:	e8 10 1d ff ff       	call   c0007b16 <malloc>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	89 c3                	mov    ebx,eax
c0015e0b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015e10:	83 ec 08             	sub    esp,0x8
c0015e13:	50                   	push   eax
c0015e14:	53                   	push   ebx
c0015e15:	e8 ae 42 ff ff       	call   c000a0c8 <VAS::VAS(bool)>
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e21:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015e27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e2b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e39:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015e3d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015e43:	e8 ca bc ff ff       	call   c0011b12 <KeInitSignals()>
c0015e48:	89 c2                	mov    edx,eax
c0015e4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e4e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e5e:	85 c0                	test   eax,eax
c0015e60:	74 42                	je     c0015ea4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015e62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e66:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e6c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e76:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e86:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e90:	05 0c 01 00 00       	add    eax,0x10c
c0015e95:	83 ec 08             	sub    esp,0x8
c0015e98:	52                   	push   edx
c0015e99:	50                   	push   eax
c0015e9a:	e8 a1 a7 fe ff       	call   c0000640 <strcpy>
c0015e9f:	83 c4 10             	add    esp,0x10
c0015ea2:	eb 64                	jmp    c0015f08 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015ea4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015eac:	83 ec 0c             	sub    esp,0xc
c0015eaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015eb3:	e8 5e 1c ff ff       	call   c0007b16 <malloc>
c0015eb8:	83 c4 10             	add    esp,0x10
c0015ebb:	89 c3                	mov    ebx,eax
c0015ebd:	83 ec 08             	sub    esp,0x8
c0015ec0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ec4:	53                   	push   ebx
c0015ec5:	e8 fc 2d ff ff       	call   c0008cc6 <VgaText::VgaText(char const*)>
c0015eca:	83 c4 10             	add    esp,0x10
c0015ecd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ed1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ed7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015edb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ee1:	83 ec 0c             	sub    esp,0xc
c0015ee4:	50                   	push   eax
c0015ee5:	e8 7a 26 ff ff       	call   c0008564 <addToTerminalCycle(VgaText*)>
c0015eea:	83 c4 10             	add    esp,0x10
c0015eed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ef1:	05 0c 01 00 00       	add    eax,0x10c
c0015ef6:	83 ec 08             	sub    esp,0x8
c0015ef9:	68 f5 2a 02 c0       	push   0xc0022af5
c0015efe:	50                   	push   eax
c0015eff:	e8 3c a7 fe ff       	call   c0000640 <strcpy>
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	90                   	nop
c0015f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f0c:	83 c0 0c             	add    eax,0xc
c0015f0f:	83 ec 08             	sub    esp,0x8
c0015f12:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015f16:	50                   	push   eax
c0015f17:	e8 24 a7 fe ff       	call   c0000640 <strcpy>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	83 ec 08             	sub    esp,0x8
c0015f22:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015f26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015f2a:	e8 c1 fb ff ff       	call   c0015af0 <Process::addArgs(char**)>
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	90                   	nop
c0015f33:	83 c4 24             	add    esp,0x24
c0015f36:	5b                   	pop    ebx
c0015f37:	5e                   	pop    esi
c0015f38:	c3                   	ret    
c0015f39:	8d 76 00             	lea    esi,[esi+0x0]

c0015f3c <taskStartupFunction>:
c0015f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f41:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015f44:	c3                   	ret    
c0015f45:	90                   	nop
c0015f46:	66 90                	xchg   ax,ax

c0015f48 <Semaphore::Semaphore(int)>:
c0015f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f50:	89 10                	mov    DWORD PTR [eax],edx
c0015f52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f56:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015f5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015f73:	90                   	nop
c0015f74:	c3                   	ret    
c0015f75:	90                   	nop
c0015f76:	66 90                	xchg   ax,ax

c0015f78 <Mutex::Mutex()>:
c0015f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f7c:	6a 01                	push   0x1
c0015f7e:	50                   	push   eax
c0015f7f:	e8 c4 ff ff ff       	call   c0015f48 <Semaphore::Semaphore(int)>
c0015f84:	83 c4 08             	add    esp,0x8
c0015f87:	90                   	nop
c0015f88:	c3                   	ret    
c0015f89:	90                   	nop
c0015f8a:	66 90                	xchg   ax,ax

c0015f8c <Process::createThread(void (*)(void*), void*, int)>:
c0015f8c:	57                   	push   edi
c0015f8d:	31 c9                	xor    ecx,ecx
c0015f8f:	56                   	push   esi
c0015f90:	53                   	push   ebx
c0015f91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f95:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f9c:	89 f2                	mov    edx,esi
c0015f9e:	66 90                	xchg   ax,ax
c0015fa0:	0f b7 c2             	movzx  eax,dx
c0015fa3:	80 e2 01             	and    dl,0x1
c0015fa6:	74 14                	je     c0015fbc <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015fa8:	d1 f8                	sar    eax,1
c0015faa:	83 c1 01             	add    ecx,0x1
c0015fad:	89 c2                	mov    edx,eax
c0015faf:	83 f9 10             	cmp    ecx,0x10
c0015fb2:	75 ec                	jne    c0015fa0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015fb4:	31 db                	xor    ebx,ebx
c0015fb6:	89 d8                	mov    eax,ebx
c0015fb8:	5b                   	pop    ebx
c0015fb9:	5e                   	pop    esi
c0015fba:	5f                   	pop    edi
c0015fbb:	c3                   	ret    
c0015fbc:	b8 01 00 00 00       	mov    eax,0x1
c0015fc1:	d3 e0                	shl    eax,cl
c0015fc3:	09 c6                	or     esi,eax
c0015fc5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015fc8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015fcf:	01 c0                	add    eax,eax
c0015fd1:	01 c8                	add    eax,ecx
c0015fd3:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fd6:	01 d8                	add    eax,ebx
c0015fd8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015fdf:	75 0b                	jne    c0015fec <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015fe1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015feb:	90                   	nop
c0015fec:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ff2:	83 ec 0c             	sub    esp,0xc
c0015ff5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ff8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015ffb:	01 c0                	add    eax,eax
c0015ffd:	01 c8                	add    eax,ecx
c0015fff:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016002:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016005:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001600b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016011:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016015:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001601b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0016021:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0016027:	89 ca                	mov    edx,ecx
c0016029:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016030:	f7 da                	neg    edx
c0016032:	c1 e2 15             	shl    edx,0x15
c0016035:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001603b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016041:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016045:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001604f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016055:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016059:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001605f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016069:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016073:	68 00 01 00 00       	push   0x100
c0016078:	e8 99 1a ff ff       	call   c0007b16 <malloc>
c001607d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016080:	58                   	pop    eax
c0016081:	5a                   	pop    edx
c0016082:	53                   	push   ebx
c0016083:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016088:	e8 73 9e 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001608d:	83 c4 10             	add    esp,0x10
c0016090:	89 d8                	mov    eax,ebx
c0016092:	5b                   	pop    ebx
c0016093:	5e                   	pop    esi
c0016094:	5f                   	pop    edi
c0016095:	c3                   	ret    
c0016096:	66 90                	xchg   ax,ax

c0016098 <Process::createUserThread()>:
c0016098:	83 ec 0c             	sub    esp,0xc
c001609b:	68 80 00 00 00       	push   0x80
c00160a0:	6a 00                	push   0x0
c00160a2:	68 e8 59 01 c0       	push   0xc00159e8
c00160a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160ab:	50                   	push   eax
c00160ac:	e8 db fe ff ff       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c00160b1:	83 c4 1c             	add    esp,0x1c
c00160b4:	c3                   	ret    
c00160b5:	8d 76 00             	lea    esi,[esi+0x0]

c00160b8 <setupMultitasking(void (*)())>:
c00160b8:	56                   	push   esi
c00160b9:	53                   	push   ebx
c00160ba:	83 ec 04             	sub    esp,0x4
c00160bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160c1:	eb 11                	jmp    c00160d4 <setupMultitasking(void (*)())+0x1c>
c00160c3:	90                   	nop
c00160c4:	83 ec 0c             	sub    esp,0xc
c00160c7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160cc:	e8 73 9d 00 00       	call   c001fe44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160d1:	83 c4 10             	add    esp,0x10
c00160d4:	83 ec 0c             	sub    esp,0xc
c00160d7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160dc:	e8 3f 9d 00 00       	call   c001fe20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160e1:	83 c4 10             	add    esp,0x10
c00160e4:	84 c0                	test   al,al
c00160e6:	74 dc                	je     c00160c4 <setupMultitasking(void (*)())+0xc>
c00160e8:	83 ec 0c             	sub    esp,0xc
c00160eb:	68 24 07 00 00       	push   0x724
c00160f0:	e8 21 1a ff ff       	call   c0007b16 <malloc>
c00160f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00160fc:	89 c3                	mov    ebx,eax
c00160fe:	6a 00                	push   0x0
c0016100:	68 f9 2a 02 c0       	push   0xc0022af9
c0016105:	6a 01                	push   0x1
c0016107:	50                   	push   eax
c0016108:	e8 5b fc ff ff       	call   c0015d68 <Process::Process(bool, char const*, Process*, char**)>
c001610d:	83 c4 14             	add    esp,0x14
c0016110:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016116:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c001611c:	50                   	push   eax
c001611d:	e8 97 26 ff ff       	call   c00087b9 <setActiveTerminal(VgaText*)>
c0016122:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016129:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016133:	83 c8 01             	or     eax,0x1
c0016136:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001613d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016143:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016146:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016150:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016156:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001615c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016166:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016170:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001617a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016180:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001618a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016190:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001619a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00161a1:	e8 70 19 ff ff       	call   c0007b16 <malloc>
c00161a6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00161ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00161b2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00161b8:	5a                   	pop    edx
c00161b9:	59                   	pop    ecx
c00161ba:	68 f5 2a 02 c0       	push   0xc0022af5
c00161bf:	50                   	push   eax
c00161c0:	e8 7b a4 fe ff       	call   c0000640 <strcpy>
c00161c5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00161cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00161d0:	83 c4 14             	add    esp,0x14
c00161d3:	5b                   	pop    ebx
c00161d4:	5e                   	pop    esi
c00161d5:	e9 8f a0 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00161da:	66 90                	xchg   ax,ax

c00161dc <schedule()>:
c00161dc:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00161e2:	85 d2                	test   edx,edx
c00161e4:	74 0e                	je     c00161f4 <schedule()+0x18>
c00161e6:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00161f0:	c3                   	ret    
c00161f1:	8d 76 00             	lea    esi,[esi+0x0]
c00161f4:	53                   	push   ebx
c00161f5:	83 ec 14             	sub    esp,0x14
c00161f8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161fd:	e8 1e 9c 00 00       	call   c001fe20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016202:	83 c4 10             	add    esp,0x10
c0016205:	84 c0                	test   al,al
c0016207:	75 3f                	jne    c0016248 <schedule()+0x6c>
c0016209:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001620e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016211:	83 fa 01             	cmp    edx,0x1
c0016214:	74 3a                	je     c0016250 <schedule()+0x74>
c0016216:	66 90                	xchg   ax,ax
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016220:	e8 17 9c 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016225:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001622c:	89 c3                	mov    ebx,eax
c001622e:	e8 11 9c 00 00       	call   c001fe44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016233:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001623a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001623d:	e8 fe f7 ff ff       	call   c0015a40 <switchToThread(ThreadControlBlock*)>
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	8d 76 00             	lea    esi,[esi+0x0]
c0016248:	83 c4 08             	add    esp,0x8
c001624b:	5b                   	pop    ebx
c001624c:	c3                   	ret    
c001624d:	8d 76 00             	lea    esi,[esi+0x0]
c0016250:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016257:	83 ec 08             	sub    esp,0x8
c001625a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001625f:	50                   	push   eax
c0016260:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016265:	e8 96 9c 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001626a:	83 c4 10             	add    esp,0x10
c001626d:	eb a9                	jmp    c0016218 <schedule()+0x3c>
c001626f:	90                   	nop

c0016270 <Semaphore::tryAcquire()>:
c0016270:	53                   	push   ebx
c0016271:	83 ec 08             	sub    esp,0x8
c0016274:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016278:	fa                   	cli    
c0016279:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001627e:	8d 50 01             	lea    edx,[eax+0x1]
c0016281:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016287:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001628d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016290:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016296:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016299:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001629b:	7c 33                	jl     c00162d0 <Semaphore::tryAcquire()+0x60>
c001629d:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00162a3:	85 d2                	test   edx,edx
c00162a5:	75 0d                	jne    c00162b4 <Semaphore::tryAcquire()+0x44>
c00162a7:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c00162ad:	85 d2                	test   edx,edx
c00162af:	75 6f                	jne    c0016320 <Semaphore::tryAcquire()+0xb0>
c00162b1:	8d 76 00             	lea    esi,[esi+0x0]
c00162b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162b9:	85 c0                	test   eax,eax
c00162bb:	74 0b                	je     c00162c8 <Semaphore::tryAcquire()+0x58>
c00162bd:	8d 76 00             	lea    esi,[esi+0x0]
c00162c0:	31 c0                	xor    eax,eax
c00162c2:	83 c4 08             	add    esp,0x8
c00162c5:	5b                   	pop    ebx
c00162c6:	c3                   	ret    
c00162c7:	90                   	nop
c00162c8:	fb                   	sti    
c00162c9:	83 c4 08             	add    esp,0x8
c00162cc:	5b                   	pop    ebx
c00162cd:	c3                   	ret    
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	83 c3 01             	add    ebx,0x1
c00162d3:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00162d9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00162dc:	85 d2                	test   edx,edx
c00162de:	75 24                	jne    c0016304 <Semaphore::tryAcquire()+0x94>
c00162e0:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00162e6:	85 c9                	test   ecx,ecx
c00162e8:	74 1a                	je     c0016304 <Semaphore::tryAcquire()+0x94>
c00162ea:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162f4:	e8 e3 fe ff ff       	call   c00161dc <schedule()>
c00162f9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162fe:	83 e8 01             	sub    eax,0x1
c0016301:	8d 76 00             	lea    esi,[esi+0x0]
c0016304:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016309:	85 c0                	test   eax,eax
c001630b:	75 0b                	jne    c0016318 <Semaphore::tryAcquire()+0xa8>
c001630d:	fb                   	sti    
c001630e:	b0 01                	mov    al,0x1
c0016310:	83 c4 08             	add    esp,0x8
c0016313:	5b                   	pop    ebx
c0016314:	c3                   	ret    
c0016315:	8d 76 00             	lea    esi,[esi+0x0]
c0016318:	b0 01                	mov    al,0x1
c001631a:	83 c4 08             	add    esp,0x8
c001631d:	5b                   	pop    ebx
c001631e:	c3                   	ret    
c001631f:	90                   	nop
c0016320:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001632a:	e8 ad fe ff ff       	call   c00161dc <schedule()>
c001632f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016334:	83 e8 01             	sub    eax,0x1
c0016337:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001633c:	85 c0                	test   eax,eax
c001633e:	75 80                	jne    c00162c0 <Semaphore::tryAcquire()+0x50>
c0016340:	eb 86                	jmp    c00162c8 <Semaphore::tryAcquire()+0x58>
c0016342:	66 90                	xchg   ax,ax

c0016344 <Semaphore::assertLocked(char const*)>:
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001634b:	fa                   	cli    
c001634c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016352:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016357:	83 c1 01             	add    ecx,0x1
c001635a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016360:	8d 48 01             	lea    ecx,[eax+0x1]
c0016363:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016369:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001636b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001636e:	7c 28                	jl     c0016398 <Semaphore::assertLocked(char const*)+0x54>
c0016370:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016375:	85 c0                	test   eax,eax
c0016377:	75 0b                	jne    c0016384 <Semaphore::assertLocked(char const*)+0x40>
c0016379:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001637e:	85 c0                	test   eax,eax
c0016380:	75 32                	jne    c00163b4 <Semaphore::assertLocked(char const*)+0x70>
c0016382:	66 90                	xchg   ax,ax
c0016384:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016389:	83 e8 01             	sub    eax,0x1
c001638c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016391:	75 01                	jne    c0016394 <Semaphore::assertLocked(char const*)+0x50>
c0016393:	fb                   	sti    
c0016394:	83 c4 0c             	add    esp,0xc
c0016397:	c3                   	ret    
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001639f:	52                   	push   edx
c00163a0:	e8 52 b3 ff ff       	call   c00116f7 <KePanic(char const*)>
c00163a5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163aa:	83 c4 10             	add    esp,0x10
c00163ad:	83 e8 01             	sub    eax,0x1
c00163b0:	eb be                	jmp    c0016370 <Semaphore::assertLocked(char const*)+0x2c>
c00163b2:	66 90                	xchg   ax,ax
c00163b4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163be:	e8 19 fe ff ff       	call   c00161dc <schedule()>
c00163c3:	eb bf                	jmp    c0016384 <Semaphore::assertLocked(char const*)+0x40>
c00163c5:	8d 76 00             	lea    esi,[esi+0x0]

c00163c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00163c8:	83 ec 0c             	sub    esp,0xc
c00163cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163d7:	e8 00 fe ff ff       	call   c00161dc <schedule()>
c00163dc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163e1:	83 e8 01             	sub    eax,0x1
c00163e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163e9:	75 01                	jne    c00163ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00163eb:	fb                   	sti    
c00163ec:	83 c4 0c             	add    esp,0xc
c00163ef:	c3                   	ret    

c00163f0 <blockTask(TaskState)>:
c00163f0:	83 ec 0c             	sub    esp,0xc
c00163f3:	fa                   	cli    
c00163f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163fd:	83 c0 01             	add    eax,0x1
c0016400:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016405:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001640a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001640d:	e8 ca fd ff ff       	call   c00161dc <schedule()>
c0016412:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016417:	83 e8 01             	sub    eax,0x1
c001641a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001641f:	75 03                	jne    c0016424 <blockTask(TaskState)+0x34>
c0016421:	fb                   	sti    
c0016422:	66 90                	xchg   ax,ax
c0016424:	83 c4 0c             	add    esp,0xc
c0016427:	c3                   	ret    

c0016428 <waitTask(int, int*, int)>:
c0016428:	83 ec 18             	sub    esp,0x18
c001642b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016430:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016434:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016437:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001643b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016440:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016443:	6a 07                	push   0x7
c0016445:	e8 a6 ff ff ff       	call   c00163f0 <blockTask(TaskState)>
c001644a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016455:	85 d2                	test   edx,edx
c0016457:	74 0b                	je     c0016464 <waitTask(int, int*, int)+0x3c>
c0016459:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001645c:	89 02                	mov    DWORD PTR [edx],eax
c001645e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016463:	90                   	nop
c0016464:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016467:	83 c4 0c             	add    esp,0xc
c001646a:	c3                   	ret    
c001646b:	90                   	nop

c001646c <milliTenthSleepUntil(unsigned int)>:
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016473:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016479:	76 05                	jbe    c0016480 <milliTenthSleepUntil(unsigned int)+0x14>
c001647b:	90                   	nop
c001647c:	83 c4 0c             	add    esp,0xc
c001647f:	c3                   	ret    
c0016480:	fa                   	cli    
c0016481:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016487:	83 ec 08             	sub    esp,0x8
c001648a:	83 c2 01             	add    edx,0x1
c001648d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016493:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016499:	83 c1 01             	add    ecx,0x1
c001649c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00164a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00164a8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00164ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b0:	50                   	push   eax
c00164b1:	68 d8 c6 02 c0       	push   0xc002c6d8
c00164b6:	e8 45 9a 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164bb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00164c2:	e8 29 ff ff ff       	call   c00163f0 <blockTask(TaskState)>
c00164c7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164cc:	83 c4 10             	add    esp,0x10
c00164cf:	83 e8 01             	sub    eax,0x1
c00164d2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164d7:	85 c0                	test   eax,eax
c00164d9:	75 09                	jne    c00164e4 <milliTenthSleepUntil(unsigned int)+0x78>
c00164db:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164e0:	85 c0                	test   eax,eax
c00164e2:	75 14                	jne    c00164f8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00164e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164e9:	83 e8 01             	sub    eax,0x1
c00164ec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164f1:	75 89                	jne    c001647c <milliTenthSleepUntil(unsigned int)+0x10>
c00164f3:	fb                   	sti    
c00164f4:	83 c4 0c             	add    esp,0xc
c00164f7:	c3                   	ret    
c00164f8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016502:	e8 d5 fc ff ff       	call   c00161dc <schedule()>
c0016507:	eb db                	jmp    c00164e4 <milliTenthSleepUntil(unsigned int)+0x78>
c0016509:	8d 76 00             	lea    esi,[esi+0x0]

c001650c <milliTenthSleep(unsigned int)>:
c001650c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016510:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016515:	01 c2                	add    edx,eax
c0016517:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001651b:	e9 4c ff ff ff       	jmp    c001646c <milliTenthSleepUntil(unsigned int)>

c0016520 <sleep(unsigned int)>:
c0016520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016524:	8d 04 80             	lea    eax,[eax+eax*4]
c0016527:	8d 04 80             	lea    eax,[eax+eax*4]
c001652a:	8d 04 80             	lea    eax,[eax+eax*4]
c001652d:	8d 04 80             	lea    eax,[eax+eax*4]
c0016530:	c1 e0 04             	shl    eax,0x4
c0016533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016537:	eb d3                	jmp    c001650c <milliTenthSleep(unsigned int)>
c0016539:	90                   	nop
c001653a:	66 90                	xchg   ax,ax

c001653c <Semaphore::acquire()>:
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016543:	fa                   	cli    
c0016544:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016549:	83 c0 01             	add    eax,0x1
c001654c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016551:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016556:	8d 48 01             	lea    ecx,[eax+0x1]
c0016559:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001655f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016562:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016564:	7d 2e                	jge    c0016594 <Semaphore::acquire()+0x58>
c0016566:	83 c1 01             	add    ecx,0x1
c0016569:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001656c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016571:	85 c0                	test   eax,eax
c0016573:	75 0b                	jne    c0016580 <Semaphore::acquire()+0x44>
c0016575:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001657a:	85 c0                	test   eax,eax
c001657c:	75 66                	jne    c00165e4 <Semaphore::acquire()+0xa8>
c001657e:	66 90                	xchg   ax,ax
c0016580:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016585:	83 e8 01             	sub    eax,0x1
c0016588:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001658d:	75 01                	jne    c0016590 <Semaphore::acquire()+0x54>
c001658f:	fb                   	sti    
c0016590:	83 c4 0c             	add    esp,0xc
c0016593:	c3                   	ret    
c0016594:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016599:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00165a0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00165a3:	85 c9                	test   ecx,ecx
c00165a5:	74 51                	je     c00165f8 <Semaphore::acquire()+0xbc>
c00165a7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00165aa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165b0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00165b3:	90                   	nop
c00165b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165b9:	83 ec 0c             	sub    esp,0xc
c00165bc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00165bf:	68 78 2b 02 c0       	push   0xc0022b78
c00165c4:	e8 dc 43 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00165c9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00165d0:	e8 1b fe ff ff       	call   c00163f0 <blockTask(TaskState)>
c00165d5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00165da:	83 c4 10             	add    esp,0x10
c00165dd:	83 e8 01             	sub    eax,0x1
c00165e0:	eb 8a                	jmp    c001656c <Semaphore::acquire()+0x30>
c00165e2:	66 90                	xchg   ax,ax
c00165e4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00165ee:	e8 e9 fb ff ff       	call   c00161dc <schedule()>
c00165f3:	eb 8b                	jmp    c0016580 <Semaphore::acquire()+0x44>
c00165f5:	8d 76 00             	lea    esi,[esi+0x0]
c00165f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016600:	eb b2                	jmp    c00165b4 <Semaphore::acquire()+0x78>
c0016602:	66 90                	xchg   ax,ax

c0016604 <taskReturned>:
c0016604:	83 ec 18             	sub    esp,0x18
c0016607:	68 98 2b 02 c0       	push   0xc0022b98
c001660c:	e8 e6 b0 ff ff       	call   c00116f7 <KePanic(char const*)>
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	6a 02                	push   0x2
c0016619:	e8 d2 fd ff ff       	call   c00163f0 <blockTask(TaskState)>
c001661e:	fa                   	cli    
c001661f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016624:	83 c0 01             	add    eax,0x1
c0016627:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001662c:	e8 ab fb ff ff       	call   c00161dc <schedule()>
c0016631:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	83 e8 01             	sub    eax,0x1
c001663c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016641:	85 c0                	test   eax,eax
c0016643:	75 cf                	jne    c0016614 <taskReturned+0x10>
c0016645:	fb                   	sti    
c0016646:	eb cc                	jmp    c0016614 <taskReturned+0x10>

c0016648 <Thr::processFromPID(int)>:
c0016648:	57                   	push   edi
c0016649:	56                   	push   esi
c001664a:	53                   	push   ebx
c001664b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001664f:	fa                   	cli    
c0016650:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016656:	83 ec 0c             	sub    esp,0xc
c0016659:	83 c1 01             	add    ecx,0x1
c001665c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016661:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016667:	e8 d0 97 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001666c:	83 c4 10             	add    esp,0x10
c001666f:	89 c7                	mov    edi,eax
c0016671:	eb 15                	jmp    c0016688 <Thr::processFromPID(int)+0x40>
c0016673:	90                   	nop
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	68 e4 c6 02 c0       	push   0xc002c6e4
c001667c:	e8 bb 97 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	39 f8                	cmp    eax,edi
c0016686:	74 50                	je     c00166d8 <Thr::processFromPID(int)+0x90>
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016690:	e8 a7 97 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016695:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001669c:	89 c3                	mov    ebx,eax
c001669e:	e8 a1 97 00 00       	call   c001fe44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166a3:	58                   	pop    eax
c00166a4:	5a                   	pop    edx
c00166a5:	53                   	push   ebx
c00166a6:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166ab:	e8 50 98 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	39 30                	cmp    DWORD PTR [eax],esi
c00166b8:	75 ba                	jne    c0016674 <Thr::processFromPID(int)+0x2c>
c00166ba:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166bf:	83 e8 01             	sub    eax,0x1
c00166c2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166c7:	74 0b                	je     c00166d4 <Thr::processFromPID(int)+0x8c>
c00166c9:	8d 76 00             	lea    esi,[esi+0x0]
c00166cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166cf:	5b                   	pop    ebx
c00166d0:	5e                   	pop    esi
c00166d1:	5f                   	pop    edi
c00166d2:	c3                   	ret    
c00166d3:	90                   	nop
c00166d4:	fb                   	sti    
c00166d5:	eb f5                	jmp    c00166cc <Thr::processFromPID(int)+0x84>
c00166d7:	90                   	nop
c00166d8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166dd:	83 e8 01             	sub    eax,0x1
c00166e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166e5:	75 05                	jne    c00166ec <Thr::processFromPID(int)+0xa4>
c00166e7:	fb                   	sti    
c00166e8:	5b                   	pop    ebx
c00166e9:	5e                   	pop    esi
c00166ea:	5f                   	pop    edi
c00166eb:	c3                   	ret    
c00166ec:	5b                   	pop    ebx
c00166ed:	31 c0                	xor    eax,eax
c00166ef:	5e                   	pop    esi
c00166f0:	5f                   	pop    edi
c00166f1:	c3                   	ret    
c00166f2:	66 90                	xchg   ax,ax

c00166f4 <unblockTask(ThreadControlBlock*)>:
c00166f4:	53                   	push   ebx
c00166f5:	83 ec 08             	sub    esp,0x8
c00166f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166fc:	fa                   	cli    
c00166fd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016702:	83 c0 01             	add    eax,0x1
c0016705:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001670a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001670d:	85 c0                	test   eax,eax
c001670f:	74 67                	je     c0016778 <unblockTask(ThreadControlBlock*)+0x84>
c0016711:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016714:	83 f8 01             	cmp    eax,0x1
c0016717:	74 37                	je     c0016750 <unblockTask(ThreadControlBlock*)+0x5c>
c0016719:	83 ec 0c             	sub    esp,0xc
c001671c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016721:	e8 16 97 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016726:	83 c4 10             	add    esp,0x10
c0016729:	85 c0                	test   eax,eax
c001672b:	75 1b                	jne    c0016748 <unblockTask(ThreadControlBlock*)+0x54>
c001672d:	eb 5d                	jmp    c001678c <unblockTask(ThreadControlBlock*)+0x98>
c001672f:	90                   	nop
c0016730:	83 ec 08             	sub    esp,0x8
c0016733:	50                   	push   eax
c0016734:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016739:	e8 1e 9a 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001673e:	83 c4 10             	add    esp,0x10
c0016741:	85 c0                	test   eax,eax
c0016743:	74 47                	je     c001678c <unblockTask(ThreadControlBlock*)+0x98>
c0016745:	8d 76 00             	lea    esi,[esi+0x0]
c0016748:	39 c3                	cmp    ebx,eax
c001674a:	75 e4                	jne    c0016730 <unblockTask(ThreadControlBlock*)+0x3c>
c001674c:	eb 12                	jmp    c0016760 <unblockTask(ThreadControlBlock*)+0x6c>
c001674e:	66 90                	xchg   ax,ax
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	68 17 2b 02 c0       	push   0xc0022b17
c0016758:	e8 48 42 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016765:	83 e8 01             	sub    eax,0x1
c0016768:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001676d:	75 01                	jne    c0016770 <unblockTask(ThreadControlBlock*)+0x7c>
c001676f:	fb                   	sti    
c0016770:	83 c4 08             	add    esp,0x8
c0016773:	5b                   	pop    ebx
c0016774:	c3                   	ret    
c0016775:	8d 76 00             	lea    esi,[esi+0x0]
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	68 00 2b 02 c0       	push   0xc0022b00
c0016780:	e8 20 42 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	eb d6                	jmp    c0016760 <unblockTask(ThreadControlBlock*)+0x6c>
c001678a:	66 90                	xchg   ax,ax
c001678c:	83 ec 08             	sub    esp,0x8
c001678f:	53                   	push   ebx
c0016790:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016795:	e8 66 97 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001679a:	83 c4 10             	add    esp,0x10
c001679d:	eb c1                	jmp    c0016760 <unblockTask(ThreadControlBlock*)+0x6c>
c001679f:	90                   	nop

c00167a0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00167a0:	55                   	push   ebp
c00167a1:	57                   	push   edi
c00167a2:	56                   	push   esi
c00167a3:	53                   	push   ebx
c00167a4:	83 ec 1c             	sub    esp,0x1c
c00167a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00167ab:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167ae:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00167b4:	85 ed                	test   ebp,ebp
c00167b6:	7e 28                	jle    c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00167b8:	31 f6                	xor    esi,esi
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00167c6:	83 c6 01             	add    esi,0x1
c00167c9:	57                   	push   edi
c00167ca:	e8 57 13 ff ff       	call   c0007b26 <free>
c00167cf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167d2:	83 c4 10             	add    esp,0x10
c00167d5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00167db:	7f df                	jg     c00167bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00167dd:	8d 76 00             	lea    esi,[esi+0x0]
c00167e0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00167ea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00167ef:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00167f2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00167f5:	d3 c0                	rol    eax,cl
c00167f7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00167fe:	21 c8                	and    eax,ecx
c0016800:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016807:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001680a:	89 f7                	mov    edi,esi
c001680c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016814:	0f 85 72 01 00 00    	jne    c001698c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001681a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016820:	85 ed                	test   ebp,ebp
c0016822:	74 1c                	je     c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016824:	83 ec 0c             	sub    esp,0xc
c0016827:	55                   	push   ebp
c0016828:	e8 db ab ff ff       	call   c0011408 <EnvVarContainer::~EnvVarContainer()>
c001682d:	59                   	pop    ecx
c001682e:	5e                   	pop    esi
c001682f:	6a 0c                	push   0xc
c0016831:	55                   	push   ebp
c0016832:	e8 41 40 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0016837:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001683a:	83 c4 10             	add    esp,0x10
c001683d:	89 f7                	mov    edi,esi
c001683f:	90                   	nop
c0016840:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016846:	85 c0                	test   eax,eax
c0016848:	0f 84 b2 00 00 00    	je     c0016900 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001684e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016851:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016855:	31 c9                	xor    ecx,ecx
c0016857:	eb 17                	jmp    c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016859:	8d 76 00             	lea    esi,[esi+0x0]
c001685c:	83 c1 01             	add    ecx,0x1
c001685f:	83 f9 10             	cmp    ecx,0x10
c0016862:	0f 84 98 00 00 00    	je     c0016900 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016868:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001686e:	66 90                	xchg   ax,ax
c0016870:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016877:	d3 fa                	sar    edx,cl
c0016879:	80 e2 01             	and    dl,0x1
c001687c:	74 de                	je     c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001687e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016881:	01 d2                	add    edx,edx
c0016883:	01 ca                	add    edx,ecx
c0016885:	8d 14 92             	lea    edx,[edx+edx*4]
c0016888:	01 d0                	add    eax,edx
c001688a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016890:	83 fd 07             	cmp    ebp,0x7
c0016893:	75 c7                	jne    c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016895:	05 40 02 00 00       	add    eax,0x240
c001689a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001689d:	83 fd ff             	cmp    ebp,0xffffffff
c00168a0:	0f 8c ee 00 00 00    	jl     c0016994 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00168a6:	0f 84 ac 01 00 00    	je     c0016a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00168ac:	85 ed                	test   ebp,ebp
c00168ae:	0f 84 90 01 00 00    	je     c0016a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00168b4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00168b6:	75 a4                	jne    c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00168be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168c2:	01 d0                	add    eax,edx
c00168c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00168c8:	83 ec 0c             	sub    esp,0xc
c00168cb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00168d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00168da:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00168e1:	50                   	push   eax
c00168e2:	e8 0d fe ff ff       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c00168e7:	83 c4 10             	add    esp,0x10
c00168ea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168f1:	89 f7                	mov    edi,esi
c00168f3:	83 c1 01             	add    ecx,0x1
c00168f6:	83 f9 10             	cmp    ecx,0x10
c00168f9:	0f 85 69 ff ff ff    	jne    c0016868 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00168ff:	90                   	nop
c0016900:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016906:	85 c0                	test   eax,eax
c0016908:	74 62                	je     c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001690a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016910:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016916:	74 54                	je     c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016920:	e8 17 95 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016925:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001692c:	89 c7                	mov    edi,eax
c001692e:	e8 ed 94 00 00       	call   c001fe20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	84 c0                	test   al,al
c0016938:	0f 84 ce 00 00 00    	je     c0016a0c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001693e:	66 90                	xchg   ax,ax
c0016940:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016943:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016949:	85 d2                	test   edx,edx
c001694b:	74 0f                	je     c001695c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001694d:	83 ec 0c             	sub    esp,0xc
c0016950:	8b 02                	mov    eax,DWORD PTR [edx]
c0016952:	52                   	push   edx
c0016953:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016956:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016966:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016969:	8d 76 00             	lea    esi,[esi+0x0]
c001696c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016972:	85 db                	test   ebx,ebx
c0016974:	74 16                	je     c001698c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016976:	83 ec 0c             	sub    esp,0xc
c0016979:	53                   	push   ebx
c001697a:	e8 93 32 ff ff       	call   c0009c12 <VAS::~VAS()>
c001697f:	58                   	pop    eax
c0016980:	5a                   	pop    edx
c0016981:	6a 14                	push   0x14
c0016983:	53                   	push   ebx
c0016984:	e8 ef 3e ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	83 c4 1c             	add    esp,0x1c
c001698f:	5b                   	pop    ebx
c0016990:	5e                   	pop    esi
c0016991:	5f                   	pop    edi
c0016992:	5d                   	pop    ebp
c0016993:	c3                   	ret    
c0016994:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016998:	83 ec 0c             	sub    esp,0xc
c001699b:	68 cc 2b 02 c0       	push   0xc0022bcc
c00169a0:	e8 52 ad ff ff       	call   c00116f7 <KePanic(char const*)>
c00169a5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00169a8:	83 c4 10             	add    esp,0x10
c00169ab:	89 f7                	mov    edi,esi
c00169ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169b1:	e9 a6 fe ff ff       	jmp    c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00169b6:	66 90                	xchg   ax,ax
c00169b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169be:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00169c4:	75 1e                	jne    c00169e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169c6:	83 ec 0c             	sub    esp,0xc
c00169c9:	68 34 2c 02 c0       	push   0xc0022c34
c00169ce:	e8 d2 3f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00169d3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00169da:	e8 11 fa ff ff       	call   c00163f0 <blockTask(TaskState)>
c00169df:	83 c4 10             	add    esp,0x10
c00169e2:	66 90                	xchg   ax,ax
c00169e4:	83 ec 08             	sub    esp,0x8
c00169e7:	56                   	push   esi
c00169e8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00169ed:	e8 0e 95 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169f2:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169f9:	e8 3e 94 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	39 f8                	cmp    eax,edi
c0016a03:	0f 84 37 ff ff ff    	je     c0016940 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016a09:	8d 76 00             	lea    esi,[esi+0x0]
c0016a0c:	83 ec 0c             	sub    esp,0xc
c0016a0f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016a14:	e8 23 94 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a19:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016a20:	89 c6                	mov    esi,eax
c0016a22:	e8 1d 94 00 00       	call   c001fe44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	39 f3                	cmp    ebx,esi
c0016a2c:	74 b6                	je     c00169e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016a2e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016a31:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a34:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016a3a:	75 a8                	jne    c00169e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016a3c:	e9 77 ff ff ff       	jmp    c00169b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016a41:	8d 76 00             	lea    esi,[esi+0x0]
c0016a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a48:	83 ec 0c             	sub    esp,0xc
c0016a4b:	68 00 2c 02 c0       	push   0xc0022c00
c0016a50:	e9 4b ff ff ff       	jmp    c00169a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016a55:	8d 76 00             	lea    esi,[esi+0x0]
c0016a58:	8b 36                	mov    esi,DWORD PTR [esi]
c0016a5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a5e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016a61:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a64:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016a6a:	01 d7                	add    edi,edx
c0016a6c:	89 f8                	mov    eax,edi
c0016a6e:	e9 51 fe ff ff       	jmp    c00168c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016a73:	90                   	nop

c0016a74 <cleanerTaskFunction(void*)>:
c0016a74:	53                   	push   ebx
c0016a75:	83 ec 08             	sub    esp,0x8
c0016a78:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a7d:	83 e8 01             	sub    eax,0x1
c0016a80:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a85:	75 01                	jne    c0016a88 <cleanerTaskFunction(void*)+0x14>
c0016a87:	fb                   	sti    
c0016a88:	fa                   	cli    
c0016a89:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a8e:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a95:	8d 50 01             	lea    edx,[eax+0x1]
c0016a98:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a9e:	0f 84 c4 00 00 00    	je     c0016b68 <cleanerTaskFunction(void*)+0xf4>
c0016aa4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa9:	85 c0                	test   eax,eax
c0016aab:	75 03                	jne    c0016ab0 <cleanerTaskFunction(void*)+0x3c>
c0016aad:	fb                   	sti    
c0016aae:	66 90                	xchg   ax,ax
c0016ab0:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016ab7:	fa                   	cli    
c0016ab8:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016abe:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016ac4:	83 c2 01             	add    edx,0x1
c0016ac7:	83 c1 01             	add    ecx,0x1
c0016aca:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016ad0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016ad6:	fa                   	cli    
c0016ad7:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016add:	83 c3 01             	add    ebx,0x1
c0016ae0:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016ae6:	eb 28                	jmp    c0016b10 <cleanerTaskFunction(void*)+0x9c>
c0016ae8:	83 ec 0c             	sub    esp,0xc
c0016aeb:	68 cc c6 02 c0       	push   0xc002c6cc
c0016af0:	e8 47 93 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016af5:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016afc:	89 c3                	mov    ebx,eax
c0016afe:	e8 41 93 00 00       	call   c001fe44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016b03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b06:	e8 95 fc ff ff       	call   c00167a0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	66 90                	xchg   ax,ax
c0016b10:	83 ec 0c             	sub    esp,0xc
c0016b13:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b18:	e8 03 93 00 00       	call   c001fe20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016b1d:	83 c4 10             	add    esp,0x10
c0016b20:	84 c0                	test   al,al
c0016b22:	74 c4                	je     c0016ae8 <cleanerTaskFunction(void*)+0x74>
c0016b24:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b29:	83 e8 01             	sub    eax,0x1
c0016b2c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b31:	75 01                	jne    c0016b34 <cleanerTaskFunction(void*)+0xc0>
c0016b33:	fb                   	sti    
c0016b34:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b39:	83 e8 01             	sub    eax,0x1
c0016b3c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b41:	0f 85 31 ff ff ff    	jne    c0016a78 <cleanerTaskFunction(void*)+0x4>
c0016b47:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b4c:	85 c0                	test   eax,eax
c0016b4e:	0f 84 24 ff ff ff    	je     c0016a78 <cleanerTaskFunction(void*)+0x4>
c0016b54:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b5e:	e8 79 f6 ff ff       	call   c00161dc <schedule()>
c0016b63:	e9 10 ff ff ff       	jmp    c0016a78 <cleanerTaskFunction(void*)+0x4>
c0016b68:	83 ec 0c             	sub    esp,0xc
c0016b6b:	6a 02                	push   0x2
c0016b6d:	e8 56 f8 ff ff       	call   c00163c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	e9 36 ff ff ff       	jmp    c0016ab0 <cleanerTaskFunction(void*)+0x3c>
c0016b7a:	66 90                	xchg   ax,ax

c0016b7c <terminateTask(int)>:
c0016b7c:	83 ec 14             	sub    esp,0x14
c0016b7f:	fa                   	cli    
c0016b80:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016b86:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016b8c:	83 c2 01             	add    edx,0x1
c0016b8f:	83 c1 01             	add    ecx,0x1
c0016b92:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b98:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b9e:	fa                   	cli    
c0016b9f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ba4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ba8:	83 c0 01             	add    eax,0x1
c0016bab:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bb5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016bb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bbd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016bc0:	50                   	push   eax
c0016bc1:	68 cc c6 02 c0       	push   0xc002c6cc
c0016bc6:	e8 35 93 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bd0:	83 c4 10             	add    esp,0x10
c0016bd3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016bda:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016bdf:	85 c0                	test   eax,eax
c0016be1:	74 65                	je     c0016c48 <terminateTask(int)+0xcc>
c0016be3:	83 ec 0c             	sub    esp,0xc
c0016be6:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016bed:	50                   	push   eax
c0016bee:	e8 01 fb ff ff       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	66 90                	xchg   ax,ax
c0016bf8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bfd:	83 e8 01             	sub    eax,0x1
c0016c00:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c05:	75 01                	jne    c0016c08 <terminateTask(int)+0x8c>
c0016c07:	fb                   	sti    
c0016c08:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c0d:	83 e8 01             	sub    eax,0x1
c0016c10:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c15:	75 09                	jne    c0016c20 <terminateTask(int)+0xa4>
c0016c17:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016c1e:	75 3c                	jne    c0016c5c <terminateTask(int)+0xe0>
c0016c20:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c25:	83 e8 01             	sub    eax,0x1
c0016c28:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c2d:	75 01                	jne    c0016c30 <terminateTask(int)+0xb4>
c0016c2f:	fb                   	sti    
c0016c30:	fa                   	cli    
c0016c31:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c36:	83 c0 01             	add    eax,0x1
c0016c39:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c3e:	66 90                	xchg   ax,ax
c0016c40:	e8 97 f5 ff ff       	call   c00161dc <schedule()>
c0016c45:	eb d9                	jmp    c0016c20 <terminateTask(int)+0xa4>
c0016c47:	90                   	nop
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	68 2e 2b 02 c0       	push   0xc0022b2e
c0016c50:	e8 50 3d ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0016c55:	83 c4 10             	add    esp,0x10
c0016c58:	eb 9e                	jmp    c0016bf8 <terminateTask(int)+0x7c>
c0016c5a:	66 90                	xchg   ax,ax
c0016c5c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c66:	eb d8                	jmp    c0016c40 <terminateTask(int)+0xc4>

c0016c68 <Thr::terminateFromIRQ(int)>:
c0016c68:	83 ec 18             	sub    esp,0x18
c0016c6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c6f:	50                   	push   eax
c0016c70:	e8 07 ff ff ff       	call   c0016b7c <terminateTask(int)>
c0016c75:	90                   	nop
c0016c76:	66 90                	xchg   ax,ax

c0016c78 <Semaphore::release()>:
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c7f:	fa                   	cli    
c0016c80:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c85:	83 c0 01             	add    eax,0x1
c0016c88:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c8d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c92:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c95:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c9b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c9e:	85 c9                	test   ecx,ecx
c0016ca0:	74 42                	je     c0016ce4 <Semaphore::release()+0x6c>
c0016ca2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016ca5:	83 ec 0c             	sub    esp,0xc
c0016ca8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016cab:	51                   	push   ecx
c0016cac:	e8 43 fa ff ff       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c0016cb1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016cb6:	83 c4 10             	add    esp,0x10
c0016cb9:	83 e8 01             	sub    eax,0x1
c0016cbc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016cc1:	85 c0                	test   eax,eax
c0016cc3:	75 0b                	jne    c0016cd0 <Semaphore::release()+0x58>
c0016cc5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016cca:	85 c0                	test   eax,eax
c0016ccc:	75 22                	jne    c0016cf0 <Semaphore::release()+0x78>
c0016cce:	66 90                	xchg   ax,ax
c0016cd0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016cd5:	83 e8 01             	sub    eax,0x1
c0016cd8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016cdd:	75 01                	jne    c0016ce0 <Semaphore::release()+0x68>
c0016cdf:	fb                   	sti    
c0016ce0:	83 c4 0c             	add    esp,0xc
c0016ce3:	c3                   	ret    
c0016ce4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016ce7:	83 e9 01             	sub    ecx,0x1
c0016cea:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016ced:	eb cd                	jmp    c0016cbc <Semaphore::release()+0x44>
c0016cef:	90                   	nop
c0016cf0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016cfa:	e8 dd f4 ff ff       	call   c00161dc <schedule()>
c0016cff:	eb cf                	jmp    c0016cd0 <Semaphore::release()+0x58>
c0016d01:	8d 76 00             	lea    esi,[esi+0x0]

c0016d04 <__static_initialization_and_destruction_0(int, int)>:
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016d0c:	0f 85 8e 00 00 00    	jne    c0016da0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016d12:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016d1a:	0f 85 80 00 00 00    	jne    c0016da0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016d20:	83 ec 0c             	sub    esp,0xc
c0016d23:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016d28:	e8 87 94 00 00       	call   c00201b4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d2d:	83 c4 10             	add    esp,0x10
c0016d30:	83 ec 04             	sub    esp,0x4
c0016d33:	68 04 38 02 c0       	push   0xc0023804
c0016d38:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016d3d:	68 64 01 02 c0       	push   0xc0020164
c0016d42:	e8 e1 3a ff ff       	call   c000a828 <__cxa_atexit>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d52:	e8 5d 94 00 00       	call   c00201b4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	83 ec 04             	sub    esp,0x4
c0016d5d:	68 04 38 02 c0       	push   0xc0023804
c0016d62:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d67:	68 64 01 02 c0       	push   0xc0020164
c0016d6c:	e8 b7 3a ff ff       	call   c000a828 <__cxa_atexit>
c0016d71:	83 c4 10             	add    esp,0x10
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d7c:	e8 33 94 00 00       	call   c00201b4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	83 ec 04             	sub    esp,0x4
c0016d87:	68 04 38 02 c0       	push   0xc0023804
c0016d8c:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d91:	68 64 01 02 c0       	push   0xc0020164
c0016d96:	e8 8d 3a ff ff       	call   c000a828 <__cxa_atexit>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	66 90                	xchg   ax,ax
c0016da0:	90                   	nop
c0016da1:	83 c4 0c             	add    esp,0xc
c0016da4:	c3                   	ret    
c0016da5:	8d 76 00             	lea    esi,[esi+0x0]

c0016da8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016da8:	83 ec 0c             	sub    esp,0xc
c0016dab:	83 ec 08             	sub    esp,0x8
c0016dae:	68 ff ff 00 00       	push   0xffff
c0016db3:	6a 01                	push   0x1
c0016db5:	e8 4a ff ff ff       	call   c0016d04 <__static_initialization_and_destruction_0(int, int)>
c0016dba:	83 c4 10             	add    esp,0x10
c0016dbd:	83 c4 0c             	add    esp,0xc
c0016dc0:	c3                   	ret    

c0016dc1 <Vm::inbv(unsigned short)>:
c0016dc1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016dc5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016dca:	75 06                	jne    c0016dd2 <Vm::inbv(unsigned short)+0x11>
c0016dcc:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016dd1:	c3                   	ret    
c0016dd2:	ec                   	in     al,dx
c0016dd3:	c3                   	ret    

c0016dd4 <Vm::outbv(unsigned short, unsigned char)>:
c0016dd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ddc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016de1:	75 25                	jne    c0016e08 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016de3:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016de9:	8d 51 01             	lea    edx,[ecx+0x1]
c0016dec:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016df2:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016df8:	83 fa 20             	cmp    edx,0x20
c0016dfb:	75 0c                	jne    c0016e09 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016dfd:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016e07:	c3                   	ret    
c0016e08:	ee                   	out    dx,al
c0016e09:	c3                   	ret    

c0016e0a <Vm::realToLinear(unsigned short, unsigned short)>:
c0016e0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e14:	c1 e0 04             	shl    eax,0x4
c0016e17:	01 d0                	add    eax,edx
c0016e19:	c3                   	ret    

c0016e1a <Vm::getSegment(unsigned int)>:
c0016e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e1e:	c1 e8 10             	shr    eax,0x10
c0016e21:	c3                   	ret    

c0016e22 <Vm::getOffset(unsigned int)>:
c0016e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e26:	c3                   	ret    

c0016e27 <Vm::mainloop2()>:
c0016e27:	83 ec 18             	sub    esp,0x18
c0016e2a:	fa                   	cli    
c0016e2b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e31:	6a 02                	push   0x2
c0016e33:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016e3a:	e8 89 f5 ff ff       	call   c00163c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e44:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016e48:	52                   	push   edx
c0016e49:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016e4d:	52                   	push   edx
c0016e4e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016e52:	52                   	push   edx
c0016e53:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016e57:	50                   	push   eax
c0016e58:	e8 b2 93 fe ff       	call   c000020f <goToVM86>
c0016e5d:	83 c4 2c             	add    esp,0x2c
c0016e60:	c3                   	ret    

c0016e61 <Vm::mainVm8086Loop(void*)>:
c0016e61:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e66:	48                   	dec    eax
c0016e67:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e6c:	75 01                	jne    c0016e6f <Vm::mainVm8086Loop(void*)+0xe>
c0016e6e:	fb                   	sti    
c0016e6f:	eb b6                	jmp    c0016e27 <Vm::mainloop2()>

c0016e71 <Vm::mainloop3(unsigned long)>:
c0016e71:	83 ec 18             	sub    esp,0x18
c0016e74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e78:	fa                   	cli    
c0016e79:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e7f:	6a 02                	push   0x2
c0016e81:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016e88:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016e8d:	e8 36 f5 ff ff       	call   c00163c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e92:	83 c4 1c             	add    esp,0x1c
c0016e95:	eb 90                	jmp    c0016e27 <Vm::mainloop2()>

c0016e97 <Vm::initialise8086()>:
c0016e97:	83 ec 0c             	sub    esp,0xc
c0016e9a:	68 80 00 00 00       	push   0x80
c0016e9f:	6a 00                	push   0x0
c0016ea1:	68 61 6e 01 c0       	push   0xc0016e61
c0016ea6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016eac:	e8 db f0 ff ff       	call   c0015f8c <Process::createThread(void (*)(void*), void*, int)>
c0016eb1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016eb8:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016ebd:	68 00 01 00 00       	push   0x100
c0016ec2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016ec7:	6a 00                	push   0x0
c0016ec9:	6a 00                	push   0x0
c0016ecb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ed1:	e8 a4 30 ff ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ed6:	83 c4 2c             	add    esp,0x2c
c0016ed9:	c3                   	ret    

c0016eda <Vm::finish8086()>:
c0016eda:	53                   	push   ebx
c0016edb:	83 ec 08             	sub    esp,0x8
c0016ede:	fa                   	cli    
c0016edf:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ee5:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016eec:	75 15                	jne    c0016f03 <Vm::finish8086()+0x29>
c0016eee:	e8 e9 f2 ff ff       	call   c00161dc <schedule()>
c0016ef3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ef8:	48                   	dec    eax
c0016ef9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016efe:	75 de                	jne    c0016ede <Vm::finish8086()+0x4>
c0016f00:	fb                   	sti    
c0016f01:	eb db                	jmp    c0016ede <Vm::finish8086()+0x4>
c0016f03:	83 ec 0c             	sub    esp,0xc
c0016f06:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016f0c:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f12:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016f19:	e8 d6 f7 ff ff       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c0016f1e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f23:	83 c4 10             	add    esp,0x10
c0016f26:	8d 50 ff             	lea    edx,[eax-0x1]
c0016f29:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016f2f:	85 d2                	test   edx,edx
c0016f31:	75 01                	jne    c0016f34 <Vm::finish8086()+0x5a>
c0016f33:	fb                   	sti    
c0016f34:	89 d8                	mov    eax,ebx
c0016f36:	83 c4 08             	add    esp,0x8
c0016f39:	5b                   	pop    ebx
c0016f3a:	c3                   	ret    

c0016f3b <Vm::getOutput8086(unsigned char*)>:
c0016f3b:	57                   	push   edi
c0016f3c:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016f42:	56                   	push   esi
c0016f43:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016f48:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016f4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f4e:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016f53:	5e                   	pop    esi
c0016f54:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f5e:	5f                   	pop    edi
c0016f5f:	c3                   	ret    

c0016f60 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f60:	55                   	push   ebp
c0016f61:	57                   	push   edi
c0016f62:	56                   	push   esi
c0016f63:	53                   	push   ebx
c0016f64:	83 ec 0c             	sub    esp,0xc
c0016f67:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016f6b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016f6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016f77:	fa                   	cli    
c0016f78:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f7e:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016f85:	75 15                	jne    c0016f9c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016f87:	e8 50 f2 ff ff       	call   c00161dc <schedule()>
c0016f8c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f91:	48                   	dec    eax
c0016f92:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f97:	75 de                	jne    c0016f77 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f99:	fb                   	sti    
c0016f9a:	eb db                	jmp    c0016f77 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f9c:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016fa1:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016fab:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016faf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016fb3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016fb7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016fbb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fbf:	0f b7 ff             	movzx  edi,di
c0016fc2:	0f b7 f6             	movzx  esi,si
c0016fc5:	50                   	push   eax
c0016fc6:	6a 20                	push   0x20
c0016fc8:	6a 00                	push   0x0
c0016fca:	68 40 c7 02 c0       	push   0xc002c740
c0016fcf:	e8 1c 95 fe ff       	call   c00004f0 <memset>
c0016fd4:	5a                   	pop    edx
c0016fd5:	59                   	pop    ecx
c0016fd6:	57                   	push   edi
c0016fd7:	56                   	push   esi
c0016fd8:	e8 2d fe ff ff       	call   c0016e0a <Vm::realToLinear(unsigned short, unsigned short)>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	89 c7                	mov    edi,eax
c0016fe2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016fe6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016fea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ff1:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016ff8:	48                   	dec    eax
c0016ff9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ffe:	75 01                	jne    c0017001 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0017000:	fb                   	sti    
c0017001:	83 ec 0c             	sub    esp,0xc
c0017004:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c001700a:	e8 e5 f6 ff ff       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c001700f:	83 c4 1c             	add    esp,0x1c
c0017012:	b0 01                	mov    al,0x1
c0017014:	5b                   	pop    ebx
c0017015:	5e                   	pop    esi
c0017016:	5f                   	pop    edi
c0017017:	5d                   	pop    ebp
c0017018:	c3                   	ret    

c0017019 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017019:	55                   	push   ebp
c001701a:	57                   	push   edi
c001701b:	56                   	push   esi
c001701c:	53                   	push   ebx
c001701d:	83 ec 34             	sub    esp,0x34
c0017020:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017024:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017028:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001702c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0017030:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017034:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017038:	68 5c 2c 02 c0       	push   0xc0022c5c
c001703d:	e8 63 39 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017042:	83 c4 10             	add    esp,0x10
c0017045:	fa                   	cli    
c0017046:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001704c:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0017052:	84 db                	test   bl,bl
c0017054:	75 15                	jne    c001706b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0017056:	e8 81 f1 ff ff       	call   c00161dc <schedule()>
c001705b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017060:	48                   	dec    eax
c0017061:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017066:	75 dd                	jne    c0017045 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0017068:	fb                   	sti    
c0017069:	eb da                	jmp    c0017045 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001706b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001706f:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0017074:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c001707e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017082:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0017086:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001708a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001708e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017092:	50                   	push   eax
c0017093:	6a 20                	push   0x20
c0017095:	6a 00                	push   0x0
c0017097:	68 40 c7 02 c0       	push   0xc002c740
c001709c:	e8 4f 94 fe ff       	call   c00004f0 <memset>
c00170a1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00170a8:	e8 69 0a ff ff       	call   c0007b16 <malloc>
c00170ad:	83 c4 0c             	add    esp,0xc
c00170b0:	89 c5                	mov    ebp,eax
c00170b2:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00170b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170bc:	50                   	push   eax
c00170bd:	e8 ea 4a ff ff       	call   c000bbac <File::File(char const*, Process*)>
c00170c2:	83 c4 10             	add    esp,0x10
c00170c5:	85 ed                	test   ebp,ebp
c00170c7:	75 0a                	jne    c00170d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00170c9:	83 ec 0c             	sub    esp,0xc
c00170cc:	68 7e 2c 02 c0       	push   0xc0022c7e
c00170d1:	eb 2b                	jmp    c00170fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00170d3:	50                   	push   eax
c00170d4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00170d8:	50                   	push   eax
c00170d9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170dd:	50                   	push   eax
c00170de:	55                   	push   ebp
c00170df:	e8 e8 4d ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c00170e4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00170e8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00170ec:	83 c4 10             	add    esp,0x10
c00170ef:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00170f4:	74 27                	je     c001711d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00170f6:	83 ec 0c             	sub    esp,0xc
c00170f9:	68 92 2c 02 c0       	push   0xc0022c92
c00170fe:	e8 f4 a5 ff ff       	call   c00116f7 <KePanic(char const*)>
c0017103:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017108:	83 c4 10             	add    esp,0x10
c001710b:	48                   	dec    eax
c001710c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017111:	85 c0                	test   eax,eax
c0017113:	75 01                	jne    c0017116 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017115:	fb                   	sti    
c0017116:	31 db                	xor    ebx,ebx
c0017118:	e9 90 00 00 00       	jmp    c00171ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001711d:	51                   	push   ecx
c001711e:	51                   	push   ecx
c001711f:	6a 01                	push   0x1
c0017121:	55                   	push   ebp
c0017122:	e8 a3 4a ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	85 c0                	test   eax,eax
c001712c:	74 26                	je     c0017154 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001712e:	83 ec 0c             	sub    esp,0xc
c0017131:	68 ab 2c 02 c0       	push   0xc0022cab
c0017136:	e8 bc a5 ff ff       	call   c00116f7 <KePanic(char const*)>
c001713b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017140:	83 c4 10             	add    esp,0x10
c0017143:	48                   	dec    eax
c0017144:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017149:	85 c0                	test   eax,eax
c001714b:	75 c9                	jne    c0017116 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001714d:	fb                   	sti    
c001714e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017152:	eb 59                	jmp    c00171ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017154:	0f b7 ff             	movzx  edi,di
c0017157:	50                   	push   eax
c0017158:	0f b7 f6             	movzx  esi,si
c001715b:	50                   	push   eax
c001715c:	57                   	push   edi
c001715d:	56                   	push   esi
c001715e:	e8 a7 fc ff ff       	call   c0016e0a <Vm::realToLinear(unsigned short, unsigned short)>
c0017163:	5a                   	pop    edx
c0017164:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017167:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001716b:	51                   	push   ecx
c001716c:	50                   	push   eax
c001716d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017171:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017175:	55                   	push   ebp
c0017176:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017179:	83 c4 14             	add    esp,0x14
c001717c:	55                   	push   ebp
c001717d:	e8 a6 4a ff ff       	call   c000bc28 <File::close()>
c0017182:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017187:	83 c4 10             	add    esp,0x10
c001718a:	48                   	dec    eax
c001718b:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017192:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017197:	85 c0                	test   eax,eax
c0017199:	75 01                	jne    c001719c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001719b:	fb                   	sti    
c001719c:	83 ec 0c             	sub    esp,0xc
c001719f:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c00171a5:	e8 4a f5 ff ff       	call   c00166f4 <unblockTask(ThreadControlBlock*)>
c00171aa:	83 c4 10             	add    esp,0x10
c00171ad:	83 c4 2c             	add    esp,0x2c
c00171b0:	88 d8                	mov    al,bl
c00171b2:	5b                   	pop    ebx
c00171b3:	5e                   	pop    esi
c00171b4:	5f                   	pop    edi
c00171b5:	5d                   	pop    ebp
c00171b6:	c3                   	ret    

c00171b7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00171b7:	57                   	push   edi
c00171b8:	56                   	push   esi
c00171b9:	53                   	push   ebx
c00171ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171c6:	83 e8 06             	sub    eax,0x6
c00171c9:	0f b7 c0             	movzx  eax,ax
c00171cc:	50                   	push   eax
c00171cd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00171d2:	50                   	push   eax
c00171d3:	e8 32 fc ff ff       	call   c0016e0a <Vm::realToLinear(unsigned short, unsigned short)>
c00171d8:	5a                   	pop    edx
c00171d9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00171dc:	59                   	pop    ecx
c00171dd:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00171e0:	8d 51 fa             	lea    edx,[ecx-0x6]
c00171e3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00171e9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00171ec:	8d 56 02             	lea    edx,[esi+0x2]
c00171ef:	66 89 10             	mov    WORD PTR [eax],dx
c00171f2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00171f6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00171fa:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00171fd:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017201:	0f b6 f1             	movzx  esi,cl
c0017204:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017208:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001720e:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017212:	0f b6 d5             	movzx  edx,ch
c0017215:	74 0a                	je     c0017221 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017217:	c1 e2 08             	shl    edx,0x8
c001721a:	09 f2                	or     edx,esi
c001721c:	80 ce 02             	or     dh,0x2
c001721f:	eb 08                	jmp    c0017229 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017221:	c1 e2 08             	shl    edx,0x8
c0017224:	09 f2                	or     edx,esi
c0017226:	80 e6 fd             	and    dh,0xfd
c0017229:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001722d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017232:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017236:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001723e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017241:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017249:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001724c:	5b                   	pop    ebx
c001724d:	5e                   	pop    esi
c001724e:	5f                   	pop    edi
c001724f:	c3                   	ret    

c0017250 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017250:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017255:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001725a:	c1 e0 04             	shl    eax,0x4
c001725d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017260:	c3                   	ret    

c0017261 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017261:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017266:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001726b:	c1 e0 04             	shl    eax,0x4
c001726e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017272:	c3                   	ret    

c0017273 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017273:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017278:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001727d:	c1 e0 04             	shl    eax,0x4
c0017280:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017283:	c3                   	ret    

c0017284 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017284:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017289:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001728e:	c1 e0 04             	shl    eax,0x4
c0017291:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017295:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017298:	c3                   	ret    

c0017299 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017299:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001729e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00172a3:	c1 e0 04             	shl    eax,0x4
c00172a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172aa:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00172ae:	c3                   	ret    

c00172af <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00172af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00172b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00172b9:	c1 e0 04             	shl    eax,0x4
c00172bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172c0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00172c3:	c3                   	ret    

c00172c4 <Vm::faultHandler(regs*)>:
c00172c4:	55                   	push   ebp
c00172c5:	57                   	push   edi
c00172c6:	56                   	push   esi
c00172c7:	53                   	push   ebx
c00172c8:	83 ec 2c             	sub    esp,0x2c
c00172cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00172cf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00172d2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00172d6:	0f b7 f8             	movzx  edi,ax
c00172d9:	52                   	push   edx
c00172da:	0f b7 c0             	movzx  eax,ax
c00172dd:	50                   	push   eax
c00172de:	e8 27 fb ff ff       	call   c0016e0a <Vm::realToLinear(unsigned short, unsigned short)>
c00172e3:	5a                   	pop    edx
c00172e4:	59                   	pop    ecx
c00172e5:	89 c1                	mov    ecx,eax
c00172e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172ee:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00172f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172f7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00172fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172fe:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017303:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017307:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001730b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001730f:	e8 f6 fa ff ff       	call   c0016e0a <Vm::realToLinear(unsigned short, unsigned short)>
c0017314:	5e                   	pop    esi
c0017315:	be 06 00 00 00       	mov    esi,0x6
c001731a:	5d                   	pop    ebp
c001731b:	31 ed                	xor    ebp,ebp
c001731d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017322:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017325:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001732b:	0f 84 74 02 00 00    	je     c00175a5 <Vm::faultHandler(regs*)+0x2e1>
c0017331:	0f 87 94 00 00 00    	ja     c00173cb <Vm::faultHandler(regs*)+0x107>
c0017337:	83 fa 66             	cmp    edx,0x66
c001733a:	0f 84 e2 01 00 00    	je     c0017522 <Vm::faultHandler(regs*)+0x25e>
c0017340:	77 47                	ja     c0017389 <Vm::faultHandler(regs*)+0xc5>
c0017342:	83 fa 36             	cmp    edx,0x36
c0017345:	0f 84 ca 01 00 00    	je     c0017515 <Vm::faultHandler(regs*)+0x251>
c001734b:	77 1a                	ja     c0017367 <Vm::faultHandler(regs*)+0xa3>
c001734d:	83 fa 26             	cmp    edx,0x26
c0017350:	0f 84 98 01 00 00    	je     c00174ee <Vm::faultHandler(regs*)+0x22a>
c0017356:	83 fa 2e             	cmp    edx,0x2e
c0017359:	0f 85 21 06 00 00    	jne    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c001735f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017362:	31 f6                	xor    esi,esi
c0017364:	41                   	inc    ecx
c0017365:	eb bb                	jmp    c0017322 <Vm::faultHandler(regs*)+0x5e>
c0017367:	83 fa 64             	cmp    edx,0x64
c001736a:	0f 84 8b 01 00 00    	je     c00174fb <Vm::faultHandler(regs*)+0x237>
c0017370:	0f 87 92 01 00 00    	ja     c0017508 <Vm::faultHandler(regs*)+0x244>
c0017376:	83 fa 3e             	cmp    edx,0x3e
c0017379:	0f 85 01 06 00 00    	jne    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c001737f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017382:	be 01 00 00 00       	mov    esi,0x1
c0017387:	eb db                	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c0017389:	83 fa 6d             	cmp    edx,0x6d
c001738c:	0f 84 34 03 00 00    	je     c00176c6 <Vm::faultHandler(regs*)+0x402>
c0017392:	77 17                	ja     c00173ab <Vm::faultHandler(regs*)+0xe7>
c0017394:	83 fa 67             	cmp    edx,0x67
c0017397:	0f 84 92 01 00 00    	je     c001752f <Vm::faultHandler(regs*)+0x26b>
c001739d:	83 fa 6c             	cmp    edx,0x6c
c00173a0:	0f 84 b1 02 00 00    	je     c0017657 <Vm::faultHandler(regs*)+0x393>
c00173a6:	e9 d5 05 00 00       	jmp    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c00173ab:	83 fa 6f             	cmp    edx,0x6f
c00173ae:	0f 84 3d 04 00 00    	je     c00177f1 <Vm::faultHandler(regs*)+0x52d>
c00173b4:	0f 82 9f 03 00 00    	jb     c0017759 <Vm::faultHandler(regs*)+0x495>
c00173ba:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00173c0:	0f 84 76 01 00 00    	je     c001753c <Vm::faultHandler(regs*)+0x278>
c00173c6:	e9 b5 05 00 00       	jmp    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c00173cb:	81 fa ec 00 00 00    	cmp    edx,0xec
c00173d1:	0f 84 51 05 00 00    	je     c0017928 <Vm::faultHandler(regs*)+0x664>
c00173d7:	0f 87 a9 00 00 00    	ja     c0017486 <Vm::faultHandler(regs*)+0x1c2>
c00173dd:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00173e3:	0f 84 d0 04 00 00    	je     c00178b9 <Vm::faultHandler(regs*)+0x5f5>
c00173e9:	77 78                	ja     c0017463 <Vm::faultHandler(regs*)+0x19f>
c00173eb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00173f1:	0f 84 0e 02 00 00    	je     c0017605 <Vm::faultHandler(regs*)+0x341>
c00173f7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00173fd:	0f 85 7d 05 00 00    	jne    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c0017403:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017407:	89 d1                	mov    ecx,edx
c0017409:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c001740c:	c1 e1 08             	shl    ecx,0x8
c001740f:	09 ca                	or     edx,ecx
c0017411:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017414:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017418:	89 d1                	mov    ecx,edx
c001741a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001741e:	c1 e1 08             	shl    ecx,0x8
c0017421:	09 ca                	or     edx,ecx
c0017423:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017426:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001742a:	89 d1                	mov    ecx,edx
c001742c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017430:	c1 e1 08             	shl    ecx,0x8
c0017433:	09 ca                	or     edx,ecx
c0017435:	81 ca 00 02 02 00    	or     edx,0x20200
c001743b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001743e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017442:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017448:	d1 e8                	shr    eax,1
c001744a:	83 e0 01             	and    eax,0x1
c001744d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017450:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017453:	83 c0 06             	add    eax,0x6
c0017456:	25 ff ff 00 00       	and    eax,0xffff
c001745b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001745e:	e9 19 05 00 00       	jmp    c001797c <Vm::faultHandler(regs*)+0x6b8>
c0017463:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017469:	0f 84 8f 04 00 00    	je     c00178fe <Vm::faultHandler(regs*)+0x63a>
c001746f:	0f 82 60 04 00 00    	jb     c00178d5 <Vm::faultHandler(regs*)+0x611>
c0017475:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001747b:	0f 84 94 04 00 00    	je     c0017915 <Vm::faultHandler(regs*)+0x651>
c0017481:	e9 fa 04 00 00       	jmp    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c0017486:	81 fa ef 00 00 00    	cmp    edx,0xef
c001748c:	0f 84 d7 04 00 00    	je     c0017969 <Vm::faultHandler(regs*)+0x6a5>
c0017492:	77 2e                	ja     c00174c2 <Vm::faultHandler(regs*)+0x1fe>
c0017494:	81 fa ed 00 00 00    	cmp    edx,0xed
c001749a:	0f 84 a4 04 00 00    	je     c0017944 <Vm::faultHandler(regs*)+0x680>
c00174a0:	81 fa ee 00 00 00    	cmp    edx,0xee
c00174a6:	0f 85 d4 04 00 00    	jne    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c00174ac:	50                   	push   eax
c00174ad:	50                   	push   eax
c00174ae:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00174b2:	50                   	push   eax
c00174b3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174b7:	50                   	push   eax
c00174b8:	e8 17 f9 ff ff       	call   c0016dd4 <Vm::outbv(unsigned short, unsigned char)>
c00174bd:	e9 9f 04 00 00       	jmp    c0017961 <Vm::faultHandler(regs*)+0x69d>
c00174c2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00174c8:	0f 84 6d 01 00 00    	je     c001763b <Vm::faultHandler(regs*)+0x377>
c00174ce:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00174d4:	0f 84 6f 01 00 00    	je     c0017649 <Vm::faultHandler(regs*)+0x385>
c00174da:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00174e0:	0f 85 9a 04 00 00    	jne    c0017980 <Vm::faultHandler(regs*)+0x6bc>
c00174e6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174e9:	e9 76 fe ff ff       	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c00174ee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174f1:	be 02 00 00 00       	mov    esi,0x2
c00174f6:	e9 69 fe ff ff       	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c00174fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174fe:	be 03 00 00 00       	mov    esi,0x3
c0017503:	e9 5c fe ff ff       	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c0017508:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001750b:	be 04 00 00 00       	mov    esi,0x4
c0017510:	e9 4f fe ff ff       	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c0017515:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017518:	be 05 00 00 00       	mov    esi,0x5
c001751d:	e9 42 fe ff ff       	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c0017522:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017525:	bd 01 00 00 00       	mov    ebp,0x1
c001752a:	e9 35 fe ff ff       	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c001752f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017532:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017537:	e9 28 fe ff ff       	jmp    c0017364 <Vm::faultHandler(regs*)+0xa0>
c001753c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001753f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017543:	83 e5 01             	and    ebp,0x1
c0017546:	74 30                	je     c0017578 <Vm::faultHandler(regs*)+0x2b4>
c0017548:	83 e9 04             	sub    ecx,0x4
c001754b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017551:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017557:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001755a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001755d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017563:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017567:	0f 84 0c 04 00 00    	je     c0017979 <Vm::faultHandler(regs*)+0x6b5>
c001756d:	80 ce 02             	or     dh,0x2
c0017570:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017573:	e9 01 04 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c0017578:	83 e9 02             	sub    ecx,0x2
c001757b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017581:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017584:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017588:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001758e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017592:	74 05                	je     c0017599 <Vm::faultHandler(regs*)+0x2d5>
c0017594:	80 ce 02             	or     dh,0x2
c0017597:	eb 03                	jmp    c001759c <Vm::faultHandler(regs*)+0x2d8>
c0017599:	80 e6 fd             	and    dh,0xfd
c001759c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00175a0:	e9 d4 03 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c00175a5:	83 e5 01             	and    ebp,0x1
c00175a8:	74 2a                	je     c00175d4 <Vm::faultHandler(regs*)+0x310>
c00175aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00175ac:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00175b2:	81 ca 00 02 02 00    	or     edx,0x20200
c00175b8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00175bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00175bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175c3:	c1 e8 09             	shr    eax,0x9
c00175c6:	83 e0 01             	and    eax,0x1
c00175c9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00175cc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00175cf:	83 c0 04             	add    eax,0x4
c00175d2:	eb 24                	jmp    c00175f8 <Vm::faultHandler(regs*)+0x334>
c00175d4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00175d7:	81 ca 00 02 02 00    	or     edx,0x20200
c00175dd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00175e0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00175e3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175e9:	c1 e8 09             	shr    eax,0x9
c00175ec:	83 e0 01             	and    eax,0x1
c00175ef:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00175f2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00175f5:	83 c0 02             	add    eax,0x2
c00175f8:	25 ff ff 00 00       	and    eax,0xffff
c00175fd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017600:	e9 74 03 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c0017605:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017609:	3d ee 00 00 00       	cmp    eax,0xee
c001760e:	75 10                	jne    c0017620 <Vm::faultHandler(regs*)+0x35c>
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017616:	e8 56 f8 ff ff       	call   c0016e71 <Vm::mainloop3(unsigned long)>
c001761b:	e9 44 03 00 00       	jmp    c0017964 <Vm::faultHandler(regs*)+0x6a0>
c0017620:	83 ec 0c             	sub    esp,0xc
c0017623:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001762b:	51                   	push   ecx
c001762c:	50                   	push   eax
c001762d:	53                   	push   ebx
c001762e:	e8 84 fb ff ff       	call   c00171b7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017633:	83 c4 20             	add    esp,0x20
c0017636:	e9 41 03 00 00       	jmp    c001797c <Vm::faultHandler(regs*)+0x6b8>
c001763b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017640:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017644:	e9 30 03 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c0017649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001764e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017652:	e9 22 03 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c0017657:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001765a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001765f:	74 2b                	je     c001768c <Vm::faultHandler(regs*)+0x3c8>
c0017661:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017668:	76 22                	jbe    c001768c <Vm::faultHandler(regs*)+0x3c8>
c001766a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001766e:	50                   	push   eax
c001766f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017673:	50                   	push   eax
c0017674:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017678:	50                   	push   eax
c0017679:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001767d:	50                   	push   eax
c001767e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017682:	50                   	push   eax
c0017683:	6a 6c                	push   0x6c
c0017685:	6a 6c                	push   0x6c
c0017687:	e9 bd 01 00 00       	jmp    c0017849 <Vm::faultHandler(regs*)+0x585>
c001768c:	83 ec 0c             	sub    esp,0xc
c001768f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017693:	0f b7 f6             	movzx  esi,si
c0017696:	50                   	push   eax
c0017697:	e8 25 f7 ff ff       	call   c0016dc1 <Vm::inbv(unsigned short)>
c001769c:	83 c4 0c             	add    esp,0xc
c001769f:	0f b6 c0             	movzx  eax,al
c00176a2:	50                   	push   eax
c00176a3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00176a7:	50                   	push   eax
c00176a8:	56                   	push   esi
c00176a9:	e8 d6 fb ff ff       	call   c0017284 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00176ae:	83 c4 10             	add    esp,0x10
c00176b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176b4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176b8:	74 03                	je     c00176bd <Vm::faultHandler(regs*)+0x3f9>
c00176ba:	48                   	dec    eax
c00176bb:	eb 01                	jmp    c00176be <Vm::faultHandler(regs*)+0x3fa>
c00176bd:	40                   	inc    eax
c00176be:	0f b7 c0             	movzx  eax,ax
c00176c1:	e9 8b 00 00 00       	jmp    c0017751 <Vm::faultHandler(regs*)+0x48d>
c00176c6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00176c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176cc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176d1:	74 29                	je     c00176fc <Vm::faultHandler(regs*)+0x438>
c00176d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00176d8:	76 22                	jbe    c00176fc <Vm::faultHandler(regs*)+0x438>
c00176da:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176de:	50                   	push   eax
c00176df:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176e3:	50                   	push   eax
c00176e4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176e8:	50                   	push   eax
c00176e9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176ed:	50                   	push   eax
c00176ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176f2:	50                   	push   eax
c00176f3:	6a 6d                	push   0x6d
c00176f5:	6a 6d                	push   0x6d
c00176f7:	e9 4d 01 00 00       	jmp    c0017849 <Vm::faultHandler(regs*)+0x585>
c00176fc:	0f b7 c8             	movzx  ecx,ax
c00176ff:	0f b7 f6             	movzx  esi,si
c0017702:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017705:	83 e5 01             	and    ebp,0x1
c0017708:	74 20                	je     c001772a <Vm::faultHandler(regs*)+0x466>
c001770a:	ed                   	in     eax,dx
c001770b:	55                   	push   ebp
c001770c:	50                   	push   eax
c001770d:	51                   	push   ecx
c001770e:	56                   	push   esi
c001770f:	e8 9b fb ff ff       	call   c00172af <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017714:	83 c4 10             	add    esp,0x10
c0017717:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001771a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001771e:	74 05                	je     c0017725 <Vm::faultHandler(regs*)+0x461>
c0017720:	83 e8 04             	sub    eax,0x4
c0017723:	eb 27                	jmp    c001774c <Vm::faultHandler(regs*)+0x488>
c0017725:	83 c0 04             	add    eax,0x4
c0017728:	eb 22                	jmp    c001774c <Vm::faultHandler(regs*)+0x488>
c001772a:	66 ed                	in     ax,dx
c001772c:	0f b7 c0             	movzx  eax,ax
c001772f:	57                   	push   edi
c0017730:	50                   	push   eax
c0017731:	51                   	push   ecx
c0017732:	56                   	push   esi
c0017733:	e8 61 fb ff ff       	call   c0017299 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017738:	83 c4 10             	add    esp,0x10
c001773b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001773e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017742:	74 05                	je     c0017749 <Vm::faultHandler(regs*)+0x485>
c0017744:	83 e8 02             	sub    eax,0x2
c0017747:	eb 03                	jmp    c001774c <Vm::faultHandler(regs*)+0x488>
c0017749:	83 c0 02             	add    eax,0x2
c001774c:	25 ff ff 00 00       	and    eax,0xffff
c0017751:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017754:	e9 20 02 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c0017759:	8d 46 ff             	lea    eax,[esi-0x1]
c001775c:	0f b6 f0             	movzx  esi,al
c001775f:	83 fe 05             	cmp    esi,0x5
c0017762:	77 23                	ja     c0017787 <Vm::faultHandler(regs*)+0x4c3>
c0017764:	ff 24 b5 20 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2e0]
c001776b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017770:	eb 15                	jmp    c0017787 <Vm::faultHandler(regs*)+0x4c3>
c0017772:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017776:	eb 0f                	jmp    c0017787 <Vm::faultHandler(regs*)+0x4c3>
c0017778:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001777c:	eb 09                	jmp    c0017787 <Vm::faultHandler(regs*)+0x4c3>
c001777e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017782:	eb 03                	jmp    c0017787 <Vm::faultHandler(regs*)+0x4c3>
c0017784:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017787:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001778a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001778f:	74 29                	je     c00177ba <Vm::faultHandler(regs*)+0x4f6>
c0017791:	3d ff ff 00 00       	cmp    eax,0xffff
c0017796:	76 22                	jbe    c00177ba <Vm::faultHandler(regs*)+0x4f6>
c0017798:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001779c:	50                   	push   eax
c001779d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177a1:	50                   	push   eax
c00177a2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177a6:	50                   	push   eax
c00177a7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177ab:	50                   	push   eax
c00177ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177b0:	50                   	push   eax
c00177b1:	6a 6e                	push   0x6e
c00177b3:	6a 6e                	push   0x6e
c00177b5:	e9 8f 00 00 00       	jmp    c0017849 <Vm::faultHandler(regs*)+0x585>
c00177ba:	0f b7 c0             	movzx  eax,ax
c00177bd:	52                   	push   edx
c00177be:	52                   	push   edx
c00177bf:	50                   	push   eax
c00177c0:	57                   	push   edi
c00177c1:	e8 8a fa ff ff       	call   c0017250 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00177c6:	59                   	pop    ecx
c00177c7:	0f b6 c0             	movzx  eax,al
c00177ca:	5e                   	pop    esi
c00177cb:	50                   	push   eax
c00177cc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177d0:	50                   	push   eax
c00177d1:	e8 fe f5 ff ff       	call   c0016dd4 <Vm::outbv(unsigned short, unsigned char)>
c00177d6:	83 c4 10             	add    esp,0x10
c00177d9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00177dc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00177e0:	74 03                	je     c00177e5 <Vm::faultHandler(regs*)+0x521>
c00177e2:	48                   	dec    eax
c00177e3:	eb 01                	jmp    c00177e6 <Vm::faultHandler(regs*)+0x522>
c00177e5:	40                   	inc    eax
c00177e6:	0f b7 c0             	movzx  eax,ax
c00177e9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00177ec:	e9 88 01 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c00177f1:	8d 46 ff             	lea    eax,[esi-0x1]
c00177f4:	0f b6 f0             	movzx  esi,al
c00177f7:	83 fe 05             	cmp    esi,0x5
c00177fa:	77 1e                	ja     c001781a <Vm::faultHandler(regs*)+0x556>
c00177fc:	ff 24 b5 38 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2c8]
c0017803:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017807:	eb 11                	jmp    c001781a <Vm::faultHandler(regs*)+0x556>
c0017809:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001780c:	eb 0c                	jmp    c001781a <Vm::faultHandler(regs*)+0x556>
c001780e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017811:	eb 07                	jmp    c001781a <Vm::faultHandler(regs*)+0x556>
c0017813:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017816:	eb 02                	jmp    c001781a <Vm::faultHandler(regs*)+0x556>
c0017818:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001781a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001781d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017822:	74 37                	je     c001785b <Vm::faultHandler(regs*)+0x597>
c0017824:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001782a:	76 2f                	jbe    c001785b <Vm::faultHandler(regs*)+0x597>
c001782c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017830:	50                   	push   eax
c0017831:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017835:	50                   	push   eax
c0017836:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001783a:	50                   	push   eax
c001783b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001783f:	50                   	push   eax
c0017840:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017844:	50                   	push   eax
c0017845:	6a 6f                	push   0x6f
c0017847:	6a 6f                	push   0x6f
c0017849:	68 c4 2c 02 c0       	push   0xc0022cc4
c001784e:	e8 52 31 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017853:	83 c4 20             	add    esp,0x20
c0017856:	e9 83 01 00 00       	jmp    c00179de <Vm::faultHandler(regs*)+0x71a>
c001785b:	0f b7 d7             	movzx  edx,di
c001785e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017861:	0f b7 c6             	movzx  eax,si
c0017864:	81 e1 00 04 00 00    	and    ecx,0x400
c001786a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001786d:	83 e5 01             	and    ebp,0x1
c0017870:	74 1d                	je     c001788f <Vm::faultHandler(regs*)+0x5cb>
c0017872:	55                   	push   ebp
c0017873:	55                   	push   ebp
c0017874:	50                   	push   eax
c0017875:	52                   	push   edx
c0017876:	e8 f8 f9 ff ff       	call   c0017273 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	89 fa                	mov    edx,edi
c0017880:	ef                   	out    dx,eax
c0017881:	85 c9                	test   ecx,ecx
c0017883:	74 05                	je     c001788a <Vm::faultHandler(regs*)+0x5c6>
c0017885:	83 ee 04             	sub    esi,0x4
c0017888:	eb 21                	jmp    c00178ab <Vm::faultHandler(regs*)+0x5e7>
c001788a:	83 c6 04             	add    esi,0x4
c001788d:	eb 1c                	jmp    c00178ab <Vm::faultHandler(regs*)+0x5e7>
c001788f:	55                   	push   ebp
c0017890:	55                   	push   ebp
c0017891:	50                   	push   eax
c0017892:	52                   	push   edx
c0017893:	e8 c9 f9 ff ff       	call   c0017261 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017898:	83 c4 10             	add    esp,0x10
c001789b:	89 fa                	mov    edx,edi
c001789d:	66 ef                	out    dx,ax
c001789f:	85 c9                	test   ecx,ecx
c00178a1:	74 05                	je     c00178a8 <Vm::faultHandler(regs*)+0x5e4>
c00178a3:	83 ee 02             	sub    esi,0x2
c00178a6:	eb 03                	jmp    c00178ab <Vm::faultHandler(regs*)+0x5e7>
c00178a8:	83 c6 02             	add    esi,0x2
c00178ab:	81 e6 ff ff 00 00    	and    esi,0xffff
c00178b1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00178b4:	e9 c0 00 00 00       	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c00178b9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178c7:	50                   	push   eax
c00178c8:	e8 f4 f4 ff ff       	call   c0016dc1 <Vm::inbv(unsigned short)>
c00178cd:	0f b6 c0             	movzx  eax,al
c00178d0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178d3:	eb 3a                	jmp    c001790f <Vm::faultHandler(regs*)+0x64b>
c00178d5:	83 e5 01             	and    ebp,0x1
c00178d8:	74 07                	je     c00178e1 <Vm::faultHandler(regs*)+0x61d>
c00178da:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178de:	ed                   	in     eax,dx
c00178df:	eb 14                	jmp    c00178f5 <Vm::faultHandler(regs*)+0x631>
c00178e1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00178e4:	66 31 f6             	xor    si,si
c00178e7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00178ea:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178ee:	66 ed                	in     ax,dx
c00178f0:	0f b7 c0             	movzx  eax,ax
c00178f3:	09 f0                	or     eax,esi
c00178f5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178f8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178fc:	eb 7e                	jmp    c001797c <Vm::faultHandler(regs*)+0x6b8>
c00178fe:	52                   	push   edx
c00178ff:	52                   	push   edx
c0017900:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017904:	50                   	push   eax
c0017905:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017909:	50                   	push   eax
c001790a:	e8 c5 f4 ff ff       	call   c0016dd4 <Vm::outbv(unsigned short, unsigned char)>
c001790f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017913:	eb 4f                	jmp    c0017964 <Vm::faultHandler(regs*)+0x6a0>
c0017915:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017918:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001791c:	83 e5 01             	and    ebp,0x1
c001791f:	74 03                	je     c0017924 <Vm::faultHandler(regs*)+0x660>
c0017921:	ef                   	out    dx,eax
c0017922:	eb d4                	jmp    c00178f8 <Vm::faultHandler(regs*)+0x634>
c0017924:	66 ef                	out    dx,ax
c0017926:	eb d0                	jmp    c00178f8 <Vm::faultHandler(regs*)+0x634>
c0017928:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001792f:	83 ec 0c             	sub    esp,0xc
c0017932:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017936:	50                   	push   eax
c0017937:	e8 85 f4 ff ff       	call   c0016dc1 <Vm::inbv(unsigned short)>
c001793c:	0f b6 c0             	movzx  eax,al
c001793f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017942:	eb 1d                	jmp    c0017961 <Vm::faultHandler(regs*)+0x69d>
c0017944:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017947:	83 e5 01             	and    ebp,0x1
c001794a:	74 03                	je     c001794f <Vm::faultHandler(regs*)+0x68b>
c001794c:	ed                   	in     eax,dx
c001794d:	eb 0d                	jmp    c001795c <Vm::faultHandler(regs*)+0x698>
c001794f:	66 ed                	in     ax,dx
c0017951:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017954:	0f b7 c0             	movzx  eax,ax
c0017957:	66 31 d2             	xor    dx,dx
c001795a:	09 d0                	or     eax,edx
c001795c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001795f:	eb 18                	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c0017961:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017964:	83 c4 10             	add    esp,0x10
c0017967:	eb 13                	jmp    c001797c <Vm::faultHandler(regs*)+0x6b8>
c0017969:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001796c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001796f:	83 e5 01             	and    ebp,0x1
c0017972:	74 03                	je     c0017977 <Vm::faultHandler(regs*)+0x6b3>
c0017974:	ef                   	out    dx,eax
c0017975:	eb 02                	jmp    c0017979 <Vm::faultHandler(regs*)+0x6b5>
c0017977:	66 ef                	out    dx,ax
c0017979:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001797c:	b0 01                	mov    al,0x1
c001797e:	eb 60                	jmp    c00179e0 <Vm::faultHandler(regs*)+0x71c>
c0017980:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017984:	50                   	push   eax
c0017985:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017989:	50                   	push   eax
c001798a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001798e:	50                   	push   eax
c001798f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017993:	50                   	push   eax
c0017994:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017998:	50                   	push   eax
c0017999:	52                   	push   edx
c001799a:	52                   	push   edx
c001799b:	68 f1 2c 02 c0       	push   0xc0022cf1
c00179a0:	e8 00 30 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00179a5:	83 c4 20             	add    esp,0x20
c00179a8:	83 ec 0c             	sub    esp,0xc
c00179ab:	6a 60                	push   0x60
c00179ad:	e8 0f f4 ff ff       	call   c0016dc1 <Vm::inbv(unsigned short)>
c00179b2:	83 c4 10             	add    esp,0x10
c00179b5:	0f b6 d0             	movzx  edx,al
c00179b8:	83 fa 1c             	cmp    edx,0x1c
c00179bb:	74 05                	je     c00179c2 <Vm::faultHandler(regs*)+0x6fe>
c00179bd:	83 fa 5a             	cmp    edx,0x5a
c00179c0:	75 e6                	jne    c00179a8 <Vm::faultHandler(regs*)+0x6e4>
c00179c2:	0f b6 c0             	movzx  eax,al
c00179c5:	83 f8 1c             	cmp    eax,0x1c
c00179c8:	74 05                	je     c00179cf <Vm::faultHandler(regs*)+0x70b>
c00179ca:	83 f8 5a             	cmp    eax,0x5a
c00179cd:	75 0f                	jne    c00179de <Vm::faultHandler(regs*)+0x71a>
c00179cf:	83 ec 0c             	sub    esp,0xc
c00179d2:	6a 60                	push   0x60
c00179d4:	e8 e8 f3 ff ff       	call   c0016dc1 <Vm::inbv(unsigned short)>
c00179d9:	83 c4 10             	add    esp,0x10
c00179dc:	eb e4                	jmp    c00179c2 <Vm::faultHandler(regs*)+0x6fe>
c00179de:	31 c0                	xor    eax,eax
c00179e0:	83 c4 2c             	add    esp,0x2c
c00179e3:	5b                   	pop    ebx
c00179e4:	5e                   	pop    esi
c00179e5:	5f                   	pop    edi
c00179e6:	5d                   	pop    ebp
c00179e7:	c3                   	ret    

c00179e8 <noCopro(unsigned long)>:
c00179e8:	c3                   	ret    

c00179e9 <nmiHandler(regs*, void*)>:
c00179e9:	83 ec 0c             	sub    esp,0xc
c00179ec:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00179f1:	83 ec 0c             	sub    esp,0xc
c00179f4:	50                   	push   eax
c00179f5:	e8 1e f9 fe ff       	call   c0007318 <Computer::handleNMI()>
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	90                   	nop
c00179fe:	83 c4 0c             	add    esp,0xc
c0017a01:	c3                   	ret    

c0017a02 <doubleFault(regs*, void*)>:
c0017a02:	55                   	push   ebp
c0017a03:	89 e5                	mov    ebp,esp
c0017a05:	83 ec 08             	sub    esp,0x8
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	68 50 2d 02 c0       	push   0xc0022d50
c0017a10:	e8 e2 9c ff ff       	call   c00116f7 <KePanic(char const*)>
c0017a15:	83 c4 10             	add    esp,0x10
c0017a18:	90                   	nop
c0017a19:	c9                   	leave  
c0017a1a:	c3                   	ret    

c0017a1b <displayDebugInfo(regs*)>:
c0017a1b:	83 ec 1c             	sub    esp,0x1c
c0017a1e:	0f 20 c0             	mov    eax,cr0
c0017a21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a25:	0f 20 d0             	mov    eax,cr2
c0017a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a2c:	0f 20 d8             	mov    eax,cr3
c0017a2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a33:	0f 20 e0             	mov    eax,cr4
c0017a36:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017a40:	83 ec 08             	sub    esp,0x8
c0017a43:	50                   	push   eax
c0017a44:	68 6c 2d 02 c0       	push   0xc0022d6c
c0017a49:	e8 57 2f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a55:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017a58:	83 ec 08             	sub    esp,0x8
c0017a5b:	50                   	push   eax
c0017a5c:	68 5d 2d 02 c0       	push   0xc0022d5d
c0017a61:	e8 3f 2f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017a66:	83 c4 10             	add    esp,0x10
c0017a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017a70:	83 ec 08             	sub    esp,0x8
c0017a73:	50                   	push   eax
c0017a74:	68 68 2d 02 c0       	push   0xc0022d68
c0017a79:	e8 27 2f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a88:	83 ec 08             	sub    esp,0x8
c0017a8b:	50                   	push   eax
c0017a8c:	68 77 2d 02 c0       	push   0xc0022d77
c0017a91:	e8 0f 2f ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017aa0:	83 ec 08             	sub    esp,0x8
c0017aa3:	50                   	push   eax
c0017aa4:	68 82 2d 02 c0       	push   0xc0022d82
c0017aa9:	e8 f7 2e ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017aae:	83 c4 10             	add    esp,0x10
c0017ab1:	83 ec 08             	sub    esp,0x8
c0017ab4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ab8:	68 8d 2d 02 c0       	push   0xc0022d8d
c0017abd:	e8 e3 2e ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017ac2:	83 c4 10             	add    esp,0x10
c0017ac5:	83 ec 08             	sub    esp,0x8
c0017ac8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017acc:	68 98 2d 02 c0       	push   0xc0022d98
c0017ad1:	e8 cf 2e ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017add:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ae0:	c1 e0 05             	shl    eax,0x5
c0017ae3:	8d 90 20 41 02 c0    	lea    edx,[eax-0x3ffdbee0]
c0017ae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aed:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017af0:	83 ec 04             	sub    esp,0x4
c0017af3:	52                   	push   edx
c0017af4:	50                   	push   eax
c0017af5:	68 a3 2d 02 c0       	push   0xc0022da3
c0017afa:	e8 a6 2e ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017aff:	83 c4 10             	add    esp,0x10
c0017b02:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b0d:	83 ec 0c             	sub    esp,0xc
c0017b10:	50                   	push   eax
c0017b11:	e8 a3 0c ff ff       	call   c00087b9 <setActiveTerminal(VgaText*)>
c0017b16:	83 c4 10             	add    esp,0x10
c0017b19:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b24:	83 ec 08             	sub    esp,0x8
c0017b27:	68 b2 2d 02 c0       	push   0xc0022db2
c0017b2c:	50                   	push   eax
c0017b2d:	e8 d4 0f ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b44:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017b47:	83 ec 08             	sub    esp,0x8
c0017b4a:	52                   	push   edx
c0017b4b:	50                   	push   eax
c0017b4c:	e8 6f 0f ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5f:	83 ec 08             	sub    esp,0x8
c0017b62:	68 c0 2d 02 c0       	push   0xc0022dc0
c0017b67:	50                   	push   eax
c0017b68:	e8 99 0f ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017b80:	8b 12                	mov    edx,DWORD PTR [edx]
c0017b82:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b85:	83 c2 0c             	add    edx,0xc
c0017b88:	83 ec 08             	sub    esp,0x8
c0017b8b:	52                   	push   edx
c0017b8c:	50                   	push   eax
c0017b8d:	e8 74 0f ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017b92:	83 c4 10             	add    esp,0x10
c0017b95:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b9a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba0:	83 ec 08             	sub    esp,0x8
c0017ba3:	68 c9 2d 02 c0       	push   0xc0022dc9
c0017ba8:	50                   	push   eax
c0017ba9:	e8 58 0f ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017bae:	83 c4 10             	add    esp,0x10
c0017bb1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bbc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bc0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017bc3:	83 ec 08             	sub    esp,0x8
c0017bc6:	52                   	push   edx
c0017bc7:	50                   	push   eax
c0017bc8:	e8 f3 0e ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bd5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bdb:	83 ec 08             	sub    esp,0x8
c0017bde:	68 d1 2d 02 c0       	push   0xc0022dd1
c0017be3:	50                   	push   eax
c0017be4:	e8 1d 0f ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017be9:	83 c4 10             	add    esp,0x10
c0017bec:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bfb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017bfe:	83 ec 08             	sub    esp,0x8
c0017c01:	52                   	push   edx
c0017c02:	50                   	push   eax
c0017c03:	e8 b8 0e ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017c08:	83 c4 10             	add    esp,0x10
c0017c0b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c16:	83 ec 08             	sub    esp,0x8
c0017c19:	68 d9 2d 02 c0       	push   0xc0022dd9
c0017c1e:	50                   	push   eax
c0017c1f:	e8 e2 0e ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017c24:	83 c4 10             	add    esp,0x10
c0017c27:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c32:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c36:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017c39:	83 ec 08             	sub    esp,0x8
c0017c3c:	52                   	push   edx
c0017c3d:	50                   	push   eax
c0017c3e:	e8 7d 0e ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c51:	83 ec 08             	sub    esp,0x8
c0017c54:	68 e1 2d 02 c0       	push   0xc0022de1
c0017c59:	50                   	push   eax
c0017c5a:	e8 a7 0e ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c71:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017c74:	83 ec 08             	sub    esp,0x8
c0017c77:	52                   	push   edx
c0017c78:	50                   	push   eax
c0017c79:	e8 42 0e ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c8c:	83 ec 08             	sub    esp,0x8
c0017c8f:	68 e9 2d 02 c0       	push   0xc0022de9
c0017c94:	50                   	push   eax
c0017c95:	e8 6c 0e ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ca2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ca8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cac:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017caf:	83 ec 08             	sub    esp,0x8
c0017cb2:	52                   	push   edx
c0017cb3:	50                   	push   eax
c0017cb4:	e8 07 0e ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017cb9:	83 c4 10             	add    esp,0x10
c0017cbc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cc1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cc7:	83 ec 08             	sub    esp,0x8
c0017cca:	68 f1 2d 02 c0       	push   0xc0022df1
c0017ccf:	50                   	push   eax
c0017cd0:	e8 31 0e ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cdd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ce3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ce7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017cea:	83 ec 08             	sub    esp,0x8
c0017ced:	52                   	push   edx
c0017cee:	50                   	push   eax
c0017cef:	e8 cc 0d ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cfc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d02:	83 ec 08             	sub    esp,0x8
c0017d05:	68 f9 2d 02 c0       	push   0xc0022df9
c0017d0a:	50                   	push   eax
c0017d0b:	e8 f6 0d ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017d10:	83 c4 10             	add    esp,0x10
c0017d13:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d1e:	83 ec 08             	sub    esp,0x8
c0017d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d25:	50                   	push   eax
c0017d26:	e8 95 0d ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017d2b:	83 c4 10             	add    esp,0x10
c0017d2e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d39:	83 ec 08             	sub    esp,0x8
c0017d3c:	68 02 2e 02 c0       	push   0xc0022e02
c0017d41:	50                   	push   eax
c0017d42:	e8 bf 0d ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017d47:	83 c4 10             	add    esp,0x10
c0017d4a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d55:	83 ec 08             	sub    esp,0x8
c0017d58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d5c:	50                   	push   eax
c0017d5d:	e8 5e 0d ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d70:	83 ec 08             	sub    esp,0x8
c0017d73:	68 0a 2e 02 c0       	push   0xc0022e0a
c0017d78:	50                   	push   eax
c0017d79:	e8 88 0d ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d8c:	83 ec 08             	sub    esp,0x8
c0017d8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d93:	50                   	push   eax
c0017d94:	e8 27 0d ff ff       	call   c0008ac0 <VgaText::putx(unsigned int)>
c0017d99:	83 c4 10             	add    esp,0x10
c0017d9c:	fa                   	cli    
c0017d9d:	f4                   	hlt    
c0017d9e:	eb fe                	jmp    c0017d9e <displayDebugInfo(regs*)+0x383>

c0017da0 <HalSystemIdle()>:
c0017da0:	56                   	push   esi
c0017da1:	53                   	push   ebx
c0017da2:	83 ec 14             	sub    esp,0x14
c0017da5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017daa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017db0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017db6:	83 e0 04             	and    eax,0x4
c0017db9:	0f b6 c0             	movzx  eax,al
c0017dbc:	85 c0                	test   eax,eax
c0017dbe:	0f 95 c0             	setne  al
c0017dc1:	0f b6 c0             	movzx  eax,al
c0017dc4:	85 c0                	test   eax,eax
c0017dc6:	74 4c                	je     c0017e14 <HalSystemIdle()+0x74>
c0017dc8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017dcd:	83 ec 08             	sub    esp,0x8
c0017dd0:	68 e1 00 00 00       	push   0xe1
c0017dd5:	50                   	push   eax
c0017dd6:	e8 47 f3 fe ff       	call   c0007122 <Computer::rdmsr(unsigned int)>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017de2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017de6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017deb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017def:	83 e2 02             	and    edx,0x2
c0017df2:	89 d3                	mov    ebx,edx
c0017df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017df8:	83 e2 00             	and    edx,0x0
c0017dfb:	89 d6                	mov    esi,edx
c0017dfd:	56                   	push   esi
c0017dfe:	53                   	push   ebx
c0017dff:	68 e1 00 00 00       	push   0xe1
c0017e04:	50                   	push   eax
c0017e05:	e8 44 f3 fe ff       	call   c000714e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	e8 82 83 fe ff       	call   c0000194 <doTPAUSE>
c0017e12:	eb 01                	jmp    c0017e15 <HalSystemIdle()+0x75>
c0017e14:	f4                   	hlt    
c0017e15:	90                   	nop
c0017e16:	83 c4 14             	add    esp,0x14
c0017e19:	5b                   	pop    ebx
c0017e1a:	5e                   	pop    esi
c0017e1b:	c3                   	ret    

c0017e1c <displayProgramFault(char const*)>:
c0017e1c:	83 ec 0c             	sub    esp,0xc
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e26:	e8 7a 2b ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017e2b:	83 c4 10             	add    esp,0x10
c0017e2e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e33:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e35:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e3e:	85 c0                	test   eax,eax
c0017e40:	74 21                	je     c0017e63 <displayProgramFault(char const*)+0x47>
c0017e42:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e52:	6a 04                	push   0x4
c0017e54:	6a 0f                	push   0xf
c0017e56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e5a:	50                   	push   eax
c0017e5b:	e8 18 0d ff ff       	call   c0008b78 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	90                   	nop
c0017e64:	83 c4 0c             	add    esp,0xc
c0017e67:	c3                   	ret    

c0017e68 <gpFault(regs*, void*)>:
c0017e68:	83 ec 1c             	sub    esp,0x1c
c0017e6b:	c7 05 74 c7 02 c0 c4 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00172c4
c0017e75:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e7a:	85 c0                	test   eax,eax
c0017e7c:	74 1e                	je     c0017e9c <gpFault(regs*, void*)+0x34>
c0017e7e:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e83:	83 ec 0c             	sub    esp,0xc
c0017e86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e8a:	ff d0                	call   eax
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e93:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e98:	85 c0                	test   eax,eax
c0017e9a:	75 2e                	jne    c0017eca <gpFault(regs*, void*)+0x62>
c0017e9c:	83 ec 0c             	sub    esp,0xc
c0017e9f:	68 12 2e 02 c0       	push   0xc0022e12
c0017ea4:	e8 73 ff ff ff       	call   c0017e1c <displayProgramFault(char const*)>
c0017ea9:	83 c4 10             	add    esp,0x10
c0017eac:	83 ec 0c             	sub    esp,0xc
c0017eaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017eb3:	e8 63 fb ff ff       	call   c0017a1b <displayDebugInfo(regs*)>
c0017eb8:	83 c4 10             	add    esp,0x10
c0017ebb:	83 ec 0c             	sub    esp,0xc
c0017ebe:	6a 00                	push   0x0
c0017ec0:	e8 a3 ed ff ff       	call   c0016c68 <Thr::terminateFromIRQ(int)>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	eb 01                	jmp    c0017ecb <gpFault(regs*, void*)+0x63>
c0017eca:	90                   	nop
c0017ecb:	83 c4 1c             	add    esp,0x1c
c0017ece:	c3                   	ret    

c0017ecf <pgFault(regs*, void*)>:
c0017ecf:	83 ec 1c             	sub    esp,0x1c
c0017ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ed9:	0f 20 d0             	mov    eax,cr2
c0017edc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ee4:	83 ec 04             	sub    esp,0x4
c0017ee7:	52                   	push   edx
c0017ee8:	50                   	push   eax
c0017ee9:	68 f0 2e 02 c0       	push   0xc0022ef0
c0017eee:	e8 b2 2a ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017ef3:	83 c4 10             	add    esp,0x10
c0017ef6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017efb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017efd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017f00:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017f06:	0f 20 d2             	mov    edx,cr2
c0017f09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f11:	83 ec 08             	sub    esp,0x8
c0017f14:	52                   	push   edx
c0017f15:	50                   	push   eax
c0017f16:	e8 d5 24 ff ff       	call   c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	0f b6 c0             	movzx  eax,al
c0017f21:	85 c0                	test   eax,eax
c0017f23:	75 2e                	jne    c0017f53 <pgFault(regs*, void*)+0x84>
c0017f25:	83 ec 0c             	sub    esp,0xc
c0017f28:	68 2b 2e 02 c0       	push   0xc0022e2b
c0017f2d:	e8 ea fe ff ff       	call   c0017e1c <displayProgramFault(char const*)>
c0017f32:	83 c4 10             	add    esp,0x10
c0017f35:	83 ec 0c             	sub    esp,0xc
c0017f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f3c:	e8 da fa ff ff       	call   c0017a1b <displayDebugInfo(regs*)>
c0017f41:	83 c4 10             	add    esp,0x10
c0017f44:	83 ec 0c             	sub    esp,0xc
c0017f47:	6a 00                	push   0x0
c0017f49:	e8 1a ed ff ff       	call   c0016c68 <Thr::terminateFromIRQ(int)>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	eb 01                	jmp    c0017f54 <pgFault(regs*, void*)+0x85>
c0017f53:	90                   	nop
c0017f54:	83 c4 1c             	add    esp,0x1c
c0017f57:	c3                   	ret    

c0017f58 <otherISRHandler(regs*, void*)>:
c0017f58:	83 ec 0c             	sub    esp,0xc
c0017f5b:	83 ec 0c             	sub    esp,0xc
c0017f5e:	68 18 2f 02 c0       	push   0xc0022f18
c0017f63:	e8 b4 fe ff ff       	call   c0017e1c <displayProgramFault(char const*)>
c0017f68:	83 c4 10             	add    esp,0x10
c0017f6b:	83 ec 0c             	sub    esp,0xc
c0017f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f72:	e8 a4 fa ff ff       	call   c0017a1b <displayDebugInfo(regs*)>
c0017f77:	83 c4 10             	add    esp,0x10
c0017f7a:	83 ec 0c             	sub    esp,0xc
c0017f7d:	6a 00                	push   0x0
c0017f7f:	e8 e4 ec ff ff       	call   c0016c68 <Thr::terminateFromIRQ(int)>
c0017f84:	83 c4 10             	add    esp,0x10
c0017f87:	90                   	nop
c0017f88:	83 c4 0c             	add    esp,0xc
c0017f8b:	c3                   	ret    

c0017f8c <opcodeFault(regs*, void*)>:
c0017f8c:	55                   	push   ebp
c0017f8d:	89 e5                	mov    ebp,esp
c0017f8f:	83 ec 08             	sub    esp,0x8
c0017f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f95:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f98:	83 ec 08             	sub    esp,0x8
c0017f9b:	50                   	push   eax
c0017f9c:	68 36 2e 02 c0       	push   0xc0022e36
c0017fa1:	e8 ff 29 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017fa6:	83 c4 10             	add    esp,0x10
c0017fa9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017fae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017fb4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017fba:	0f b6 c0             	movzx  eax,al
c0017fbd:	85 c0                	test   eax,eax
c0017fbf:	74 21                	je     c0017fe2 <opcodeFault(regs*, void*)+0x56>
c0017fc1:	83 ec 0c             	sub    esp,0xc
c0017fc4:	68 40 2f 02 c0       	push   0xc0022f40
c0017fc9:	e8 d7 29 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0017fce:	83 c4 10             	add    esp,0x10
c0017fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fd4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017fd7:	8d 50 19             	lea    edx,[eax+0x19]
c0017fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fdd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017fe0:	eb 2b                	jmp    c001800d <opcodeFault(regs*, void*)+0x81>
c0017fe2:	83 ec 0c             	sub    esp,0xc
c0017fe5:	68 44 2e 02 c0       	push   0xc0022e44
c0017fea:	e8 2d fe ff ff       	call   c0017e1c <displayProgramFault(char const*)>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	83 ec 0c             	sub    esp,0xc
c0017ff5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017ff8:	e8 1e fa ff ff       	call   c0017a1b <displayDebugInfo(regs*)>
c0017ffd:	83 c4 10             	add    esp,0x10
c0018000:	83 ec 0c             	sub    esp,0xc
c0018003:	6a 00                	push   0x0
c0018005:	e8 5e ec ff ff       	call   c0016c68 <Thr::terminateFromIRQ(int)>
c001800a:	83 c4 10             	add    esp,0x10
c001800d:	c9                   	leave  
c001800e:	c3                   	ret    

c001800f <i386SaveCoprocessor(void*)>:
c001800f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018013:	83 c0 3f             	add    eax,0x3f
c0018016:	83 e0 c0             	and    eax,0xffffffc0
c0018019:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001801d:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0018023 <i386LoadCoprocessor(void*)>:
c0018023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018027:	83 c0 3f             	add    eax,0x3f
c001802a:	83 e0 c0             	and    eax,0xffffffc0
c001802d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018031:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0018037 <x87EmulHandler(regs*, void*)>:
c0018037:	53                   	push   ebx
c0018038:	83 ec 08             	sub    esp,0x8
c001803b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018040:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018044:	74 10                	je     c0018056 <x87EmulHandler(regs*, void*)+0x1f>
c0018046:	83 ec 0c             	sub    esp,0xc
c0018049:	68 51 2e 02 c0       	push   0xc0022e51
c001804e:	e8 a4 96 ff ff       	call   c00116f7 <KePanic(char const*)>
c0018053:	83 c4 10             	add    esp,0x10
c0018056:	0f 20 c0             	mov    eax,cr0
c0018059:	a8 08                	test   al,0x8
c001805b:	74 59                	je     c00180b6 <x87EmulHandler(regs*, void*)+0x7f>
c001805d:	0f 06                	clts   
c001805f:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018064:	85 c0                	test   eax,eax
c0018066:	74 0e                	je     c0018076 <x87EmulHandler(regs*, void*)+0x3f>
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001806e:	e8 9c ff ff ff       	call   c001800f <i386SaveCoprocessor(void*)>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001807c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018080:	75 12                	jne    c0018094 <x87EmulHandler(regs*, void*)+0x5d>
c0018082:	83 ec 0c             	sub    esp,0xc
c0018085:	68 40 02 00 00       	push   0x240
c001808a:	e8 87 fa fe ff       	call   c0007b16 <malloc>
c001808f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018092:	eb 10                	jmp    c00180a4 <x87EmulHandler(regs*, void*)+0x6d>
c0018094:	83 ec 0c             	sub    esp,0xc
c0018097:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001809c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001809f:	e8 7f ff ff ff       	call   c0018023 <i386LoadCoprocessor(void*)>
c00180a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c00180b1:	83 c4 08             	add    esp,0x8
c00180b4:	5b                   	pop    ebx
c00180b5:	c3                   	ret    
c00180b6:	83 ec 0c             	sub    esp,0xc
c00180b9:	68 65 2e 02 c0       	push   0xc0022e65
c00180be:	e8 e2 28 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c00180c3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00180cb:	83 c4 18             	add    esp,0x18
c00180ce:	5b                   	pop    ebx
c00180cf:	e9 94 eb ff ff       	jmp    c0016c68 <Thr::terminateFromIRQ(int)>

c00180d4 <HalInitialiseCoprocessor()>:
c00180d4:	83 ec 10             	sub    esp,0x10
c00180d7:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c00180e1:	6a 00                	push   0x0
c00180e3:	68 37 80 01 c0       	push   0xc0018037
c00180e8:	6a 07                	push   0x7
c00180ea:	e8 6b 4e ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180ef:	e8 4c 70 00 00       	call   c001f140 <avxDetect>
c00180f4:	83 c4 10             	add    esp,0x10
c00180f7:	85 c0                	test   eax,eax
c00180f9:	74 1c                	je     c0018117 <HalInitialiseCoprocessor()+0x43>
c00180fb:	c7 05 70 c7 02 c0 6a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f16a
c0018105:	c7 05 6c c7 02 c0 7b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f17b
c001810f:	83 c4 0c             	add    esp,0xc
c0018112:	e9 75 70 00 00       	jmp    c001f18c <avxInit>
c0018117:	e8 b4 73 00 00       	call   c001f4d0 <absolutelyNoChanceInHell>
c001811c:	85 c0                	test   eax,eax
c001811e:	74 1c                	je     c001813c <HalInitialiseCoprocessor()+0x68>
c0018120:	c7 05 70 c7 02 c0 e8 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4e8
c001812a:	c7 05 6c c7 02 c0 f0 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4f0
c0018134:	83 c4 0c             	add    esp,0xc
c0018137:	e9 bc 73 00 00       	jmp    c001f4f8 <sseInit>
c001813c:	e8 d5 73 00 00       	call   c001f516 <x87Detect>
c0018141:	85 c0                	test   eax,eax
c0018143:	74 1c                	je     c0018161 <HalInitialiseCoprocessor()+0x8d>
c0018145:	c7 05 70 c7 02 c0 31 f5 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f531
c001814f:	c7 05 6c c7 02 c0 38 f5 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f538
c0018159:	83 c4 0c             	add    esp,0xc
c001815c:	e9 de 73 00 00       	jmp    c001f53f <x87Init>
c0018161:	c7 05 70 c7 02 c0 e8 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00179e8
c001816b:	c7 05 6c c7 02 c0 e8 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00179e8
c0018175:	0f 20 c0             	mov    eax,cr0
c0018178:	83 c8 04             	or     eax,0x4
c001817b:	0f 22 c0             	mov    cr0,eax
c001817e:	83 c4 0c             	add    esp,0xc
c0018181:	c3                   	ret    

c0018182 <HalPanic(char const*)>:
c0018182:	53                   	push   ebx
c0018183:	83 ec 10             	sub    esp,0x10
c0018186:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001818a:	fa                   	cli    
c001818b:	53                   	push   ebx
c001818c:	68 7b 2e 02 c0       	push   0xc0022e7b
c0018191:	e8 0f 28 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c0018196:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001819b:	83 c4 10             	add    esp,0x10
c001819e:	85 c0                	test   eax,eax
c00181a0:	74 09                	je     c00181ab <HalPanic(char const*)+0x29>
c00181a2:	83 ec 0c             	sub    esp,0xc
c00181a5:	53                   	push   ebx
c00181a6:	ff d0                	call   eax
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00181b0:	85 c0                	test   eax,eax
c00181b2:	0f 84 dc 00 00 00    	je     c0018294 <HalPanic(char const*)+0x112>
c00181b8:	52                   	push   edx
c00181b9:	6a 01                	push   0x1
c00181bb:	6a 0f                	push   0xf
c00181bd:	50                   	push   eax
c00181be:	e8 51 04 ff ff       	call   c0008614 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181c3:	59                   	pop    ecx
c00181c4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ca:	e8 35 06 ff ff       	call   c0008804 <VgaText::clearScreen()>
c00181cf:	58                   	pop    eax
c00181d0:	5a                   	pop    edx
c00181d1:	68 ec 0f 02 c0       	push   0xc0020fec
c00181d6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181dc:	e8 6b 04 ff ff       	call   c000864c <VgaText::setTitle(char*)>
c00181e1:	83 c4 0c             	add    esp,0xc
c00181e4:	6a 01                	push   0x1
c00181e6:	6a 0f                	push   0xf
c00181e8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ee:	e8 21 04 ff ff       	call   c0008614 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181f3:	59                   	pop    ecx
c00181f4:	58                   	pop    eax
c00181f5:	68 94 2e 02 c0       	push   0xc0022e94
c00181fa:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018200:	e8 01 09 ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0018205:	83 c4 0c             	add    esp,0xc
c0018208:	6a 0f                	push   0xf
c001820a:	6a 01                	push   0x1
c001820c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018212:	e8 fd 03 ff ff       	call   c0008614 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018217:	58                   	pop    eax
c0018218:	5a                   	pop    edx
c0018219:	68 9d 2e 02 c0       	push   0xc0022e9d
c001821e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018224:	e8 dd 08 ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0018229:	83 c4 0c             	add    esp,0xc
c001822c:	6a 01                	push   0x1
c001822e:	6a 0f                	push   0xf
c0018230:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018236:	e8 d9 03 ff ff       	call   c0008614 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001823b:	59                   	pop    ecx
c001823c:	58                   	pop    eax
c001823d:	68 e1 2e 02 c0       	push   0xc0022ee1
c0018242:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018248:	e8 b9 08 ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c001824d:	58                   	pop    eax
c001824e:	5a                   	pop    edx
c001824f:	68 aa 2e 02 c0       	push   0xc0022eaa
c0018254:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001825a:	e8 a7 08 ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c001825f:	59                   	pop    ecx
c0018260:	58                   	pop    eax
c0018261:	68 e4 2e 02 c0       	push   0xc0022ee4
c0018266:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001826c:	e8 95 08 ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0018271:	58                   	pop    eax
c0018272:	5a                   	pop    edx
c0018273:	53                   	push   ebx
c0018274:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001827a:	e8 87 08 ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c001827f:	59                   	pop    ecx
c0018280:	5b                   	pop    ebx
c0018281:	68 e1 2e 02 c0       	push   0xc0022ee1
c0018286:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001828c:	e8 75 08 ff ff       	call   c0008b06 <VgaText::puts(char const*)>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	eb fe                	jmp    c0018294 <HalPanic(char const*)+0x112>

c0018296 <HalQueryPerformanceCounter()>:
c0018296:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001829b:	31 d2                	xor    edx,edx
c001829d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00182a3:	31 c0                	xor    eax,eax
c00182a5:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00182ac:	74 02                	je     c00182b0 <HalQueryPerformanceCounter()+0x1a>
c00182ae:	0f 31                	rdtsc  
c00182b0:	c3                   	ret    

c00182b1 <HalInitialise()>:
c00182b1:	53                   	push   ebx
c00182b2:	83 ec 08             	sub    esp,0x8
c00182b5:	e8 d0 4e ff ff       	call   c000d18a <setupINTS()>
c00182ba:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00182c1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182c6:	75 0f                	jne    c00182d7 <HalInitialise()+0x26>
c00182c8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00182ce:	83 e2 fe             	and    edx,0xfffffffe
c00182d1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00182d7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00182dd:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00182e4:	83 e2 fe             	and    edx,0xfffffffe
c00182e7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00182ed:	e8 9e 02 00 00       	call   c0018590 <picOpen()>
c00182f2:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00182f9:	74 0a                	je     c0018305 <HalInitialise()+0x54>
c00182fb:	e8 e0 01 00 00       	call   c00184e0 <picDisable()>
c0018300:	e8 ad 67 00 00       	call   c001eab2 <apicOpen()>
c0018305:	bb 0f 00 00 00       	mov    ebx,0xf
c001830a:	50                   	push   eax
c001830b:	6a 00                	push   0x0
c001830d:	68 58 7f 01 c0       	push   0xc0017f58
c0018312:	6a 00                	push   0x0
c0018314:	e8 41 4c ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018319:	83 c4 0c             	add    esp,0xc
c001831c:	6a 00                	push   0x0
c001831e:	68 58 7f 01 c0       	push   0xc0017f58
c0018323:	6a 01                	push   0x1
c0018325:	e8 30 4c ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001832a:	83 c4 0c             	add    esp,0xc
c001832d:	6a 00                	push   0x0
c001832f:	68 e9 79 01 c0       	push   0xc00179e9
c0018334:	6a 02                	push   0x2
c0018336:	e8 1f 4c ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001833b:	83 c4 0c             	add    esp,0xc
c001833e:	6a 00                	push   0x0
c0018340:	68 58 7f 01 c0       	push   0xc0017f58
c0018345:	6a 03                	push   0x3
c0018347:	e8 0e 4c ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001834c:	83 c4 0c             	add    esp,0xc
c001834f:	6a 00                	push   0x0
c0018351:	68 58 7f 01 c0       	push   0xc0017f58
c0018356:	6a 04                	push   0x4
c0018358:	e8 fd 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001835d:	83 c4 0c             	add    esp,0xc
c0018360:	6a 00                	push   0x0
c0018362:	68 58 7f 01 c0       	push   0xc0017f58
c0018367:	6a 05                	push   0x5
c0018369:	e8 ec 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001836e:	83 c4 0c             	add    esp,0xc
c0018371:	6a 00                	push   0x0
c0018373:	68 8c 7f 01 c0       	push   0xc0017f8c
c0018378:	6a 06                	push   0x6
c001837a:	e8 db 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001837f:	83 c4 0c             	add    esp,0xc
c0018382:	6a 00                	push   0x0
c0018384:	68 02 7a 01 c0       	push   0xc0017a02
c0018389:	6a 08                	push   0x8
c001838b:	e8 ca 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018390:	83 c4 0c             	add    esp,0xc
c0018393:	6a 00                	push   0x0
c0018395:	68 58 7f 01 c0       	push   0xc0017f58
c001839a:	6a 09                	push   0x9
c001839c:	e8 b9 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183a1:	83 c4 0c             	add    esp,0xc
c00183a4:	6a 00                	push   0x0
c00183a6:	68 58 7f 01 c0       	push   0xc0017f58
c00183ab:	6a 0a                	push   0xa
c00183ad:	e8 a8 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183b2:	83 c4 0c             	add    esp,0xc
c00183b5:	6a 00                	push   0x0
c00183b7:	68 58 7f 01 c0       	push   0xc0017f58
c00183bc:	6a 0b                	push   0xb
c00183be:	e8 97 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183c3:	83 c4 0c             	add    esp,0xc
c00183c6:	6a 00                	push   0x0
c00183c8:	68 68 7e 01 c0       	push   0xc0017e68
c00183cd:	6a 0d                	push   0xd
c00183cf:	e8 86 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183d4:	83 c4 0c             	add    esp,0xc
c00183d7:	6a 00                	push   0x0
c00183d9:	68 cf 7e 01 c0       	push   0xc0017ecf
c00183de:	6a 0e                	push   0xe
c00183e0:	e8 75 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	50                   	push   eax
c00183e9:	6a 00                	push   0x0
c00183eb:	68 58 7f 01 c0       	push   0xc0017f58
c00183f0:	53                   	push   ebx
c00183f1:	43                   	inc    ebx
c00183f2:	e8 63 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183f7:	83 c4 10             	add    esp,0x10
c00183fa:	83 fb 1e             	cmp    ebx,0x1e
c00183fd:	75 e9                	jne    c00183e8 <HalInitialise()+0x137>
c00183ff:	50                   	push   eax
c0018400:	6a 00                	push   0x0
c0018402:	68 90 2b 01 c0       	push   0xc0012b90
c0018407:	6a 60                	push   0x60
c0018409:	e8 4c 4b ff ff       	call   c000cf5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001840e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018413:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001841d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018424:	e8 ed f6 fe ff       	call   c0007b16 <malloc>
c0018429:	89 04 24             	mov    DWORD PTR [esp],eax
c001842c:	89 c3                	mov    ebx,eax
c001842e:	e8 3b 09 00 00       	call   c0018d6e <RTC::RTC()>
c0018433:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001843d:	5a                   	pop    edx
c001843e:	59                   	pop    ecx
c001843f:	53                   	push   ebx
c0018440:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018446:	e8 db 45 ff ff       	call   c000ca26 <Device::addChild(Device*)>
c001844b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001844d:	6a 00                	push   0x0
c001844f:	6a 00                	push   0x0
c0018451:	6a 00                	push   0x0
c0018453:	53                   	push   ebx
c0018454:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018457:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001845c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018462:	83 c4 28             	add    esp,0x28
c0018465:	5b                   	pop    ebx
c0018466:	c3                   	ret    

c0018467 <HalMakeBeep(int)>:
c0018467:	53                   	push   ebx
c0018468:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001846c:	85 db                	test   ebx,ebx
c001846e:	75 07                	jne    c0018477 <HalMakeBeep(int)+0x10>
c0018470:	e4 61                	in     al,0x61
c0018472:	83 e0 fc             	and    eax,0xfffffffc
c0018475:	eb 26                	jmp    c001849d <HalMakeBeep(int)+0x36>
c0018477:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001847c:	99                   	cdq    
c001847d:	f7 fb                	idiv   ebx
c001847f:	89 c1                	mov    ecx,eax
c0018481:	b0 b6                	mov    al,0xb6
c0018483:	e6 43                	out    0x43,al
c0018485:	88 c8                	mov    al,cl
c0018487:	e6 42                	out    0x42,al
c0018489:	89 c8                	mov    eax,ecx
c001848b:	c1 e8 08             	shr    eax,0x8
c001848e:	e6 42                	out    0x42,al
c0018490:	e4 61                	in     al,0x61
c0018492:	89 c2                	mov    edx,eax
c0018494:	83 ca 03             	or     edx,0x3
c0018497:	38 d0                	cmp    al,dl
c0018499:	74 04                	je     c001849f <HalMakeBeep(int)+0x38>
c001849b:	88 d0                	mov    al,dl
c001849d:	e6 61                	out    0x61,al
c001849f:	5b                   	pop    ebx
c00184a0:	c3                   	ret    

c00184a1 <HalGetRand()>:
c00184a1:	31 c0                	xor    eax,eax
c00184a3:	c3                   	ret    

c00184a4 <HalEndOfInterrupt(int)>:
c00184a4:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00184ab:	74 23                	je     c00184d0 <HalEndOfInterrupt(int)+0x2c>
c00184ad:	83 ec 14             	sub    esp,0x14
c00184b0:	6a 1b                	push   0x1b
c00184b2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00184b8:	e8 65 ec fe ff       	call   c0007122 <Computer::rdmsr(unsigned int)>
c00184bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00184c2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00184cc:	83 c4 1c             	add    esp,0x1c
c00184cf:	c3                   	ret    
c00184d0:	e9 3f 02 00 00       	jmp    c0018714 <picEOI(int)>

c00184d5 <HalRestart()>:
c00184d5:	c3                   	ret    

c00184d6 <HalShutdown()>:
c00184d6:	c3                   	ret    

c00184d7 <HalSleep()>:
c00184d7:	c3                   	ret    

c00184d8 <picIoWait()>:
c00184d8:	eb 00                	jmp    c00184da <picIoWait()+0x2>
c00184da:	eb 00                	jmp    c00184dc <picIoWait()+0x4>
c00184dc:	90                   	nop
c00184dd:	c3                   	ret    
c00184de:	66 90                	xchg   ax,ax

c00184e0 <picDisable()>:
c00184e0:	83 ec 10             	sub    esp,0x10
c00184e3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00184ea:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00184ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00184f8:	ee                   	out    dx,al
c00184f9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018500:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018505:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018509:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001850e:	ee                   	out    dx,al
c001850f:	90                   	nop
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	c3                   	ret    

c0018514 <picGetIRQReg(int)>:
c0018514:	83 ec 10             	sub    esp,0x10
c0018517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001851b:	0f b6 c0             	movzx  eax,al
c001851e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018525:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018529:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001852d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018532:	ee                   	out    dx,al
c0018533:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018537:	0f b6 c0             	movzx  eax,al
c001853a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018541:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018545:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018549:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001854e:	ee                   	out    dx,al
c001854f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018556:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001855b:	89 c2                	mov    edx,eax
c001855d:	ec                   	in     al,dx
c001855e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018562:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018566:	0f b6 c0             	movzx  eax,al
c0018569:	c1 e0 08             	shl    eax,0x8
c001856c:	89 c1                	mov    ecx,eax
c001856e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018575:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001857a:	89 c2                	mov    edx,eax
c001857c:	ec                   	in     al,dx
c001857d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018581:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018585:	0f b6 c0             	movzx  eax,al
c0018588:	09 c8                	or     eax,ecx
c001858a:	83 c4 10             	add    esp,0x10
c001858d:	c3                   	ret    
c001858e:	66 90                	xchg   ax,ax

c0018590 <picOpen()>:
c0018590:	83 ec 50             	sub    esp,0x50
c0018593:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001859a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001859f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00185a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185a7:	ee                   	out    dx,al
c00185a8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00185af:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00185b4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00185b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00185bc:	ee                   	out    dx,al
c00185bd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00185c5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00185cd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00185d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185d8:	89 c2                	mov    edx,eax
c00185da:	ec                   	in     al,dx
c00185db:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00185df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00185e3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00185e7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00185ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185f2:	89 c2                	mov    edx,eax
c00185f4:	ec                   	in     al,dx
c00185f5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00185f9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00185fd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018601:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018608:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001860d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018611:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018615:	ee                   	out    dx,al
c0018616:	e8 bd fe ff ff       	call   c00184d8 <picIoWait()>
c001861b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018622:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018627:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001862b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001862f:	ee                   	out    dx,al
c0018630:	e8 a3 fe ff ff       	call   c00184d8 <picIoWait()>
c0018635:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018639:	0f b6 c0             	movzx  eax,al
c001863c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018643:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018647:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001864b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001864f:	ee                   	out    dx,al
c0018650:	e8 83 fe ff ff       	call   c00184d8 <picIoWait()>
c0018655:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018659:	0f b6 c0             	movzx  eax,al
c001865c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018663:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018667:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001866b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001866f:	ee                   	out    dx,al
c0018670:	e8 63 fe ff ff       	call   c00184d8 <picIoWait()>
c0018675:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001867c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018681:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018685:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018689:	ee                   	out    dx,al
c001868a:	e8 49 fe ff ff       	call   c00184d8 <picIoWait()>
c001868f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018696:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001869b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001869f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00186a3:	ee                   	out    dx,al
c00186a4:	e8 2f fe ff ff       	call   c00184d8 <picIoWait()>
c00186a9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00186b0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00186b5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00186b9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00186bd:	ee                   	out    dx,al
c00186be:	e8 15 fe ff ff       	call   c00184d8 <picIoWait()>
c00186c3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00186ca:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00186cf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00186d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00186d7:	ee                   	out    dx,al
c00186d8:	e8 fb fd ff ff       	call   c00184d8 <picIoWait()>
c00186dd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00186e2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00186e9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00186ed:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00186f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00186f5:	ee                   	out    dx,al
c00186f6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00186fb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018702:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018706:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001870a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001870e:	ee                   	out    dx,al
c001870f:	90                   	nop
c0018710:	83 c4 50             	add    esp,0x50
c0018713:	c3                   	ret    

c0018714 <picEOI(int)>:
c0018714:	83 ec 10             	sub    esp,0x10
c0018717:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001871c:	75 1e                	jne    c001873c <picEOI(int)+0x28>
c001871e:	6a 0b                	push   0xb
c0018720:	e8 ef fd ff ff       	call   c0018514 <picGetIRQReg(int)>
c0018725:	83 c4 04             	add    esp,0x4
c0018728:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001872d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018732:	25 80 00 00 00       	and    eax,0x80
c0018737:	74 73                	je     c00187ac <picEOI(int)+0x98>
c0018739:	8d 76 00             	lea    esi,[esi+0x0]
c001873c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018741:	75 31                	jne    c0018774 <picEOI(int)+0x60>
c0018743:	6a 0b                	push   0xb
c0018745:	e8 ca fd ff ff       	call   c0018514 <picGetIRQReg(int)>
c001874a:	83 c4 04             	add    esp,0x4
c001874d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018752:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018756:	98                   	cwde   
c0018757:	85 c0                	test   eax,eax
c0018759:	78 19                	js     c0018774 <picEOI(int)+0x60>
c001875b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018762:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018767:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001876b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018770:	ee                   	out    dx,al
c0018771:	eb 3d                	jmp    c00187b0 <picEOI(int)+0x9c>
c0018773:	90                   	nop
c0018774:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018779:	7e 19                	jle    c0018794 <picEOI(int)+0x80>
c001877b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018782:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018787:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001878b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018790:	ee                   	out    dx,al
c0018791:	8d 76 00             	lea    esi,[esi+0x0]
c0018794:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001879b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00187a0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00187a4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00187a9:	ee                   	out    dx,al
c00187aa:	eb 04                	jmp    c00187b0 <picEOI(int)+0x9c>
c00187ac:	90                   	nop
c00187ad:	8d 76 00             	lea    esi,[esi+0x0]
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	c3                   	ret    

c00187b4 <RTC::open(int, int, void*)>:
c00187b4:	31 c0                	xor    eax,eax
c00187b6:	c3                   	ret    
c00187b7:	90                   	nop

c00187b8 <RTC::close(int, int, void*)>:
c00187b8:	31 c0                	xor    eax,eax
c00187ba:	c3                   	ret    
c00187bb:	90                   	nop

c00187bc <RTC::timeInSecondsUTC()>:
c00187bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187c0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00187c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00187cc:	c3                   	ret    
c00187cd:	90                   	nop

c00187ce <RTC::timeInDatetimeUTC()>:
c00187ce:	53                   	push   ebx
c00187cf:	83 ec 14             	sub    esp,0x14
c00187d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187da:	8b 10                	mov    edx,DWORD PTR [eax]
c00187dc:	50                   	push   eax
c00187dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00187e0:	83 c4 0c             	add    esp,0xc
c00187e3:	52                   	push   edx
c00187e4:	50                   	push   eax
c00187e5:	53                   	push   ebx
c00187e6:	e8 af 3f ff ff       	call   c000c79a <secondsToDatetime(unsigned long long)>
c00187eb:	89 d8                	mov    eax,ebx
c00187ed:	83 c4 14             	add    esp,0x14
c00187f0:	5b                   	pop    ebx
c00187f1:	c2 04 00             	ret    0x4

c00187f4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00187f4:	56                   	push   esi
c00187f5:	53                   	push   ebx
c00187f6:	83 ec 14             	sub    esp,0x14
c00187f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00187fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00187ff:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018802:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018806:	52                   	push   edx
c0018807:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001880b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001880f:	50                   	push   eax
c0018810:	e8 85 3f ff ff       	call   c000c79a <secondsToDatetime(unsigned long long)>
c0018815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018819:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001881d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018821:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018825:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018829:	89 f0                	mov    eax,esi
c001882b:	83 c4 20             	add    esp,0x20
c001882e:	5b                   	pop    ebx
c001882f:	5e                   	pop    esi
c0018830:	ff e0                	jmp    eax

c0018832 <RTC::~RTC()>:
c0018832:	83 ec 0c             	sub    esp,0xc
c0018835:	ba 80 2f 02 c0       	mov    edx,0xc0022f80
c001883a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001883e:	89 10                	mov    DWORD PTR [eax],edx
c0018840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018844:	83 ec 0c             	sub    esp,0xc
c0018847:	50                   	push   eax
c0018848:	e8 df 3c ff ff       	call   c000c52c <Clock::~Clock()>
c001884d:	83 c4 10             	add    esp,0x10
c0018850:	90                   	nop
c0018851:	83 c4 0c             	add    esp,0xc
c0018854:	c3                   	ret    
c0018855:	90                   	nop

c0018856 <RTC::~RTC()>:
c0018856:	83 ec 0c             	sub    esp,0xc
c0018859:	83 ec 0c             	sub    esp,0xc
c001885c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018860:	e8 cd ff ff ff       	call   c0018832 <RTC::~RTC()>
c0018865:	83 c4 10             	add    esp,0x10
c0018868:	83 ec 08             	sub    esp,0x8
c001886b:	68 60 01 00 00       	push   0x160
c0018870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018874:	e8 ff 1f ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0018879:	83 c4 10             	add    esp,0x10
c001887c:	83 c4 0c             	add    esp,0xc
c001887f:	c3                   	ret    

c0018880 <RTC::get_update_in_progress_flag()>:
c0018880:	83 ec 14             	sub    esp,0x14
c0018883:	6a 0a                	push   0xa
c0018885:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001888b:	e8 4a e9 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018890:	83 c4 1c             	add    esp,0x1c
c0018893:	0f b6 c0             	movzx  eax,al
c0018896:	c1 e8 07             	shr    eax,0x7
c0018899:	c3                   	ret    

c001889a <RTC::completeRTCRefresh()>:
c001889a:	55                   	push   ebp
c001889b:	57                   	push   edi
c001889c:	56                   	push   esi
c001889d:	53                   	push   ebx
c001889e:	83 ec 3c             	sub    esp,0x3c
c00188a1:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00188a7:	83 ec 0c             	sub    esp,0xc
c00188aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00188ae:	e8 cd ff ff ff       	call   c0018880 <RTC::get_update_in_progress_flag()>
c00188b3:	83 c4 10             	add    esp,0x10
c00188b6:	84 c0                	test   al,al
c00188b8:	74 0e                	je     c00188c8 <RTC::completeRTCRefresh()+0x2e>
c00188ba:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188c0:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188c6:	73 df                	jae    c00188a7 <RTC::completeRTCRefresh()+0xd>
c00188c8:	51                   	push   ecx
c00188c9:	51                   	push   ecx
c00188ca:	6a 00                	push   0x0
c00188cc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188d2:	e8 03 e9 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c00188d7:	5b                   	pop    ebx
c00188d8:	89 c7                	mov    edi,eax
c00188da:	5e                   	pop    esi
c00188db:	6a 02                	push   0x2
c00188dd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188e3:	e8 f2 e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c00188e8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00188ec:	5d                   	pop    ebp
c00188ed:	58                   	pop    eax
c00188ee:	6a 04                	push   0x4
c00188f0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188f6:	e8 df e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c00188fb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00188ff:	58                   	pop    eax
c0018900:	5a                   	pop    edx
c0018901:	6a 07                	push   0x7
c0018903:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018909:	e8 cc e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c001890e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018912:	59                   	pop    ecx
c0018913:	5b                   	pop    ebx
c0018914:	6a 08                	push   0x8
c0018916:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001891c:	e8 b9 e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018921:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018925:	5e                   	pop    esi
c0018926:	5d                   	pop    ebp
c0018927:	6a 09                	push   0x9
c0018929:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001892f:	e8 a6 e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018934:	0f b6 c0             	movzx  eax,al
c0018937:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018944:	83 ec 0c             	sub    esp,0xc
c0018947:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001894b:	e8 30 ff ff ff       	call   c0018880 <RTC::get_update_in_progress_flag()>
c0018950:	83 c4 10             	add    esp,0x10
c0018953:	84 c0                	test   al,al
c0018955:	74 0e                	je     c0018965 <RTC::completeRTCRefresh()+0xcb>
c0018957:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001895d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018963:	73 df                	jae    c0018944 <RTC::completeRTCRefresh()+0xaa>
c0018965:	51                   	push   ecx
c0018966:	51                   	push   ecx
c0018967:	6a 00                	push   0x0
c0018969:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001896f:	e8 66 e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018974:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018978:	5b                   	pop    ebx
c0018979:	5e                   	pop    esi
c001897a:	6a 02                	push   0x2
c001897c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018982:	e8 53 e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018987:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001898b:	5d                   	pop    ebp
c001898c:	58                   	pop    eax
c001898d:	6a 04                	push   0x4
c001898f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018995:	e8 40 e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c001899a:	88 c3                	mov    bl,al
c001899c:	58                   	pop    eax
c001899d:	5a                   	pop    edx
c001899e:	6a 07                	push   0x7
c00189a0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189a6:	e8 2f e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c00189ab:	59                   	pop    ecx
c00189ac:	89 c6                	mov    esi,eax
c00189ae:	5d                   	pop    ebp
c00189af:	6a 08                	push   0x8
c00189b1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189b7:	e8 1e e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c00189bc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00189c0:	58                   	pop    eax
c00189c1:	5a                   	pop    edx
c00189c2:	6a 09                	push   0x9
c00189c4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189ca:	e8 0b e8 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c00189cf:	89 f9                	mov    ecx,edi
c00189d1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00189d5:	0f b6 e8             	movzx  ebp,al
c00189d8:	83 c4 10             	add    esp,0x10
c00189db:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00189df:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189e4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00189e9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00189ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189f1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00189f5:	0f 94 c0             	sete   al
c00189f8:	0f b6 fb             	movzx  edi,bl
c00189fb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00189ff:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018a04:	0f 94 c2             	sete   dl
c0018a07:	21 d0                	and    eax,edx
c0018a09:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018a0d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018a11:	0f 94 c2             	sete   dl
c0018a14:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018a18:	21 c2                	and    edx,eax
c0018a1a:	89 f0                	mov    eax,esi
c0018a1c:	0f b6 c0             	movzx  eax,al
c0018a1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a23:	89 f0                	mov    eax,esi
c0018a25:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018a29:	0f 94 c0             	sete   al
c0018a2c:	21 d0                	and    eax,edx
c0018a2e:	31 d2                	xor    edx,edx
c0018a30:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018a34:	0f 94 c2             	sete   dl
c0018a37:	85 c2                	test   edx,eax
c0018a39:	75 27                	jne    c0018a62 <RTC::completeRTCRefresh()+0x1c8>
c0018a3b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018a3f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018a43:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018a47:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018a4b:	89 f0                	mov    eax,esi
c0018a4d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018a51:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018a55:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a59:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018a5d:	e9 dc fe ff ff       	jmp    c001893e <RTC::completeRTCRefresh()+0xa4>
c0018a62:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018a66:	75 d3                	jne    c0018a3b <RTC::completeRTCRefresh()+0x1a1>
c0018a68:	52                   	push   edx
c0018a69:	52                   	push   edx
c0018a6a:	6a 0b                	push   0xb
c0018a6c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a72:	e8 63 e7 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018a77:	83 c4 10             	add    esp,0x10
c0018a7a:	a8 04                	test   al,0x4
c0018a7c:	75 7a                	jne    c0018af8 <RTC::completeRTCRefresh()+0x25e>
c0018a7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a86:	83 e1 0f             	and    ecx,0xf
c0018a89:	c1 ea 04             	shr    edx,0x4
c0018a8c:	c1 ef 04             	shr    edi,0x4
c0018a8f:	6b d2 0a             	imul   edx,edx,0xa
c0018a92:	83 e6 0f             	and    esi,0xf
c0018a95:	01 d1                	add    ecx,edx
c0018a97:	c1 ed 04             	shr    ebp,0x4
c0018a9a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a9e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018aa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018aa6:	c1 ea 04             	shr    edx,0x4
c0018aa9:	83 e1 0f             	and    ecx,0xf
c0018aac:	6b d2 0a             	imul   edx,edx,0xa
c0018aaf:	6b ed 0a             	imul   ebp,ebp,0xa
c0018ab2:	01 d1                	add    ecx,edx
c0018ab4:	89 fa                	mov    edx,edi
c0018ab6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018aba:	83 e2 07             	and    edx,0x7
c0018abd:	89 d9                	mov    ecx,ebx
c0018abf:	6b d2 0a             	imul   edx,edx,0xa
c0018ac2:	83 e1 0f             	and    ecx,0xf
c0018ac5:	83 e3 80             	and    ebx,0xffffff80
c0018ac8:	01 d1                	add    ecx,edx
c0018aca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ace:	09 cb                	or     ebx,ecx
c0018ad0:	c1 ea 04             	shr    edx,0x4
c0018ad3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018ad7:	6b d2 0a             	imul   edx,edx,0xa
c0018ada:	83 e1 0f             	and    ecx,0xf
c0018add:	01 d6                	add    esi,edx
c0018adf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ae3:	c1 ea 04             	shr    edx,0x4
c0018ae6:	6b d2 0a             	imul   edx,edx,0xa
c0018ae9:	01 d1                	add    ecx,edx
c0018aeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018aef:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018af3:	83 e2 0f             	and    edx,0xf
c0018af6:	01 d5                	add    ebp,edx
c0018af8:	a8 02                	test   al,0x2
c0018afa:	75 15                	jne    c0018b11 <RTC::completeRTCRefresh()+0x277>
c0018afc:	f6 c3 80             	test   bl,0x80
c0018aff:	74 10                	je     c0018b11 <RTC::completeRTCRefresh()+0x277>
c0018b01:	83 e3 7f             	and    ebx,0x7f
c0018b04:	b9 18 00 00 00       	mov    ecx,0x18
c0018b09:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018b0c:	99                   	cdq    
c0018b0d:	f7 f9                	idiv   ecx
c0018b0f:	88 d3                	mov    bl,dl
c0018b11:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018b17:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018b1d:	77 06                	ja     c0018b25 <RTC::completeRTCRefresh()+0x28b>
c0018b1f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018b25:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b2a:	31 c9                	xor    ecx,ecx
c0018b2c:	c1 e0 10             	shl    eax,0x10
c0018b2f:	89 cd                	mov    ebp,ecx
c0018b31:	c1 e7 10             	shl    edi,0x10
c0018b34:	31 d2                	xor    edx,edx
c0018b36:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018b3c:	09 c5                	or     ebp,eax
c0018b3e:	89 f0                	mov    eax,esi
c0018b40:	89 e9                	mov    ecx,ebp
c0018b42:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018b46:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018b4a:	88 c2                	mov    dl,al
c0018b4c:	88 d9                	mov    cl,bl
c0018b4e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018b52:	0f b7 c2             	movzx  eax,dx
c0018b55:	09 f8                	or     eax,edi
c0018b57:	89 c2                	mov    edx,eax
c0018b59:	50                   	push   eax
c0018b5a:	50                   	push   eax
c0018b5b:	51                   	push   ecx
c0018b5c:	52                   	push   edx
c0018b5d:	e8 b9 3a ff ff       	call   c000c61b <datetimeToSeconds(datetime_t)>
c0018b62:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018b66:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018b6c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018b72:	83 c4 4c             	add    esp,0x4c
c0018b75:	5b                   	pop    ebx
c0018b76:	5e                   	pop    esi
c0018b77:	5f                   	pop    edi
c0018b78:	5d                   	pop    ebp
c0018b79:	c3                   	ret    

c0018b7a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018b7a:	55                   	push   ebp
c0018b7b:	57                   	push   edi
c0018b7c:	56                   	push   esi
c0018b7d:	53                   	push   ebx
c0018b7e:	83 ec 30             	sub    esp,0x30
c0018b81:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018b85:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018b89:	6a 00                	push   0x0
c0018b8b:	6a 00                	push   0x0
c0018b8d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b93:	e8 5c e7 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b98:	83 c4 0c             	add    esp,0xc
c0018b9b:	6a 00                	push   0x0
c0018b9d:	6a 02                	push   0x2
c0018b9f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ba5:	e8 4a e7 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018baa:	31 d2                	xor    edx,edx
c0018bac:	89 f9                	mov    ecx,edi
c0018bae:	89 f8                	mov    eax,edi
c0018bb0:	c1 e9 10             	shr    ecx,0x10
c0018bb3:	0f b6 c4             	movzx  eax,ah
c0018bb6:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018bba:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018bbe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bc2:	b9 64 00 00 00       	mov    ecx,0x64
c0018bc7:	89 f0                	mov    eax,esi
c0018bc9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018bcd:	89 f0                	mov    eax,esi
c0018bcf:	0f b6 c4             	movzx  eax,ah
c0018bd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018bd6:	89 f0                	mov    eax,esi
c0018bd8:	c1 e8 10             	shr    eax,0x10
c0018bdb:	f7 f1                	div    ecx
c0018bdd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018be1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018be5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018be9:	59                   	pop    ecx
c0018bea:	5b                   	pop    ebx
c0018beb:	89 fb                	mov    ebx,edi
c0018bed:	6a 0b                	push   0xb
c0018bef:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bf5:	e8 e0 e5 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018bfa:	83 c4 10             	add    esp,0x10
c0018bfd:	89 c5                	mov    ebp,eax
c0018bff:	a8 04                	test   al,0x4
c0018c01:	75 6e                	jne    c0018c71 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018c03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018c07:	31 d2                	xor    edx,edx
c0018c09:	0f b6 c1             	movzx  eax,cl
c0018c0c:	b9 0a 00 00 00       	mov    ecx,0xa
c0018c11:	f7 f1                	div    ecx
c0018c13:	c1 e0 04             	shl    eax,0x4
c0018c16:	09 d0                	or     eax,edx
c0018c18:	31 d2                	xor    edx,edx
c0018c1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018c23:	f7 f1                	div    ecx
c0018c25:	c1 e0 04             	shl    eax,0x4
c0018c28:	09 d0                	or     eax,edx
c0018c2a:	31 d2                	xor    edx,edx
c0018c2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c30:	0f b6 c3             	movzx  eax,bl
c0018c33:	f7 f1                	div    ecx
c0018c35:	c1 e0 04             	shl    eax,0x4
c0018c38:	09 d0                	or     eax,edx
c0018c3a:	31 d2                	xor    edx,edx
c0018c3c:	89 c3                	mov    ebx,eax
c0018c3e:	89 f0                	mov    eax,esi
c0018c40:	0f b6 c0             	movzx  eax,al
c0018c43:	f7 f1                	div    ecx
c0018c45:	c1 e0 04             	shl    eax,0x4
c0018c48:	09 d0                	or     eax,edx
c0018c4a:	31 d2                	xor    edx,edx
c0018c4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c55:	f7 f1                	div    ecx
c0018c57:	c1 e0 04             	shl    eax,0x4
c0018c5a:	09 d0                	or     eax,edx
c0018c5c:	31 d2                	xor    edx,edx
c0018c5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c66:	f7 f1                	div    ecx
c0018c68:	c1 e0 04             	shl    eax,0x4
c0018c6b:	09 d0                	or     eax,edx
c0018c6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c71:	83 e5 02             	and    ebp,0x2
c0018c74:	75 1e                	jne    c0018c94 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c76:	0f b6 c3             	movzx  eax,bl
c0018c79:	83 f8 0b             	cmp    eax,0xb
c0018c7c:	76 10                	jbe    c0018c8e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018c7e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018c81:	88 d3                	mov    bl,dl
c0018c83:	84 d2                	test   dl,dl
c0018c85:	75 02                	jne    c0018c89 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018c87:	b3 0c                	mov    bl,0xc
c0018c89:	83 cb 80             	or     ebx,0xffffff80
c0018c8c:	eb 06                	jmp    c0018c94 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c8e:	85 c0                	test   eax,eax
c0018c90:	75 02                	jne    c0018c94 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c92:	b3 0c                	mov    bl,0xc
c0018c94:	0f b6 db             	movzx  ebx,bl
c0018c97:	50                   	push   eax
c0018c98:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c9d:	52                   	push   edx
c0018c9e:	6a 00                	push   0x0
c0018ca0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ca6:	e8 49 e6 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cab:	83 c4 0c             	add    esp,0xc
c0018cae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018cb3:	50                   	push   eax
c0018cb4:	6a 02                	push   0x2
c0018cb6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cbc:	e8 33 e6 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cc1:	83 c4 0c             	add    esp,0xc
c0018cc4:	53                   	push   ebx
c0018cc5:	6a 04                	push   0x4
c0018cc7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ccd:	e8 22 e6 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cd2:	83 c4 0c             	add    esp,0xc
c0018cd5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018cda:	52                   	push   edx
c0018cdb:	6a 07                	push   0x7
c0018cdd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ce3:	e8 0c e6 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ce8:	83 c4 0c             	add    esp,0xc
c0018ceb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018cf0:	50                   	push   eax
c0018cf1:	6a 08                	push   0x8
c0018cf3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cf9:	e8 f6 e5 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cfe:	83 c4 0c             	add    esp,0xc
c0018d01:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018d06:	55                   	push   ebp
c0018d07:	6a 09                	push   0x9
c0018d09:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018d0f:	e8 e0 e5 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d14:	5a                   	pop    edx
c0018d15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018d19:	e8 7c fb ff ff       	call   c001889a <RTC::completeRTCRefresh()>
c0018d1e:	83 c4 3c             	add    esp,0x3c
c0018d21:	b0 01                	mov    al,0x1
c0018d23:	5b                   	pop    ebx
c0018d24:	5e                   	pop    esi
c0018d25:	5f                   	pop    edi
c0018d26:	5d                   	pop    ebp
c0018d27:	c3                   	ret    

c0018d28 <rtcIRQHandler(regs*, void*)>:
c0018d28:	53                   	push   ebx
c0018d29:	83 ec 10             	sub    esp,0x10
c0018d2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018d30:	6a 0c                	push   0xc
c0018d32:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018d38:	e8 9d e4 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	a8 80                	test   al,0x80
c0018d42:	74 24                	je     c0018d68 <rtcIRQHandler(regs*, void*)+0x40>
c0018d44:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018d4b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018d52:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018d59:	75 0d                	jne    c0018d68 <rtcIRQHandler(regs*, void*)+0x40>
c0018d5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018d5f:	83 c4 08             	add    esp,0x8
c0018d62:	5b                   	pop    ebx
c0018d63:	e9 32 fb ff ff       	jmp    c001889a <RTC::completeRTCRefresh()>
c0018d68:	83 c4 08             	add    esp,0x8
c0018d6b:	5b                   	pop    ebx
c0018d6c:	c3                   	ret    
c0018d6d:	90                   	nop

c0018d6e <RTC::RTC()>:
c0018d6e:	83 ec 1c             	sub    esp,0x1c
c0018d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d75:	83 ec 08             	sub    esp,0x8
c0018d78:	68 63 2f 02 c0       	push   0xc0022f63
c0018d7d:	50                   	push   eax
c0018d7e:	e8 73 37 ff ff       	call   c000c4f6 <Clock::Clock(char const*)>
c0018d83:	83 c4 10             	add    esp,0x10
c0018d86:	ba 80 2f 02 c0       	mov    edx,0xc0022f80
c0018d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d8f:	89 10                	mov    DWORD PTR [eax],edx
c0018d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d95:	83 ec 0c             	sub    esp,0xc
c0018d98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d9c:	6a 01                	push   0x1
c0018d9e:	68 28 8d 01 c0       	push   0xc0018d28
c0018da3:	6a 08                	push   0x8
c0018da5:	50                   	push   eax
c0018da6:	e8 27 3c ff ff       	call   c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018dab:	83 c4 20             	add    esp,0x20
c0018dae:	89 c2                	mov    edx,eax
c0018db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018db4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018dba:	fa                   	cli    
c0018dbb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018dc0:	83 c0 01             	add    eax,0x1
c0018dc3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018dc8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018dcd:	83 ec 08             	sub    esp,0x8
c0018dd0:	6a 0b                	push   0xb
c0018dd2:	50                   	push   eax
c0018dd3:	e8 02 e4 fe ff       	call   c00071da <Computer::readCMOS(unsigned char)>
c0018dd8:	83 c4 10             	add    esp,0x10
c0018ddb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ddf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018de4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018de8:	83 ca 10             	or     edx,0x10
c0018deb:	0f b6 d2             	movzx  edx,dl
c0018dee:	83 ec 04             	sub    esp,0x4
c0018df1:	52                   	push   edx
c0018df2:	6a 0b                	push   0xb
c0018df4:	50                   	push   eax
c0018df5:	e8 fa e4 fe ff       	call   c00072f4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018dfa:	83 c4 10             	add    esp,0x10
c0018dfd:	83 ec 0c             	sub    esp,0xc
c0018e00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e04:	e8 91 fa ff ff       	call   c001889a <RTC::completeRTCRefresh()>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018e11:	83 e8 01             	sub    eax,0x1
c0018e14:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018e19:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018e1e:	85 c0                	test   eax,eax
c0018e20:	75 01                	jne    c0018e23 <RTC::RTC()+0xb5>
c0018e22:	fb                   	sti    
c0018e23:	90                   	nop
c0018e24:	83 c4 1c             	add    esp,0x1c
c0018e27:	c3                   	ret    

c0018e28 <HalConsoleScroll(int, int)>:
c0018e28:	83 ec 10             	sub    esp,0x10
c0018e2b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018e33:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018e3b:	90                   	nop
c0018e3c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e41:	0f 8f e1 00 00 00    	jg     c0018f28 <HalConsoleScroll(int, int)+0x100>
c0018e47:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e4f:	90                   	nop
c0018e50:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018e58:	0f 8f be 00 00 00    	jg     c0018f1c <HalConsoleScroll(int, int)+0xf4>
c0018e5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e62:	89 d0                	mov    eax,edx
c0018e64:	c1 e0 02             	shl    eax,0x2
c0018e67:	01 d0                	add    eax,edx
c0018e69:	c1 e0 05             	shl    eax,0x5
c0018e6c:	89 c2                	mov    edx,eax
c0018e6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e72:	01 d0                	add    eax,edx
c0018e74:	89 c2                	mov    edx,eax
c0018e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e7a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018e7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e81:	89 d0                	mov    eax,edx
c0018e83:	c1 e0 02             	shl    eax,0x2
c0018e86:	01 d0                	add    eax,edx
c0018e88:	c1 e0 05             	shl    eax,0x5
c0018e8b:	89 c2                	mov    edx,eax
c0018e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e91:	01 d0                	add    eax,edx
c0018e93:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e9d:	01 c2                	add    edx,eax
c0018e9f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018ea1:	88 02                	mov    BYTE PTR [edx],al
c0018ea3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018ea8:	75 66                	jne    c0018f10 <HalConsoleScroll(int, int)+0xe8>
c0018eaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eae:	83 e0 01             	and    eax,0x1
c0018eb1:	74 39                	je     c0018eec <HalConsoleScroll(int, int)+0xc4>
c0018eb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eb7:	83 e0 0f             	and    eax,0xf
c0018eba:	88 c2                	mov    dl,al
c0018ebc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ec0:	c1 e0 04             	shl    eax,0x4
c0018ec3:	09 d0                	or     eax,edx
c0018ec5:	88 c1                	mov    cl,al
c0018ec7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ecb:	89 d0                	mov    eax,edx
c0018ecd:	c1 e0 02             	shl    eax,0x2
c0018ed0:	01 d0                	add    eax,edx
c0018ed2:	c1 e0 05             	shl    eax,0x5
c0018ed5:	89 c2                	mov    edx,eax
c0018ed7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018edb:	01 d0                	add    eax,edx
c0018edd:	89 c2                	mov    edx,eax
c0018edf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ee3:	01 d0                	add    eax,edx
c0018ee5:	88 ca                	mov    dl,cl
c0018ee7:	88 10                	mov    BYTE PTR [eax],dl
c0018ee9:	eb 25                	jmp    c0018f10 <HalConsoleScroll(int, int)+0xe8>
c0018eeb:	90                   	nop
c0018eec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ef0:	89 d0                	mov    eax,edx
c0018ef2:	c1 e0 02             	shl    eax,0x2
c0018ef5:	01 d0                	add    eax,edx
c0018ef7:	c1 e0 05             	shl    eax,0x5
c0018efa:	89 c2                	mov    edx,eax
c0018efc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f00:	01 d0                	add    eax,edx
c0018f02:	89 c2                	mov    edx,eax
c0018f04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f08:	01 d0                	add    eax,edx
c0018f0a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f10:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018f15:	e9 36 ff ff ff       	jmp    c0018e50 <HalConsoleScroll(int, int)+0x28>
c0018f1a:	66 90                	xchg   ax,ax
c0018f1c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018f21:	e9 16 ff ff ff       	jmp    c0018e3c <HalConsoleScroll(int, int)+0x14>
c0018f26:	66 90                	xchg   ax,ax
c0018f28:	90                   	nop
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	c3                   	ret    
c0018f2d:	8d 76 00             	lea    esi,[esi+0x0]

c0018f30 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018f30:	83 ec 14             	sub    esp,0x14
c0018f33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f37:	88 04 24             	mov    BYTE PTR [esp],al
c0018f3a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018f3d:	0f b6 c0             	movzx  eax,al
c0018f40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f44:	89 d1                	mov    ecx,edx
c0018f46:	83 e1 0f             	and    ecx,0xf
c0018f49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f4d:	c1 e2 04             	shl    edx,0x4
c0018f50:	0f b6 d2             	movzx  edx,dl
c0018f53:	09 ca                	or     edx,ecx
c0018f55:	c1 e2 08             	shl    edx,0x8
c0018f58:	09 d0                	or     eax,edx
c0018f5a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018f5f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018f67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f6b:	89 d0                	mov    eax,edx
c0018f6d:	c1 e0 02             	shl    eax,0x2
c0018f70:	01 d0                	add    eax,edx
c0018f72:	c1 e0 04             	shl    eax,0x4
c0018f75:	89 c2                	mov    edx,eax
c0018f77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f7b:	01 d0                	add    eax,edx
c0018f7d:	01 c0                	add    eax,eax
c0018f7f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018f83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f87:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f8c:	66 89 02             	mov    WORD PTR [edx],ax
c0018f8f:	90                   	nop
c0018f90:	83 c4 14             	add    esp,0x14
c0018f93:	c3                   	ret    

c0018f94 <HalConsoleCursorUpdate(int, int)>:
c0018f94:	83 ec 20             	sub    esp,0x20
c0018f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f9b:	89 c2                	mov    edx,eax
c0018f9d:	c1 e2 02             	shl    edx,0x2
c0018fa0:	01 d0                	add    eax,edx
c0018fa2:	c1 e0 04             	shl    eax,0x4
c0018fa5:	89 c2                	mov    edx,eax
c0018fa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fab:	01 d0                	add    eax,edx
c0018fad:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018fb2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018fb9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018fbe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018fc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fc6:	ee                   	out    dx,al
c0018fc7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018fcc:	0f b6 c0             	movzx  eax,al
c0018fcf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018fd6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018fda:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018fde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fe2:	ee                   	out    dx,al
c0018fe3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018fea:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018fef:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018ff3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ff7:	ee                   	out    dx,al
c0018ff8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018ffd:	c1 e8 08             	shr    eax,0x8
c0019000:	0f b6 c0             	movzx  eax,al
c0019003:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001900a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001900e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019012:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019016:	ee                   	out    dx,al
c0019017:	90                   	nop
c0019018:	83 c4 20             	add    esp,0x20
c001901b:	c3                   	ret    

c001901c <FAT::getName()>:
c001901c:	b8 b4 2f 02 c0       	mov    eax,0xc0022fb4
c0019021:	c3                   	ret    
c0019022:	66 90                	xchg   ax,ax

c0019024 <FAT::tell(void*, unsigned long long*)>:
c0019024:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019029:	75 09                	jne    c0019034 <FAT::tell(void*, unsigned long long*)+0x10>
c001902b:	b8 04 00 00 00       	mov    eax,0x4
c0019030:	c3                   	ret    
c0019031:	8d 76 00             	lea    esi,[esi+0x0]
c0019034:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019039:	75 09                	jne    c0019044 <FAT::tell(void*, unsigned long long*)+0x20>
c001903b:	b8 04 00 00 00       	mov    eax,0x4
c0019040:	c3                   	ret    
c0019041:	8d 76 00             	lea    esi,[esi+0x0]
c0019044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019048:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001904b:	ba 00 00 00 00       	mov    edx,0x0
c0019050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019054:	89 01                	mov    DWORD PTR [ecx],eax
c0019056:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019059:	b8 00 00 00 00       	mov    eax,0x0
c001905e:	c3                   	ret    
c001905f:	90                   	nop

c0019060 <FAT::stat(void*, unsigned long long*)>:
c0019060:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019065:	75 09                	jne    c0019070 <FAT::stat(void*, unsigned long long*)+0x10>
c0019067:	b8 04 00 00 00       	mov    eax,0x4
c001906c:	c3                   	ret    
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019075:	75 09                	jne    c0019080 <FAT::stat(void*, unsigned long long*)+0x20>
c0019077:	b8 04 00 00 00       	mov    eax,0x4
c001907c:	c3                   	ret    
c001907d:	8d 76 00             	lea    esi,[esi+0x0]
c0019080:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019084:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019087:	ba 00 00 00 00       	mov    edx,0x0
c001908c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019090:	89 01                	mov    DWORD PTR [ecx],eax
c0019092:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019095:	b8 00 00 00 00       	mov    eax,0x0
c001909a:	c3                   	ret    
c001909b:	90                   	nop

c001909c <FAT::~FAT()>:
c001909c:	83 ec 0c             	sub    esp,0xc
c001909f:	ba 00 30 02 c0       	mov    edx,0xc0023000
c00190a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a8:	89 10                	mov    DWORD PTR [eax],edx
c00190aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ae:	83 ec 0c             	sub    esp,0xc
c00190b1:	50                   	push   eax
c00190b2:	e8 77 27 ff ff       	call   c000b82e <Filesystem::~Filesystem()>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	90                   	nop
c00190bb:	83 c4 0c             	add    esp,0xc
c00190be:	c3                   	ret    
c00190bf:	90                   	nop

c00190c0 <FAT::~FAT()>:
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	83 ec 0c             	sub    esp,0xc
c00190c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190ca:	e8 cd ff ff ff       	call   c001909c <FAT::~FAT()>
c00190cf:	83 c4 10             	add    esp,0x10
c00190d2:	83 ec 08             	sub    esp,0x8
c00190d5:	6a 08                	push   0x8
c00190d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190db:	e8 98 17 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c00190e0:	83 c4 10             	add    esp,0x10
c00190e3:	83 c4 0c             	add    esp,0xc
c00190e6:	c3                   	ret    
c00190e7:	90                   	nop

c00190e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00190e8:	83 ec 1c             	sub    esp,0x1c
c00190eb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00190f2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00190f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190fb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019102:	83 f8 ff             	cmp    eax,0xffffffff
c0019105:	75 35                	jne    c001913c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019107:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001910b:	88 c2                	mov    dl,al
c001910d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019112:	01 d0                	add    eax,edx
c0019114:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019118:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001911e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019122:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019129:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001912e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019132:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019139:	eb 19                	jmp    c0019154 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001913b:	90                   	nop
c001913c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019140:	88 c2                	mov    dl,al
c0019142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019146:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001914d:	01 d0                	add    eax,edx
c001914f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019153:	90                   	nop
c0019154:	83 ec 04             	sub    esp,0x4
c0019157:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001915b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001915f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019163:	50                   	push   eax
c0019164:	e8 66 be fe ff       	call   c0004fcf <f_getlabel>
c0019169:	83 c4 10             	add    esp,0x10
c001916c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019170:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019175:	75 09                	jne    c0019180 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019177:	b8 00 00 00 00       	mov    eax,0x0
c001917c:	eb 0a                	jmp    c0019188 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001917e:	66 90                	xchg   ax,ax
c0019180:	b8 01 00 00 00       	mov    eax,0x1
c0019185:	8d 76 00             	lea    esi,[esi+0x0]
c0019188:	83 c4 1c             	add    esp,0x1c
c001918b:	c3                   	ret    

c001918c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001918c:	57                   	push   edi
c001918d:	83 ec 58             	sub    esp,0x58
c0019190:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019198:	8d 54 24 10          	lea    edx,[esp+0x10]
c001919c:	b8 00 00 00 00       	mov    eax,0x0
c00191a1:	b9 0f 00 00 00       	mov    ecx,0xf
c00191a6:	fc                   	cld    
c00191a7:	89 d7                	mov    edi,edx
c00191a9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00191ab:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191af:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191b6:	83 f8 ff             	cmp    eax,0xffffffff
c00191b9:	75 35                	jne    c00191f0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00191bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191bf:	88 c2                	mov    dl,al
c00191c1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191c6:	01 d0                	add    eax,edx
c00191c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191cc:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191d2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191d6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191dd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191e2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00191e6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191ed:	eb 19                	jmp    c0019208 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00191ef:	90                   	nop
c00191f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191f4:	88 c2                	mov    dl,al
c00191f6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191fa:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019201:	01 d0                	add    eax,edx
c0019203:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019207:	90                   	nop
c0019208:	83 ec 08             	sub    esp,0x8
c001920b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001920f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019213:	50                   	push   eax
c0019214:	e8 27 76 fe ff       	call   c0000840 <strcat>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	83 ec 0c             	sub    esp,0xc
c001921f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019223:	50                   	push   eax
c0019224:	e8 f7 be fe ff       	call   c0005120 <f_setlabel>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019230:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019235:	75 09                	jne    c0019240 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019237:	b8 00 00 00 00       	mov    eax,0x0
c001923c:	eb 0a                	jmp    c0019248 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001923e:	66 90                	xchg   ax,ax
c0019240:	b8 01 00 00 00       	mov    eax,0x1
c0019245:	8d 76 00             	lea    esi,[esi+0x0]
c0019248:	83 c4 58             	add    esp,0x58
c001924b:	5f                   	pop    edi
c001924c:	c3                   	ret    
c001924d:	90                   	nop
c001924e:	66 90                	xchg   ax,ax

c0019250 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019250:	83 ec 2c             	sub    esp,0x2c
c0019253:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001925b:	83 ec 08             	sub    esp,0x8
c001925e:	68 d8 2f 02 c0       	push   0xc0022fd8
c0019263:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019267:	e8 e4 74 fe ff       	call   c0000750 <strcmp>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	85 c0                	test   eax,eax
c0019271:	0f 94 c0             	sete   al
c0019274:	0f b6 c0             	movzx  eax,al
c0019277:	85 c0                	test   eax,eax
c0019279:	74 0d                	je     c0019288 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001927b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019283:	e9 c0 00 00 00       	jmp    c0019348 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019288:	83 ec 08             	sub    esp,0x8
c001928b:	68 ca 2f 02 c0       	push   0xc0022fca
c0019290:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019294:	e8 b7 74 fe ff       	call   c0000750 <strcmp>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	85 c0                	test   eax,eax
c001929e:	0f 94 c0             	sete   al
c00192a1:	0f b6 c0             	movzx  eax,al
c00192a4:	85 c0                	test   eax,eax
c00192a6:	74 10                	je     c00192b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00192a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00192b0:	e9 93 00 00 00       	jmp    c0019348 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192b5:	8d 76 00             	lea    esi,[esi+0x0]
c00192b8:	83 ec 08             	sub    esp,0x8
c00192bb:	68 d0 2f 02 c0       	push   0xc0022fd0
c00192c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192c4:	e8 87 74 fe ff       	call   c0000750 <strcmp>
c00192c9:	83 c4 10             	add    esp,0x10
c00192cc:	85 c0                	test   eax,eax
c00192ce:	0f 94 c0             	sete   al
c00192d1:	0f b6 c0             	movzx  eax,al
c00192d4:	85 c0                	test   eax,eax
c00192d6:	74 0c                	je     c00192e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00192d8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00192e0:	eb 66                	jmp    c0019348 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192e2:	66 90                	xchg   ax,ax
c00192e4:	83 ec 08             	sub    esp,0x8
c00192e7:	68 3c 06 02 c0       	push   0xc002063c
c00192ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192f0:	e8 5b 74 fe ff       	call   c0000750 <strcmp>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	85 c0                	test   eax,eax
c00192fa:	0f 94 c0             	sete   al
c00192fd:	0f b6 c0             	movzx  eax,al
c0019300:	85 c0                	test   eax,eax
c0019302:	74 0c                	je     c0019310 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019304:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001930c:	eb 3a                	jmp    c0019348 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001930e:	66 90                	xchg   ax,ax
c0019310:	83 ec 08             	sub    esp,0x8
c0019313:	68 d6 2f 02 c0       	push   0xc0022fd6
c0019318:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001931c:	e8 2f 74 fe ff       	call   c0000750 <strcmp>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	85 c0                	test   eax,eax
c0019326:	0f 94 c0             	sete   al
c0019329:	0f b6 c0             	movzx  eax,al
c001932c:	85 c0                	test   eax,eax
c001932e:	74 0c                	je     c001933c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019330:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019338:	eb 0e                	jmp    c0019348 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001933a:	66 90                	xchg   ax,ax
c001933c:	b8 08 00 00 00       	mov    eax,0x8
c0019341:	e9 ea 00 00 00       	jmp    c0019430 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019346:	66 90                	xchg   ax,ax
c0019348:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001934f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019354:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019358:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001935f:	83 f8 ff             	cmp    eax,0xffffffff
c0019362:	75 34                	jne    c0019398 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019364:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019368:	88 c2                	mov    dl,al
c001936a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001936f:	01 d0                	add    eax,edx
c0019371:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019375:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001937b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001937f:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019386:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001938b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001938f:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019396:	eb 18                	jmp    c00193b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019398:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001939c:	88 c2                	mov    dl,al
c001939e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193a2:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193a9:	01 d0                	add    eax,edx
c00193ab:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00193af:	90                   	nop
c00193b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193b4:	88 04 24             	mov    BYTE PTR [esp],al
c00193b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00193bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00193c7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00193cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00193d4:	83 ec 0c             	sub    esp,0xc
c00193d7:	68 00 20 00 00       	push   0x2000
c00193dc:	e8 35 e7 fe ff       	call   c0007b16 <malloc>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193e8:	68 00 20 00 00       	push   0x2000
c00193ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193f5:	50                   	push   eax
c00193f6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00193fa:	50                   	push   eax
c00193fb:	e8 1d c0 fe ff       	call   c000541d <f_mkfs>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019407:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001940c:	75 0a                	jne    c0019418 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001940e:	b8 00 00 00 00       	mov    eax,0x0
c0019413:	eb 1b                	jmp    c0019430 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019415:	8d 76 00             	lea    esi,[esi+0x0]
c0019418:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001941d:	75 09                	jne    c0019428 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001941f:	b8 09 00 00 00       	mov    eax,0x9
c0019424:	eb 0a                	jmp    c0019430 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019426:	66 90                	xchg   ax,ax
c0019428:	b8 01 00 00 00       	mov    eax,0x1
c001942d:	8d 76 00             	lea    esi,[esi+0x0]
c0019430:	83 c4 2c             	add    esp,0x2c
c0019433:	c3                   	ret    

c0019434 <FAT::tryMount(LogicalDisk*, int)>:
c0019434:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001943a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001943f:	83 f8 14             	cmp    eax,0x14
c0019442:	75 18                	jne    c001945c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019444:	83 ec 0c             	sub    esp,0xc
c0019447:	68 dc 2f 02 c0       	push   0xc0022fdc
c001944c:	e8 a6 82 ff ff       	call   c00116f7 <KePanic(char const*)>
c0019451:	83 c4 10             	add    esp,0x10
c0019454:	b0 00                	mov    al,0x0
c0019456:	e9 ed 01 00 00       	jmp    c0019648 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001945b:	90                   	nop
c001945c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019463:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019469:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001946f:	3d 00 02 00 00       	cmp    eax,0x200
c0019474:	74 0a                	je     c0019480 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019476:	b0 00                	mov    al,0x0
c0019478:	e9 cb 01 00 00       	jmp    c0019648 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001947d:	8d 76 00             	lea    esi,[esi+0x0]
c0019480:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019488:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001948f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019496:	83 f8 ff             	cmp    eax,0xffffffff
c0019499:	74 09                	je     c00194a4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001949b:	b0 01                	mov    al,0x1
c001949d:	e9 a6 01 00 00       	jmp    c0019648 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194a2:	66 90                	xchg   ax,ax
c00194a4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00194ae:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00194b6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00194bd:	88 c2                	mov    dl,al
c00194bf:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194c4:	01 d0                	add    eax,edx
c00194c6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00194cd:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00194d3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00194da:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00194e1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194e6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00194ed:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	68 34 02 00 00       	push   0x234
c00194fc:	e8 15 e6 fe ff       	call   c0007b16 <malloc>
c0019501:	83 c4 10             	add    esp,0x10
c0019504:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001950b:	83 ec 04             	sub    esp,0x4
c001950e:	6a 00                	push   0x0
c0019510:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019517:	50                   	push   eax
c0019518:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001951f:	e8 d4 a6 fe ff       	call   c0003bf8 <f_mount>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001952e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019536:	74 1c                	je     c0019554 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019538:	83 ec 0c             	sub    esp,0xc
c001953b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019542:	e8 ef e5 fe ff       	call   c0007b36 <rfree>
c0019547:	83 c4 10             	add    esp,0x10
c001954a:	b0 00                	mov    al,0x0
c001954c:	e9 f7 00 00 00       	jmp    c0019648 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019551:	8d 76 00             	lea    esi,[esi+0x0]
c0019554:	83 ec 04             	sub    esp,0x4
c0019557:	68 00 01 00 00       	push   0x100
c001955c:	6a 00                	push   0x0
c001955e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019565:	50                   	push   eax
c0019566:	e8 85 6f fe ff       	call   c00004f0 <memset>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	83 ec 08             	sub    esp,0x8
c0019571:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019578:	50                   	push   eax
c0019579:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019580:	50                   	push   eax
c0019581:	e8 ba 72 fe ff       	call   c0000840 <strcat>
c0019586:	83 c4 10             	add    esp,0x10
c0019589:	83 ec 08             	sub    esp,0x8
c001958c:	68 ea 2f 02 c0       	push   0xc0022fea
c0019591:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019598:	50                   	push   eax
c0019599:	e8 a2 72 fe ff       	call   c0000840 <strcat>
c001959e:	83 c4 10             	add    esp,0x10
c00195a1:	83 ec 04             	sub    esp,0x4
c00195a4:	6a 01                	push   0x1
c00195a6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00195ad:	50                   	push   eax
c00195ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195b2:	50                   	push   eax
c00195b3:	e8 a2 a6 fe ff       	call   c0003c5a <f_open>
c00195b8:	83 c4 10             	add    esp,0x10
c00195bb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00195c2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00195c9:	85 c0                	test   eax,eax
c00195cb:	74 0b                	je     c00195d8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00195cd:	78 31                	js     c0019600 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00195cf:	83 e8 04             	sub    eax,0x4
c00195d2:	83 f8 01             	cmp    eax,0x1
c00195d5:	77 29                	ja     c0019600 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00195d7:	90                   	nop
c00195d8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00195e0:	83 ec 0c             	sub    esp,0xc
c00195e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195e7:	50                   	push   eax
c00195e8:	e8 3c ae fe ff       	call   c0004429 <f_close>
c00195ed:	83 c4 10             	add    esp,0x10
c00195f0:	90                   	nop
c00195f1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00195f9:	85 c0                	test   eax,eax
c00195fb:	74 43                	je     c0019640 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00195fd:	eb 31                	jmp    c0019630 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00195ff:	90                   	nop
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001960a:	e8 27 e5 fe ff       	call   c0007b36 <rfree>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	83 ec 04             	sub    esp,0x4
c0019615:	6a 00                	push   0x0
c0019617:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001961e:	50                   	push   eax
c001961f:	6a 00                	push   0x0
c0019621:	e8 d2 a5 fe ff       	call   c0003bf8 <f_mount>
c0019626:	83 c4 10             	add    esp,0x10
c0019629:	b0 00                	mov    al,0x0
c001962b:	eb 1b                	jmp    c0019648 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001962d:	8d 76 00             	lea    esi,[esi+0x0]
c0019630:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019635:	83 c0 01             	add    eax,0x1
c0019638:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c001963d:	8d 76 00             	lea    esi,[esi+0x0]
c0019640:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019647:	90                   	nop
c0019648:	81 c4 4c 03 00 00    	add    esp,0x34c
c001964e:	c3                   	ret    
c001964f:	90                   	nop

c0019650 <FAT::allocateSwapfile(char const*, int)>:
c0019650:	55                   	push   ebp
c0019651:	57                   	push   edi
c0019652:	56                   	push   esi
c0019653:	53                   	push   ebx
c0019654:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001965a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019665:	83 ec 0c             	sub    esp,0xc
c0019668:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001966f:	e8 a2 e4 fe ff       	call   c0007b16 <malloc>
c0019674:	83 c4 10             	add    esp,0x10
c0019677:	89 c7                	mov    edi,eax
c0019679:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001967e:	83 ec 04             	sub    esp,0x4
c0019681:	50                   	push   eax
c0019682:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019689:	57                   	push   edi
c001968a:	e8 1d 25 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c001968f:	83 c4 10             	add    esp,0x10
c0019692:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019699:	83 ec 04             	sub    esp,0x4
c001969c:	8d 44 24 13          	lea    eax,[esp+0x13]
c00196a0:	50                   	push   eax
c00196a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196a5:	50                   	push   eax
c00196a6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ad:	e8 1a 28 ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c00196b2:	83 c4 10             	add    esp,0x10
c00196b5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196bc:	c1 e0 14             	shl    eax,0x14
c00196bf:	89 c7                	mov    edi,eax
c00196c1:	89 c5                	mov    ebp,eax
c00196c3:	c1 fd 1f             	sar    ebp,0x1f
c00196c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196ce:	89 f9                	mov    ecx,edi
c00196d0:	31 c1                	xor    ecx,eax
c00196d2:	89 cb                	mov    ebx,ecx
c00196d4:	89 e9                	mov    ecx,ebp
c00196d6:	31 d1                	xor    ecx,edx
c00196d8:	89 ce                	mov    esi,ecx
c00196da:	89 f0                	mov    eax,esi
c00196dc:	09 d8                	or     eax,ebx
c00196de:	0f 84 9c 00 00 00    	je     c0019780 <FAT::allocateSwapfile(char const*, int)+0x130>
c00196e4:	83 ec 0c             	sub    esp,0xc
c00196e7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ee:	e8 a5 26 ff ff       	call   c000bd98 <File::unlink()>
c00196f3:	83 c4 10             	add    esp,0x10
c00196f6:	83 ec 08             	sub    esp,0x8
c00196f9:	6a 12                	push   0x12
c00196fb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019702:	e8 c3 24 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0019707:	83 c4 10             	add    esp,0x10
c001970a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019711:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019717:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001971e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019725:	c1 e0 14             	shl    eax,0x14
c0019728:	83 ec 04             	sub    esp,0x4
c001972b:	6a 01                	push   0x1
c001972d:	50                   	push   eax
c001972e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019735:	e8 76 bb fe ff       	call   c00052b0 <f_expand>
c001973a:	83 c4 10             	add    esp,0x10
c001973d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019744:	8b 00                	mov    eax,DWORD PTR [eax]
c0019746:	83 c0 10             	add    eax,0x10
c0019749:	8b 00                	mov    eax,DWORD PTR [eax]
c001974b:	83 ec 0c             	sub    esp,0xc
c001974e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019752:	52                   	push   edx
c0019753:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019757:	52                   	push   edx
c0019758:	6a 00                	push   0x0
c001975a:	68 00 04 00 00       	push   0x400
c001975f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019766:	ff d0                	call   eax
c0019768:	83 c4 20             	add    esp,0x20
c001976b:	83 ec 0c             	sub    esp,0xc
c001976e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019775:	e8 ae 24 ff ff       	call   c000bc28 <File::close()>
c001977a:	83 c4 10             	add    esp,0x10
c001977d:	8d 76 00             	lea    esi,[esi+0x0]
c0019780:	83 ec 08             	sub    esp,0x8
c0019783:	6a 01                	push   0x1
c0019785:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001978c:	e8 39 24 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c0019791:	83 c4 10             	add    esp,0x10
c0019794:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001979b:	8b 00                	mov    eax,DWORD PTR [eax]
c001979d:	83 c0 0c             	add    eax,0xc
c00197a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00197a2:	83 ec 0c             	sub    esp,0xc
c00197a5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00197a9:	52                   	push   edx
c00197aa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00197ae:	52                   	push   edx
c00197af:	6a 00                	push   0x0
c00197b1:	6a 04                	push   0x4
c00197b3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00197ba:	ff d0                	call   eax
c00197bc:	83 c4 20             	add    esp,0x20
c00197bf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00197c6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00197cc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00197d3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00197da:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00197dd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00197e4:	83 ec 0c             	sub    esp,0xc
c00197e7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00197ee:	e8 35 24 ff ff       	call   c000bc28 <File::close()>
c00197f3:	83 c4 10             	add    esp,0x10
c00197f6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00197fd:	ba 00 00 00 00       	mov    edx,0x0
c0019802:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019808:	5b                   	pop    ebx
c0019809:	5e                   	pop    esi
c001980a:	5f                   	pop    edi
c001980b:	5d                   	pop    ebp
c001980c:	c3                   	ret    
c001980d:	90                   	nop
c001980e:	66 90                	xchg   ax,ax

c0019810 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019810:	57                   	push   edi
c0019811:	56                   	push   esi
c0019812:	53                   	push   ebx
c0019813:	81 ec 50 02 00 00    	sub    esp,0x250
c0019819:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019821:	74 0d                	je     c0019830 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019823:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001982b:	75 0f                	jne    c001983c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001982d:	8d 76 00             	lea    esi,[esi+0x0]
c0019830:	b8 04 00 00 00       	mov    eax,0x4
c0019835:	e9 3a 01 00 00       	jmp    c0019974 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001983a:	66 90                	xchg   ax,ax
c001983c:	83 ec 08             	sub    esp,0x8
c001983f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019846:	50                   	push   eax
c0019847:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001984e:	e8 a3 ae fe ff       	call   c00046f6 <f_readdir>
c0019853:	83 c4 10             	add    esp,0x10
c0019856:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001985d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019864:	83 ec 0c             	sub    esp,0xc
c0019867:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001986e:	83 c0 16             	add    eax,0x16
c0019871:	50                   	push   eax
c0019872:	e8 f9 6c fe ff       	call   c0000570 <strlen>
c0019877:	83 c4 10             	add    esp,0x10
c001987a:	ba 00 00 00 00       	mov    edx,0x0
c001987f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019883:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019887:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001988e:	0f b6 c0             	movzx  eax,al
c0019891:	83 e0 10             	and    eax,0x10
c0019894:	74 0a                	je     c00198a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019896:	b8 02 00 00 00       	mov    eax,0x2
c001989b:	eb 0b                	jmp    c00198a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	b8 01 00 00 00       	mov    eax,0x1
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198ac:	83 ec 08             	sub    esp,0x8
c00198af:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00198b6:	83 c0 16             	add    eax,0x16
c00198b9:	50                   	push   eax
c00198ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198be:	83 c0 10             	add    eax,0x10
c00198c1:	50                   	push   eax
c00198c2:	e8 79 6d fe ff       	call   c0000640 <strcpy>
c00198c7:	83 c4 10             	add    esp,0x10
c00198ca:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00198d1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00198d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198dc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00198e3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00198ea:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00198f1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00198f8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00198ff:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019906:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001990d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019914:	89 c6                	mov    esi,eax
c0019916:	89 d7                	mov    edi,edx
c0019918:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001991a:	89 c8                	mov    eax,ecx
c001991c:	89 fa                	mov    edx,edi
c001991e:	89 f3                	mov    ebx,esi
c0019920:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019927:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001992e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019935:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001993c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019942:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019949:	0f be c0             	movsx  eax,al
c001994c:	85 c0                	test   eax,eax
c001994e:	75 08                	jne    c0019958 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019950:	b8 07 00 00 00       	mov    eax,0x7
c0019955:	eb 1d                	jmp    c0019974 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019957:	90                   	nop
c0019958:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001995f:	85 c0                	test   eax,eax
c0019961:	75 09                	jne    c001996c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019963:	b8 00 00 00 00       	mov    eax,0x0
c0019968:	eb 0a                	jmp    c0019974 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001996a:	66 90                	xchg   ax,ax
c001996c:	b8 01 00 00 00       	mov    eax,0x1
c0019971:	8d 76 00             	lea    esi,[esi+0x0]
c0019974:	81 c4 50 02 00 00    	add    esp,0x250
c001997a:	5b                   	pop    ebx
c001997b:	5e                   	pop    esi
c001997c:	5f                   	pop    edi
c001997d:	c3                   	ret    
c001997e:	66 90                	xchg   ax,ax

c0019980 <FAT::read(void*, unsigned long, void*, int*)>:
c0019980:	83 ec 1c             	sub    esp,0x1c
c0019983:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019988:	74 0a                	je     c0019994 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001998a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001998f:	75 0b                	jne    c001999c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019991:	8d 76 00             	lea    esi,[esi+0x0]
c0019994:	b8 04 00 00 00       	mov    eax,0x4
c0019999:	eb 41                	jmp    c00199dc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001999b:	90                   	nop
c001999c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199a0:	50                   	push   eax
c00199a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199ad:	e8 6b a5 fe ff       	call   c0003f1d <f_read>
c00199b2:	83 c4 10             	add    esp,0x10
c00199b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199bd:	89 c2                	mov    edx,eax
c00199bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199c3:	89 10                	mov    DWORD PTR [eax],edx
c00199c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199c9:	85 c0                	test   eax,eax
c00199cb:	75 07                	jne    c00199d4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00199cd:	b8 00 00 00 00       	mov    eax,0x0
c00199d2:	eb 08                	jmp    c00199dc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00199d4:	b8 01 00 00 00       	mov    eax,0x1
c00199d9:	8d 76 00             	lea    esi,[esi+0x0]
c00199dc:	83 c4 1c             	add    esp,0x1c
c00199df:	c3                   	ret    

c00199e0 <FAT::write(void*, unsigned long, void*, int*)>:
c00199e0:	83 ec 1c             	sub    esp,0x1c
c00199e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199e8:	74 0a                	je     c00199f4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00199ea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199ef:	75 0b                	jne    c00199fc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	b8 04 00 00 00       	mov    eax,0x4
c00199f9:	eb 41                	jmp    c0019a3c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199fb:	90                   	nop
c00199fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a00:	50                   	push   eax
c0019a01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a0d:	e8 0a a7 fe ff       	call   c000411c <f_write>
c0019a12:	83 c4 10             	add    esp,0x10
c0019a15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a1d:	89 c2                	mov    edx,eax
c0019a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a23:	89 10                	mov    DWORD PTR [eax],edx
c0019a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a29:	85 c0                	test   eax,eax
c0019a2b:	75 07                	jne    c0019a34 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019a2d:	b8 00 00 00 00       	mov    eax,0x0
c0019a32:	eb 08                	jmp    c0019a3c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019a34:	b8 01 00 00 00       	mov    eax,0x1
c0019a39:	8d 76 00             	lea    esi,[esi+0x0]
c0019a3c:	83 c4 1c             	add    esp,0x1c
c0019a3f:	c3                   	ret    

c0019a40 <FAT::close(void*)>:
c0019a40:	83 ec 1c             	sub    esp,0x1c
c0019a43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a48:	75 0a                	jne    c0019a54 <FAT::close(void*)+0x14>
c0019a4a:	b8 04 00 00 00       	mov    eax,0x4
c0019a4f:	eb 3f                	jmp    c0019a90 <FAT::close(void*)+0x50>
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	83 ec 0c             	sub    esp,0xc
c0019a57:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a5b:	e8 c9 a9 fe ff       	call   c0004429 <f_close>
c0019a60:	83 c4 10             	add    esp,0x10
c0019a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a67:	83 ec 0c             	sub    esp,0xc
c0019a6a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a6e:	e8 b3 e0 fe ff       	call   c0007b26 <free>
c0019a73:	83 c4 10             	add    esp,0x10
c0019a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a7a:	85 c0                	test   eax,eax
c0019a7c:	75 0a                	jne    c0019a88 <FAT::close(void*)+0x48>
c0019a7e:	b8 00 00 00 00       	mov    eax,0x0
c0019a83:	eb 0b                	jmp    c0019a90 <FAT::close(void*)+0x50>
c0019a85:	8d 76 00             	lea    esi,[esi+0x0]
c0019a88:	b8 01 00 00 00       	mov    eax,0x1
c0019a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a90:	83 c4 1c             	add    esp,0x1c
c0019a93:	c3                   	ret    

c0019a94 <FAT::closeDir(void*)>:
c0019a94:	83 ec 1c             	sub    esp,0x1c
c0019a97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a9c:	75 0a                	jne    c0019aa8 <FAT::closeDir(void*)+0x14>
c0019a9e:	b8 04 00 00 00       	mov    eax,0x4
c0019aa3:	eb 3f                	jmp    c0019ae4 <FAT::closeDir(void*)+0x50>
c0019aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa8:	83 ec 0c             	sub    esp,0xc
c0019aab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019aaf:	e8 20 ac fe ff       	call   c00046d4 <f_closedir>
c0019ab4:	83 c4 10             	add    esp,0x10
c0019ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019abb:	83 ec 0c             	sub    esp,0xc
c0019abe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ac2:	e8 5f e0 fe ff       	call   c0007b26 <free>
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ace:	85 c0                	test   eax,eax
c0019ad0:	75 0a                	jne    c0019adc <FAT::closeDir(void*)+0x48>
c0019ad2:	b8 00 00 00 00       	mov    eax,0x0
c0019ad7:	eb 0b                	jmp    c0019ae4 <FAT::closeDir(void*)+0x50>
c0019ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0019adc:	b8 01 00 00 00       	mov    eax,0x1
c0019ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae4:	83 c4 1c             	add    esp,0x1c
c0019ae7:	c3                   	ret    

c0019ae8 <FAT::truncate(void*, unsigned long long)>:
c0019ae8:	83 ec 2c             	sub    esp,0x2c
c0019aeb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019aef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019af3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019af7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019afb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b00:	75 0a                	jne    c0019b0c <FAT::truncate(void*, unsigned long long)+0x24>
c0019b02:	b8 04 00 00 00       	mov    eax,0x4
c0019b07:	eb 47                	jmp    c0019b50 <FAT::truncate(void*, unsigned long long)+0x68>
c0019b09:	8d 76 00             	lea    esi,[esi+0x0]
c0019b0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b10:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019b13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b17:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b23:	83 ec 08             	sub    esp,0x8
c0019b26:	50                   	push   eax
c0019b27:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b2b:	e8 28 a9 fe ff       	call   c0004458 <f_lseek>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b3b:	85 c0                	test   eax,eax
c0019b3d:	75 09                	jne    c0019b48 <FAT::truncate(void*, unsigned long long)+0x60>
c0019b3f:	b8 00 00 00 00       	mov    eax,0x0
c0019b44:	eb 0a                	jmp    c0019b50 <FAT::truncate(void*, unsigned long long)+0x68>
c0019b46:	66 90                	xchg   ax,ax
c0019b48:	b8 01 00 00 00       	mov    eax,0x1
c0019b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b50:	83 c4 2c             	add    esp,0x2c
c0019b53:	c3                   	ret    

c0019b54 <FAT::seek(void*, unsigned long long)>:
c0019b54:	83 ec 2c             	sub    esp,0x2c
c0019b57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b67:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b6c:	75 0a                	jne    c0019b78 <FAT::seek(void*, unsigned long long)+0x24>
c0019b6e:	b8 04 00 00 00       	mov    eax,0x4
c0019b73:	eb 33                	jmp    c0019ba8 <FAT::seek(void*, unsigned long long)+0x54>
c0019b75:	8d 76 00             	lea    esi,[esi+0x0]
c0019b78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b7c:	83 ec 08             	sub    esp,0x8
c0019b7f:	50                   	push   eax
c0019b80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b84:	e8 cf a8 fe ff       	call   c0004458 <f_lseek>
c0019b89:	83 c4 10             	add    esp,0x10
c0019b8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b94:	85 c0                	test   eax,eax
c0019b96:	75 08                	jne    c0019ba0 <FAT::seek(void*, unsigned long long)+0x4c>
c0019b98:	b8 00 00 00 00       	mov    eax,0x0
c0019b9d:	eb 09                	jmp    c0019ba8 <FAT::seek(void*, unsigned long long)+0x54>
c0019b9f:	90                   	nop
c0019ba0:	b8 01 00 00 00       	mov    eax,0x1
c0019ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba8:	83 c4 2c             	add    esp,0x2c
c0019bab:	c3                   	ret    

c0019bac <fatWrapperReadDisk>:
c0019bac:	53                   	push   ebx
c0019bad:	83 ec 18             	sub    esp,0x18
c0019bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bb4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bbd:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019bc4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019bc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bcc:	ba 00 00 00 00       	mov    edx,0x0
c0019bd1:	83 ec 0c             	sub    esp,0xc
c0019bd4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bd8:	53                   	push   ebx
c0019bd9:	52                   	push   edx
c0019bda:	50                   	push   eax
c0019bdb:	51                   	push   ecx
c0019bdc:	e8 27 42 ff ff       	call   c000de08 <LogicalDisk::read(unsigned long long, int, void*)>
c0019be1:	83 c4 20             	add    esp,0x20
c0019be4:	83 c4 18             	add    esp,0x18
c0019be7:	5b                   	pop    ebx
c0019be8:	c3                   	ret    
c0019be9:	8d 76 00             	lea    esi,[esi+0x0]

c0019bec <fatWrapperWriteDisk>:
c0019bec:	53                   	push   ebx
c0019bed:	83 ec 18             	sub    esp,0x18
c0019bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bf4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bf8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bfd:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019c04:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019c08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c0c:	ba 00 00 00 00       	mov    edx,0x0
c0019c11:	83 ec 0c             	sub    esp,0xc
c0019c14:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c18:	53                   	push   ebx
c0019c19:	52                   	push   edx
c0019c1a:	50                   	push   eax
c0019c1b:	51                   	push   ecx
c0019c1c:	e8 53 42 ff ff       	call   c000de74 <LogicalDisk::write(unsigned long long, int, void*)>
c0019c21:	83 c4 20             	add    esp,0x20
c0019c24:	83 c4 18             	add    esp,0x18
c0019c27:	5b                   	pop    ebx
c0019c28:	c3                   	ret    
c0019c29:	8d 76 00             	lea    esi,[esi+0x0]

c0019c2c <fatWrapperIoctl>:
c0019c2c:	53                   	push   ebx
c0019c2d:	83 ec 28             	sub    esp,0x28
c0019c30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c38:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c45:	83 f8 02             	cmp    eax,0x2
c0019c48:	75 32                	jne    c0019c7c <fatWrapperIoctl+0x50>
c0019c4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c57:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c64:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c6e:	66 89 02             	mov    WORD PTR [edx],ax
c0019c71:	b8 00 00 00 00       	mov    eax,0x0
c0019c76:	e9 c5 00 00 00       	jmp    c0019d40 <fatWrapperIoctl+0x114>
c0019c7b:	90                   	nop
c0019c7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c81:	83 f8 01             	cmp    eax,0x1
c0019c84:	75 6a                	jne    c0019cf0 <fatWrapperIoctl+0xc4>
c0019c86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c93:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019ca0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019ca6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019cac:	89 c8                	mov    eax,ecx
c0019cae:	89 da                	mov    edx,ebx
c0019cb0:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019cb4:	c1 e0 0a             	shl    eax,0xa
c0019cb7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019cbc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019cc3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019cc9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019ccf:	89 cb                	mov    ebx,ecx
c0019cd1:	c1 fb 1f             	sar    ebx,0x1f
c0019cd4:	53                   	push   ebx
c0019cd5:	51                   	push   ecx
c0019cd6:	52                   	push   edx
c0019cd7:	50                   	push   eax
c0019cd8:	e8 73 5b 00 00       	call   c001f850 <__udivdi3>
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	89 c2                	mov    edx,eax
c0019ce2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ce6:	89 10                	mov    DWORD PTR [eax],edx
c0019ce8:	b8 00 00 00 00       	mov    eax,0x0
c0019ced:	eb 51                	jmp    c0019d40 <fatWrapperIoctl+0x114>
c0019cef:	90                   	nop
c0019cf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cf5:	85 c0                	test   eax,eax
c0019cf7:	75 07                	jne    c0019d00 <fatWrapperIoctl+0xd4>
c0019cf9:	b8 00 00 00 00       	mov    eax,0x0
c0019cfe:	eb 40                	jmp    c0019d40 <fatWrapperIoctl+0x114>
c0019d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d05:	83 f8 03             	cmp    eax,0x3
c0019d08:	75 1a                	jne    c0019d24 <fatWrapperIoctl+0xf8>
c0019d0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d16:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019d1c:	b8 00 00 00 00       	mov    eax,0x0
c0019d21:	eb 1d                	jmp    c0019d40 <fatWrapperIoctl+0x114>
c0019d23:	90                   	nop
c0019d24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d29:	83 f8 04             	cmp    eax,0x4
c0019d2c:	75 0a                	jne    c0019d38 <fatWrapperIoctl+0x10c>
c0019d2e:	b8 00 00 00 00       	mov    eax,0x0
c0019d33:	eb 0b                	jmp    c0019d40 <fatWrapperIoctl+0x114>
c0019d35:	8d 76 00             	lea    esi,[esi+0x0]
c0019d38:	b8 04 00 00 00       	mov    eax,0x4
c0019d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d40:	83 c4 28             	add    esp,0x28
c0019d43:	5b                   	pop    ebx
c0019d44:	c3                   	ret    
c0019d45:	90                   	nop
c0019d46:	66 90                	xchg   ax,ax

c0019d48 <FAT::FAT()>:
c0019d48:	83 ec 1c             	sub    esp,0x1c
c0019d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d4f:	83 ec 0c             	sub    esp,0xc
c0019d52:	50                   	push   eax
c0019d53:	e8 b2 1a ff ff       	call   c000b80a <Filesystem::Filesystem()>
c0019d58:	83 c4 10             	add    esp,0x10
c0019d5b:	ba 00 30 02 c0       	mov    edx,0xc0023000
c0019d60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d64:	89 10                	mov    DWORD PTR [eax],edx
c0019d66:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019d70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d78:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d7d:	7f 19                	jg     c0019d98 <FAT::FAT()+0x50>
c0019d7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d83:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d8e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d93:	eb e3                	jmp    c0019d78 <FAT::FAT()+0x30>
c0019d95:	8d 76 00             	lea    esi,[esi+0x0]
c0019d98:	90                   	nop
c0019d99:	83 c4 1c             	add    esp,0x1c
c0019d9c:	c3                   	ret    
c0019d9d:	90                   	nop
c0019d9e:	66 90                	xchg   ax,ax

c0019da0 <FAT::fixFilepath(char*)>:
c0019da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019da4:	8a 00                	mov    al,BYTE PTR [eax]
c0019da6:	0f be c0             	movsx  eax,al
c0019da9:	83 f8 40             	cmp    eax,0x40
c0019dac:	7e 2e                	jle    c0019ddc <FAT::fixFilepath(char*)+0x3c>
c0019dae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019db2:	8a 00                	mov    al,BYTE PTR [eax]
c0019db4:	83 e8 41             	sub    eax,0x41
c0019db7:	88 c2                	mov    dl,al
c0019db9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dbd:	88 10                	mov    BYTE PTR [eax],dl
c0019dbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dc3:	8a 00                	mov    al,BYTE PTR [eax]
c0019dc5:	0f be c0             	movsx  eax,al
c0019dc8:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019dcf:	83 c0 30             	add    eax,0x30
c0019dd2:	88 c2                	mov    dl,al
c0019dd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dd8:	88 10                	mov    BYTE PTR [eax],dl
c0019dda:	66 90                	xchg   ax,ax
c0019ddc:	90                   	nop
c0019ddd:	c3                   	ret    
c0019dde:	66 90                	xchg   ax,ax

c0019de0 <FAT::open(char const*, void**, FileOpenMode)>:
c0019de0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019de6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dee:	74 0c                	je     c0019dfc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019df0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019df8:	75 0e                	jne    c0019e08 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019dfa:	66 90                	xchg   ax,ax
c0019dfc:	b8 04 00 00 00       	mov    eax,0x4
c0019e01:	e9 46 01 00 00       	jmp    c0019f4c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e06:	66 90                	xchg   ax,ax
c0019e08:	83 ec 08             	sub    esp,0x8
c0019e0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e16:	50                   	push   eax
c0019e17:	e8 24 68 fe ff       	call   c0000640 <strcpy>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	83 ec 08             	sub    esp,0x8
c0019e22:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e26:	50                   	push   eax
c0019e27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e2e:	e8 6d ff ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019e3e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e45:	83 e0 01             	and    eax,0x1
c0019e48:	74 12                	je     c0019e5c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019e4a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e51:	83 c8 01             	or     eax,0x1
c0019e54:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e5b:	90                   	nop
c0019e5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e63:	83 e0 04             	and    eax,0x4
c0019e66:	74 24                	je     c0019e8c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019e68:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e6f:	83 c8 30             	or     eax,0x30
c0019e72:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e79:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e80:	83 c8 02             	or     eax,0x2
c0019e83:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e8a:	66 90                	xchg   ax,ax
c0019e8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e93:	83 e0 02             	and    eax,0x2
c0019e96:	74 14                	je     c0019eac <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e98:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e9f:	83 c8 02             	or     eax,0x2
c0019ea2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0019eac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019eb3:	83 e0 08             	and    eax,0x8
c0019eb6:	74 14                	je     c0019ecc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019eb8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ebf:	83 c8 04             	or     eax,0x4
c0019ec2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ecc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ed3:	83 e0 10             	and    eax,0x10
c0019ed6:	74 14                	je     c0019eec <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019ed8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019edf:	83 c8 08             	or     eax,0x8
c0019ee2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0019eec:	83 ec 0c             	sub    esp,0xc
c0019eef:	68 28 02 00 00       	push   0x228
c0019ef4:	e8 1d dc fe ff       	call   c0007b16 <malloc>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	89 c2                	mov    edx,eax
c0019efe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f05:	89 10                	mov    DWORD PTR [eax],edx
c0019f07:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019f0f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f16:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f18:	83 ec 04             	sub    esp,0x4
c0019f1b:	52                   	push   edx
c0019f1c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f20:	52                   	push   edx
c0019f21:	50                   	push   eax
c0019f22:	e8 33 9d fe ff       	call   c0003c5a <f_open>
c0019f27:	83 c4 10             	add    esp,0x10
c0019f2a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019f31:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019f39:	74 09                	je     c0019f44 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019f3b:	b8 01 00 00 00       	mov    eax,0x1
c0019f40:	eb 0a                	jmp    c0019f4c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019f42:	66 90                	xchg   ax,ax
c0019f44:	b8 00 00 00 00       	mov    eax,0x0
c0019f49:	8d 76 00             	lea    esi,[esi+0x0]
c0019f4c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f52:	c3                   	ret    
c0019f53:	90                   	nop

c0019f54 <FAT::openDir(char const*, void**)>:
c0019f54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f62:	74 0c                	je     c0019f70 <FAT::openDir(char const*, void**)+0x1c>
c0019f64:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f6c:	75 0e                	jne    c0019f7c <FAT::openDir(char const*, void**)+0x28>
c0019f6e:	66 90                	xchg   ax,ax
c0019f70:	b8 04 00 00 00       	mov    eax,0x4
c0019f75:	e9 82 00 00 00       	jmp    c0019ffc <FAT::openDir(char const*, void**)+0xa8>
c0019f7a:	66 90                	xchg   ax,ax
c0019f7c:	83 ec 08             	sub    esp,0x8
c0019f7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f8a:	50                   	push   eax
c0019f8b:	e8 b0 66 fe ff       	call   c0000640 <strcpy>
c0019f90:	83 c4 10             	add    esp,0x10
c0019f93:	83 ec 08             	sub    esp,0x8
c0019f96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f9a:	50                   	push   eax
c0019f9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fa2:	e8 f9 fd ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c0019fa7:	83 c4 10             	add    esp,0x10
c0019faa:	83 ec 0c             	sub    esp,0xc
c0019fad:	6a 30                	push   0x30
c0019faf:	e8 62 db fe ff       	call   c0007b16 <malloc>
c0019fb4:	83 c4 10             	add    esp,0x10
c0019fb7:	89 c2                	mov    edx,eax
c0019fb9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019fc0:	89 10                	mov    DWORD PTR [eax],edx
c0019fc2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fcb:	83 ec 08             	sub    esp,0x8
c0019fce:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019fd2:	52                   	push   edx
c0019fd3:	50                   	push   eax
c0019fd4:	e8 30 a6 fe ff       	call   c0004609 <f_opendir>
c0019fd9:	83 c4 10             	add    esp,0x10
c0019fdc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fe3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019feb:	74 07                	je     c0019ff4 <FAT::openDir(char const*, void**)+0xa0>
c0019fed:	b8 01 00 00 00       	mov    eax,0x1
c0019ff2:	eb 08                	jmp    c0019ffc <FAT::openDir(char const*, void**)+0xa8>
c0019ff4:	b8 00 00 00 00       	mov    eax,0x0
c0019ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ffc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a004:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a00a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a012:	75 0c                	jne    c001a020 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a014:	b8 04 00 00 00       	mov    eax,0x4
c001a019:	e9 d6 00 00 00       	jmp    c001a0f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a01e:	66 90                	xchg   ax,ax
c001a020:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a028:	75 0a                	jne    c001a034 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a02a:	b8 04 00 00 00       	mov    eax,0x4
c001a02f:	e9 c0 00 00 00       	jmp    c001a0f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a034:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a03c:	75 0a                	jne    c001a048 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a03e:	b8 04 00 00 00       	mov    eax,0x4
c001a043:	e9 ac 00 00 00       	jmp    c001a0f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a048:	83 ec 08             	sub    esp,0x8
c001a04b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a052:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a059:	50                   	push   eax
c001a05a:	e8 e1 65 fe ff       	call   c0000640 <strcpy>
c001a05f:	83 c4 10             	add    esp,0x10
c001a062:	83 ec 08             	sub    esp,0x8
c001a065:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a06c:	50                   	push   eax
c001a06d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a074:	e8 27 fd ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c001a079:	83 c4 10             	add    esp,0x10
c001a07c:	83 ec 08             	sub    esp,0x8
c001a07f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a083:	50                   	push   eax
c001a084:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a08b:	50                   	push   eax
c001a08c:	e8 f7 a6 fe ff       	call   c0004788 <f_stat>
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a09b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a0a2:	85 c0                	test   eax,eax
c001a0a4:	74 0a                	je     c001a0b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a0a6:	83 f8 04             	cmp    eax,0x4
c001a0a9:	74 39                	je     c001a0e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a0ab:	eb 3f                	jmp    c001a0ec <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a0ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0b4:	0f b6 c0             	movzx  eax,al
c001a0b7:	83 e0 10             	and    eax,0x10
c001a0ba:	0f 95 c2             	setne  dl
c001a0bd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a0c4:	88 10                	mov    BYTE PTR [eax],dl
c001a0c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ca:	ba 00 00 00 00       	mov    edx,0x0
c001a0cf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a0d6:	89 01                	mov    DWORD PTR [ecx],eax
c001a0d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a0db:	b8 00 00 00 00       	mov    eax,0x0
c001a0e0:	eb 12                	jmp    c001a0f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a0e2:	66 90                	xchg   ax,ax
c001a0e4:	b8 02 00 00 00       	mov    eax,0x2
c001a0e9:	eb 09                	jmp    c001a0f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a0eb:	90                   	nop
c001a0ec:	b8 01 00 00 00       	mov    eax,0x1
c001a0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a0fa:	c3                   	ret    
c001a0fb:	90                   	nop

c001a0fc <FAT::unlink(char const*)>:
c001a0fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a102:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a10a:	75 08                	jne    c001a114 <FAT::unlink(char const*)+0x18>
c001a10c:	b8 04 00 00 00       	mov    eax,0x4
c001a111:	eb 61                	jmp    c001a174 <FAT::unlink(char const*)+0x78>
c001a113:	90                   	nop
c001a114:	83 ec 08             	sub    esp,0x8
c001a117:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a11e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a122:	50                   	push   eax
c001a123:	e8 18 65 fe ff       	call   c0000640 <strcpy>
c001a128:	83 c4 10             	add    esp,0x10
c001a12b:	83 ec 08             	sub    esp,0x8
c001a12e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a132:	50                   	push   eax
c001a133:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a13a:	e8 61 fc ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c001a13f:	83 c4 10             	add    esp,0x10
c001a142:	83 ec 0c             	sub    esp,0xc
c001a145:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a149:	50                   	push   eax
c001a14a:	e8 ab a8 fe ff       	call   c00049fa <f_unlink>
c001a14f:	83 c4 10             	add    esp,0x10
c001a152:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a159:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a160:	85 c0                	test   eax,eax
c001a162:	75 08                	jne    c001a16c <FAT::unlink(char const*)+0x70>
c001a164:	b8 00 00 00 00       	mov    eax,0x0
c001a169:	eb 09                	jmp    c001a174 <FAT::unlink(char const*)+0x78>
c001a16b:	90                   	nop
c001a16c:	b8 01 00 00 00       	mov    eax,0x1
c001a171:	8d 76 00             	lea    esi,[esi+0x0]
c001a174:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a17a:	c3                   	ret    
c001a17b:	90                   	nop

c001a17c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a17c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a182:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a189:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a190:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a194:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a198:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a1a0:	75 0a                	jne    c001a1ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a1a2:	b8 04 00 00 00       	mov    eax,0x4
c001a1a7:	e9 7c 01 00 00       	jmp    c001a328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a1ac:	83 ec 08             	sub    esp,0x8
c001a1af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a1b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1ba:	50                   	push   eax
c001a1bb:	e8 80 64 fe ff       	call   c0000640 <strcpy>
c001a1c0:	83 c4 10             	add    esp,0x10
c001a1c3:	83 ec 08             	sub    esp,0x8
c001a1c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a1ca:	50                   	push   eax
c001a1cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a1d2:	e8 c9 fb ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a1e2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a1ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1ef:	83 e0 01             	and    eax,0x1
c001a1f2:	74 14                	je     c001a208 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a1f4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1fb:	83 c8 01             	or     eax,0x1
c001a1fe:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a205:	8d 76 00             	lea    esi,[esi+0x0]
c001a208:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a20d:	83 e0 02             	and    eax,0x2
c001a210:	74 12                	je     c001a224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a212:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a219:	83 c8 20             	or     eax,0x20
c001a21c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a223:	90                   	nop
c001a224:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a229:	83 e0 04             	and    eax,0x4
c001a22c:	74 12                	je     c001a240 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a22e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a235:	83 c8 04             	or     eax,0x4
c001a238:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a23f:	90                   	nop
c001a240:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a245:	83 e0 08             	and    eax,0x8
c001a248:	74 12                	je     c001a25c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a24a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a251:	83 c8 02             	or     eax,0x2
c001a254:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a25b:	90                   	nop
c001a25c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a261:	83 e0 01             	and    eax,0x1
c001a264:	74 12                	je     c001a278 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a266:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a26d:	83 c8 01             	or     eax,0x1
c001a270:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a277:	90                   	nop
c001a278:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a27d:	83 e0 02             	and    eax,0x2
c001a280:	74 12                	je     c001a294 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a282:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a289:	83 c8 20             	or     eax,0x20
c001a28c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a293:	90                   	nop
c001a294:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a299:	83 e0 04             	and    eax,0x4
c001a29c:	74 12                	je     c001a2b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a29e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a2a5:	83 c8 04             	or     eax,0x4
c001a2a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2af:	90                   	nop
c001a2b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2b5:	83 e0 08             	and    eax,0x8
c001a2b8:	74 12                	je     c001a2cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a2ba:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a2c1:	83 c8 02             	or     eax,0x2
c001a2c4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2cb:	90                   	nop
c001a2cc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a2d3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a2da:	09 d0                	or     eax,edx
c001a2dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2e3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a2eb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a2f3:	83 ec 04             	sub    esp,0x4
c001a2f6:	52                   	push   edx
c001a2f7:	50                   	push   eax
c001a2f8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2fc:	50                   	push   eax
c001a2fd:	e8 6d ab fe ff       	call   c0004e6f <f_chmod>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a30c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a313:	85 c0                	test   eax,eax
c001a315:	75 09                	jne    c001a320 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a317:	b8 00 00 00 00       	mov    eax,0x0
c001a31c:	eb 0a                	jmp    c001a328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a31e:	66 90                	xchg   ax,ax
c001a320:	b8 01 00 00 00       	mov    eax,0x1
c001a325:	8d 76 00             	lea    esi,[esi+0x0]
c001a328:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a32e:	c3                   	ret    
c001a32f:	90                   	nop

c001a330 <FAT::rename(char const*, char const*)>:
c001a330:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a336:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a33e:	74 0c                	je     c001a34c <FAT::rename(char const*, char const*)+0x1c>
c001a340:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a348:	75 0e                	jne    c001a358 <FAT::rename(char const*, char const*)+0x28>
c001a34a:	66 90                	xchg   ax,ax
c001a34c:	b8 04 00 00 00       	mov    eax,0x4
c001a351:	e9 9e 00 00 00       	jmp    c001a3f4 <FAT::rename(char const*, char const*)+0xc4>
c001a356:	66 90                	xchg   ax,ax
c001a358:	83 ec 08             	sub    esp,0x8
c001a35b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a362:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a369:	50                   	push   eax
c001a36a:	e8 d1 62 fe ff       	call   c0000640 <strcpy>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	83 ec 08             	sub    esp,0x8
c001a375:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a37c:	50                   	push   eax
c001a37d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a384:	e8 17 fa ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	83 ec 08             	sub    esp,0x8
c001a38f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a396:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a39a:	50                   	push   eax
c001a39b:	e8 a0 62 fe ff       	call   c0000640 <strcpy>
c001a3a0:	83 c4 10             	add    esp,0x10
c001a3a3:	83 ec 08             	sub    esp,0x8
c001a3a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3aa:	50                   	push   eax
c001a3ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a3b2:	e8 e9 f9 ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c001a3b7:	83 c4 10             	add    esp,0x10
c001a3ba:	83 ec 08             	sub    esp,0x8
c001a3bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3c1:	50                   	push   eax
c001a3c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a3c9:	50                   	push   eax
c001a3ca:	e8 e8 a8 fe ff       	call   c0004cb7 <f_rename>
c001a3cf:	83 c4 10             	add    esp,0x10
c001a3d2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a3d9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a3e0:	85 c0                	test   eax,eax
c001a3e2:	75 08                	jne    c001a3ec <FAT::rename(char const*, char const*)+0xbc>
c001a3e4:	b8 00 00 00 00       	mov    eax,0x0
c001a3e9:	eb 09                	jmp    c001a3f4 <FAT::rename(char const*, char const*)+0xc4>
c001a3eb:	90                   	nop
c001a3ec:	b8 01 00 00 00       	mov    eax,0x1
c001a3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a3fa:	c3                   	ret    
c001a3fb:	90                   	nop

c001a3fc <FAT::mkdir(char const*)>:
c001a3fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a402:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a40a:	75 08                	jne    c001a414 <FAT::mkdir(char const*)+0x18>
c001a40c:	b8 04 00 00 00       	mov    eax,0x4
c001a411:	eb 61                	jmp    c001a474 <FAT::mkdir(char const*)+0x78>
c001a413:	90                   	nop
c001a414:	83 ec 08             	sub    esp,0x8
c001a417:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a41e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a422:	50                   	push   eax
c001a423:	e8 18 62 fe ff       	call   c0000640 <strcpy>
c001a428:	83 c4 10             	add    esp,0x10
c001a42b:	83 ec 08             	sub    esp,0x8
c001a42e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a432:	50                   	push   eax
c001a433:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a43a:	e8 61 f9 ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c001a43f:	83 c4 10             	add    esp,0x10
c001a442:	83 ec 0c             	sub    esp,0xc
c001a445:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a449:	50                   	push   eax
c001a44a:	e8 cd a6 fe ff       	call   c0004b1c <f_mkdir>
c001a44f:	83 c4 10             	add    esp,0x10
c001a452:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a459:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a460:	85 c0                	test   eax,eax
c001a462:	75 08                	jne    c001a46c <FAT::mkdir(char const*)+0x70>
c001a464:	b8 00 00 00 00       	mov    eax,0x0
c001a469:	eb 09                	jmp    c001a474 <FAT::mkdir(char const*)+0x78>
c001a46b:	90                   	nop
c001a46c:	b8 01 00 00 00       	mov    eax,0x1
c001a471:	8d 76 00             	lea    esi,[esi+0x0]
c001a474:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a47a:	c3                   	ret    
c001a47b:	90                   	nop

c001a47c <FAT::exists(char const*)>:
c001a47c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a482:	83 ec 08             	sub    esp,0x8
c001a485:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a48c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a490:	50                   	push   eax
c001a491:	e8 aa 61 fe ff       	call   c0000640 <strcpy>
c001a496:	83 c4 10             	add    esp,0x10
c001a499:	83 ec 08             	sub    esp,0x8
c001a49c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4a0:	50                   	push   eax
c001a4a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a4a8:	e8 f3 f8 ff ff       	call   c0019da0 <FAT::fixFilepath(char*)>
c001a4ad:	83 c4 10             	add    esp,0x10
c001a4b0:	83 ec 08             	sub    esp,0x8
c001a4b3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a4ba:	50                   	push   eax
c001a4bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a4bf:	50                   	push   eax
c001a4c0:	e8 c3 a2 fe ff       	call   c0004788 <f_stat>
c001a4c5:	83 c4 10             	add    esp,0x10
c001a4c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a4cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a4d6:	85 c0                	test   eax,eax
c001a4d8:	75 06                	jne    c001a4e0 <FAT::exists(char const*)+0x64>
c001a4da:	b0 01                	mov    al,0x1
c001a4dc:	eb 06                	jmp    c001a4e4 <FAT::exists(char const*)+0x68>
c001a4de:	66 90                	xchg   ax,ax
c001a4e0:	b0 00                	mov    al,0x0
c001a4e2:	66 90                	xchg   ax,ax
c001a4e4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a4ea:	c3                   	ret    
c001a4eb:	90                   	nop

c001a4ec <isoReadDiscSectorHelper>:
c001a4ec:	83 ec 2c             	sub    esp,0x2c
c001a4ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4f7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a4fc:	83 e8 41             	sub    eax,0x41
c001a4ff:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a506:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a50a:	ba 00 00 00 00       	mov    edx,0x0
c001a50f:	83 ec 0c             	sub    esp,0xc
c001a512:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a516:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a51a:	52                   	push   edx
c001a51b:	50                   	push   eax
c001a51c:	51                   	push   ecx
c001a51d:	e8 e6 38 ff ff       	call   c000de08 <LogicalDisk::read(unsigned long long, int, void*)>
c001a522:	83 c4 20             	add    esp,0x20
c001a525:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a529:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a52e:	74 0c                	je     c001a53c <isoReadDiscSectorHelper+0x50>
c001a530:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a534:	c1 e0 0b             	shl    eax,0xb
c001a537:	eb 0b                	jmp    c001a544 <isoReadDiscSectorHelper+0x58>
c001a539:	8d 76 00             	lea    esi,[esi+0x0]
c001a53c:	b8 00 00 00 00       	mov    eax,0x0
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	83 c4 2c             	add    esp,0x2c
c001a547:	c3                   	ret    

c001a548 <iso_kprintf>:
c001a548:	83 ec 0c             	sub    esp,0xc
c001a54b:	83 ec 08             	sub    esp,0x8
c001a54e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a552:	68 ae 2d 02 c0       	push   0xc0022dae
c001a557:	e8 49 04 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a55c:	83 c4 10             	add    esp,0x10
c001a55f:	90                   	nop
c001a560:	83 c4 0c             	add    esp,0xc
c001a563:	c3                   	ret    

c001a564 <iso_kprintfd>:
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	83 ec 08             	sub    esp,0x8
c001a56a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a56e:	68 82 14 02 c0       	push   0xc0021482
c001a573:	e8 2d 04 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	90                   	nop
c001a57c:	83 c4 0c             	add    esp,0xc
c001a57f:	c3                   	ret    

c001a580 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a580:	b8 08 00 00 00       	mov    eax,0x8
c001a585:	c3                   	ret    

c001a586 <ISO9660::truncate(void*, unsigned long long)>:
c001a586:	b8 01 00 00 00       	mov    eax,0x1
c001a58b:	c3                   	ret    

c001a58c <ISO9660::getName()>:
c001a58c:	b8 64 30 02 c0       	mov    eax,0xc0023064
c001a591:	c3                   	ret    

c001a592 <ISO9660::closeDir(void*)>:
c001a592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a596:	8b 00                	mov    eax,DWORD PTR [eax]
c001a598:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a59b:	90                   	nop

c001a59c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a59c:	b8 01 00 00 00       	mov    eax,0x1
c001a5a1:	c3                   	ret    

c001a5a2 <ISO9660::unlink(char const*)>:
c001a5a2:	b8 01 00 00 00       	mov    eax,0x1
c001a5a7:	c3                   	ret    

c001a5a8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a5a8:	b8 03 00 00 00       	mov    eax,0x3
c001a5ad:	c3                   	ret    

c001a5ae <ISO9660::rename(char const*, char const*)>:
c001a5ae:	b8 01 00 00 00       	mov    eax,0x1
c001a5b3:	c3                   	ret    

c001a5b4 <ISO9660::mkdir(char const*)>:
c001a5b4:	b8 01 00 00 00       	mov    eax,0x1
c001a5b9:	c3                   	ret    

c001a5ba <ISO9660::~ISO9660()>:
c001a5ba:	83 ec 0c             	sub    esp,0xc
c001a5bd:	ba a4 31 02 c0       	mov    edx,0xc00231a4
c001a5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c6:	89 10                	mov    DWORD PTR [eax],edx
c001a5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5cc:	83 ec 0c             	sub    esp,0xc
c001a5cf:	50                   	push   eax
c001a5d0:	e8 59 12 ff ff       	call   c000b82e <Filesystem::~Filesystem()>
c001a5d5:	83 c4 10             	add    esp,0x10
c001a5d8:	90                   	nop
c001a5d9:	83 c4 0c             	add    esp,0xc
c001a5dc:	c3                   	ret    
c001a5dd:	90                   	nop

c001a5de <ISO9660::~ISO9660()>:
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	83 ec 0c             	sub    esp,0xc
c001a5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5e8:	e8 cd ff ff ff       	call   c001a5ba <ISO9660::~ISO9660()>
c001a5ed:	83 c4 10             	add    esp,0x10
c001a5f0:	83 ec 08             	sub    esp,0x8
c001a5f3:	6a 08                	push   0x8
c001a5f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5f9:	e8 7a 02 ff ff       	call   c000a878 <operator delete(void*, unsigned long)>
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	83 c4 0c             	add    esp,0xc
c001a604:	c3                   	ret    
c001a605:	90                   	nop

c001a606 <ISO9660::exists(char const*)>:
c001a606:	83 ec 18             	sub    esp,0x18
c001a609:	68 7f 30 02 c0       	push   0xc002307f
c001a60e:	e8 e4 70 ff ff       	call   c00116f7 <KePanic(char const*)>
c001a613:	31 c0                	xor    eax,eax
c001a615:	83 c4 1c             	add    esp,0x1c
c001a618:	c3                   	ret    
c001a619:	90                   	nop

c001a61a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a61a:	56                   	push   esi
c001a61b:	53                   	push   ebx
c001a61c:	53                   	push   ebx
c001a61d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a621:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a625:	85 db                	test   ebx,ebx
c001a627:	0f 84 ca 00 00 00    	je     c001a6f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a62d:	85 f6                	test   esi,esi
c001a62f:	0f 84 c2 00 00 00    	je     c001a6f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a635:	b8 03 00 00 00       	mov    eax,0x3
c001a63a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a63f:	0f 85 b7 00 00 00    	jne    c001a6fc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a645:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a647:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a64e:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a654:	74 1b                	je     c001a671 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a656:	85 c0                	test   eax,eax
c001a658:	74 10                	je     c001a66a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a65a:	83 ec 0c             	sub    esp,0xc
c001a65d:	68 9d 30 02 c0       	push   0xc002309d
c001a662:	e8 90 70 ff ff       	call   c00116f7 <KePanic(char const*)>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a66c:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a671:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a674:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a67b:	85 c0                	test   eax,eax
c001a67d:	74 09                	je     c001a688 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a67f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a686:	74 48                	je     c001a6d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a688:	83 ec 0c             	sub    esp,0xc
c001a68b:	68 ad 30 02 c0       	push   0xc00230ad
c001a690:	e8 10 03 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a695:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a6a2:	85 c0                	test   eax,eax
c001a6a4:	74 17                	je     c001a6bd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a6a6:	83 ec 0c             	sub    esp,0xc
c001a6a9:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a6b0:	68 cd 30 02 c0       	push   0xc00230cd
c001a6b5:	e8 eb 02 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a6ba:	83 c4 10             	add    esp,0x10
c001a6bd:	83 ec 0c             	sub    esp,0xc
c001a6c0:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6c7:	50                   	push   eax
c001a6c8:	e8 79 c3 fe ff       	call   c0006a46 <init_percd>
c001a6cd:	83 c4 10             	add    esp,0x10
c001a6d0:	83 c3 03             	add    ebx,0x3
c001a6d3:	51                   	push   ecx
c001a6d4:	51                   	push   ecx
c001a6d5:	6a 00                	push   0x0
c001a6d7:	53                   	push   ebx
c001a6d8:	e8 30 be fe ff       	call   c000650d <iso_open>
c001a6dd:	83 c4 10             	add    esp,0x10
c001a6e0:	89 c2                	mov    edx,eax
c001a6e2:	b8 01 00 00 00       	mov    eax,0x1
c001a6e7:	83 fa ff             	cmp    edx,0xffffffff
c001a6ea:	74 10                	je     c001a6fc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6ec:	83 c2 32             	add    edx,0x32
c001a6ef:	31 c0                	xor    eax,eax
c001a6f1:	01 d2                	add    edx,edx
c001a6f3:	89 16                	mov    DWORD PTR [esi],edx
c001a6f5:	eb 05                	jmp    c001a6fc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6f7:	b8 04 00 00 00       	mov    eax,0x4
c001a6fc:	5a                   	pop    edx
c001a6fd:	5b                   	pop    ebx
c001a6fe:	5e                   	pop    esi
c001a6ff:	c3                   	ret    

c001a700 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a700:	53                   	push   ebx
c001a701:	83 ec 08             	sub    esp,0x8
c001a704:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a708:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a70c:	85 c0                	test   eax,eax
c001a70e:	74 2d                	je     c001a73d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a710:	85 db                	test   ebx,ebx
c001a712:	74 29                	je     c001a73d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a714:	b9 02 00 00 00       	mov    ecx,0x2
c001a719:	52                   	push   edx
c001a71a:	99                   	cdq    
c001a71b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a71f:	f7 f9                	idiv   ecx
c001a721:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a725:	83 e8 32             	sub    eax,0x32
c001a728:	50                   	push   eax
c001a729:	e8 87 be fe ff       	call   c00065b5 <iso_read>
c001a72e:	83 c4 10             	add    esp,0x10
c001a731:	89 03                	mov    DWORD PTR [ebx],eax
c001a733:	09 d0                	or     eax,edx
c001a735:	0f 94 c0             	sete   al
c001a738:	0f b6 c0             	movzx  eax,al
c001a73b:	eb 05                	jmp    c001a742 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a73d:	b8 04 00 00 00       	mov    eax,0x4
c001a742:	83 c4 08             	add    esp,0x8
c001a745:	5b                   	pop    ebx
c001a746:	c3                   	ret    
c001a747:	90                   	nop

c001a748 <ISO9660::seek(void*, unsigned long long)>:
c001a748:	57                   	push   edi
c001a749:	56                   	push   esi
c001a74a:	b8 04 00 00 00       	mov    eax,0x4
c001a74f:	51                   	push   ecx
c001a750:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a754:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a758:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a75c:	85 d2                	test   edx,edx
c001a75e:	74 26                	je     c001a786 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a760:	6a 00                	push   0x0
c001a762:	b9 02 00 00 00       	mov    ecx,0x2
c001a767:	57                   	push   edi
c001a768:	89 d0                	mov    eax,edx
c001a76a:	56                   	push   esi
c001a76b:	99                   	cdq    
c001a76c:	f7 f9                	idiv   ecx
c001a76e:	83 e8 32             	sub    eax,0x32
c001a771:	50                   	push   eax
c001a772:	e8 54 bf fe ff       	call   c00066cb <iso_seek>
c001a777:	83 c4 10             	add    esp,0x10
c001a77a:	31 f0                	xor    eax,esi
c001a77c:	31 fa                	xor    edx,edi
c001a77e:	09 d0                	or     eax,edx
c001a780:	0f 95 c0             	setne  al
c001a783:	0f b6 c0             	movzx  eax,al
c001a786:	5a                   	pop    edx
c001a787:	5e                   	pop    esi
c001a788:	5f                   	pop    edi
c001a789:	c3                   	ret    

c001a78a <ISO9660::tell(void*, unsigned long long*)>:
c001a78a:	53                   	push   ebx
c001a78b:	83 ec 08             	sub    esp,0x8
c001a78e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a792:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a796:	85 c0                	test   eax,eax
c001a798:	74 24                	je     c001a7be <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a79a:	85 db                	test   ebx,ebx
c001a79c:	74 20                	je     c001a7be <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a79e:	83 ec 0c             	sub    esp,0xc
c001a7a1:	b9 02 00 00 00       	mov    ecx,0x2
c001a7a6:	99                   	cdq    
c001a7a7:	f7 f9                	idiv   ecx
c001a7a9:	83 e8 32             	sub    eax,0x32
c001a7ac:	50                   	push   eax
c001a7ad:	e8 9d bf fe ff       	call   c000674f <iso_tell>
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	89 03                	mov    DWORD PTR [ebx],eax
c001a7b7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a7ba:	31 c0                	xor    eax,eax
c001a7bc:	eb 05                	jmp    c001a7c3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a7be:	b8 04 00 00 00       	mov    eax,0x4
c001a7c3:	83 c4 08             	add    esp,0x8
c001a7c6:	5b                   	pop    ebx
c001a7c7:	c3                   	ret    

c001a7c8 <ISO9660::stat(void*, unsigned long long*)>:
c001a7c8:	53                   	push   ebx
c001a7c9:	83 ec 14             	sub    esp,0x14
c001a7cc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7d0:	68 f1 30 02 c0       	push   0xc00230f1
c001a7d5:	e8 cb 01 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a7da:	83 c4 10             	add    esp,0x10
c001a7dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7e2:	74 2c                	je     c001a810 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a7e4:	85 db                	test   ebx,ebx
c001a7e6:	74 28                	je     c001a810 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a7e8:	83 ec 0c             	sub    esp,0xc
c001a7eb:	b9 02 00 00 00       	mov    ecx,0x2
c001a7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7f4:	99                   	cdq    
c001a7f5:	f7 f9                	idiv   ecx
c001a7f7:	83 e8 32             	sub    eax,0x32
c001a7fa:	50                   	push   eax
c001a7fb:	e8 80 bf fe ff       	call   c0006780 <iso_total>
c001a800:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a807:	89 03                	mov    DWORD PTR [ebx],eax
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	31 c0                	xor    eax,eax
c001a80e:	eb 05                	jmp    c001a815 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a810:	b8 04 00 00 00       	mov    eax,0x4
c001a815:	83 c4 08             	add    esp,0x8
c001a818:	5b                   	pop    ebx
c001a819:	c3                   	ret    

c001a81a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a81a:	55                   	push   ebp
c001a81b:	57                   	push   edi
c001a81c:	56                   	push   esi
c001a81d:	53                   	push   ebx
c001a81e:	83 ec 18             	sub    esp,0x18
c001a821:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a825:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a829:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a82d:	68 f9 30 02 c0       	push   0xc00230f9
c001a832:	e8 6e 01 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a837:	83 c4 10             	add    esp,0x10
c001a83a:	85 ff                	test   edi,edi
c001a83c:	0f 94 c0             	sete   al
c001a83f:	85 f6                	test   esi,esi
c001a841:	0f 94 c2             	sete   dl
c001a844:	09 d0                	or     eax,edx
c001a846:	a8 01                	test   al,0x1
c001a848:	0f 85 dd 00 00 00    	jne    c001a92b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a84e:	85 db                	test   ebx,ebx
c001a850:	0f 84 d5 00 00 00    	je     c001a92b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a856:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a859:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a85f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a866:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a86d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a86f:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a875:	74 1b                	je     c001a892 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a877:	85 c0                	test   eax,eax
c001a879:	74 10                	je     c001a88b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a87b:	83 ec 0c             	sub    esp,0xc
c001a87e:	68 9d 30 02 c0       	push   0xc002309d
c001a883:	e8 6f 6e ff ff       	call   c00116f7 <KePanic(char const*)>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a88d:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a892:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a895:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a89c:	85 c0                	test   eax,eax
c001a89e:	74 09                	je     c001a8a9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a8a0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a8a7:	74 51                	je     c001a8fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a8a9:	83 ec 0c             	sub    esp,0xc
c001a8ac:	68 01 31 02 c0       	push   0xc0023101
c001a8b1:	e8 ef 00 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a8b6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a8c4:	74 21                	je     c001a8e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a8c6:	83 ec 0c             	sub    esp,0xc
c001a8c9:	68 21 31 02 c0       	push   0xc0023121
c001a8ce:	e8 d2 00 ff ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001a8d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8d6:	83 c4 10             	add    esp,0x10
c001a8d9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8e0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a8e7:	83 ec 0c             	sub    esp,0xc
c001a8ea:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8f1:	50                   	push   eax
c001a8f2:	e8 4f c1 fe ff       	call   c0006a46 <init_percd>
c001a8f7:	83 c4 10             	add    esp,0x10
c001a8fa:	83 c3 03             	add    ebx,0x3
c001a8fd:	52                   	push   edx
c001a8fe:	52                   	push   edx
c001a8ff:	6a 00                	push   0x0
c001a901:	53                   	push   ebx
c001a902:	e8 06 bc fe ff       	call   c000650d <iso_open>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	89 c5                	mov    ebp,eax
c001a90c:	83 f8 ff             	cmp    eax,0xffffffff
c001a90f:	75 21                	jne    c001a932 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a911:	50                   	push   eax
c001a912:	50                   	push   eax
c001a913:	6a 01                	push   0x1
c001a915:	53                   	push   ebx
c001a916:	e8 f2 bb fe ff       	call   c000650d <iso_open>
c001a91b:	83 c4 10             	add    esp,0x10
c001a91e:	ba 02 00 00 00       	mov    edx,0x2
c001a923:	40                   	inc    eax
c001a924:	74 2b                	je     c001a951 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a926:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a929:	eb 24                	jmp    c001a94f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a92b:	ba 04 00 00 00       	mov    edx,0x4
c001a930:	eb 1f                	jmp    c001a951 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a932:	83 ec 0c             	sub    esp,0xc
c001a935:	50                   	push   eax
c001a936:	e8 45 be fe ff       	call   c0006780 <iso_total>
c001a93b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a942:	89 07                	mov    DWORD PTR [edi],eax
c001a944:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a947:	e8 4b bc fe ff       	call   c0006597 <iso_close>
c001a94c:	83 c4 10             	add    esp,0x10
c001a94f:	31 d2                	xor    edx,edx
c001a951:	83 c4 0c             	add    esp,0xc
c001a954:	89 d0                	mov    eax,edx
c001a956:	5b                   	pop    ebx
c001a957:	5e                   	pop    esi
c001a958:	5f                   	pop    edi
c001a959:	5d                   	pop    ebp
c001a95a:	c3                   	ret    
c001a95b:	90                   	nop

c001a95c <ISO9660::close(void*)>:
c001a95c:	83 ec 0c             	sub    esp,0xc
c001a95f:	b8 04 00 00 00       	mov    eax,0x4
c001a964:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a968:	85 d2                	test   edx,edx
c001a96a:	74 1b                	je     c001a987 <ISO9660::close(void*)+0x2b>
c001a96c:	83 ec 0c             	sub    esp,0xc
c001a96f:	b9 02 00 00 00       	mov    ecx,0x2
c001a974:	89 d0                	mov    eax,edx
c001a976:	99                   	cdq    
c001a977:	f7 f9                	idiv   ecx
c001a979:	83 e8 32             	sub    eax,0x32
c001a97c:	50                   	push   eax
c001a97d:	e8 15 bc fe ff       	call   c0006597 <iso_close>
c001a982:	83 c4 10             	add    esp,0x10
c001a985:	31 c0                	xor    eax,eax
c001a987:	83 c4 0c             	add    esp,0xc
c001a98a:	c3                   	ret    
c001a98b:	90                   	nop

c001a98c <ISO9660::openDir(char const*, void**)>:
c001a98c:	56                   	push   esi
c001a98d:	53                   	push   ebx
c001a98e:	50                   	push   eax
c001a98f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a993:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a997:	85 db                	test   ebx,ebx
c001a999:	0f 84 bd 00 00 00    	je     c001aa5c <ISO9660::openDir(char const*, void**)+0xd0>
c001a99f:	85 f6                	test   esi,esi
c001a9a1:	0f 84 b5 00 00 00    	je     c001aa5c <ISO9660::openDir(char const*, void**)+0xd0>
c001a9a7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a9a9:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a9b0:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a9b6:	74 1b                	je     c001a9d3 <ISO9660::openDir(char const*, void**)+0x47>
c001a9b8:	85 c0                	test   eax,eax
c001a9ba:	74 10                	je     c001a9cc <ISO9660::openDir(char const*, void**)+0x40>
c001a9bc:	83 ec 0c             	sub    esp,0xc
c001a9bf:	68 9d 30 02 c0       	push   0xc002309d
c001a9c4:	e8 2e 6d ff ff       	call   c00116f7 <KePanic(char const*)>
c001a9c9:	83 c4 10             	add    esp,0x10
c001a9cc:	8a 03                	mov    al,BYTE PTR [ebx]
c001a9ce:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a9d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a9d6:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a9dd:	85 c0                	test   eax,eax
c001a9df:	74 10                	je     c001a9f1 <ISO9660::openDir(char const*, void**)+0x65>
c001a9e1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a9e8:	74 1a                	je     c001aa04 <ISO9660::openDir(char const*, void**)+0x78>
c001a9ea:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a9f1:	83 ec 0c             	sub    esp,0xc
c001a9f4:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a9fb:	50                   	push   eax
c001a9fc:	e8 45 c0 fe ff       	call   c0006a46 <init_percd>
c001aa01:	83 c4 10             	add    esp,0x10
c001aa04:	83 c3 03             	add    ebx,0x3
c001aa07:	50                   	push   eax
c001aa08:	50                   	push   eax
c001aa09:	6a 01                	push   0x1
c001aa0b:	53                   	push   ebx
c001aa0c:	e8 fc ba fe ff       	call   c000650d <iso_open>
c001aa11:	83 c4 10             	add    esp,0x10
c001aa14:	89 c3                	mov    ebx,eax
c001aa16:	83 f8 ff             	cmp    eax,0xffffffff
c001aa19:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa1e:	75 1c                	jne    c001aa3c <ISO9660::openDir(char const*, void**)+0xb0>
c001aa20:	53                   	push   ebx
c001aa21:	53                   	push   ebx
c001aa22:	68 45 31 02 c0       	push   0xc0023145
c001aa27:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa2d:	e8 d4 e0 fe ff       	call   c0008b06 <VgaText::puts(char const*)>
c001aa32:	83 c4 10             	add    esp,0x10
c001aa35:	b8 01 00 00 00       	mov    eax,0x1
c001aa3a:	eb 25                	jmp    c001aa61 <ISO9660::openDir(char const*, void**)+0xd5>
c001aa3c:	01 db                	add    ebx,ebx
c001aa3e:	51                   	push   ecx
c001aa3f:	83 c3 65             	add    ebx,0x65
c001aa42:	51                   	push   ecx
c001aa43:	68 58 31 02 c0       	push   0xc0023158
c001aa48:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa4e:	e8 b3 e0 fe ff       	call   c0008b06 <VgaText::puts(char const*)>
c001aa53:	89 1e                	mov    DWORD PTR [esi],ebx
c001aa55:	83 c4 10             	add    esp,0x10
c001aa58:	31 c0                	xor    eax,eax
c001aa5a:	eb 05                	jmp    c001aa61 <ISO9660::openDir(char const*, void**)+0xd5>
c001aa5c:	b8 04 00 00 00       	mov    eax,0x4
c001aa61:	5a                   	pop    edx
c001aa62:	5b                   	pop    ebx
c001aa63:	5e                   	pop    esi
c001aa64:	c3                   	ret    
c001aa65:	90                   	nop

c001aa66 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aa66:	55                   	push   ebp
c001aa67:	57                   	push   edi
c001aa68:	56                   	push   esi
c001aa69:	53                   	push   ebx
c001aa6a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa70:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001aa77:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa7e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aa86:	0f 84 e7 00 00 00    	je     c001ab73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa8c:	85 db                	test   ebx,ebx
c001aa8e:	0f 84 df 00 00 00    	je     c001ab73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa94:	83 ec 0c             	sub    esp,0xc
c001aa97:	68 6b 31 02 c0       	push   0xc002316b
c001aa9c:	e8 04 ff fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001aaa1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aaa8:	b9 02 00 00 00       	mov    ecx,0x2
c001aaad:	99                   	cdq    
c001aaae:	f7 f9                	idiv   ecx
c001aab0:	83 e8 32             	sub    eax,0x32
c001aab3:	89 04 24             	mov    DWORD PTR [esp],eax
c001aab6:	e8 17 bd fe ff       	call   c00067d2 <iso_readdir>
c001aabb:	83 c4 10             	add    esp,0x10
c001aabe:	89 c6                	mov    esi,eax
c001aac0:	85 c0                	test   eax,eax
c001aac2:	75 37                	jne    c001aafb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aac4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aac9:	56                   	push   esi
c001aaca:	56                   	push   esi
c001aacb:	68 76 31 02 c0       	push   0xc0023176
c001aad0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aad6:	e8 2b e0 fe ff       	call   c0008b06 <VgaText::puts(char const*)>
c001aadb:	83 c4 0c             	add    esp,0xc
c001aade:	68 10 01 00 00       	push   0x110
c001aae3:	6a 00                	push   0x0
c001aae5:	57                   	push   edi
c001aae6:	e8 05 5a fe ff       	call   c00004f0 <memset>
c001aaeb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aaf1:	83 c4 10             	add    esp,0x10
c001aaf4:	b8 01 00 00 00       	mov    eax,0x1
c001aaf9:	eb 7d                	jmp    c001ab78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aafb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ab01:	8d 68 08             	lea    ebp,[eax+0x8]
c001ab04:	83 ec 0c             	sub    esp,0xc
c001ab07:	55                   	push   ebp
c001ab08:	e8 63 5a fe ff       	call   c0000570 <strlen>
c001ab0d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ab15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab19:	83 c4 10             	add    esp,0x10
c001ab1c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001ab20:	75 0a                	jne    c001ab2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001ab22:	b8 02 00 00 00       	mov    eax,0x2
c001ab27:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001ab2a:	74 05                	je     c001ab31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001ab2c:	b8 01 00 00 00       	mov    eax,0x1
c001ab31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab35:	50                   	push   eax
c001ab36:	50                   	push   eax
c001ab37:	55                   	push   ebp
c001ab38:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab3c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001ab40:	50                   	push   eax
c001ab41:	e8 fa 5a fe ff       	call   c0000640 <strcpy>
c001ab46:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab4f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001ab55:	5a                   	pop    edx
c001ab56:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001ab5b:	59                   	pop    ecx
c001ab5c:	68 89 31 02 c0       	push   0xc0023189
c001ab61:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001ab67:	e8 9a df fe ff       	call   c0008b06 <VgaText::puts(char const*)>
c001ab6c:	83 c4 10             	add    esp,0x10
c001ab6f:	31 c0                	xor    eax,eax
c001ab71:	eb 05                	jmp    c001ab78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001ab73:	b8 04 00 00 00       	mov    eax,0x4
c001ab78:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab7e:	5b                   	pop    ebx
c001ab7f:	5e                   	pop    esi
c001ab80:	5f                   	pop    edi
c001ab81:	5d                   	pop    ebp
c001ab82:	c3                   	ret    

c001ab83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab83:	57                   	push   edi
c001ab84:	56                   	push   esi
c001ab85:	53                   	push   ebx
c001ab86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab8e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab92:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab98:	0f be cb             	movsx  ecx,bl
c001ab9b:	75 0b                	jne    c001aba8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab9d:	0f be 05 c0 43 02 c0 	movsx  eax,BYTE PTR ds:0xc00243c0
c001aba4:	39 c8                	cmp    eax,ecx
c001aba6:	74 47                	je     c001abef <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aba8:	83 ec 0c             	sub    esp,0xc
c001abab:	31 d2                	xor    edx,edx
c001abad:	68 a0 c8 02 c0       	push   0xc002c8a0
c001abb2:	6a 01                	push   0x1
c001abb4:	52                   	push   edx
c001abb5:	56                   	push   esi
c001abb6:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001abbd:	e8 46 32 ff ff       	call   c000de08 <LogicalDisk::read(unsigned long long, int, void*)>
c001abc2:	83 c4 20             	add    esp,0x20
c001abc5:	85 c0                	test   eax,eax
c001abc7:	75 0e                	jne    c001abd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001abc9:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001abcf:	88 1d c0 43 02 c0    	mov    BYTE PTR ds:0xc00243c0,bl
c001abd5:	eb 18                	jmp    c001abef <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001abd7:	50                   	push   eax
c001abd8:	68 00 08 00 00       	push   0x800
c001abdd:	6a 00                	push   0x0
c001abdf:	57                   	push   edi
c001abe0:	e8 0b 59 fe ff       	call   c00004f0 <memset>
c001abe5:	83 c4 10             	add    esp,0x10
c001abe8:	b8 01 00 00 00       	mov    eax,0x1
c001abed:	eb 0e                	jmp    c001abfd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001abef:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001abf4:	b9 00 08 00 00       	mov    ecx,0x800
c001abf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abfb:	31 c0                	xor    eax,eax
c001abfd:	5b                   	pop    ebx
c001abfe:	5e                   	pop    esi
c001abff:	5f                   	pop    edi
c001ac00:	c3                   	ret    
c001ac01:	90                   	nop

c001ac02 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ac02:	53                   	push   ebx
c001ac03:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ac09:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ac13:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ac1a:	8d 58 41             	lea    ebx,[eax+0x41]
c001ac1d:	0f be db             	movsx  ebx,bl
c001ac20:	53                   	push   ebx
c001ac21:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac25:	50                   	push   eax
c001ac26:	6a 10                	push   0x10
c001ac28:	e8 56 ff ff ff       	call   c001ab83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	31 d2                	xor    edx,edx
c001ac32:	85 c0                	test   eax,eax
c001ac34:	75 33                	jne    c001ac69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac36:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ac3b:	75 2c                	jne    c001ac69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac3d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ac42:	75 25                	jne    c001ac69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac44:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ac49:	75 1e                	jne    c001ac69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac4b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ac50:	75 17                	jne    c001ac69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac52:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ac57:	75 10                	jne    c001ac69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac59:	83 ec 0c             	sub    esp,0xc
c001ac5c:	53                   	push   ebx
c001ac5d:	e8 e4 bd fe ff       	call   c0006a46 <init_percd>
c001ac62:	83 c4 10             	add    esp,0x10
c001ac65:	40                   	inc    eax
c001ac66:	0f 95 c2             	setne  dl
c001ac69:	88 d0                	mov    al,dl
c001ac6b:	81 c4 08 08 00 00    	add    esp,0x808
c001ac71:	5b                   	pop    ebx
c001ac72:	c3                   	ret    
c001ac73:	90                   	nop

c001ac74 <ISO9660::ISO9660()>:
c001ac74:	83 ec 0c             	sub    esp,0xc
c001ac77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7b:	83 ec 0c             	sub    esp,0xc
c001ac7e:	50                   	push   eax
c001ac7f:	e8 86 0b ff ff       	call   c000b80a <Filesystem::Filesystem()>
c001ac84:	83 c4 10             	add    esp,0x10
c001ac87:	ba a4 31 02 c0       	mov    edx,0xc00231a4
c001ac8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac90:	89 10                	mov    DWORD PTR [eax],edx
c001ac92:	e8 c1 be fe ff       	call   c0006b58 <fs_iso9660_init>
c001ac97:	90                   	nop
c001ac98:	83 c4 0c             	add    esp,0xc
c001ac9b:	c3                   	ret    

c001ac9c <SoundCard::beginPlayback()>:
c001ac9c:	c7 44 24 04 08 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023208
c001aca4:	e9 4e 6a ff ff       	jmp    c00116f7 <KePanic(char const*)>
c001aca9:	90                   	nop

c001acaa <SoundCard::stopPlayback()>:
c001acaa:	c7 44 24 04 08 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023208
c001acb2:	e9 40 6a ff ff       	jmp    c00116f7 <KePanic(char const*)>
c001acb7:	90                   	nop

c001acb8 <SoundCard::SoundCard(char const*)>:
c001acb8:	83 ec 1c             	sub    esp,0x1c
c001acbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acbf:	83 ec 08             	sub    esp,0x8
c001acc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acc6:	50                   	push   eax
c001acc7:	e8 f2 1e ff ff       	call   c000cbbe <Device::Device(char const*)>
c001accc:	83 c4 10             	add    esp,0x10
c001accf:	ba 54 32 02 c0       	mov    edx,0xc0023254
c001acd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd8:	89 10                	mov    DWORD PTR [eax],edx
c001acda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acde:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ace5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ace9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001acf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acf7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ad01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad05:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ad0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad13:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ad1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad25:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ad2a:	7f 1a                	jg     c001ad46 <SoundCard::SoundCard(char const*)+0x8e>
c001ad2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad34:	83 c2 54             	add    edx,0x54
c001ad37:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ad3f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ad44:	eb df                	jmp    c001ad25 <SoundCard::SoundCard(char const*)+0x6d>
c001ad46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad4a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ad51:	90                   	nop
c001ad52:	83 c4 1c             	add    esp,0x1c
c001ad55:	c3                   	ret    

c001ad56 <SoundCard::~SoundCard()>:
c001ad56:	83 ec 0c             	sub    esp,0xc
c001ad59:	ba 54 32 02 c0       	mov    edx,0xc0023254
c001ad5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad62:	89 10                	mov    DWORD PTR [eax],edx
c001ad64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad68:	83 ec 0c             	sub    esp,0xc
c001ad6b:	50                   	push   eax
c001ad6c:	e8 b7 1b ff ff       	call   c000c928 <Device::~Device()>
c001ad71:	83 c4 10             	add    esp,0x10
c001ad74:	90                   	nop
c001ad75:	83 c4 0c             	add    esp,0xc
c001ad78:	c3                   	ret    
c001ad79:	90                   	nop

c001ad7a <SoundCard::~SoundCard()>:
c001ad7a:	83 ec 0c             	sub    esp,0xc
c001ad7d:	83 ec 0c             	sub    esp,0xc
c001ad80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad84:	e8 cd ff ff ff       	call   c001ad56 <SoundCard::~SoundCard()>
c001ad89:	83 c4 10             	add    esp,0x10
c001ad8c:	83 ec 08             	sub    esp,0x8
c001ad8f:	68 e8 01 00 00       	push   0x1e8
c001ad94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad98:	e8 db fa fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	83 c4 0c             	add    esp,0xc
c001ada3:	c3                   	ret    

c001ada4 <SoundCard::configureRates(int, int, int)>:
c001ada4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ada8:	31 c0                	xor    eax,eax
c001adaa:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001adb1:	75 20                	jne    c001add3 <SoundCard::configureRates(int, int, int)+0x2f>
c001adb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adb7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001adbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adc1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001adc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adcb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001add1:	b0 01                	mov    al,0x1
c001add3:	c3                   	ret    

c001add4 <SoundCard::getSamples16(int, short*)>:
c001add4:	55                   	push   ebp
c001add5:	57                   	push   edi
c001add6:	31 ff                	xor    edi,edi
c001add8:	56                   	push   esi
c001add9:	53                   	push   ebx
c001adda:	31 db                	xor    ebx,ebx
c001addc:	83 ec 10             	sub    esp,0x10
c001addf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ade3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ade7:	8d 04 36             	lea    eax,[esi+esi*1]
c001adea:	50                   	push   eax
c001adeb:	6a 00                	push   0x0
c001aded:	55                   	push   ebp
c001adee:	e8 fd 56 fe ff       	call   c00004f0 <memset>
c001adf3:	83 c4 10             	add    esp,0x10
c001adf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adfa:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ae01:	85 c0                	test   eax,eax
c001ae03:	74 1b                	je     c001ae20 <SoundCard::getSamples16(int, short*)+0x4c>
c001ae05:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae09:	75 15                	jne    c001ae20 <SoundCard::getSamples16(int, short*)+0x4c>
c001ae0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae0f:	55                   	push   ebp
c001ae10:	56                   	push   esi
c001ae11:	50                   	push   eax
c001ae12:	e8 f1 02 00 00       	call   c001b108 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	39 c7                	cmp    edi,eax
c001ae1c:	7d 02                	jge    c001ae20 <SoundCard::getSamples16(int, short*)+0x4c>
c001ae1e:	89 c7                	mov    edi,eax
c001ae20:	43                   	inc    ebx
c001ae21:	83 fb 20             	cmp    ebx,0x20
c001ae24:	75 d0                	jne    c001adf6 <SoundCard::getSamples16(int, short*)+0x22>
c001ae26:	83 c4 0c             	add    esp,0xc
c001ae29:	89 f8                	mov    eax,edi
c001ae2b:	5b                   	pop    ebx
c001ae2c:	5e                   	pop    esi
c001ae2d:	5f                   	pop    edi
c001ae2e:	5d                   	pop    ebp
c001ae2f:	c3                   	ret    

c001ae30 <SoundCard::getSamples32(int, int*)>:
c001ae30:	55                   	push   ebp
c001ae31:	57                   	push   edi
c001ae32:	31 ff                	xor    edi,edi
c001ae34:	56                   	push   esi
c001ae35:	31 f6                	xor    esi,esi
c001ae37:	53                   	push   ebx
c001ae38:	83 ec 10             	sub    esp,0x10
c001ae3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae3f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae43:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ae47:	c1 e0 02             	shl    eax,0x2
c001ae4a:	50                   	push   eax
c001ae4b:	6a 00                	push   0x0
c001ae4d:	55                   	push   ebp
c001ae4e:	e8 9d 56 fe ff       	call   c00004f0 <memset>
c001ae53:	83 c4 10             	add    esp,0x10
c001ae56:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ae5d:	85 c0                	test   eax,eax
c001ae5f:	74 1b                	je     c001ae7c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae61:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae65:	75 15                	jne    c001ae7c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae67:	53                   	push   ebx
c001ae68:	55                   	push   ebp
c001ae69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae6d:	50                   	push   eax
c001ae6e:	e8 61 03 00 00       	call   c001b1d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ae73:	83 c4 10             	add    esp,0x10
c001ae76:	39 c6                	cmp    esi,eax
c001ae78:	7d 02                	jge    c001ae7c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae7a:	89 c6                	mov    esi,eax
c001ae7c:	47                   	inc    edi
c001ae7d:	83 ff 20             	cmp    edi,0x20
c001ae80:	75 d4                	jne    c001ae56 <SoundCard::getSamples32(int, int*)+0x26>
c001ae82:	85 f6                	test   esi,esi
c001ae84:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ae8b:	75 0f                	jne    c001ae9c <SoundCard::getSamples32(int, int*)+0x6c>
c001ae8d:	85 c0                	test   eax,eax
c001ae8f:	74 1b                	je     c001aeac <SoundCard::getSamples32(int, int*)+0x7c>
c001ae91:	83 ec 0c             	sub    esp,0xc
c001ae94:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae96:	53                   	push   ebx
c001ae97:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae9a:	eb 0d                	jmp    c001aea9 <SoundCard::getSamples32(int, int*)+0x79>
c001ae9c:	85 c0                	test   eax,eax
c001ae9e:	75 0c                	jne    c001aeac <SoundCard::getSamples32(int, int*)+0x7c>
c001aea0:	83 ec 0c             	sub    esp,0xc
c001aea3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aea5:	53                   	push   ebx
c001aea6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	83 c4 0c             	add    esp,0xc
c001aeaf:	89 f0                	mov    eax,esi
c001aeb1:	5b                   	pop    ebx
c001aeb2:	5e                   	pop    esi
c001aeb3:	5f                   	pop    edi
c001aeb4:	5d                   	pop    ebp
c001aeb5:	c3                   	ret    

c001aeb6 <SoundCard::addChannel(SoundPort*)>:
c001aeb6:	83 ec 0c             	sub    esp,0xc
c001aeb9:	31 c0                	xor    eax,eax
c001aebb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aebf:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001aec7:	74 1b                	je     c001aee4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001aec9:	40                   	inc    eax
c001aeca:	83 f8 20             	cmp    eax,0x20
c001aecd:	75 f0                	jne    c001aebf <SoundCard::addChannel(SoundPort*)+0x9>
c001aecf:	83 ec 0c             	sub    esp,0xc
c001aed2:	68 2d 32 02 c0       	push   0xc002322d
c001aed7:	e8 1b 68 ff ff       	call   c00116f7 <KePanic(char const*)>
c001aedc:	83 c4 10             	add    esp,0x10
c001aedf:	83 c8 ff             	or     eax,0xffffffff
c001aee2:	eb 0b                	jmp    c001aeef <SoundCard::addChannel(SoundPort*)+0x39>
c001aee4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aee8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aeef:	83 c4 0c             	add    esp,0xc
c001aef2:	c3                   	ret    
c001aef3:	90                   	nop

c001aef4 <SoundCard::removeChannel(int)>:
c001aef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aefc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001af07:	c3                   	ret    

c001af08 <SoundPort::SoundPort(int, int, int, int)>:
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af26:	89 10                	mov    DWORD PTR [eax],edx
c001af28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af30:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001af33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001af3e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001af43:	75 13                	jne    c001af58 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001af45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af49:	8b 00                	mov    eax,DWORD PTR [eax]
c001af4b:	05 a0 0f 00 00       	add    eax,0xfa0
c001af50:	01 c0                	add    eax,eax
c001af52:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af56:	66 90                	xchg   ax,ax
c001af58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af67:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001af6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af75:	c1 e0 02             	shl    eax,0x2
c001af78:	83 ec 0c             	sub    esp,0xc
c001af7b:	50                   	push   eax
c001af7c:	e8 95 cb fe ff       	call   c0007b16 <malloc>
c001af81:	83 c4 10             	add    esp,0x10
c001af84:	89 c2                	mov    edx,eax
c001af86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af8d:	90                   	nop
c001af8e:	83 c4 0c             	add    esp,0xc
c001af91:	c3                   	ret    
c001af92:	66 90                	xchg   ax,ax

c001af94 <SoundPort::~SoundPort()>:
c001af94:	83 ec 0c             	sub    esp,0xc
c001af97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af9e:	85 c0                	test   eax,eax
c001afa0:	74 1e                	je     c001afc0 <SoundPort::~SoundPort()+0x2c>
c001afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001afa9:	83 ec 0c             	sub    esp,0xc
c001afac:	50                   	push   eax
c001afad:	e8 74 cb fe ff       	call   c0007b26 <free>
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001afc0:	90                   	nop
c001afc1:	83 c4 0c             	add    esp,0xc
c001afc4:	c3                   	ret    
c001afc5:	90                   	nop
c001afc6:	66 90                	xchg   ax,ax

c001afc8 <SoundPort::unpause()>:
c001afc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afcc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001afd0:	c3                   	ret    
c001afd1:	90                   	nop
c001afd2:	66 90                	xchg   ax,ax

c001afd4 <SoundPort::pause()>:
c001afd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afd8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001afdc:	c3                   	ret    
c001afdd:	90                   	nop
c001afde:	66 90                	xchg   ax,ax

c001afe0 <SoundPort::getBufferUsed()>:
c001afe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afe4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001afe7:	c3                   	ret    

c001afe8 <SoundPort::getBufferSize()>:
c001afe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001afef:	c3                   	ret    

c001aff0 <SoundPort::buffer16(short*, int)>:
c001aff0:	55                   	push   ebp
c001aff1:	57                   	push   edi
c001aff2:	56                   	push   esi
c001aff3:	53                   	push   ebx
c001aff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aff8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001affc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001afff:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b002:	74 68                	je     c001b06c <SoundPort::buffer16(short*, int)+0x7c>
c001b004:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b008:	85 c9                	test   ecx,ecx
c001b00a:	7e 60                	jle    c001b06c <SoundPort::buffer16(short*, int)+0x7c>
c001b00c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b010:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b013:	c1 e1 0f             	shl    ecx,0xf
c001b016:	8d 70 01             	lea    esi,[eax+0x1]
c001b019:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b01c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b01f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b022:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b025:	74 4d                	je     c001b074 <SoundPort::buffer16(short*, int)+0x84>
c001b027:	31 f6                	xor    esi,esi
c001b029:	eb 21                	jmp    c001b04c <SoundPort::buffer16(short*, int)+0x5c>
c001b02b:	90                   	nop
c001b02c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b031:	8d 79 01             	lea    edi,[ecx+0x1]
c001b034:	c1 e3 0f             	shl    ebx,0xf
c001b037:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b03a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b03d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b040:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b043:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b046:	74 1c                	je     c001b064 <SoundPort::buffer16(short*, int)+0x74>
c001b048:	89 c6                	mov    esi,eax
c001b04a:	66 90                	xchg   ax,ax
c001b04c:	8d 46 01             	lea    eax,[esi+0x1]
c001b04f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b053:	75 d7                	jne    c001b02c <SoundPort::buffer16(short*, int)+0x3c>
c001b055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b059:	8d 76 00             	lea    esi,[esi+0x0]
c001b05c:	5b                   	pop    ebx
c001b05d:	5e                   	pop    esi
c001b05e:	5f                   	pop    edi
c001b05f:	5d                   	pop    ebp
c001b060:	c3                   	ret    
c001b061:	8d 76 00             	lea    esi,[esi+0x0]
c001b064:	5b                   	pop    ebx
c001b065:	8d 46 02             	lea    eax,[esi+0x2]
c001b068:	5e                   	pop    esi
c001b069:	5f                   	pop    edi
c001b06a:	5d                   	pop    ebp
c001b06b:	c3                   	ret    
c001b06c:	5b                   	pop    ebx
c001b06d:	31 c0                	xor    eax,eax
c001b06f:	5e                   	pop    esi
c001b070:	5f                   	pop    edi
c001b071:	5d                   	pop    ebp
c001b072:	c3                   	ret    
c001b073:	90                   	nop
c001b074:	b8 01 00 00 00       	mov    eax,0x1
c001b079:	eb e1                	jmp    c001b05c <SoundPort::buffer16(short*, int)+0x6c>
c001b07b:	90                   	nop

c001b07c <SoundPort::buffer32(int*, int)>:
c001b07c:	55                   	push   ebp
c001b07d:	57                   	push   edi
c001b07e:	56                   	push   esi
c001b07f:	53                   	push   ebx
c001b080:	83 ec 04             	sub    esp,0x4
c001b083:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b08b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b08e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b092:	89 04 24             	mov    DWORD PTR [esp],eax
c001b095:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b098:	74 5a                	je     c001b0f4 <SoundPort::buffer32(int*, int)+0x78>
c001b09a:	85 c0                	test   eax,eax
c001b09c:	7e 56                	jle    c001b0f4 <SoundPort::buffer32(int*, int)+0x78>
c001b09e:	8d 71 01             	lea    esi,[ecx+0x1]
c001b0a1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b0a4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b0a7:	8b 37                	mov    esi,DWORD PTR [edi]
c001b0a9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b0ac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b0af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b0b2:	74 4c                	je     c001b100 <SoundPort::buffer32(int*, int)+0x84>
c001b0b4:	31 f6                	xor    esi,esi
c001b0b6:	eb 1c                	jmp    c001b0d4 <SoundPort::buffer32(int*, int)+0x58>
c001b0b8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b0bb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b0be:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b0c1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b0c4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b0c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b0cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b0ce:	74 18                	je     c001b0e8 <SoundPort::buffer32(int*, int)+0x6c>
c001b0d0:	89 de                	mov    esi,ebx
c001b0d2:	66 90                	xchg   ax,ax
c001b0d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b0d7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b0da:	75 dc                	jne    c001b0b8 <SoundPort::buffer32(int*, int)+0x3c>
c001b0dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b0df:	90                   	nop
c001b0e0:	83 c4 04             	add    esp,0x4
c001b0e3:	5b                   	pop    ebx
c001b0e4:	5e                   	pop    esi
c001b0e5:	5f                   	pop    edi
c001b0e6:	5d                   	pop    ebp
c001b0e7:	c3                   	ret    
c001b0e8:	83 c4 04             	add    esp,0x4
c001b0eb:	8d 46 02             	lea    eax,[esi+0x2]
c001b0ee:	5b                   	pop    ebx
c001b0ef:	5e                   	pop    esi
c001b0f0:	5f                   	pop    edi
c001b0f1:	5d                   	pop    ebp
c001b0f2:	c3                   	ret    
c001b0f3:	90                   	nop
c001b0f4:	83 c4 04             	add    esp,0x4
c001b0f7:	31 c0                	xor    eax,eax
c001b0f9:	5b                   	pop    ebx
c001b0fa:	5e                   	pop    esi
c001b0fb:	5f                   	pop    edi
c001b0fc:	5d                   	pop    ebp
c001b0fd:	c3                   	ret    
c001b0fe:	66 90                	xchg   ax,ax
c001b100:	b8 01 00 00 00       	mov    eax,0x1
c001b105:	eb d9                	jmp    c001b0e0 <SoundPort::buffer32(int*, int)+0x64>
c001b107:	90                   	nop

c001b108 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b108:	57                   	push   edi
c001b109:	56                   	push   esi
c001b10a:	53                   	push   ebx
c001b10b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b10f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b113:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b119:	39 03                	cmp    DWORD PTR [ebx],eax
c001b11b:	74 13                	je     c001b130 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b11d:	83 ec 0c             	sub    esp,0xc
c001b120:	68 80 32 02 c0       	push   0xc0023280
c001b125:	e8 cd 65 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	8d 76 00             	lea    esi,[esi+0x0]
c001b130:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b136:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b139:	74 11                	je     c001b14c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b13b:	83 ec 0c             	sub    esp,0xc
c001b13e:	68 bf 32 02 c0       	push   0xc00232bf
c001b143:	e8 af 65 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b148:	83 c4 10             	add    esp,0x10
c001b14b:	90                   	nop
c001b14c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b152:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b155:	74 11                	je     c001b168 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	68 bf 32 02 c0       	push   0xc00232bf
c001b15f:	e8 93 65 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	90                   	nop
c001b168:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b16b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b16f:	7e 07                	jle    c001b178 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b171:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b175:	8d 76 00             	lea    esi,[esi+0x0]
c001b178:	85 f6                	test   esi,esi
c001b17a:	7e 2c                	jle    c001b1a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b17c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b180:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b183:	31 c9                	xor    ecx,ecx
c001b185:	01 d7                	add    edi,edx
c001b187:	90                   	nop
c001b188:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b18b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b18e:	85 c0                	test   eax,eax
c001b190:	79 06                	jns    c001b198 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b192:	05 ff 7f 00 00       	add    eax,0x7fff
c001b197:	90                   	nop
c001b198:	c1 f8 0f             	sar    eax,0xf
c001b19b:	83 c1 04             	add    ecx,0x4
c001b19e:	66 01 02             	add    WORD PTR [edx],ax
c001b1a1:	83 c2 02             	add    edx,0x2
c001b1a4:	39 d7                	cmp    edi,edx
c001b1a6:	75 e0                	jne    c001b188 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b1a8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b1ae:	83 ec 04             	sub    esp,0x4
c001b1b1:	29 f0                	sub    eax,esi
c001b1b3:	c1 e0 02             	shl    eax,0x2
c001b1b6:	50                   	push   eax
c001b1b7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b1ba:	50                   	push   eax
c001b1bb:	52                   	push   edx
c001b1bc:	e8 0f 52 fe ff       	call   c00003d0 <memmove>
c001b1c1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b1c4:	83 c4 10             	add    esp,0x10
c001b1c7:	29 f0                	sub    eax,esi
c001b1c9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b1cc:	89 f0                	mov    eax,esi
c001b1ce:	5b                   	pop    ebx
c001b1cf:	5e                   	pop    esi
c001b1d0:	5f                   	pop    edi
c001b1d1:	c3                   	ret    
c001b1d2:	66 90                	xchg   ax,ax

c001b1d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b1d4:	57                   	push   edi
c001b1d5:	56                   	push   esi
c001b1d6:	53                   	push   ebx
c001b1d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1e3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b1e9:	39 06                	cmp    DWORD PTR [esi],eax
c001b1eb:	74 13                	je     c001b200 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b1ed:	83 ec 0c             	sub    esp,0xc
c001b1f0:	68 a0 32 02 c0       	push   0xc00232a0
c001b1f5:	e8 fd 64 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b1fa:	83 c4 10             	add    esp,0x10
c001b1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b200:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b206:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b209:	74 11                	je     c001b21c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b20b:	83 ec 0c             	sub    esp,0xc
c001b20e:	68 db 32 02 c0       	push   0xc00232db
c001b213:	e8 df 64 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b218:	83 c4 10             	add    esp,0x10
c001b21b:	90                   	nop
c001b21c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b222:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b225:	74 11                	je     c001b238 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	68 db 32 02 c0       	push   0xc00232db
c001b22f:	e8 c3 64 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b234:	83 c4 10             	add    esp,0x10
c001b237:	90                   	nop
c001b238:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b23b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b23f:	7e 07                	jle    c001b248 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b241:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b245:	8d 76 00             	lea    esi,[esi+0x0]
c001b248:	85 ff                	test   edi,edi
c001b24a:	7e 1c                	jle    c001b268 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b24c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b253:	31 c0                	xor    eax,eax
c001b255:	8d 76 00             	lea    esi,[esi+0x0]
c001b258:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b25b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b25e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b261:	83 c0 04             	add    eax,0x4
c001b264:	39 c1                	cmp    ecx,eax
c001b266:	75 f0                	jne    c001b258 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b268:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b26b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b26e:	83 ec 04             	sub    esp,0x4
c001b271:	29 f8                	sub    eax,edi
c001b273:	c1 e0 02             	shl    eax,0x2
c001b276:	50                   	push   eax
c001b277:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b27a:	50                   	push   eax
c001b27b:	52                   	push   edx
c001b27c:	e8 4f 51 fe ff       	call   c00003d0 <memmove>
c001b281:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b284:	83 c4 10             	add    esp,0x10
c001b287:	29 f8                	sub    eax,edi
c001b289:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b28c:	89 f8                	mov    eax,edi
c001b28e:	5b                   	pop    ebx
c001b28f:	5e                   	pop    esi
c001b290:	5f                   	pop    edi
c001b291:	c3                   	ret    

c001b292 <PCI::open(int, int, void*)>:
c001b292:	83 ec 18             	sub    esp,0x18
c001b295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b299:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b29d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b2a3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2a5:	50                   	push   eax
c001b2a6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b2a9:	31 c0                	xor    eax,eax
c001b2ab:	83 c4 1c             	add    esp,0x1c
c001b2ae:	c3                   	ret    
c001b2af:	90                   	nop

c001b2b0 <PCI::close(int, int, void*)>:
c001b2b0:	31 c0                	xor    eax,eax
c001b2b2:	c3                   	ret    
c001b2b3:	90                   	nop

c001b2b4 <PCI::PCI()>:
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2bb:	83 ec 08             	sub    esp,0x8
c001b2be:	68 f7 32 02 c0       	push   0xc00232f7
c001b2c3:	50                   	push   eax
c001b2c4:	e8 bf 10 ff ff       	call   c000c388 <Bus::Bus(char const*)>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	ba a0 33 02 c0       	mov    edx,0xc00233a0
c001b2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d5:	89 10                	mov    DWORD PTR [eax],edx
c001b2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2db:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e9:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2f8:	0f b6 d0             	movzx  edx,al
c001b2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ff:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b310:	0f b6 d0             	movzx  edx,al
c001b313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b317:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b320:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b326:	8d 50 01             	lea    edx,[eax+0x1]
c001b329:	88 d1                	mov    cl,dl
c001b32b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b32f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b335:	0f b6 d0             	movzx  edx,al
c001b338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b33c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b340:	83 c9 c0             	or     ecx,0xffffffc0
c001b343:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b347:	90                   	nop
c001b348:	83 c4 0c             	add    esp,0xc
c001b34b:	c3                   	ret    

c001b34c <PCI::readBAR8(unsigned int, int)>:
c001b34c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b354:	f6 c2 01             	test   dl,0x1
c001b357:	74 07                	je     c001b360 <PCI::readBAR8(unsigned int, int)+0x14>
c001b359:	83 e2 fc             	and    edx,0xfffffffc
c001b35c:	01 c2                	add    edx,eax
c001b35e:	ec                   	in     al,dx
c001b35f:	c3                   	ret    
c001b360:	83 e2 f0             	and    edx,0xfffffff0
c001b363:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b366:	c3                   	ret    
c001b367:	90                   	nop

c001b368 <PCI::readBAR16(unsigned int, int)>:
c001b368:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b370:	f6 c2 01             	test   dl,0x1
c001b373:	74 08                	je     c001b37d <PCI::readBAR16(unsigned int, int)+0x15>
c001b375:	83 e2 fc             	and    edx,0xfffffffc
c001b378:	01 c2                	add    edx,eax
c001b37a:	66 ed                	in     ax,dx
c001b37c:	c3                   	ret    
c001b37d:	83 e2 f0             	and    edx,0xfffffff0
c001b380:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b384:	c3                   	ret    
c001b385:	90                   	nop

c001b386 <PCI::readBAR32(unsigned int, int)>:
c001b386:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b38a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b38e:	f6 c2 01             	test   dl,0x1
c001b391:	74 07                	je     c001b39a <PCI::readBAR32(unsigned int, int)+0x14>
c001b393:	83 e2 fc             	and    edx,0xfffffffc
c001b396:	01 c2                	add    edx,eax
c001b398:	ed                   	in     eax,dx
c001b399:	c3                   	ret    
c001b39a:	83 e2 f0             	and    edx,0xfffffff0
c001b39d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b3a0:	c3                   	ret    
c001b3a1:	90                   	nop

c001b3a2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b3a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3ae:	f6 c2 01             	test   dl,0x1
c001b3b1:	74 07                	je     c001b3ba <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b3b3:	83 e2 fc             	and    edx,0xfffffffc
c001b3b6:	01 ca                	add    edx,ecx
c001b3b8:	ee                   	out    dx,al
c001b3b9:	c3                   	ret    
c001b3ba:	83 e2 f0             	and    edx,0xfffffff0
c001b3bd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b3c0:	c3                   	ret    
c001b3c1:	90                   	nop

c001b3c2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b3c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3ce:	f6 c2 01             	test   dl,0x1
c001b3d1:	74 08                	je     c001b3db <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b3d3:	83 e2 fc             	and    edx,0xfffffffc
c001b3d6:	01 ca                	add    edx,ecx
c001b3d8:	66 ef                	out    dx,ax
c001b3da:	c3                   	ret    
c001b3db:	83 e2 f0             	and    edx,0xfffffff0
c001b3de:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b3e2:	c3                   	ret    
c001b3e3:	90                   	nop

c001b3e4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b3e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3f0:	f6 c2 01             	test   dl,0x1
c001b3f3:	74 07                	je     c001b3fc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b3f5:	83 e2 fc             	and    edx,0xfffffffc
c001b3f8:	01 ca                	add    edx,ecx
c001b3fa:	ef                   	out    dx,eax
c001b3fb:	c3                   	ret    
c001b3fc:	83 e2 f0             	and    edx,0xfffffff0
c001b3ff:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b402:	c3                   	ret    
c001b403:	90                   	nop

c001b404 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b404:	55                   	push   ebp
c001b405:	57                   	push   edi
c001b406:	56                   	push   esi
c001b407:	53                   	push   ebx
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b410:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b414:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b418:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b41c:	83 fe 07             	cmp    esi,0x7
c001b41f:	76 10                	jbe    c001b431 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b421:	83 ec 0c             	sub    esp,0xc
c001b424:	68 ff 32 02 c0       	push   0xc00232ff
c001b429:	e8 c9 62 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b42e:	83 c4 10             	add    esp,0x10
c001b431:	0f b6 db             	movzx  ebx,bl
c001b434:	83 fb 0f             	cmp    ebx,0xf
c001b437:	76 10                	jbe    c001b449 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b439:	83 ec 0c             	sub    esp,0xc
c001b43c:	68 2f 33 02 c0       	push   0xc002332f
c001b441:	e8 b1 62 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b446:	83 c4 10             	add    esp,0x10
c001b449:	8d 04 36             	lea    eax,[esi+esi*1]
c001b44c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b451:	83 c8 f0             	or     eax,0xfffffff0
c001b454:	ee                   	out    dx,al
c001b455:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b45a:	89 e8                	mov    eax,ebp
c001b45c:	ee                   	out    dx,al
c001b45d:	83 c4 0c             	add    esp,0xc
c001b460:	89 d8                	mov    eax,ebx
c001b462:	89 f9                	mov    ecx,edi
c001b464:	c1 e0 08             	shl    eax,0x8
c001b467:	0f b6 d9             	movzx  ebx,cl
c001b46a:	83 e3 fc             	and    ebx,0xfffffffc
c001b46d:	09 d8                	or     eax,ebx
c001b46f:	5b                   	pop    ebx
c001b470:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b475:	5e                   	pop    esi
c001b476:	5f                   	pop    edi
c001b477:	5d                   	pop    ebp
c001b478:	c3                   	ret    
c001b479:	90                   	nop

c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b47a:	57                   	push   edi
c001b47b:	56                   	push   esi
c001b47c:	53                   	push   ebx
c001b47d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b481:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b485:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b48b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b48f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b493:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b497:	83 ff 01             	cmp    edi,0x1
c001b49a:	75 3f                	jne    c001b4db <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b49c:	89 de                	mov    esi,ebx
c001b49e:	0f b6 c0             	movzx  eax,al
c001b4a1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b4a7:	c1 e0 10             	shl    eax,0x10
c001b4aa:	0f b6 c9             	movzx  ecx,cl
c001b4ad:	09 f0                	or     eax,esi
c001b4af:	c1 e1 08             	shl    ecx,0x8
c001b4b2:	0f b6 d2             	movzx  edx,dl
c001b4b5:	09 c8                	or     eax,ecx
c001b4b7:	c1 e2 0b             	shl    edx,0xb
c001b4ba:	09 d0                	or     eax,edx
c001b4bc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b4c1:	0d 00 00 00 80       	or     eax,0x80000000
c001b4c6:	ef                   	out    dx,eax
c001b4c7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b4cc:	ed                   	in     eax,dx
c001b4cd:	83 e3 02             	and    ebx,0x2
c001b4d0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4d7:	d3 e8                	shr    eax,cl
c001b4d9:	eb 44                	jmp    c001b51f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4db:	83 ff 02             	cmp    edi,0x2
c001b4de:	75 2d                	jne    c001b50d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	0f b6 c9             	movzx  ecx,cl
c001b4e6:	0f b6 d2             	movzx  edx,dl
c001b4e9:	0f b6 fb             	movzx  edi,bl
c001b4ec:	0f b6 c0             	movzx  eax,al
c001b4ef:	57                   	push   edi
c001b4f0:	51                   	push   ecx
c001b4f1:	52                   	push   edx
c001b4f2:	50                   	push   eax
c001b4f3:	56                   	push   esi
c001b4f4:	e8 0b ff ff ff       	call   c001b404 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4f9:	89 c2                	mov    edx,eax
c001b4fb:	ed                   	in     eax,dx
c001b4fc:	83 e3 02             	and    ebx,0x2
c001b4ff:	83 c4 20             	add    esp,0x20
c001b502:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b509:	d3 e8                	shr    eax,cl
c001b50b:	eb 12                	jmp    c001b51f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b50d:	83 ec 0c             	sub    esp,0xc
c001b510:	68 5f 33 02 c0       	push   0xc002335f
c001b515:	e8 dd 61 ff ff       	call   c00116f7 <KePanic(char const*)>
c001b51a:	83 c4 10             	add    esp,0x10
c001b51d:	31 c0                	xor    eax,eax
c001b51f:	5b                   	pop    ebx
c001b520:	5e                   	pop    esi
c001b521:	5f                   	pop    edi
c001b522:	c3                   	ret    
c001b523:	90                   	nop

c001b524 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b524:	83 ec 18             	sub    esp,0x18
c001b527:	6a 00                	push   0x0
c001b529:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b52e:	50                   	push   eax
c001b52f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b534:	50                   	push   eax
c001b535:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b53a:	50                   	push   eax
c001b53b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b53f:	e8 36 ff ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b544:	83 c4 2c             	add    esp,0x2c
c001b547:	c3                   	ret    

c001b548 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b548:	83 ec 18             	sub    esp,0x18
c001b54b:	6a 0e                	push   0xe
c001b54d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b552:	50                   	push   eax
c001b553:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b558:	50                   	push   eax
c001b559:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b55e:	50                   	push   eax
c001b55f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b563:	e8 12 ff ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b568:	83 c4 2c             	add    esp,0x2c
c001b56b:	0f b6 c0             	movzx  eax,al
c001b56e:	c3                   	ret    
c001b56f:	90                   	nop

c001b570 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b570:	55                   	push   ebp
c001b571:	57                   	push   edi
c001b572:	56                   	push   esi
c001b573:	53                   	push   ebx
c001b574:	83 ec 18             	sub    esp,0x18
c001b577:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b57c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b581:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b586:	6a 0a                	push   0xa
c001b588:	56                   	push   esi
c001b589:	55                   	push   ebp
c001b58a:	57                   	push   edi
c001b58b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b58f:	e8 e6 fe ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b594:	83 c4 14             	add    esp,0x14
c001b597:	89 c3                	mov    ebx,eax
c001b599:	6a 0a                	push   0xa
c001b59b:	0f b6 db             	movzx  ebx,bl
c001b59e:	56                   	push   esi
c001b59f:	55                   	push   ebp
c001b5a0:	57                   	push   edi
c001b5a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b5a5:	e8 d0 fe ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5aa:	83 c4 2c             	add    esp,0x2c
c001b5ad:	25 00 ff 00 00       	and    eax,0xff00
c001b5b2:	09 d8                	or     eax,ebx
c001b5b4:	5b                   	pop    ebx
c001b5b5:	5e                   	pop    esi
c001b5b6:	5f                   	pop    edi
c001b5b7:	5d                   	pop    ebp
c001b5b8:	c3                   	ret    
c001b5b9:	90                   	nop

c001b5ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b5ba:	83 ec 18             	sub    esp,0x18
c001b5bd:	6a 08                	push   0x8
c001b5bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5c4:	50                   	push   eax
c001b5c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5ca:	50                   	push   eax
c001b5cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5d0:	50                   	push   eax
c001b5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5d5:	e8 a0 fe ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5da:	83 c4 2c             	add    esp,0x2c
c001b5dd:	0f b6 c4             	movzx  eax,ah
c001b5e0:	c3                   	ret    
c001b5e1:	90                   	nop

c001b5e2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b5e2:	83 ec 18             	sub    esp,0x18
c001b5e5:	6a 08                	push   0x8
c001b5e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5ec:	50                   	push   eax
c001b5ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5f2:	50                   	push   eax
c001b5f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5f8:	50                   	push   eax
c001b5f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5fd:	e8 78 fe ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b602:	83 c4 2c             	add    esp,0x2c
c001b605:	c3                   	ret    

c001b606 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b606:	83 ec 18             	sub    esp,0x18
c001b609:	6a 3c                	push   0x3c
c001b60b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b610:	50                   	push   eax
c001b611:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b616:	50                   	push   eax
c001b617:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b61c:	50                   	push   eax
c001b61d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b621:	e8 54 fe ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b626:	83 c4 2c             	add    esp,0x2c
c001b629:	c3                   	ret    

c001b62a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b62a:	83 ec 18             	sub    esp,0x18
c001b62d:	6a 18                	push   0x18
c001b62f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b634:	50                   	push   eax
c001b635:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b63a:	50                   	push   eax
c001b63b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b640:	50                   	push   eax
c001b641:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b645:	e8 30 fe ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b64a:	83 c4 2c             	add    esp,0x2c
c001b64d:	0f b6 c4             	movzx  eax,ah
c001b650:	c3                   	ret    
c001b651:	90                   	nop

c001b652 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b652:	55                   	push   ebp
c001b653:	57                   	push   edi
c001b654:	56                   	push   esi
c001b655:	53                   	push   ebx
c001b656:	83 ec 28             	sub    esp,0x28
c001b659:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b65d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b662:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b667:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b66c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b673:	8d 43 12             	lea    eax,[ebx+0x12]
c001b676:	83 c3 10             	add    ebx,0x10
c001b679:	0f b6 c0             	movzx  eax,al
c001b67c:	0f b6 db             	movzx  ebx,bl
c001b67f:	50                   	push   eax
c001b680:	51                   	push   ecx
c001b681:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b685:	57                   	push   edi
c001b686:	55                   	push   ebp
c001b687:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b68b:	e8 ea fd ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b690:	83 c4 14             	add    esp,0x14
c001b693:	89 c6                	mov    esi,eax
c001b695:	53                   	push   ebx
c001b696:	c1 e6 10             	shl    esi,0x10
c001b699:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b69d:	51                   	push   ecx
c001b69e:	57                   	push   edi
c001b69f:	55                   	push   ebp
c001b6a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b6a4:	e8 d1 fd ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6a9:	83 c4 3c             	add    esp,0x3c
c001b6ac:	0f b7 c0             	movzx  eax,ax
c001b6af:	5b                   	pop    ebx
c001b6b0:	09 f0                	or     eax,esi
c001b6b2:	5e                   	pop    esi
c001b6b3:	5f                   	pop    edi
c001b6b4:	5d                   	pop    ebp
c001b6b5:	c3                   	ret    

c001b6b6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b6b6:	55                   	push   ebp
c001b6b7:	57                   	push   edi
c001b6b8:	56                   	push   esi
c001b6b9:	53                   	push   ebx
c001b6ba:	83 ec 0c             	sub    esp,0xc
c001b6bd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b6c1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6c5:	89 f5                	mov    ebp,esi
c001b6c7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b6cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b6dd:	83 f9 01             	cmp    ecx,0x1
c001b6e0:	75 5d                	jne    c001b73f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b6e2:	0f b6 c8             	movzx  ecx,al
c001b6e5:	0f b6 d2             	movzx  edx,dl
c001b6e8:	c1 e1 10             	shl    ecx,0x10
c001b6eb:	c1 e2 0b             	shl    edx,0xb
c001b6ee:	89 f0                	mov    eax,esi
c001b6f0:	25 fc 00 00 00       	and    eax,0xfc
c001b6f5:	09 c1                	or     ecx,eax
c001b6f7:	89 e8                	mov    eax,ebp
c001b6f9:	0f b6 c0             	movzx  eax,al
c001b6fc:	c1 e0 08             	shl    eax,0x8
c001b6ff:	09 c1                	or     ecx,eax
c001b701:	09 d1                	or     ecx,edx
c001b703:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b708:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b70e:	89 c8                	mov    eax,ecx
c001b710:	ef                   	out    dx,eax
c001b711:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b716:	ed                   	in     eax,dx
c001b717:	0f b7 db             	movzx  ebx,bx
c001b71a:	83 e6 02             	and    esi,0x2
c001b71d:	74 0a                	je     c001b729 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b71f:	0f b7 d0             	movzx  edx,ax
c001b722:	c1 e3 10             	shl    ebx,0x10
c001b725:	09 d3                	or     ebx,edx
c001b727:	eb 05                	jmp    c001b72e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b729:	66 31 c0             	xor    ax,ax
c001b72c:	09 c3                	or     ebx,eax
c001b72e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b733:	89 c8                	mov    eax,ecx
c001b735:	ef                   	out    dx,eax
c001b736:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b73b:	89 d8                	mov    eax,ebx
c001b73d:	eb 41                	jmp    c001b780 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b73f:	83 f9 02             	cmp    ecx,0x2
c001b742:	75 45                	jne    c001b789 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b744:	83 ec 0c             	sub    esp,0xc
c001b747:	0f b6 d2             	movzx  edx,dl
c001b74a:	89 f1                	mov    ecx,esi
c001b74c:	0f b6 c0             	movzx  eax,al
c001b74f:	0f b6 f1             	movzx  esi,cl
c001b752:	89 e9                	mov    ecx,ebp
c001b754:	56                   	push   esi
c001b755:	0f b6 c9             	movzx  ecx,cl
c001b758:	51                   	push   ecx
c001b759:	52                   	push   edx
c001b75a:	50                   	push   eax
c001b75b:	57                   	push   edi
c001b75c:	e8 a3 fc ff ff       	call   c001b404 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b761:	89 c2                	mov    edx,eax
c001b763:	ed                   	in     eax,dx
c001b764:	83 c4 20             	add    esp,0x20
c001b767:	0f b7 db             	movzx  ebx,bx
c001b76a:	f6 c2 02             	test   dl,0x2
c001b76d:	74 0c                	je     c001b77b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b76f:	0f b7 c8             	movzx  ecx,ax
c001b772:	89 d8                	mov    eax,ebx
c001b774:	c1 e0 10             	shl    eax,0x10
c001b777:	09 c8                	or     eax,ecx
c001b779:	eb 05                	jmp    c001b780 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b77b:	66 31 c0             	xor    ax,ax
c001b77e:	09 d8                	or     eax,ebx
c001b780:	ef                   	out    dx,eax
c001b781:	83 c4 0c             	add    esp,0xc
c001b784:	5b                   	pop    ebx
c001b785:	5e                   	pop    esi
c001b786:	5f                   	pop    edi
c001b787:	5d                   	pop    ebp
c001b788:	c3                   	ret    
c001b789:	c7 44 24 20 5f 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc002335f
c001b791:	83 c4 0c             	add    esp,0xc
c001b794:	5b                   	pop    ebx
c001b795:	5e                   	pop    esi
c001b796:	5f                   	pop    edi
c001b797:	5d                   	pop    ebp
c001b798:	e9 5a 5f ff ff       	jmp    c00116f7 <KePanic(char const*)>
c001b79d:	90                   	nop

c001b79e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b79e:	55                   	push   ebp
c001b79f:	57                   	push   edi
c001b7a0:	56                   	push   esi
c001b7a1:	53                   	push   ebx
c001b7a2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b7a8:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b7af:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b7b6:	0f 85 bd 00 00 00    	jne    c001b879 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	68 14 01 00 00       	push   0x114
c001b7c4:	e8 4d c3 fe ff       	call   c0007b16 <malloc>
c001b7c9:	83 c4 0c             	add    esp,0xc
c001b7cc:	89 c3                	mov    ebx,eax
c001b7ce:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b7d4:	68 65 33 02 c0       	push   0xc0023365
c001b7d9:	50                   	push   eax
c001b7da:	e8 cd 03 ff ff       	call   c000bbac <File::File(char const*, Process*)>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	85 db                	test   ebx,ebx
c001b7e4:	0f 84 67 02 00 00    	je     c001ba51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7ea:	56                   	push   esi
c001b7eb:	56                   	push   esi
c001b7ec:	6a 01                	push   0x1
c001b7ee:	53                   	push   ebx
c001b7ef:	e8 d6 03 ff ff       	call   c000bbca <File::open(FileOpenMode)>
c001b7f4:	83 c4 10             	add    esp,0x10
c001b7f7:	85 c0                	test   eax,eax
c001b7f9:	0f 85 52 02 00 00    	jne    c001ba51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7ff:	52                   	push   edx
c001b800:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b804:	50                   	push   eax
c001b805:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b809:	50                   	push   eax
c001b80a:	53                   	push   ebx
c001b80b:	e8 bc 06 ff ff       	call   c000becc <File::stat(unsigned long long*, bool*)>
c001b810:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b814:	40                   	inc    eax
c001b815:	89 04 24             	mov    DWORD PTR [esp],eax
c001b818:	e8 f9 c2 fe ff       	call   c0007b16 <malloc>
c001b81d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b821:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b826:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b82a:	59                   	pop    ecx
c001b82b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b82d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b831:	51                   	push   ecx
c001b832:	50                   	push   eax
c001b833:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b837:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b83b:	53                   	push   ebx
c001b83c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b83f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b843:	83 c4 20             	add    esp,0x20
c001b846:	89 c8                	mov    eax,ecx
c001b848:	99                   	cdq    
c001b849:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b84d:	0f 85 fe 01 00 00    	jne    c001ba51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b853:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b857:	0f 85 f4 01 00 00    	jne    c001ba51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b85d:	83 ec 0c             	sub    esp,0xc
c001b860:	53                   	push   ebx
c001b861:	e8 c2 03 ff ff       	call   c000bc28 <File::close()>
c001b866:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b86a:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b871:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b876:	83 c4 10             	add    esp,0x10
c001b879:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b87e:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b884:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b888:	31 f6                	xor    esi,esi
c001b88a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b892:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b899:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b89e:	31 c9                	xor    ecx,ecx
c001b8a0:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b8a8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b8ad:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b8b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b8b9:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b8c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b8c5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b8c9:	0f 8e 82 01 00 00    	jle    c001ba51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b8cf:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b8d2:	d4 40                	aam    0x40
c001b8d4:	d5 39                	aad    0x39
c001b8d6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b8da:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b8de:	d4 40                	aam    0x40
c001b8e0:	d5 39                	aad    0x39
c001b8e2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8e6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b8ea:	d4 40                	aam    0x40
c001b8ec:	d5 39                	aad    0x39
c001b8ee:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b8f2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b8f6:	d4 40                	aam    0x40
c001b8f8:	d5 39                	aad    0x39
c001b8fa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8fe:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b902:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b906:	3c 56                	cmp    al,0x56
c001b908:	74 43                	je     c001b94d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b90a:	d4 40                	aam    0x40
c001b90c:	d5 39                	aad    0x39
c001b90e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b911:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b915:	0f b6 c9             	movzx  ecx,cl
c001b918:	c1 e1 04             	shl    ecx,0x4
c001b91b:	d4 40                	aam    0x40
c001b91d:	d5 39                	aad    0x39
c001b91f:	83 e8 30             	sub    eax,0x30
c001b922:	0f b6 c0             	movzx  eax,al
c001b925:	09 c1                	or     ecx,eax
c001b927:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b92b:	c1 e1 04             	shl    ecx,0x4
c001b92e:	d4 40                	aam    0x40
c001b930:	d5 39                	aad    0x39
c001b932:	83 e8 30             	sub    eax,0x30
c001b935:	0f b6 c0             	movzx  eax,al
c001b938:	09 c1                	or     ecx,eax
c001b93a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b93e:	c1 e1 04             	shl    ecx,0x4
c001b941:	d4 40                	aam    0x40
c001b943:	d5 39                	aad    0x39
c001b945:	83 e8 30             	sub    eax,0x30
c001b948:	0f b6 c0             	movzx  eax,al
c001b94b:	09 c1                	or     ecx,eax
c001b94d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b951:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b955:	3c 58                	cmp    al,0x58
c001b957:	74 47                	je     c001b9a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b959:	d4 40                	aam    0x40
c001b95b:	d5 39                	aad    0x39
c001b95d:	8d 50 d0             	lea    edx,[eax-0x30]
c001b960:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b964:	0f b6 d2             	movzx  edx,dl
c001b967:	c1 e2 04             	shl    edx,0x4
c001b96a:	d4 40                	aam    0x40
c001b96c:	d5 39                	aad    0x39
c001b96e:	83 e8 30             	sub    eax,0x30
c001b971:	0f b6 c0             	movzx  eax,al
c001b974:	09 c2                	or     edx,eax
c001b976:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b97a:	c1 e2 04             	shl    edx,0x4
c001b97d:	d4 40                	aam    0x40
c001b97f:	d5 39                	aad    0x39
c001b981:	83 e8 30             	sub    eax,0x30
c001b984:	0f b6 c0             	movzx  eax,al
c001b987:	09 c2                	or     edx,eax
c001b989:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b98d:	c1 e2 04             	shl    edx,0x4
c001b990:	d4 40                	aam    0x40
c001b992:	d5 39                	aad    0x39
c001b994:	83 e8 30             	sub    eax,0x30
c001b997:	0f b6 c0             	movzx  eax,al
c001b99a:	09 c2                	or     edx,eax
c001b99c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9a0:	83 c6 10             	add    esi,0x10
c001b9a3:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b9a7:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b9ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b9af:	83 fa 0a             	cmp    edx,0xa
c001b9b2:	74 0b                	je     c001b9bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b9b4:	47                   	inc    edi
c001b9b5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b9b9:	75 19                	jne    c001b9d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b9bb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b9bf:	31 c0                	xor    eax,eax
c001b9c1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b9c6:	0f 94 c0             	sete   al
c001b9c9:	01 c6                	add    esi,eax
c001b9cb:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b9d0:	75 0b                	jne    c001b9dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b9d2:	eb 14                	jmp    c001b9e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b9d4:	46                   	inc    esi
c001b9d5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b9d8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b9db:	eb ca                	jmp    c001b9a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b9dd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b9e2:	0f 85 dd fe ff ff    	jne    c001b8c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9e8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b9ed:	74 10                	je     c001b9ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b9ef:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b9f4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b9f9:	0f 85 c6 fe ff ff    	jne    c001b8c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba07:	83 e8 30             	sub    eax,0x30
c001ba0a:	83 ef 30             	sub    edi,0x30
c001ba0d:	c1 e0 04             	shl    eax,0x4
c001ba10:	09 f8                	or     eax,edi
c001ba12:	0f b6 c0             	movzx  eax,al
c001ba15:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ba19:	0f 85 a6 fe ff ff    	jne    c001b8c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba23:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ba27:	83 e8 30             	sub    eax,0x30
c001ba2a:	83 ef 30             	sub    edi,0x30
c001ba2d:	c1 e0 04             	shl    eax,0x4
c001ba30:	09 f8                	or     eax,edi
c001ba32:	0f b6 c0             	movzx  eax,al
c001ba35:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ba39:	0f 85 86 fe ff ff    	jne    c001b8c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba3f:	50                   	push   eax
c001ba40:	50                   	push   eax
c001ba41:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ba45:	50                   	push   eax
c001ba46:	55                   	push   ebp
c001ba47:	e8 f4 4b fe ff       	call   c0000640 <strcpy>
c001ba4c:	83 c4 10             	add    esp,0x10
c001ba4f:	eb 06                	jmp    c001ba57 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ba51:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ba55:	31 ed                	xor    ebp,ebp
c001ba57:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ba5d:	89 e8                	mov    eax,ebp
c001ba5f:	5b                   	pop    ebx
c001ba60:	5e                   	pop    esi
c001ba61:	5f                   	pop    edi
c001ba62:	5d                   	pop    ebp
c001ba63:	c3                   	ret    

c001ba64 <PCI::checkBus(unsigned char)>:
c001ba64:	56                   	push   esi
c001ba65:	53                   	push   ebx
c001ba66:	31 db                	xor    ebx,ebx
c001ba68:	51                   	push   ecx
c001ba69:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba6e:	52                   	push   edx
c001ba6f:	53                   	push   ebx
c001ba70:	43                   	inc    ebx
c001ba71:	56                   	push   esi
c001ba72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba76:	e8 03 03 00 00       	call   c001bd7e <PCI::checkDevice(unsigned char, unsigned char)>
c001ba7b:	83 c4 10             	add    esp,0x10
c001ba7e:	83 fb 20             	cmp    ebx,0x20
c001ba81:	75 eb                	jne    c001ba6e <PCI::checkBus(unsigned char)+0xa>
c001ba83:	58                   	pop    eax
c001ba84:	5b                   	pop    ebx
c001ba85:	5e                   	pop    esi
c001ba86:	c3                   	ret    
c001ba87:	90                   	nop

c001ba88 <PCI::foundDevice(PCIDeviceInfo)>:
c001ba88:	55                   	push   ebp
c001ba89:	57                   	push   edi
c001ba8a:	56                   	push   esi
c001ba8b:	53                   	push   ebx
c001ba8c:	83 ec 1c             	sub    esp,0x1c
c001ba8f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba94:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba98:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba9d:	0f 84 57 01 00 00    	je     c001bbfa <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001baa3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001baa8:	66 3d 06 04          	cmp    ax,0x406
c001baac:	75 2c                	jne    c001bada <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001baae:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001bab3:	50                   	push   eax
c001bab4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001bab9:	50                   	push   eax
c001baba:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001babf:	50                   	push   eax
c001bac0:	53                   	push   ebx
c001bac1:	e8 64 fb ff ff       	call   c001b62a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001bac6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001baca:	0f b6 c0             	movzx  eax,al
c001bacd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001bad1:	83 c4 2c             	add    esp,0x2c
c001bad4:	5b                   	pop    ebx
c001bad5:	5e                   	pop    esi
c001bad6:	5f                   	pop    edi
c001bad7:	5d                   	pop    ebp
c001bad8:	eb 8a                	jmp    c001ba64 <PCI::checkBus(unsigned char)>
c001bada:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bade:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001bae4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bae8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001baec:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001baf1:	85 d2                	test   edx,edx
c001baf3:	74 36                	je     c001bb2b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001baf5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001baf8:	85 c9                	test   ecx,ecx
c001bafa:	74 2b                	je     c001bb27 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bafc:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001bb02:	31 ee                	xor    esi,ebp
c001bb04:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001bb0a:	75 1b                	jne    c001bb27 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bb0c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001bb10:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001bb16:	75 0f                	jne    c001bb27 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bb18:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001bb1f:	39 f9                	cmp    ecx,edi
c001bb21:	0f 84 d3 00 00 00    	je     c001bbfa <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001bb27:	8b 12                	mov    edx,DWORD PTR [edx]
c001bb29:	eb c6                	jmp    c001baf1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001bb2b:	3d 01 06 00 00       	cmp    eax,0x601
c001bb30:	75 19                	jne    c001bb4b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001bb32:	83 ec 0c             	sub    esp,0xc
c001bb35:	68 64 01 00 00       	push   0x164
c001bb3a:	e8 d7 bf fe ff       	call   c0007b16 <malloc>
c001bb3f:	89 c5                	mov    ebp,eax
c001bb41:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb44:	e8 a1 0e 00 00       	call   c001c9ea <SATABus::SATABus()>
c001bb49:	eb 1e                	jmp    c001bb69 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001bb4b:	3d 01 01 00 00       	cmp    eax,0x101
c001bb50:	75 62                	jne    c001bbb4 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001bb52:	83 ec 0c             	sub    esp,0xc
c001bb55:	68 70 02 00 00       	push   0x270
c001bb5a:	e8 b7 bf fe ff       	call   c0007b16 <malloc>
c001bb5f:	89 c5                	mov    ebp,eax
c001bb61:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb64:	e8 e5 02 00 00       	call   c001be4e <IDE::IDE()>
c001bb69:	5f                   	pop    edi
c001bb6a:	58                   	pop    eax
c001bb6b:	55                   	push   ebp
c001bb6c:	53                   	push   ebx
c001bb6d:	e8 b4 0e ff ff       	call   c000ca26 <Device::addChild(Device*)>
c001bb72:	83 ec 1c             	sub    esp,0x1c
c001bb75:	b9 09 00 00 00       	mov    ecx,0x9
c001bb7a:	fc                   	cld    
c001bb7b:	89 e7                	mov    edi,esp
c001bb7d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb83:	55                   	push   ebp
c001bb84:	e8 e3 0d ff ff       	call   c000c96c <Device::preOpenPCI(PCIDeviceInfo)>
c001bb89:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb8c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb90:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb98:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bba0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bba8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bbab:	83 c4 4c             	add    esp,0x4c
c001bbae:	5b                   	pop    ebx
c001bbaf:	5e                   	pop    esi
c001bbb0:	5f                   	pop    edi
c001bbb1:	5d                   	pop    ebp
c001bbb2:	ff e0                	jmp    eax
c001bbb4:	83 ec 0c             	sub    esp,0xc
c001bbb7:	68 58 01 00 00       	push   0x158
c001bbbc:	e8 55 bf fe ff       	call   c0007b16 <malloc>
c001bbc1:	89 c5                	mov    ebp,eax
c001bbc3:	58                   	pop    eax
c001bbc4:	5a                   	pop    edx
c001bbc5:	68 7e 33 02 c0       	push   0xc002337e
c001bbca:	55                   	push   ebp
c001bbcb:	e8 f4 10 ff ff       	call   c000ccc4 <DriverlessDevice::DriverlessDevice(char const*)>
c001bbd0:	59                   	pop    ecx
c001bbd1:	5e                   	pop    esi
c001bbd2:	55                   	push   ebp
c001bbd3:	53                   	push   ebx
c001bbd4:	e8 4d 0e ff ff       	call   c000ca26 <Device::addChild(Device*)>
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	b9 09 00 00 00       	mov    ecx,0x9
c001bbe1:	fc                   	cld    
c001bbe2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bbe6:	89 fe                	mov    esi,edi
c001bbe8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbea:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bbee:	83 c4 1c             	add    esp,0x1c
c001bbf1:	5b                   	pop    ebx
c001bbf2:	5e                   	pop    esi
c001bbf3:	5f                   	pop    edi
c001bbf4:	5d                   	pop    ebp
c001bbf5:	e9 72 0d ff ff       	jmp    c000c96c <Device::preOpenPCI(PCIDeviceInfo)>
c001bbfa:	83 c4 1c             	add    esp,0x1c
c001bbfd:	5b                   	pop    ebx
c001bbfe:	5e                   	pop    esi
c001bbff:	5f                   	pop    edi
c001bc00:	5d                   	pop    ebp
c001bc01:	c3                   	ret    

c001bc02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bc02:	55                   	push   ebp
c001bc03:	57                   	push   edi
c001bc04:	56                   	push   esi
c001bc05:	53                   	push   ebx
c001bc06:	83 ec 68             	sub    esp,0x68
c001bc09:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bc0d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bc14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bc1f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bc24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc28:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bc2f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bc34:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bc38:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bc3d:	6a 0c                	push   0xc
c001bc3f:	57                   	push   edi
c001bc40:	53                   	push   ebx
c001bc41:	56                   	push   esi
c001bc42:	55                   	push   ebp
c001bc43:	e8 32 f8 ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc48:	83 c4 20             	add    esp,0x20
c001bc4b:	57                   	push   edi
c001bc4c:	53                   	push   ebx
c001bc4d:	56                   	push   esi
c001bc4e:	55                   	push   ebp
c001bc4f:	e8 1c f9 ff ff       	call   c001b570 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bc54:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bc59:	57                   	push   edi
c001bc5a:	53                   	push   ebx
c001bc5b:	56                   	push   esi
c001bc5c:	55                   	push   ebp
c001bc5d:	e8 a4 f9 ff ff       	call   c001b606 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bc62:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bc66:	83 c4 14             	add    esp,0x14
c001bc69:	6a 3c                	push   0x3c
c001bc6b:	57                   	push   edi
c001bc6c:	53                   	push   ebx
c001bc6d:	56                   	push   esi
c001bc6e:	55                   	push   ebp
c001bc6f:	e8 06 f8 ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc74:	0f b6 c4             	movzx  eax,ah
c001bc77:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc7b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc7f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc83:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc88:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc8e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc98:	83 c4 20             	add    esp,0x20
c001bc9b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bca0:	74 30                	je     c001bcd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bca2:	31 c0                	xor    eax,eax
c001bca4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bca8:	7e 28                	jle    c001bcd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bcaa:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bcb2:	39 cb                	cmp    ebx,ecx
c001bcb4:	75 19                	jne    c001bccf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bcb6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bcbe:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bcc2:	75 0b                	jne    c001bccf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bcc4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bccb:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bccf:	40                   	inc    eax
c001bcd0:	eb d2                	jmp    c001bca4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bcd2:	31 d2                	xor    edx,edx
c001bcd4:	83 ec 0c             	sub    esp,0xc
c001bcd7:	57                   	push   edi
c001bcd8:	53                   	push   ebx
c001bcd9:	56                   	push   esi
c001bcda:	52                   	push   edx
c001bcdb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bcdf:	55                   	push   ebp
c001bce0:	e8 6d f9 ff ff       	call   c001b652 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bce5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bce9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bced:	42                   	inc    edx
c001bcee:	83 c4 20             	add    esp,0x20
c001bcf1:	83 fa 06             	cmp    edx,0x6
c001bcf4:	75 de                	jne    c001bcd4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bcf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcfe:	c1 e2 08             	shl    edx,0x8
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	0f b6 c4             	movzx  eax,ah
c001bd07:	09 d0                	or     eax,edx
c001bd09:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bd0e:	6a 02                	push   0x2
c001bd10:	57                   	push   edi
c001bd11:	53                   	push   ebx
c001bd12:	56                   	push   esi
c001bd13:	55                   	push   ebp
c001bd14:	e8 61 f7 ff ff       	call   c001b47a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd19:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bd1e:	83 c4 20             	add    esp,0x20
c001bd21:	57                   	push   edi
c001bd22:	53                   	push   ebx
c001bd23:	56                   	push   esi
c001bd24:	55                   	push   ebp
c001bd25:	e8 90 f8 ff ff       	call   c001b5ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bd2a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bd2e:	57                   	push   edi
c001bd2f:	53                   	push   ebx
c001bd30:	56                   	push   esi
c001bd31:	55                   	push   ebp
c001bd32:	e8 ed f7 ff ff       	call   c001b524 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd37:	b9 09 00 00 00       	mov    ecx,0x9
c001bd3c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bd41:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bd45:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bd49:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bd4d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bd51:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bd55:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bd59:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bd5d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bd61:	83 ec 0c             	sub    esp,0xc
c001bd64:	fc                   	cld    
c001bd65:	89 e7                	mov    edi,esp
c001bd67:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bd6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bd6d:	55                   	push   ebp
c001bd6e:	e8 15 fd ff ff       	call   c001ba88 <PCI::foundDevice(PCIDeviceInfo)>
c001bd73:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bd79:	5b                   	pop    ebx
c001bd7a:	5e                   	pop    esi
c001bd7b:	5f                   	pop    edi
c001bd7c:	5d                   	pop    ebp
c001bd7d:	c3                   	ret    

c001bd7e <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd7e:	55                   	push   ebp
c001bd7f:	57                   	push   edi
c001bd80:	56                   	push   esi
c001bd81:	53                   	push   ebx
c001bd82:	83 ec 0c             	sub    esp,0xc
c001bd85:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd89:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd8e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd93:	6a 00                	push   0x0
c001bd95:	56                   	push   esi
c001bd96:	57                   	push   edi
c001bd97:	55                   	push   ebp
c001bd98:	e8 87 f7 ff ff       	call   c001b524 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd9d:	6a 00                	push   0x0
c001bd9f:	56                   	push   esi
c001bda0:	57                   	push   edi
c001bda1:	55                   	push   ebp
c001bda2:	e8 5b fe ff ff       	call   c001bc02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bda7:	83 c4 20             	add    esp,0x20
c001bdaa:	6a 00                	push   0x0
c001bdac:	56                   	push   esi
c001bdad:	57                   	push   edi
c001bdae:	55                   	push   ebp
c001bdaf:	e8 94 f7 ff ff       	call   c001b548 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bdb4:	83 c4 10             	add    esp,0x10
c001bdb7:	a8 80                	test   al,0x80
c001bdb9:	74 2d                	je     c001bde8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bdbb:	bb 01 00 00 00       	mov    ebx,0x1
c001bdc0:	53                   	push   ebx
c001bdc1:	56                   	push   esi
c001bdc2:	57                   	push   edi
c001bdc3:	55                   	push   ebp
c001bdc4:	e8 5b f7 ff ff       	call   c001b524 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdc9:	83 c4 10             	add    esp,0x10
c001bdcc:	0f b7 c0             	movzx  eax,ax
c001bdcf:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdd4:	74 0c                	je     c001bde2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bdd6:	53                   	push   ebx
c001bdd7:	56                   	push   esi
c001bdd8:	57                   	push   edi
c001bdd9:	55                   	push   ebp
c001bdda:	e8 23 fe ff ff       	call   c001bc02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bddf:	83 c4 10             	add    esp,0x10
c001bde2:	43                   	inc    ebx
c001bde3:	83 fb 08             	cmp    ebx,0x8
c001bde6:	75 d8                	jne    c001bdc0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bde8:	83 c4 0c             	add    esp,0xc
c001bdeb:	5b                   	pop    ebx
c001bdec:	5e                   	pop    esi
c001bded:	5f                   	pop    edi
c001bdee:	5d                   	pop    ebp
c001bdef:	c3                   	ret    

c001bdf0 <PCI::detect()>:
c001bdf0:	56                   	push   esi
c001bdf1:	53                   	push   ebx
c001bdf2:	53                   	push   ebx
c001bdf3:	31 db                	xor    ebx,ebx
c001bdf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdf9:	6a 00                	push   0x0
c001bdfb:	6a 00                	push   0x0
c001bdfd:	6a 00                	push   0x0
c001bdff:	56                   	push   esi
c001be00:	e8 43 f7 ff ff       	call   c001b548 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001be05:	83 c4 10             	add    esp,0x10
c001be08:	a8 80                	test   al,0x80
c001be0a:	75 21                	jne    c001be2d <PCI::detect()+0x3d>
c001be0c:	51                   	push   ecx
c001be0d:	51                   	push   ecx
c001be0e:	6a 00                	push   0x0
c001be10:	56                   	push   esi
c001be11:	e8 4e fc ff ff       	call   c001ba64 <PCI::checkBus(unsigned char)>
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	eb 2a                	jmp    c001be45 <PCI::detect()+0x55>
c001be1b:	52                   	push   edx
c001be1c:	52                   	push   edx
c001be1d:	53                   	push   ebx
c001be1e:	43                   	inc    ebx
c001be1f:	56                   	push   esi
c001be20:	e8 3f fc ff ff       	call   c001ba64 <PCI::checkBus(unsigned char)>
c001be25:	83 c4 10             	add    esp,0x10
c001be28:	83 fb 08             	cmp    ebx,0x8
c001be2b:	74 18                	je     c001be45 <PCI::detect()+0x55>
c001be2d:	53                   	push   ebx
c001be2e:	6a 00                	push   0x0
c001be30:	6a 00                	push   0x0
c001be32:	56                   	push   esi
c001be33:	e8 ec f6 ff ff       	call   c001b524 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001be38:	83 c4 10             	add    esp,0x10
c001be3b:	0f b7 c0             	movzx  eax,ax
c001be3e:	3d ff ff 00 00       	cmp    eax,0xffff
c001be43:	74 d6                	je     c001be1b <PCI::detect()+0x2b>
c001be45:	58                   	pop    eax
c001be46:	5b                   	pop    ebx
c001be47:	5e                   	pop    esi
c001be48:	c3                   	ret    
c001be49:	90                   	nop

c001be4a <IDE::close(int, int, void*)>:
c001be4a:	83 c8 ff             	or     eax,0xffffffff
c001be4d:	c3                   	ret    

c001be4e <IDE::IDE()>:
c001be4e:	83 ec 0c             	sub    esp,0xc
c001be51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be55:	83 ec 08             	sub    esp,0x8
c001be58:	68 c4 33 02 c0       	push   0xc00233c4
c001be5d:	50                   	push   eax
c001be5e:	e8 05 0f ff ff       	call   c000cd68 <HardDiskController::HardDiskController(char const*)>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	ba 54 34 02 c0       	mov    edx,0xc0023454
c001be6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be6f:	89 10                	mov    DWORD PTR [eax],edx
c001be71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be75:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be7c:	90                   	nop
c001be7d:	83 c4 0c             	add    esp,0xc
c001be80:	c3                   	ret    
c001be81:	90                   	nop

c001be82 <IDE::prepareInterrupt(unsigned char)>:
c001be82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be87:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be8b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be93:	c3                   	ret    

c001be94 <selectDrive(unsigned char, unsigned char)>:
c001be94:	c3                   	ret    
c001be95:	90                   	nop

c001be96 <IDE::getBase(unsigned char)>:
c001be96:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bea7:	c3                   	ret    

c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bea8:	55                   	push   ebp
c001bea9:	57                   	push   edi
c001beaa:	56                   	push   esi
c001beab:	53                   	push   ebx
c001beac:	83 ec 1c             	sub    esp,0x1c
c001beaf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001beb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001beb7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001beba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bebe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bec2:	80 f9 03             	cmp    cl,0x3
c001bec5:	77 4f                	ja     c001bf16 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bec7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001becb:	0f b6 fa             	movzx  edi,dl
c001bece:	0f b6 db             	movzx  ebx,bl
c001bed1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bed4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bed9:	80 ca 80             	or     dl,0x80
c001bedc:	52                   	push   edx
c001bedd:	6a 0c                	push   0xc
c001bedf:	57                   	push   edi
c001bee0:	56                   	push   esi
c001bee1:	e8 c2 ff ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bee6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001beeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001beef:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bef3:	ee                   	out    dx,al
c001bef4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bef9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001befd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bf01:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bf05:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf0d:	83 c4 2c             	add    esp,0x2c
c001bf10:	5b                   	pop    ebx
c001bf11:	5e                   	pop    esi
c001bf12:	5f                   	pop    edi
c001bf13:	5d                   	pop    ebp
c001bf14:	eb 92                	jmp    c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf16:	0f b6 cb             	movzx  ecx,bl
c001bf19:	83 f9 07             	cmp    ecx,0x7
c001bf1c:	77 12                	ja     c001bf30 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bf1e:	0f b6 d2             	movzx  edx,dl
c001bf21:	0f b6 db             	movzx  ebx,bl
c001bf24:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bf2c:	01 da                	add    edx,ebx
c001bf2e:	eb 2f                	jmp    c001bf5f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf30:	83 f9 0d             	cmp    ecx,0xd
c001bf33:	77 13                	ja     c001bf48 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bf35:	0f b6 d2             	movzx  edx,dl
c001bf38:	0f b6 db             	movzx  ebx,bl
c001bf3b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bf42:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bf46:	eb 17                	jmp    c001bf5f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf48:	83 f9 15             	cmp    ecx,0x15
c001bf4b:	77 13                	ja     c001bf60 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bf4d:	0f b6 d2             	movzx  edx,dl
c001bf50:	0f b6 db             	movzx  ebx,bl
c001bf53:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bf5b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bf5f:	ee                   	out    dx,al
c001bf60:	83 c4 1c             	add    esp,0x1c
c001bf63:	5b                   	pop    ebx
c001bf64:	5e                   	pop    esi
c001bf65:	5f                   	pop    edi
c001bf66:	5d                   	pop    ebp
c001bf67:	c3                   	ret    

c001bf68 <IDE::read(unsigned char, unsigned char)>:
c001bf68:	55                   	push   ebp
c001bf69:	57                   	push   edi
c001bf6a:	56                   	push   esi
c001bf6b:	53                   	push   ebx
c001bf6c:	83 ec 1c             	sub    esp,0x1c
c001bf6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bf73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf77:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bf7a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bf7e:	3c 03                	cmp    al,0x3
c001bf80:	77 40                	ja     c001bfc2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bf82:	0f b6 f9             	movzx  edi,cl
c001bf85:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bf88:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf8d:	0c 80                	or     al,0x80
c001bf8f:	50                   	push   eax
c001bf90:	6a 0c                	push   0xc
c001bf92:	57                   	push   edi
c001bf93:	56                   	push   esi
c001bf94:	e8 0f ff ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf99:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf9e:	0f b6 d3             	movzx  edx,bl
c001bfa1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bfa5:	ec                   	in     al,dx
c001bfa6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bfaa:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bfaf:	52                   	push   edx
c001bfb0:	6a 0c                	push   0xc
c001bfb2:	57                   	push   edi
c001bfb3:	56                   	push   esi
c001bfb4:	e8 ef fe ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb9:	83 c4 20             	add    esp,0x20
c001bfbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bfc0:	eb 4c                	jmp    c001c00e <IDE::read(unsigned char, unsigned char)+0xa6>
c001bfc2:	0f b6 d3             	movzx  edx,bl
c001bfc5:	83 fa 07             	cmp    edx,0x7
c001bfc8:	77 12                	ja     c001bfdc <IDE::read(unsigned char, unsigned char)+0x74>
c001bfca:	0f b6 c9             	movzx  ecx,cl
c001bfcd:	0f b6 d3             	movzx  edx,bl
c001bfd0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bfd8:	01 c2                	add    edx,eax
c001bfda:	eb 31                	jmp    c001c00d <IDE::read(unsigned char, unsigned char)+0xa5>
c001bfdc:	83 fa 0d             	cmp    edx,0xd
c001bfdf:	77 13                	ja     c001bff4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bfe1:	0f b6 c9             	movzx  ecx,cl
c001bfe4:	0f b6 d3             	movzx  edx,bl
c001bfe7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bfee:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bff2:	eb 19                	jmp    c001c00d <IDE::read(unsigned char, unsigned char)+0xa5>
c001bff4:	31 c0                	xor    eax,eax
c001bff6:	83 fa 15             	cmp    edx,0x15
c001bff9:	77 13                	ja     c001c00e <IDE::read(unsigned char, unsigned char)+0xa6>
c001bffb:	0f b6 c9             	movzx  ecx,cl
c001bffe:	0f b6 d3             	movzx  edx,bl
c001c001:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001c009:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c00d:	ec                   	in     al,dx
c001c00e:	83 c4 1c             	add    esp,0x1c
c001c011:	5b                   	pop    ebx
c001c012:	5e                   	pop    esi
c001c013:	5f                   	pop    edi
c001c014:	5d                   	pop    ebp
c001c015:	c3                   	ret    

c001c016 <IDE::waitInterrupt(unsigned char)>:
c001c016:	55                   	push   ebp
c001c017:	57                   	push   edi
c001c018:	56                   	push   esi
c001c019:	53                   	push   ebx
c001c01a:	31 db                	xor    ebx,ebx
c001c01c:	83 ec 0c             	sub    esp,0xc
c001c01f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c023:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c028:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c030:	89 e8                	mov    eax,ebp
c001c032:	84 c0                	test   al,al
c001c034:	75 30                	jne    c001c066 <IDE::waitInterrupt(unsigned char)+0x50>
c001c036:	50                   	push   eax
c001c037:	6a 0c                	push   0xc
c001c039:	56                   	push   esi
c001c03a:	57                   	push   edi
c001c03b:	e8 28 ff ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	a8 01                	test   al,0x1
c001c045:	75 27                	jne    c001c06e <IDE::waitInterrupt(unsigned char)+0x58>
c001c047:	f6 c3 04             	test   bl,0x4
c001c04a:	75 12                	jne    c001c05e <IDE::waitInterrupt(unsigned char)+0x48>
c001c04c:	83 fb 32             	cmp    ebx,0x32
c001c04f:	7e 0d                	jle    c001c05e <IDE::waitInterrupt(unsigned char)+0x48>
c001c051:	83 ec 0c             	sub    esp,0xc
c001c054:	6a 64                	push   0x64
c001c056:	e8 b1 a4 ff ff       	call   c001650c <milliTenthSleep(unsigned int)>
c001c05b:	83 c4 10             	add    esp,0x10
c001c05e:	83 fb 3c             	cmp    ebx,0x3c
c001c061:	74 0b                	je     c001c06e <IDE::waitInterrupt(unsigned char)+0x58>
c001c063:	43                   	inc    ebx
c001c064:	eb c2                	jmp    c001c028 <IDE::waitInterrupt(unsigned char)+0x12>
c001c066:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c06e:	83 c4 0c             	add    esp,0xc
c001c071:	89 e8                	mov    eax,ebp
c001c073:	5b                   	pop    ebx
c001c074:	5e                   	pop    esi
c001c075:	5f                   	pop    edi
c001c076:	5d                   	pop    ebp
c001c077:	c3                   	ret    

c001c078 <ideChannel0IRQHandler(regs*, void*)>:
c001c078:	83 ec 10             	sub    esp,0x10
c001c07b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c07f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c086:	6a 07                	push   0x7
c001c088:	6a 00                	push   0x0
c001c08a:	50                   	push   eax
c001c08b:	e8 d8 fe ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c090:	83 c4 1c             	add    esp,0x1c
c001c093:	c3                   	ret    

c001c094 <ideChannel1IRQHandler(regs*, void*)>:
c001c094:	83 ec 10             	sub    esp,0x10
c001c097:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c09b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c0a2:	6a 07                	push   0x7
c001c0a4:	6a 01                	push   0x1
c001c0a6:	50                   	push   eax
c001c0a7:	e8 bc fe ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c0ac:	83 c4 1c             	add    esp,0x1c
c001c0af:	c3                   	ret    

c001c0b0 <IDE::enableIRQs(unsigned char, bool)>:
c001c0b0:	57                   	push   edi
c001c0b1:	b8 02 00 00 00       	mov    eax,0x2
c001c0b6:	56                   	push   esi
c001c0b7:	53                   	push   ebx
c001c0b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c0c0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c0c5:	74 02                	je     c001c0c9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c0c7:	31 c0                	xor    eax,eax
c001c0c9:	0f b6 db             	movzx  ebx,bl
c001c0cc:	bf 04 00 00 00       	mov    edi,0x4
c001c0d1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c0d8:	50                   	push   eax
c001c0d9:	6a 0c                	push   0xc
c001c0db:	53                   	push   ebx
c001c0dc:	56                   	push   esi
c001c0dd:	e8 c6 fd ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	50                   	push   eax
c001c0e6:	6a 0c                	push   0xc
c001c0e8:	53                   	push   ebx
c001c0e9:	56                   	push   esi
c001c0ea:	e8 79 fe ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c0ef:	83 c4 10             	add    esp,0x10
c001c0f2:	4f                   	dec    edi
c001c0f3:	75 f0                	jne    c001c0e5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c0f5:	5b                   	pop    ebx
c001c0f6:	5e                   	pop    esi
c001c0f7:	5f                   	pop    edi
c001c0f8:	c3                   	ret    
c001c0f9:	90                   	nop

c001c0fa <IDE::open(int, int, void*)>:
c001c0fa:	55                   	push   ebp
c001c0fb:	57                   	push   edi
c001c0fc:	56                   	push   esi
c001c0fd:	53                   	push   ebx
c001c0fe:	83 ec 1c             	sub    esp,0x1c
c001c101:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c105:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c10e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c117:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c11e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c125:	0f 85 de 02 00 00    	jne    c001c409 <IDE::open(int, int, void*)+0x30f>
c001c12b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c131:	88 04 24             	mov    BYTE PTR [esp],al
c001c134:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c137:	83 e0 7f             	and    eax,0x7f
c001c13a:	83 f8 05             	cmp    eax,0x5
c001c13d:	74 05                	je     c001c144 <IDE::open(int, int, void*)+0x4a>
c001c13f:	83 f8 0f             	cmp    eax,0xf
c001c142:	75 32                	jne    c001c176 <IDE::open(int, int, void*)+0x7c>
c001c144:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c14a:	83 e0 fc             	and    eax,0xfffffffc
c001c14d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c154:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c15a:	83 e0 fc             	and    eax,0xfffffffc
c001c15d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c164:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c16a:	83 e0 fc             	and    eax,0xfffffffc
c001c16d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c174:	eb 14                	jmp    c001c18a <IDE::open(int, int, void*)+0x90>
c001c176:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c180:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c18a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c191:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c19c:	89 c6                	mov    esi,eax
c001c19e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c1a3:	c1 e6 10             	shl    esi,0x10
c001c1a6:	89 e8                	mov    eax,ebp
c001c1a8:	89 fa                	mov    edx,edi
c001c1aa:	c1 e0 0b             	shl    eax,0xb
c001c1ad:	09 f0                	or     eax,esi
c001c1af:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c1b6:	c1 e6 08             	shl    esi,0x8
c001c1b9:	09 c6                	or     esi,eax
c001c1bb:	89 f0                	mov    eax,esi
c001c1bd:	0d 08 00 00 80       	or     eax,0x80000008
c001c1c2:	ef                   	out    dx,eax
c001c1c3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c1c8:	89 ca                	mov    edx,ecx
c001c1ca:	ed                   	in     eax,dx
c001c1cb:	c1 e8 10             	shr    eax,0x10
c001c1ce:	3d ff ff 00 00       	cmp    eax,0xffff
c001c1d3:	0f 84 f9 00 00 00    	je     c001c2d2 <IDE::open(int, int, void*)+0x1d8>
c001c1d9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c1df:	89 fa                	mov    edx,edi
c001c1e1:	89 f0                	mov    eax,esi
c001c1e3:	ef                   	out    dx,eax
c001c1e4:	b0 fe                	mov    al,0xfe
c001c1e6:	89 ca                	mov    edx,ecx
c001c1e8:	ee                   	out    dx,al
c001c1e9:	89 f0                	mov    eax,esi
c001c1eb:	89 fa                	mov    edx,edi
c001c1ed:	ef                   	out    dx,eax
c001c1ee:	89 ca                	mov    edx,ecx
c001c1f0:	ed                   	in     eax,dx
c001c1f1:	3c fe                	cmp    al,0xfe
c001c1f3:	0f 85 a9 00 00 00    	jne    c001c2a2 <IDE::open(int, int, void*)+0x1a8>
c001c1f9:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c1ff:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c206:	74 33                	je     c001c23b <IDE::open(int, int, void*)+0x141>
c001c208:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c20e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c212:	40                   	inc    eax
c001c213:	83 ec 0c             	sub    esp,0xc
c001c216:	0f b6 c0             	movzx  eax,al
c001c219:	50                   	push   eax
c001c21a:	55                   	push   ebp
c001c21b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c21f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c225:	51                   	push   ecx
c001c226:	e8 e5 37 ff ff       	call   c000fa10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c22b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c230:	83 c4 1c             	add    esp,0x1c
c001c233:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c239:	eb 0a                	jmp    c001c245 <IDE::open(int, int, void*)+0x14b>
c001c23b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c245:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c24c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c253:	c1 e1 10             	shl    ecx,0x10
c001c256:	c1 e0 08             	shl    eax,0x8
c001c259:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c25e:	09 c1                	or     ecx,eax
c001c260:	89 fa                	mov    edx,edi
c001c262:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c269:	c1 e0 0b             	shl    eax,0xb
c001c26c:	09 c1                	or     ecx,eax
c001c26e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c274:	89 c8                	mov    eax,ecx
c001c276:	ef                   	out    dx,eax
c001c277:	be fc 0c 00 00       	mov    esi,0xcfc
c001c27c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c282:	89 f2                	mov    edx,esi
c001c284:	ee                   	out    dx,al
c001c285:	89 c8                	mov    eax,ecx
c001c287:	89 fa                	mov    edx,edi
c001c289:	ef                   	out    dx,eax
c001c28a:	89 f2                	mov    edx,esi
c001c28c:	ed                   	in     eax,dx
c001c28d:	0f b6 c0             	movzx  eax,al
c001c290:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c296:	74 4a                	je     c001c2e2 <IDE::open(int, int, void*)+0x1e8>
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	68 dc 33 02 c0       	push   0xc00233dc
c001c2a0:	eb 38                	jmp    c001c2da <IDE::open(int, int, void*)+0x1e0>
c001c2a2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c2ab:	75 1b                	jne    c001c2c8 <IDE::open(int, int, void*)+0x1ce>
c001c2ad:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c2b1:	3d 80 00 00 00       	cmp    eax,0x80
c001c2b6:	74 07                	je     c001c2bf <IDE::open(int, int, void*)+0x1c5>
c001c2b8:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c2bd:	75 09                	jne    c001c2c8 <IDE::open(int, int, void*)+0x1ce>
c001c2bf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2c6:	eb 1a                	jmp    c001c2e2 <IDE::open(int, int, void*)+0x1e8>
c001c2c8:	83 ec 0c             	sub    esp,0xc
c001c2cb:	68 e4 33 02 c0       	push   0xc00233e4
c001c2d0:	eb 08                	jmp    c001c2da <IDE::open(int, int, void*)+0x1e0>
c001c2d2:	83 ec 0c             	sub    esp,0xc
c001c2d5:	68 15 34 02 c0       	push   0xc0023415
c001c2da:	e8 18 54 ff ff       	call   c00116f7 <KePanic(char const*)>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c2e9:	74 1a                	je     c001c305 <IDE::open(int, int, void*)+0x20b>
c001c2eb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c2f1:	83 e0 fc             	and    eax,0xfffffffc
c001c2f4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c2fb:	83 c0 08             	add    eax,0x8
c001c2fe:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c305:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c30b:	89 c2                	mov    edx,eax
c001c30d:	83 e2 0f             	and    edx,0xf
c001c310:	83 fa 08             	cmp    edx,0x8
c001c313:	75 0a                	jne    c001c31f <IDE::open(int, int, void*)+0x225>
c001c315:	83 e8 02             	sub    eax,0x2
c001c318:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c31f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c325:	89 c2                	mov    edx,eax
c001c327:	83 e2 0f             	and    edx,0xf
c001c32a:	83 fa 08             	cmp    edx,0x8
c001c32d:	75 0a                	jne    c001c339 <IDE::open(int, int, void*)+0x23f>
c001c32f:	83 e8 02             	sub    eax,0x2
c001c332:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c339:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c340:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c347:	89 d0                	mov    eax,edx
c001c349:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c34c:	8d 7a 01             	lea    edi,[edx+0x1]
c001c34f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c353:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c357:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c35b:	83 e1 3f             	and    ecx,0x3f
c001c35e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c362:	89 f9                	mov    ecx,edi
c001c364:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c36b:	0f b6 c9             	movzx  ecx,cl
c001c36e:	8d 78 02             	lea    edi,[eax+0x2]
c001c371:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c374:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c378:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c37c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c380:	83 e2 3f             	and    edx,0x3f
c001c383:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c387:	89 f9                	mov    ecx,edi
c001c389:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c38f:	0f b6 d1             	movzx  edx,cl
c001c392:	8d 78 03             	lea    edi,[eax+0x3]
c001c395:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c398:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c39c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c3a0:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c3a4:	83 e1 3f             	and    ecx,0x3f
c001c3a7:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c3ab:	89 f9                	mov    ecx,edi
c001c3ad:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c3b3:	0f b6 c9             	movzx  ecx,cl
c001c3b6:	8d 78 04             	lea    edi,[eax+0x4]
c001c3b9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c3bc:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c3c0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c3c4:	89 fa                	mov    edx,edi
c001c3c6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c3cc:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c3d0:	83 e2 3f             	and    edx,0x3f
c001c3d3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c3d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c3de:	66 85 f6             	test   si,si
c001c3e1:	74 65                	je     c001c448 <IDE::open(int, int, void*)+0x34e>
c001c3e3:	89 f9                	mov    ecx,edi
c001c3e5:	83 c0 05             	add    eax,0x5
c001c3e8:	0f b6 d1             	movzx  edx,cl
c001c3eb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c3ee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c3f2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c3f6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c3fc:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c400:	83 e0 3f             	and    eax,0x3f
c001c403:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c407:	eb 3f                	jmp    c001c448 <IDE::open(int, int, void*)+0x34e>
c001c409:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c40f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c416:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c41d:	05 06 02 00 00       	add    eax,0x206
c001c422:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c429:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c430:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c437:	05 06 02 00 00       	add    eax,0x206
c001c43c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c443:	e9 bd fe ff ff       	jmp    c001c305 <IDE::open(int, int, void*)+0x20b>
c001c448:	50                   	push   eax
c001c449:	50                   	push   eax
c001c44a:	6a 00                	push   0x0
c001c44c:	53                   	push   ebx
c001c44d:	e8 30 fa ff ff       	call   c001be82 <IDE::prepareInterrupt(unsigned char)>
c001c452:	5a                   	pop    edx
c001c453:	59                   	pop    ecx
c001c454:	6a 01                	push   0x1
c001c456:	53                   	push   ebx
c001c457:	e8 26 fa ff ff       	call   c001be82 <IDE::prepareInterrupt(unsigned char)>
c001c45c:	83 c4 0c             	add    esp,0xc
c001c45f:	6a 00                	push   0x0
c001c461:	6a 00                	push   0x0
c001c463:	53                   	push   ebx
c001c464:	e8 47 fc ff ff       	call   c001c0b0 <IDE::enableIRQs(unsigned char, bool)>
c001c469:	83 c4 0c             	add    esp,0xc
c001c46c:	6a 00                	push   0x0
c001c46e:	6a 01                	push   0x1
c001c470:	53                   	push   ebx
c001c471:	e8 3a fc ff ff       	call   c001c0b0 <IDE::enableIRQs(unsigned char, bool)>
c001c476:	83 c4 10             	add    esp,0x10
c001c479:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c480:	74 34                	je     c001c4b6 <IDE::open(int, int, void*)+0x3bc>
c001c482:	83 ec 0c             	sub    esp,0xc
c001c485:	53                   	push   ebx
c001c486:	6a 01                	push   0x1
c001c488:	68 78 c0 01 c0       	push   0xc001c078
c001c48d:	6a 0e                	push   0xe
c001c48f:	53                   	push   ebx
c001c490:	e8 3d 05 ff ff       	call   c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c495:	83 c4 14             	add    esp,0x14
c001c498:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c49e:	53                   	push   ebx
c001c49f:	6a 01                	push   0x1
c001c4a1:	68 94 c0 01 c0       	push   0xc001c094
c001c4a6:	6a 0f                	push   0xf
c001c4a8:	53                   	push   ebx
c001c4a9:	e8 24 05 ff ff       	call   c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4ae:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c4b4:	eb 38                	jmp    c001c4ee <IDE::open(int, int, void*)+0x3f4>
c001c4b6:	83 ec 0c             	sub    esp,0xc
c001c4b9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c4c3:	53                   	push   ebx
c001c4c4:	6a 00                	push   0x0
c001c4c6:	68 78 c0 01 c0       	push   0xc001c078
c001c4cb:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c4d1:	53                   	push   ebx
c001c4d2:	e8 fb 04 ff ff       	call   c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4d7:	83 c4 14             	add    esp,0x14
c001c4da:	53                   	push   ebx
c001c4db:	6a 00                	push   0x0
c001c4dd:	68 94 c0 01 c0       	push   0xc001c094
c001c4e2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c4e8:	53                   	push   ebx
c001c4e9:	e8 e4 04 ff ff       	call   c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4f0:	83 c4 20             	add    esp,0x20
c001c4f3:	83 ec 0c             	sub    esp,0xc
c001c4f6:	53                   	push   ebx
c001c4f7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c4fa:	83 c4 0c             	add    esp,0xc
c001c4fd:	6a 07                	push   0x7
c001c4ff:	6a 00                	push   0x0
c001c501:	53                   	push   ebx
c001c502:	e8 61 fa ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c507:	83 c4 0c             	add    esp,0xc
c001c50a:	6a 07                	push   0x7
c001c50c:	6a 01                	push   0x1
c001c50e:	53                   	push   ebx
c001c50f:	e8 54 fa ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c514:	83 c4 0c             	add    esp,0xc
c001c517:	6a 01                	push   0x1
c001c519:	6a 00                	push   0x0
c001c51b:	53                   	push   ebx
c001c51c:	e8 8f fb ff ff       	call   c001c0b0 <IDE::enableIRQs(unsigned char, bool)>
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	6a 01                	push   0x1
c001c526:	6a 01                	push   0x1
c001c528:	53                   	push   ebx
c001c529:	e8 82 fb ff ff       	call   c001c0b0 <IDE::enableIRQs(unsigned char, bool)>
c001c52e:	83 c4 2c             	add    esp,0x2c
c001c531:	31 c0                	xor    eax,eax
c001c533:	5b                   	pop    ebx
c001c534:	5e                   	pop    esi
c001c535:	5f                   	pop    edi
c001c536:	5d                   	pop    ebp
c001c537:	c3                   	ret    

c001c538 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c538:	55                   	push   ebp
c001c539:	57                   	push   edi
c001c53a:	56                   	push   esi
c001c53b:	53                   	push   ebx
c001c53c:	83 ec 1c             	sub    esp,0x1c
c001c53f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c543:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c547:	8d 42 f8             	lea    eax,[edx-0x8]
c001c54a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c54e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c552:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c556:	3c 03                	cmp    al,0x3
c001c558:	77 5a                	ja     c001c5b4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c55a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c55e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c562:	0f b6 db             	movzx  ebx,bl
c001c565:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c568:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c56d:	0c 80                	or     al,0x80
c001c56f:	50                   	push   eax
c001c570:	6a 0c                	push   0xc
c001c572:	53                   	push   ebx
c001c573:	56                   	push   esi
c001c574:	e8 2f f9 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c579:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c57e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c582:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c586:	0f b6 d2             	movzx  edx,dl
c001c589:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c58d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c58f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c594:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c598:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c59c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c5a0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c5a8:	83 c4 2c             	add    esp,0x2c
c001c5ab:	5b                   	pop    ebx
c001c5ac:	5e                   	pop    esi
c001c5ad:	5f                   	pop    edi
c001c5ae:	5d                   	pop    ebp
c001c5af:	e9 f4 f8 ff ff       	jmp    c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5b4:	0f b6 c2             	movzx  eax,dl
c001c5b7:	83 f8 07             	cmp    eax,0x7
c001c5ba:	77 12                	ja     c001c5ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c5bc:	0f b6 c2             	movzx  eax,dl
c001c5bf:	0f b6 db             	movzx  ebx,bl
c001c5c2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c5ca:	01 c2                	add    edx,eax
c001c5cc:	eb 2f                	jmp    c001c5fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c5ce:	83 f8 0d             	cmp    eax,0xd
c001c5d1:	77 13                	ja     c001c5e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c5d3:	0f b6 db             	movzx  ebx,bl
c001c5d6:	0f b6 d2             	movzx  edx,dl
c001c5d9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c5e0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c5e4:	eb 17                	jmp    c001c5fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c5e6:	83 f8 15             	cmp    eax,0x15
c001c5e9:	77 14                	ja     c001c5ff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c5eb:	0f b6 db             	movzx  ebx,bl
c001c5ee:	0f b6 d2             	movzx  edx,dl
c001c5f1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c5f9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c5fd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c5ff:	83 c4 1c             	add    esp,0x1c
c001c602:	5b                   	pop    ebx
c001c603:	5e                   	pop    esi
c001c604:	5f                   	pop    edi
c001c605:	5d                   	pop    ebp
c001c606:	c3                   	ret    
c001c607:	90                   	nop

c001c608 <IDE::detect()>:
c001c608:	55                   	push   ebp
c001c609:	57                   	push   edi
c001c60a:	56                   	push   esi
c001c60b:	53                   	push   ebx
c001c60c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c612:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c619:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c620:	0f 85 a4 02 00 00    	jne    c001c8ca <IDE::detect()+0x2c2>
c001c626:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c62d:	31 f6                	xor    esi,esi
c001c62f:	31 ed                	xor    ebp,ebp
c001c631:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c639:	89 e8                	mov    eax,ebp
c001c63b:	c1 e0 06             	shl    eax,0x6
c001c63e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c646:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c64a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c64e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c652:	c1 e0 04             	shl    eax,0x4
c001c655:	83 c8 a0             	or     eax,0xffffffa0
c001c658:	0f b6 c0             	movzx  eax,al
c001c65b:	50                   	push   eax
c001c65c:	6a 06                	push   0x6
c001c65e:	56                   	push   esi
c001c65f:	53                   	push   ebx
c001c660:	e8 43 f8 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c665:	83 c4 0c             	add    esp,0xc
c001c668:	6a 0c                	push   0xc
c001c66a:	56                   	push   esi
c001c66b:	53                   	push   ebx
c001c66c:	e8 f7 f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c671:	83 c4 0c             	add    esp,0xc
c001c674:	6a 0c                	push   0xc
c001c676:	56                   	push   esi
c001c677:	53                   	push   ebx
c001c678:	e8 eb f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c67d:	83 c4 0c             	add    esp,0xc
c001c680:	6a 0c                	push   0xc
c001c682:	56                   	push   esi
c001c683:	53                   	push   ebx
c001c684:	e8 df f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c689:	83 c4 0c             	add    esp,0xc
c001c68c:	6a 0c                	push   0xc
c001c68e:	56                   	push   esi
c001c68f:	53                   	push   ebx
c001c690:	e8 d3 f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c695:	68 ec 00 00 00       	push   0xec
c001c69a:	6a 07                	push   0x7
c001c69c:	56                   	push   esi
c001c69d:	53                   	push   ebx
c001c69e:	e8 05 f8 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6a3:	83 c4 1c             	add    esp,0x1c
c001c6a6:	6a 0c                	push   0xc
c001c6a8:	56                   	push   esi
c001c6a9:	53                   	push   ebx
c001c6aa:	e8 b9 f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c6af:	83 c4 0c             	add    esp,0xc
c001c6b2:	6a 0c                	push   0xc
c001c6b4:	56                   	push   esi
c001c6b5:	53                   	push   ebx
c001c6b6:	e8 ad f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c6bb:	83 c4 0c             	add    esp,0xc
c001c6be:	6a 0c                	push   0xc
c001c6c0:	56                   	push   esi
c001c6c1:	53                   	push   ebx
c001c6c2:	e8 a1 f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c6c7:	83 c4 0c             	add    esp,0xc
c001c6ca:	6a 0c                	push   0xc
c001c6cc:	56                   	push   esi
c001c6cd:	53                   	push   ebx
c001c6ce:	e8 95 f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c6d3:	83 c4 0c             	add    esp,0xc
c001c6d6:	6a 0c                	push   0xc
c001c6d8:	56                   	push   esi
c001c6d9:	53                   	push   ebx
c001c6da:	e8 89 f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c6df:	83 c4 10             	add    esp,0x10
c001c6e2:	84 c0                	test   al,al
c001c6e4:	0f 84 60 01 00 00    	je     c001c84a <IDE::detect()+0x242>
c001c6ea:	31 ff                	xor    edi,edi
c001c6ec:	50                   	push   eax
c001c6ed:	6a 0c                	push   0xc
c001c6ef:	56                   	push   esi
c001c6f0:	53                   	push   ebx
c001c6f1:	e8 72 f8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	a8 01                	test   al,0x1
c001c6fb:	0f 85 6a 01 00 00    	jne    c001c86b <IDE::detect()+0x263>
c001c701:	a8 80                	test   al,0x80
c001c703:	75 04                	jne    c001c709 <IDE::detect()+0x101>
c001c705:	a8 08                	test   al,0x8
c001c707:	75 23                	jne    c001c72c <IDE::detect()+0x124>
c001c709:	47                   	inc    edi
c001c70a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c710:	7e da                	jle    c001c6ec <IDE::detect()+0xe4>
c001c712:	83 ec 0c             	sub    esp,0xc
c001c715:	6a 32                	push   0x32
c001c717:	e8 f0 9d ff ff       	call   c001650c <milliTenthSleep(unsigned int)>
c001c71c:	83 c4 10             	add    esp,0x10
c001c71f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c725:	75 c5                	jne    c001c6ec <IDE::detect()+0xe4>
c001c727:	e9 3f 01 00 00       	jmp    c001c86b <IDE::detect()+0x263>
c001c72c:	31 c9                	xor    ecx,ecx
c001c72e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c732:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c736:	83 ec 0c             	sub    esp,0xc
c001c739:	68 80 00 00 00       	push   0x80
c001c73e:	57                   	push   edi
c001c73f:	6a 00                	push   0x0
c001c741:	56                   	push   esi
c001c742:	53                   	push   ebx
c001c743:	e8 f0 fd ff ff       	call   c001c538 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c748:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c74d:	89 e8                	mov    eax,ebp
c001c74f:	89 d1                	mov    ecx,edx
c001c751:	c1 e0 06             	shl    eax,0x6
c001c754:	01 d8                	add    eax,ebx
c001c756:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c75d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c764:	89 f2                	mov    edx,esi
c001c766:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c76c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c770:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c776:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c77a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c781:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c789:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c790:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c798:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c79e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c7a5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c7ab:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c7af:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c7b3:	83 c4 20             	add    esp,0x20
c001c7b6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c7b9:	83 c0 02             	add    eax,0x2
c001c7bc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c7c2:	83 c7 02             	add    edi,0x2
c001c7c5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c7c8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c7ce:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c7d2:	75 e2                	jne    c001c7b6 <IDE::detect()+0x1ae>
c001c7d4:	89 e8                	mov    eax,ebp
c001c7d6:	c1 e0 06             	shl    eax,0x6
c001c7d9:	01 d8                	add    eax,ebx
c001c7db:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c7e2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c7e9:	c1 ea 09             	shr    edx,0x9
c001c7ec:	83 e2 01             	and    edx,0x1
c001c7ef:	80 e1 01             	and    cl,0x1
c001c7f2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c7f8:	75 22                	jne    c001c81c <IDE::detect()+0x214>
c001c7fa:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c801:	74 46                	je     c001c849 <IDE::detect()+0x241>
c001c803:	83 ec 0c             	sub    esp,0xc
c001c806:	68 7c 01 00 00       	push   0x17c
c001c80b:	e8 06 b3 fe ff       	call   c0007b16 <malloc>
c001c810:	89 c7                	mov    edi,eax
c001c812:	89 04 24             	mov    DWORD PTR [esp],eax
c001c815:	e8 1a 05 00 00       	call   c001cd34 <ATA::ATA()>
c001c81a:	eb 17                	jmp    c001c833 <IDE::detect()+0x22b>
c001c81c:	83 ec 0c             	sub    esp,0xc
c001c81f:	68 84 01 00 00       	push   0x184
c001c824:	e8 ed b2 fe ff       	call   c0007b16 <malloc>
c001c829:	89 c7                	mov    edi,eax
c001c82b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c82e:	e8 45 0e 00 00       	call   c001d678 <ATAPI::ATAPI()>
c001c833:	5a                   	pop    edx
c001c834:	59                   	pop    ecx
c001c835:	57                   	push   edi
c001c836:	53                   	push   ebx
c001c837:	e8 ea 01 ff ff       	call   c000ca26 <Device::addChild(Device*)>
c001c83c:	8b 07                	mov    eax,DWORD PTR [edi]
c001c83e:	53                   	push   ebx
c001c83f:	55                   	push   ebp
c001c840:	6a 00                	push   0x0
c001c842:	57                   	push   edi
c001c843:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c846:	83 c4 20             	add    esp,0x20
c001c849:	45                   	inc    ebp
c001c84a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c84f:	74 0d                	je     c001c85e <IDE::detect()+0x256>
c001c851:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c859:	e9 db fd ff ff       	jmp    c001c639 <IDE::detect()+0x31>
c001c85e:	4e                   	dec    esi
c001c85f:	74 69                	je     c001c8ca <IDE::detect()+0x2c2>
c001c861:	be 01 00 00 00       	mov    esi,0x1
c001c866:	e9 c6 fd ff ff       	jmp    c001c631 <IDE::detect()+0x29>
c001c86b:	50                   	push   eax
c001c86c:	6a 04                	push   0x4
c001c86e:	56                   	push   esi
c001c86f:	53                   	push   ebx
c001c870:	e8 f3 f6 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c875:	83 c4 0c             	add    esp,0xc
c001c878:	89 c7                	mov    edi,eax
c001c87a:	6a 05                	push   0x5
c001c87c:	56                   	push   esi
c001c87d:	53                   	push   ebx
c001c87e:	e8 e5 f6 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c883:	83 c4 10             	add    esp,0x10
c001c886:	89 f9                	mov    ecx,edi
c001c888:	0f b6 c0             	movzx  eax,al
c001c88b:	0f b6 f9             	movzx  edi,cl
c001c88e:	83 ff 14             	cmp    edi,0x14
c001c891:	75 07                	jne    c001c89a <IDE::detect()+0x292>
c001c893:	3d eb 00 00 00       	cmp    eax,0xeb
c001c898:	eb 0a                	jmp    c001c8a4 <IDE::detect()+0x29c>
c001c89a:	3d 96 00 00 00       	cmp    eax,0x96
c001c89f:	75 a9                	jne    c001c84a <IDE::detect()+0x242>
c001c8a1:	83 ff 69             	cmp    edi,0x69
c001c8a4:	75 a4                	jne    c001c84a <IDE::detect()+0x242>
c001c8a6:	68 a1 00 00 00       	push   0xa1
c001c8ab:	6a 07                	push   0x7
c001c8ad:	56                   	push   esi
c001c8ae:	53                   	push   ebx
c001c8af:	e8 f4 f5 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b4:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c8bb:	e8 4c 9c ff ff       	call   c001650c <milliTenthSleep(unsigned int)>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	b1 01                	mov    cl,0x1
c001c8c5:	e9 64 fe ff ff       	jmp    c001c72e <IDE::detect()+0x126>
c001c8ca:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c8d0:	5b                   	pop    ebx
c001c8d1:	5e                   	pop    esi
c001c8d2:	5f                   	pop    edi
c001c8d3:	5d                   	pop    ebp
c001c8d4:	c3                   	ret    
c001c8d5:	90                   	nop

c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c8d6:	55                   	push   ebp
c001c8d7:	57                   	push   edi
c001c8d8:	56                   	push   esi
c001c8d9:	53                   	push   ebx
c001c8da:	83 ec 1c             	sub    esp,0x1c
c001c8dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c8e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c8ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8f1:	88 c3                	mov    bl,al
c001c8f3:	25 ff 00 00 00       	and    eax,0xff
c001c8f8:	0f 84 88 00 00 00    	je     c001c986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8fe:	83 ec 0c             	sub    esp,0xc
c001c901:	89 c7                	mov    edi,eax
c001c903:	68 3f 34 02 c0       	push   0xc002343f
c001c908:	e8 98 e0 fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001c90d:	83 c4 10             	add    esp,0x10
c001c910:	83 ff 01             	cmp    edi,0x1
c001c913:	74 6b                	je     c001c980 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c915:	83 ff 02             	cmp    edi,0x2
c001c918:	75 58                	jne    c001c972 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c91a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c91f:	01 ff                	add    edi,edi
c001c921:	50                   	push   eax
c001c922:	09 fe                	or     esi,edi
c001c924:	6a 01                	push   0x1
c001c926:	89 f0                	mov    eax,esi
c001c928:	0f b6 f0             	movzx  esi,al
c001c92b:	c1 e6 06             	shl    esi,0x6
c001c92e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c936:	50                   	push   eax
c001c937:	55                   	push   ebp
c001c938:	e8 2b f6 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c93d:	83 c4 10             	add    esp,0x10
c001c940:	a8 01                	test   al,0x1
c001c942:	74 02                	je     c001c946 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c944:	b3 07                	mov    bl,0x7
c001c946:	a8 02                	test   al,0x2
c001c948:	74 02                	je     c001c94c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c94a:	b3 03                	mov    bl,0x3
c001c94c:	a8 04                	test   al,0x4
c001c94e:	74 02                	je     c001c952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c950:	b3 14                	mov    bl,0x14
c001c952:	a8 08                	test   al,0x8
c001c954:	74 02                	je     c001c958 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c956:	b3 03                	mov    bl,0x3
c001c958:	a8 10                	test   al,0x10
c001c95a:	74 02                	je     c001c95e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c95c:	b3 15                	mov    bl,0x15
c001c95e:	a8 20                	test   al,0x20
c001c960:	74 02                	je     c001c964 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c962:	b3 03                	mov    bl,0x3
c001c964:	a8 40                	test   al,0x40
c001c966:	74 02                	je     c001c96a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c968:	b3 16                	mov    bl,0x16
c001c96a:	a8 80                	test   al,0x80
c001c96c:	74 18                	je     c001c986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c96e:	b3 0d                	mov    bl,0xd
c001c970:	eb 14                	jmp    c001c986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c972:	83 ff 03             	cmp    edi,0x3
c001c975:	74 0d                	je     c001c984 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c977:	83 ff 04             	cmp    edi,0x4
c001c97a:	75 0a                	jne    c001c986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c97c:	b3 08                	mov    bl,0x8
c001c97e:	eb 06                	jmp    c001c986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c980:	b3 13                	mov    bl,0x13
c001c982:	eb 02                	jmp    c001c986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c984:	b3 17                	mov    bl,0x17
c001c986:	83 c4 1c             	add    esp,0x1c
c001c989:	88 d8                	mov    al,bl
c001c98b:	5b                   	pop    ebx
c001c98c:	5e                   	pop    esi
c001c98d:	5f                   	pop    edi
c001c98e:	5d                   	pop    ebp
c001c98f:	c3                   	ret    

c001c990 <IDE::polling(unsigned char, unsigned int)>:
c001c990:	57                   	push   edi
c001c991:	56                   	push   esi
c001c992:	53                   	push   ebx
c001c993:	bb 04 00 00 00       	mov    ebx,0x4
c001c998:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c99c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c9a1:	52                   	push   edx
c001c9a2:	6a 0c                	push   0xc
c001c9a4:	56                   	push   esi
c001c9a5:	57                   	push   edi
c001c9a6:	e8 bd f5 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c9ab:	83 c4 10             	add    esp,0x10
c001c9ae:	4b                   	dec    ebx
c001c9af:	75 f0                	jne    c001c9a1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c9b1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c9b6:	50                   	push   eax
c001c9b7:	6a 0c                	push   0xc
c001c9b9:	56                   	push   esi
c001c9ba:	57                   	push   edi
c001c9bb:	e8 a8 f5 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001c9c0:	83 c4 10             	add    esp,0x10
c001c9c3:	a8 01                	test   al,0x1
c001c9c5:	75 17                	jne    c001c9de <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c9c7:	a8 20                	test   al,0x20
c001c9c9:	75 0f                	jne    c001c9da <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c9cb:	4b                   	dec    ebx
c001c9cc:	74 10                	je     c001c9de <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c9ce:	a8 80                	test   al,0x80
c001c9d0:	75 e4                	jne    c001c9b6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c9d2:	a8 08                	test   al,0x8
c001c9d4:	74 e0                	je     c001c9b6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c9d6:	31 c0                	xor    eax,eax
c001c9d8:	eb 06                	jmp    c001c9e0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9da:	b0 01                	mov    al,0x1
c001c9dc:	eb 02                	jmp    c001c9e0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9de:	b0 02                	mov    al,0x2
c001c9e0:	5b                   	pop    ebx
c001c9e1:	5e                   	pop    esi
c001c9e2:	5f                   	pop    edi
c001c9e3:	c3                   	ret    

c001c9e4 <SATABus::close(int, int, void*)>:
c001c9e4:	31 c0                	xor    eax,eax
c001c9e6:	c3                   	ret    
c001c9e7:	90                   	nop

c001c9e8 <SATABus::detect()>:
c001c9e8:	c3                   	ret    
c001c9e9:	90                   	nop

c001c9ea <SATABus::SATABus()>:
c001c9ea:	83 ec 0c             	sub    esp,0xc
c001c9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f1:	83 ec 08             	sub    esp,0x8
c001c9f4:	68 78 34 02 c0       	push   0xc0023478
c001c9f9:	50                   	push   eax
c001c9fa:	e8 69 03 ff ff       	call   c000cd68 <HardDiskController::HardDiskController(char const*)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	ba a4 34 02 c0       	mov    edx,0xc00234a4
c001ca07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0b:	89 10                	mov    DWORD PTR [eax],edx
c001ca0d:	83 ec 0c             	sub    esp,0xc
c001ca10:	6a 50                	push   0x50
c001ca12:	e8 d7 b4 fe ff       	call   c0007eee <Phys::allocateContiguousPages(int)>
c001ca17:	83 c4 10             	add    esp,0x10
c001ca1a:	89 c2                	mov    edx,eax
c001ca1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca20:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ca26:	83 ec 0c             	sub    esp,0xc
c001ca29:	6a 50                	push   0x50
c001ca2b:	e8 3d cc fe ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c001ca30:	83 c4 10             	add    esp,0x10
c001ca33:	89 c2                	mov    edx,eax
c001ca35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca39:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca3f:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001ca44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca48:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ca4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca52:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	6a 03                	push   0x3
c001ca5d:	6a 50                	push   0x50
c001ca5f:	51                   	push   ecx
c001ca60:	52                   	push   edx
c001ca61:	50                   	push   eax
c001ca62:	e8 13 d5 fe ff       	call   c0009f7a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ca67:	83 c4 20             	add    esp,0x20
c001ca6a:	90                   	nop
c001ca6b:	83 c4 0c             	add    esp,0xc
c001ca6e:	c3                   	ret    
c001ca6f:	90                   	nop

c001ca70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ca70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca74:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ca77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ca7a:	09 c2                	or     edx,eax
c001ca7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca86:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca88:	31 c0                	xor    eax,eax
c001ca8a:	c1 e9 08             	shr    ecx,0x8
c001ca8d:	83 e1 0f             	and    ecx,0xf
c001ca90:	39 c8                	cmp    eax,ecx
c001ca92:	74 0a                	je     c001ca9e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca94:	f6 c2 01             	test   dl,0x1
c001ca97:	74 08                	je     c001caa1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca99:	d1 ea                	shr    edx,1
c001ca9b:	40                   	inc    eax
c001ca9c:	eb f2                	jmp    c001ca90 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca9e:	83 c8 ff             	or     eax,0xffffffff
c001caa1:	c3                   	ret    

c001caa2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001caa2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001caa6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001caa9:	89 c2                	mov    edx,eax
c001caab:	c1 ea 08             	shr    edx,0x8
c001caae:	83 e2 0f             	and    edx,0xf
c001cab1:	4a                   	dec    edx
c001cab2:	75 32                	jne    c001cae6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001cab4:	83 e0 0f             	and    eax,0xf
c001cab7:	83 f8 03             	cmp    eax,0x3
c001caba:	75 2a                	jne    c001cae6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001cabc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001cabf:	b8 02 00 00 00       	mov    eax,0x2
c001cac4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001caca:	74 1c                	je     c001cae8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001cacc:	b8 04 00 00 00       	mov    eax,0x4
c001cad1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001cad7:	74 0f                	je     c001cae8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001cad9:	31 c0                	xor    eax,eax
c001cadb:	83 fa 03             	cmp    edx,0x3
c001cade:	0f 94 c0             	sete   al
c001cae1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001cae5:	c3                   	ret    
c001cae6:	31 c0                	xor    eax,eax
c001cae8:	c3                   	ret    
c001cae9:	90                   	nop

c001caea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001caea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caf1:	0f ba e2 0f          	bt     edx,0xf
c001caf5:	72 f7                	jb     c001caee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001caf7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cafa:	83 ca 10             	or     edx,0x10
c001cafd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb03:	83 ca 01             	or     edx,0x1
c001cb06:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb09:	c3                   	ret    

c001cb0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001cb0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb0e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb11:	83 e2 fe             	and    edx,0xfffffffe
c001cb14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb17:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb1a:	83 e2 ef             	and    edx,0xffffffef
c001cb1d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb23:	0f ba e2 0e          	bt     edx,0xe
c001cb27:	72 f7                	jb     c001cb20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cb29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb2c:	0f ba e2 0f          	bt     edx,0xf
c001cb30:	72 ee                	jb     c001cb20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cb32:	c3                   	ret    
c001cb33:	90                   	nop

c001cb34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cb34:	55                   	push   ebp
c001cb35:	57                   	push   edi
c001cb36:	56                   	push   esi
c001cb37:	53                   	push   ebx
c001cb38:	83 ec 1c             	sub    esp,0x1c
c001cb3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb3f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cb43:	53                   	push   ebx
c001cb44:	56                   	push   esi
c001cb45:	e8 c0 ff ff ff       	call   c001cb0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cb4a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cb4e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	c1 e5 0a             	shl    ebp,0xa
c001cb5a:	01 e8                	add    eax,ebp
c001cb5c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb60:	68 00 04 00 00       	push   0x400
c001cb65:	6a 00                	push   0x0
c001cb67:	50                   	push   eax
c001cb68:	e8 83 39 fe ff       	call   c00004f0 <memset>
c001cb6d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001cb73:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001cb77:	01 e8                	add    eax,ebp
c001cb79:	83 c4 1c             	add    esp,0x1c
c001cb7c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb7e:	c1 e2 08             	shl    edx,0x8
c001cb81:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb88:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cb8e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb94:	01 f8                	add    eax,edi
c001cb96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb9c:	68 00 01 00 00       	push   0x100
c001cba1:	6a 00                	push   0x0
c001cba3:	50                   	push   eax
c001cba4:	e8 47 39 fe ff       	call   c00004f0 <memset>
c001cba9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cbaf:	01 fa                	add    edx,edi
c001cbb1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cbb5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cbb8:	c1 e7 0d             	shl    edi,0xd
c001cbbb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cbc2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cbc8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cbce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbd2:	31 ff                	xor    edi,edi
c001cbd4:	83 c4 10             	add    esp,0x10
c001cbd7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cbdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbe1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cbe7:	83 c5 20             	add    ebp,0x20
c001cbea:	01 f8                	add    eax,edi
c001cbec:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cbef:	52                   	push   edx
c001cbf0:	68 00 01 00 00       	push   0x100
c001cbf5:	6a 00                	push   0x0
c001cbf7:	50                   	push   eax
c001cbf8:	e8 f3 38 fe ff       	call   c00004f0 <memset>
c001cbfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cc0a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cc11:	01 f8                	add    eax,edi
c001cc13:	81 c7 00 01 00 00    	add    edi,0x100
c001cc19:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cc1c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cc22:	75 b3                	jne    c001cbd7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cc24:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cc2b:	50                   	push   eax
c001cc2c:	50                   	push   eax
c001cc2d:	53                   	push   ebx
c001cc2e:	56                   	push   esi
c001cc2f:	e8 b6 fe ff ff       	call   c001caea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cc34:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cc3b:	83 c4 2c             	add    esp,0x2c
c001cc3e:	5b                   	pop    ebx
c001cc3f:	5e                   	pop    esi
c001cc40:	5f                   	pop    edi
c001cc41:	5d                   	pop    ebp
c001cc42:	c3                   	ret    
c001cc43:	90                   	nop

c001cc44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cc44:	55                   	push   ebp
c001cc45:	57                   	push   edi
c001cc46:	56                   	push   esi
c001cc47:	53                   	push   ebx
c001cc48:	31 db                	xor    ebx,ebx
c001cc4a:	83 ec 0c             	sub    esp,0xc
c001cc4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cc55:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cc58:	f7 c7 01 00 00 00    	test   edi,0x1
c001cc5e:	74 7a                	je     c001ccda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc60:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc64:	89 d8                	mov    eax,ebx
c001cc66:	c1 e0 07             	shl    eax,0x7
c001cc69:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cc70:	55                   	push   ebp
c001cc71:	56                   	push   esi
c001cc72:	e8 2b fe ff ff       	call   c001caa2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cc77:	5a                   	pop    edx
c001cc78:	83 f8 01             	cmp    eax,0x1
c001cc7b:	59                   	pop    ecx
c001cc7c:	75 21                	jne    c001cc9f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc7e:	50                   	push   eax
c001cc7f:	53                   	push   ebx
c001cc80:	55                   	push   ebp
c001cc81:	56                   	push   esi
c001cc82:	e8 ad fe ff ff       	call   c001cb34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc87:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc8e:	e8 83 ae fe ff       	call   c0007b16 <malloc>
c001cc93:	89 c5                	mov    ebp,eax
c001cc95:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc98:	e8 99 10 00 00       	call   c001dd36 <SATA::SATA()>
c001cc9d:	eb 24                	jmp    c001ccc3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc9f:	83 f8 04             	cmp    eax,0x4
c001cca2:	75 36                	jne    c001ccda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cca4:	51                   	push   ecx
c001cca5:	53                   	push   ebx
c001cca6:	55                   	push   ebp
c001cca7:	56                   	push   esi
c001cca8:	e8 87 fe ff ff       	call   c001cb34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ccad:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ccb4:	e8 5d ae fe ff       	call   c0007b16 <malloc>
c001ccb9:	89 c5                	mov    ebp,eax
c001ccbb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccbe:	e8 d5 17 00 00       	call   c001e498 <SATAPI::SATAPI()>
c001ccc3:	58                   	pop    eax
c001ccc4:	5a                   	pop    edx
c001ccc5:	55                   	push   ebp
c001ccc6:	56                   	push   esi
c001ccc7:	e8 5a fd fe ff       	call   c000ca26 <Device::addChild(Device*)>
c001cccc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cccf:	56                   	push   esi
c001ccd0:	6a 00                	push   0x0
c001ccd2:	53                   	push   ebx
c001ccd3:	55                   	push   ebp
c001ccd4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ccd7:	83 c4 20             	add    esp,0x20
c001ccda:	d1 ef                	shr    edi,1
c001ccdc:	43                   	inc    ebx
c001ccdd:	83 fb 20             	cmp    ebx,0x20
c001cce0:	0f 85 72 ff ff ff    	jne    c001cc58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cce6:	83 c4 0c             	add    esp,0xc
c001cce9:	5b                   	pop    ebx
c001ccea:	5e                   	pop    esi
c001cceb:	5f                   	pop    edi
c001ccec:	5d                   	pop    ebp
c001cced:	c3                   	ret    

c001ccee <SATABus::open(int, int, void*)>:
c001ccee:	83 ec 14             	sub    esp,0x14
c001ccf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccf5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ccfb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cd01:	52                   	push   edx
c001cd02:	50                   	push   eax
c001cd03:	e8 3c ff ff ff       	call   c001cc44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cd08:	31 c0                	xor    eax,eax
c001cd0a:	83 c4 1c             	add    esp,0x1c
c001cd0d:	c3                   	ret    

c001cd0e <ATA::close(int, int, void*)>:
c001cd0e:	83 ec 0c             	sub    esp,0xc
c001cd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd1b:	85 c0                	test   eax,eax
c001cd1d:	74 0c                	je     c001cd2b <ATA::close(int, int, void*)+0x1d>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd24:	50                   	push   eax
c001cd25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cd28:	83 c4 10             	add    esp,0x10
c001cd2b:	31 c0                	xor    eax,eax
c001cd2d:	83 c4 0c             	add    esp,0xc
c001cd30:	c3                   	ret    
c001cd31:	90                   	nop

c001cd32 <ATA::powerSaving(PowerSavingLevel)>:
c001cd32:	c3                   	ret    
c001cd33:	90                   	nop

c001cd34 <ATA::ATA()>:
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3b:	83 ec 04             	sub    esp,0x4
c001cd3e:	68 00 02 00 00       	push   0x200
c001cd43:	68 71 35 02 c0       	push   0xc0023571
c001cd48:	50                   	push   eax
c001cd49:	e8 a4 00 ff ff       	call   c000cdf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd4e:	83 c4 10             	add    esp,0x10
c001cd51:	ba e4 34 02 c0       	mov    edx,0xc00234e4
c001cd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5a:	89 10                	mov    DWORD PTR [eax],edx
c001cd5c:	90                   	nop
c001cd5d:	83 c4 0c             	add    esp,0xc
c001cd60:	c3                   	ret    
c001cd61:	90                   	nop

c001cd62 <ATA::flush(bool)>:
c001cd62:	53                   	push   ebx
c001cd63:	83 ec 08             	sub    esp,0x8
c001cd66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cd6f:	83 f8 01             	cmp    eax,0x1
c001cd72:	19 c0                	sbb    eax,eax
c001cd74:	83 e0 fd             	and    eax,0xfffffffd
c001cd77:	05 ea 00 00 00       	add    eax,0xea
c001cd7c:	50                   	push   eax
c001cd7d:	6a 07                	push   0x7
c001cd7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd86:	50                   	push   eax
c001cd87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd8d:	e8 16 f1 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd92:	83 c4 0c             	add    esp,0xc
c001cd95:	6a 00                	push   0x0
c001cd97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd9e:	50                   	push   eax
c001cd9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cda5:	e8 e6 fb ff ff       	call   c001c990 <IDE::polling(unsigned char, unsigned int)>
c001cdaa:	83 c4 18             	add    esp,0x18
c001cdad:	5b                   	pop    ebx
c001cdae:	c3                   	ret    
c001cdaf:	90                   	nop

c001cdb0 <ATA::readyForCommand()>:
c001cdb0:	56                   	push   esi
c001cdb1:	53                   	push   ebx
c001cdb2:	53                   	push   ebx
c001cdb3:	31 db                	xor    ebx,ebx
c001cdb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cdb9:	51                   	push   ecx
c001cdba:	6a 0c                	push   0xc
c001cdbc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cdc3:	50                   	push   eax
c001cdc4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cdca:	e8 99 f1 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001cdcf:	83 c4 10             	add    esp,0x10
c001cdd2:	a8 88                	test   al,0x88
c001cdd4:	74 1f                	je     c001cdf5 <ATA::readyForCommand()+0x45>
c001cdd6:	43                   	inc    ebx
c001cdd7:	83 fb 63             	cmp    ebx,0x63
c001cdda:	7e dd                	jle    c001cdb9 <ATA::readyForCommand()+0x9>
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	6a 0a                	push   0xa
c001cde1:	e8 26 97 ff ff       	call   c001650c <milliTenthSleep(unsigned int)>
c001cde6:	83 c4 10             	add    esp,0x10
c001cde9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cdef:	75 c8                	jne    c001cdb9 <ATA::readyForCommand()+0x9>
c001cdf1:	31 c0                	xor    eax,eax
c001cdf3:	eb 02                	jmp    c001cdf7 <ATA::readyForCommand()+0x47>
c001cdf5:	b0 01                	mov    al,0x1
c001cdf7:	5a                   	pop    edx
c001cdf8:	5b                   	pop    ebx
c001cdf9:	5e                   	pop    esi
c001cdfa:	c3                   	ret    
c001cdfb:	90                   	nop

c001cdfc <ATA::access(unsigned long long, int, void*, bool)>:
c001cdfc:	55                   	push   ebp
c001cdfd:	57                   	push   edi
c001cdfe:	56                   	push   esi
c001cdff:	53                   	push   ebx
c001ce00:	83 ec 2c             	sub    esp,0x2c
c001ce03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ce07:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ce0b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ce0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce13:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ce17:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ce1b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce1f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ce25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce29:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ce2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ce33:	c1 e0 06             	shl    eax,0x6
c001ce36:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ce3e:	74 5d                	je     c001ce9d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ce40:	89 fa                	mov    edx,edi
c001ce42:	89 f0                	mov    eax,esi
c001ce44:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ce48:	c1 ea 1c             	shr    edx,0x1c
c001ce4b:	89 d1                	mov    ecx,edx
c001ce4d:	09 c1                	or     ecx,eax
c001ce4f:	74 25                	je     c001ce76 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ce51:	31 ed                	xor    ebp,ebp
c001ce53:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ce5a:	89 fa                	mov    edx,edi
c001ce5c:	89 f0                	mov    eax,esi
c001ce5e:	0f ad d0             	shrd   eax,edx,cl
c001ce61:	d3 ea                	shr    edx,cl
c001ce63:	f6 c1 20             	test   cl,0x20
c001ce66:	74 02                	je     c001ce6a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ce68:	89 d0                	mov    eax,edx
c001ce6a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ce6e:	45                   	inc    ebp
c001ce6f:	83 fd 06             	cmp    ebp,0x6
c001ce72:	75 df                	jne    c001ce53 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ce74:	eb 76                	jmp    c001ceec <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001ce76:	89 f0                	mov    eax,esi
c001ce78:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce7d:	89 fa                	mov    edx,edi
c001ce7f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce86:	0f ac d0 10          	shrd   eax,edx,0x10
c001ce8a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce8f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce93:	c1 ee 18             	shr    esi,0x18
c001ce96:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ce9b:	eb 56                	jmp    c001cef3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce9d:	6a 00                	push   0x0
c001ce9f:	6a 3f                	push   0x3f
c001cea1:	57                   	push   edi
c001cea2:	56                   	push   esi
c001cea3:	e8 a8 2a 00 00       	call   c001f950 <__umoddi3>
c001cea8:	83 c4 10             	add    esp,0x10
c001ceab:	40                   	inc    eax
c001ceac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ceb0:	6a 00                	push   0x0
c001ceb2:	68 f0 03 00 00       	push   0x3f0
c001ceb7:	57                   	push   edi
c001ceb8:	56                   	push   esi
c001ceb9:	e8 92 29 00 00       	call   c001f850 <__udivdi3>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cec6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cecd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ced2:	6a 00                	push   0x0
c001ced4:	6a 3f                	push   0x3f
c001ced6:	57                   	push   edi
c001ced7:	56                   	push   esi
c001ced8:	e8 73 29 00 00       	call   c001f850 <__udivdi3>
c001cedd:	83 c4 10             	add    esp,0x10
c001cee0:	83 e0 0f             	and    eax,0xf
c001cee3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cee8:	89 c6                	mov    esi,eax
c001ceea:	eb 07                	jmp    c001cef3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ceec:	31 f6                	xor    esi,esi
c001ceee:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cef3:	bf 01 00 00 00       	mov    edi,0x1
c001cef8:	50                   	push   eax
c001cef9:	6a 00                	push   0x0
c001cefb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf02:	50                   	push   eax
c001cf03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf07:	e8 a4 f1 ff ff       	call   c001c0b0 <IDE::enableIRQs(unsigned char, bool)>
c001cf0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf0f:	e8 9c fe ff ff       	call   c001cdb0 <ATA::readyForCommand()>
c001cf14:	83 c4 10             	add    esp,0x10
c001cf17:	84 c0                	test   al,al
c001cf19:	0f 84 69 02 00 00    	je     c001d188 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cf1f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cf25:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cf2b:	c1 e0 04             	shl    eax,0x4
c001cf2e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cf35:	09 c6                	or     esi,eax
c001cf37:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cf3c:	75 05                	jne    c001cf43 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cf3e:	83 ce a0             	or     esi,0xffffffa0
c001cf41:	eb 03                	jmp    c001cf46 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cf43:	83 ce e0             	or     esi,0xffffffe0
c001cf46:	89 f0                	mov    eax,esi
c001cf48:	0f b6 f0             	movzx  esi,al
c001cf4b:	56                   	push   esi
c001cf4c:	6a 06                	push   0x6
c001cf4e:	51                   	push   ecx
c001cf4f:	52                   	push   edx
c001cf50:	e8 53 ef ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf55:	83 c4 10             	add    esp,0x10
c001cf58:	6a 00                	push   0x0
c001cf5a:	6a 01                	push   0x1
c001cf5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf63:	50                   	push   eax
c001cf64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf6a:	e8 39 ef ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf6f:	83 c4 10             	add    esp,0x10
c001cf72:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cf77:	83 f8 02             	cmp    eax,0x2
c001cf7a:	75 6e                	jne    c001cfea <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cf7c:	6a 00                	push   0x0
c001cf7e:	6a 08                	push   0x8
c001cf80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf87:	50                   	push   eax
c001cf88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8e:	e8 15 ef ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf93:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf98:	50                   	push   eax
c001cf99:	6a 09                	push   0x9
c001cf9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfa2:	50                   	push   eax
c001cfa3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfa9:	e8 fa ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfae:	83 c4 20             	add    esp,0x20
c001cfb1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cfb6:	50                   	push   eax
c001cfb7:	6a 0a                	push   0xa
c001cfb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc0:	50                   	push   eax
c001cfc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfc7:	e8 dc ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfcc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cfd1:	50                   	push   eax
c001cfd2:	6a 0b                	push   0xb
c001cfd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfdb:	50                   	push   eax
c001cfdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe2:	e8 c1 ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfe7:	83 c4 20             	add    esp,0x20
c001cfea:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cfef:	50                   	push   eax
c001cff0:	6a 02                	push   0x2
c001cff2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cff9:	50                   	push   eax
c001cffa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d000:	e8 a3 ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d005:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d00a:	50                   	push   eax
c001d00b:	6a 03                	push   0x3
c001d00d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d014:	50                   	push   eax
c001d015:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d01b:	e8 88 ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d020:	83 c4 20             	add    esp,0x20
c001d023:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d028:	50                   	push   eax
c001d029:	6a 04                	push   0x4
c001d02b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d032:	50                   	push   eax
c001d033:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d039:	e8 6a ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d03e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d043:	50                   	push   eax
c001d044:	6a 05                	push   0x5
c001d046:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d04d:	50                   	push   eax
c001d04e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d054:	e8 4f ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d059:	83 c4 20             	add    esp,0x20
c001d05c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d061:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001d066:	74 11                	je     c001d079 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001d068:	b8 30 00 00 00       	mov    eax,0x30
c001d06d:	83 fa 02             	cmp    edx,0x2
c001d070:	75 16                	jne    c001d088 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d072:	b8 34 00 00 00       	mov    eax,0x34
c001d077:	eb 0f                	jmp    c001d088 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d079:	b8 20 00 00 00       	mov    eax,0x20
c001d07e:	83 fa 02             	cmp    edx,0x2
c001d081:	75 05                	jne    c001d088 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d083:	b8 24 00 00 00       	mov    eax,0x24
c001d088:	50                   	push   eax
c001d089:	6a 07                	push   0x7
c001d08b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d092:	50                   	push   eax
c001d093:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d099:	e8 0a ee ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d09e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d0aa:	85 f6                	test   esi,esi
c001d0ac:	0f 84 b3 00 00 00    	je     c001d165 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001d0b2:	50                   	push   eax
c001d0b3:	6a 01                	push   0x1
c001d0b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0bc:	50                   	push   eax
c001d0bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0c3:	e8 c8 f8 ff ff       	call   c001c990 <IDE::polling(unsigned char, unsigned int)>
c001d0c8:	83 c4 10             	add    esp,0x10
c001d0cb:	0f b6 f8             	movzx  edi,al
c001d0ce:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d0d4:	85 ff                	test   edi,edi
c001d0d6:	74 1d                	je     c001d0f5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d0d8:	57                   	push   edi
c001d0d9:	0f b6 d2             	movzx  edx,dl
c001d0dc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d0e3:	50                   	push   eax
c001d0e4:	52                   	push   edx
c001d0e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0eb:	e8 e6 f7 ff ff       	call   c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0f0:	e9 90 00 00 00       	jmp    c001d185 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d0f5:	85 ed                	test   ebp,ebp
c001d0f7:	74 3b                	je     c001d134 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d0f9:	31 c9                	xor    ecx,ecx
c001d0fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d0ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d103:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d107:	50                   	push   eax
c001d108:	50                   	push   eax
c001d109:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d110:	50                   	push   eax
c001d111:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d117:	e8 7a ed ff ff       	call   c001be96 <IDE::getBase(unsigned char)>
c001d11c:	89 c2                	mov    edx,eax
c001d11e:	89 f8                	mov    eax,edi
c001d120:	66 ef                	out    dx,ax
c001d122:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d126:	83 c4 10             	add    esp,0x10
c001d129:	41                   	inc    ecx
c001d12a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d130:	75 c9                	jne    c001d0fb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d132:	eb 23                	jmp    c001d157 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d134:	0f b6 d2             	movzx  edx,dl
c001d137:	51                   	push   ecx
c001d138:	51                   	push   ecx
c001d139:	52                   	push   edx
c001d13a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d140:	e8 51 ed ff ff       	call   c001be96 <IDE::getBase(unsigned char)>
c001d145:	b9 00 01 00 00       	mov    ecx,0x100
c001d14a:	89 c2                	mov    edx,eax
c001d14c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d150:	fc                   	cld    
c001d151:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d154:	83 c4 10             	add    esp,0x10
c001d157:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d15f:	4e                   	dec    esi
c001d160:	e9 45 ff ff ff       	jmp    c001d0aa <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d165:	31 ff                	xor    edi,edi
c001d167:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d16c:	74 1a                	je     c001d188 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d16e:	50                   	push   eax
c001d16f:	50                   	push   eax
c001d170:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d175:	83 f8 02             	cmp    eax,0x2
c001d178:	0f 94 c0             	sete   al
c001d17b:	0f b6 c0             	movzx  eax,al
c001d17e:	50                   	push   eax
c001d17f:	53                   	push   ebx
c001d180:	e8 dd fb ff ff       	call   c001cd62 <ATA::flush(bool)>
c001d185:	83 c4 10             	add    esp,0x10
c001d188:	83 c4 2c             	add    esp,0x2c
c001d18b:	89 f8                	mov    eax,edi
c001d18d:	5b                   	pop    ebx
c001d18e:	5e                   	pop    esi
c001d18f:	5f                   	pop    edi
c001d190:	5d                   	pop    ebp
c001d191:	c3                   	ret    

c001d192 <ATA::detectCHS()>:
c001d192:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d196:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d19c:	c1 e0 06             	shl    eax,0x6
c001d19f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d1a5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d1af:	c7 44 24 04 c8 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc00234c8
c001d1b7:	e9 3b 45 ff ff       	jmp    c00116f7 <KePanic(char const*)>

c001d1bc <ATA::open(int, int, void*)>:
c001d1bc:	53                   	push   ebx
c001d1bd:	83 ec 08             	sub    esp,0x8
c001d1c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1cc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d1d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d1d8:	c1 e0 06             	shl    eax,0x6
c001d1db:	01 d0                	add    eax,edx
c001d1dd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d1e4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d1ea:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d1f1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d1fb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d201:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d208:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d20f:	75 0c                	jne    c001d21d <ATA::open(int, int, void*)+0x61>
c001d211:	83 ec 0c             	sub    esp,0xc
c001d214:	53                   	push   ebx
c001d215:	e8 78 ff ff ff       	call   c001d192 <ATA::detectCHS()>
c001d21a:	83 c4 10             	add    esp,0x10
c001d21d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d223:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d229:	c1 e0 06             	shl    eax,0x6
c001d22c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d233:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d23d:	d1 e8                	shr    eax,1
c001d23f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d245:	6a 04                	push   0x4
c001d247:	6a 0c                	push   0xc
c001d249:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d250:	50                   	push   eax
c001d251:	52                   	push   edx
c001d252:	e8 51 ec ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d257:	90                   	nop
c001d258:	90                   	nop
c001d259:	6a 00                	push   0x0
c001d25b:	6a 0c                	push   0xc
c001d25d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d264:	50                   	push   eax
c001d265:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d26b:	e8 38 ec ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d270:	83 c4 14             	add    esp,0x14
c001d273:	53                   	push   ebx
c001d274:	e8 e1 fb fe ff       	call   c000ce5a <PhysicalDisk::startCache()>
c001d279:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d27c:	e8 1d 0e ff ff       	call   c000e09e <createPartitionsForDisk(PhysicalDisk*)>
c001d281:	31 c0                	xor    eax,eax
c001d283:	83 c4 18             	add    esp,0x18
c001d286:	5b                   	pop    ebx
c001d287:	c3                   	ret    

c001d288 <combineCharAndColour(char, unsigned char)>:
c001d288:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d28d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d293:	c1 e0 08             	shl    eax,0x8
c001d296:	09 d0                	or     eax,edx
c001d298:	c3                   	ret    

c001d299 <combineColours(unsigned char, unsigned char)>:
c001d299:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d29e:	c1 e0 04             	shl    eax,0x4
c001d2a1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d2a5:	c3                   	ret    

c001d2a6 <ATA::read(unsigned long long, int, void*)>:
c001d2a6:	55                   	push   ebp
c001d2a7:	57                   	push   edi
c001d2a8:	56                   	push   esi
c001d2a9:	be 04 00 00 00       	mov    esi,0x4
c001d2ae:	53                   	push   ebx
c001d2af:	83 ec 0c             	sub    esp,0xc
c001d2b2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2ba:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2c1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2c5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d2cb:	0f 87 a1 01 00 00    	ja     c001d472 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2d1:	be 06 00 00 00       	mov    esi,0x6
c001d2d6:	85 c9                	test   ecx,ecx
c001d2d8:	0f 84 94 01 00 00    	je     c001d472 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2de:	55                   	push   ebp
c001d2df:	55                   	push   ebp
c001d2e0:	6a 00                	push   0x0
c001d2e2:	51                   	push   ecx
c001d2e3:	53                   	push   ebx
c001d2e4:	52                   	push   edx
c001d2e5:	50                   	push   eax
c001d2e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2ea:	e8 0d fb ff ff       	call   c001cdfc <ATA::access(unsigned long long, int, void*, bool)>
c001d2ef:	83 c4 20             	add    esp,0x20
c001d2f2:	89 c6                	mov    esi,eax
c001d2f4:	85 c0                	test   eax,eax
c001d2f6:	0f 85 71 01 00 00    	jne    c001d46d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d2fc:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d302:	89 da                	mov    edx,ebx
c001d304:	50                   	push   eax
c001d305:	bd 10 27 00 00       	mov    ebp,0x2710
c001d30a:	50                   	push   eax
c001d30b:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d311:	6a 0f                	push   0xf
c001d313:	6a 00                	push   0x0
c001d315:	e8 7f ff ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001d31a:	59                   	pop    ecx
c001d31b:	b9 0a 00 00 00       	mov    ecx,0xa
c001d320:	5b                   	pop    ebx
c001d321:	0f b6 d8             	movzx  ebx,al
c001d324:	89 d0                	mov    eax,edx
c001d326:	53                   	push   ebx
c001d327:	99                   	cdq    
c001d328:	f7 fd                	idiv   ebp
c001d32a:	99                   	cdq    
c001d32b:	f7 f9                	idiv   ecx
c001d32d:	83 c2 30             	add    edx,0x30
c001d330:	0f b6 d2             	movzx  edx,dl
c001d333:	52                   	push   edx
c001d334:	e8 4f ff ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d339:	5f                   	pop    edi
c001d33a:	bf e8 03 00 00       	mov    edi,0x3e8
c001d33f:	5a                   	pop    edx
c001d340:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d346:	53                   	push   ebx
c001d347:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d34c:	99                   	cdq    
c001d34d:	f7 ff                	idiv   edi
c001d34f:	99                   	cdq    
c001d350:	f7 f9                	idiv   ecx
c001d352:	8d 42 30             	lea    eax,[edx+0x30]
c001d355:	0f b6 c0             	movzx  eax,al
c001d358:	50                   	push   eax
c001d359:	e8 2a ff ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d35e:	5f                   	pop    edi
c001d35f:	bf 64 00 00 00       	mov    edi,0x64
c001d364:	5a                   	pop    edx
c001d365:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d36b:	53                   	push   ebx
c001d36c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d371:	99                   	cdq    
c001d372:	f7 ff                	idiv   edi
c001d374:	99                   	cdq    
c001d375:	f7 f9                	idiv   ecx
c001d377:	8d 42 30             	lea    eax,[edx+0x30]
c001d37a:	0f b6 c0             	movzx  eax,al
c001d37d:	50                   	push   eax
c001d37e:	e8 05 ff ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d383:	5a                   	pop    edx
c001d384:	5a                   	pop    edx
c001d385:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d38b:	53                   	push   ebx
c001d38c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d391:	99                   	cdq    
c001d392:	f7 f9                	idiv   ecx
c001d394:	99                   	cdq    
c001d395:	f7 f9                	idiv   ecx
c001d397:	8d 42 30             	lea    eax,[edx+0x30]
c001d39a:	0f b6 c0             	movzx  eax,al
c001d39d:	50                   	push   eax
c001d39e:	e8 e5 fe ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d3a3:	5a                   	pop    edx
c001d3a4:	5a                   	pop    edx
c001d3a5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3ab:	53                   	push   ebx
c001d3ac:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3b1:	99                   	cdq    
c001d3b2:	f7 f9                	idiv   ecx
c001d3b4:	83 c2 30             	add    edx,0x30
c001d3b7:	0f b6 d2             	movzx  edx,dl
c001d3ba:	52                   	push   edx
c001d3bb:	e8 c8 fe ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d3c0:	5a                   	pop    edx
c001d3c1:	5a                   	pop    edx
c001d3c2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3c8:	53                   	push   ebx
c001d3c9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3ce:	99                   	cdq    
c001d3cf:	f7 fd                	idiv   ebp
c001d3d1:	99                   	cdq    
c001d3d2:	f7 f9                	idiv   ecx
c001d3d4:	8d 42 30             	lea    eax,[edx+0x30]
c001d3d7:	0f b6 c0             	movzx  eax,al
c001d3da:	50                   	push   eax
c001d3db:	e8 a8 fe ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d3e0:	5d                   	pop    ebp
c001d3e1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d3e6:	5a                   	pop    edx
c001d3e7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d3ed:	53                   	push   ebx
c001d3ee:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3f3:	99                   	cdq    
c001d3f4:	f7 fd                	idiv   ebp
c001d3f6:	99                   	cdq    
c001d3f7:	f7 f9                	idiv   ecx
c001d3f9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3fc:	0f b6 c0             	movzx  eax,al
c001d3ff:	50                   	push   eax
c001d400:	e8 83 fe ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d405:	5d                   	pop    ebp
c001d406:	5a                   	pop    edx
c001d407:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d40d:	53                   	push   ebx
c001d40e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d413:	99                   	cdq    
c001d414:	f7 ff                	idiv   edi
c001d416:	99                   	cdq    
c001d417:	f7 f9                	idiv   ecx
c001d419:	8d 42 30             	lea    eax,[edx+0x30]
c001d41c:	0f b6 c0             	movzx  eax,al
c001d41f:	50                   	push   eax
c001d420:	e8 63 fe ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d425:	5f                   	pop    edi
c001d426:	5d                   	pop    ebp
c001d427:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d42d:	53                   	push   ebx
c001d42e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d433:	99                   	cdq    
c001d434:	f7 f9                	idiv   ecx
c001d436:	99                   	cdq    
c001d437:	f7 f9                	idiv   ecx
c001d439:	8d 42 30             	lea    eax,[edx+0x30]
c001d43c:	0f b6 c0             	movzx  eax,al
c001d43f:	50                   	push   eax
c001d440:	e8 43 fe ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d445:	5a                   	pop    edx
c001d446:	5f                   	pop    edi
c001d447:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d44d:	53                   	push   ebx
c001d44e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d453:	99                   	cdq    
c001d454:	f7 f9                	idiv   ecx
c001d456:	83 c2 30             	add    edx,0x30
c001d459:	0f b6 d2             	movzx  edx,dl
c001d45c:	52                   	push   edx
c001d45d:	e8 26 fe ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d462:	83 c4 10             	add    esp,0x10
c001d465:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d46b:	eb 05                	jmp    c001d472 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d46d:	be 01 00 00 00       	mov    esi,0x1
c001d472:	83 c4 0c             	add    esp,0xc
c001d475:	89 f0                	mov    eax,esi
c001d477:	5b                   	pop    ebx
c001d478:	5e                   	pop    esi
c001d479:	5f                   	pop    edi
c001d47a:	5d                   	pop    ebp
c001d47b:	c3                   	ret    

c001d47c <ATA::write(unsigned long long, int, void*)>:
c001d47c:	55                   	push   ebp
c001d47d:	57                   	push   edi
c001d47e:	56                   	push   esi
c001d47f:	be 04 00 00 00       	mov    esi,0x4
c001d484:	53                   	push   ebx
c001d485:	83 ec 0c             	sub    esp,0xc
c001d488:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d48c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d490:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d493:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d497:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d49b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d4a1:	0f 87 9c 01 00 00    	ja     c001d643 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4a7:	be 06 00 00 00       	mov    esi,0x6
c001d4ac:	85 c9                	test   ecx,ecx
c001d4ae:	0f 84 8f 01 00 00    	je     c001d643 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4b4:	55                   	push   ebp
c001d4b5:	55                   	push   ebp
c001d4b6:	6a 01                	push   0x1
c001d4b8:	51                   	push   ecx
c001d4b9:	53                   	push   ebx
c001d4ba:	52                   	push   edx
c001d4bb:	50                   	push   eax
c001d4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4c0:	e8 37 f9 ff ff       	call   c001cdfc <ATA::access(unsigned long long, int, void*, bool)>
c001d4c5:	83 c4 20             	add    esp,0x20
c001d4c8:	89 c6                	mov    esi,eax
c001d4ca:	85 c0                	test   eax,eax
c001d4cc:	0f 85 6c 01 00 00    	jne    c001d63e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d4d2:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d4d8:	bd 10 27 00 00       	mov    ebp,0x2710
c001d4dd:	50                   	push   eax
c001d4de:	50                   	push   eax
c001d4df:	6a 0f                	push   0xf
c001d4e1:	6a 00                	push   0x0
c001d4e3:	e8 b1 fd ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001d4e8:	5a                   	pop    edx
c001d4e9:	0f b6 d8             	movzx  ebx,al
c001d4ec:	59                   	pop    ecx
c001d4ed:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4f2:	53                   	push   ebx
c001d4f3:	b9 0a 00 00 00       	mov    ecx,0xa
c001d4f8:	99                   	cdq    
c001d4f9:	f7 fd                	idiv   ebp
c001d4fb:	99                   	cdq    
c001d4fc:	f7 f9                	idiv   ecx
c001d4fe:	8d 42 30             	lea    eax,[edx+0x30]
c001d501:	0f b6 c0             	movzx  eax,al
c001d504:	50                   	push   eax
c001d505:	e8 7e fd ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d50a:	5f                   	pop    edi
c001d50b:	bf e8 03 00 00       	mov    edi,0x3e8
c001d510:	5a                   	pop    edx
c001d511:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d517:	53                   	push   ebx
c001d518:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d51d:	99                   	cdq    
c001d51e:	f7 ff                	idiv   edi
c001d520:	99                   	cdq    
c001d521:	f7 f9                	idiv   ecx
c001d523:	8d 42 30             	lea    eax,[edx+0x30]
c001d526:	0f b6 c0             	movzx  eax,al
c001d529:	50                   	push   eax
c001d52a:	e8 59 fd ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d52f:	5f                   	pop    edi
c001d530:	bf 64 00 00 00       	mov    edi,0x64
c001d535:	5a                   	pop    edx
c001d536:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d53c:	53                   	push   ebx
c001d53d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d542:	99                   	cdq    
c001d543:	f7 ff                	idiv   edi
c001d545:	99                   	cdq    
c001d546:	f7 f9                	idiv   ecx
c001d548:	8d 42 30             	lea    eax,[edx+0x30]
c001d54b:	0f b6 c0             	movzx  eax,al
c001d54e:	50                   	push   eax
c001d54f:	e8 34 fd ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d554:	5a                   	pop    edx
c001d555:	5a                   	pop    edx
c001d556:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d55c:	53                   	push   ebx
c001d55d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d562:	99                   	cdq    
c001d563:	f7 f9                	idiv   ecx
c001d565:	99                   	cdq    
c001d566:	f7 f9                	idiv   ecx
c001d568:	8d 42 30             	lea    eax,[edx+0x30]
c001d56b:	0f b6 c0             	movzx  eax,al
c001d56e:	50                   	push   eax
c001d56f:	e8 14 fd ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d574:	5a                   	pop    edx
c001d575:	5a                   	pop    edx
c001d576:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d57c:	53                   	push   ebx
c001d57d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d582:	99                   	cdq    
c001d583:	f7 f9                	idiv   ecx
c001d585:	8d 42 30             	lea    eax,[edx+0x30]
c001d588:	0f b6 c0             	movzx  eax,al
c001d58b:	50                   	push   eax
c001d58c:	e8 f7 fc ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d591:	5a                   	pop    edx
c001d592:	5a                   	pop    edx
c001d593:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d599:	53                   	push   ebx
c001d59a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d59f:	99                   	cdq    
c001d5a0:	f7 fd                	idiv   ebp
c001d5a2:	99                   	cdq    
c001d5a3:	f7 f9                	idiv   ecx
c001d5a5:	8d 42 30             	lea    eax,[edx+0x30]
c001d5a8:	0f b6 c0             	movzx  eax,al
c001d5ab:	50                   	push   eax
c001d5ac:	e8 d7 fc ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d5b1:	5d                   	pop    ebp
c001d5b2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d5b7:	5a                   	pop    edx
c001d5b8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d5be:	53                   	push   ebx
c001d5bf:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5c4:	99                   	cdq    
c001d5c5:	f7 fd                	idiv   ebp
c001d5c7:	99                   	cdq    
c001d5c8:	f7 f9                	idiv   ecx
c001d5ca:	8d 42 30             	lea    eax,[edx+0x30]
c001d5cd:	0f b6 c0             	movzx  eax,al
c001d5d0:	50                   	push   eax
c001d5d1:	e8 b2 fc ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d5d6:	5d                   	pop    ebp
c001d5d7:	5a                   	pop    edx
c001d5d8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d5de:	53                   	push   ebx
c001d5df:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5e4:	99                   	cdq    
c001d5e5:	f7 ff                	idiv   edi
c001d5e7:	99                   	cdq    
c001d5e8:	f7 f9                	idiv   ecx
c001d5ea:	8d 42 30             	lea    eax,[edx+0x30]
c001d5ed:	0f b6 c0             	movzx  eax,al
c001d5f0:	50                   	push   eax
c001d5f1:	e8 92 fc ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d5f6:	5f                   	pop    edi
c001d5f7:	5d                   	pop    ebp
c001d5f8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5fe:	53                   	push   ebx
c001d5ff:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d604:	99                   	cdq    
c001d605:	f7 f9                	idiv   ecx
c001d607:	99                   	cdq    
c001d608:	f7 f9                	idiv   ecx
c001d60a:	8d 42 30             	lea    eax,[edx+0x30]
c001d60d:	0f b6 c0             	movzx  eax,al
c001d610:	50                   	push   eax
c001d611:	e8 72 fc ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d616:	5a                   	pop    edx
c001d617:	5f                   	pop    edi
c001d618:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d61e:	53                   	push   ebx
c001d61f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d624:	99                   	cdq    
c001d625:	f7 f9                	idiv   ecx
c001d627:	83 c2 30             	add    edx,0x30
c001d62a:	0f b6 d2             	movzx  edx,dl
c001d62d:	52                   	push   edx
c001d62e:	e8 55 fc ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001d633:	83 c4 10             	add    esp,0x10
c001d636:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d63c:	eb 05                	jmp    c001d643 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d63e:	be 01 00 00 00       	mov    esi,0x1
c001d643:	83 c4 0c             	add    esp,0xc
c001d646:	89 f0                	mov    eax,esi
c001d648:	5b                   	pop    ebx
c001d649:	5e                   	pop    esi
c001d64a:	5f                   	pop    edi
c001d64b:	5d                   	pop    ebp
c001d64c:	c3                   	ret    
c001d64d:	90                   	nop

c001d64e <ATAPI::write(unsigned long long, int, void*)>:
c001d64e:	b8 03 00 00 00       	mov    eax,0x3
c001d653:	c3                   	ret    

c001d654 <ATAPI::close(int, int, void*)>:
c001d654:	83 ec 0c             	sub    esp,0xc
c001d657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d661:	85 c0                	test   eax,eax
c001d663:	74 0c                	je     c001d671 <ATAPI::close(int, int, void*)+0x1d>
c001d665:	83 ec 0c             	sub    esp,0xc
c001d668:	8b 10                	mov    edx,DWORD PTR [eax]
c001d66a:	50                   	push   eax
c001d66b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d66e:	83 c4 10             	add    esp,0x10
c001d671:	31 c0                	xor    eax,eax
c001d673:	83 c4 0c             	add    esp,0xc
c001d676:	c3                   	ret    
c001d677:	90                   	nop

c001d678 <ATAPI::ATAPI()>:
c001d678:	83 ec 0c             	sub    esp,0xc
c001d67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67f:	83 ec 04             	sub    esp,0x4
c001d682:	68 00 08 00 00       	push   0x800
c001d687:	68 11 36 02 c0       	push   0xc0023611
c001d68c:	50                   	push   eax
c001d68d:	e8 60 f7 fe ff       	call   c000cdf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001d69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d69e:	89 10                	mov    DWORD PTR [eax],edx
c001d6a0:	90                   	nop
c001d6a1:	83 c4 0c             	add    esp,0xc
c001d6a4:	c3                   	ret    
c001d6a5:	90                   	nop

c001d6a6 <ATAPI::readyForCommand()>:
c001d6a6:	56                   	push   esi
c001d6a7:	53                   	push   ebx
c001d6a8:	53                   	push   ebx
c001d6a9:	31 db                	xor    ebx,ebx
c001d6ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6af:	51                   	push   ecx
c001d6b0:	6a 0c                	push   0xc
c001d6b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d6b9:	50                   	push   eax
c001d6ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d6c0:	e8 a3 e8 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001d6c5:	83 c4 10             	add    esp,0x10
c001d6c8:	a8 88                	test   al,0x88
c001d6ca:	74 25                	je     c001d6f1 <ATAPI::readyForCommand()+0x4b>
c001d6cc:	43                   	inc    ebx
c001d6cd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d6d3:	7e da                	jle    c001d6af <ATAPI::readyForCommand()+0x9>
c001d6d5:	83 ec 0c             	sub    esp,0xc
c001d6d8:	68 5e 01 00 00       	push   0x15e
c001d6dd:	e8 2a 8e ff ff       	call   c001650c <milliTenthSleep(unsigned int)>
c001d6e2:	83 c4 10             	add    esp,0x10
c001d6e5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d6eb:	75 c2                	jne    c001d6af <ATAPI::readyForCommand()+0x9>
c001d6ed:	31 c0                	xor    eax,eax
c001d6ef:	eb 02                	jmp    c001d6f3 <ATAPI::readyForCommand()+0x4d>
c001d6f1:	b0 01                	mov    al,0x1
c001d6f3:	5a                   	pop    edx
c001d6f4:	5b                   	pop    ebx
c001d6f5:	5e                   	pop    esi
c001d6f6:	c3                   	ret    
c001d6f7:	90                   	nop

c001d6f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6f8:	55                   	push   ebp
c001d6f9:	57                   	push   edi
c001d6fa:	56                   	push   esi
c001d6fb:	53                   	push   ebx
c001d6fc:	83 ec 20             	sub    esp,0x20
c001d6ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d703:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d707:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d70b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d70f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d713:	6a 01                	push   0x1
c001d715:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d71c:	50                   	push   eax
c001d71d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d723:	e8 88 e9 ff ff       	call   c001c0b0 <IDE::enableIRQs(unsigned char, bool)>
c001d728:	5e                   	pop    esi
c001d729:	58                   	pop    eax
c001d72a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d731:	50                   	push   eax
c001d732:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d738:	e8 45 e7 ff ff       	call   c001be82 <IDE::prepareInterrupt(unsigned char)>
c001d73d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d740:	e8 61 ff ff ff       	call   c001d6a6 <ATAPI::readyForCommand()>
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	84 c0                	test   al,al
c001d74a:	75 0a                	jne    c001d756 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d74c:	bb 01 00 00 00       	mov    ebx,0x1
c001d751:	e9 60 02 00 00       	jmp    c001d9b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d756:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d75c:	c1 e0 04             	shl    eax,0x4
c001d75f:	0f b6 c0             	movzx  eax,al
c001d762:	50                   	push   eax
c001d763:	6a 06                	push   0x6
c001d765:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d76c:	50                   	push   eax
c001d76d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d773:	e8 30 e7 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d778:	6a 00                	push   0x0
c001d77a:	6a 01                	push   0x1
c001d77c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d783:	50                   	push   eax
c001d784:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d78a:	e8 19 e7 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d78f:	83 c4 20             	add    esp,0x20
c001d792:	0f b6 c3             	movzx  eax,bl
c001d795:	0f b6 df             	movzx  ebx,bh
c001d798:	50                   	push   eax
c001d799:	6a 04                	push   0x4
c001d79b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7a2:	50                   	push   eax
c001d7a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a9:	e8 fa e6 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ae:	53                   	push   ebx
c001d7af:	6a 05                	push   0x5
c001d7b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7b8:	50                   	push   eax
c001d7b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7bf:	e8 e4 e6 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7c4:	83 c4 20             	add    esp,0x20
c001d7c7:	68 a0 00 00 00       	push   0xa0
c001d7cc:	6a 07                	push   0x7
c001d7ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7d5:	50                   	push   eax
c001d7d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7dc:	e8 c7 e6 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7e1:	83 c4 0c             	add    esp,0xc
c001d7e4:	6a 01                	push   0x1
c001d7e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7ed:	50                   	push   eax
c001d7ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7f4:	e8 97 f1 ff ff       	call   c001c990 <IDE::polling(unsigned char, unsigned int)>
c001d7f9:	83 c4 10             	add    esp,0x10
c001d7fc:	0f b6 d8             	movzx  ebx,al
c001d7ff:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d805:	85 db                	test   ebx,ebx
c001d807:	74 20                	je     c001d829 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d809:	53                   	push   ebx
c001d80a:	0f b6 c0             	movzx  eax,al
c001d80d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d814:	52                   	push   edx
c001d815:	50                   	push   eax
c001d816:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d81c:	e8 b5 f0 ff ff       	call   c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	e9 8d 01 00 00       	jmp    c001d9b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d829:	0f b6 c0             	movzx  eax,al
c001d82c:	53                   	push   ebx
c001d82d:	53                   	push   ebx
c001d82e:	50                   	push   eax
c001d82f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d835:	e8 5c e6 ff ff       	call   c001be96 <IDE::getBase(unsigned char)>
c001d83a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d83e:	b9 06 00 00 00       	mov    ecx,0x6
c001d843:	89 c2                	mov    edx,eax
c001d845:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d848:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d84c:	83 c4 10             	add    esp,0x10
c001d84f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d858:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d85e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d865:	85 db                	test   ebx,ebx
c001d867:	0f 84 ec 00 00 00    	je     c001d959 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d86d:	51                   	push   ecx
c001d86e:	51                   	push   ecx
c001d86f:	52                   	push   edx
c001d870:	50                   	push   eax
c001d871:	e8 a0 e7 ff ff       	call   c001c016 <IDE::waitInterrupt(unsigned char)>
c001d876:	83 c4 10             	add    esp,0x10
c001d879:	84 c0                	test   al,al
c001d87b:	0f 84 cb fe ff ff    	je     c001d74c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d881:	56                   	push   esi
c001d882:	56                   	push   esi
c001d883:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d88a:	50                   	push   eax
c001d88b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d891:	e8 ec e5 ff ff       	call   c001be82 <IDE::prepareInterrupt(unsigned char)>
c001d896:	83 c4 0c             	add    esp,0xc
c001d899:	6a 04                	push   0x4
c001d89b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8a2:	50                   	push   eax
c001d8a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8a9:	e8 ba e6 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001d8ae:	83 c4 0c             	add    esp,0xc
c001d8b1:	89 c6                	mov    esi,eax
c001d8b3:	6a 05                	push   0x5
c001d8b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8bc:	50                   	push   eax
c001d8bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8c3:	e8 a0 e6 ff ff       	call   c001bf68 <IDE::read(unsigned char, unsigned char)>
c001d8c8:	89 f1                	mov    ecx,esi
c001d8ca:	0f b6 c0             	movzx  eax,al
c001d8cd:	0f b6 f1             	movzx  esi,cl
c001d8d0:	c1 e0 08             	shl    eax,0x8
c001d8d3:	09 c6                	or     esi,eax
c001d8d5:	d1 fe                	sar    esi,1
c001d8d7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d8db:	83 c4 10             	add    esp,0x10
c001d8de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d8e3:	74 41                	je     c001d926 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d8e5:	31 c9                	xor    ecx,ecx
c001d8e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8f4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d8f8:	75 0a                	jne    c001d904 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d8fa:	01 c9                	add    ecx,ecx
c001d8fc:	01 cd                	add    ebp,ecx
c001d8fe:	4b                   	dec    ebx
c001d8ff:	e9 54 ff ff ff       	jmp    c001d858 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d904:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d90d:	51                   	push   ecx
c001d90e:	51                   	push   ecx
c001d90f:	52                   	push   edx
c001d910:	50                   	push   eax
c001d911:	e8 80 e5 ff ff       	call   c001be96 <IDE::getBase(unsigned char)>
c001d916:	89 c2                	mov    edx,eax
c001d918:	89 f0                	mov    eax,esi
c001d91a:	66 ef                	out    dx,ax
c001d91c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d920:	83 c4 10             	add    esp,0x10
c001d923:	41                   	inc    ecx
c001d924:	eb c1                	jmp    c001d8e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d926:	31 f6                	xor    esi,esi
c001d928:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d92e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d935:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d939:	75 06                	jne    c001d941 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d93b:	01 f6                	add    esi,esi
c001d93d:	01 f5                	add    ebp,esi
c001d93f:	eb bd                	jmp    c001d8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d941:	51                   	push   ecx
c001d942:	51                   	push   ecx
c001d943:	52                   	push   edx
c001d944:	50                   	push   eax
c001d945:	e8 4c e5 ff ff       	call   c001be96 <IDE::getBase(unsigned char)>
c001d94a:	89 c2                	mov    edx,eax
c001d94c:	66 ed                	in     ax,dx
c001d94e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d953:	83 c4 10             	add    esp,0x10
c001d956:	46                   	inc    esi
c001d957:	eb cf                	jmp    c001d928 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d959:	51                   	push   ecx
c001d95a:	51                   	push   ecx
c001d95b:	52                   	push   edx
c001d95c:	50                   	push   eax
c001d95d:	e8 b4 e6 ff ff       	call   c001c016 <IDE::waitInterrupt(unsigned char)>
c001d962:	83 c4 10             	add    esp,0x10
c001d965:	84 c0                	test   al,al
c001d967:	0f 84 df fd ff ff    	je     c001d74c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d96d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d972:	52                   	push   edx
c001d973:	52                   	push   edx
c001d974:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d97b:	50                   	push   eax
c001d97c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d982:	e8 fb e4 ff ff       	call   c001be82 <IDE::prepareInterrupt(unsigned char)>
c001d987:	83 c4 10             	add    esp,0x10
c001d98a:	50                   	push   eax
c001d98b:	50                   	push   eax
c001d98c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d993:	50                   	push   eax
c001d994:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d99a:	e8 f7 e4 ff ff       	call   c001be96 <IDE::getBase(unsigned char)>
c001d99f:	8d 50 07             	lea    edx,[eax+0x7]
c001d9a2:	ec                   	in     al,dx
c001d9a3:	83 c4 10             	add    esp,0x10
c001d9a6:	a8 88                	test   al,0x88
c001d9a8:	74 0a                	je     c001d9b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d9aa:	4b                   	dec    ebx
c001d9ab:	75 dd                	jne    c001d98a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d9ad:	bb 02 00 00 00       	mov    ebx,0x2
c001d9b2:	eb 02                	jmp    c001d9b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d9b4:	31 db                	xor    ebx,ebx
c001d9b6:	83 c4 1c             	add    esp,0x1c
c001d9b9:	89 d8                	mov    eax,ebx
c001d9bb:	5b                   	pop    ebx
c001d9bc:	5e                   	pop    esi
c001d9bd:	5f                   	pop    edi
c001d9be:	5d                   	pop    ebp
c001d9bf:	c3                   	ret    

c001d9c0 <ATAPI::diskRemoved()>:
c001d9c0:	53                   	push   ebx
c001d9c1:	83 ec 14             	sub    esp,0x14
c001d9c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d9c8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d9cf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d9d5:	e8 b4 03 ff ff       	call   c000dd8e <LogicalDisk::unmount()>
c001d9da:	58                   	pop    eax
c001d9db:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9e1:	e8 8a 0d ff ff       	call   c000e770 <VCache::writeWriteBuffer()>
c001d9e6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d9ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9f0:	83 c4 18             	add    esp,0x18
c001d9f3:	5b                   	pop    ebx
c001d9f4:	e9 67 0d ff ff       	jmp    c000e760 <VCache::invalidateReadBuffer()>
c001d9f9:	90                   	nop

c001d9fa <ATAPI::eject()>:
c001d9fa:	57                   	push   edi
c001d9fb:	b9 03 00 00 00       	mov    ecx,0x3
c001da00:	53                   	push   ebx
c001da01:	83 ec 14             	sub    esp,0x14
c001da04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001da08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da0c:	fc                   	cld    
c001da0d:	31 c0                	xor    eax,eax
c001da0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da11:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001da16:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001da1b:	50                   	push   eax
c001da1c:	50                   	push   eax
c001da1d:	6a 00                	push   0x0
c001da1f:	6a 00                	push   0x0
c001da21:	6a 00                	push   0x0
c001da23:	6a 02                	push   0x2
c001da25:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da29:	50                   	push   eax
c001da2a:	53                   	push   ebx
c001da2b:	e8 c8 fc ff ff       	call   c001d6f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da30:	83 c4 14             	add    esp,0x14
c001da33:	53                   	push   ebx
c001da34:	e8 87 ff ff ff       	call   c001d9c0 <ATAPI::diskRemoved()>
c001da39:	83 c4 24             	add    esp,0x24
c001da3c:	31 c0                	xor    eax,eax
c001da3e:	5b                   	pop    ebx
c001da3f:	5f                   	pop    edi
c001da40:	c3                   	ret    
c001da41:	90                   	nop

c001da42 <ATAPI::diskInserted()>:
c001da42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da46:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001da4d:	c3                   	ret    

c001da4e <ATAPI::detectMedia()>:
c001da4e:	56                   	push   esi
c001da4f:	53                   	push   ebx
c001da50:	83 ec 28             	sub    esp,0x28
c001da53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da57:	6a 0c                	push   0xc
c001da59:	6a 00                	push   0x0
c001da5b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da5f:	56                   	push   esi
c001da60:	e8 8b 2a fe ff       	call   c00004f0 <memset>
c001da65:	58                   	pop    eax
c001da66:	5a                   	pop    edx
c001da67:	6a 00                	push   0x0
c001da69:	6a 00                	push   0x0
c001da6b:	6a 00                	push   0x0
c001da6d:	6a 00                	push   0x0
c001da6f:	56                   	push   esi
c001da70:	53                   	push   ebx
c001da71:	e8 82 fc ff ff       	call   c001d6f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da76:	83 c4 1c             	add    esp,0x1c
c001da79:	6a 0c                	push   0xc
c001da7b:	6a 00                	push   0x0
c001da7d:	56                   	push   esi
c001da7e:	e8 6d 2a fe ff       	call   c00004f0 <memset>
c001da83:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da88:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da8d:	59                   	pop    ecx
c001da8e:	58                   	pop    eax
c001da8f:	6a 01                	push   0x1
c001da91:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da95:	50                   	push   eax
c001da96:	6a 00                	push   0x0
c001da98:	6a 12                	push   0x12
c001da9a:	56                   	push   esi
c001da9b:	53                   	push   ebx
c001da9c:	e8 57 fc ff ff       	call   c001d6f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001daa1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001daa5:	83 c4 20             	add    esp,0x20
c001daa8:	83 e0 7f             	and    eax,0x7f
c001daab:	83 f8 70             	cmp    eax,0x70
c001daae:	74 15                	je     c001dac5 <ATAPI::detectMedia()+0x77>
c001dab0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dab7:	75 0c                	jne    c001dac5 <ATAPI::detectMedia()+0x77>
c001dab9:	83 ec 0c             	sub    esp,0xc
c001dabc:	53                   	push   ebx
c001dabd:	e8 80 ff ff ff       	call   c001da42 <ATAPI::diskInserted()>
c001dac2:	83 c4 10             	add    esp,0x10
c001dac5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dac9:	83 e0 0f             	and    eax,0xf
c001dacc:	83 f8 02             	cmp    eax,0x2
c001dacf:	75 1b                	jne    c001daec <ATAPI::detectMedia()+0x9e>
c001dad1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dad6:	75 2d                	jne    c001db05 <ATAPI::detectMedia()+0xb7>
c001dad8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dadf:	74 24                	je     c001db05 <ATAPI::detectMedia()+0xb7>
c001dae1:	83 ec 0c             	sub    esp,0xc
c001dae4:	53                   	push   ebx
c001dae5:	e8 d6 fe ff ff       	call   c001d9c0 <ATAPI::diskRemoved()>
c001daea:	eb 16                	jmp    c001db02 <ATAPI::detectMedia()+0xb4>
c001daec:	85 c0                	test   eax,eax
c001daee:	75 15                	jne    c001db05 <ATAPI::detectMedia()+0xb7>
c001daf0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daf7:	75 0c                	jne    c001db05 <ATAPI::detectMedia()+0xb7>
c001daf9:	83 ec 0c             	sub    esp,0xc
c001dafc:	53                   	push   ebx
c001dafd:	e8 40 ff ff ff       	call   c001da42 <ATAPI::diskInserted()>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	83 c4 24             	add    esp,0x24
c001db08:	5b                   	pop    ebx
c001db09:	5e                   	pop    esi
c001db0a:	c3                   	ret    
c001db0b:	90                   	nop

c001db0c <ATAPI::open(int, int, void*)>:
c001db0c:	56                   	push   esi
c001db0d:	53                   	push   ebx
c001db0e:	50                   	push   eax
c001db0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db1b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db21:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001db27:	c1 e0 06             	shl    eax,0x6
c001db2a:	01 d0                	add    eax,edx
c001db2c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001db33:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001db39:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001db40:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db4a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db50:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db57:	6a 04                	push   0x4
c001db59:	6a 0c                	push   0xc
c001db5b:	51                   	push   ecx
c001db5c:	52                   	push   edx
c001db5d:	e8 46 e3 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db62:	90                   	nop
c001db63:	90                   	nop
c001db64:	6a 00                	push   0x0
c001db66:	6a 0c                	push   0xc
c001db68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db6f:	50                   	push   eax
c001db70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db76:	e8 2d e3 ff ff       	call   c001bea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db7b:	83 c4 14             	add    esp,0x14
c001db7e:	68 78 01 00 00       	push   0x178
c001db83:	e8 8e 9f fe ff       	call   c0007b16 <malloc>
c001db88:	83 c4 0c             	add    esp,0xc
c001db8b:	89 c6                	mov    esi,eax
c001db8d:	6a 00                	push   0x0
c001db8f:	68 ff ff ff 7f       	push   0x7fffffff
c001db94:	6a 00                	push   0x0
c001db96:	6a 00                	push   0x0
c001db98:	53                   	push   ebx
c001db99:	68 c3 36 02 c0       	push   0xc00236c3
c001db9e:	50                   	push   eax
c001db9f:	e8 28 00 ff ff       	call   c000dbcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dba4:	83 c4 14             	add    esp,0x14
c001dba7:	56                   	push   esi
c001dba8:	e8 df 00 ff ff       	call   c000dc8c <LogicalDisk::assignDriveLetter()>
c001dbad:	5a                   	pop    edx
c001dbae:	0f be c0             	movsx  eax,al
c001dbb1:	59                   	pop    ecx
c001dbb2:	50                   	push   eax
c001dbb3:	68 14 35 02 c0       	push   0xc0023514
c001dbb8:	e8 e8 cd fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001dbbd:	58                   	pop    eax
c001dbbe:	5a                   	pop    edx
c001dbbf:	56                   	push   esi
c001dbc0:	53                   	push   ebx
c001dbc1:	e8 60 ee fe ff       	call   c000ca26 <Device::addChild(Device*)>
c001dbc6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001dbcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbcf:	e8 86 f2 fe ff       	call   c000ce5a <PhysicalDisk::startCache()>
c001dbd4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dbdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbde:	e8 6b fe ff ff       	call   c001da4e <ATAPI::detectMedia()>
c001dbe3:	83 c4 14             	add    esp,0x14
c001dbe6:	31 c0                	xor    eax,eax
c001dbe8:	5b                   	pop    ebx
c001dbe9:	5e                   	pop    esi
c001dbea:	c3                   	ret    
c001dbeb:	90                   	nop

c001dbec <ATAPI::read(unsigned long long, int, void*)>:
c001dbec:	55                   	push   ebp
c001dbed:	57                   	push   edi
c001dbee:	56                   	push   esi
c001dbef:	53                   	push   ebx
c001dbf0:	83 ec 1c             	sub    esp,0x1c
c001dbf3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbf7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dbfb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dbff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc06:	74 3c                	je     c001dc44 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dc08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dc0c:	b9 03 00 00 00       	mov    ecx,0x3
c001dc11:	fc                   	cld    
c001dc12:	31 c0                	xor    eax,eax
c001dc14:	0f ce                	bswap  esi
c001dc16:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc18:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dc1d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dc21:	89 e8                	mov    eax,ebp
c001dc23:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dc27:	50                   	push   eax
c001dc28:	50                   	push   eax
c001dc29:	55                   	push   ebp
c001dc2a:	c1 e5 0b             	shl    ebp,0xb
c001dc2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc31:	6a 00                	push   0x0
c001dc33:	55                   	push   ebp
c001dc34:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc38:	50                   	push   eax
c001dc39:	53                   	push   ebx
c001dc3a:	e8 b9 fa ff ff       	call   c001d6f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc3f:	83 c4 20             	add    esp,0x20
c001dc42:	eb 1a                	jmp    c001dc5e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dc44:	83 ec 0c             	sub    esp,0xc
c001dc47:	53                   	push   ebx
c001dc48:	e8 01 fe ff ff       	call   c001da4e <ATAPI::detectMedia()>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc57:	75 af                	jne    c001dc08 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dc59:	b8 02 00 00 00       	mov    eax,0x2
c001dc5e:	83 c4 1c             	add    esp,0x1c
c001dc61:	5b                   	pop    ebx
c001dc62:	5e                   	pop    esi
c001dc63:	5f                   	pop    edi
c001dc64:	5d                   	pop    ebp
c001dc65:	c3                   	ret    

c001dc66 <SATA::close(int, int, void*)>:
c001dc66:	83 ec 0c             	sub    esp,0xc
c001dc69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc73:	85 c0                	test   eax,eax
c001dc75:	74 0c                	je     c001dc83 <SATA::close(int, int, void*)+0x1d>
c001dc77:	83 ec 0c             	sub    esp,0xc
c001dc7a:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc7c:	50                   	push   eax
c001dc7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc80:	83 c4 10             	add    esp,0x10
c001dc83:	31 c0                	xor    eax,eax
c001dc85:	83 c4 0c             	add    esp,0xc
c001dc88:	c3                   	ret    
c001dc89:	90                   	nop

c001dc8a <SATA::powerSaving(PowerSavingLevel)>:
c001dc8a:	c3                   	ret    
c001dc8b:	90                   	nop

c001dc8c <SATA::open(int, int, void*)>:
c001dc8c:	56                   	push   esi
c001dc8d:	53                   	push   ebx
c001dc8e:	50                   	push   eax
c001dc8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc97:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dca1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dca7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dcb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcb5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dcbf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dcc5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dccc:	e8 4e a1 fe ff       	call   c0007e1f <Phys::allocatePage()>
c001dcd1:	89 c6                	mov    esi,eax
c001dcd3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dcd9:	81 c6 00 10 00 00    	add    esi,0x1000
c001dcdf:	e8 3b a1 fe ff       	call   c0007e1f <Phys::allocatePage()>
c001dce4:	39 c6                	cmp    esi,eax
c001dce6:	74 10                	je     c001dcf8 <SATA::open(int, int, void*)+0x6c>
c001dce8:	83 ec 0c             	sub    esp,0xc
c001dceb:	68 5c 35 02 c0       	push   0xc002355c
c001dcf0:	e8 02 3a ff ff       	call   c00116f7 <KePanic(char const*)>
c001dcf5:	83 c4 10             	add    esp,0x10
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	6a 02                	push   0x2
c001dcfd:	e8 6b b9 fe ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c001dd02:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dd08:	6a 03                	push   0x3
c001dd0a:	50                   	push   eax
c001dd0b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dd11:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dd17:	e8 64 c0 fe ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dd1c:	83 c4 14             	add    esp,0x14
c001dd1f:	53                   	push   ebx
c001dd20:	e8 35 f1 fe ff       	call   c000ce5a <PhysicalDisk::startCache()>
c001dd25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd28:	e8 71 03 ff ff       	call   c000e09e <createPartitionsForDisk(PhysicalDisk*)>
c001dd2d:	83 c4 14             	add    esp,0x14
c001dd30:	31 c0                	xor    eax,eax
c001dd32:	5b                   	pop    ebx
c001dd33:	5e                   	pop    esi
c001dd34:	c3                   	ret    
c001dd35:	90                   	nop

c001dd36 <SATA::SATA()>:
c001dd36:	83 ec 0c             	sub    esp,0xc
c001dd39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3d:	83 ec 04             	sub    esp,0x4
c001dd40:	68 00 02 00 00       	push   0x200
c001dd45:	68 70 35 02 c0       	push   0xc0023570
c001dd4a:	50                   	push   eax
c001dd4b:	e8 a2 f0 fe ff       	call   c000cdf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd50:	83 c4 10             	add    esp,0x10
c001dd53:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c001dd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd5c:	89 10                	mov    DWORD PTR [eax],edx
c001dd5e:	90                   	nop
c001dd5f:	83 c4 0c             	add    esp,0xc
c001dd62:	c3                   	ret    
c001dd63:	90                   	nop

c001dd64 <SATA::access(unsigned long long, int, void*, bool)>:
c001dd64:	55                   	push   ebp
c001dd65:	57                   	push   edi
c001dd66:	56                   	push   esi
c001dd67:	53                   	push   ebx
c001dd68:	83 ec 2c             	sub    esp,0x2c
c001dd6b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd6f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd77:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dd7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd7f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd88:	7e 10                	jle    c001dd9a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dd8a:	83 ec 0c             	sub    esp,0xc
c001dd8d:	68 80 35 02 c0       	push   0xc0023580
c001dd92:	e8 60 39 ff ff       	call   c00116f7 <KePanic(char const*)>
c001dd97:	83 c4 10             	add    esp,0x10
c001dd9a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dda0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dda6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddb0:	89 d0                	mov    eax,edx
c001ddb2:	c1 e0 07             	shl    eax,0x7
c001ddb5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ddb9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ddc3:	51                   	push   ecx
c001ddc4:	8d 42 02             	lea    eax,[edx+0x2]
c001ddc7:	51                   	push   ecx
c001ddc8:	c1 e0 07             	shl    eax,0x7
c001ddcb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddcf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ddd3:	50                   	push   eax
c001ddd4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ddda:	e8 91 ec ff ff       	call   c001ca70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dddf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dde3:	83 c4 10             	add    esp,0x10
c001dde6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ddeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddef:	0f 84 57 01 00 00    	je     c001df4c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ddf5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddf9:	c1 e0 09             	shl    eax,0x9
c001ddfc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de05:	74 0e                	je     c001de15 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001de07:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001de0d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001de11:	89 c1                	mov    ecx,eax
c001de13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de15:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de1f:	8d 42 02             	lea    eax,[edx+0x2]
c001de22:	c1 e0 07             	shl    eax,0x7
c001de25:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001de29:	8b 00                	mov    eax,DWORD PTR [eax]
c001de2b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de31:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de3b:	c1 e1 05             	shl    ecx,0x5
c001de3e:	01 c8                	add    eax,ecx
c001de40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de44:	83 e1 01             	and    ecx,0x1
c001de47:	89 ce                	mov    esi,ecx
c001de49:	8a 08                	mov    cl,BYTE PTR [eax]
c001de4b:	c1 e6 06             	shl    esi,0x6
c001de4e:	83 e1 bf             	and    ecx,0xffffffbf
c001de51:	09 f1                	or     ecx,esi
c001de53:	88 08                	mov    BYTE PTR [eax],cl
c001de55:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de57:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001de5d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de63:	89 08                	mov    DWORD PTR [eax],ecx
c001de65:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de6b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de71:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de77:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de7a:	50                   	push   eax
c001de7b:	68 90 00 00 00       	push   0x90
c001de80:	6a 00                	push   0x0
c001de82:	56                   	push   esi
c001de83:	e8 68 26 fe ff       	call   c00004f0 <memset>
c001de88:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de8e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de98:	83 c4 10             	add    esp,0x10
c001de9b:	48                   	dec    eax
c001de9c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dea1:	89 c1                	mov    ecx,eax
c001dea3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dea9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001deae:	09 c8                	or     eax,ecx
c001deb0:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001deb6:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001debc:	83 c8 80             	or     eax,0xffffff80
c001debf:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dec5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dec8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001decc:	25 00 7f 00 00       	and    eax,0x7f00
c001ded1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ded6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dedb:	66 89 06             	mov    WORD PTR [esi],ax
c001dede:	b0 35                	mov    al,0x35
c001dee0:	75 02                	jne    c001dee4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001dee2:	b0 25                	mov    al,0x25
c001dee4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dee7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001deeb:	89 e8                	mov    eax,ebp
c001deed:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001def1:	c1 e8 10             	shr    eax,0x10
c001def4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001def7:	89 e8                	mov    eax,ebp
c001def9:	c1 e8 18             	shr    eax,0x18
c001defc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001deff:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001df03:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001df06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df0a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001df0d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df11:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001df15:	89 d6                	mov    esi,edx
c001df17:	31 c0                	xor    eax,eax
c001df19:	c1 e6 07             	shl    esi,0x7
c001df1c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001df20:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001df26:	80 e1 88             	and    cl,0x88
c001df29:	74 0a                	je     c001df35 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001df2b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df30:	74 0a                	je     c001df3c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001df32:	40                   	inc    eax
c001df33:	eb eb                	jmp    c001df20 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001df35:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df3a:	75 17                	jne    c001df53 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	68 b9 35 02 c0       	push   0xc00235b9
c001df44:	e8 5c ca fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001df49:	83 c4 10             	add    esp,0x10
c001df4c:	b8 01 00 00 00       	mov    eax,0x1
c001df51:	eb 5d                	jmp    c001dfb0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df53:	b8 01 00 00 00       	mov    eax,0x1
c001df58:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001df5c:	c1 e2 07             	shl    edx,0x7
c001df5f:	d3 e0                	shl    eax,cl
c001df61:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001df65:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df6b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df71:	85 c8                	test   eax,ecx
c001df73:	74 16                	je     c001df8b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001df75:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df7b:	0f ba e1 1e          	bt     ecx,0x1e
c001df7f:	73 ea                	jae    c001df6b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001df81:	83 ec 0c             	sub    esp,0xc
c001df84:	68 c7 35 02 c0       	push   0xc00235c7
c001df89:	eb b9                	jmp    c001df44 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df8b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df91:	0f ba e0 1e          	bt     eax,0x1e
c001df95:	72 b5                	jb     c001df4c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df97:	31 c0                	xor    eax,eax
c001df99:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001df9e:	75 10                	jne    c001dfb0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dfa0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dfa6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dfaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dfae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dfb0:	83 c4 2c             	add    esp,0x2c
c001dfb3:	5b                   	pop    ebx
c001dfb4:	5e                   	pop    esi
c001dfb5:	5f                   	pop    edi
c001dfb6:	5d                   	pop    ebp
c001dfb7:	c3                   	ret    

c001dfb8 <SATA::read(unsigned long long, int, void*)>:
c001dfb8:	55                   	push   ebp
c001dfb9:	57                   	push   edi
c001dfba:	56                   	push   esi
c001dfbb:	be 04 00 00 00       	mov    esi,0x4
c001dfc0:	53                   	push   ebx
c001dfc1:	83 ec 0c             	sub    esp,0xc
c001dfc4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dfc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dfcc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dfcf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfd3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dfd7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dfdd:	0f 87 1a 02 00 00    	ja     c001e1fd <SATA::read(unsigned long long, int, void*)+0x245>
c001dfe3:	be 06 00 00 00       	mov    esi,0x6
c001dfe8:	85 c9                	test   ecx,ecx
c001dfea:	0f 84 0d 02 00 00    	je     c001e1fd <SATA::read(unsigned long long, int, void*)+0x245>
c001dff0:	56                   	push   esi
c001dff1:	56                   	push   esi
c001dff2:	6a 00                	push   0x0
c001dff4:	51                   	push   ecx
c001dff5:	53                   	push   ebx
c001dff6:	52                   	push   edx
c001dff7:	50                   	push   eax
c001dff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dffc:	e8 63 fd ff ff       	call   c001dd64 <SATA::access(unsigned long long, int, void*, bool)>
c001e001:	83 c4 20             	add    esp,0x20
c001e004:	89 c6                	mov    esi,eax
c001e006:	85 c0                	test   eax,eax
c001e008:	0f 85 ea 01 00 00    	jne    c001e1f8 <SATA::read(unsigned long long, int, void*)+0x240>
c001e00e:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001e014:	bb 0a 00 00 00       	mov    ebx,0xa
c001e019:	50                   	push   eax
c001e01a:	50                   	push   eax
c001e01b:	6a 0f                	push   0xf
c001e01d:	6a 00                	push   0x0
c001e01f:	e8 75 f2 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e024:	5a                   	pop    edx
c001e025:	0f b6 c0             	movzx  eax,al
c001e028:	59                   	pop    ecx
c001e029:	b9 10 27 00 00       	mov    ecx,0x2710
c001e02e:	50                   	push   eax
c001e02f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e034:	99                   	cdq    
c001e035:	f7 f9                	idiv   ecx
c001e037:	99                   	cdq    
c001e038:	f7 fb                	idiv   ebx
c001e03a:	8d 42 30             	lea    eax,[edx+0x30]
c001e03d:	0f b6 c0             	movzx  eax,al
c001e040:	50                   	push   eax
c001e041:	e8 42 f2 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e046:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e04c:	5f                   	pop    edi
c001e04d:	5d                   	pop    ebp
c001e04e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001e053:	6a 0f                	push   0xf
c001e055:	6a 00                	push   0x0
c001e057:	e8 3d f2 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e05c:	5a                   	pop    edx
c001e05d:	0f b6 c0             	movzx  eax,al
c001e060:	59                   	pop    ecx
c001e061:	50                   	push   eax
c001e062:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e067:	99                   	cdq    
c001e068:	f7 fd                	idiv   ebp
c001e06a:	99                   	cdq    
c001e06b:	f7 fb                	idiv   ebx
c001e06d:	8d 42 30             	lea    eax,[edx+0x30]
c001e070:	0f b6 c0             	movzx  eax,al
c001e073:	50                   	push   eax
c001e074:	e8 0f f2 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e079:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e07f:	5f                   	pop    edi
c001e080:	bf 64 00 00 00       	mov    edi,0x64
c001e085:	58                   	pop    eax
c001e086:	6a 0f                	push   0xf
c001e088:	6a 00                	push   0x0
c001e08a:	e8 0a f2 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e08f:	5a                   	pop    edx
c001e090:	0f b6 c0             	movzx  eax,al
c001e093:	59                   	pop    ecx
c001e094:	50                   	push   eax
c001e095:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e09a:	99                   	cdq    
c001e09b:	f7 ff                	idiv   edi
c001e09d:	99                   	cdq    
c001e09e:	f7 fb                	idiv   ebx
c001e0a0:	8d 42 30             	lea    eax,[edx+0x30]
c001e0a3:	0f b6 c0             	movzx  eax,al
c001e0a6:	50                   	push   eax
c001e0a7:	e8 dc f1 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e0ac:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e0b2:	58                   	pop    eax
c001e0b3:	5a                   	pop    edx
c001e0b4:	6a 0f                	push   0xf
c001e0b6:	6a 00                	push   0x0
c001e0b8:	e8 dc f1 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e0bd:	59                   	pop    ecx
c001e0be:	0f b6 c0             	movzx  eax,al
c001e0c1:	5a                   	pop    edx
c001e0c2:	50                   	push   eax
c001e0c3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0c8:	99                   	cdq    
c001e0c9:	f7 fb                	idiv   ebx
c001e0cb:	99                   	cdq    
c001e0cc:	f7 fb                	idiv   ebx
c001e0ce:	8d 42 30             	lea    eax,[edx+0x30]
c001e0d1:	0f b6 c0             	movzx  eax,al
c001e0d4:	50                   	push   eax
c001e0d5:	e8 ae f1 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e0da:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e0e0:	59                   	pop    ecx
c001e0e1:	58                   	pop    eax
c001e0e2:	6a 0f                	push   0xf
c001e0e4:	6a 00                	push   0x0
c001e0e6:	e8 ae f1 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e0eb:	5a                   	pop    edx
c001e0ec:	0f b6 c0             	movzx  eax,al
c001e0ef:	59                   	pop    ecx
c001e0f0:	50                   	push   eax
c001e0f1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0f6:	99                   	cdq    
c001e0f7:	f7 fb                	idiv   ebx
c001e0f9:	8d 42 30             	lea    eax,[edx+0x30]
c001e0fc:	0f b6 c0             	movzx  eax,al
c001e0ff:	50                   	push   eax
c001e100:	e8 83 f1 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e105:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e10b:	58                   	pop    eax
c001e10c:	5a                   	pop    edx
c001e10d:	6a 0f                	push   0xf
c001e10f:	6a 00                	push   0x0
c001e111:	e8 83 f1 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e116:	59                   	pop    ecx
c001e117:	0f b6 c0             	movzx  eax,al
c001e11a:	5a                   	pop    edx
c001e11b:	b9 10 27 00 00       	mov    ecx,0x2710
c001e120:	50                   	push   eax
c001e121:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e126:	99                   	cdq    
c001e127:	f7 f9                	idiv   ecx
c001e129:	99                   	cdq    
c001e12a:	f7 fb                	idiv   ebx
c001e12c:	8d 42 30             	lea    eax,[edx+0x30]
c001e12f:	0f b6 c0             	movzx  eax,al
c001e132:	50                   	push   eax
c001e133:	e8 50 f1 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e138:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e13e:	59                   	pop    ecx
c001e13f:	58                   	pop    eax
c001e140:	6a 0f                	push   0xf
c001e142:	6a 00                	push   0x0
c001e144:	e8 50 f1 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e149:	5a                   	pop    edx
c001e14a:	0f b6 c0             	movzx  eax,al
c001e14d:	59                   	pop    ecx
c001e14e:	50                   	push   eax
c001e14f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e154:	99                   	cdq    
c001e155:	f7 fd                	idiv   ebp
c001e157:	99                   	cdq    
c001e158:	f7 fb                	idiv   ebx
c001e15a:	8d 42 30             	lea    eax,[edx+0x30]
c001e15d:	0f b6 c0             	movzx  eax,al
c001e160:	50                   	push   eax
c001e161:	e8 22 f1 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e166:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e16c:	5d                   	pop    ebp
c001e16d:	58                   	pop    eax
c001e16e:	6a 0f                	push   0xf
c001e170:	6a 00                	push   0x0
c001e172:	e8 22 f1 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e177:	5a                   	pop    edx
c001e178:	0f b6 c0             	movzx  eax,al
c001e17b:	59                   	pop    ecx
c001e17c:	50                   	push   eax
c001e17d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e182:	99                   	cdq    
c001e183:	f7 ff                	idiv   edi
c001e185:	99                   	cdq    
c001e186:	f7 fb                	idiv   ebx
c001e188:	8d 42 30             	lea    eax,[edx+0x30]
c001e18b:	0f b6 c0             	movzx  eax,al
c001e18e:	50                   	push   eax
c001e18f:	e8 f4 f0 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e194:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e19a:	5f                   	pop    edi
c001e19b:	5d                   	pop    ebp
c001e19c:	6a 0f                	push   0xf
c001e19e:	6a 00                	push   0x0
c001e1a0:	e8 f4 f0 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e1a5:	5a                   	pop    edx
c001e1a6:	0f b6 c0             	movzx  eax,al
c001e1a9:	59                   	pop    ecx
c001e1aa:	50                   	push   eax
c001e1ab:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1b0:	99                   	cdq    
c001e1b1:	f7 fb                	idiv   ebx
c001e1b3:	99                   	cdq    
c001e1b4:	f7 fb                	idiv   ebx
c001e1b6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1b9:	0f b6 c0             	movzx  eax,al
c001e1bc:	50                   	push   eax
c001e1bd:	e8 c6 f0 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e1c2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e1c8:	5f                   	pop    edi
c001e1c9:	5d                   	pop    ebp
c001e1ca:	6a 0f                	push   0xf
c001e1cc:	6a 00                	push   0x0
c001e1ce:	e8 c6 f0 ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e1d3:	5a                   	pop    edx
c001e1d4:	0f b6 c0             	movzx  eax,al
c001e1d7:	59                   	pop    ecx
c001e1d8:	50                   	push   eax
c001e1d9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1de:	99                   	cdq    
c001e1df:	f7 fb                	idiv   ebx
c001e1e1:	83 c2 30             	add    edx,0x30
c001e1e4:	0f b6 d2             	movzx  edx,dl
c001e1e7:	52                   	push   edx
c001e1e8:	e8 9b f0 ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e1f6:	eb 05                	jmp    c001e1fd <SATA::read(unsigned long long, int, void*)+0x245>
c001e1f8:	be 01 00 00 00       	mov    esi,0x1
c001e1fd:	83 c4 0c             	add    esp,0xc
c001e200:	89 f0                	mov    eax,esi
c001e202:	5b                   	pop    ebx
c001e203:	5e                   	pop    esi
c001e204:	5f                   	pop    edi
c001e205:	5d                   	pop    ebp
c001e206:	c3                   	ret    
c001e207:	90                   	nop

c001e208 <SATA::write(unsigned long long, int, void*)>:
c001e208:	55                   	push   ebp
c001e209:	b8 04 00 00 00       	mov    eax,0x4
c001e20e:	57                   	push   edi
c001e20f:	56                   	push   esi
c001e210:	53                   	push   ebx
c001e211:	83 ec 1c             	sub    esp,0x1c
c001e214:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e218:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e21c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e21f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e223:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e227:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e22d:	0f 87 32 02 00 00    	ja     c001e465 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e233:	b8 06 00 00 00       	mov    eax,0x6
c001e238:	85 ff                	test   edi,edi
c001e23a:	0f 84 25 02 00 00    	je     c001e465 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e240:	89 ee                	mov    esi,ebp
c001e242:	c1 e6 09             	shl    esi,0x9
c001e245:	01 fe                	add    esi,edi
c001e247:	89 c8                	mov    eax,ecx
c001e249:	89 da                	mov    edx,ebx
c001e24b:	83 c0 01             	add    eax,0x1
c001e24e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e252:	83 d2 00             	adc    edx,0x0
c001e255:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e259:	50                   	push   eax
c001e25a:	50                   	push   eax
c001e25b:	6a 01                	push   0x1
c001e25d:	57                   	push   edi
c001e25e:	81 c7 00 02 00 00    	add    edi,0x200
c001e264:	6a 01                	push   0x1
c001e266:	53                   	push   ebx
c001e267:	51                   	push   ecx
c001e268:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e26c:	e8 f3 fa ff ff       	call   c001dd64 <SATA::access(unsigned long long, int, void*, bool)>
c001e271:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e275:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e279:	83 c4 20             	add    esp,0x20
c001e27c:	39 f7                	cmp    edi,esi
c001e27e:	75 c7                	jne    c001e247 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e280:	bb 0a 00 00 00       	mov    ebx,0xa
c001e285:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e28b:	bd 10 27 00 00       	mov    ebp,0x2710
c001e290:	50                   	push   eax
c001e291:	50                   	push   eax
c001e292:	6a 0f                	push   0xf
c001e294:	6a 00                	push   0x0
c001e296:	e8 fe ef ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e29b:	5a                   	pop    edx
c001e29c:	0f b6 c0             	movzx  eax,al
c001e29f:	59                   	pop    ecx
c001e2a0:	50                   	push   eax
c001e2a1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2a6:	99                   	cdq    
c001e2a7:	f7 fd                	idiv   ebp
c001e2a9:	99                   	cdq    
c001e2aa:	f7 fb                	idiv   ebx
c001e2ac:	8d 42 30             	lea    eax,[edx+0x30]
c001e2af:	0f b6 c0             	movzx  eax,al
c001e2b2:	50                   	push   eax
c001e2b3:	e8 d0 ef ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e2b8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e2be:	5e                   	pop    esi
c001e2bf:	5f                   	pop    edi
c001e2c0:	bf e8 03 00 00       	mov    edi,0x3e8
c001e2c5:	6a 0f                	push   0xf
c001e2c7:	6a 00                	push   0x0
c001e2c9:	e8 cb ef ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e2ce:	5a                   	pop    edx
c001e2cf:	0f b6 c0             	movzx  eax,al
c001e2d2:	59                   	pop    ecx
c001e2d3:	50                   	push   eax
c001e2d4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2d9:	99                   	cdq    
c001e2da:	f7 ff                	idiv   edi
c001e2dc:	99                   	cdq    
c001e2dd:	f7 fb                	idiv   ebx
c001e2df:	8d 42 30             	lea    eax,[edx+0x30]
c001e2e2:	0f b6 c0             	movzx  eax,al
c001e2e5:	50                   	push   eax
c001e2e6:	e8 9d ef ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e2eb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e2f1:	5e                   	pop    esi
c001e2f2:	be 64 00 00 00       	mov    esi,0x64
c001e2f7:	58                   	pop    eax
c001e2f8:	6a 0f                	push   0xf
c001e2fa:	6a 00                	push   0x0
c001e2fc:	e8 98 ef ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e301:	5a                   	pop    edx
c001e302:	0f b6 c0             	movzx  eax,al
c001e305:	59                   	pop    ecx
c001e306:	50                   	push   eax
c001e307:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e30c:	99                   	cdq    
c001e30d:	f7 fe                	idiv   esi
c001e30f:	99                   	cdq    
c001e310:	f7 fb                	idiv   ebx
c001e312:	8d 42 30             	lea    eax,[edx+0x30]
c001e315:	0f b6 c0             	movzx  eax,al
c001e318:	50                   	push   eax
c001e319:	e8 6a ef ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e31e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e324:	58                   	pop    eax
c001e325:	5a                   	pop    edx
c001e326:	6a 0f                	push   0xf
c001e328:	6a 00                	push   0x0
c001e32a:	e8 6a ef ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e32f:	59                   	pop    ecx
c001e330:	0f b6 c0             	movzx  eax,al
c001e333:	5a                   	pop    edx
c001e334:	50                   	push   eax
c001e335:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e33a:	99                   	cdq    
c001e33b:	f7 fb                	idiv   ebx
c001e33d:	99                   	cdq    
c001e33e:	f7 fb                	idiv   ebx
c001e340:	8d 42 30             	lea    eax,[edx+0x30]
c001e343:	0f b6 c0             	movzx  eax,al
c001e346:	50                   	push   eax
c001e347:	e8 3c ef ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e34c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e352:	59                   	pop    ecx
c001e353:	58                   	pop    eax
c001e354:	6a 0f                	push   0xf
c001e356:	6a 00                	push   0x0
c001e358:	e8 3c ef ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e35d:	5a                   	pop    edx
c001e35e:	0f b6 c0             	movzx  eax,al
c001e361:	59                   	pop    ecx
c001e362:	50                   	push   eax
c001e363:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e368:	99                   	cdq    
c001e369:	f7 fb                	idiv   ebx
c001e36b:	83 c2 30             	add    edx,0x30
c001e36e:	0f b6 d2             	movzx  edx,dl
c001e371:	52                   	push   edx
c001e372:	e8 11 ef ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e377:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e37d:	58                   	pop    eax
c001e37e:	5a                   	pop    edx
c001e37f:	6a 0f                	push   0xf
c001e381:	6a 00                	push   0x0
c001e383:	e8 11 ef ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e388:	59                   	pop    ecx
c001e389:	0f b6 c0             	movzx  eax,al
c001e38c:	5a                   	pop    edx
c001e38d:	50                   	push   eax
c001e38e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e393:	99                   	cdq    
c001e394:	f7 fd                	idiv   ebp
c001e396:	99                   	cdq    
c001e397:	f7 fb                	idiv   ebx
c001e399:	8d 42 30             	lea    eax,[edx+0x30]
c001e39c:	0f b6 c0             	movzx  eax,al
c001e39f:	50                   	push   eax
c001e3a0:	e8 e3 ee ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e3a5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e3ab:	59                   	pop    ecx
c001e3ac:	5d                   	pop    ebp
c001e3ad:	6a 0f                	push   0xf
c001e3af:	6a 00                	push   0x0
c001e3b1:	e8 e3 ee ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e3b6:	5a                   	pop    edx
c001e3b7:	0f b6 c0             	movzx  eax,al
c001e3ba:	59                   	pop    ecx
c001e3bb:	50                   	push   eax
c001e3bc:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3c1:	99                   	cdq    
c001e3c2:	f7 ff                	idiv   edi
c001e3c4:	99                   	cdq    
c001e3c5:	f7 fb                	idiv   ebx
c001e3c7:	8d 42 30             	lea    eax,[edx+0x30]
c001e3ca:	0f b6 c0             	movzx  eax,al
c001e3cd:	50                   	push   eax
c001e3ce:	e8 b5 ee ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e3d3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e3d9:	5f                   	pop    edi
c001e3da:	5d                   	pop    ebp
c001e3db:	6a 0f                	push   0xf
c001e3dd:	6a 00                	push   0x0
c001e3df:	e8 b5 ee ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e3e4:	5a                   	pop    edx
c001e3e5:	0f b6 c0             	movzx  eax,al
c001e3e8:	59                   	pop    ecx
c001e3e9:	50                   	push   eax
c001e3ea:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3ef:	99                   	cdq    
c001e3f0:	f7 fe                	idiv   esi
c001e3f2:	99                   	cdq    
c001e3f3:	f7 fb                	idiv   ebx
c001e3f5:	8d 42 30             	lea    eax,[edx+0x30]
c001e3f8:	0f b6 c0             	movzx  eax,al
c001e3fb:	50                   	push   eax
c001e3fc:	e8 87 ee ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e401:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e407:	5e                   	pop    esi
c001e408:	5f                   	pop    edi
c001e409:	6a 0f                	push   0xf
c001e40b:	6a 00                	push   0x0
c001e40d:	e8 87 ee ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e412:	5d                   	pop    ebp
c001e413:	0f b6 c0             	movzx  eax,al
c001e416:	5a                   	pop    edx
c001e417:	50                   	push   eax
c001e418:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e41d:	99                   	cdq    
c001e41e:	f7 fb                	idiv   ebx
c001e420:	99                   	cdq    
c001e421:	f7 fb                	idiv   ebx
c001e423:	8d 42 30             	lea    eax,[edx+0x30]
c001e426:	0f b6 c0             	movzx  eax,al
c001e429:	50                   	push   eax
c001e42a:	e8 59 ee ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e42f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e435:	59                   	pop    ecx
c001e436:	5e                   	pop    esi
c001e437:	6a 0f                	push   0xf
c001e439:	6a 00                	push   0x0
c001e43b:	e8 59 ee ff ff       	call   c001d299 <combineColours(unsigned char, unsigned char)>
c001e440:	5f                   	pop    edi
c001e441:	0f b6 c0             	movzx  eax,al
c001e444:	5d                   	pop    ebp
c001e445:	50                   	push   eax
c001e446:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e44b:	99                   	cdq    
c001e44c:	f7 fb                	idiv   ebx
c001e44e:	83 c2 30             	add    edx,0x30
c001e451:	0f b6 d2             	movzx  edx,dl
c001e454:	52                   	push   edx
c001e455:	e8 2e ee ff ff       	call   c001d288 <combineCharAndColour(char, unsigned char)>
c001e45a:	83 c4 10             	add    esp,0x10
c001e45d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e463:	31 c0                	xor    eax,eax
c001e465:	83 c4 1c             	add    esp,0x1c
c001e468:	5b                   	pop    ebx
c001e469:	5e                   	pop    esi
c001e46a:	5f                   	pop    edi
c001e46b:	5d                   	pop    ebp
c001e46c:	c3                   	ret    
c001e46d:	90                   	nop

c001e46e <SATAPI::write(unsigned long long, int, void*)>:
c001e46e:	b8 03 00 00 00       	mov    eax,0x3
c001e473:	c3                   	ret    

c001e474 <SATAPI::close(int, int, void*)>:
c001e474:	83 ec 0c             	sub    esp,0xc
c001e477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e481:	85 c0                	test   eax,eax
c001e483:	74 0c                	je     c001e491 <SATAPI::close(int, int, void*)+0x1d>
c001e485:	83 ec 0c             	sub    esp,0xc
c001e488:	8b 10                	mov    edx,DWORD PTR [eax]
c001e48a:	50                   	push   eax
c001e48b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e48e:	83 c4 10             	add    esp,0x10
c001e491:	31 c0                	xor    eax,eax
c001e493:	83 c4 0c             	add    esp,0xc
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <SATAPI::SATAPI()>:
c001e498:	83 ec 0c             	sub    esp,0xc
c001e49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e49f:	83 ec 04             	sub    esp,0x4
c001e4a2:	68 00 08 00 00       	push   0x800
c001e4a7:	68 10 36 02 c0       	push   0xc0023610
c001e4ac:	50                   	push   eax
c001e4ad:	e8 40 e9 fe ff       	call   c000cdf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e4b2:	83 c4 10             	add    esp,0x10
c001e4b5:	ba 04 37 02 c0       	mov    edx,0xc0023704
c001e4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4be:	89 10                	mov    DWORD PTR [eax],edx
c001e4c0:	90                   	nop
c001e4c1:	83 c4 0c             	add    esp,0xc
c001e4c4:	c3                   	ret    
c001e4c5:	90                   	nop

c001e4c6 <SATAPI::diskRemoved()>:
c001e4c6:	c3                   	ret    
c001e4c7:	90                   	nop

c001e4c8 <SATAPI::diskInserted()>:
c001e4c8:	83 ec 18             	sub    esp,0x18
c001e4cb:	68 1c 36 02 c0       	push   0xc002361c
c001e4d0:	e8 d0 c4 fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001e4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4d9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e4e0:	83 c4 1c             	add    esp,0x1c
c001e4e3:	c3                   	ret    

c001e4e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e4e4:	55                   	push   ebp
c001e4e5:	57                   	push   edi
c001e4e6:	56                   	push   esi
c001e4e7:	53                   	push   ebx
c001e4e8:	83 ec 34             	sub    esp,0x34
c001e4eb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e4ef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4f3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e4f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e4ff:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e505:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e50b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e50f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e515:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e519:	83 c0 02             	add    eax,0x2
c001e51c:	c1 e0 07             	shl    eax,0x7
c001e51f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e523:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e52b:	c1 e0 07             	shl    eax,0x7
c001e52e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e532:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e536:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e540:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e544:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e54a:	e8 21 e5 ff ff       	call   c001ca70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e54f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e553:	83 c4 10             	add    esp,0x10
c001e556:	b8 01 00 00 00       	mov    eax,0x1
c001e55b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e560:	0f 84 53 02 00 00    	je     c001e7b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e566:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e56c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e570:	8b 00                	mov    eax,DWORD PTR [eax]
c001e572:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e578:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e57e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e582:	c1 e1 05             	shl    ecx,0x5
c001e585:	01 c8                	add    eax,ecx
c001e587:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e589:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e58f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e595:	89 08                	mov    DWORD PTR [eax],ecx
c001e597:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e59d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e5a3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e5a9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e5ac:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e5af:	50                   	push   eax
c001e5b0:	68 90 00 00 00       	push   0x90
c001e5b5:	6a 00                	push   0x0
c001e5b7:	53                   	push   ebx
c001e5b8:	e8 33 1f fe ff       	call   c00004f0 <memset>
c001e5bd:	b9 0c 00 00 00       	mov    ecx,0xc
c001e5c2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e5c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5c8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e5ce:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e5d2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e5d8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e5dc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e5e0:	48                   	dec    eax
c001e5e1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e5e6:	89 c1                	mov    ecx,eax
c001e5e8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e5ee:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e5f3:	09 c8                	or     eax,ecx
c001e5f5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e5fb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e601:	83 c8 80             	or     eax,0xffffff80
c001e604:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e60a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e60d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e611:	25 00 7f 00 00       	and    eax,0x7f00
c001e616:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e61a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e61f:	66 89 03             	mov    WORD PTR [ebx],ax
c001e622:	89 d0                	mov    eax,edx
c001e624:	c1 ea 18             	shr    edx,0x18
c001e627:	c1 e8 10             	shr    eax,0x10
c001e62a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e62d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e630:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e634:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e637:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e63b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e63e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e642:	83 c4 10             	add    esp,0x10
c001e645:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e64d:	31 c0                	xor    eax,eax
c001e64f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e655:	80 e1 88             	and    cl,0x88
c001e658:	74 0a                	je     c001e664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e65a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e65f:	74 0a                	je     c001e66b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e661:	40                   	inc    eax
c001e662:	eb eb                	jmp    c001e64f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e664:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e669:	75 43                	jne    c001e6ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e66b:	83 ec 0c             	sub    esp,0xc
c001e66e:	68 34 36 02 c0       	push   0xc0023634
c001e673:	e8 2d c3 fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001e678:	58                   	pop    eax
c001e679:	5a                   	pop    edx
c001e67a:	68 49 36 02 c0       	push   0xc0023649
c001e67f:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e685:	e8 7c a4 fe ff       	call   c0008b06 <VgaText::puts(char const*)>
c001e68a:	59                   	pop    ecx
c001e68b:	5b                   	pop    ebx
c001e68c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e690:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e696:	e8 6f e4 ff ff       	call   c001cb0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e69b:	5e                   	pop    esi
c001e69c:	5f                   	pop    edi
c001e69d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e6a1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e6a7:	e8 3e e4 ff ff       	call   c001caea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e6ac:	eb 48                	jmp    c001e6f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e6ae:	be 01 00 00 00       	mov    esi,0x1
c001e6b3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e6b7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6bb:	d3 e6                	shl    esi,cl
c001e6bd:	c1 e7 07             	shl    edi,0x7
c001e6c0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e6c6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e6cb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e6cf:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e6d5:	85 c6                	test   esi,eax
c001e6d7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e6dd:	0f 84 a3 00 00 00    	je     c001e786 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e6e3:	0f ba e0 1e          	bt     eax,0x1e
c001e6e7:	73 1a                	jae    c001e703 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e6e9:	83 ec 0c             	sub    esp,0xc
c001e6ec:	68 5b 36 02 c0       	push   0xc002365b
c001e6f1:	e8 af c2 fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001e6f6:	83 c4 10             	add    esp,0x10
c001e6f9:	b8 01 00 00 00       	mov    eax,0x1
c001e6fe:	e9 b6 00 00 00       	jmp    c001e7b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e703:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e709:	83 f8 0d             	cmp    eax,0xd
c001e70c:	77 0a                	ja     c001e718 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e70e:	83 ec 0c             	sub    esp,0xc
c001e711:	68 c8 00 00 00       	push   0xc8
c001e716:	eb 28                	jmp    c001e740 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e718:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e71e:	83 f8 0d             	cmp    eax,0xd
c001e721:	77 0a                	ja     c001e72d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e723:	83 ec 0c             	sub    esp,0xc
c001e726:	68 58 02 00 00       	push   0x258
c001e72b:	eb 13                	jmp    c001e740 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e72d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e733:	83 f8 06             	cmp    eax,0x6
c001e736:	77 10                	ja     c001e748 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e738:	83 ec 0c             	sub    esp,0xc
c001e73b:	68 dc 05 00 00       	push   0x5dc
c001e740:	e8 c7 7d ff ff       	call   c001650c <milliTenthSleep(unsigned int)>
c001e745:	83 c4 10             	add    esp,0x10
c001e748:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e74c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e74f:	75 06                	jne    c001e757 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e751:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e755:	74 15                	je     c001e76c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e757:	83 fb 06             	cmp    ebx,0x6
c001e75a:	77 10                	ja     c001e76c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	68 c4 09 00 00       	push   0x9c4
c001e764:	e8 a3 7d ff ff       	call   c001650c <milliTenthSleep(unsigned int)>
c001e769:	83 c4 10             	add    esp,0x10
c001e76c:	43                   	inc    ebx
c001e76d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e773:	0f 85 56 ff ff ff    	jne    c001e6cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e779:	83 ec 0c             	sub    esp,0xc
c001e77c:	68 6e 36 02 c0       	push   0xc002366e
c001e781:	e9 6b ff ff ff       	jmp    c001e6f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e786:	0f ba e0 1e          	bt     eax,0x1e
c001e78a:	73 0d                	jae    c001e799 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	68 82 36 02 c0       	push   0xc0023682
c001e794:	e9 58 ff ff ff       	jmp    c001e6f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e799:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e79e:	74 17                	je     c001e7b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e7a0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e7a5:	74 10                	je     c001e7b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e7a7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e7ad:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e7b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e7b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e7b7:	31 c0                	xor    eax,eax
c001e7b9:	83 c4 2c             	add    esp,0x2c
c001e7bc:	5b                   	pop    ebx
c001e7bd:	5e                   	pop    esi
c001e7be:	5f                   	pop    edi
c001e7bf:	5d                   	pop    ebp
c001e7c0:	c3                   	ret    
c001e7c1:	90                   	nop

c001e7c2 <SATAPI::eject()>:
c001e7c2:	57                   	push   edi
c001e7c3:	b9 03 00 00 00       	mov    ecx,0x3
c001e7c8:	83 ec 18             	sub    esp,0x18
c001e7cb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e7cf:	fc                   	cld    
c001e7d0:	31 c0                	xor    eax,eax
c001e7d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7d4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e7d9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e7de:	50                   	push   eax
c001e7df:	6a 00                	push   0x0
c001e7e1:	6a 00                	push   0x0
c001e7e3:	6a 00                	push   0x0
c001e7e5:	6a 00                	push   0x0
c001e7e7:	6a 02                	push   0x2
c001e7e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e7ed:	50                   	push   eax
c001e7ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e7f2:	e8 ed fc ff ff       	call   c001e4e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e7f7:	31 c0                	xor    eax,eax
c001e7f9:	83 c4 38             	add    esp,0x38
c001e7fc:	5f                   	pop    edi
c001e7fd:	c3                   	ret    

c001e7fe <SATAPI::detectMedia()>:
c001e7fe:	53                   	push   ebx
c001e7ff:	83 ec 14             	sub    esp,0x14
c001e802:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e806:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e80c:	e8 5f ff fe ff       	call   c000e770 <VCache::writeWriteBuffer()>
c001e811:	59                   	pop    ecx
c001e812:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e818:	e8 43 ff fe ff       	call   c000e760 <VCache::invalidateReadBuffer()>
c001e81d:	c7 04 24 97 36 02 c0 	mov    DWORD PTR [esp],0xc0023697
c001e824:	e8 7c c1 fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001e829:	83 c4 10             	add    esp,0x10
c001e82c:	31 c0                	xor    eax,eax
c001e82e:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e835:	85 d2                	test   edx,edx
c001e837:	74 0f                	je     c001e848 <SATAPI::detectMedia()+0x4a>
c001e839:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e83f:	75 07                	jne    c001e848 <SATAPI::detectMedia()+0x4a>
c001e841:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e848:	40                   	inc    eax
c001e849:	83 f8 1a             	cmp    eax,0x1a
c001e84c:	75 e0                	jne    c001e82e <SATAPI::detectMedia()+0x30>
c001e84e:	83 c4 08             	add    esp,0x8
c001e851:	5b                   	pop    ebx
c001e852:	c3                   	ret    
c001e853:	90                   	nop

c001e854 <SATAPI::open(int, int, void*)>:
c001e854:	56                   	push   esi
c001e855:	53                   	push   ebx
c001e856:	51                   	push   ecx
c001e857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e85b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e85f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e869:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e86f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e87d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e887:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e88d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e894:	e8 86 95 fe ff       	call   c0007e1f <Phys::allocatePage()>
c001e899:	89 c6                	mov    esi,eax
c001e89b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e8a1:	81 c6 00 10 00 00    	add    esi,0x1000
c001e8a7:	e8 73 95 fe ff       	call   c0007e1f <Phys::allocatePage()>
c001e8ac:	39 c6                	cmp    esi,eax
c001e8ae:	74 10                	je     c001e8c0 <SATAPI::open(int, int, void*)+0x6c>
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	68 ac 36 02 c0       	push   0xc00236ac
c001e8b8:	e8 3a 2e ff ff       	call   c00116f7 <KePanic(char const*)>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	83 ec 0c             	sub    esp,0xc
c001e8c3:	6a 02                	push   0x2
c001e8c5:	e8 a3 ad fe ff       	call   c000966d <Virt::allocateKernelVirtualPages(int)>
c001e8ca:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e8d0:	6a 03                	push   0x3
c001e8d2:	50                   	push   eax
c001e8d3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e8d9:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e8df:	e8 9c b4 fe ff       	call   c0009d80 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e8e4:	83 c4 14             	add    esp,0x14
c001e8e7:	68 78 01 00 00       	push   0x178
c001e8ec:	e8 25 92 fe ff       	call   c0007b16 <malloc>
c001e8f1:	83 c4 0c             	add    esp,0xc
c001e8f4:	89 c6                	mov    esi,eax
c001e8f6:	6a 00                	push   0x0
c001e8f8:	68 ff ff ff 7f       	push   0x7fffffff
c001e8fd:	6a 00                	push   0x0
c001e8ff:	6a 00                	push   0x0
c001e901:	53                   	push   ebx
c001e902:	68 c2 36 02 c0       	push   0xc00236c2
c001e907:	50                   	push   eax
c001e908:	e8 bf f2 fe ff       	call   c000dbcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e90d:	83 c4 14             	add    esp,0x14
c001e910:	56                   	push   esi
c001e911:	e8 76 f3 fe ff       	call   c000dc8c <LogicalDisk::assignDriveLetter()>
c001e916:	5a                   	pop    edx
c001e917:	0f be c0             	movsx  eax,al
c001e91a:	59                   	pop    ecx
c001e91b:	50                   	push   eax
c001e91c:	68 14 35 02 c0       	push   0xc0023514
c001e921:	e8 7f c0 fe ff       	call   c000a9a5 <Dbg::kprintf(char const*, ...)>
c001e926:	58                   	pop    eax
c001e927:	5a                   	pop    edx
c001e928:	56                   	push   esi
c001e929:	53                   	push   ebx
c001e92a:	e8 f7 e0 fe ff       	call   c000ca26 <Device::addChild(Device*)>
c001e92f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e935:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e938:	e8 1d e5 fe ff       	call   c000ce5a <PhysicalDisk::startCache()>
c001e93d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e944:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e947:	e8 b2 fe ff ff       	call   c001e7fe <SATAPI::detectMedia()>
c001e94c:	83 c4 14             	add    esp,0x14
c001e94f:	31 c0                	xor    eax,eax
c001e951:	5b                   	pop    ebx
c001e952:	5e                   	pop    esi
c001e953:	c3                   	ret    

c001e954 <SATAPI::read(unsigned long long, int, void*)>:
c001e954:	57                   	push   edi
c001e955:	56                   	push   esi
c001e956:	53                   	push   ebx
c001e957:	83 ec 30             	sub    esp,0x30
c001e95a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e95e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e962:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e966:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e96a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e96e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e972:	83 fe 04             	cmp    esi,0x4
c001e975:	7e 10                	jle    c001e987 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e977:	83 ec 0c             	sub    esp,0xc
c001e97a:	68 d0 36 02 c0       	push   0xc00236d0
c001e97f:	e8 73 2d ff ff       	call   c00116f7 <KePanic(char const*)>
c001e984:	83 c4 10             	add    esp,0x10
c001e987:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e98d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e993:	51                   	push   ecx
c001e994:	50                   	push   eax
c001e995:	83 c0 02             	add    eax,0x2
c001e998:	c1 e0 07             	shl    eax,0x7
c001e99b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e9a1:	50                   	push   eax
c001e9a2:	52                   	push   edx
c001e9a3:	e8 8c e1 ff ff       	call   c001cb34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e9a8:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e9ac:	b9 03 00 00 00       	mov    ecx,0x3
c001e9b1:	fc                   	cld    
c001e9b2:	31 c0                	xor    eax,eax
c001e9b4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9b6:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e9bb:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e9c0:	83 c4 0c             	add    esp,0xc
c001e9c3:	6a 00                	push   0x0
c001e9c5:	6a 00                	push   0x0
c001e9c7:	6a 00                	push   0x0
c001e9c9:	6a 00                	push   0x0
c001e9cb:	6a 02                	push   0x2
c001e9cd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e9d1:	50                   	push   eax
c001e9d2:	53                   	push   ebx
c001e9d3:	e8 0c fb ff ff       	call   c001e4e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9d8:	83 c4 20             	add    esp,0x20
c001e9db:	85 c0                	test   eax,eax
c001e9dd:	75 44                	jne    c001ea23 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e9df:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e9e3:	b9 03 00 00 00       	mov    ecx,0x3
c001e9e8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ee:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e9f3:	0f c8                	bswap  eax
c001e9f5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e9f9:	89 f0                	mov    eax,esi
c001e9fb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e9ff:	50                   	push   eax
c001ea00:	56                   	push   esi
c001ea01:	c1 e6 0b             	shl    esi,0xb
c001ea04:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ea08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea10:	56                   	push   esi
c001ea11:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ea15:	50                   	push   eax
c001ea16:	53                   	push   ebx
c001ea17:	e8 c8 fa ff ff       	call   c001e4e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ea1c:	83 c4 20             	add    esp,0x20
c001ea1f:	85 c0                	test   eax,eax
c001ea21:	74 14                	je     c001ea37 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ea23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ea27:	83 ec 0c             	sub    esp,0xc
c001ea2a:	53                   	push   ebx
c001ea2b:	e8 ce fd ff ff       	call   c001e7fe <SATAPI::detectMedia()>
c001ea30:	83 c4 10             	add    esp,0x10
c001ea33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea37:	83 c4 30             	add    esp,0x30
c001ea3a:	5b                   	pop    ebx
c001ea3b:	5e                   	pop    esi
c001ea3c:	5f                   	pop    edi
c001ea3d:	c3                   	ret    

c001ea3e <IOAPIC::close(int, int, void*)>:
c001ea3e:	b8 00 00 00 00       	mov    eax,0x0
c001ea43:	c3                   	ret    

c001ea44 <apicGetBase()>:
c001ea44:	55                   	push   ebp
c001ea45:	89 e5                	mov    ebp,esp
c001ea47:	83 ec 18             	sub    esp,0x18
c001ea4a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea4f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea55:	83 e0 08             	and    eax,0x8
c001ea58:	0f b6 c0             	movzx  eax,al
c001ea5b:	85 c0                	test   eax,eax
c001ea5d:	75 07                	jne    c001ea66 <apicGetBase()+0x22>
c001ea5f:	b8 00 00 00 00       	mov    eax,0x0
c001ea64:	eb 21                	jmp    c001ea87 <apicGetBase()+0x43>
c001ea66:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea6b:	83 ec 08             	sub    esp,0x8
c001ea6e:	6a 1b                	push   0x1b
c001ea70:	50                   	push   eax
c001ea71:	e8 ac 86 fe ff       	call   c0007122 <Computer::rdmsr(unsigned int)>
c001ea76:	83 c4 10             	add    esp,0x10
c001ea79:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea7c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea82:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea87:	c9                   	leave  
c001ea88:	c3                   	ret    
c001ea89:	90                   	nop

c001ea8a <IOAPIC::IOAPIC()>:
c001ea8a:	83 ec 0c             	sub    esp,0xc
c001ea8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea91:	83 ec 08             	sub    esp,0x8
c001ea94:	68 34 37 02 c0       	push   0xc0023734
c001ea99:	50                   	push   eax
c001ea9a:	e8 1f e1 fe ff       	call   c000cbbe <Device::Device(char const*)>
c001ea9f:	83 c4 10             	add    esp,0x10
c001eaa2:	ba 44 37 02 c0       	mov    edx,0xc0023744
c001eaa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaab:	89 10                	mov    DWORD PTR [eax],edx
c001eaad:	90                   	nop
c001eaae:	83 c4 0c             	add    esp,0xc
c001eab1:	c3                   	ret    

c001eab2 <apicOpen()>:
c001eab2:	55                   	push   ebp
c001eab3:	89 e5                	mov    ebp,esp
c001eab5:	53                   	push   ebx
c001eab6:	83 ec 34             	sub    esp,0x34
c001eab9:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001eabe:	83 f0 01             	xor    eax,0x1
c001eac1:	0f b6 c0             	movzx  eax,al
c001eac4:	85 c0                	test   eax,eax
c001eac6:	0f 84 a3 00 00 00    	je     c001eb6f <apicOpen()+0xbd>
c001eacc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ead0:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ead5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ead9:	0f b6 c0             	movzx  eax,al
c001eadc:	39 c2                	cmp    edx,eax
c001eade:	0f 83 84 00 00 00    	jae    c001eb68 <apicOpen()+0xb6>
c001eae4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001eaeb:	83 ec 0c             	sub    esp,0xc
c001eaee:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001eaf1:	e8 20 90 fe ff       	call   c0007b16 <malloc>
c001eaf6:	83 c4 10             	add    esp,0x10
c001eaf9:	89 c3                	mov    ebx,eax
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	53                   	push   ebx
c001eaff:	e8 86 ff ff ff       	call   c001ea8a <IOAPIC::IOAPIC()>
c001eb04:	83 c4 10             	add    esp,0x10
c001eb07:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eb0a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eb0e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eb11:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eb18:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eb1d:	83 c0 01             	add    eax,0x1
c001eb20:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eb25:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eb2a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eb30:	83 ec 08             	sub    esp,0x8
c001eb33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb36:	50                   	push   eax
c001eb37:	e8 ea de fe ff       	call   c000ca26 <Device::addChild(Device*)>
c001eb3c:	83 c4 10             	add    esp,0x10
c001eb3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eb42:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb44:	83 c0 08             	add    eax,0x8
c001eb47:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb49:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eb4d:	6a 00                	push   0x0
c001eb4f:	6a 00                	push   0x0
c001eb51:	52                   	push   edx
c001eb52:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb55:	ff d0                	call   eax
c001eb57:	83 c4 10             	add    esp,0x10
c001eb5a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb5d:	83 c0 01             	add    eax,0x1
c001eb60:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb63:	e9 68 ff ff ff       	jmp    c001ead0 <apicOpen()+0x1e>
c001eb68:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb6f:	e8 d0 fe ff ff       	call   c001ea44 <apicGetBase()>
c001eb74:	05 f0 00 00 00       	add    eax,0xf0
c001eb79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb7c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb7f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb81:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb84:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb8b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb95:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb98:	89 10                	mov    DWORD PTR [eax],edx
c001eb9a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eba1:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eba6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eba9:	7d 7c                	jge    c001ec27 <apicOpen()+0x175>
c001ebab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebae:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebb5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ebb8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebbb:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebc2:	c1 e8 08             	shr    eax,0x8
c001ebc5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ebc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebcc:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebd3:	c1 e8 18             	shr    eax,0x18
c001ebd6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ebd9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ebdd:	3d ff 00 00 00       	cmp    eax,0xff
c001ebe2:	75 3a                	jne    c001ec1e <apicOpen()+0x16c>
c001ebe4:	e8 5b fe ff ff       	call   c001ea44 <apicGetBase()>
c001ebe9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ebed:	83 fa 01             	cmp    edx,0x1
c001ebf0:	75 07                	jne    c001ebf9 <apicOpen()+0x147>
c001ebf2:	ba 60 03 00 00       	mov    edx,0x360
c001ebf7:	eb 05                	jmp    c001ebfe <apicOpen()+0x14c>
c001ebf9:	ba 50 03 00 00       	mov    edx,0x350
c001ebfe:	01 d0                	add    eax,edx
c001ec00:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec03:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec06:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec08:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ec0b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ec12:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ec16:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec19:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec1c:	89 10                	mov    DWORD PTR [eax],edx
c001ec1e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ec22:	e9 7a ff ff ff       	jmp    c001eba1 <apicOpen()+0xef>
c001ec27:	90                   	nop
c001ec28:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ec2b:	c9                   	leave  
c001ec2c:	c3                   	ret    
c001ec2d:	90                   	nop

c001ec2e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ec2e:	55                   	push   ebp
c001ec2f:	89 e5                	mov    ebp,esp
c001ec31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ec3a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec3d:	72 1d                	jb     c001ec5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec42:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ec48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec4b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ec51:	01 d0                	add    eax,edx
c001ec53:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec56:	73 04                	jae    c001ec5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec58:	b0 01                	mov    al,0x1
c001ec5a:	eb 02                	jmp    c001ec5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ec5c:	b0 00                	mov    al,0x0
c001ec5e:	5d                   	pop    ebp
c001ec5f:	c3                   	ret    

c001ec60 <IOAPIC::read(int)>:
c001ec60:	55                   	push   ebp
c001ec61:	89 e5                	mov    ebp,esp
c001ec63:	83 ec 10             	sub    esp,0x10
c001ec66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec75:	0f b6 d0             	movzx  edx,al
c001ec78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec7b:	89 10                	mov    DWORD PTR [eax],edx
c001ec7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec80:	83 c0 10             	add    eax,0x10
c001ec83:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec85:	c9                   	leave  
c001ec86:	c3                   	ret    
c001ec87:	90                   	nop

c001ec88 <IOAPIC::open(int, int, void*)>:
c001ec88:	55                   	push   ebp
c001ec89:	89 e5                	mov    ebp,esp
c001ec8b:	57                   	push   edi
c001ec8c:	56                   	push   esi
c001ec8d:	53                   	push   ebx
c001ec8e:	83 ec 04             	sub    esp,0x4
c001ec91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eca6:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ecad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ecb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ecbf:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ecc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecc9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecd2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ecd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecdb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ece1:	0f b6 f0             	movzx  esi,al
c001ece4:	89 d0                	mov    eax,edx
c001ece6:	ba 00 00 00 00       	mov    edx,0x0
c001eceb:	89 c7                	mov    edi,eax
c001eced:	83 e7 ff             	and    edi,0xffffffff
c001ecf0:	89 f9                	mov    ecx,edi
c001ecf2:	0f b6 da             	movzx  ebx,dl
c001ecf5:	89 c8                	mov    eax,ecx
c001ecf7:	89 da                	mov    edx,ebx
c001ecf9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ecfc:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ecff:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ed03:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ed07:	83 e0 00             	and    eax,0x0
c001ed0a:	09 d0                	or     eax,edx
c001ed0c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ed10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed13:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ed19:	8d 50 01             	lea    edx,[eax+0x1]
c001ed1c:	88 d1                	mov    cl,dl
c001ed1e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ed21:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ed27:	0f b6 d0             	movzx  edx,al
c001ed2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed2d:	83 c2 08             	add    edx,0x8
c001ed30:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ed34:	0f b6 c9             	movzx  ecx,cl
c001ed37:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ed3d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ed41:	6a 01                	push   0x1
c001ed43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed46:	e8 15 ff ff ff       	call   c001ec60 <IOAPIC::read(int)>
c001ed4b:	83 c4 08             	add    esp,0x8
c001ed4e:	c1 f8 10             	sar    eax,0x10
c001ed51:	0f b6 c0             	movzx  eax,al
c001ed54:	8d 50 01             	lea    edx,[eax+0x1]
c001ed57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed5a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed60:	b8 00 00 00 00       	mov    eax,0x0
c001ed65:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed68:	5b                   	pop    ebx
c001ed69:	5e                   	pop    esi
c001ed6a:	5f                   	pop    edi
c001ed6b:	5d                   	pop    ebp
c001ed6c:	c3                   	ret    
c001ed6d:	90                   	nop

c001ed6e <IOAPIC::write(int, int)>:
c001ed6e:	55                   	push   ebp
c001ed6f:	89 e5                	mov    ebp,esp
c001ed71:	83 ec 10             	sub    esp,0x10
c001ed74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed77:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed7d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed83:	0f b6 d0             	movzx  edx,al
c001ed86:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed89:	89 10                	mov    DWORD PTR [eax],edx
c001ed8b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed8e:	8d 50 10             	lea    edx,[eax+0x10]
c001ed91:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed94:	89 02                	mov    DWORD PTR [edx],eax
c001ed96:	90                   	nop
c001ed97:	c9                   	leave  
c001ed98:	c3                   	ret    
c001ed99:	90                   	nop

c001ed9a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed9a:	55                   	push   ebp
c001ed9b:	89 e5                	mov    ebp,esp
c001ed9d:	53                   	push   ebx
c001ed9e:	83 ec 2c             	sub    esp,0x2c
c001eda1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eda4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001eda7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001edaa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001edad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001edb0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001edb3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001edb6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001edb9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001edbc:	88 d8                	mov    al,bl
c001edbe:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001edc1:	88 c8                	mov    al,cl
c001edc3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001edc6:	88 d0                	mov    al,dl
c001edc8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001edcb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001edcf:	83 c0 08             	add    eax,0x8
c001edd2:	01 c0                	add    eax,eax
c001edd4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001edd7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001eddb:	83 c0 08             	add    eax,0x8
c001edde:	01 c0                	add    eax,eax
c001ede0:	83 c0 01             	add    eax,0x1
c001ede3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ede6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ede9:	50                   	push   eax
c001edea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eded:	e8 6e fe ff ff       	call   c001ec60 <IOAPIC::read(int)>
c001edf2:	83 c4 08             	add    esp,0x8
c001edf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edf8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001edff:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee02:	c1 e0 18             	shl    eax,0x18
c001ee05:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ee08:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ee0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ee0e:	52                   	push   edx
c001ee0f:	50                   	push   eax
c001ee10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee13:	e8 56 ff ff ff       	call   c001ed6e <IOAPIC::write(int, int)>
c001ee18:	83 c4 0c             	add    esp,0xc
c001ee1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee1e:	50                   	push   eax
c001ee1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee22:	e8 39 fe ff ff       	call   c001ec60 <IOAPIC::read(int)>
c001ee27:	83 c4 08             	add    esp,0x8
c001ee2a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ee2d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ee34:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ee3b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ee42:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ee46:	85 c0                	test   eax,eax
c001ee48:	74 09                	je     c001ee53 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ee4a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ee51:	eb 07                	jmp    c001ee5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ee53:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ee5a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee5e:	85 c0                	test   eax,eax
c001ee60:	74 09                	je     c001ee6b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee62:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee69:	eb 07                	jmp    c001ee72 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee6b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee72:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee79:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee7d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee80:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee86:	52                   	push   edx
c001ee87:	50                   	push   eax
c001ee88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee8b:	e8 de fe ff ff       	call   c001ed6e <IOAPIC::write(int, int)>
c001ee90:	83 c4 0c             	add    esp,0xc
c001ee93:	90                   	nop
c001ee94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee97:	c9                   	leave  
c001ee98:	c3                   	ret    
c001ee99:	66 90                	xchg   ax,ax
c001ee9b:	90                   	nop

c001ee9c <APICTimer::close(int, int, void*)>:
c001ee9c:	b8 00 00 00 00       	mov    eax,0x0
c001eea1:	c3                   	ret    
c001eea2:	66 90                	xchg   ax,ax

c001eea4 <apicTimerHandler(regs*, void*)>:
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eeab:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eead:	b8 10 27 00 00       	mov    eax,0x2710
c001eeb2:	ba 00 00 00 00       	mov    edx,0x0
c001eeb7:	f7 f1                	div    ecx
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	50                   	push   eax
c001eebd:	e8 c6 f5 fe ff       	call   c000e488 <timerHandler(unsigned int)>
c001eec2:	83 c4 10             	add    esp,0x10
c001eec5:	90                   	nop
c001eec6:	83 c4 0c             	add    esp,0xc
c001eec9:	c3                   	ret    
c001eeca:	66 90                	xchg   ax,ax

c001eecc <APICTimer::open(int, int, void*)>:
c001eecc:	83 ec 0c             	sub    esp,0xc
c001eecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed5:	83 c0 24             	add    eax,0x24
c001eed8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeda:	83 ec 08             	sub    esp,0x8
c001eedd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eee5:	ff d0                	call   eax
c001eee7:	83 c4 10             	add    esp,0x10
c001eeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eef2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef00:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef0a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef10:	83 ec 0c             	sub    esp,0xc
c001ef13:	51                   	push   ecx
c001ef14:	6a 01                	push   0x1
c001ef16:	68 a4 ee 01 c0       	push   0xc001eea4
c001ef1b:	52                   	push   edx
c001ef1c:	50                   	push   eax
c001ef1d:	e8 b0 da fe ff       	call   c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef22:	83 c4 20             	add    esp,0x20
c001ef25:	89 c2                	mov    edx,eax
c001ef27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef31:	b8 00 00 00 00       	mov    eax,0x0
c001ef36:	83 c4 0c             	add    esp,0xc
c001ef39:	c3                   	ret    
c001ef3a:	66 90                	xchg   ax,ax

c001ef3c <APICTimer::write(int)>:
c001ef3c:	83 ec 0c             	sub    esp,0xc
c001ef3f:	83 ec 0c             	sub    esp,0xc
c001ef42:	68 68 37 02 c0       	push   0xc0023768
c001ef47:	e8 ab 27 ff ff       	call   c00116f7 <KePanic(char const*)>
c001ef4c:	83 c4 10             	add    esp,0x10
c001ef4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef5d:	90                   	nop
c001ef5e:	83 c4 0c             	add    esp,0xc
c001ef61:	c3                   	ret    
c001ef62:	66 90                	xchg   ax,ax

c001ef64 <APICTimer::APICTimer()>:
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6b:	83 ec 08             	sub    esp,0x8
c001ef6e:	68 78 37 02 c0       	push   0xc0023778
c001ef73:	50                   	push   eax
c001ef74:	e8 43 f4 fe ff       	call   c000e3bc <Timer::Timer(char const*)>
c001ef79:	83 c4 10             	add    esp,0x10
c001ef7c:	ba 8c 37 02 c0       	mov    edx,0xc002378c
c001ef81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef85:	89 10                	mov    DWORD PTR [eax],edx
c001ef87:	90                   	nop
c001ef88:	83 c4 0c             	add    esp,0xc
c001ef8b:	c3                   	ret    

c001ef8c <PIT::write(int)>:
c001ef8c:	83 ec 10             	sub    esp,0x10
c001ef8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efa1:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001efa6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efab:	89 c2                	mov    edx,eax
c001efad:	c1 fa 1f             	sar    edx,0x1f
c001efb0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efb8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001efbf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001efc4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001efc8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001efcd:	ee                   	out    dx,al
c001efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efd2:	0f b6 c0             	movzx  eax,al
c001efd5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001efdc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001efe0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001efe4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001efe9:	ee                   	out    dx,al
c001efea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efee:	c1 f8 08             	sar    eax,0x8
c001eff1:	0f b6 c0             	movzx  eax,al
c001eff4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001effb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001efff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f003:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f008:	ee                   	out    dx,al
c001f009:	90                   	nop
c001f00a:	83 c4 10             	add    esp,0x10
c001f00d:	c3                   	ret    
c001f00e:	66 90                	xchg   ax,ax

c001f010 <pitHandler(regs*, void*)>:
c001f010:	83 ec 0c             	sub    esp,0xc
c001f013:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001f019:	b8 10 27 00 00       	mov    eax,0x2710
c001f01e:	89 c2                	mov    edx,eax
c001f020:	c1 fa 1f             	sar    edx,0x1f
c001f023:	f7 f9                	idiv   ecx
c001f025:	83 ec 0c             	sub    esp,0xc
c001f028:	50                   	push   eax
c001f029:	e8 5a f4 fe ff       	call   c000e488 <timerHandler(unsigned int)>
c001f02e:	83 c4 10             	add    esp,0x10
c001f031:	90                   	nop
c001f032:	83 c4 0c             	add    esp,0xc
c001f035:	c3                   	ret    
c001f036:	66 90                	xchg   ax,ax

c001f038 <PIT::open(int, int, void*)>:
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f041:	83 c0 24             	add    eax,0x24
c001f044:	8b 00                	mov    eax,DWORD PTR [eax]
c001f046:	83 ec 08             	sub    esp,0x8
c001f049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f04d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f051:	ff d0                	call   eax
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05a:	83 ec 0c             	sub    esp,0xc
c001f05d:	6a 00                	push   0x0
c001f05f:	6a 01                	push   0x1
c001f061:	68 10 f0 01 c0       	push   0xc001f010
c001f066:	6a 00                	push   0x0
c001f068:	50                   	push   eax
c001f069:	e8 64 d9 fe ff       	call   c000c9d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f06e:	83 c4 20             	add    esp,0x20
c001f071:	89 c2                	mov    edx,eax
c001f073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f077:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f07d:	b8 00 00 00 00       	mov    eax,0x0
c001f082:	83 c4 0c             	add    esp,0xc
c001f085:	c3                   	ret    
c001f086:	66 90                	xchg   ax,ax

c001f088 <PIT::close(int, int, void*)>:
c001f088:	83 ec 0c             	sub    esp,0xc
c001f08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09d:	6a 01                	push   0x1
c001f09f:	68 10 f0 01 c0       	push   0xc001f010
c001f0a4:	6a 00                	push   0x0
c001f0a6:	50                   	push   eax
c001f0a7:	e8 5c d9 fe ff       	call   c000ca08 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0ac:	83 c4 10             	add    esp,0x10
c001f0af:	b8 00 00 00 00       	mov    eax,0x0
c001f0b4:	83 c4 0c             	add    esp,0xc
c001f0b7:	c3                   	ret    

c001f0b8 <PIT::PIT()>:
c001f0b8:	83 ec 0c             	sub    esp,0xc
c001f0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bf:	83 ec 08             	sub    esp,0x8
c001f0c2:	68 b4 37 02 c0       	push   0xc00237b4
c001f0c7:	50                   	push   eax
c001f0c8:	e8 ef f2 fe ff       	call   c000e3bc <Timer::Timer(char const*)>
c001f0cd:	83 c4 10             	add    esp,0x10
c001f0d0:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c001f0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d9:	89 10                	mov    DWORD PTR [eax],edx
c001f0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0e5:	0f b6 d0             	movzx  edx,al
c001f0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ec:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0fd:	0f b6 d0             	movzx  edx,al
c001f100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f104:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f113:	8d 50 01             	lea    edx,[eax+0x1]
c001f116:	88 d1                	mov    cl,dl
c001f118:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f11c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f122:	0f b6 d0             	movzx  edx,al
c001f125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f129:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f12d:	83 e1 3f             	and    ecx,0x3f
c001f130:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f134:	90                   	nop
c001f135:	83 c4 0c             	add    esp,0xc
c001f138:	c3                   	ret    
c001f139:	66 90                	xchg   ax,ax
c001f13b:	66 90                	xchg   ax,ax
c001f13d:	66 90                	xchg   ax,ax
c001f13f:	90                   	nop

c001f140 <avxDetect>:
c001f140:	b8 01 00 00 00       	mov    eax,0x1
c001f145:	0f a2                	cpuid  
c001f147:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f14d:	74 15                	je     c001f164 <avxDetect.noAVX>
c001f14f:	b8 01 00 00 00       	mov    eax,0x1
c001f154:	0f a2                	cpuid  
c001f156:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f15c:	74 06                	je     c001f164 <avxDetect.noAVX>
c001f15e:	b8 01 00 00 00       	mov    eax,0x1
c001f163:	c3                   	ret    

c001f164 <avxDetect.noAVX>:
c001f164:	b8 00 00 00 00       	mov    eax,0x0
c001f169:	c3                   	ret    

c001f16a <avxSave>:
c001f16a:	53                   	push   ebx
c001f16b:	52                   	push   edx
c001f16c:	31 c0                	xor    eax,eax
c001f16e:	48                   	dec    eax
c001f16f:	89 c2                	mov    edx,eax
c001f171:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f175:	0f ae 23             	xsave  [ebx]
c001f178:	5a                   	pop    edx
c001f179:	5b                   	pop    ebx
c001f17a:	c3                   	ret    

c001f17b <avxLoad>:
c001f17b:	53                   	push   ebx
c001f17c:	52                   	push   edx
c001f17d:	31 c0                	xor    eax,eax
c001f17f:	48                   	dec    eax
c001f180:	89 c2                	mov    edx,eax
c001f182:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f186:	0f ae 2b             	xrstor [ebx]
c001f189:	5a                   	pop    edx
c001f18a:	5b                   	pop    ebx
c001f18b:	c3                   	ret    

c001f18c <avxInit>:
c001f18c:	e8 67 03 00 00       	call   c001f4f8 <sseInit>
c001f191:	50                   	push   eax
c001f192:	51                   	push   ecx
c001f193:	0f 20 e0             	mov    eax,cr4
c001f196:	0d 00 00 04 00       	or     eax,0x40000
c001f19b:	0f 22 e0             	mov    cr4,eax
c001f19e:	31 c9                	xor    ecx,ecx
c001f1a0:	0f 01 d0             	xgetbv 
c001f1a3:	0d 07 00 00 00       	or     eax,0x7
c001f1a8:	0f 01 d1             	xsetbv 
c001f1ab:	59                   	pop    ecx
c001f1ac:	58                   	pop    eax
c001f1ad:	c3                   	ret    

c001f1ae <avxClose>:
c001f1ae:	c3                   	ret    

c001f1af <wouldSheSayYes>:
c001f1af:	c3                   	ret    
c001f1b0:	49                   	dec    ecx
c001f1b1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f1b5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f1b9:	75 20                	jne    c001f1db <isr0+0xb>
c001f1bb:	4e                   	dec    esi
c001f1bc:	79 61                	jns    c001f21f <isr7+0x3>
c001f1be:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f1c3:	66 90                	xchg   ax,ax
c001f1c5:	66 90                	xchg   ax,ax
c001f1c7:	66 90                	xchg   ax,ax
c001f1c9:	66 90                	xchg   ax,ax
c001f1cb:	66 90                	xchg   ax,ax
c001f1cd:	66 90                	xchg   ax,ax
c001f1cf:	90                   	nop

c001f1d0 <isr0>:
c001f1d0:	fa                   	cli    
c001f1d1:	68 00 00 00 00       	push   0x0
c001f1d6:	68 00 00 00 00       	push   0x0
c001f1db:	e9 56 01 00 00       	jmp    c001f336 <int_common_stub>

c001f1e0 <isr1>:
c001f1e0:	fa                   	cli    
c001f1e1:	6a 00                	push   0x0
c001f1e3:	6a 01                	push   0x1
c001f1e5:	e9 4c 01 00 00       	jmp    c001f336 <int_common_stub>

c001f1ea <isr2>:
c001f1ea:	fa                   	cli    
c001f1eb:	6a 00                	push   0x0
c001f1ed:	6a 02                	push   0x2
c001f1ef:	e9 42 01 00 00       	jmp    c001f336 <int_common_stub>

c001f1f4 <isr3>:
c001f1f4:	fa                   	cli    
c001f1f5:	6a 00                	push   0x0
c001f1f7:	6a 03                	push   0x3
c001f1f9:	e9 38 01 00 00       	jmp    c001f336 <int_common_stub>

c001f1fe <isr4>:
c001f1fe:	fa                   	cli    
c001f1ff:	6a 00                	push   0x0
c001f201:	6a 04                	push   0x4
c001f203:	e9 2e 01 00 00       	jmp    c001f336 <int_common_stub>

c001f208 <isr5>:
c001f208:	fa                   	cli    
c001f209:	6a 00                	push   0x0
c001f20b:	6a 05                	push   0x5
c001f20d:	e9 24 01 00 00       	jmp    c001f336 <int_common_stub>

c001f212 <isr6>:
c001f212:	fa                   	cli    
c001f213:	6a 00                	push   0x0
c001f215:	6a 06                	push   0x6
c001f217:	e9 1a 01 00 00       	jmp    c001f336 <int_common_stub>

c001f21c <isr7>:
c001f21c:	fa                   	cli    
c001f21d:	6a 00                	push   0x0
c001f21f:	6a 07                	push   0x7
c001f221:	e9 10 01 00 00       	jmp    c001f336 <int_common_stub>

c001f226 <isr8>:
c001f226:	fa                   	cli    
c001f227:	6a 08                	push   0x8
c001f229:	e9 08 01 00 00       	jmp    c001f336 <int_common_stub>

c001f22e <isr9>:
c001f22e:	fa                   	cli    
c001f22f:	6a 00                	push   0x0
c001f231:	6a 09                	push   0x9
c001f233:	e9 fe 00 00 00       	jmp    c001f336 <int_common_stub>

c001f238 <isr10>:
c001f238:	fa                   	cli    
c001f239:	6a 0a                	push   0xa
c001f23b:	e9 f6 00 00 00       	jmp    c001f336 <int_common_stub>

c001f240 <isr11>:
c001f240:	fa                   	cli    
c001f241:	6a 0b                	push   0xb
c001f243:	e9 ee 00 00 00       	jmp    c001f336 <int_common_stub>

c001f248 <isr12>:
c001f248:	fa                   	cli    
c001f249:	6a 0c                	push   0xc
c001f24b:	e9 e6 00 00 00       	jmp    c001f336 <int_common_stub>

c001f250 <isr13>:
c001f250:	fa                   	cli    
c001f251:	6a 0d                	push   0xd
c001f253:	53                   	push   ebx
c001f254:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f258:	81 fb 26 f4 01 c0    	cmp    ebx,0xc001f426
c001f25e:	5b                   	pop    ebx
c001f25f:	0f 84 c3 01 00 00    	je     c001f428 <finishSignal2>
c001f265:	e9 cc 00 00 00       	jmp    c001f336 <int_common_stub>

c001f26a <isr14>:
c001f26a:	fa                   	cli    
c001f26b:	6a 0e                	push   0xe
c001f26d:	e9 c4 00 00 00       	jmp    c001f336 <int_common_stub>

c001f272 <isr15>:
c001f272:	fa                   	cli    
c001f273:	6a 00                	push   0x0
c001f275:	6a 0f                	push   0xf
c001f277:	e9 ba 00 00 00       	jmp    c001f336 <int_common_stub>

c001f27c <isr16>:
c001f27c:	fa                   	cli    
c001f27d:	6a 00                	push   0x0
c001f27f:	6a 10                	push   0x10
c001f281:	e9 b0 00 00 00       	jmp    c001f336 <int_common_stub>

c001f286 <isr17>:
c001f286:	fa                   	cli    
c001f287:	6a 00                	push   0x0
c001f289:	6a 11                	push   0x11
c001f28b:	e9 a6 00 00 00       	jmp    c001f336 <int_common_stub>

c001f290 <isr18>:
c001f290:	fa                   	cli    
c001f291:	6a 00                	push   0x0
c001f293:	6a 12                	push   0x12
c001f295:	e9 9c 00 00 00       	jmp    c001f336 <int_common_stub>

c001f29a <irq3>:
c001f29a:	fa                   	cli    
c001f29b:	6a 00                	push   0x0
c001f29d:	6a 23                	push   0x23
c001f29f:	e9 92 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2a4 <irq4>:
c001f2a4:	fa                   	cli    
c001f2a5:	6a 00                	push   0x0
c001f2a7:	6a 24                	push   0x24
c001f2a9:	e9 88 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2ae <irq5>:
c001f2ae:	fa                   	cli    
c001f2af:	6a 00                	push   0x0
c001f2b1:	6a 25                	push   0x25
c001f2b3:	e9 7e 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2b8 <irq6>:
c001f2b8:	fa                   	cli    
c001f2b9:	6a 00                	push   0x0
c001f2bb:	6a 26                	push   0x26
c001f2bd:	e9 74 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2c2 <irq7>:
c001f2c2:	fa                   	cli    
c001f2c3:	6a 00                	push   0x0
c001f2c5:	6a 27                	push   0x27
c001f2c7:	e9 6a 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2cc <irq8>:
c001f2cc:	fa                   	cli    
c001f2cd:	6a 00                	push   0x0
c001f2cf:	6a 28                	push   0x28
c001f2d1:	e9 60 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2d6 <irq9>:
c001f2d6:	fa                   	cli    
c001f2d7:	6a 00                	push   0x0
c001f2d9:	6a 29                	push   0x29
c001f2db:	e9 56 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2e0 <irq10>:
c001f2e0:	fa                   	cli    
c001f2e1:	6a 00                	push   0x0
c001f2e3:	6a 2a                	push   0x2a
c001f2e5:	e9 4c 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2ea <irq11>:
c001f2ea:	fa                   	cli    
c001f2eb:	6a 00                	push   0x0
c001f2ed:	6a 2b                	push   0x2b
c001f2ef:	e9 42 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2f4 <irq12>:
c001f2f4:	fa                   	cli    
c001f2f5:	6a 00                	push   0x0
c001f2f7:	6a 2c                	push   0x2c
c001f2f9:	e9 38 00 00 00       	jmp    c001f336 <int_common_stub>

c001f2fe <irq13>:
c001f2fe:	fa                   	cli    
c001f2ff:	6a 00                	push   0x0
c001f301:	6a 2d                	push   0x2d
c001f303:	e9 2e 00 00 00       	jmp    c001f336 <int_common_stub>

c001f308 <irq14>:
c001f308:	fa                   	cli    
c001f309:	6a 00                	push   0x0
c001f30b:	6a 2e                	push   0x2e
c001f30d:	e9 24 00 00 00       	jmp    c001f336 <int_common_stub>

c001f312 <irq15>:
c001f312:	fa                   	cli    
c001f313:	6a 00                	push   0x0
c001f315:	6a 2f                	push   0x2f
c001f317:	e9 1a 00 00 00       	jmp    c001f336 <int_common_stub>

c001f31c <irq1>:
c001f31c:	fa                   	cli    
c001f31d:	6a 00                	push   0x0
c001f31f:	6a 21                	push   0x21
c001f321:	eb 13                	jmp    c001f336 <int_common_stub>

c001f323 <irq2>:
c001f323:	fa                   	cli    
c001f324:	6a 00                	push   0x0
c001f326:	6a 22                	push   0x22
c001f328:	eb 0c                	jmp    c001f336 <int_common_stub>

c001f32a <isr96>:
c001f32a:	6a 00                	push   0x0
c001f32c:	6a 60                	push   0x60
c001f32e:	fb                   	sti    
c001f32f:	eb 37                	jmp    c001f368 <syscall_common_stub>

c001f331 <irq0>:
c001f331:	fa                   	cli    
c001f332:	6a 00                	push   0x0
c001f334:	6a 20                	push   0x20

c001f336 <int_common_stub>:
c001f336:	60                   	pusha  
c001f337:	1e                   	push   ds
c001f338:	06                   	push   es
c001f339:	0f a0                	push   fs
c001f33b:	0f a8                	push   gs
c001f33d:	66 b8 10 00          	mov    ax,0x10
c001f341:	66 8e d8             	mov    ds,ax
c001f344:	66 8e c0             	mov    es,ax
c001f347:	66 8e e0             	mov    fs,ax
c001f34a:	66 8e e8             	mov    gs,ax
c001f34d:	54                   	push   esp
c001f34e:	fc                   	cld    
c001f34f:	e8 7c db fe ff       	call   c000ced0 <int_handler>
c001f354:	81 c4 04 00 00 00    	add    esp,0x4
c001f35a:	0f a9                	pop    gs
c001f35c:	0f a1                	pop    fs
c001f35e:	07                   	pop    es
c001f35f:	1f                   	pop    ds
c001f360:	61                   	popa   
c001f361:	81 c4 08 00 00 00    	add    esp,0x8
c001f367:	cf                   	iret   

c001f368 <syscall_common_stub>:
c001f368:	60                   	pusha  
c001f369:	1e                   	push   ds
c001f36a:	06                   	push   es
c001f36b:	0f a0                	push   fs
c001f36d:	0f a8                	push   gs
c001f36f:	66 b8 10 00          	mov    ax,0x10
c001f373:	66 8e d8             	mov    ds,ax
c001f376:	66 8e c0             	mov    es,ax
c001f379:	66 8e e0             	mov    fs,ax
c001f37c:	66 8e e8             	mov    gs,ax
c001f37f:	54                   	push   esp
c001f380:	fc                   	cld    
c001f381:	e8 4a db fe ff       	call   c000ced0 <int_handler>
c001f386:	81 c4 04 00 00 00    	add    esp,0x4
c001f38c:	0f a9                	pop    gs
c001f38e:	0f a1                	pop    fs
c001f390:	07                   	pop    es
c001f391:	1f                   	pop    ds
c001f392:	e8 77 29 ff ff       	call   c0011d0e <KiCheckSignalZ>
c001f397:	3d 00 00 00 00       	cmp    eax,0x0
c001f39c:	0f 84 c0 00 00 00    	je     c001f462 <skipSignals>
c001f3a2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f3a7:	61                   	popa   
c001f3a8:	53                   	push   ebx
c001f3a9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f3af:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f3b2:	5b                   	pop    ebx
c001f3b3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f3b8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f3bb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f3be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f3c1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f3c4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f3c7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f3ca:	81 c4 08 00 00 00    	add    esp,0x8
c001f3d0:	5e                   	pop    esi
c001f3d1:	5b                   	pop    ebx
c001f3d2:	59                   	pop    ecx
c001f3d3:	5a                   	pop    edx
c001f3d4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f3d7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f3da:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f3dd:	52                   	push   edx
c001f3de:	51                   	push   ecx
c001f3df:	53                   	push   ebx
c001f3e0:	56                   	push   esi
c001f3e1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f3e7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f3ea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f3ed:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f3f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f3f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3f6:	60                   	pusha  
c001f3f7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f3fd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f400:	89 e3                	mov    ebx,esp
c001f402:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f405:	52                   	push   edx
c001f406:	68 26 f4 01 c0       	push   0xc001f426
c001f40b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f40e:	89 dc                	mov    esp,ebx
c001f410:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f413:	68 23 00 00 00       	push   0x23
c001f418:	51                   	push   ecx
c001f419:	68 02 02 00 00       	push   0x202
c001f41e:	68 1b 00 00 00       	push   0x1b
c001f423:	ff 36                	push   DWORD PTR [esi]
c001f425:	cf                   	iret   

c001f426 <finishSignal>:
c001f426:	cd 0f                	int    0xf

c001f428 <finishSignal2>:
c001f428:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f42e:	e8 58 29 ff ff       	call   c0011d8b <KiFinishSignalZ>
c001f433:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f439:	68 23 00 00 00       	push   0x23
c001f43e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f441:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f444:	68 1b 00 00 00       	push   0x1b
c001f449:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f44c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f44f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f452:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f455:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f458:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f45b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f45e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f461:	cf                   	iret   

c001f462 <skipSignals>:
c001f462:	61                   	popa   
c001f463:	81 c4 08 00 00 00    	add    esp,0x8
c001f469:	cf                   	iret   
c001f46a:	90                   	nop
c001f46b:	90                   	nop

c001f46c <irq16>:
c001f46c:	fa                   	cli    
c001f46d:	6a 00                	push   0x0
c001f46f:	6a 30                	push   0x30
c001f471:	e9 c0 fe ff ff       	jmp    c001f336 <int_common_stub>

c001f476 <irq17>:
c001f476:	fa                   	cli    
c001f477:	6a 00                	push   0x0
c001f479:	6a 31                	push   0x31
c001f47b:	e9 b6 fe ff ff       	jmp    c001f336 <int_common_stub>

c001f480 <irq18>:
c001f480:	fa                   	cli    
c001f481:	6a 00                	push   0x0
c001f483:	6a 32                	push   0x32
c001f485:	e9 ac fe ff ff       	jmp    c001f336 <int_common_stub>

c001f48a <irq19>:
c001f48a:	fa                   	cli    
c001f48b:	6a 00                	push   0x0
c001f48d:	6a 33                	push   0x33
c001f48f:	e9 a2 fe ff ff       	jmp    c001f336 <int_common_stub>

c001f494 <irq20>:
c001f494:	fa                   	cli    
c001f495:	6a 00                	push   0x0
c001f497:	6a 34                	push   0x34
c001f499:	e9 98 fe ff ff       	jmp    c001f336 <int_common_stub>

c001f49e <irq21>:
c001f49e:	fa                   	cli    
c001f49f:	6a 00                	push   0x0
c001f4a1:	6a 35                	push   0x35
c001f4a3:	e9 8e fe ff ff       	jmp    c001f336 <int_common_stub>

c001f4a8 <irq22>:
c001f4a8:	fa                   	cli    
c001f4a9:	6a 00                	push   0x0
c001f4ab:	6a 36                	push   0x36
c001f4ad:	e9 84 fe ff ff       	jmp    c001f336 <int_common_stub>

c001f4b2 <irq23>:
c001f4b2:	fa                   	cli    
c001f4b3:	6a 00                	push   0x0
c001f4b5:	6a 37                	push   0x37
c001f4b7:	e9 7a fe ff ff       	jmp    c001f336 <int_common_stub>
c001f4bc:	66 90                	xchg   ax,ax
c001f4be:	66 90                	xchg   ax,ax

c001f4c0 <i386GetRDRAND>:
c001f4c0:	b9 64 00 00 00       	mov    ecx,0x64

c001f4c5 <retry>:
c001f4c5:	0f c7 f0             	rdrand eax
c001f4c8:	72 05                	jb     c001f4cf <retry.done>
c001f4ca:	e2 f9                	loop   c001f4c5 <retry>

c001f4cc <retry.fail>:
c001f4cc:	31 c0                	xor    eax,eax
c001f4ce:	c3                   	ret    

c001f4cf <retry.done>:
c001f4cf:	c3                   	ret    

c001f4d0 <absolutelyNoChanceInHell>:
c001f4d0:	b8 01 00 00 00       	mov    eax,0x1
c001f4d5:	0f a2                	cpuid  
c001f4d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f4dd:	74 06                	je     c001f4e5 <sseDetect.noSSE>
c001f4df:	b8 01 00 00 00       	mov    eax,0x1
c001f4e4:	c3                   	ret    

c001f4e5 <sseDetect.noSSE>:
c001f4e5:	31 c0                	xor    eax,eax
c001f4e7:	c3                   	ret    

c001f4e8 <sseSave>:
c001f4e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ec:	0f ae 00             	fxsave [eax]
c001f4ef:	c3                   	ret    

c001f4f0 <sseLoad>:
c001f4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4f4:	0f ae 08             	fxrstor [eax]
c001f4f7:	c3                   	ret    

c001f4f8 <sseInit>:
c001f4f8:	e8 42 00 00 00       	call   c001f53f <x87Init>
c001f4fd:	0f 20 e0             	mov    eax,cr4
c001f500:	66 0d 00 06          	or     ax,0x600
c001f504:	0f 22 e0             	mov    cr4,eax
c001f507:	c3                   	ret    

c001f508 <sseClose>:
c001f508:	c3                   	ret    
c001f509:	66 90                	xchg   ax,ax
c001f50b:	66 90                	xchg   ax,ax
c001f50d:	66 90                	xchg   ax,ax
c001f50f:	90                   	nop

c001f510 <value_37F>:
c001f510:	7f 03                	jg     c001f515 <value_37A+0x1>

c001f512 <value_37E>:
c001f512:	7e 03                	jle    c001f517 <x87Detect+0x1>

c001f514 <value_37A>:
c001f514:	7a 03                	jp     c001f519 <x87Detect+0x3>

c001f516 <x87Detect>:
c001f516:	b8 01 00 00 00       	mov    eax,0x1
c001f51b:	0f a2                	cpuid  
c001f51d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f523:	74 06                	je     c001f52b <x87Detect.nox87>
c001f525:	b8 01 00 00 00       	mov    eax,0x1
c001f52a:	c3                   	ret    

c001f52b <x87Detect.nox87>:
c001f52b:	b8 00 00 00 00       	mov    eax,0x0
c001f530:	c3                   	ret    

c001f531 <x87Save>:
c001f531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f535:	dd 30                	fnsave [eax]
c001f537:	c3                   	ret    

c001f538 <x87Load>:
c001f538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f53c:	dd 20                	frstor [eax]
c001f53e:	c3                   	ret    

c001f53f <x87Init>:
c001f53f:	0f 20 c0             	mov    eax,cr0
c001f542:	66 25 fb ff          	and    ax,0xfffb
c001f546:	66 0d 22 00          	or     ax,0x22
c001f54a:	0f 22 c0             	mov    cr0,eax
c001f54d:	db e3                	fninit 
c001f54f:	0f 06                	clts   
c001f551:	d9 2d 14 f5 01 c0    	fldcw  WORD PTR ds:0xc001f514
c001f557:	c3                   	ret    

c001f558 <x87Close>:
c001f558:	c3                   	ret    
c001f559:	66 90                	xchg   ax,ax
c001f55b:	90                   	nop

c001f55c <__do_global_ctors_aux>:
c001f55c:	a1 10 05 02 c0       	mov    eax,ds:0xc0020510
c001f561:	83 f8 ff             	cmp    eax,0xffffffff
c001f564:	74 1a                	je     c001f580 <__do_global_ctors_aux+0x24>
c001f566:	55                   	push   ebp
c001f567:	89 e5                	mov    ebp,esp
c001f569:	53                   	push   ebx
c001f56a:	52                   	push   edx
c001f56b:	bb 10 05 02 c0       	mov    ebx,0xc0020510
c001f570:	ff d0                	call   eax
c001f572:	83 eb 04             	sub    ebx,0x4
c001f575:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f577:	83 f8 ff             	cmp    eax,0xffffffff
c001f57a:	75 f4                	jne    c001f570 <__do_global_ctors_aux+0x14>
c001f57c:	58                   	pop    eax
c001f57d:	5b                   	pop    ebx
c001f57e:	5d                   	pop    ebp
c001f57f:	c3                   	ret    
c001f580:	c3                   	ret    
c001f581:	66 90                	xchg   ax,ax
c001f583:	90                   	nop

c001f584 <__divdi3>:
c001f584:	55                   	push   ebp
c001f585:	57                   	push   edi
c001f586:	56                   	push   esi
c001f587:	53                   	push   ebx
c001f588:	83 ec 1c             	sub    esp,0x1c
c001f58b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f58f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f593:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f596:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f59a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f59e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f5a2:	85 db                	test   ebx,ebx
c001f5a4:	0f 88 8e 00 00 00    	js     c001f638 <__divdi3+0xb4>
c001f5aa:	89 dd                	mov    ebp,ebx
c001f5ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f5b4:	89 d3                	mov    ebx,edx
c001f5b6:	85 d2                	test   edx,edx
c001f5b8:	79 0d                	jns    c001f5c7 <__divdi3+0x43>
c001f5ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f5be:	f7 d8                	neg    eax
c001f5c0:	83 d2 00             	adc    edx,0x0
c001f5c3:	f7 da                	neg    edx
c001f5c5:	89 d3                	mov    ebx,edx
c001f5c7:	89 c7                	mov    edi,eax
c001f5c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5cc:	85 db                	test   ebx,ebx
c001f5ce:	75 48                	jne    c001f618 <__divdi3+0x94>
c001f5d0:	39 ef                	cmp    edi,ebp
c001f5d2:	76 24                	jbe    c001f5f8 <__divdi3+0x74>
c001f5d4:	89 ea                	mov    edx,ebp
c001f5d6:	f7 f7                	div    edi
c001f5d8:	89 c1                	mov    ecx,eax
c001f5da:	31 f6                	xor    esi,esi
c001f5dc:	89 c8                	mov    eax,ecx
c001f5de:	89 f2                	mov    edx,esi
c001f5e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5e4:	85 c9                	test   ecx,ecx
c001f5e6:	74 07                	je     c001f5ef <__divdi3+0x6b>
c001f5e8:	f7 d8                	neg    eax
c001f5ea:	83 d2 00             	adc    edx,0x0
c001f5ed:	f7 da                	neg    edx
c001f5ef:	83 c4 1c             	add    esp,0x1c
c001f5f2:	5b                   	pop    ebx
c001f5f3:	5e                   	pop    esi
c001f5f4:	5f                   	pop    edi
c001f5f5:	5d                   	pop    ebp
c001f5f6:	c3                   	ret    
c001f5f7:	90                   	nop
c001f5f8:	85 ff                	test   edi,edi
c001f5fa:	75 0b                	jne    c001f607 <__divdi3+0x83>
c001f5fc:	b8 01 00 00 00       	mov    eax,0x1
c001f601:	31 d2                	xor    edx,edx
c001f603:	f7 f3                	div    ebx
c001f605:	89 c7                	mov    edi,eax
c001f607:	31 d2                	xor    edx,edx
c001f609:	89 e8                	mov    eax,ebp
c001f60b:	f7 f7                	div    edi
c001f60d:	89 c6                	mov    esi,eax
c001f60f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f612:	f7 f7                	div    edi
c001f614:	89 c1                	mov    ecx,eax
c001f616:	eb c4                	jmp    c001f5dc <__divdi3+0x58>
c001f618:	39 eb                	cmp    ebx,ebp
c001f61a:	77 3c                	ja     c001f658 <__divdi3+0xd4>
c001f61c:	0f bd f3             	bsr    esi,ebx
c001f61f:	83 f6 1f             	xor    esi,0x1f
c001f622:	75 40                	jne    c001f664 <__divdi3+0xe0>
c001f624:	39 eb                	cmp    ebx,ebp
c001f626:	72 09                	jb     c001f631 <__divdi3+0xad>
c001f628:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f62b:	0f 87 97 00 00 00    	ja     c001f6c8 <__divdi3+0x144>
c001f631:	b9 01 00 00 00       	mov    ecx,0x1
c001f636:	eb a4                	jmp    c001f5dc <__divdi3+0x58>
c001f638:	f7 d9                	neg    ecx
c001f63a:	83 d3 00             	adc    ebx,0x0
c001f63d:	f7 db                	neg    ebx
c001f63f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f642:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f646:	89 dd                	mov    ebp,ebx
c001f648:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f650:	e9 5f ff ff ff       	jmp    c001f5b4 <__divdi3+0x30>
c001f655:	8d 76 00             	lea    esi,[esi+0x0]
c001f658:	31 f6                	xor    esi,esi
c001f65a:	31 c9                	xor    ecx,ecx
c001f65c:	e9 7b ff ff ff       	jmp    c001f5dc <__divdi3+0x58>
c001f661:	8d 76 00             	lea    esi,[esi+0x0]
c001f664:	b8 20 00 00 00       	mov    eax,0x20
c001f669:	29 f0                	sub    eax,esi
c001f66b:	89 f1                	mov    ecx,esi
c001f66d:	d3 e3                	shl    ebx,cl
c001f66f:	89 fa                	mov    edx,edi
c001f671:	88 c1                	mov    cl,al
c001f673:	d3 ea                	shr    edx,cl
c001f675:	09 da                	or     edx,ebx
c001f677:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f67b:	89 f1                	mov    ecx,esi
c001f67d:	d3 e7                	shl    edi,cl
c001f67f:	89 eb                	mov    ebx,ebp
c001f681:	88 c1                	mov    cl,al
c001f683:	d3 eb                	shr    ebx,cl
c001f685:	89 f1                	mov    ecx,esi
c001f687:	d3 e5                	shl    ebp,cl
c001f689:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f68c:	88 c1                	mov    cl,al
c001f68e:	d3 ea                	shr    edx,cl
c001f690:	09 d5                	or     ebp,edx
c001f692:	89 e8                	mov    eax,ebp
c001f694:	89 da                	mov    edx,ebx
c001f696:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f69a:	89 d3                	mov    ebx,edx
c001f69c:	89 c5                	mov    ebp,eax
c001f69e:	f7 e7                	mul    edi
c001f6a0:	39 d3                	cmp    ebx,edx
c001f6a2:	72 18                	jb     c001f6bc <__divdi3+0x138>
c001f6a4:	74 0a                	je     c001f6b0 <__divdi3+0x12c>
c001f6a6:	89 e9                	mov    ecx,ebp
c001f6a8:	31 f6                	xor    esi,esi
c001f6aa:	e9 2d ff ff ff       	jmp    c001f5dc <__divdi3+0x58>
c001f6af:	90                   	nop
c001f6b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f6b3:	89 f1                	mov    ecx,esi
c001f6b5:	d3 e7                	shl    edi,cl
c001f6b7:	39 c7                	cmp    edi,eax
c001f6b9:	73 eb                	jae    c001f6a6 <__divdi3+0x122>
c001f6bb:	90                   	nop
c001f6bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f6bf:	31 f6                	xor    esi,esi
c001f6c1:	e9 16 ff ff ff       	jmp    c001f5dc <__divdi3+0x58>
c001f6c6:	66 90                	xchg   ax,ax
c001f6c8:	31 c9                	xor    ecx,ecx
c001f6ca:	e9 0d ff ff ff       	jmp    c001f5dc <__divdi3+0x58>
c001f6cf:	90                   	nop

c001f6d0 <__moddi3>:
c001f6d0:	55                   	push   ebp
c001f6d1:	57                   	push   edi
c001f6d2:	56                   	push   esi
c001f6d3:	53                   	push   ebx
c001f6d4:	83 ec 2c             	sub    esp,0x2c
c001f6d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f6db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f6df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f6e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f6e7:	85 db                	test   ebx,ebx
c001f6e9:	0f 88 85 00 00 00    	js     c001f774 <__moddi3+0xa4>
c001f6ef:	89 de                	mov    esi,ebx
c001f6f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f6f9:	89 d7                	mov    edi,edx
c001f6fb:	85 d2                	test   edx,edx
c001f6fd:	79 09                	jns    c001f708 <__moddi3+0x38>
c001f6ff:	f7 d8                	neg    eax
c001f701:	83 d2 00             	adc    edx,0x0
c001f704:	f7 da                	neg    edx
c001f706:	89 d7                	mov    edi,edx
c001f708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f70c:	89 cd                	mov    ebp,ecx
c001f70e:	85 ff                	test   edi,edi
c001f710:	75 52                	jne    c001f764 <__moddi3+0x94>
c001f712:	89 c3                	mov    ebx,eax
c001f714:	39 f0                	cmp    eax,esi
c001f716:	76 24                	jbe    c001f73c <__moddi3+0x6c>
c001f718:	89 c8                	mov    eax,ecx
c001f71a:	89 f2                	mov    edx,esi
c001f71c:	f7 f3                	div    ebx
c001f71e:	89 d6                	mov    esi,edx
c001f720:	89 f0                	mov    eax,esi
c001f722:	31 d2                	xor    edx,edx
c001f724:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f728:	85 c9                	test   ecx,ecx
c001f72a:	74 07                	je     c001f733 <__moddi3+0x63>
c001f72c:	f7 d8                	neg    eax
c001f72e:	83 d2 00             	adc    edx,0x0
c001f731:	f7 da                	neg    edx
c001f733:	83 c4 2c             	add    esp,0x2c
c001f736:	5b                   	pop    ebx
c001f737:	5e                   	pop    esi
c001f738:	5f                   	pop    edi
c001f739:	5d                   	pop    ebp
c001f73a:	c3                   	ret    
c001f73b:	90                   	nop
c001f73c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f740:	85 db                	test   ebx,ebx
c001f742:	75 0d                	jne    c001f751 <__moddi3+0x81>
c001f744:	b8 01 00 00 00       	mov    eax,0x1
c001f749:	31 d2                	xor    edx,edx
c001f74b:	f7 f7                	div    edi
c001f74d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f751:	89 f0                	mov    eax,esi
c001f753:	31 d2                	xor    edx,edx
c001f755:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f759:	f7 f7                	div    edi
c001f75b:	89 e8                	mov    eax,ebp
c001f75d:	f7 f7                	div    edi
c001f75f:	89 d6                	mov    esi,edx
c001f761:	eb bd                	jmp    c001f720 <__moddi3+0x50>
c001f763:	90                   	nop
c001f764:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f768:	39 f7                	cmp    edi,esi
c001f76a:	76 20                	jbe    c001f78c <__moddi3+0xbc>
c001f76c:	89 c8                	mov    eax,ecx
c001f76e:	89 f2                	mov    edx,esi
c001f770:	eb b2                	jmp    c001f724 <__moddi3+0x54>
c001f772:	66 90                	xchg   ax,ax
c001f774:	f7 d9                	neg    ecx
c001f776:	83 d3 00             	adc    ebx,0x0
c001f779:	f7 db                	neg    ebx
c001f77b:	89 de                	mov    esi,ebx
c001f77d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f785:	e9 6f ff ff ff       	jmp    c001f6f9 <__moddi3+0x29>
c001f78a:	66 90                	xchg   ax,ax
c001f78c:	0f bd c7             	bsr    eax,edi
c001f78f:	83 f0 1f             	xor    eax,0x1f
c001f792:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f796:	75 24                	jne    c001f7bc <__moddi3+0xec>
c001f798:	39 f7                	cmp    edi,esi
c001f79a:	72 06                	jb     c001f7a2 <__moddi3+0xd2>
c001f79c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f7a0:	77 0c                	ja     c001f7ae <__moddi3+0xde>
c001f7a2:	89 e9                	mov    ecx,ebp
c001f7a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f7a8:	19 fe                	sbb    esi,edi
c001f7aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f7ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f7b2:	89 f2                	mov    edx,esi
c001f7b4:	e9 6b ff ff ff       	jmp    c001f724 <__moddi3+0x54>
c001f7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7bc:	b8 20 00 00 00       	mov    eax,0x20
c001f7c1:	89 c2                	mov    edx,eax
c001f7c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f7c7:	29 da                	sub    edx,ebx
c001f7c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f7cd:	88 d9                	mov    cl,bl
c001f7cf:	d3 e7                	shl    edi,cl
c001f7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7d5:	88 d1                	mov    cl,dl
c001f7d7:	d3 e8                	shr    eax,cl
c001f7d9:	09 c7                	or     edi,eax
c001f7db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f7df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f7e3:	89 d8                	mov    eax,ebx
c001f7e5:	88 d9                	mov    cl,bl
c001f7e7:	d3 e7                	shl    edi,cl
c001f7e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7ed:	89 f3                	mov    ebx,esi
c001f7ef:	88 d1                	mov    cl,dl
c001f7f1:	d3 eb                	shr    ebx,cl
c001f7f3:	89 c7                	mov    edi,eax
c001f7f5:	88 c1                	mov    cl,al
c001f7f7:	d3 e6                	shl    esi,cl
c001f7f9:	89 e8                	mov    eax,ebp
c001f7fb:	88 d1                	mov    cl,dl
c001f7fd:	d3 e8                	shr    eax,cl
c001f7ff:	09 f0                	or     eax,esi
c001f801:	89 f9                	mov    ecx,edi
c001f803:	d3 e5                	shl    ebp,cl
c001f805:	89 da                	mov    edx,ebx
c001f807:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f80b:	89 d3                	mov    ebx,edx
c001f80d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f811:	89 c6                	mov    esi,eax
c001f813:	89 d1                	mov    ecx,edx
c001f815:	39 d3                	cmp    ebx,edx
c001f817:	72 27                	jb     c001f840 <__moddi3+0x170>
c001f819:	74 21                	je     c001f83c <__moddi3+0x16c>
c001f81b:	29 f5                	sub    ebp,esi
c001f81d:	19 cb                	sbb    ebx,ecx
c001f81f:	89 de                	mov    esi,ebx
c001f821:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f825:	d3 e6                	shl    esi,cl
c001f827:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f82b:	89 f9                	mov    ecx,edi
c001f82d:	d3 ed                	shr    ebp,cl
c001f82f:	09 ee                	or     esi,ebp
c001f831:	89 f0                	mov    eax,esi
c001f833:	d3 eb                	shr    ebx,cl
c001f835:	89 da                	mov    edx,ebx
c001f837:	e9 e8 fe ff ff       	jmp    c001f724 <__moddi3+0x54>
c001f83c:	39 c5                	cmp    ebp,eax
c001f83e:	73 db                	jae    c001f81b <__moddi3+0x14b>
c001f840:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f844:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f848:	89 d1                	mov    ecx,edx
c001f84a:	89 c6                	mov    esi,eax
c001f84c:	eb cd                	jmp    c001f81b <__moddi3+0x14b>
c001f84e:	66 90                	xchg   ax,ax

c001f850 <__udivdi3>:
c001f850:	55                   	push   ebp
c001f851:	57                   	push   edi
c001f852:	56                   	push   esi
c001f853:	53                   	push   ebx
c001f854:	83 ec 1c             	sub    esp,0x1c
c001f857:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f85b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f85f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f863:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f867:	85 d2                	test   edx,edx
c001f869:	75 41                	jne    c001f8ac <__udivdi3+0x5c>
c001f86b:	39 f7                	cmp    edi,esi
c001f86d:	76 15                	jbe    c001f884 <__udivdi3+0x34>
c001f86f:	89 e8                	mov    eax,ebp
c001f871:	89 f2                	mov    edx,esi
c001f873:	f7 f7                	div    edi
c001f875:	31 db                	xor    ebx,ebx
c001f877:	89 da                	mov    edx,ebx
c001f879:	83 c4 1c             	add    esp,0x1c
c001f87c:	5b                   	pop    ebx
c001f87d:	5e                   	pop    esi
c001f87e:	5f                   	pop    edi
c001f87f:	5d                   	pop    ebp
c001f880:	c3                   	ret    
c001f881:	8d 76 00             	lea    esi,[esi+0x0]
c001f884:	89 f9                	mov    ecx,edi
c001f886:	85 ff                	test   edi,edi
c001f888:	75 0b                	jne    c001f895 <__udivdi3+0x45>
c001f88a:	b8 01 00 00 00       	mov    eax,0x1
c001f88f:	31 d2                	xor    edx,edx
c001f891:	f7 f7                	div    edi
c001f893:	89 c1                	mov    ecx,eax
c001f895:	31 d2                	xor    edx,edx
c001f897:	89 f0                	mov    eax,esi
c001f899:	f7 f1                	div    ecx
c001f89b:	89 c3                	mov    ebx,eax
c001f89d:	89 e8                	mov    eax,ebp
c001f89f:	f7 f1                	div    ecx
c001f8a1:	89 da                	mov    edx,ebx
c001f8a3:	83 c4 1c             	add    esp,0x1c
c001f8a6:	5b                   	pop    ebx
c001f8a7:	5e                   	pop    esi
c001f8a8:	5f                   	pop    edi
c001f8a9:	5d                   	pop    ebp
c001f8aa:	c3                   	ret    
c001f8ab:	90                   	nop
c001f8ac:	39 f2                	cmp    edx,esi
c001f8ae:	77 1c                	ja     c001f8cc <__udivdi3+0x7c>
c001f8b0:	0f bd da             	bsr    ebx,edx
c001f8b3:	83 f3 1f             	xor    ebx,0x1f
c001f8b6:	75 24                	jne    c001f8dc <__udivdi3+0x8c>
c001f8b8:	39 f2                	cmp    edx,esi
c001f8ba:	72 08                	jb     c001f8c4 <__udivdi3+0x74>
c001f8bc:	39 ef                	cmp    edi,ebp
c001f8be:	0f 87 84 00 00 00    	ja     c001f948 <__udivdi3+0xf8>
c001f8c4:	b8 01 00 00 00       	mov    eax,0x1
c001f8c9:	eb ac                	jmp    c001f877 <__udivdi3+0x27>
c001f8cb:	90                   	nop
c001f8cc:	31 db                	xor    ebx,ebx
c001f8ce:	31 c0                	xor    eax,eax
c001f8d0:	89 da                	mov    edx,ebx
c001f8d2:	83 c4 1c             	add    esp,0x1c
c001f8d5:	5b                   	pop    ebx
c001f8d6:	5e                   	pop    esi
c001f8d7:	5f                   	pop    edi
c001f8d8:	5d                   	pop    ebp
c001f8d9:	c3                   	ret    
c001f8da:	66 90                	xchg   ax,ax
c001f8dc:	b8 20 00 00 00       	mov    eax,0x20
c001f8e1:	29 d8                	sub    eax,ebx
c001f8e3:	88 d9                	mov    cl,bl
c001f8e5:	d3 e2                	shl    edx,cl
c001f8e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f8eb:	89 fa                	mov    edx,edi
c001f8ed:	88 c1                	mov    cl,al
c001f8ef:	d3 ea                	shr    edx,cl
c001f8f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8f5:	09 d1                	or     ecx,edx
c001f8f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8fb:	88 d9                	mov    cl,bl
c001f8fd:	d3 e7                	shl    edi,cl
c001f8ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f903:	89 f7                	mov    edi,esi
c001f905:	88 c1                	mov    cl,al
c001f907:	d3 ef                	shr    edi,cl
c001f909:	88 d9                	mov    cl,bl
c001f90b:	d3 e6                	shl    esi,cl
c001f90d:	89 ea                	mov    edx,ebp
c001f90f:	88 c1                	mov    cl,al
c001f911:	d3 ea                	shr    edx,cl
c001f913:	09 d6                	or     esi,edx
c001f915:	89 f0                	mov    eax,esi
c001f917:	89 fa                	mov    edx,edi
c001f919:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f91d:	89 d7                	mov    edi,edx
c001f91f:	89 c6                	mov    esi,eax
c001f921:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f925:	39 d7                	cmp    edi,edx
c001f927:	72 13                	jb     c001f93c <__udivdi3+0xec>
c001f929:	74 09                	je     c001f934 <__udivdi3+0xe4>
c001f92b:	89 f0                	mov    eax,esi
c001f92d:	31 db                	xor    ebx,ebx
c001f92f:	e9 43 ff ff ff       	jmp    c001f877 <__udivdi3+0x27>
c001f934:	88 d9                	mov    cl,bl
c001f936:	d3 e5                	shl    ebp,cl
c001f938:	39 c5                	cmp    ebp,eax
c001f93a:	73 ef                	jae    c001f92b <__udivdi3+0xdb>
c001f93c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f93f:	31 db                	xor    ebx,ebx
c001f941:	e9 31 ff ff ff       	jmp    c001f877 <__udivdi3+0x27>
c001f946:	66 90                	xchg   ax,ax
c001f948:	31 c0                	xor    eax,eax
c001f94a:	e9 28 ff ff ff       	jmp    c001f877 <__udivdi3+0x27>
c001f94f:	90                   	nop

c001f950 <__umoddi3>:
c001f950:	55                   	push   ebp
c001f951:	57                   	push   edi
c001f952:	56                   	push   esi
c001f953:	53                   	push   ebx
c001f954:	83 ec 1c             	sub    esp,0x1c
c001f957:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f95b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f95f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f963:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f967:	89 da                	mov    edx,ebx
c001f969:	85 c0                	test   eax,eax
c001f96b:	75 37                	jne    c001f9a4 <__umoddi3+0x54>
c001f96d:	39 df                	cmp    edi,ebx
c001f96f:	76 13                	jbe    c001f984 <__umoddi3+0x34>
c001f971:	89 f0                	mov    eax,esi
c001f973:	f7 f7                	div    edi
c001f975:	89 d0                	mov    eax,edx
c001f977:	31 d2                	xor    edx,edx
c001f979:	83 c4 1c             	add    esp,0x1c
c001f97c:	5b                   	pop    ebx
c001f97d:	5e                   	pop    esi
c001f97e:	5f                   	pop    edi
c001f97f:	5d                   	pop    ebp
c001f980:	c3                   	ret    
c001f981:	8d 76 00             	lea    esi,[esi+0x0]
c001f984:	89 fd                	mov    ebp,edi
c001f986:	85 ff                	test   edi,edi
c001f988:	75 0b                	jne    c001f995 <__umoddi3+0x45>
c001f98a:	b8 01 00 00 00       	mov    eax,0x1
c001f98f:	31 d2                	xor    edx,edx
c001f991:	f7 f7                	div    edi
c001f993:	89 c5                	mov    ebp,eax
c001f995:	89 d8                	mov    eax,ebx
c001f997:	31 d2                	xor    edx,edx
c001f999:	f7 f5                	div    ebp
c001f99b:	89 f0                	mov    eax,esi
c001f99d:	f7 f5                	div    ebp
c001f99f:	89 d0                	mov    eax,edx
c001f9a1:	eb d4                	jmp    c001f977 <__umoddi3+0x27>
c001f9a3:	90                   	nop
c001f9a4:	89 f1                	mov    ecx,esi
c001f9a6:	39 d8                	cmp    eax,ebx
c001f9a8:	76 0a                	jbe    c001f9b4 <__umoddi3+0x64>
c001f9aa:	89 f0                	mov    eax,esi
c001f9ac:	83 c4 1c             	add    esp,0x1c
c001f9af:	5b                   	pop    ebx
c001f9b0:	5e                   	pop    esi
c001f9b1:	5f                   	pop    edi
c001f9b2:	5d                   	pop    ebp
c001f9b3:	c3                   	ret    
c001f9b4:	0f bd e8             	bsr    ebp,eax
c001f9b7:	83 f5 1f             	xor    ebp,0x1f
c001f9ba:	75 1c                	jne    c001f9d8 <__umoddi3+0x88>
c001f9bc:	39 d8                	cmp    eax,ebx
c001f9be:	72 04                	jb     c001f9c4 <__umoddi3+0x74>
c001f9c0:	39 f7                	cmp    edi,esi
c001f9c2:	77 08                	ja     c001f9cc <__umoddi3+0x7c>
c001f9c4:	89 da                	mov    edx,ebx
c001f9c6:	29 fe                	sub    esi,edi
c001f9c8:	19 c2                	sbb    edx,eax
c001f9ca:	89 f1                	mov    ecx,esi
c001f9cc:	89 c8                	mov    eax,ecx
c001f9ce:	83 c4 1c             	add    esp,0x1c
c001f9d1:	5b                   	pop    ebx
c001f9d2:	5e                   	pop    esi
c001f9d3:	5f                   	pop    edi
c001f9d4:	5d                   	pop    ebp
c001f9d5:	c3                   	ret    
c001f9d6:	66 90                	xchg   ax,ax
c001f9d8:	ba 20 00 00 00       	mov    edx,0x20
c001f9dd:	29 ea                	sub    edx,ebp
c001f9df:	89 e9                	mov    ecx,ebp
c001f9e1:	d3 e0                	shl    eax,cl
c001f9e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9e7:	89 f8                	mov    eax,edi
c001f9e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f9ed:	88 d1                	mov    cl,dl
c001f9ef:	d3 e8                	shr    eax,cl
c001f9f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9f5:	09 c1                	or     ecx,eax
c001f9f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f9fb:	89 e9                	mov    ecx,ebp
c001f9fd:	d3 e7                	shl    edi,cl
c001f9ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fa03:	89 d8                	mov    eax,ebx
c001fa05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa09:	88 d1                	mov    cl,dl
c001fa0b:	d3 e8                	shr    eax,cl
c001fa0d:	89 c7                	mov    edi,eax
c001fa0f:	89 e9                	mov    ecx,ebp
c001fa11:	d3 e3                	shl    ebx,cl
c001fa13:	89 f0                	mov    eax,esi
c001fa15:	88 d1                	mov    cl,dl
c001fa17:	d3 e8                	shr    eax,cl
c001fa19:	09 d8                	or     eax,ebx
c001fa1b:	89 e9                	mov    ecx,ebp
c001fa1d:	d3 e6                	shl    esi,cl
c001fa1f:	89 f3                	mov    ebx,esi
c001fa21:	89 fa                	mov    edx,edi
c001fa23:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fa27:	89 d1                	mov    ecx,edx
c001fa29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa2d:	89 c6                	mov    esi,eax
c001fa2f:	89 d7                	mov    edi,edx
c001fa31:	39 d1                	cmp    ecx,edx
c001fa33:	72 27                	jb     c001fa5c <__umoddi3+0x10c>
c001fa35:	74 21                	je     c001fa58 <__umoddi3+0x108>
c001fa37:	89 ca                	mov    edx,ecx
c001fa39:	29 f3                	sub    ebx,esi
c001fa3b:	19 fa                	sbb    edx,edi
c001fa3d:	89 d0                	mov    eax,edx
c001fa3f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fa43:	d3 e0                	shl    eax,cl
c001fa45:	89 e9                	mov    ecx,ebp
c001fa47:	d3 eb                	shr    ebx,cl
c001fa49:	09 d8                	or     eax,ebx
c001fa4b:	d3 ea                	shr    edx,cl
c001fa4d:	83 c4 1c             	add    esp,0x1c
c001fa50:	5b                   	pop    ebx
c001fa51:	5e                   	pop    esi
c001fa52:	5f                   	pop    edi
c001fa53:	5d                   	pop    ebp
c001fa54:	c3                   	ret    
c001fa55:	8d 76 00             	lea    esi,[esi+0x0]
c001fa58:	39 c3                	cmp    ebx,eax
c001fa5a:	73 db                	jae    c001fa37 <__umoddi3+0xe7>
c001fa5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa60:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa64:	89 d7                	mov    edi,edx
c001fa66:	89 c6                	mov    esi,eax
c001fa68:	eb cd                	jmp    c001fa37 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa6a <_init>:
c001fa6a:	55                   	push   ebp
c001fa6b:	89 e5                	mov    ebp,esp
c001fa6d:	e8 82 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa72:	e8 e5 fa ff ff       	call   c001f55c <__do_global_ctors_aux>
c001fa77:	5d                   	pop    ebp
c001fa78:	c3                   	ret    

Disassembly of section .fini:

c001fa79 <_fini>:
c001fa79:	55                   	push   ebp
c001fa7a:	89 e5                	mov    ebp,esp
c001fa7c:	e8 03 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa81:	5d                   	pop    ebp
c001fa82:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa84 <Computer::~Computer()>:
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	ba fc 0d 02 c0       	mov    edx,0xc0020dfc
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	89 10                	mov    DWORD PTR [eax],edx
c001fa92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa96:	83 ec 0c             	sub    esp,0xc
c001fa99:	50                   	push   eax
c001fa9a:	e8 89 ce fe ff       	call   c000c928 <Device::~Device()>
c001fa9f:	83 c4 10             	add    esp,0x10
c001faa2:	90                   	nop
c001faa3:	83 c4 0c             	add    esp,0xc
c001faa6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001faa8 <Computer::~Computer()>:
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	83 ec 0c             	sub    esp,0xc
c001faae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fab2:	e8 cd ff ff ff       	call   c001fa84 <Computer::~Computer()>
c001fab7:	83 c4 10             	add    esp,0x10
c001faba:	83 ec 08             	sub    esp,0x8
c001fabd:	68 70 01 00 00       	push   0x170
c001fac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fac6:	e8 ad ad fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c001facb:	83 c4 10             	add    esp,0x10
c001face:	83 c4 0c             	add    esp,0xc
c001fad1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fad2 <idleCommon()>:
c001fad2:	83 ec 0c             	sub    esp,0xc
c001fad5:	fa                   	cli    
c001fad6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fadc:	e8 fb 66 ff ff       	call   c00161dc <schedule()>
c001fae1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fae6:	48                   	dec    eax
c001fae7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001faec:	75 01                	jne    c001faef <idleCommon()+0x1d>
c001faee:	fb                   	sti    
c001faef:	83 c4 0c             	add    esp,0xc
c001faf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001faf4 <LinkedList<UnixFile>::~LinkedList()>:
c001faf4:	90                   	nop
c001faf5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001faf6 <LinkedList<UnixFile>::LinkedList()>:
c001faf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb36:	90                   	nop
c001fb37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fb38 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb40:	75 10                	jne    c001fb52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fb42:	83 ec 0c             	sub    esp,0xc
c001fb45:	68 10 10 02 c0       	push   0xc0021010
c001fb4a:	e8 a8 1b ff ff       	call   c00116f7 <KePanic(char const*)>
c001fb4f:	83 c4 10             	add    esp,0x10
c001fb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb56:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb58:	85 c0                	test   eax,eax
c001fb5a:	74 34                	je     c001fb90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb63:	85 c0                	test   eax,eax
c001fb65:	74 29                	je     c001fb90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb8e:	eb 65                	jmp    c001fbf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb96:	85 c0                	test   eax,eax
c001fb98:	75 4b                	jne    c001fbe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba1:	85 c0                	test   eax,eax
c001fba3:	75 40                	jne    c001fbe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbad:	89 10                	mov    DWORD PTR [eax],edx
c001fbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbc1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbcf:	85 c0                	test   eax,eax
c001fbd1:	74 22                	je     c001fbf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbd3:	83 ec 0c             	sub    esp,0xc
c001fbd6:	68 32 10 02 c0       	push   0xc0021032
c001fbdb:	e8 17 1b ff ff       	call   c00116f7 <KePanic(char const*)>
c001fbe0:	83 c4 10             	add    esp,0x10
c001fbe3:	eb 10                	jmp    c001fbf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbe5:	83 ec 0c             	sub    esp,0xc
c001fbe8:	68 3c 10 02 c0       	push   0xc002103c
c001fbed:	e8 05 1b ff ff       	call   c00116f7 <KePanic(char const*)>
c001fbf2:	83 c4 10             	add    esp,0x10
c001fbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbfc:	8d 50 01             	lea    edx,[eax+0x1]
c001fbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc06:	90                   	nop
c001fc07:	83 c4 0c             	add    esp,0xc
c001fc0a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fc0c <LinkedList<UnixFile>::getFirstElement()>:
c001fc0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fc14 <LinkedList<UnixFile>::removeFirst()>:
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc1d:	85 c0                	test   eax,eax
c001fc1f:	75 12                	jne    c001fc33 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fc21:	83 ec 0c             	sub    esp,0xc
c001fc24:	68 48 10 02 c0       	push   0xc0021048
c001fc29:	e8 c9 1a ff ff       	call   c00116f7 <KePanic(char const*)>
c001fc2e:	83 c4 10             	add    esp,0x10
c001fc31:	eb 7e                	jmp    c001fcb1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fc33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc3d:	85 c0                	test   eax,eax
c001fc3f:	74 10                	je     c001fc51 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fc41:	83 ec 0c             	sub    esp,0xc
c001fc44:	68 93 10 02 c0       	push   0xc0021093
c001fc49:	e8 a9 1a ff ff       	call   c00116f7 <KePanic(char const*)>
c001fc4e:	83 c4 10             	add    esp,0x10
c001fc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc55:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc5a:	85 c0                	test   eax,eax
c001fc5c:	75 33                	jne    c001fc91 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc7a:	83 f8 01             	cmp    eax,0x1
c001fc7d:	74 21                	je     c001fca0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc7f:	83 ec 0c             	sub    esp,0xc
c001fc82:	68 6c 10 02 c0       	push   0xc002106c
c001fc87:	e8 6b 1a ff ff       	call   c00116f7 <KePanic(char const*)>
c001fc8c:	83 c4 10             	add    esp,0x10
c001fc8f:	eb 0f                	jmp    c001fca0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc95:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9e:	89 10                	mov    DWORD PTR [eax],edx
c001fca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fca7:	8d 50 ff             	lea    edx,[eax-0x1]
c001fcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcb1:	83 c4 0c             	add    esp,0xc
c001fcb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fcb6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fcb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcbd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fcbe <DriverlessDevice::~DriverlessDevice()>:
c001fcbe:	ba 9c 1c 02 c0       	mov    edx,0xc0021c9c
c001fcc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc7:	89 10                	mov    DWORD PTR [eax],edx
c001fcc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccd:	50                   	push   eax
c001fcce:	e8 55 cc fe ff       	call   c000c928 <Device::~Device()>
c001fcd3:	83 c4 04             	add    esp,0x4
c001fcd6:	90                   	nop
c001fcd7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fcd8 <DriverlessDevice::~DriverlessDevice()>:
c001fcd8:	83 ec 0c             	sub    esp,0xc
c001fcdb:	83 ec 0c             	sub    esp,0xc
c001fcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce2:	e8 d7 ff ff ff       	call   c001fcbe <DriverlessDevice::~DriverlessDevice()>
c001fce7:	83 c4 10             	add    esp,0x10
c001fcea:	83 ec 08             	sub    esp,0x8
c001fced:	68 58 01 00 00       	push   0x158
c001fcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf6:	e8 7d ab fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c001fcfb:	83 c4 10             	add    esp,0x10
c001fcfe:	83 c4 0c             	add    esp,0xc
c001fd01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fd02 <LinkedList<Device>::addElement(Device*)>:
c001fd02:	83 ec 0c             	sub    esp,0xc
c001fd05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd0a:	75 10                	jne    c001fd1c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	68 10 10 02 c0       	push   0xc0021010
c001fd14:	e8 de 19 ff ff       	call   c00116f7 <KePanic(char const*)>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd22:	85 c0                	test   eax,eax
c001fd24:	74 3a                	je     c001fd60 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd2d:	85 c0                	test   eax,eax
c001fd2f:	74 2f                	je     c001fd60 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd3c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd4a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd54:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd5e:	eb 68                	jmp    c001fdc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd66:	85 c0                	test   eax,eax
c001fd68:	75 4e                	jne    c001fdb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd71:	85 c0                	test   eax,eax
c001fd73:	75 43                	jne    c001fdb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd7d:	89 10                	mov    DWORD PTR [eax],edx
c001fd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd91:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fda2:	85 c0                	test   eax,eax
c001fda4:	74 22                	je     c001fdc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	68 32 10 02 c0       	push   0xc0021032
c001fdae:	e8 44 19 ff ff       	call   c00116f7 <KePanic(char const*)>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	eb 10                	jmp    c001fdc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	68 3c 10 02 c0       	push   0xc002103c
c001fdc0:	e8 32 19 ff ff       	call   c00116f7 <KePanic(char const*)>
c001fdc5:	83 c4 10             	add    esp,0x10
c001fdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdcf:	8d 50 01             	lea    edx,[eax+0x1]
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdd9:	90                   	nop
c001fdda:	83 c4 0c             	add    esp,0xc
c001fddd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdde <LinkedList<Device>::LinkedList()>:
c001fdde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe1e:	90                   	nop
c001fe1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe24:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe26:	85 c0                	test   eax,eax
c001fe28:	75 0e                	jne    c001fe38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe31:	85 c0                	test   eax,eax
c001fe33:	75 03                	jne    c001fe38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe35:	b0 01                	mov    al,0x1
c001fe37:	c3                   	ret    
c001fe38:	b0 00                	mov    al,0x0
c001fe3a:	90                   	nop
c001fe3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe44:	83 ec 0c             	sub    esp,0xc
c001fe47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe4d:	85 c0                	test   eax,eax
c001fe4f:	75 17                	jne    c001fe68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe51:	83 ec 0c             	sub    esp,0xc
c001fe54:	68 48 10 02 c0       	push   0xc0021048
c001fe59:	e8 99 18 ff ff       	call   c00116f7 <KePanic(char const*)>
c001fe5e:	83 c4 10             	add    esp,0x10
c001fe61:	e9 96 00 00 00       	jmp    c001fefc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe66:	66 90                	xchg   ax,ax
c001fe68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe72:	85 c0                	test   eax,eax
c001fe74:	0f 95 c0             	setne  al
c001fe77:	0f b6 c0             	movzx  eax,al
c001fe7a:	85 c0                	test   eax,eax
c001fe7c:	74 12                	je     c001fe90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe7e:	83 ec 0c             	sub    esp,0xc
c001fe81:	68 93 10 02 c0       	push   0xc0021093
c001fe86:	e8 6c 18 ff ff       	call   c00116f7 <KePanic(char const*)>
c001fe8b:	83 c4 10             	add    esp,0x10
c001fe8e:	66 90                	xchg   ax,ax
c001fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe96:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe99:	85 c0                	test   eax,eax
c001fe9b:	0f 94 c0             	sete   al
c001fe9e:	0f b6 c0             	movzx  eax,al
c001fea1:	85 c0                	test   eax,eax
c001fea3:	74 33                	je     c001fed8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001feaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fec1:	83 f8 01             	cmp    eax,0x1
c001fec4:	74 22                	je     c001fee8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fec6:	83 ec 0c             	sub    esp,0xc
c001fec9:	68 6c 10 02 c0       	push   0xc002106c
c001fece:	e8 24 18 ff ff       	call   c00116f7 <KePanic(char const*)>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	eb 10                	jmp    c001fee8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fede:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee5:	89 10                	mov    DWORD PTR [eax],edx
c001fee7:	90                   	nop
c001fee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feef:	8d 50 ff             	lea    edx,[eax-0x1]
c001fef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fef9:	8d 76 00             	lea    esi,[esi+0x0]
c001fefc:	83 c4 0c             	add    esp,0xc
c001feff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ff00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ff00:	83 ec 0c             	sub    esp,0xc
c001ff03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff08:	75 12                	jne    c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	68 10 10 02 c0       	push   0xc0021010
c001ff12:	e8 e0 17 ff ff       	call   c00116f7 <KePanic(char const*)>
c001ff17:	83 c4 10             	add    esp,0x10
c001ff1a:	66 90                	xchg   ax,ax
c001ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff22:	85 c0                	test   eax,eax
c001ff24:	74 36                	je     c001ff5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff2d:	85 c0                	test   eax,eax
c001ff2f:	74 2b                	je     c001ff5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff3c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff51:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff58:	eb 6a                	jmp    c001ffc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff5a:	66 90                	xchg   ax,ax
c001ff5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff62:	85 c0                	test   eax,eax
c001ff64:	75 4e                	jne    c001ffb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff6d:	85 c0                	test   eax,eax
c001ff6f:	75 43                	jne    c001ffb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff79:	89 10                	mov    DWORD PTR [eax],edx
c001ff7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff8d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff9b:	85 c0                	test   eax,eax
c001ff9d:	74 25                	je     c001ffc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff9f:	83 ec 0c             	sub    esp,0xc
c001ffa2:	68 32 10 02 c0       	push   0xc0021032
c001ffa7:	e8 4b 17 ff ff       	call   c00116f7 <KePanic(char const*)>
c001ffac:	83 c4 10             	add    esp,0x10
c001ffaf:	eb 13                	jmp    c001ffc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ffb4:	83 ec 0c             	sub    esp,0xc
c001ffb7:	68 3c 10 02 c0       	push   0xc002103c
c001ffbc:	e8 36 17 ff ff       	call   c00116f7 <KePanic(char const*)>
c001ffc1:	83 c4 10             	add    esp,0x10
c001ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffcb:	8d 50 01             	lea    edx,[eax+0x1]
c001ffce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffd5:	90                   	nop
c001ffd6:	83 c4 0c             	add    esp,0xc
c001ffd9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffdc <ACPI::~ACPI()>:
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	ba 18 23 02 c0       	mov    edx,0xc0022318
c001ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe8:	89 10                	mov    DWORD PTR [eax],edx
c001ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffee:	83 ec 0c             	sub    esp,0xc
c001fff1:	50                   	push   eax
c001fff2:	e8 31 c9 fe ff       	call   c000c928 <Device::~Device()>
c001fff7:	83 c4 10             	add    esp,0x10
c001fffa:	90                   	nop
c001fffb:	83 c4 0c             	add    esp,0xc
c001fffe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0020000 <ACPI::~ACPI()>:
c0020000:	83 ec 0c             	sub    esp,0xc
c0020003:	83 ec 0c             	sub    esp,0xc
c0020006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000a:	e8 cd ff ff ff       	call   c001ffdc <ACPI::~ACPI()>
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	83 ec 08             	sub    esp,0x8
c0020015:	68 64 12 00 00       	push   0x1264
c002001a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001e:	e8 55 a8 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0020023:	83 c4 10             	add    esp,0x10
c0020026:	83 c4 0c             	add    esp,0xc
c0020029:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002002c <LinkedList<Device>::~LinkedList()>:
c002002c:	90                   	nop
c002002d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0020030 <LinkedList<Device>::isEmpty()>:
c0020030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020034:	8b 00                	mov    eax,DWORD PTR [eax]
c0020036:	85 c0                	test   eax,eax
c0020038:	75 0e                	jne    c0020048 <LinkedList<Device>::isEmpty()+0x18>
c002003a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020041:	85 c0                	test   eax,eax
c0020043:	75 03                	jne    c0020048 <LinkedList<Device>::isEmpty()+0x18>
c0020045:	b0 01                	mov    al,0x1
c0020047:	c3                   	ret    
c0020048:	b0 00                	mov    al,0x0
c002004a:	90                   	nop
c002004b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002004c <LinkedList<Device>::getFirstElement()>:
c002004c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020050:	8b 00                	mov    eax,DWORD PTR [eax]
c0020052:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020054 <LinkedList<Device>::removeFirst()>:
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005b:	8b 00                	mov    eax,DWORD PTR [eax]
c002005d:	85 c0                	test   eax,eax
c002005f:	75 17                	jne    c0020078 <LinkedList<Device>::removeFirst()+0x24>
c0020061:	83 ec 0c             	sub    esp,0xc
c0020064:	68 48 10 02 c0       	push   0xc0021048
c0020069:	e8 89 16 ff ff       	call   c00116f7 <KePanic(char const*)>
c002006e:	83 c4 10             	add    esp,0x10
c0020071:	e9 92 00 00 00       	jmp    c0020108 <LinkedList<Device>::removeFirst()+0xb4>
c0020076:	66 90                	xchg   ax,ax
c0020078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002007f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020085:	85 c0                	test   eax,eax
c0020087:	74 13                	je     c002009c <LinkedList<Device>::removeFirst()+0x48>
c0020089:	83 ec 0c             	sub    esp,0xc
c002008c:	68 93 10 02 c0       	push   0xc0021093
c0020091:	e8 61 16 ff ff       	call   c00116f7 <KePanic(char const*)>
c0020096:	83 c4 10             	add    esp,0x10
c0020099:	8d 76 00             	lea    esi,[esi+0x0]
c002009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200a2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00200a8:	85 c0                	test   eax,eax
c00200aa:	75 34                	jne    c00200e0 <LinkedList<Device>::removeFirst()+0x8c>
c00200ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200c8:	83 f8 01             	cmp    eax,0x1
c00200cb:	74 27                	je     c00200f4 <LinkedList<Device>::removeFirst()+0xa0>
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	68 6c 10 02 c0       	push   0xc002106c
c00200d5:	e8 1d 16 ff ff       	call   c00116f7 <KePanic(char const*)>
c00200da:	83 c4 10             	add    esp,0x10
c00200dd:	eb 15                	jmp    c00200f4 <LinkedList<Device>::removeFirst()+0xa0>
c00200df:	90                   	nop
c00200e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00200e6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f0:	89 10                	mov    DWORD PTR [eax],edx
c00200f2:	66 90                	xchg   ax,ax
c00200f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200fb:	8d 50 ff             	lea    edx,[eax-0x1]
c00200fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020102:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020105:	8d 76 00             	lea    esi,[esi+0x0]
c0020108:	83 c4 0c             	add    esp,0xc
c002010b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002010c <CPU::~CPU()>:
c002010c:	83 ec 0c             	sub    esp,0xc
c002010f:	ba c0 24 02 c0       	mov    edx,0xc00224c0
c0020114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020118:	89 10                	mov    DWORD PTR [eax],edx
c002011a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011e:	83 ec 0c             	sub    esp,0xc
c0020121:	50                   	push   eax
c0020122:	e8 01 c8 fe ff       	call   c000c928 <Device::~Device()>
c0020127:	83 c4 10             	add    esp,0x10
c002012a:	90                   	nop
c002012b:	83 c4 0c             	add    esp,0xc
c002012e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020130 <CPU::~CPU()>:
c0020130:	83 ec 0c             	sub    esp,0xc
c0020133:	83 ec 0c             	sub    esp,0xc
c0020136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002013a:	e8 cd ff ff ff       	call   c002010c <CPU::~CPU()>
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	83 ec 08             	sub    esp,0x8
c0020145:	68 94 11 00 00       	push   0x1194
c002014a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002014e:	e8 25 a7 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0020153:	83 c4 10             	add    esp,0x10
c0020156:	83 c4 0c             	add    esp,0xc
c0020159:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002015c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002015c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020160:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020163:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020164 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020164:	90                   	nop
c0020165:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020168 <ThreadControlBlock::ThreadControlBlock()>:
c0020168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020173:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020177:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002017e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020182:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020189:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020198:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002019f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00201a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ab:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00201af:	90                   	nop
c00201b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00201b4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00201b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201f4:	90                   	nop
c00201f5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00201f6 <PCI::~PCI()>:
c00201f6:	83 ec 0c             	sub    esp,0xc
c00201f9:	ba a0 33 02 c0       	mov    edx,0xc00233a0
c00201fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020202:	89 10                	mov    DWORD PTR [eax],edx
c0020204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	50                   	push   eax
c002020c:	e8 af c1 fe ff       	call   c000c3c0 <Bus::~Bus()>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	90                   	nop
c0020215:	83 c4 0c             	add    esp,0xc
c0020218:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002021a <PCI::~PCI()>:
c002021a:	83 ec 0c             	sub    esp,0xc
c002021d:	83 ec 0c             	sub    esp,0xc
c0020220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020224:	e8 cd ff ff ff       	call   c00201f6 <PCI::~PCI()>
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	83 ec 08             	sub    esp,0x8
c002022f:	68 5c 01 00 00       	push   0x15c
c0020234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020238:	e8 3b a6 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c002023d:	83 c4 10             	add    esp,0x10
c0020240:	83 c4 0c             	add    esp,0xc
c0020243:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020244 <IDE::~IDE()>:
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	ba 54 34 02 c0       	mov    edx,0xc0023454
c002024c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020250:	89 10                	mov    DWORD PTR [eax],edx
c0020252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020256:	83 ec 0c             	sub    esp,0xc
c0020259:	50                   	push   eax
c002025a:	e8 41 cb fe ff       	call   c000cda0 <HardDiskController::~HardDiskController()>
c002025f:	83 c4 10             	add    esp,0x10
c0020262:	90                   	nop
c0020263:	83 c4 0c             	add    esp,0xc
c0020266:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020268 <IDE::~IDE()>:
c0020268:	83 ec 0c             	sub    esp,0xc
c002026b:	83 ec 0c             	sub    esp,0xc
c002026e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020272:	e8 cd ff ff ff       	call   c0020244 <IDE::~IDE()>
c0020277:	83 c4 10             	add    esp,0x10
c002027a:	83 ec 08             	sub    esp,0x8
c002027d:	68 70 02 00 00       	push   0x270
c0020282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020286:	e8 ed a5 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c002028b:	83 c4 10             	add    esp,0x10
c002028e:	83 c4 0c             	add    esp,0xc
c0020291:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020292 <SATABus::~SATABus()>:
c0020292:	83 ec 0c             	sub    esp,0xc
c0020295:	ba a4 34 02 c0       	mov    edx,0xc00234a4
c002029a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029e:	89 10                	mov    DWORD PTR [eax],edx
c00202a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a4:	83 ec 0c             	sub    esp,0xc
c00202a7:	50                   	push   eax
c00202a8:	e8 f3 ca fe ff       	call   c000cda0 <HardDiskController::~HardDiskController()>
c00202ad:	83 c4 10             	add    esp,0x10
c00202b0:	90                   	nop
c00202b1:	83 c4 0c             	add    esp,0xc
c00202b4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00202b6 <SATABus::~SATABus()>:
c00202b6:	83 ec 0c             	sub    esp,0xc
c00202b9:	83 ec 0c             	sub    esp,0xc
c00202bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c0:	e8 cd ff ff ff       	call   c0020292 <SATABus::~SATABus()>
c00202c5:	83 c4 10             	add    esp,0x10
c00202c8:	83 ec 08             	sub    esp,0x8
c00202cb:	68 64 01 00 00       	push   0x164
c00202d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d4:	e8 9f a5 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c00202d9:	83 c4 10             	add    esp,0x10
c00202dc:	83 c4 0c             	add    esp,0xc
c00202df:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00202e0 <ATA::~ATA()>:
c00202e0:	83 ec 0c             	sub    esp,0xc
c00202e3:	ba e4 34 02 c0       	mov    edx,0xc00234e4
c00202e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ec:	89 10                	mov    DWORD PTR [eax],edx
c00202ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	50                   	push   eax
c00202f6:	e8 87 cb fe ff       	call   c000ce82 <PhysicalDisk::~PhysicalDisk()>
c00202fb:	83 c4 10             	add    esp,0x10
c00202fe:	90                   	nop
c00202ff:	83 c4 0c             	add    esp,0xc
c0020302:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020304 <ATA::~ATA()>:
c0020304:	83 ec 0c             	sub    esp,0xc
c0020307:	83 ec 0c             	sub    esp,0xc
c002030a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030e:	e8 cd ff ff ff       	call   c00202e0 <ATA::~ATA()>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	83 ec 08             	sub    esp,0x8
c0020319:	68 7c 01 00 00       	push   0x17c
c002031e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020322:	e8 51 a5 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0020327:	83 c4 10             	add    esp,0x10
c002032a:	83 c4 0c             	add    esp,0xc
c002032d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002032e <ATAPI::~ATAPI()>:
c002032e:	83 ec 0c             	sub    esp,0xc
c0020331:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c0020336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033a:	89 10                	mov    DWORD PTR [eax],edx
c002033c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020340:	83 ec 0c             	sub    esp,0xc
c0020343:	50                   	push   eax
c0020344:	e8 39 cb fe ff       	call   c000ce82 <PhysicalDisk::~PhysicalDisk()>
c0020349:	83 c4 10             	add    esp,0x10
c002034c:	90                   	nop
c002034d:	83 c4 0c             	add    esp,0xc
c0020350:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020352 <ATAPI::~ATAPI()>:
c0020352:	83 ec 0c             	sub    esp,0xc
c0020355:	83 ec 0c             	sub    esp,0xc
c0020358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035c:	e8 cd ff ff ff       	call   c002032e <ATAPI::~ATAPI()>
c0020361:	83 c4 10             	add    esp,0x10
c0020364:	83 ec 08             	sub    esp,0x8
c0020367:	68 84 01 00 00       	push   0x184
c002036c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020370:	e8 03 a5 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0020375:	83 c4 10             	add    esp,0x10
c0020378:	83 c4 0c             	add    esp,0xc
c002037b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002037c <SATA::~SATA()>:
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c0020384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020388:	89 10                	mov    DWORD PTR [eax],edx
c002038a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038e:	83 ec 0c             	sub    esp,0xc
c0020391:	50                   	push   eax
c0020392:	e8 eb ca fe ff       	call   c000ce82 <PhysicalDisk::~PhysicalDisk()>
c0020397:	83 c4 10             	add    esp,0x10
c002039a:	90                   	nop
c002039b:	83 c4 0c             	add    esp,0xc
c002039e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00203a0 <SATA::~SATA()>:
c00203a0:	83 ec 0c             	sub    esp,0xc
c00203a3:	83 ec 0c             	sub    esp,0xc
c00203a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203aa:	e8 cd ff ff ff       	call   c002037c <SATA::~SATA()>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	83 ec 08             	sub    esp,0x8
c00203b5:	68 7c 01 00 00       	push   0x17c
c00203ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203be:	e8 b5 a4 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c00203c3:	83 c4 10             	add    esp,0x10
c00203c6:	83 c4 0c             	add    esp,0xc
c00203c9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00203ca <SATAPI::~SATAPI()>:
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	ba 04 37 02 c0       	mov    edx,0xc0023704
c00203d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d6:	89 10                	mov    DWORD PTR [eax],edx
c00203d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	50                   	push   eax
c00203e0:	e8 9d ca fe ff       	call   c000ce82 <PhysicalDisk::~PhysicalDisk()>
c00203e5:	83 c4 10             	add    esp,0x10
c00203e8:	90                   	nop
c00203e9:	83 c4 0c             	add    esp,0xc
c00203ec:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00203ee <SATAPI::~SATAPI()>:
c00203ee:	83 ec 0c             	sub    esp,0xc
c00203f1:	83 ec 0c             	sub    esp,0xc
c00203f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f8:	e8 cd ff ff ff       	call   c00203ca <SATAPI::~SATAPI()>
c00203fd:	83 c4 10             	add    esp,0x10
c0020400:	83 ec 08             	sub    esp,0x8
c0020403:	68 84 01 00 00       	push   0x184
c0020408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002040c:	e8 67 a4 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c0020411:	83 c4 10             	add    esp,0x10
c0020414:	83 c4 0c             	add    esp,0xc
c0020417:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020418 <IOAPIC::~IOAPIC()>:
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	ba 44 37 02 c0       	mov    edx,0xc0023744
c0020420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020424:	89 10                	mov    DWORD PTR [eax],edx
c0020426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002042a:	83 ec 0c             	sub    esp,0xc
c002042d:	50                   	push   eax
c002042e:	e8 f5 c4 fe ff       	call   c000c928 <Device::~Device()>
c0020433:	83 c4 10             	add    esp,0x10
c0020436:	90                   	nop
c0020437:	83 c4 0c             	add    esp,0xc
c002043a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002043c <IOAPIC::~IOAPIC()>:
c002043c:	83 ec 0c             	sub    esp,0xc
c002043f:	83 ec 0c             	sub    esp,0xc
c0020442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020446:	e8 cd ff ff ff       	call   c0020418 <IOAPIC::~IOAPIC()>
c002044b:	83 c4 10             	add    esp,0x10
c002044e:	83 ec 08             	sub    esp,0x8
c0020451:	68 68 01 00 00       	push   0x168
c0020456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002045a:	e8 19 a4 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c002045f:	83 c4 10             	add    esp,0x10
c0020462:	83 c4 0c             	add    esp,0xc
c0020465:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020468 <APICTimer::~APICTimer()>:
c0020468:	83 ec 0c             	sub    esp,0xc
c002046b:	ba 8c 37 02 c0       	mov    edx,0xc002378c
c0020470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020474:	89 10                	mov    DWORD PTR [eax],edx
c0020476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047a:	83 ec 0c             	sub    esp,0xc
c002047d:	50                   	push   eax
c002047e:	e8 71 df fe ff       	call   c000e3f4 <Timer::~Timer()>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	90                   	nop
c0020487:	83 c4 0c             	add    esp,0xc
c002048a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002048c <APICTimer::~APICTimer()>:
c002048c:	83 ec 0c             	sub    esp,0xc
c002048f:	83 ec 0c             	sub    esp,0xc
c0020492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020496:	e8 cd ff ff ff       	call   c0020468 <APICTimer::~APICTimer()>
c002049b:	83 c4 10             	add    esp,0x10
c002049e:	83 ec 08             	sub    esp,0x8
c00204a1:	68 60 01 00 00       	push   0x160
c00204a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204aa:	e8 c9 a3 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c00204af:	83 c4 10             	add    esp,0x10
c00204b2:	83 c4 0c             	add    esp,0xc
c00204b5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00204b8 <PIT::~PIT()>:
c00204b8:	83 ec 0c             	sub    esp,0xc
c00204bb:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c00204c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c4:	89 10                	mov    DWORD PTR [eax],edx
c00204c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ca:	83 ec 0c             	sub    esp,0xc
c00204cd:	50                   	push   eax
c00204ce:	e8 21 df fe ff       	call   c000e3f4 <Timer::~Timer()>
c00204d3:	83 c4 10             	add    esp,0x10
c00204d6:	90                   	nop
c00204d7:	83 c4 0c             	add    esp,0xc
c00204da:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00204dc <PIT::~PIT()>:
c00204dc:	83 ec 0c             	sub    esp,0xc
c00204df:	83 ec 0c             	sub    esp,0xc
c00204e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e6:	e8 cd ff ff ff       	call   c00204b8 <PIT::~PIT()>
c00204eb:	83 c4 10             	add    esp,0x10
c00204ee:	83 ec 08             	sub    esp,0x8
c00204f1:	68 5c 01 00 00       	push   0x15c
c00204f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204fa:	e8 79 a3 fe ff       	call   c000a878 <operator delete(void*, unsigned long)>
c00204ff:	83 c4 10             	add    esp,0x10
c0020502:	83 c4 0c             	add    esp,0xc
c0020505:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be f1 25 02 c0       	mov    esi,0xc00225f1
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 0d 26 02 c0       	mov    esi,0xc002260d
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
