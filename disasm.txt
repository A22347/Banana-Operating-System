
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 29 11 02 00       	call   c002114e <_init>
c0000025:	c3                   	ret    
c0000026:	bb d2 1d 02 c0       	mov    ebx,0xc0021dd2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e0 1d 02 c0    	cmp    ebx,0xc0021de0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 5d 02 c0       	mov    eax,0xc0025df8
c0000049:	3d f8 5d 02 c0       	cmp    eax,0xc0025df8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 5d 02 c0       	push   0xc0025df8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 5d 02 c0       	mov    eax,0xc0025df8
c0000075:	2d f8 5d 02 c0       	sub    eax,0xc0025df8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 5d 02 c0       	push   0xc0025df8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 80 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025f80,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e8 1d 02 c0       	mov    ebx,0xc0021de8
c00000bb:	81 eb e4 1d 02 c0    	sub    ebx,0xc0021de4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e4 1d 02 c0       	mov    esi,0xc0021de4
c00000ca:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 84 5f 02 c0       	mov    ds:0xc0025f84,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 5d 02 c0       	push   0xc0025df8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 80 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f80,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 88 5f 02 c0       	push   0xc0025f88
c000012c:	68 f8 5d 02 c0       	push   0xc0025df8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 d4 74 01 00       	call   c00177ac <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 e8 c4 00 00       	call   c000c7d8 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 b2 74 01 00       	call   c00177ac <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 7b 79 01 00       	call   c0017c94 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 be 7f 01 00       	call   c00182e0 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 d0 63 02 c0 	lgdtd  ds:0xc00263d0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 76 e2 00 00       	call   c000e78d <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 a0 5f 02 c0       	mov    ds:0xc0025fa0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 a0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d a0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fa0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 00 1e 02 c0 02 	test   BYTE PTR [edx-0x3ffde200],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 00 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde200],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 00 1e 02 c0 08 	test   BYTE PTR [edx-0x3ffde200],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 00 1e 02 c0 04 	test   BYTE PTR [ebx-0x3ffde200],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 00 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde200],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d c0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d c0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fc0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 c4 5f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda03c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 c4 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda03c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d c0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fc0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 ec 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fec,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d fc 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ffc
c0000d6c:	c7 42 0c f4 5f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025ff4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 fc 5f 02 c0    	mov    DWORD PTR ds:0xc0025ffc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 ec 5f 02 c0    	mov    DWORD PTR ds:0xc0025fec,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 c0 5f 02 c0 02 	test   BYTE PTR ds:0xc0025fc0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d c0 5f 02 c0    	mov    edi,DWORD PTR ds:0xc0025fc0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 c4 5f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda03c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 c4 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda03c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 f4 5f 02 c0 	lea    edx,[eax*8-0x3ffda00c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 00 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026000
c00010ee:	81 fb f4 5f 02 c0    	cmp    ebx,0xc0025ff4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d f4 5f 02 c0       	cmp    eax,0xc0025ff4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d f0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025ff0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 fc 5f 02 c0       	mov    ds:0xc0025ffc,eax
c000112a:	a3 00 60 02 c0       	mov    ds:0xc0026000,eax
c000112f:	a3 f0 5f 02 c0       	mov    ds:0xc0025ff0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 f4 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ff4
c000113d:	c7 40 0c f4 5f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025ff4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 00 60 02 c0       	mov    ds:0xc0026000,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 f4 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ff4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 b8 5f 02 c0 	lea    ebp,[edx*4-0x3ffda048]
c000118e:	8b 14 95 c0 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda040]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 c0 5f 02 c0 	lea    ecx,[edx*4-0x3ffda040]
c00011a9:	8b 14 95 c0 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda040]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd f4 62 02 c0 	or     DWORD PTR [edi*4-0x3ffd9d0c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 f4 5f 02 c0 	lea    eax,[eax*8-0x3ffda00c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d fc 5f 02 c0    	mov    DWORD PTR ds:0xc0025ffc,ecx
c0001263:	89 0d 00 60 02 c0    	mov    DWORD PTR ds:0xc0026000,ecx
c0001269:	c7 41 08 f4 5f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025ff4
c0001270:	c7 41 0c f4 5f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025ff4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd ec 5f 02 c0 	lea    edx,[ecx*8-0x3ffda014]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d f4 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9d0c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d f4 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9d0c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 ec 5f 02 c0 	lea    edx,[eax*4-0x3ffda014]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d f4 62 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9d0c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d fc 5f 02 c0    	mov    DWORD PTR ds:0xc0025ffc,edi
c0001336:	89 3d 00 60 02 c0    	mov    DWORD PTR ds:0xc0026000,edi
c000133c:	c7 47 08 f4 5f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025ff4
c0001343:	c7 47 0c f4 5f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025ff4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d f0 5f 02 c0    	mov    DWORD PTR ds:0xc0025ff0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 ec 5f 02 c0       	mov    eax,ds:0xc0025fec
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d ec 5f 02 c0    	mov    DWORD PTR ds:0xc0025fec,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba c0 5f 02 c0       	mov    edx,0xc0025fc0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d c0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fc0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 14 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026314
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 14 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026314,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 14 63 02 c0    	mov    DWORD PTR ds:0xc0026314,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 ec 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fec,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d ec 5f 02 c0    	mov    DWORD PTR ds:0xc0025fec,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d c0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fc0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 1c 63 02 c0    	push   DWORD PTR ds:0xc002631c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d c0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fc0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 1c 63 02 c0       	mov    eax,ds:0xc002631c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d ec 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fec,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 ec 5f 02 c0       	mov    eax,ds:0xc0025fec
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 c4 5f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda03c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 f4 5f 02 c0       	mov    eax,0xc0025ff4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d ec 62 02 c0       	cmp    eax,0xc00262ec
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 10 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026310
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 24 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026324
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 34 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026334
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 04 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde0fc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 04 63 02 c0    	mov    DWORD PTR ds:0xc0026304,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 08 63 02 c0    	mov    DWORD PTR ds:0xc0026308,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 0c 63 02 c0    	mov    DWORD PTR ds:0xc002630c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 14 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026314,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 be 94 01 00       	jmp    c001afe4 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 f0 94 01 00       	jmp    c001b02c <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 19 95 01 00       	jmp    c001b074 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 f6 f0 01 00       	call   c0020f34 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 20 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddfe0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 20 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddfe0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 40 20 02 c0       	mov    edx,0xc0022040
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba e4 4a 02 c0       	mov    edx,0xc0024ae4
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 4c 20 02 c0       	mov    edx,0xc002204c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 30 20 02 c0       	mov    edx,0xc0022030
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 60 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9ca0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 40 63 02 c0    	mov    ax,ds:0xc0026340
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 40 63 02 c0    	mov    ds:0xc0026340,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 f3 de 01 00       	call   c0020f34 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 52 20 02 c0       	mov    eax,0xc0022052
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad a0 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde060]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 5b 20 02 c0       	mov    eax,0xc002205b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 20 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddfe0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 be c8 01 00       	call   c0020f34 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 30 20 02 c0       	mov    edx,0xc0022030
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 30 1f 02 c0       	mov    edx,0xc0021f30
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 60 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9ca0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 60 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9ca0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 85 b2 01 00       	call   c0020f34 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 6b b2 01 00       	call   c0020f34 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 77 1f 02 c0       	mov    eax,0xc0021f77
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 70 1f 02 c0       	mov    eax,0xc0021f70
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 04 9e 01 00       	call   c0020f34 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 60 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ca0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 60 1f 02 c0       	mov    esi,0xc0021f60
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 78 97 01 00       	call   c0020f34 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 40 20 02 c0       	mov    edx,0xc0022040
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 40 1f 02 c0       	mov    edx,0xc0021f40
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 62 20 02 c0       	mov    edx,0xc0022062
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 6e 20 02 c0       	mov    edx,0xc002206e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 82 20 02 c0       	mov    edx,0xc0022082
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c a0 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc00223a0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 a0 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223a0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 a0 21 02 c0       	mov    eax,0xc00221a0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 e0 20 02 c0       	mov    eax,0xc00220e0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 a0 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf60]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000888b:	48                   	dec    eax
c000888c:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00088a2:	48                   	dec    eax
c00088a3:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00088b3:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00088c2:	48                   	dec    eax
c00088c3:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00088dd:	e8 1e f6 00 00       	call   c0017f00 <schedule()>
c00088e2:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00088e7:	48                   	dec    eax
c00088e8:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 a0 24 02 c0       	push   0xc00224a0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 c8 63 02 c0       	mov    eax,0xc00263c8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 a9 24 02 c0       	push   0xc00224a9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 34 0f 02 c0       	mov    eax,0xc0020f34
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 b3 24 02 c0       	push   0xc00224b3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 68 0c 02 c0       	mov    eax,0xc0020c68
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 bc 24 02 c0       	push   0xc00224bc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 34 10 02 c0       	mov    eax,0xc0021034
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 c6 24 02 c0       	push   0xc00224c6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 b4 0d 02 c0       	mov    eax,0xc0020db4
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 cf 24 02 c0       	push   0xc00224cf
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 cc 63 02 c0       	mov    eax,0xc00263cc
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 dc 24 02 c0       	push   0xc00224dc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 cd 63 02 c0       	mov    eax,0xc00263cd
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 f7 55 00 00       	call   c000e03c <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 e9 24 02 c0       	push   0xc00224e9
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 00 25 02 c0 	mov    DWORD PTR [esp],0xc0022500
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0008aa2:	68 19 25 02 c0       	push   0xc0022519
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 2d f0 00 00       	call   c0017adc <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 20 f2 00 00       	call   c0017ce4 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 28 87 01 c0       	push   0xc0018728
c0008acd:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0008ad3:	e8 0c f2 00 00       	call   c0017ce4 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 a8 78 02 c0       	mov    ds:0xc00278a8,eax
c0008ae0:	68 c0 26 02 c0       	push   0xc00226c0
c0008ae5:	c6 05 cd 63 02 c0 01 	mov    BYTE PTR ds:0xc00263cd,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 0d 00 01 00       	call   c0018b03 <Vm::initialise8086()>
c0008af6:	e8 07 43 00 00       	call   c000ce02 <Fs::initVFS()>
c0008afb:	c7 04 24 26 25 02 c0 	mov    DWORD PTR [esp],0xc0022526
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 c0 26 02 c0       	push   0xc00226c0
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 1a d8 00 00       	call   c001634a <Sys::loadSyscalls()>
c0008b30:	e8 ef b6 00 00       	call   c0014224 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 40 25 02 c0       	push   0xc0022540
c0008b3f:	68 49 25 02 c0       	push   0xc0022549
c0008b44:	e8 c4 c5 00 00       	call   c001510d <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 a3 4d 00 00       	call   c000d8f4 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 e4 26 02 c0 	mov    DWORD PTR [esp],0xc00226e4
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 8e 54 00 00       	call   c000dffc <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 51 25 02 c0 	mov    DWORD PTR [esp],0xc0022551
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 0d b2 00 00       	call   c0013d8c <Krnl::startCPUs()>
c0008b7f:	c7 04 24 6b 25 02 c0 	mov    DWORD PTR [esp],0xc002256b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 7c 25 02 c0       	push   0xc002257c
c0008b9a:	e8 7b e9 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 a3 eb 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 43 f5 00 00       	call   c00180f8 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 98 25 02 c0       	push   0xc0022598
c0008bc9:	50                   	push   eax
c0008bca:	e8 e7 54 00 00       	call   c000e0b6 <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 94 27 02 c0       	mov    edx,0xc0022794
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 e1 63 02 c0 04 	test   BYTE PTR ds:0xc00263e1,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 93 7e 01 00       	call   c0020bf6 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 f0 9e 00 00       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 c9 9e 00 00       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 a7 9e 00 00       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 85 9e 00 00       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 e0 63 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00263e0,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 93 9d 00 00       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 6e 9d 00 00       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 fd 7c 01 00       	call   c0020bb0 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 ba 7c 01 00       	call   c0020b90 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 8a 9d 00 00       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 a1 25 02 c0       	push   0xc00225a1
c0008f46:	e8 e2 b3 00 00       	call   c001432d <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 a7 25 02 c0       	push   0xc00225a7
c0008f7e:	e8 aa b3 00 00       	call   c001432d <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 04 27 02 c0       	push   0xc0022704
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 e0 63 02 c0 04 	test   BYTE PTR ds:0xc00263e0,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 a0 57 02 c0 	sete   BYTE PTR ds:0xc00257a0
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 ad 25 02 c0       	push   0xc00225ad
c0008ff3:	e8 73 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 c3 25 02 c0       	push   0xc00225c3
c0009004:	e8 62 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 d7 25 02 c0       	push   0xc00225d7
c0009012:	e8 54 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 ea 25 02 c0       	push   0xc00225ea
c0009023:	e8 43 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 01 26 02 c0       	push   0xc0022601
c0009031:	e8 35 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 17 26 02 c0 	mov    DWORD PTR [esp],0xc0022617
c000903d:	e8 29 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 29 26 02 c0 	mov    DWORD PTR [esp],0xc0022629
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 9c 8d 00 00       	call   c0011e00 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 43 26 02 c0 	mov    DWORD PTR [esp],0xc0022643
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 2e 4e 00 00       	call   c000deb2 <Device::addChild(Device*)>
c0009084:	c7 04 24 28 27 02 c0 	mov    DWORD PTR [esp],0xc0022728
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 48 27 02 c0 	mov    DWORD PTR [esp],0xc0022748
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 5d 26 02 c0 	mov    DWORD PTR [esp],0xc002265d
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 51 25 02 c0 	mov    DWORD PTR [esp],0xc0022551
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 6a 9c 00 00       	call   c0012d46 <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 c7 4d 00 00       	call   c000deb2 <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 68 27 02 c0       	push   0xc0022768
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 3d 53 00 00       	call   c000e44e <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 8a 4d 00 00       	call   c000deb2 <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 6e 26 02 c0       	push   0xc002266e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 a2 ec 00 00       	call   c0017df8 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 89 26 02 c0       	push   0xc0022689
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 c6 38 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 9a 26 02 c0       	push   0xc002269a
c00091c2:	e8 66 b1 00 00       	call   c001432d <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 a7 26 02 c0       	push   0xc00226a7
c00091d7:	e8 51 b1 00 00       	call   c001432d <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 b1 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc00226b1
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 3a b1 00 00       	jmp    c001432d <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 d2 63 02 c0       	mov    ds:0xc00263d2,eax
c00092af:	66 89 15 d0 63 02 c0 	mov    WORD PTR ds:0xc00263d0,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00093c6:	48                   	dec    eax
c00093c7:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 99 7d 01 00       	call   c00211b6 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 90 7d 01 00       	call   c00211b6 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 d8 63 02 c0 ff 07 	mov    WORD PTR ds:0xc00263d8,0x7ff
c0009519:	a3 da 63 02 c0       	mov    ds:0xc00263da,eax
c000951e:	0f 01 1d d8 63 02 c0 	lidtd  ds:0xc00263d8
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c0009810:	e8 2d 26 00 00       	call   c000be42 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 a9 17 00 00       	call   c000afdc <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 de 17 00 00       	call   c000b020 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 b8 27 02 c0       	push   0xc00227b8
c000989d:	e8 c9 31 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 2c 56 02 c0       	mov    eax,ds:0xc002562c
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 30 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026530
c00098cc:	8b 3d 2c 56 02 c0    	mov    edi,DWORD PTR ds:0xc002562c
c00098d2:	e8 f4 04 00 00       	call   c0009dcb <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 5c 24 00 00       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 2c 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002562c,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 2c 56 02 c0       	mov    eax,ds:0xc002562c
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 e4 27 02 c0       	push   0xc00227e4
c0009918:	e8 4e 31 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 d6 27 02 c0       	push   0xc00227d6
c0009937:	e8 f1 a9 00 00       	call   c001432d <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 db 27 02 c0       	push   0xc00227db
c000994d:	e8 db a9 00 00       	call   c001432d <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000996d:	48                   	dec    eax
c000996e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000998b:	e8 b2 24 00 00       	call   c000be42 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c00099a1:	e8 46 21 00 00       	call   c000baec <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 14 28 02 c0       	push   0xc0022814
c0009ace:	e8 98 2f 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 04 0a 00 00       	call   c000a4dc <installVgaTextImplementation()>
c0009ad8:	0f b6 05 40 56 02 c0 	movzx  eax,BYTE PTR ds:0xc0025640
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 40 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda9c0]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 76 56 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda98a],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 75 56 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda98b]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 40 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda9c0]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 2c 28 02 c0       	push   0xc002282c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 e0 63 02 c0       	mov    ds:0xc00263e0,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 ed 03 00 00       	call   c0009f6d <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 d3 1c 00 00       	call   c000b858 <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 84 1d 00 00       	call   c000b914 <VAS::VAS()>
c0009b90:	89 1d 30 65 02 c0    	mov    DWORD PTR ds:0xc0026530,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 c8 63 02 c0    	mov    DWORD PTR ds:0xc00263c8,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 f8 1f 00 00       	call   c000bbc4 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 18             	sub    esp,0x18
c0009bde:	68 4b 28 02 c0       	push   0xc002284b
c0009be3:	e8 83 2e 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bec:	31 d2                	xor    edx,edx
c0009bee:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	c1 e8 0c             	shr    eax,0xc
c0009bf9:	31 c9                	xor    ecx,ecx
c0009bfb:	eb 17                	jmp    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009bfd:	85 c9                	test   ecx,ecx
c0009bff:	75 04                	jne    c0009c05 <Phys::allocateDMA(unsigned long)+0x32>
c0009c01:	89 d5                	mov    ebp,edx
c0009c03:	89 d3                	mov    ebx,edx
c0009c05:	8d 71 01             	lea    esi,[ecx+0x1]
c0009c08:	39 f0                	cmp    eax,esi
c0009c0a:	74 23                	je     c0009c2f <Phys::allocateDMA(unsigned long)+0x5c>
c0009c0c:	42                   	inc    edx
c0009c0d:	89 f1                	mov    ecx,esi
c0009c0f:	83 fa 2f             	cmp    edx,0x2f
c0009c12:	7f 11                	jg     c0009c25 <Phys::allocateDMA(unsigned long)+0x52>
c0009c14:	80 ba 20 64 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9be0],0x0
c0009c1b:	74 e0                	je     c0009bfd <Phys::allocateDMA(unsigned long)+0x2a>
c0009c1d:	31 c9                	xor    ecx,ecx
c0009c1f:	42                   	inc    edx
c0009c20:	83 fa 2f             	cmp    edx,0x2f
c0009c23:	7e ef                	jle    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009c25:	83 c4 0c             	add    esp,0xc
c0009c28:	31 c0                	xor    eax,eax
c0009c2a:	5b                   	pop    ebx
c0009c2b:	5e                   	pop    esi
c0009c2c:	5f                   	pop    edi
c0009c2d:	5d                   	pop    ebp
c0009c2e:	c3                   	ret    
c0009c2f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0009c32:	89 d7                	mov    edi,edx
c0009c34:	4f                   	dec    edi
c0009c35:	79 03                	jns    c0009c3a <Phys::allocateDMA(unsigned long)+0x67>
c0009c37:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009c3a:	c1 ff 04             	sar    edi,0x4
c0009c3d:	89 da                	mov    edx,ebx
c0009c3f:	c1 fa 04             	sar    edx,0x4
c0009c42:	39 fa                	cmp    edx,edi
c0009c44:	75 4a                	jne    c0009c90 <Phys::allocateDMA(unsigned long)+0xbd>
c0009c46:	85 f6                	test   esi,esi
c0009c48:	74 1b                	je     c0009c65 <Phys::allocateDMA(unsigned long)+0x92>
c0009c4a:	bd 20 64 02 c0       	mov    ebp,0xc0026420
c0009c4f:	8d 93 20 64 02 c0    	lea    edx,[ebx-0x3ffd9be0]
c0009c55:	f7 d5                	not    ebp
c0009c57:	29 dd                	sub    ebp,ebx
c0009c59:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c5c:	42                   	inc    edx
c0009c5d:	8d 74 15 00          	lea    esi,[ebp+edx*1+0x0]
c0009c61:	39 f1                	cmp    ecx,esi
c0009c63:	7f f4                	jg     c0009c59 <Phys::allocateDMA(unsigned long)+0x86>
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	01 05 10 64 02 c0    	add    DWORD PTR ds:0xc0026410,eax
c0009c6e:	68 64 28 02 c0       	push   0xc0022864
c0009c73:	e8 f3 2d 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	85 ff                	test   edi,edi
c0009c7d:	74 17                	je     c0009c96 <Phys::allocateDMA(unsigned long)+0xc3>
c0009c7f:	83 c4 0c             	add    esp,0xc
c0009c82:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009c88:	5b                   	pop    ebx
c0009c89:	c1 e0 0c             	shl    eax,0xc
c0009c8c:	5e                   	pop    esi
c0009c8d:	5f                   	pop    edi
c0009c8e:	5d                   	pop    ebp
c0009c8f:	c3                   	ret    
c0009c90:	89 ea                	mov    edx,ebp
c0009c92:	31 c9                	xor    ecx,ecx
c0009c94:	eb 89                	jmp    c0009c1f <Phys::allocateDMA(unsigned long)+0x4c>
c0009c96:	83 c4 0c             	add    esp,0xc
c0009c99:	c1 e3 0c             	shl    ebx,0xc
c0009c9c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009ca2:	5b                   	pop    ebx
c0009ca3:	5e                   	pop    esi
c0009ca4:	5f                   	pop    edi
c0009ca5:	5d                   	pop    ebp
c0009ca6:	c3                   	ret    

c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ca7:	83 ec 18             	sub    esp,0x18
c0009caa:	68 7b 28 02 c0       	push   0xc002287b
c0009caf:	e8 b7 2d 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009cb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cc5:	c1 e9 0c             	shr    ecx,0xc
c0009cc8:	29 0d 10 64 02 c0    	sub    DWORD PTR ds:0xc0026410,ecx
c0009cce:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009cd6:	76 29                	jbe    c0009d01 <Phys::freeDMA(unsigned long, unsigned long)+0x5a>
c0009cd8:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009cde:	c1 ea 0c             	shr    edx,0xc
c0009ce1:	83 c2 10             	add    edx,0x10
c0009ce4:	85 c9                	test   ecx,ecx
c0009ce6:	74 15                	je     c0009cfd <Phys::freeDMA(unsigned long, unsigned long)+0x56>
c0009ce8:	8d 82 20 64 02 c0    	lea    eax,[edx-0x3ffd9be0]
c0009cee:	8d 94 11 20 64 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9be0]
c0009cf5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009cf8:	40                   	inc    eax
c0009cf9:	39 d0                	cmp    eax,edx
c0009cfb:	75 f8                	jne    c0009cf5 <Phys::freeDMA(unsigned long, unsigned long)+0x4e>
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	c3                   	ret    
c0009d01:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009d07:	c1 ea 0c             	shr    edx,0xc
c0009d0a:	eb d8                	jmp    c0009ce4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>

c0009d0c <Phys::setPageState(unsigned long, bool)>:
c0009d0c:	56                   	push   esi
c0009d0d:	ba 01 00 00 00       	mov    edx,0x1
c0009d12:	53                   	push   ebx
c0009d13:	8b 35 84 57 02 c0    	mov    esi,DWORD PTR ds:0xc0025784
c0009d19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d21:	89 c8                	mov    eax,ecx
c0009d23:	83 e1 07             	and    ecx,0x7
c0009d26:	c1 e8 03             	shr    eax,0x3
c0009d29:	d3 e3                	shl    ebx,cl
c0009d2b:	01 c6                	add    esi,eax
c0009d2d:	d3 e2                	shl    edx,cl
c0009d2f:	f7 d2                	not    edx
c0009d31:	20 16                	and    BYTE PTR [esi],dl
c0009d33:	03 05 84 57 02 c0    	add    eax,DWORD PTR ds:0xc0025784
c0009d39:	08 18                	or     BYTE PTR [eax],bl
c0009d3b:	5b                   	pop    ebx
c0009d3c:	5e                   	pop    esi
c0009d3d:	c3                   	ret    

c0009d3e <Phys::getPageState(unsigned long)>:
c0009d3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d42:	8b 15 84 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025784
c0009d48:	89 c8                	mov    eax,ecx
c0009d4a:	83 e1 07             	and    ecx,0x7
c0009d4d:	c1 e8 03             	shr    eax,0x3
c0009d50:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d54:	d3 f8                	sar    eax,cl
c0009d56:	83 e0 01             	and    eax,0x1
c0009d59:	c3                   	ret    

c0009d5a <Phys::freePage(unsigned long)>:
c0009d5a:	53                   	push   ebx
c0009d5b:	83 ec 10             	sub    esp,0x10
c0009d5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d62:	53                   	push   ebx
c0009d63:	68 91 28 02 c0       	push   0xc0022891
c0009d68:	e8 fe 2c 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009d6d:	83 c4 10             	add    esp,0x10
c0009d70:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c0009d76:	76 3d                	jbe    c0009db5 <Phys::freePage(unsigned long)+0x5b>
c0009d78:	83 ec 0c             	sub    esp,0xc
c0009d7b:	c1 eb 0c             	shr    ebx,0xc
c0009d7e:	53                   	push   ebx
c0009d7f:	e8 ba ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009d84:	83 c4 10             	add    esp,0x10
c0009d87:	84 c0                	test   al,al
c0009d89:	74 19                	je     c0009da4 <Phys::freePage(unsigned long)+0x4a>
c0009d8b:	83 ec 08             	sub    esp,0x8
c0009d8e:	ff 0d 10 64 02 c0    	dec    DWORD PTR ds:0xc0026410
c0009d94:	6a 00                	push   0x0
c0009d96:	53                   	push   ebx
c0009d97:	e8 70 ff ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009d9c:	83 c4 10             	add    esp,0x10
c0009d9f:	83 c4 08             	add    esp,0x8
c0009da2:	5b                   	pop    ebx
c0009da3:	c3                   	ret    
c0009da4:	c7 44 24 10 a4 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc00228a4
c0009dac:	83 c4 08             	add    esp,0x8
c0009daf:	5b                   	pop    ebx
c0009db0:	e9 78 a5 00 00       	jmp    c001432d <Krnl::panic(char const*)>
c0009db5:	83 ec 08             	sub    esp,0x8
c0009db8:	68 00 10 00 00       	push   0x1000
c0009dbd:	53                   	push   ebx
c0009dbe:	e8 e4 fe ff ff       	call   c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>
c0009dc3:	83 c4 10             	add    esp,0x10
c0009dc6:	83 c4 08             	add    esp,0x8
c0009dc9:	5b                   	pop    ebx
c0009dca:	c3                   	ret    

c0009dcb <Phys::allocatePage()>:
c0009dcb:	56                   	push   esi
c0009dcc:	53                   	push   ebx
c0009dcd:	83 ec 14             	sub    esp,0x14
c0009dd0:	8b 35 04 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026404
c0009dd6:	89 f3                	mov    ebx,esi
c0009dd8:	eb 0a                	jmp    c0009de4 <Phys::allocatePage()+0x19>
c0009dda:	89 1d 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,ebx
c0009de0:	39 de                	cmp    esi,ebx
c0009de2:	74 24                	je     c0009e08 <Phys::allocatePage()+0x3d>
c0009de4:	53                   	push   ebx
c0009de5:	e8 54 ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009dea:	5a                   	pop    edx
c0009deb:	84 c0                	test   al,al
c0009ded:	74 72                	je     c0009e61 <Phys::allocatePage()+0x96>
c0009def:	43                   	inc    ebx
c0009df0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009df6:	75 e2                	jne    c0009dda <Phys::allocatePage()+0xf>
c0009df8:	31 db                	xor    ebx,ebx
c0009dfa:	c7 05 04 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026404,0x0
c0009e04:	39 de                	cmp    esi,ebx
c0009e06:	75 dc                	jne    c0009de4 <Phys::allocatePage()+0x19>
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	80 35 50 64 02 c0 01 	xor    BYTE PTR ds:0xc0026450,0x1
c0009e12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e1a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e20:	e8 d5 28 00 00       	call   c000c6fa <VAS::scanForEviction()>
c0009e25:	83 c4 10             	add    esp,0x10
c0009e28:	85 c0                	test   eax,eax
c0009e2a:	75 76                	jne    c0009ea2 <Phys::allocatePage()+0xd7>
c0009e2c:	83 ec 0c             	sub    esp,0xc
c0009e2f:	68 00 10 00 00       	push   0x1000
c0009e34:	e8 9a fd ff ff       	call   c0009bd3 <Phys::allocateDMA(unsigned long)>
c0009e39:	83 c4 10             	add    esp,0x10
c0009e3c:	85 c0                	test   eax,eax
c0009e3e:	75 7f                	jne    c0009ebf <Phys::allocatePage()+0xf4>
c0009e40:	83 ec 0c             	sub    esp,0xc
c0009e43:	68 3c 29 02 c0       	push   0xc002293c
c0009e48:	e8 e0 a4 00 00       	call   c001432d <Krnl::panic(char const*)>
c0009e4d:	83 c4 10             	add    esp,0x10
c0009e50:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0009e56:	53                   	push   ebx
c0009e57:	e8 e2 fe ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009e5c:	5a                   	pop    edx
c0009e5d:	84 c0                	test   al,al
c0009e5f:	75 8e                	jne    c0009def <Phys::allocatePage()+0x24>
c0009e61:	6a 01                	push   0x1
c0009e63:	53                   	push   ebx
c0009e64:	e8 a3 fe ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009e69:	5a                   	pop    edx
c0009e6a:	a1 10 64 02 c0       	mov    eax,ds:0xc0026410
c0009e6f:	59                   	pop    ecx
c0009e70:	40                   	inc    eax
c0009e71:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c0009e77:	a3 10 64 02 c0       	mov    ds:0xc0026410,eax
c0009e7c:	c1 e2 0c             	shl    edx,0xc
c0009e7f:	52                   	push   edx
c0009e80:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c0009e86:	50                   	push   eax
c0009e87:	68 ba 28 02 c0       	push   0xc00228ba
c0009e8c:	e8 da 2b 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009e91:	a1 04 64 02 c0       	mov    eax,ds:0xc0026404
c0009e96:	83 c4 10             	add    esp,0x10
c0009e99:	c1 e0 0c             	shl    eax,0xc
c0009e9c:	83 c4 14             	add    esp,0x14
c0009e9f:	5b                   	pop    ebx
c0009ea0:	5e                   	pop    esi
c0009ea1:	c3                   	ret    
c0009ea2:	83 ec 08             	sub    esp,0x8
c0009ea5:	89 c2                	mov    edx,eax
c0009ea7:	6a 01                	push   0x1
c0009ea9:	c1 ea 0c             	shr    edx,0xc
c0009eac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eb0:	52                   	push   edx
c0009eb1:	e8 56 fe ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009eb6:	83 c4 10             	add    esp,0x10
c0009eb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ebd:	eb dd                	jmp    c0009e9c <Phys::allocatePage()+0xd1>
c0009ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ec3:	83 ec 0c             	sub    esp,0xc
c0009ec6:	68 1c 29 02 c0       	push   0xc002291c
c0009ecb:	e8 9b 2b 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009ed0:	83 c4 10             	add    esp,0x10
c0009ed3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ed7:	eb c3                	jmp    c0009e9c <Phys::allocatePage()+0xd1>

c0009ed9 <Phys::allocateContiguousPages(int)>:
c0009ed9:	57                   	push   edi
c0009eda:	56                   	push   esi
c0009edb:	53                   	push   ebx
c0009edc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ee0:	fa                   	cli    
c0009ee1:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0009ee7:	31 db                	xor    ebx,ebx
c0009ee9:	85 db                	test   ebx,ebx
c0009eeb:	75 11                	jne    c0009efe <Phys::allocateContiguousPages(int)+0x25>
c0009eed:	e8 d9 fe ff ff       	call   c0009dcb <Phys::allocatePage()>
c0009ef2:	83 fe 01             	cmp    esi,0x1
c0009ef5:	89 c7                	mov    edi,eax
c0009ef7:	74 21                	je     c0009f1a <Phys::allocateContiguousPages(int)+0x41>
c0009ef9:	bb 01 00 00 00       	mov    ebx,0x1
c0009efe:	e8 c8 fe ff ff       	call   c0009dcb <Phys::allocatePage()>
c0009f03:	89 da                	mov    edx,ebx
c0009f05:	c1 e2 0c             	shl    edx,0xc
c0009f08:	01 fa                	add    edx,edi
c0009f0a:	39 c2                	cmp    edx,eax
c0009f0c:	74 20                	je     c0009f2e <Phys::allocateContiguousPages(int)+0x55>
c0009f0e:	bb 01 00 00 00       	mov    ebx,0x1
c0009f13:	89 c7                	mov    edi,eax
c0009f15:	83 fe 01             	cmp    esi,0x1
c0009f18:	75 e4                	jne    c0009efe <Phys::allocateContiguousPages(int)+0x25>
c0009f1a:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0009f1f:	48                   	dec    eax
c0009f20:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0009f25:	75 01                	jne    c0009f28 <Phys::allocateContiguousPages(int)+0x4f>
c0009f27:	fb                   	sti    
c0009f28:	89 f8                	mov    eax,edi
c0009f2a:	5b                   	pop    ebx
c0009f2b:	5e                   	pop    esi
c0009f2c:	5f                   	pop    edi
c0009f2d:	c3                   	ret    
c0009f2e:	43                   	inc    ebx
c0009f2f:	39 f3                	cmp    ebx,esi
c0009f31:	75 b6                	jne    c0009ee9 <Phys::allocateContiguousPages(int)+0x10>
c0009f33:	eb e5                	jmp    c0009f1a <Phys::allocateContiguousPages(int)+0x41>

c0009f35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f35:	56                   	push   esi
c0009f36:	53                   	push   ebx
c0009f37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f3b:	39 1d 08 64 02 c0    	cmp    DWORD PTR ds:0xc0026408,ebx
c0009f41:	73 06                	jae    c0009f49 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f43:	89 1d 08 64 02 c0    	mov    DWORD PTR ds:0xc0026408,ebx
c0009f49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f4d:	c1 eb 0c             	shr    ebx,0xc
c0009f50:	c1 e8 0c             	shr    eax,0xc
c0009f53:	39 d8                	cmp    eax,ebx
c0009f55:	73 13                	jae    c0009f6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f57:	6a 00                	push   0x0
c0009f59:	8d 70 01             	lea    esi,[eax+0x1]
c0009f5c:	50                   	push   eax
c0009f5d:	e8 aa fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009f62:	5a                   	pop    edx
c0009f63:	89 f0                	mov    eax,esi
c0009f65:	59                   	pop    ecx
c0009f66:	39 f3                	cmp    ebx,esi
c0009f68:	75 ed                	jne    c0009f57 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f6a:	5b                   	pop    ebx
c0009f6b:	5e                   	pop    esi
c0009f6c:	c3                   	ret    

c0009f6d <Phys::physicalMemorySetup(unsigned int)>:
c0009f6d:	55                   	push   ebp
c0009f6e:	57                   	push   edi
c0009f6f:	56                   	push   esi
c0009f70:	53                   	push   ebx
c0009f71:	31 db                	xor    ebx,ebx
c0009f73:	83 ec 40             	sub    esp,0x40
c0009f76:	6a 30                	push   0x30
c0009f78:	6a 00                	push   0x0
c0009f7a:	68 20 64 02 c0       	push   0xc0026420
c0009f7f:	e8 00 67 ff ff       	call   c0000684 <memset>
c0009f84:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8d:	05 00 10 00 00       	add    eax,0x1000
c0009f92:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009f96:	5a                   	pop    edx
c0009f97:	59                   	pop    ecx
c0009f98:	50                   	push   eax
c0009f99:	68 d8 28 02 c0       	push   0xc00228d8
c0009f9e:	e8 c8 2a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	83 ec 08             	sub    esp,0x8
c0009fa9:	6a 01                	push   0x1
c0009fab:	53                   	push   ebx
c0009fac:	43                   	inc    ebx
c0009fad:	e8 5a fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009fb2:	83 c4 10             	add    esp,0x10
c0009fb5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009fbb:	75 e9                	jne    c0009fa6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fbd:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fc4:	66 85 c0             	test   ax,ax
c0009fc7:	0f 84 8e 01 00 00    	je     c000a15b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fcd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fdd:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fe2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fe6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009fee:	eb 15                	jmp    c000a005 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009ff0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009ff4:	83 c3 18             	add    ebx,0x18
c0009ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ffb:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009fff:	0f 84 66 01 00 00    	je     c000a16b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a005:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a008:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a00b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a00e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a012:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a016:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a018:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a01b:	01 f0                	add    eax,esi
c000a01d:	55                   	push   ebp
c000a01e:	11 fa                	adc    edx,edi
c000a020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a024:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a02c:	56                   	push   esi
c000a02d:	68 6c 29 02 c0       	push   0xc002296c
c000a032:	e8 34 2a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000a037:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a03b:	83 c4 10             	add    esp,0x10
c000a03e:	09 f8                	or     eax,edi
c000a040:	0f 85 25 01 00 00    	jne    c000a16b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a046:	4d                   	dec    ebp
c000a047:	75 a7                	jne    c0009ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a049:	ba 00 00 08 00       	mov    edx,0x80000
c000a04e:	89 c1                	mov    ecx,eax
c000a050:	39 f2                	cmp    edx,esi
c000a052:	19 f9                	sbb    ecx,edi
c000a054:	0f 82 a7 00 00 00    	jb     c000a101 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a05a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a05e:	89 c1                	mov    ecx,eax
c000a060:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a064:	0f 83 97 00 00 00    	jae    c000a101 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a06a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a06f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a073:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a077:	39 fa                	cmp    edx,edi
c000a079:	19 e8                	sbb    eax,ebp
c000a07b:	0f 82 3d 01 00 00    	jb     c000a1be <Phys::physicalMemorySetup(unsigned int)+0x251>
c000a081:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a085:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a089:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a08f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a094:	83 d5 ff             	adc    ebp,0xffffffff
c000a097:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a09b:	31 c0                	xor    eax,eax
c000a09d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0a1:	39 fa                	cmp    edx,edi
c000a0a3:	89 c1                	mov    ecx,eax
c000a0a5:	19 e9                	sbb    ecx,ebp
c000a0a7:	0f 83 43 ff ff ff    	jae    c0009ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0ad:	be 00 00 08 00       	mov    esi,0x80000
c000a0b2:	57                   	push   edi
c000a0b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0b7:	57                   	push   edi
c000a0b8:	56                   	push   esi
c000a0b9:	68 90 29 02 c0       	push   0xc0022990
c000a0be:	e8 a8 29 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000a0c3:	5d                   	pop    ebp
c000a0c4:	58                   	pop    eax
c000a0c5:	57                   	push   edi
c000a0c6:	56                   	push   esi
c000a0c7:	e8 69 fe ff ff       	call   c0009f35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0d4:	83 c4 0c             	add    esp,0xc
c000a0d7:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0db:	03 05 14 64 02 c0    	add    eax,DWORD PTR ds:0xc0026414
c000a0e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0e8:	a3 14 64 02 c0       	mov    ds:0xc0026414,eax
c000a0ed:	52                   	push   edx
c000a0ee:	50                   	push   eax
c000a0ef:	68 fe 28 02 c0       	push   0xc00228fe
c000a0f4:	e8 72 29 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000a0f9:	83 c4 10             	add    esp,0x10
c000a0fc:	e9 ef fe ff ff       	jmp    c0009ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a101:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a105:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a109:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a10d:	39 ea                	cmp    edx,ebp
c000a10f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a113:	0f 82 d7 fe ff ff    	jb     c0009ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a119:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a11e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a122:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a126:	0f 83 c4 fe ff ff    	jae    c0009ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a12c:	39 ee                	cmp    esi,ebp
c000a12e:	89 f8                	mov    eax,edi
c000a130:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a134:	0f 83 78 ff ff ff    	jae    c000a0b2 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a13a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a13e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a142:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a146:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a14a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a14e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a152:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a156:	e9 57 ff ff ff       	jmp    c000a0b2 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a15b:	83 ec 0c             	sub    esp,0xc
c000a15e:	68 f0 28 02 c0       	push   0xc00228f0
c000a163:	e8 c5 a1 00 00       	call   c001432d <Krnl::panic(char const*)>
c000a168:	83 c4 10             	add    esp,0x10
c000a16b:	bb 40 01 00 00       	mov    ebx,0x140
c000a170:	83 ec 08             	sub    esp,0x8
c000a173:	6a 00                	push   0x0
c000a175:	53                   	push   ebx
c000a176:	43                   	inc    ebx
c000a177:	e8 90 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a17c:	ff 05 14 64 02 c0    	inc    DWORD PTR ds:0xc0026414
c000a182:	83 c4 10             	add    esp,0x10
c000a185:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a18b:	75 e3                	jne    c000a170 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a18d:	83 ec 08             	sub    esp,0x8
c000a190:	6a 00                	push   0x0
c000a192:	6a 05                	push   0x5
c000a194:	e8 73 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a199:	58                   	pop    eax
c000a19a:	5a                   	pop    edx
c000a19b:	6a 00                	push   0x0
c000a19d:	6a 06                	push   0x6
c000a19f:	e8 68 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a1a4:	59                   	pop    ecx
c000a1a5:	5b                   	pop    ebx
c000a1a6:	6a 00                	push   0x0
c000a1a8:	6a 07                	push   0x7
c000a1aa:	e8 5d fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a1af:	83 05 14 64 02 c0 33 	add    DWORD PTR ds:0xc0026414,0x33
c000a1b6:	83 c4 4c             	add    esp,0x4c
c000a1b9:	5b                   	pop    ebx
c000a1ba:	5e                   	pop    esi
c000a1bb:	5f                   	pop    edi
c000a1bc:	5d                   	pop    ebp
c000a1bd:	c3                   	ret    
c000a1be:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a1c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a1ce:	e9 ae fe ff ff       	jmp    c000a081 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a1d3:	90                   	nop

c000a1d4 <Pipe::isAtty()>:
c000a1d4:	31 c0                	xor    eax,eax
c000a1d6:	c3                   	ret    
c000a1d7:	90                   	nop

c000a1d8 <Pipe::~Pipe()>:
c000a1d8:	83 ec 0c             	sub    esp,0xc
c000a1db:	ba fc 29 02 c0       	mov    edx,0xc00229fc
c000a1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e4:	89 10                	mov    DWORD PTR [eax],edx
c000a1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ea:	83 ec 0c             	sub    esp,0xc
c000a1ed:	50                   	push   eax
c000a1ee:	e8 45 12 00 00       	call   c000b438 <UnixFile::~UnixFile()>
c000a1f3:	83 c4 10             	add    esp,0x10
c000a1f6:	90                   	nop
c000a1f7:	83 c4 0c             	add    esp,0xc
c000a1fa:	c3                   	ret    
c000a1fb:	90                   	nop

c000a1fc <Pipe::~Pipe()>:
c000a1fc:	83 ec 0c             	sub    esp,0xc
c000a1ff:	83 ec 0c             	sub    esp,0xc
c000a202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a206:	e8 cd ff ff ff       	call   c000a1d8 <Pipe::~Pipe()>
c000a20b:	83 c4 10             	add    esp,0x10
c000a20e:	83 ec 08             	sub    esp,0x8
c000a211:	6a 20                	push   0x20
c000a213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a217:	e8 6e 27 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000a21c:	83 c4 10             	add    esp,0x10
c000a21f:	83 c4 0c             	add    esp,0xc
c000a222:	c3                   	ret    
c000a223:	90                   	nop

c000a224 <Pipe::read(unsigned long long, void*, int*)>:
c000a224:	55                   	push   ebp
c000a225:	57                   	push   edi
c000a226:	56                   	push   esi
c000a227:	53                   	push   ebx
c000a228:	83 ec 1c             	sub    esp,0x1c
c000a22b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a22f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a233:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a237:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a23a:	89 c8                	mov    eax,ecx
c000a23c:	99                   	cdq    
c000a23d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a241:	74 24                	je     c000a267 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a243:	39 f9                	cmp    ecx,edi
c000a245:	89 d1                	mov    ecx,edx
c000a247:	19 f1                	sbb    ecx,esi
c000a249:	73 1c                	jae    c000a267 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a24b:	fa                   	cli    
c000a24c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c000a252:	e8 a9 dc 00 00       	call   c0017f00 <schedule()>
c000a257:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000a25c:	48                   	dec    eax
c000a25d:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000a262:	75 d3                	jne    c000a237 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a264:	fb                   	sti    
c000a265:	eb d0                	jmp    c000a237 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a267:	39 f8                	cmp    eax,edi
c000a269:	89 d1                	mov    ecx,edx
c000a26b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a26e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a272:	19 f1                	sbb    ecx,esi
c000a274:	73 07                	jae    c000a27d <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a276:	89 04 24             	mov    DWORD PTR [esp],eax
c000a279:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a27d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a280:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a283:	29 f7                	sub    edi,esi
c000a285:	89 f8                	mov    eax,edi
c000a287:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a28b:	99                   	cdq    
c000a28c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a28f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a293:	19 d0                	sbb    eax,edx
c000a295:	73 07                	jae    c000a29e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a297:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a29a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a29e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a2a1:	89 ea                	mov    edx,ebp
c000a2a3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a2a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a2ac:	74 0d                	je     c000a2bb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a2ae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a2b1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a2b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2bb:	85 d2                	test   edx,edx
c000a2bd:	74 11                	je     c000a2d0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a2bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2c3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a2c6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a2ca:	89 d1                	mov    ecx,edx
c000a2cc:	89 c7                	mov    edi,eax
c000a2ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2d3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a2d6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a2d9:	99                   	cdq    
c000a2da:	89 f7                	mov    edi,esi
c000a2dc:	03 04 24             	add    eax,DWORD PTR [esp]
c000a2df:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a2e3:	c1 ff 1f             	sar    edi,0x1f
c000a2e6:	57                   	push   edi
c000a2e7:	56                   	push   esi
c000a2e8:	52                   	push   edx
c000a2e9:	50                   	push   eax
c000a2ea:	e8 45 6d 01 00       	call   c0021034 <__umoddi3>
c000a2ef:	83 c4 10             	add    esp,0x10
c000a2f2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a2f5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a2fa:	75 10                	jne    c000a30c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a2fc:	83 ec 0c             	sub    esp,0xc
c000a2ff:	68 b9 29 02 c0       	push   0xc00229b9
c000a304:	e8 24 a0 00 00       	call   c001432d <Krnl::panic(char const*)>
c000a309:	83 c4 10             	add    esp,0x10
c000a30c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a310:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a313:	89 10                	mov    DWORD PTR [eax],edx
c000a315:	83 c4 1c             	add    esp,0x1c
c000a318:	31 c0                	xor    eax,eax
c000a31a:	5b                   	pop    ebx
c000a31b:	5e                   	pop    esi
c000a31c:	5f                   	pop    edi
c000a31d:	5d                   	pop    ebp
c000a31e:	c3                   	ret    
c000a31f:	90                   	nop

c000a320 <Pipe::write(unsigned long long, void*, int*)>:
c000a320:	55                   	push   ebp
c000a321:	57                   	push   edi
c000a322:	56                   	push   esi
c000a323:	53                   	push   ebx
c000a324:	83 ec 1c             	sub    esp,0x1c
c000a327:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a32b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a32f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a332:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a336:	89 04 24             	mov    DWORD PTR [esp],eax
c000a339:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a33d:	89 d8                	mov    eax,ebx
c000a33f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a342:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a346:	89 d6                	mov    esi,edx
c000a348:	89 d7                	mov    edi,edx
c000a34a:	c1 ff 1f             	sar    edi,0x1f
c000a34d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a350:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a354:	c1 f8 1f             	sar    eax,0x1f
c000a357:	39 f3                	cmp    ebx,esi
c000a359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a35d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a361:	19 f8                	sbb    eax,edi
c000a363:	b8 01 00 00 00       	mov    eax,0x1
c000a368:	72 6e                	jb     c000a3d8 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a36a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a36d:	01 d0                	add    eax,edx
c000a36f:	99                   	cdq    
c000a370:	f7 fb                	idiv   ebx
c000a372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a376:	29 d3                	sub    ebx,edx
c000a378:	89 d7                	mov    edi,edx
c000a37a:	89 de                	mov    esi,ebx
c000a37c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a37f:	c1 fb 1f             	sar    ebx,0x1f
c000a382:	39 f2                	cmp    edx,esi
c000a384:	19 d8                	sbb    eax,ebx
c000a386:	b8 00 00 00 00       	mov    eax,0x0
c000a38b:	72 04                	jb     c000a391 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a38d:	89 d0                	mov    eax,edx
c000a38f:	29 f0                	sub    eax,esi
c000a391:	89 d3                	mov    ebx,edx
c000a393:	29 c3                	sub    ebx,eax
c000a395:	74 0b                	je     c000a3a2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a397:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a39a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a39e:	89 d9                	mov    ecx,ebx
c000a3a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3a2:	85 c0                	test   eax,eax
c000a3a4:	74 0d                	je     c000a3b3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a3a6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a3aa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a3ad:	89 de                	mov    esi,ebx
c000a3af:	89 c1                	mov    ecx,eax
c000a3b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3b3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a3b6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a3bb:	75 10                	jne    c000a3cd <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a3bd:	83 ec 0c             	sub    esp,0xc
c000a3c0:	68 d5 29 02 c0       	push   0xc00229d5
c000a3c5:	e8 63 9f 00 00       	call   c001432d <Krnl::panic(char const*)>
c000a3ca:	83 c4 10             	add    esp,0x10
c000a3cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3d1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a3d4:	89 08                	mov    DWORD PTR [eax],ecx
c000a3d6:	31 c0                	xor    eax,eax
c000a3d8:	83 c4 1c             	add    esp,0x1c
c000a3db:	5b                   	pop    ebx
c000a3dc:	5e                   	pop    esi
c000a3dd:	5f                   	pop    edi
c000a3de:	5d                   	pop    ebp
c000a3df:	c3                   	ret    

c000a3e0 <Pipe::Pipe(int)>:
c000a3e0:	83 ec 0c             	sub    esp,0xc
c000a3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e7:	83 ec 08             	sub    esp,0x8
c000a3ea:	6a 00                	push   0x0
c000a3ec:	50                   	push   eax
c000a3ed:	e8 64 0e 00 00       	call   c000b256 <UnixFile::UnixFile(int)>
c000a3f2:	83 c4 10             	add    esp,0x10
c000a3f5:	ba fc 29 02 c0       	mov    edx,0xc00229fc
c000a3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3fe:	89 10                	mov    DWORD PTR [eax],edx
c000a400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a404:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a408:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a41a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a421:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a425:	83 ec 0c             	sub    esp,0xc
c000a428:	50                   	push   eax
c000a429:	e8 95 f5 ff ff       	call   c00099c3 <malloc>
c000a42e:	83 c4 10             	add    esp,0x10
c000a431:	89 c2                	mov    edx,eax
c000a433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a437:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a43e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a442:	90                   	nop
c000a443:	83 c4 0c             	add    esp,0xc
c000a446:	c3                   	ret    
c000a447:	90                   	nop

c000a448 <VgaText::isAtty()>:
c000a448:	b0 01                	mov    al,0x1
c000a44a:	c3                   	ret    
c000a44b:	90                   	nop

c000a44c <VgaText::~VgaText()>:
c000a44c:	83 ec 0c             	sub    esp,0xc
c000a44f:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c000a454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a458:	89 10                	mov    DWORD PTR [eax],edx
c000a45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a45e:	83 ec 0c             	sub    esp,0xc
c000a461:	50                   	push   eax
c000a462:	e8 d1 0f 00 00       	call   c000b438 <UnixFile::~UnixFile()>
c000a467:	83 c4 10             	add    esp,0x10
c000a46a:	90                   	nop
c000a46b:	83 c4 0c             	add    esp,0xc
c000a46e:	c3                   	ret    
c000a46f:	90                   	nop

c000a470 <VgaText::~VgaText()>:
c000a470:	83 ec 0c             	sub    esp,0xc
c000a473:	83 ec 0c             	sub    esp,0xc
c000a476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a47a:	e8 cd ff ff ff       	call   c000a44c <VgaText::~VgaText()>
c000a47f:	83 c4 10             	add    esp,0x10
c000a482:	83 ec 08             	sub    esp,0x8
c000a485:	68 c4 02 00 00       	push   0x2c4
c000a48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a48e:	e8 f7 24 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000a493:	83 c4 10             	add    esp,0x10
c000a496:	83 c4 0c             	add    esp,0xc
c000a499:	c3                   	ret    

c000a49a <VgaText::read(unsigned long long, void*, int*)>:
c000a49a:	83 ec 10             	sub    esp,0x10
c000a49d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a9:	e8 4c 58 00 00       	call   c000fcfa <readKeyboard(VgaText*, char*, unsigned long)>
c000a4ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a4b2:	89 02                	mov    DWORD PTR [edx],eax
c000a4b4:	31 c0                	xor    eax,eax
c000a4b6:	83 c4 1c             	add    esp,0x1c
c000a4b9:	c3                   	ret    

c000a4ba <setTerminalScrollLock(bool)>:
c000a4ba:	c3                   	ret    

c000a4bb <addToTerminalCycle(VgaText*)>:
c000a4bb:	8b 15 80 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026480
c000a4c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a4c5:	85 d2                	test   edx,edx
c000a4c7:	75 09                	jne    c000a4d2 <addToTerminalCycle(VgaText*)+0x17>
c000a4c9:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a4cc:	a3 80 64 02 c0       	mov    ds:0xc0026480,eax
c000a4d1:	c3                   	ret    
c000a4d2:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a4d5:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a4d8:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a4db:	c3                   	ret    

c000a4dc <installVgaTextImplementation()>:
c000a4dc:	83 ec 10             	sub    esp,0x10
c000a4df:	6a 20                	push   0x20
c000a4e1:	6a 00                	push   0x0
c000a4e3:	68 60 64 02 c0       	push   0xc0026460
c000a4e8:	e8 97 61 ff ff       	call   c0000684 <memset>
c000a4ed:	83 c4 1c             	add    esp,0x1c
c000a4f0:	c3                   	ret    

c000a4f1 <scrollTerminalScrollLock(int)>:
c000a4f1:	c3                   	ret    

c000a4f2 <VgaText::updateTitle()>:
c000a4f2:	53                   	push   ebx
c000a4f3:	31 c0                	xor    eax,eax
c000a4f5:	83 ec 58             	sub    esp,0x58
c000a4f8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a4fc:	89 e1                	mov    ecx,esp
c000a4fe:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a502:	40                   	inc    eax
c000a503:	83 f8 50             	cmp    eax,0x50
c000a506:	75 f6                	jne    c000a4fe <VgaText::updateTitle()+0xc>
c000a508:	31 c0                	xor    eax,eax
c000a50a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a511:	84 db                	test   bl,bl
c000a513:	74 06                	je     c000a51b <VgaText::updateTitle()+0x29>
c000a515:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a518:	40                   	inc    eax
c000a519:	eb ef                	jmp    c000a50a <VgaText::updateTitle()+0x18>
c000a51b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a51e:	85 c0                	test   eax,eax
c000a520:	74 09                	je     c000a52b <VgaText::updateTitle()+0x39>
c000a522:	53                   	push   ebx
c000a523:	53                   	push   ebx
c000a524:	51                   	push   ecx
c000a525:	52                   	push   edx
c000a526:	ff d0                	call   eax
c000a528:	83 c4 10             	add    esp,0x10
c000a52b:	83 c4 58             	add    esp,0x58
c000a52e:	5b                   	pop    ebx
c000a52f:	c3                   	ret    

c000a530 <VgaText::load()>:
c000a530:	53                   	push   ebx
c000a531:	31 c0                	xor    eax,eax
c000a533:	83 ec 58             	sub    esp,0x58
c000a536:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a53a:	89 e2                	mov    edx,esp
c000a53c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a540:	40                   	inc    eax
c000a541:	83 f8 50             	cmp    eax,0x50
c000a544:	75 f6                	jne    c000a53c <VgaText::load()+0xc>
c000a546:	31 c0                	xor    eax,eax
c000a548:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a54f:	84 c9                	test   cl,cl
c000a551:	74 06                	je     c000a559 <VgaText::load()+0x29>
c000a553:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a556:	40                   	inc    eax
c000a557:	eb ef                	jmp    c000a548 <VgaText::load()+0x18>
c000a559:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a55c:	85 c0                	test   eax,eax
c000a55e:	74 09                	je     c000a569 <VgaText::load()+0x39>
c000a560:	51                   	push   ecx
c000a561:	51                   	push   ecx
c000a562:	52                   	push   edx
c000a563:	53                   	push   ebx
c000a564:	ff d0                	call   eax
c000a566:	83 c4 10             	add    esp,0x10
c000a569:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a56c:	85 c0                	test   eax,eax
c000a56e:	74 09                	je     c000a579 <VgaText::load()+0x49>
c000a570:	83 ec 0c             	sub    esp,0xc
c000a573:	53                   	push   ebx
c000a574:	ff d0                	call   eax
c000a576:	83 c4 10             	add    esp,0x10
c000a579:	83 c4 58             	add    esp,0x58
c000a57c:	5b                   	pop    ebx
c000a57d:	c3                   	ret    

c000a57e <VgaText::updateCursor()>:
c000a57e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a582:	39 05 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,eax
c000a588:	75 09                	jne    c000a593 <VgaText::updateCursor()+0x15>
c000a58a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a58d:	85 c0                	test   eax,eax
c000a58f:	74 02                	je     c000a593 <VgaText::updateCursor()+0x15>
c000a591:	ff e0                	jmp    eax
c000a593:	c3                   	ret    

c000a594 <VgaText::doANSI_SGR(int)>:
c000a594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a59c:	85 d2                	test   edx,edx
c000a59e:	75 0b                	jne    c000a5ab <VgaText::doANSI_SGR(int)+0x17>
c000a5a0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a5a3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5a6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a5a9:	eb 59                	jmp    c000a604 <VgaText::doANSI_SGR(int)+0x70>
c000a5ab:	83 fa 07             	cmp    edx,0x7
c000a5ae:	75 0b                	jne    c000a5bb <VgaText::doANSI_SGR(int)+0x27>
c000a5b0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a5b3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a5b6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a5b9:	eb 49                	jmp    c000a604 <VgaText::doANSI_SGR(int)+0x70>
c000a5bb:	83 fa 1b             	cmp    edx,0x1b
c000a5be:	74 e0                	je     c000a5a0 <VgaText::doANSI_SGR(int)+0xc>
c000a5c0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a5c3:	83 f9 07             	cmp    ecx,0x7
c000a5c6:	77 09                	ja     c000a5d1 <VgaText::doANSI_SGR(int)+0x3d>
c000a5c8:	8b 14 8d c0 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda840]
c000a5cf:	eb 20                	jmp    c000a5f1 <VgaText::doANSI_SGR(int)+0x5d>
c000a5d1:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a5d4:	83 f9 07             	cmp    ecx,0x7
c000a5d7:	77 09                	ja     c000a5e2 <VgaText::doANSI_SGR(int)+0x4e>
c000a5d9:	8b 14 8d c0 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda840]
c000a5e0:	eb 22                	jmp    c000a604 <VgaText::doANSI_SGR(int)+0x70>
c000a5e2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a5e5:	83 f9 07             	cmp    ecx,0x7
c000a5e8:	77 0b                	ja     c000a5f5 <VgaText::doANSI_SGR(int)+0x61>
c000a5ea:	8b 14 95 78 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda988]
c000a5f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5f4:	c3                   	ret    
c000a5f5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a5f8:	83 f9 07             	cmp    ecx,0x7
c000a5fb:	77 0a                	ja     c000a607 <VgaText::doANSI_SGR(int)+0x73>
c000a5fd:	8b 14 95 50 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda9b0]
c000a604:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a607:	c3                   	ret    

c000a608 <VgaText::setDefaultBgColour(VgaColour)>:
c000a608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a610:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a613:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a616:	c3                   	ret    
c000a617:	90                   	nop

c000a618 <VgaText::setDefaultFgColour(VgaColour)>:
c000a618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a61c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a620:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a623:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a626:	c3                   	ret    
c000a627:	90                   	nop

c000a628 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a628:	53                   	push   ebx
c000a629:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a62d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a631:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a635:	51                   	push   ecx
c000a636:	e8 cd ff ff ff       	call   c000a608 <VgaText::setDefaultBgColour(VgaColour)>
c000a63b:	58                   	pop    eax
c000a63c:	5a                   	pop    edx
c000a63d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a641:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a645:	5b                   	pop    ebx
c000a646:	eb d0                	jmp    c000a618 <VgaText::setDefaultFgColour(VgaColour)>

c000a648 <VgaText::setTitleTextColour(VgaColour)>:
c000a648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a64c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a650:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a653:	e9 9a fe ff ff       	jmp    c000a4f2 <VgaText::updateTitle()>

c000a658 <VgaText::setTitleColour(VgaColour)>:
c000a658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a65c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a660:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a663:	e9 8a fe ff ff       	jmp    c000a4f2 <VgaText::updateTitle()>

c000a668 <VgaText::setTitle(char*)>:
c000a668:	53                   	push   ebx
c000a669:	83 ec 10             	sub    esp,0x10
c000a66c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a674:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a67a:	50                   	push   eax
c000a67b:	e8 c0 60 ff ff       	call   c0000740 <strcpy>
c000a680:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a684:	83 c4 18             	add    esp,0x18
c000a687:	5b                   	pop    ebx
c000a688:	e9 65 fe ff ff       	jmp    c000a4f2 <VgaText::updateTitle()>
c000a68d:	90                   	nop

c000a68e <VgaText::combineColours(unsigned char, unsigned char)>:
c000a68e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a692:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a697:	83 e0 0f             	and    eax,0xf
c000a69a:	c1 e2 04             	shl    edx,0x4
c000a69d:	09 d0                	or     eax,edx
c000a69f:	c3                   	ret    

c000a6a0 <VgaText::scrollScreen()>:
c000a6a0:	55                   	push   ebp
c000a6a1:	b9 01 00 00 00       	mov    ecx,0x1
c000a6a6:	57                   	push   edi
c000a6a7:	56                   	push   esi
c000a6a8:	53                   	push   ebx
c000a6a9:	83 ec 0c             	sub    esp,0xc
c000a6ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a6b0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a6b6:	31 ff                	xor    edi,edi
c000a6b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a6bb:	83 f9 17             	cmp    ecx,0x17
c000a6be:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a6c1:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a6c8:	75 27                	jne    c000a6f1 <VgaText::scrollScreen()+0x51>
c000a6ca:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a6cd:	01 f5                	add    ebp,esi
c000a6cf:	f7 c7 01 00 00 00    	test   edi,0x1
c000a6d5:	74 16                	je     c000a6ed <VgaText::scrollScreen()+0x4d>
c000a6d7:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a6db:	50                   	push   eax
c000a6dc:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a6e0:	50                   	push   eax
c000a6e1:	e8 a8 ff ff ff       	call   c000a68e <VgaText::combineColours(unsigned char, unsigned char)>
c000a6e6:	5a                   	pop    edx
c000a6e7:	5a                   	pop    edx
c000a6e8:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a6eb:	eb 04                	jmp    c000a6f1 <VgaText::scrollScreen()+0x51>
c000a6ed:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a6f1:	47                   	inc    edi
c000a6f2:	46                   	inc    esi
c000a6f3:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a6f9:	75 bd                	jne    c000a6b8 <VgaText::scrollScreen()+0x18>
c000a6fb:	41                   	inc    ecx
c000a6fc:	83 f9 18             	cmp    ecx,0x18
c000a6ff:	75 af                	jne    c000a6b0 <VgaText::scrollScreen()+0x10>
c000a701:	39 1d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ebx
c000a707:	75 1b                	jne    c000a724 <VgaText::scrollScreen()+0x84>
c000a709:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a70d:	74 05                	je     c000a714 <VgaText::scrollScreen()+0x74>
c000a70f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a712:	eb 10                	jmp    c000a724 <VgaText::scrollScreen()+0x84>
c000a714:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a717:	85 c0                	test   eax,eax
c000a719:	74 09                	je     c000a724 <VgaText::scrollScreen()+0x84>
c000a71b:	83 ec 0c             	sub    esp,0xc
c000a71e:	53                   	push   ebx
c000a71f:	ff d0                	call   eax
c000a721:	83 c4 10             	add    esp,0x10
c000a724:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a728:	83 c4 0c             	add    esp,0xc
c000a72b:	5b                   	pop    ebx
c000a72c:	5e                   	pop    esi
c000a72d:	5f                   	pop    edi
c000a72e:	5d                   	pop    ebp
c000a72f:	e9 4a fe ff ff       	jmp    c000a57e <VgaText::updateCursor()>

c000a734 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a734:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a739:	c1 e0 08             	shl    eax,0x8
c000a73c:	89 c2                	mov    edx,eax
c000a73e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a743:	09 d0                	or     eax,edx
c000a745:	c3                   	ret    

c000a746 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a746:	56                   	push   esi
c000a747:	53                   	push   ebx
c000a748:	51                   	push   ecx
c000a749:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a74d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a752:	50                   	push   eax
c000a753:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a758:	50                   	push   eax
c000a759:	e8 30 ff ff ff       	call   c000a68e <VgaText::combineColours(unsigned char, unsigned char)>
c000a75e:	5b                   	pop    ebx
c000a75f:	0f b6 c0             	movzx  eax,al
c000a762:	5e                   	pop    esi
c000a763:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a768:	50                   	push   eax
c000a769:	53                   	push   ebx
c000a76a:	e8 c5 ff ff ff       	call   c000a734 <VgaText::combineCharAndColour(char, unsigned char)>
c000a76f:	5a                   	pop    edx
c000a770:	5e                   	pop    esi
c000a771:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a774:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a77a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a77e:	0f b7 d2             	movzx  edx,dx
c000a781:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a785:	39 0d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ecx
c000a78b:	75 10                	jne    c000a79d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a78d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a790:	85 c0                	test   eax,eax
c000a792:	74 09                	je     c000a79d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a794:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a798:	5a                   	pop    edx
c000a799:	5b                   	pop    ebx
c000a79a:	5e                   	pop    esi
c000a79b:	ff e0                	jmp    eax
c000a79d:	58                   	pop    eax
c000a79e:	5b                   	pop    ebx
c000a79f:	5e                   	pop    esi
c000a7a0:	c3                   	ret    
c000a7a1:	90                   	nop

c000a7a2 <VgaText::getCursorX()>:
c000a7a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a7a9:	c3                   	ret    

c000a7aa <VgaText::getCursorY()>:
c000a7aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a7b1:	c3                   	ret    

c000a7b2 <VgaText::setCursor(int, int)>:
c000a7b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7ba:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a7bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7c1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a7c4:	e9 b5 fd ff ff       	jmp    c000a57e <VgaText::updateCursor()>

c000a7c9 <setActiveTerminal(VgaText*)>:
c000a7c9:	53                   	push   ebx
c000a7ca:	83 ec 08             	sub    esp,0x8
c000a7cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a7d1:	85 db                	test   ebx,ebx
c000a7d3:	75 11                	jne    c000a7e6 <setActiveTerminal(VgaText*)+0x1d>
c000a7d5:	c7 44 24 10 10 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a10
c000a7dd:	83 c4 08             	add    esp,0x8
c000a7e0:	5b                   	pop    ebx
c000a7e1:	e9 47 9b 00 00       	jmp    c001432d <Krnl::panic(char const*)>
c000a7e6:	a1 84 64 02 c0       	mov    eax,ds:0xc0026484
c000a7eb:	85 c0                	test   eax,eax
c000a7ed:	74 0c                	je     c000a7fb <setActiveTerminal(VgaText*)+0x32>
c000a7ef:	83 ec 0c             	sub    esp,0xc
c000a7f2:	50                   	push   eax
c000a7f3:	e8 86 fd ff ff       	call   c000a57e <VgaText::updateCursor()>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	89 1d 84 64 02 c0    	mov    DWORD PTR ds:0xc0026484,ebx
c000a801:	51                   	push   ecx
c000a802:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a805:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a808:	53                   	push   ebx
c000a809:	e8 a4 ff ff ff       	call   c000a7b2 <VgaText::setCursor(int, int)>
c000a80e:	83 c4 10             	add    esp,0x10
c000a811:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a815:	75 07                	jne    c000a81e <setActiveTerminal(VgaText*)+0x55>
c000a817:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a81e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a822:	83 c4 08             	add    esp,0x8
c000a825:	5b                   	pop    ebx
c000a826:	e9 05 fd ff ff       	jmp    c000a530 <VgaText::load()>

c000a82b <doTerminalCycle()>:
c000a82b:	83 ec 18             	sub    esp,0x18
c000a82e:	a1 80 64 02 c0       	mov    eax,ds:0xc0026480
c000a833:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a836:	50                   	push   eax
c000a837:	a3 80 64 02 c0       	mov    ds:0xc0026480,eax
c000a83c:	e8 88 ff ff ff       	call   c000a7c9 <setActiveTerminal(VgaText*)>
c000a841:	83 c4 1c             	add    esp,0x1c
c000a844:	c3                   	ret    
c000a845:	90                   	nop

c000a846 <VgaText::setCursorX(int)>:
c000a846:	83 ec 10             	sub    esp,0x10
c000a849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a84d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a854:	50                   	push   eax
c000a855:	e8 58 ff ff ff       	call   c000a7b2 <VgaText::setCursor(int, int)>
c000a85a:	83 c4 1c             	add    esp,0x1c
c000a85d:	c3                   	ret    

c000a85e <VgaText::setCursorY(int)>:
c000a85e:	83 ec 10             	sub    esp,0x10
c000a861:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a865:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a869:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a86c:	50                   	push   eax
c000a86d:	e8 40 ff ff ff       	call   c000a7b2 <VgaText::setCursor(int, int)>
c000a872:	83 c4 1c             	add    esp,0x1c
c000a875:	c3                   	ret    

c000a876 <VgaText::incrementCursor(bool)>:
c000a876:	56                   	push   esi
c000a877:	53                   	push   ebx
c000a878:	51                   	push   ecx
c000a879:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a87d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a881:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a884:	40                   	inc    eax
c000a885:	83 f8 50             	cmp    eax,0x50
c000a888:	74 05                	je     c000a88f <VgaText::incrementCursor(bool)+0x19>
c000a88a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a88d:	eb 24                	jmp    c000a8b3 <VgaText::incrementCursor(bool)+0x3d>
c000a88f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a892:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a899:	8d 50 01             	lea    edx,[eax+0x1]
c000a89c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a89f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a8a2:	75 0f                	jne    c000a8b3 <VgaText::incrementCursor(bool)+0x3d>
c000a8a4:	83 ec 0c             	sub    esp,0xc
c000a8a7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a8aa:	53                   	push   ebx
c000a8ab:	e8 f0 fd ff ff       	call   c000a6a0 <VgaText::scrollScreen()>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 f0                	mov    eax,esi
c000a8b5:	84 c0                	test   al,al
c000a8b7:	74 0c                	je     c000a8c5 <VgaText::incrementCursor(bool)+0x4f>
c000a8b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8bd:	5a                   	pop    edx
c000a8be:	5b                   	pop    ebx
c000a8bf:	5e                   	pop    esi
c000a8c0:	e9 b9 fc ff ff       	jmp    c000a57e <VgaText::updateCursor()>
c000a8c5:	58                   	pop    eax
c000a8c6:	5b                   	pop    ebx
c000a8c7:	5e                   	pop    esi
c000a8c8:	c3                   	ret    
c000a8c9:	90                   	nop

c000a8ca <VgaText::decrementCursor(bool)>:
c000a8ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8d2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a8d5:	85 c0                	test   eax,eax
c000a8d7:	74 04                	je     c000a8dd <VgaText::decrementCursor(bool)+0x13>
c000a8d9:	48                   	dec    eax
c000a8da:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a8dd:	84 c9                	test   cl,cl
c000a8df:	74 09                	je     c000a8ea <VgaText::decrementCursor(bool)+0x20>
c000a8e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e5:	e9 94 fc ff ff       	jmp    c000a57e <VgaText::updateCursor()>
c000a8ea:	c3                   	ret    
c000a8eb:	90                   	nop

c000a8ec <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a8ec:	53                   	push   ebx
c000a8ed:	83 ec 08             	sub    esp,0x8
c000a8f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a8fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a900:	3c 07                	cmp    al,0x7
c000a902:	75 2a                	jne    c000a92e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a904:	a1 38 65 02 c0       	mov    eax,ds:0xc0026538
c000a909:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a911:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a919:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a921:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a925:	83 c4 08             	add    esp,0x8
c000a928:	5b                   	pop    ebx
c000a929:	e9 58 2f 00 00       	jmp    c000d886 <Buzzer::beep(int, int, bool)>
c000a92e:	3c 0d                	cmp    al,0xd
c000a930:	75 09                	jne    c000a93b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a932:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a939:	eb 2c                	jmp    c000a967 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a93b:	3c 0a                	cmp    al,0xa
c000a93d:	75 31                	jne    c000a970 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a93f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a942:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a949:	8d 50 01             	lea    edx,[eax+0x1]
c000a94c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a94f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a952:	75 0f                	jne    c000a963 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a954:	83 ec 0c             	sub    esp,0xc
c000a957:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a95a:	53                   	push   ebx
c000a95b:	e8 40 fd ff ff       	call   c000a6a0 <VgaText::scrollScreen()>
c000a960:	83 c4 10             	add    esp,0x10
c000a963:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a967:	83 c4 08             	add    esp,0x8
c000a96a:	5b                   	pop    ebx
c000a96b:	e9 0e fc ff ff       	jmp    c000a57e <VgaText::updateCursor()>
c000a970:	3c 08                	cmp    al,0x8
c000a972:	75 25                	jne    c000a999 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a974:	50                   	push   eax
c000a975:	50                   	push   eax
c000a976:	6a 01                	push   0x1
c000a978:	53                   	push   ebx
c000a979:	e8 4c ff ff ff       	call   c000a8ca <VgaText::decrementCursor(bool)>
c000a97e:	5a                   	pop    edx
c000a97f:	59                   	pop    ecx
c000a980:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a983:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a986:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a989:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a98c:	6a 20                	push   0x20
c000a98e:	53                   	push   ebx
c000a98f:	e8 b2 fd ff ff       	call   c000a746 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a994:	83 c4 28             	add    esp,0x28
c000a997:	5b                   	pop    ebx
c000a998:	c3                   	ret    
c000a999:	83 ec 08             	sub    esp,0x8
c000a99c:	0f be c0             	movsx  eax,al
c000a99f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9a5:	51                   	push   ecx
c000a9a6:	52                   	push   edx
c000a9a7:	50                   	push   eax
c000a9a8:	53                   	push   ebx
c000a9a9:	e8 98 fd ff ff       	call   c000a746 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9ae:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a9b2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a9ba:	83 c4 28             	add    esp,0x28
c000a9bd:	5b                   	pop    ebx
c000a9be:	e9 b3 fe ff ff       	jmp    c000a876 <VgaText::incrementCursor(bool)>
c000a9c3:	90                   	nop

c000a9c4 <VgaText::doUpdate()>:
c000a9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9c8:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000a9cb:	85 c0                	test   eax,eax
c000a9cd:	74 02                	je     c000a9d1 <VgaText::doUpdate()+0xd>
c000a9cf:	ff e0                	jmp    eax
c000a9d1:	c3                   	ret    

c000a9d2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a9d2:	55                   	push   ebp
c000a9d3:	31 ed                	xor    ebp,ebp
c000a9d5:	57                   	push   edi
c000a9d6:	56                   	push   esi
c000a9d7:	53                   	push   ebx
c000a9d8:	83 ec 1c             	sub    esp,0x1c
c000a9db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a9df:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9e4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a9eb:	50                   	push   eax
c000a9ec:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9f1:	50                   	push   eax
c000a9f2:	e8 97 fc ff ff       	call   c000a68e <VgaText::combineColours(unsigned char, unsigned char)>
c000a9f7:	59                   	pop    ecx
c000a9f8:	0f b6 c0             	movzx  eax,al
c000a9fb:	5e                   	pop    esi
c000a9fc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa05:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa0c:	0f b7 f6             	movzx  esi,si
c000aa0f:	01 f6                	add    esi,esi
c000aa11:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa14:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa17:	84 c0                	test   al,al
c000aa19:	0f 84 fd 00 00 00    	je     c000ab1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa1f:	3c 0d                	cmp    al,0xd
c000aa21:	75 0c                	jne    c000aa2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa2a:	e9 e7 00 00 00       	jmp    c000ab16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa2f:	3c 0a                	cmp    al,0xa
c000aa31:	75 47                	jne    c000aa7a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aa33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aa36:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa3d:	8d 48 01             	lea    ecx,[eax+0x1]
c000aa40:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aa43:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aa46:	75 0f                	jne    c000aa57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aa48:	83 ec 0c             	sub    esp,0xc
c000aa4b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa4e:	53                   	push   ebx
c000aa4f:	e8 4c fc ff ff       	call   c000a6a0 <VgaText::scrollScreen()>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	83 ec 0c             	sub    esp,0xc
c000aa5a:	31 ed                	xor    ebp,ebp
c000aa5c:	53                   	push   ebx
c000aa5d:	e8 1c fb ff ff       	call   c000a57e <VgaText::updateCursor()>
c000aa62:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa67:	83 c4 10             	add    esp,0x10
c000aa6a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa6d:	0f b7 f6             	movzx  esi,si
c000aa70:	01 f6                	add    esi,esi
c000aa72:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa75:	e9 9c 00 00 00       	jmp    c000ab16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa7a:	3c 08                	cmp    al,0x8
c000aa7c:	75 35                	jne    c000aab3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aa7e:	56                   	push   esi
c000aa7f:	56                   	push   esi
c000aa80:	6a 01                	push   0x1
c000aa82:	53                   	push   ebx
c000aa83:	e8 42 fe ff ff       	call   c000a8ca <VgaText::decrementCursor(bool)>
c000aa88:	58                   	pop    eax
c000aa89:	5a                   	pop    edx
c000aa8a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa8d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa90:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa93:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa96:	6a 20                	push   0x20
c000aa98:	53                   	push   ebx
c000aa99:	e8 a8 fc ff ff       	call   c000a746 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa9e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaa3:	83 c4 20             	add    esp,0x20
c000aaa6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aaa9:	0f b7 f6             	movzx  esi,si
c000aaac:	01 f6                	add    esi,esi
c000aaae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aab1:	eb 63                	jmp    c000ab16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aab3:	51                   	push   ecx
c000aab4:	51                   	push   ecx
c000aab5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aab9:	50                   	push   eax
c000aaba:	e8 75 fc ff ff       	call   c000a734 <VgaText::combineCharAndColour(char, unsigned char)>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	66 89 06             	mov    WORD PTR [esi],ax
c000aac5:	39 1d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ebx
c000aacb:	75 21                	jne    c000aaee <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aacd:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 1a                	je     c000aaee <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aad4:	52                   	push   edx
c000aad5:	52                   	push   edx
c000aad6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aad9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aadc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aae0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aae4:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000aae7:	51                   	push   ecx
c000aae8:	53                   	push   ebx
c000aae9:	ff d0                	call   eax
c000aaeb:	83 c4 20             	add    esp,0x20
c000aaee:	83 c6 02             	add    esi,0x2
c000aaf1:	50                   	push   eax
c000aaf2:	50                   	push   eax
c000aaf3:	6a 00                	push   0x0
c000aaf5:	53                   	push   ebx
c000aaf6:	e8 7b fd ff ff       	call   c000a876 <VgaText::incrementCursor(bool)>
c000aafb:	83 c4 10             	add    esp,0x10
c000aafe:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ab02:	75 0d                	jne    c000ab11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab04:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab09:	0f b7 f6             	movzx  esi,si
c000ab0c:	01 f6                	add    esi,esi
c000ab0e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab11:	bd 01 00 00 00       	mov    ebp,0x1
c000ab16:	47                   	inc    edi
c000ab17:	e9 f8 fe ff ff       	jmp    c000aa14 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab1c:	83 ec 0c             	sub    esp,0xc
c000ab1f:	53                   	push   ebx
c000ab20:	e8 59 fa ff ff       	call   c000a57e <VgaText::updateCursor()>
c000ab25:	83 c4 10             	add    esp,0x10
c000ab28:	89 e8                	mov    eax,ebp
c000ab2a:	84 c0                	test   al,al
c000ab2c:	74 0c                	je     c000ab3a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ab2e:	83 ec 0c             	sub    esp,0xc
c000ab31:	53                   	push   ebx
c000ab32:	e8 8d fe ff ff       	call   c000a9c4 <VgaText::doUpdate()>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab41:	83 c4 1c             	add    esp,0x1c
c000ab44:	5b                   	pop    ebx
c000ab45:	5e                   	pop    esi
c000ab46:	5f                   	pop    edi
c000ab47:	5d                   	pop    ebp
c000ab48:	c3                   	ret    
c000ab49:	90                   	nop

c000ab4a <VgaText::clearScreen()>:
c000ab4a:	57                   	push   edi
c000ab4b:	56                   	push   esi
c000ab4c:	31 f6                	xor    esi,esi
c000ab4e:	53                   	push   ebx
c000ab4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab53:	52                   	push   edx
c000ab54:	6a 00                	push   0x0
c000ab56:	6a 00                	push   0x0
c000ab58:	53                   	push   ebx
c000ab59:	e8 54 fc ff ff       	call   c000a7b2 <VgaText::setCursor(int, int)>
c000ab5e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ab6b:	7e 20                	jle    c000ab8d <VgaText::clearScreen()+0x43>
c000ab6d:	31 ff                	xor    edi,edi
c000ab6f:	50                   	push   eax
c000ab70:	50                   	push   eax
c000ab71:	56                   	push   esi
c000ab72:	57                   	push   edi
c000ab73:	47                   	inc    edi
c000ab74:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab7a:	6a 20                	push   0x20
c000ab7c:	53                   	push   ebx
c000ab7d:	e8 c4 fb ff ff       	call   c000a746 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab82:	83 c4 20             	add    esp,0x20
c000ab85:	83 ff 50             	cmp    edi,0x50
c000ab88:	75 e5                	jne    c000ab6f <VgaText::clearScreen()+0x25>
c000ab8a:	46                   	inc    esi
c000ab8b:	eb db                	jmp    c000ab68 <VgaText::clearScreen()+0x1e>
c000ab8d:	83 ec 0c             	sub    esp,0xc
c000ab90:	53                   	push   ebx
c000ab91:	e8 2e fe ff ff       	call   c000a9c4 <VgaText::doUpdate()>
c000ab96:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab9d:	83 c4 10             	add    esp,0x10
c000aba0:	5b                   	pop    ebx
c000aba1:	5e                   	pop    esi
c000aba2:	5f                   	pop    edi
c000aba3:	c3                   	ret    

c000aba4 <VgaText::putchar(char)>:
c000aba4:	56                   	push   esi
c000aba5:	53                   	push   ebx
c000aba6:	83 ec 14             	sub    esp,0x14
c000aba9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abb1:	3c 5b                	cmp    al,0x5b
c000abb3:	75 18                	jne    c000abcd <VgaText::putchar(char)+0x29>
c000abb5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000abb9:	74 1f                	je     c000abda <VgaText::putchar(char)+0x36>
c000abbb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000abc1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000abc8:	e9 bd 00 00 00       	jmp    c000ac8a <VgaText::putchar(char)+0xe6>
c000abcd:	3c 1b                	cmp    al,0x1b
c000abcf:	75 09                	jne    c000abda <VgaText::putchar(char)+0x36>
c000abd1:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000abd5:	e9 b0 00 00 00       	jmp    c000ac8a <VgaText::putchar(char)+0xe6>
c000abda:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000abdd:	84 c9                	test   cl,cl
c000abdf:	0f 84 92 00 00 00    	je     c000ac77 <VgaText::putchar(char)+0xd3>
c000abe5:	8d 50 c0             	lea    edx,[eax-0x40]
c000abe8:	80 fa 3e             	cmp    dl,0x3e
c000abeb:	77 76                	ja     c000ac63 <VgaText::putchar(char)+0xbf>
c000abed:	3c 6d                	cmp    al,0x6d
c000abef:	75 47                	jne    c000ac38 <VgaText::putchar(char)+0x94>
c000abf1:	31 f6                	xor    esi,esi
c000abf3:	31 d2                	xor    edx,edx
c000abf5:	31 c0                	xor    eax,eax
c000abf7:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000abfa:	7e 2d                	jle    c000ac29 <VgaText::putchar(char)+0x85>
c000abfc:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ac01:	80 fa 3b             	cmp    dl,0x3b
c000ac04:	75 17                	jne    c000ac1d <VgaText::putchar(char)+0x79>
c000ac06:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac0a:	50                   	push   eax
c000ac0b:	53                   	push   ebx
c000ac0c:	e8 83 f9 ff ff       	call   c000a594 <VgaText::doANSI_SGR(int)>
c000ac11:	59                   	pop    ecx
c000ac12:	31 d2                	xor    edx,edx
c000ac14:	58                   	pop    eax
c000ac15:	31 c0                	xor    eax,eax
c000ac17:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac1b:	eb 09                	jmp    c000ac26 <VgaText::putchar(char)+0x82>
c000ac1d:	6b c0 0a             	imul   eax,eax,0xa
c000ac20:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac24:	88 ca                	mov    dl,cl
c000ac26:	46                   	inc    esi
c000ac27:	eb ce                	jmp    c000abf7 <VgaText::putchar(char)+0x53>
c000ac29:	84 d2                	test   dl,dl
c000ac2b:	74 2e                	je     c000ac5b <VgaText::putchar(char)+0xb7>
c000ac2d:	50                   	push   eax
c000ac2e:	53                   	push   ebx
c000ac2f:	e8 60 f9 ff ff       	call   c000a594 <VgaText::doANSI_SGR(int)>
c000ac34:	58                   	pop    eax
c000ac35:	5a                   	pop    edx
c000ac36:	eb 23                	jmp    c000ac5b <VgaText::putchar(char)+0xb7>
c000ac38:	3c 4a                	cmp    al,0x4a
c000ac3a:	75 1f                	jne    c000ac5b <VgaText::putchar(char)+0xb7>
c000ac3c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ac40:	75 19                	jne    c000ac5b <VgaText::putchar(char)+0xb7>
c000ac42:	83 ec 0c             	sub    esp,0xc
c000ac45:	53                   	push   ebx
c000ac46:	e8 ff fe ff ff       	call   c000ab4a <VgaText::clearScreen()>
c000ac4b:	83 c4 0c             	add    esp,0xc
c000ac4e:	6a 00                	push   0x0
c000ac50:	6a 00                	push   0x0
c000ac52:	53                   	push   ebx
c000ac53:	e8 5a fb ff ff       	call   c000a7b2 <VgaText::setCursor(int, int)>
c000ac58:	83 c4 10             	add    esp,0x10
c000ac5b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ac61:	eb 27                	jmp    c000ac8a <VgaText::putchar(char)+0xe6>
c000ac63:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ac66:	83 fa 0e             	cmp    edx,0xe
c000ac69:	7f 1f                	jg     c000ac8a <VgaText::putchar(char)+0xe6>
c000ac6b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ac6e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ac71:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ac75:	eb 13                	jmp    c000ac8a <VgaText::putchar(char)+0xe6>
c000ac77:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac7a:	0f be c0             	movsx  eax,al
c000ac7d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac80:	50                   	push   eax
c000ac81:	53                   	push   ebx
c000ac82:	e8 65 fc ff ff       	call   c000a8ec <VgaText::putchar(char, VgaColour, VgaColour)>
c000ac87:	83 c4 10             	add    esp,0x10
c000ac8a:	83 c4 14             	add    esp,0x14
c000ac8d:	5b                   	pop    ebx
c000ac8e:	5e                   	pop    esi
c000ac8f:	c3                   	ret    

c000ac90 <VgaText::putx(unsigned int)>:
c000ac90:	57                   	push   edi
c000ac91:	b9 11 00 00 00       	mov    ecx,0x11
c000ac96:	56                   	push   esi
c000ac97:	be 1e 2a 02 c0       	mov    esi,0xc0022a1e
c000ac9c:	53                   	push   ebx
c000ac9d:	83 ec 20             	sub    esp,0x20
c000aca0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000aca4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000aca8:	fc                   	cld    
c000aca9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acab:	be 08 00 00 00       	mov    esi,0x8
c000acb0:	50                   	push   eax
c000acb1:	50                   	push   eax
c000acb2:	89 d8                	mov    eax,ebx
c000acb4:	c1 e3 04             	shl    ebx,0x4
c000acb7:	c1 e8 1c             	shr    eax,0x1c
c000acba:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000acbf:	50                   	push   eax
c000acc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acc4:	e8 db fe ff ff       	call   c000aba4 <VgaText::putchar(char)>
c000acc9:	83 c4 10             	add    esp,0x10
c000accc:	4e                   	dec    esi
c000accd:	75 e1                	jne    c000acb0 <VgaText::putx(unsigned int)+0x20>
c000accf:	83 c4 20             	add    esp,0x20
c000acd2:	5b                   	pop    ebx
c000acd3:	5e                   	pop    esi
c000acd4:	5f                   	pop    edi
c000acd5:	c3                   	ret    

c000acd6 <VgaText::puts(char const*)>:
c000acd6:	53                   	push   ebx
c000acd7:	83 ec 08             	sub    esp,0x8
c000acda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acde:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ace1:	84 c0                	test   al,al
c000ace3:	74 12                	je     c000acf7 <VgaText::puts(char const*)+0x21>
c000ace5:	43                   	inc    ebx
c000ace6:	51                   	push   ecx
c000ace7:	51                   	push   ecx
c000ace8:	50                   	push   eax
c000ace9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aced:	e8 b2 fe ff ff       	call   c000aba4 <VgaText::putchar(char)>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	eb e7                	jmp    c000acde <VgaText::puts(char const*)+0x8>
c000acf7:	83 c4 08             	add    esp,0x8
c000acfa:	5b                   	pop    ebx
c000acfb:	c3                   	ret    

c000acfc <VgaText::VgaText(char const*)>:
c000acfc:	57                   	push   edi
c000acfd:	56                   	push   esi
c000acfe:	53                   	push   ebx
c000acff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad03:	83 ec 08             	sub    esp,0x8
c000ad06:	6a 00                	push   0x0
c000ad08:	50                   	push   eax
c000ad09:	e8 48 05 00 00       	call   c000b256 <UnixFile::UnixFile(int)>
c000ad0e:	83 c4 10             	add    esp,0x10
c000ad11:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c000ad16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad1a:	89 10                	mov    DWORD PTR [eax],edx
c000ad1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad20:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ad32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad36:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ad3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad3e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ad42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad46:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad51:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ad58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad5c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ad63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad67:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ad6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad72:	8d 50 60             	lea    edx,[eax+0x60]
c000ad75:	bb 60 64 02 c0       	mov    ebx,0xc0026460
c000ad7a:	b8 08 00 00 00       	mov    eax,0x8
c000ad7f:	fc                   	cld    
c000ad80:	89 d7                	mov    edi,edx
c000ad82:	89 de                	mov    esi,ebx
c000ad84:	89 c1                	mov    ecx,eax
c000ad86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad8c:	05 82 00 00 00       	add    eax,0x82
c000ad91:	83 ec 08             	sub    esp,0x8
c000ad94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad98:	50                   	push   eax
c000ad99:	e8 a2 59 ff ff       	call   c0000740 <strcpy>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	6a 01                	push   0x1
c000adb1:	e8 e3 08 00 00       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c000adb6:	83 c4 10             	add    esp,0x10
c000adb9:	89 c2                	mov    edx,eax
c000adbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adbf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adc2:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c000adc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adcf:	89 c6                	mov    esi,eax
c000add1:	e8 f5 ef ff ff       	call   c0009dcb <Phys::allocatePage()>
c000add6:	68 05 0c 00 00       	push   0xc05
c000addb:	56                   	push   esi
c000addc:	50                   	push   eax
c000addd:	53                   	push   ebx
c000adde:	e8 5d 0f 00 00       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ade3:	83 c4 10             	add    esp,0x10
c000ade6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aded:	83 ec 04             	sub    esp,0x4
c000adf0:	68 00 0f 00 00       	push   0xf00
c000adf5:	6a 00                	push   0x0
c000adf7:	50                   	push   eax
c000adf8:	e8 87 58 ff ff       	call   c0000684 <memset>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	83 ec 04             	sub    esp,0x4
c000ae03:	6a 00                	push   0x0
c000ae05:	6a 07                	push   0x7
c000ae07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae0b:	e8 18 f8 ff ff       	call   c000a628 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae10:	83 c4 10             	add    esp,0x10
c000ae13:	83 ec 04             	sub    esp,0x4
c000ae16:	6a 00                	push   0x0
c000ae18:	6a 00                	push   0x0
c000ae1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae1e:	e8 8f f9 ff ff       	call   c000a7b2 <VgaText::setCursor(int, int)>
c000ae23:	83 c4 10             	add    esp,0x10
c000ae26:	83 ec 0c             	sub    esp,0xc
c000ae29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae2d:	e8 18 fd ff ff       	call   c000ab4a <VgaText::clearScreen()>
c000ae32:	83 c4 10             	add    esp,0x10
c000ae35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae39:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ae3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae41:	05 02 01 00 00       	add    eax,0x102
c000ae46:	83 ec 04             	sub    esp,0x4
c000ae49:	68 96 00 00 00       	push   0x96
c000ae4e:	6a 00                	push   0x0
c000ae50:	50                   	push   eax
c000ae51:	e8 2e 58 ff ff       	call   c0000684 <memset>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5d:	05 98 01 00 00       	add    eax,0x198
c000ae62:	83 ec 04             	sub    esp,0x4
c000ae65:	68 2c 01 00 00       	push   0x12c
c000ae6a:	6a 00                	push   0x0
c000ae6c:	50                   	push   eax
c000ae6d:	e8 12 58 ff ff       	call   c0000684 <memset>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	90                   	nop
c000ae76:	5b                   	pop    ebx
c000ae77:	5e                   	pop    esi
c000ae78:	5f                   	pop    edi
c000ae79:	c3                   	ret    

c000ae7a <VgaText::receiveKey(unsigned char)>:
c000ae7a:	55                   	push   ebp
c000ae7b:	57                   	push   edi
c000ae7c:	56                   	push   esi
c000ae7d:	53                   	push   ebx
c000ae7e:	83 ec 1c             	sub    esp,0x1c
c000ae81:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ae85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae89:	84 db                	test   bl,bl
c000ae8b:	0f 84 c9 00 00 00    	je     c000af5a <VgaText::receiveKey(unsigned char)+0xe0>
c000ae91:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ae97:	80 fb 08             	cmp    bl,0x8
c000ae9a:	75 2c                	jne    c000aec8 <VgaText::receiveKey(unsigned char)+0x4e>
c000ae9c:	83 ec 0c             	sub    esp,0xc
c000ae9f:	57                   	push   edi
c000aea0:	e8 fb 57 ff ff       	call   c00006a0 <strlen>
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	85 c0                	test   eax,eax
c000aeaa:	74 41                	je     c000aeed <VgaText::receiveKey(unsigned char)+0x73>
c000aeac:	50                   	push   eax
c000aead:	50                   	push   eax
c000aeae:	6a 08                	push   0x8
c000aeb0:	56                   	push   esi
c000aeb1:	e8 ee fc ff ff       	call   c000aba4 <VgaText::putchar(char)>
c000aeb6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aeb9:	e8 e2 57 ff ff       	call   c00006a0 <strlen>
c000aebe:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000aec6:	eb 22                	jmp    c000aeea <VgaText::receiveKey(unsigned char)+0x70>
c000aec8:	0f be c3             	movsx  eax,bl
c000aecb:	52                   	push   edx
c000aecc:	52                   	push   edx
c000aecd:	50                   	push   eax
c000aece:	56                   	push   esi
c000aecf:	e8 d0 fc ff ff       	call   c000aba4 <VgaText::putchar(char)>
c000aed4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000aed8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aedd:	59                   	pop    ecx
c000aede:	5d                   	pop    ebp
c000aedf:	8d 44 24 16          	lea    eax,[esp+0x16]
c000aee3:	50                   	push   eax
c000aee4:	57                   	push   edi
c000aee5:	e8 96 59 ff ff       	call   c0000880 <strcat>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000aef4:	75 05                	jne    c000aefb <VgaText::receiveKey(unsigned char)+0x81>
c000aef6:	80 fb 0a             	cmp    bl,0xa
c000aef9:	75 53                	jne    c000af4e <VgaText::receiveKey(unsigned char)+0xd4>
c000aefb:	83 ec 0c             	sub    esp,0xc
c000aefe:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af04:	53                   	push   ebx
c000af05:	e8 96 57 ff ff       	call   c00006a0 <strlen>
c000af0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af0d:	89 c5                	mov    ebp,eax
c000af0f:	e8 8c 57 ff ff       	call   c00006a0 <strlen>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af1b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af20:	76 10                	jbe    c000af32 <VgaText::receiveKey(unsigned char)+0xb8>
c000af22:	83 ec 0c             	sub    esp,0xc
c000af25:	68 2f 2a 02 c0       	push   0xc0022a2f
c000af2a:	e8 fe 93 00 00       	call   c001432d <Krnl::panic(char const*)>
c000af2f:	83 c4 10             	add    esp,0x10
c000af32:	50                   	push   eax
c000af33:	50                   	push   eax
c000af34:	57                   	push   edi
c000af35:	53                   	push   ebx
c000af36:	e8 45 59 ff ff       	call   c0000880 <strcat>
c000af3b:	83 c4 0c             	add    esp,0xc
c000af3e:	68 96 00 00 00       	push   0x96
c000af43:	6a 00                	push   0x0
c000af45:	57                   	push   edi
c000af46:	e8 39 57 ff ff       	call   c0000684 <memset>
c000af4b:	83 c4 10             	add    esp,0x10
c000af4e:	83 ec 0c             	sub    esp,0xc
c000af51:	56                   	push   esi
c000af52:	e8 6d fa ff ff       	call   c000a9c4 <VgaText::doUpdate()>
c000af57:	83 c4 10             	add    esp,0x10
c000af5a:	83 c4 1c             	add    esp,0x1c
c000af5d:	5b                   	pop    ebx
c000af5e:	5e                   	pop    esi
c000af5f:	5f                   	pop    edi
c000af60:	5d                   	pop    ebp
c000af61:	c3                   	ret    

c000af62 <VgaText::write(unsigned long long, void*, int*)>:
c000af62:	55                   	push   ebp
c000af63:	57                   	push   edi
c000af64:	56                   	push   esi
c000af65:	53                   	push   ebx
c000af66:	83 ec 0c             	sub    esp,0xc
c000af69:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000af6d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000af71:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000af75:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000af7c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000af7f:	39 eb                	cmp    ebx,ebp
c000af81:	74 13                	je     c000af96 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000af83:	43                   	inc    ebx
c000af84:	50                   	push   eax
c000af85:	50                   	push   eax
c000af86:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000af8a:	50                   	push   eax
c000af8b:	56                   	push   esi
c000af8c:	e8 13 fc ff ff       	call   c000aba4 <VgaText::putchar(char)>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	eb e9                	jmp    c000af7f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000af96:	83 ec 0c             	sub    esp,0xc
c000af99:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000afa0:	56                   	push   esi
c000afa1:	e8 1e fa ff ff       	call   c000a9c4 <VgaText::doUpdate()>
c000afa6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000afaa:	89 38                	mov    DWORD PTR [eax],edi
c000afac:	83 c4 1c             	add    esp,0x1c
c000afaf:	31 c0                	xor    eax,eax
c000afb1:	5b                   	pop    ebx
c000afb2:	5e                   	pop    esi
c000afb3:	5f                   	pop    edi
c000afb4:	5d                   	pop    ebp
c000afb5:	c3                   	ret    

c000afb6 <newTerminal(char*)>:
c000afb6:	83 ec 28             	sub    esp,0x28
c000afb9:	68 c4 02 00 00       	push   0x2c4
c000afbe:	e8 00 ea ff ff       	call   c00099c3 <malloc>
c000afc3:	5a                   	pop    edx
c000afc4:	59                   	pop    ecx
c000afc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000afc9:	50                   	push   eax
c000afca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afce:	e8 29 fd ff ff       	call   c000acfc <VgaText::VgaText(char const*)>
c000afd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afd7:	83 c4 2c             	add    esp,0x2c
c000afda:	c3                   	ret    
c000afdb:	90                   	nop

c000afdc <TSS::TSS()>:
c000afdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afe0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000afe7:	90                   	nop
c000afe8:	c3                   	ret    
c000afe9:	90                   	nop
c000afea:	66 90                	xchg   ax,ax

c000afec <TSS::setESP(unsigned long)>:
c000afec:	55                   	push   ebp
c000afed:	89 e5                	mov    ebp,esp
c000afef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aff5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000aff8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000affb:	90                   	nop
c000affc:	5d                   	pop    ebp
c000affd:	c3                   	ret    
c000affe:	66 90                	xchg   ax,ax

c000b000 <TSS::flush()>:
c000b000:	55                   	push   ebp
c000b001:	89 e5                	mov    ebp,esp
c000b003:	83 ec 10             	sub    esp,0x10
c000b006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b009:	8b 00                	mov    eax,DWORD PTR [eax]
c000b00b:	83 c8 03             	or     eax,0x3
c000b00e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b012:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b016:	66 89 d0             	mov    ax,dx
c000b019:	0f 00 d8             	ltr    ax
c000b01c:	90                   	nop
c000b01d:	c9                   	leave  
c000b01e:	c3                   	ret    
c000b01f:	90                   	nop

c000b020 <TSS::setup(unsigned long, unsigned long)>:
c000b020:	55                   	push   ebp
c000b021:	89 e5                	mov    ebp,esp
c000b023:	83 ec 18             	sub    esp,0x18
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	6a 68                	push   0x68
c000b02b:	e8 93 e9 ff ff       	call   c00099c3 <malloc>
c000b030:	83 c4 10             	add    esp,0x10
c000b033:	89 c2                	mov    edx,eax
c000b035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b038:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b03b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b03e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b041:	83 ec 04             	sub    esp,0x4
c000b044:	6a 68                	push   0x68
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 36 56 ff ff       	call   c0000684 <memset>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b057:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b05d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b063:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b06c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b06f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b072:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b07b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b087:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b08d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b090:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b093:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b09c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b09f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b0a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ab:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b0b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b0bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0c3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b0c6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b0d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0db:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b0e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e8:	0f 20 da             	mov    edx,cr3
c000b0eb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b0ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b0f1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b0f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0fa:	83 ec 08             	sub    esp,0x8
c000b0fd:	50                   	push   eax
c000b0fe:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b101:	50                   	push   eax
c000b102:	e8 19 e1 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b107:	83 c4 10             	add    esp,0x10
c000b10a:	83 ec 08             	sub    esp,0x8
c000b10d:	6a 68                	push   0x68
c000b10f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b112:	50                   	push   eax
c000b113:	e8 24 e1 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b118:	83 c4 10             	add    esp,0x10
c000b11b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b11f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b122:	83 e0 0f             	and    eax,0xf
c000b125:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b128:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b12b:	83 c8 40             	or     eax,0x40
c000b12e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b131:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000b136:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b13c:	05 78 01 00 00       	add    eax,0x178
c000b141:	83 ec 04             	sub    esp,0x4
c000b144:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b147:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b14a:	50                   	push   eax
c000b14b:	e8 20 e1 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 c2                	mov    edx,eax
c000b155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b158:	89 10                	mov    DWORD PTR [eax],edx
c000b15a:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000b15f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b165:	05 78 01 00 00       	add    eax,0x178
c000b16a:	83 ec 0c             	sub    esp,0xc
c000b16d:	50                   	push   eax
c000b16e:	e8 27 e1 ff ff       	call   c000929a <GDT::flush()>
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b179:	8b 00                	mov    eax,DWORD PTR [eax]
c000b17b:	c9                   	leave  
c000b17c:	c3                   	ret    
c000b17d:	90                   	nop

c000b17e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b17e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b182:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b189:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b18e:	75 08                	jne    c000b198 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b190:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b196:	eb 38                	jmp    c000b1d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b198:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b19d:	75 17                	jne    c000b1b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b19f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b1a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b1ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1b3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b1b6:	89 c1                	mov    ecx,eax
c000b1b8:	83 e1 fd             	and    ecx,0xfffffffd
c000b1bb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b1c1:	74 cd                	je     c000b190 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1c3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b1c8:	83 e0 ef             	and    eax,0xffffffef
c000b1cb:	83 f8 08             	cmp    eax,0x8
c000b1ce:	76 c0                	jbe    c000b190 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1d0:	31 c0                	xor    eax,eax
c000b1d2:	c3                   	ret    
c000b1d3:	90                   	nop

c000b1d4 <ReservedFilename::isAtty()>:
c000b1d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b1db:	31 c0                	xor    eax,eax
c000b1dd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b1e3:	74 09                	je     c000b1ee <ReservedFilename::isAtty()+0x1a>
c000b1e5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b1eb:	0f 94 c0             	sete   al
c000b1ee:	c3                   	ret    
c000b1ef:	90                   	nop

c000b1f0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b1f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1ff:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b204:	75 08                	jne    c000b20e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b206:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b20c:	eb 3d                	jmp    c000b24b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b20e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b213:	75 17                	jne    c000b22c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b21a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b21d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b223:	8b 10                	mov    edx,DWORD PTR [eax]
c000b225:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b229:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b22c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b231:	75 04                	jne    c000b237 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b233:	89 0a                	mov    DWORD PTR [edx],ecx
c000b235:	eb 14                	jmp    c000b24b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b237:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b23c:	74 c8                	je     c000b206 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b23e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b243:	83 e0 ef             	and    eax,0xffffffef
c000b246:	83 f8 08             	cmp    eax,0x8
c000b249:	76 bb                	jbe    c000b206 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b24b:	31 c0                	xor    eax,eax
c000b24d:	c3                   	ret    

c000b24e <UnixFile::getFileDescriptor()>:
c000b24e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b255:	c3                   	ret    

c000b256 <UnixFile::UnixFile(int)>:
c000b256:	53                   	push   ebx
c000b257:	83 ec 28             	sub    esp,0x28
c000b25a:	ba 4c 2b 02 c0       	mov    edx,0xc0022b4c
c000b25f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b263:	89 10                	mov    DWORD PTR [eax],edx
c000b265:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b26d:	0f 8f 8c 01 00 00    	jg     c000b3ff <UnixFile::UnixFile(int)+0x1a9>
c000b273:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c000b278:	8d 50 01             	lea    edx,[eax+0x1]
c000b27b:	89 15 00 58 02 c0    	mov    DWORD PTR ds:0xc0025800,edx
c000b281:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b285:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b288:	83 ec 08             	sub    esp,0x8
c000b28b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b28f:	68 18 65 02 c0       	push   0xc0026518
c000b294:	e8 83 5f 01 00       	call   c002121c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b299:	83 c4 10             	add    esp,0x10
c000b29c:	a0 14 65 02 c0       	mov    al,ds:0xc0026514
c000b2a1:	83 f0 01             	xor    eax,0x1
c000b2a4:	84 c0                	test   al,al
c000b2a6:	0f 84 54 01 00 00    	je     c000b400 <UnixFile::UnixFile(int)+0x1aa>
c000b2ac:	c6 05 14 65 02 c0 01 	mov    BYTE PTR ds:0xc0026514,0x1
c000b2b3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b2bb:	83 ec 0c             	sub    esp,0xc
c000b2be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2c2:	e8 fc e6 ff ff       	call   c00099c3 <malloc>
c000b2c7:	83 c4 10             	add    esp,0x10
c000b2ca:	89 c3                	mov    ebx,eax
c000b2cc:	83 ec 08             	sub    esp,0x8
c000b2cf:	68 03 ff ff 0f       	push   0xfffff03
c000b2d4:	53                   	push   ebx
c000b2d5:	e8 2c 01 00 00       	call   c000b406 <ReservedFilename::ReservedFilename(int)>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 1d 0c 65 02 c0    	mov    DWORD PTR ds:0xc002650c,ebx
c000b2e3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b2eb:	83 ec 0c             	sub    esp,0xc
c000b2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f2:	e8 cc e6 ff ff       	call   c00099c3 <malloc>
c000b2f7:	83 c4 10             	add    esp,0x10
c000b2fa:	89 c3                	mov    ebx,eax
c000b2fc:	83 ec 08             	sub    esp,0x8
c000b2ff:	68 01 ff ff 0f       	push   0xfffff01
c000b304:	53                   	push   ebx
c000b305:	e8 fc 00 00 00       	call   c000b406 <ReservedFilename::ReservedFilename(int)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	89 1d 10 65 02 c0    	mov    DWORD PTR ds:0xc0026510,ebx
c000b313:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b31b:	83 ec 0c             	sub    esp,0xc
c000b31e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b322:	e8 9c e6 ff ff       	call   c00099c3 <malloc>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 c3                	mov    ebx,eax
c000b32c:	83 ec 08             	sub    esp,0x8
c000b32f:	68 00 ff ff 0f       	push   0xfffff00
c000b334:	53                   	push   ebx
c000b335:	e8 cc 00 00 00       	call   c000b406 <ReservedFilename::ReservedFilename(int)>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 1d 04 65 02 c0    	mov    DWORD PTR ds:0xc0026504,ebx
c000b343:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b34b:	83 ec 0c             	sub    esp,0xc
c000b34e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b352:	e8 6c e6 ff ff       	call   c00099c3 <malloc>
c000b357:	83 c4 10             	add    esp,0x10
c000b35a:	89 c3                	mov    ebx,eax
c000b35c:	83 ec 08             	sub    esp,0x8
c000b35f:	68 02 ff ff 0f       	push   0xfffff02
c000b364:	53                   	push   ebx
c000b365:	e8 9c 00 00 00       	call   c000b406 <ReservedFilename::ReservedFilename(int)>
c000b36a:	83 c4 10             	add    esp,0x10
c000b36d:	89 1d 08 65 02 c0    	mov    DWORD PTR ds:0xc0026508,ebx
c000b373:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b37b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b380:	7f 7e                	jg     c000b400 <UnixFile::UnixFile(int)+0x1aa>
c000b382:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b38a:	83 ec 0c             	sub    esp,0xc
c000b38d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b391:	e8 2d e6 ff ff       	call   c00099c3 <malloc>
c000b396:	83 c4 10             	add    esp,0x10
c000b399:	89 c3                	mov    ebx,eax
c000b39b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b39f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b3a4:	83 ec 08             	sub    esp,0x8
c000b3a7:	50                   	push   eax
c000b3a8:	53                   	push   ebx
c000b3a9:	e8 58 00 00 00       	call   c000b406 <ReservedFilename::ReservedFilename(int)>
c000b3ae:	83 c4 10             	add    esp,0x10
c000b3b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3b5:	89 1c 85 e0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b20],ebx
c000b3bc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3cb:	e8 f3 e5 ff ff       	call   c00099c3 <malloc>
c000b3d0:	83 c4 10             	add    esp,0x10
c000b3d3:	89 c3                	mov    ebx,eax
c000b3d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3d9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b3de:	83 ec 08             	sub    esp,0x8
c000b3e1:	50                   	push   eax
c000b3e2:	53                   	push   ebx
c000b3e3:	e8 1e 00 00 00       	call   c000b406 <ReservedFilename::ReservedFilename(int)>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3ef:	89 1c 85 a0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b60],ebx
c000b3f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b3fa:	e9 7c ff ff ff       	jmp    c000b37b <UnixFile::UnixFile(int)+0x125>
c000b3ff:	90                   	nop
c000b400:	83 c4 28             	add    esp,0x28
c000b403:	5b                   	pop    ebx
c000b404:	c3                   	ret    
c000b405:	90                   	nop

c000b406 <ReservedFilename::ReservedFilename(int)>:
c000b406:	83 ec 0c             	sub    esp,0xc
c000b409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40d:	83 ec 08             	sub    esp,0x8
c000b410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b414:	50                   	push   eax
c000b415:	e8 3c fe ff ff       	call   c000b256 <UnixFile::UnixFile(int)>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	89 10                	mov    DWORD PTR [eax],edx
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b430:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b433:	90                   	nop
c000b434:	83 c4 0c             	add    esp,0xc
c000b437:	c3                   	ret    

c000b438 <UnixFile::~UnixFile()>:
c000b438:	83 ec 1c             	sub    esp,0x1c
c000b43b:	ba 4c 2b 02 c0       	mov    edx,0xc0022b4c
c000b440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b444:	89 10                	mov    DWORD PTR [eax],edx
c000b446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b44a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b44d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b452:	7f 73                	jg     c000b4c7 <UnixFile::~UnixFile()+0x8f>
c000b454:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b45c:	83 ec 0c             	sub    esp,0xc
c000b45f:	68 18 65 02 c0       	push   0xc0026518
c000b464:	e8 87 5e 01 00       	call   c00212f0 <LinkedList<UnixFile>::getFirstElement()>
c000b469:	83 c4 10             	add    esp,0x10
c000b46c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b470:	83 ec 0c             	sub    esp,0xc
c000b473:	68 18 65 02 c0       	push   0xc0026518
c000b478:	e8 7b 5e 01 00       	call   c00212f8 <LinkedList<UnixFile>::removeFirst()>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b484:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b488:	74 40                	je     c000b4ca <UnixFile::~UnixFile()+0x92>
c000b48a:	83 ec 08             	sub    esp,0x8
c000b48d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b491:	68 18 65 02 c0       	push   0xc0026518
c000b496:	e8 81 5d 01 00       	call   c002121c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b49b:	83 c4 10             	add    esp,0x10
c000b49e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4a2:	8d 50 01             	lea    edx,[eax+0x1]
c000b4a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a9:	3d 88 13 00 00       	cmp    eax,0x1388
c000b4ae:	0f 94 c0             	sete   al
c000b4b1:	84 c0                	test   al,al
c000b4b3:	74 a7                	je     c000b45c <UnixFile::~UnixFile()+0x24>
c000b4b5:	83 ec 0c             	sub    esp,0xc
c000b4b8:	68 24 2b 02 c0       	push   0xc0022b24
c000b4bd:	e8 6b 8e 00 00       	call   c001432d <Krnl::panic(char const*)>
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	eb 95                	jmp    c000b45c <UnixFile::~UnixFile()+0x24>
c000b4c7:	90                   	nop
c000b4c8:	eb 01                	jmp    c000b4cb <UnixFile::~UnixFile()+0x93>
c000b4ca:	90                   	nop
c000b4cb:	90                   	nop
c000b4cc:	83 c4 1c             	add    esp,0x1c
c000b4cf:	c3                   	ret    

c000b4d0 <UnixFile::~UnixFile()>:
c000b4d0:	83 ec 0c             	sub    esp,0xc
c000b4d3:	83 ec 0c             	sub    esp,0xc
c000b4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4da:	e8 59 ff ff ff       	call   c000b438 <UnixFile::~UnixFile()>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	83 ec 08             	sub    esp,0x8
c000b4e5:	6a 0c                	push   0xc
c000b4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4eb:	e8 9a 14 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000b4f0:	83 c4 10             	add    esp,0x10
c000b4f3:	83 c4 0c             	add    esp,0xc
c000b4f6:	c3                   	ret    
c000b4f7:	90                   	nop

c000b4f8 <ReservedFilename::~ReservedFilename()>:
c000b4f8:	83 ec 0c             	sub    esp,0xc
c000b4fb:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	89 10                	mov    DWORD PTR [eax],edx
c000b506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	50                   	push   eax
c000b50e:	e8 25 ff ff ff       	call   c000b438 <UnixFile::~UnixFile()>
c000b513:	83 c4 10             	add    esp,0x10
c000b516:	90                   	nop
c000b517:	83 c4 0c             	add    esp,0xc
c000b51a:	c3                   	ret    
c000b51b:	90                   	nop

c000b51c <ReservedFilename::~ReservedFilename()>:
c000b51c:	83 ec 0c             	sub    esp,0xc
c000b51f:	83 ec 0c             	sub    esp,0xc
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	e8 cd ff ff ff       	call   c000b4f8 <ReservedFilename::~ReservedFilename()>
c000b52b:	83 c4 10             	add    esp,0x10
c000b52e:	83 ec 08             	sub    esp,0x8
c000b531:	6a 0c                	push   0xc
c000b533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b537:	e8 4e 14 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	83 c4 0c             	add    esp,0xc
c000b542:	c3                   	ret    

c000b543 <getFromFileDescriptor(int)>:
c000b543:	53                   	push   ebx
c000b544:	83 ec 08             	sub    esp,0x8
c000b547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b54b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b551:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b557:	7f 2c                	jg     c000b585 <getFromFileDescriptor(int)+0x42>
c000b559:	83 ec 0c             	sub    esp,0xc
c000b55c:	68 18 65 02 c0       	push   0xc0026518
c000b561:	e8 8a 5d 01 00       	call   c00212f0 <LinkedList<UnixFile>::getFirstElement()>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	85 c0                	test   eax,eax
c000b56b:	75 04                	jne    c000b571 <getFromFileDescriptor(int)+0x2e>
c000b56d:	31 c0                	xor    eax,eax
c000b56f:	eb 6e                	jmp    c000b5df <getFromFileDescriptor(int)+0x9c>
c000b571:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b574:	74 69                	je     c000b5df <getFromFileDescriptor(int)+0x9c>
c000b576:	52                   	push   edx
c000b577:	52                   	push   edx
c000b578:	50                   	push   eax
c000b579:	68 18 65 02 c0       	push   0xc0026518
c000b57e:	e8 17 5e 01 00       	call   c002139a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b583:	eb e1                	jmp    c000b566 <getFromFileDescriptor(int)+0x23>
c000b585:	a1 0c 65 02 c0       	mov    eax,ds:0xc002650c
c000b58a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b590:	74 4d                	je     c000b5df <getFromFileDescriptor(int)+0x9c>
c000b592:	a1 10 65 02 c0       	mov    eax,ds:0xc0026510
c000b597:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b59d:	74 40                	je     c000b5df <getFromFileDescriptor(int)+0x9c>
c000b59f:	a1 08 65 02 c0       	mov    eax,ds:0xc0026508
c000b5a4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b5aa:	74 33                	je     c000b5df <getFromFileDescriptor(int)+0x9c>
c000b5ac:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000b5b1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b5b7:	74 26                	je     c000b5df <getFromFileDescriptor(int)+0x9c>
c000b5b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b5bf:	83 f8 08             	cmp    eax,0x8
c000b5c2:	77 09                	ja     c000b5cd <getFromFileDescriptor(int)+0x8a>
c000b5c4:	8b 04 85 e0 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b20]
c000b5cb:	eb 12                	jmp    c000b5df <getFromFileDescriptor(int)+0x9c>
c000b5cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b5d3:	83 fb 08             	cmp    ebx,0x8
c000b5d6:	77 95                	ja     c000b56d <getFromFileDescriptor(int)+0x2a>
c000b5d8:	8b 04 9d a0 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9b60]
c000b5df:	83 c4 08             	add    esp,0x8
c000b5e2:	5b                   	pop    ebx
c000b5e3:	c3                   	ret    

c000b5e4 <__static_initialization_and_destruction_0(int, int)>:
c000b5e4:	83 ec 0c             	sub    esp,0xc
c000b5e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b5ec:	75 34                	jne    c000b622 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b5f6:	75 2a                	jne    c000b622 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5f8:	83 ec 0c             	sub    esp,0xc
c000b5fb:	68 18 65 02 c0       	push   0xc0026518
c000b600:	e8 d5 5b 01 00       	call   c00211da <LinkedList<UnixFile>::LinkedList()>
c000b605:	83 c4 10             	add    esp,0x10
c000b608:	83 ec 04             	sub    esp,0x4
c000b60b:	68 28 56 02 c0       	push   0xc0025628
c000b610:	68 18 65 02 c0       	push   0xc0026518
c000b615:	68 d8 11 02 c0       	push   0xc00211d8
c000b61a:	e8 e5 12 00 00       	call   c000c904 <__cxa_atexit>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	90                   	nop
c000b623:	83 c4 0c             	add    esp,0xc
c000b626:	c3                   	ret    

c000b627 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b627:	83 ec 0c             	sub    esp,0xc
c000b62a:	83 ec 08             	sub    esp,0x8
c000b62d:	68 ff ff 00 00       	push   0xffff
c000b632:	6a 01                	push   0x1
c000b634:	e8 ab ff ff ff       	call   c000b5e4 <__static_initialization_and_destruction_0(int, int)>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	83 c4 0c             	add    esp,0xc
c000b63f:	c3                   	ret    

c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b640:	53                   	push   ebx
c000b641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b645:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b649:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b64f:	89 c8                	mov    eax,ecx
c000b651:	d1 e8                	shr    eax,1
c000b653:	03 05 08 58 02 c0    	add    eax,DWORD PTR ds:0xc0025808
c000b659:	83 e1 01             	and    ecx,0x1
c000b65c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b65e:	75 09                	jne    c000b669 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b660:	83 e2 f0             	and    edx,0xfffffff0
c000b663:	09 da                	or     edx,ebx
c000b665:	88 10                	mov    BYTE PTR [eax],dl
c000b667:	5b                   	pop    ebx
c000b668:	c3                   	ret    
c000b669:	c1 e3 04             	shl    ebx,0x4
c000b66c:	83 e2 0f             	and    edx,0xf
c000b66f:	09 da                	or     edx,ebx
c000b671:	88 10                	mov    BYTE PTR [eax],dl
c000b673:	5b                   	pop    ebx
c000b674:	c3                   	ret    

c000b675 <Virt::getPageState(unsigned long)>:
c000b675:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b679:	8b 0d 08 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025808
c000b67f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b685:	89 d0                	mov    eax,edx
c000b687:	d1 e8                	shr    eax,1
c000b689:	83 e2 01             	and    edx,0x1
c000b68c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b68f:	75 04                	jne    c000b695 <Virt::getPageState(unsigned long)+0x20>
c000b691:	83 e0 0f             	and    eax,0xf
c000b694:	c3                   	ret    
c000b695:	c0 e8 04             	shr    al,0x4
c000b698:	c3                   	ret    

c000b699 <Virt::allocateKernelVirtualPages(int)>:
c000b699:	55                   	push   ebp
c000b69a:	31 ed                	xor    ebp,ebp
c000b69c:	57                   	push   edi
c000b69d:	56                   	push   esi
c000b69e:	53                   	push   ebx
c000b69f:	31 db                	xor    ebx,ebx
c000b6a1:	83 ec 1c             	sub    esp,0x1c
c000b6a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6a8:	8b 3d 04 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025804
c000b6ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b6b3:	57                   	push   edi
c000b6b4:	e8 bc ff ff ff       	call   c000b675 <Virt::getPageState(unsigned long)>
c000b6b9:	5a                   	pop    edx
c000b6ba:	84 c0                	test   al,al
c000b6bc:	75 3a                	jne    c000b6f8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b6be:	85 db                	test   ebx,ebx
c000b6c0:	75 02                	jne    c000b6c4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b6c2:	89 fd                	mov    ebp,edi
c000b6c4:	43                   	inc    ebx
c000b6c5:	39 f3                	cmp    ebx,esi
c000b6c7:	74 5a                	je     c000b723 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b6c9:	47                   	inc    edi
c000b6ca:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6d0:	76 31                	jbe    c000b703 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b6d2:	c7 05 04 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025804,0xc8000
c000b6dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b6e1:	75 28                	jne    c000b70b <Virt::allocateKernelVirtualPages(int)+0x72>
c000b6e3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b6e8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b6ed:	57                   	push   edi
c000b6ee:	e8 82 ff ff ff       	call   c000b675 <Virt::getPageState(unsigned long)>
c000b6f3:	5a                   	pop    edx
c000b6f4:	84 c0                	test   al,al
c000b6f6:	74 c6                	je     c000b6be <Virt::allocateKernelVirtualPages(int)+0x25>
c000b6f8:	31 db                	xor    ebx,ebx
c000b6fa:	47                   	inc    edi
c000b6fb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b701:	77 cf                	ja     c000b6d2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b703:	89 3d 04 58 02 c0    	mov    DWORD PTR ds:0xc0025804,edi
c000b709:	eb a8                	jmp    c000b6b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b70b:	83 ec 0c             	sub    esp,0xc
c000b70e:	68 7c 2b 02 c0       	push   0xc0022b7c
c000b713:	e8 15 8c 00 00       	call   c001432d <Krnl::panic(char const*)>
c000b718:	8b 3d 04 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025804
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	eb 90                	jmp    c000b6b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b723:	89 2d 04 58 02 c0    	mov    DWORD PTR ds:0xc0025804,ebp
c000b729:	4b                   	dec    ebx
c000b72a:	74 5f                	je     c000b78b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b72c:	85 f6                	test   esi,esi
c000b72e:	74 3d                	je     c000b76d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b730:	89 e8                	mov    eax,ebp
c000b732:	31 db                	xor    ebx,ebx
c000b734:	8d 7e ff             	lea    edi,[esi-0x1]
c000b737:	eb 14                	jmp    c000b74d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b739:	6a 01                	push   0x1
c000b73b:	43                   	inc    ebx
c000b73c:	50                   	push   eax
c000b73d:	e8 fe fe ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b742:	58                   	pop    eax
c000b743:	39 f3                	cmp    ebx,esi
c000b745:	5a                   	pop    edx
c000b746:	74 25                	je     c000b76d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b748:	a1 04 58 02 c0       	mov    eax,ds:0xc0025804
c000b74d:	8d 50 01             	lea    edx,[eax+0x1]
c000b750:	85 db                	test   ebx,ebx
c000b752:	89 15 04 58 02 c0    	mov    DWORD PTR ds:0xc0025804,edx
c000b758:	74 20                	je     c000b77a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b75a:	39 df                	cmp    edi,ebx
c000b75c:	75 db                	jne    c000b739 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b75e:	6a 03                	push   0x3
c000b760:	43                   	inc    ebx
c000b761:	50                   	push   eax
c000b762:	e8 d9 fe ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b767:	59                   	pop    ecx
c000b768:	39 f3                	cmp    ebx,esi
c000b76a:	58                   	pop    eax
c000b76b:	75 db                	jne    c000b748 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b76d:	83 c4 1c             	add    esp,0x1c
c000b770:	89 e8                	mov    eax,ebp
c000b772:	5b                   	pop    ebx
c000b773:	c1 e0 0c             	shl    eax,0xc
c000b776:	5e                   	pop    esi
c000b777:	5f                   	pop    edi
c000b778:	5d                   	pop    ebp
c000b779:	c3                   	ret    
c000b77a:	6a 02                	push   0x2
c000b77c:	bb 01 00 00 00       	mov    ebx,0x1
c000b781:	50                   	push   eax
c000b782:	e8 b9 fe ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b787:	58                   	pop    eax
c000b788:	5a                   	pop    edx
c000b789:	eb bd                	jmp    c000b748 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b78b:	6a 04                	push   0x4
c000b78d:	8d 45 01             	lea    eax,[ebp+0x1]
c000b790:	55                   	push   ebp
c000b791:	a3 04 58 02 c0       	mov    ds:0xc0025804,eax
c000b796:	e8 a5 fe ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b79b:	59                   	pop    ecx
c000b79c:	89 e8                	mov    eax,ebp
c000b79e:	5b                   	pop    ebx
c000b79f:	c1 e0 0c             	shl    eax,0xc
c000b7a2:	83 c4 1c             	add    esp,0x1c
c000b7a5:	5b                   	pop    ebx
c000b7a6:	5e                   	pop    esi
c000b7a7:	5f                   	pop    edi
c000b7a8:	5d                   	pop    ebp
c000b7a9:	c3                   	ret    

c000b7aa <Virt::freeSwapfilePage(unsigned long)>:
c000b7aa:	53                   	push   ebx
c000b7ab:	8b 15 2c 65 02 c0    	mov    edx,DWORD PTR ds:0xc002652c
c000b7b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7b5:	b8 01 00 00 00       	mov    eax,0x1
c000b7ba:	89 cb                	mov    ebx,ecx
c000b7bc:	d3 e0                	shl    eax,cl
c000b7be:	c1 eb 05             	shr    ebx,0x5
c000b7c1:	f7 d0                	not    eax
c000b7c3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b7c6:	5b                   	pop    ebx
c000b7c7:	c3                   	ret    

c000b7c8 <Virt::swapIDToSector(unsigned long)>:
c000b7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cc:	0f af 05 0c 58 02 c0 	imul   eax,DWORD PTR ds:0xc002580c
c000b7d3:	03 05 14 58 02 c0    	add    eax,DWORD PTR ds:0xc0025814
c000b7d9:	c3                   	ret    

c000b7da <Virt::allocateSwapfilePage()>:
c000b7da:	55                   	push   ebp
c000b7db:	31 d2                	xor    edx,edx
c000b7dd:	57                   	push   edi
c000b7de:	56                   	push   esi
c000b7df:	53                   	push   ebx
c000b7e0:	83 ec 0c             	sub    esp,0xc
c000b7e3:	8b 0d 0c 58 02 c0    	mov    ecx,DWORD PTR ds:0xc002580c
c000b7e9:	a1 10 58 02 c0       	mov    eax,ds:0xc0025810
c000b7ee:	f7 f1                	div    ecx
c000b7f0:	39 0d 10 58 02 c0    	cmp    DWORD PTR ds:0xc0025810,ecx
c000b7f6:	72 2d                	jb     c000b825 <Virt::allocateSwapfilePage()+0x4b>
c000b7f8:	8b 35 2c 65 02 c0    	mov    esi,DWORD PTR ds:0xc002652c
c000b7fe:	8b 16                	mov    edx,DWORD PTR [esi]
c000b800:	f6 c2 01             	test   dl,0x1
c000b803:	74 3c                	je     c000b841 <Virt::allocateSwapfilePage()+0x67>
c000b805:	31 c9                	xor    ecx,ecx
c000b807:	bf 01 00 00 00       	mov    edi,0x1
c000b80c:	eb 12                	jmp    c000b820 <Virt::allocateSwapfilePage()+0x46>
c000b80e:	89 fd                	mov    ebp,edi
c000b810:	89 ca                	mov    edx,ecx
c000b812:	d3 e5                	shl    ebp,cl
c000b814:	c1 ea 05             	shr    edx,0x5
c000b817:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b81a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b81c:	85 ea                	test   edx,ebp
c000b81e:	74 2a                	je     c000b84a <Virt::allocateSwapfilePage()+0x70>
c000b820:	41                   	inc    ecx
c000b821:	39 c8                	cmp    eax,ecx
c000b823:	77 e9                	ja     c000b80e <Virt::allocateSwapfilePage()+0x34>
c000b825:	83 ec 0c             	sub    esp,0xc
c000b828:	68 34 2d 02 c0       	push   0xc0022d34
c000b82d:	e8 fb 8a 00 00       	call   c001432d <Krnl::panic(char const*)>
c000b832:	83 c4 10             	add    esp,0x10
c000b835:	31 c9                	xor    ecx,ecx
c000b837:	83 c4 0c             	add    esp,0xc
c000b83a:	89 c8                	mov    eax,ecx
c000b83c:	5b                   	pop    ebx
c000b83d:	5e                   	pop    esi
c000b83e:	5f                   	pop    edi
c000b83f:	5d                   	pop    ebp
c000b840:	c3                   	ret    
c000b841:	89 f3                	mov    ebx,esi
c000b843:	bd 01 00 00 00       	mov    ebp,0x1
c000b848:	31 c9                	xor    ecx,ecx
c000b84a:	09 ea                	or     edx,ebp
c000b84c:	89 c8                	mov    eax,ecx
c000b84e:	89 13                	mov    DWORD PTR [ebx],edx
c000b850:	83 c4 0c             	add    esp,0xc
c000b853:	5b                   	pop    ebx
c000b854:	5e                   	pop    esi
c000b855:	5f                   	pop    edi
c000b856:	5d                   	pop    ebp
c000b857:	c3                   	ret    

c000b858 <Virt::virtualMemorySetup()>:
c000b858:	53                   	push   ebx
c000b859:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b85e:	6a 0f                	push   0xf
c000b860:	53                   	push   ebx
c000b861:	43                   	inc    ebx
c000b862:	e8 d9 fd ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b867:	58                   	pop    eax
c000b868:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b86e:	5a                   	pop    edx
c000b86f:	75 ed                	jne    c000b85e <Virt::virtualMemorySetup()+0x6>
c000b871:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b876:	6a 00                	push   0x0
c000b878:	53                   	push   ebx
c000b879:	43                   	inc    ebx
c000b87a:	e8 c1 fd ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b87f:	59                   	pop    ecx
c000b880:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b886:	58                   	pop    eax
c000b887:	75 ed                	jne    c000b876 <Virt::virtualMemorySetup()+0x1e>
c000b889:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b88e:	6a 0f                	push   0xf
c000b890:	53                   	push   ebx
c000b891:	43                   	inc    ebx
c000b892:	e8 a9 fd ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b897:	58                   	pop    eax
c000b898:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b89e:	5a                   	pop    edx
c000b89f:	75 ed                	jne    c000b88e <Virt::virtualMemorySetup()+0x36>
c000b8a1:	5b                   	pop    ebx
c000b8a2:	c3                   	ret    

c000b8a3 <Virt::setupPageSwapping(int)>:
c000b8a3:	53                   	push   ebx
c000b8a4:	83 ec 0c             	sub    esp,0xc
c000b8a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b8ab:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c000b8b0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b8b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8b8:	53                   	push   ebx
c000b8b9:	c1 e3 0b             	shl    ebx,0xb
c000b8bc:	68 4b 2d 02 c0       	push   0xc0022d4b
c000b8c1:	50                   	push   eax
c000b8c2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b8c5:	89 1d 10 58 02 c0    	mov    DWORD PTR ds:0xc0025810,ebx
c000b8cb:	c6 05 18 58 02 c0 43 	mov    BYTE PTR ds:0xc0025818,0x43
c000b8d2:	c1 eb 08             	shr    ebx,0x8
c000b8d5:	a3 14 58 02 c0       	mov    ds:0xc0025814,eax
c000b8da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8dd:	c7 05 0c 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002580c,0x8
c000b8e7:	e8 d7 e0 ff ff       	call   c00099c3 <malloc>
c000b8ec:	83 c4 0c             	add    esp,0xc
c000b8ef:	89 c1                	mov    ecx,eax
c000b8f1:	a3 2c 65 02 c0       	mov    ds:0xc002652c,eax
c000b8f6:	31 d2                	xor    edx,edx
c000b8f8:	a1 10 58 02 c0       	mov    eax,ds:0xc0025810
c000b8fd:	f7 35 0c 58 02 c0    	div    DWORD PTR ds:0xc002580c
c000b903:	c1 e8 05             	shr    eax,0x5
c000b906:	50                   	push   eax
c000b907:	6a 00                	push   0x0
c000b909:	51                   	push   ecx
c000b90a:	e8 75 4d ff ff       	call   c0000684 <memset>
c000b90f:	83 c4 18             	add    esp,0x18
c000b912:	5b                   	pop    ebx
c000b913:	c3                   	ret    

c000b914 <VAS::VAS()>:
c000b914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b918:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b91f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b923:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b92e:	a3 30 65 02 c0       	mov    ds:0xc0026530,eax
c000b933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b937:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b93f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b946:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b94d:	90                   	nop
c000b94e:	c3                   	ret    
c000b94f:	90                   	nop

c000b950 <VAS::VAS(VAS*)>:
c000b950:	83 ec 0c             	sub    esp,0xc
c000b953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b957:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b962:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b969:	83 ec 0c             	sub    esp,0xc
c000b96c:	68 9c 2b 02 c0       	push   0xc0022b9c
c000b971:	e8 b7 89 00 00       	call   c001432d <Krnl::panic(char const*)>
c000b976:	83 c4 10             	add    esp,0x10
c000b979:	90                   	nop
c000b97a:	83 c4 0c             	add    esp,0xc
c000b97d:	c3                   	ret    

c000b97e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b97e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b982:	89 c2                	mov    edx,eax
c000b984:	c1 e8 0a             	shr    eax,0xa
c000b987:	c1 ea 16             	shr    edx,0x16
c000b98a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b98f:	19 c9                	sbb    ecx,ecx
c000b991:	c1 e2 0c             	shl    edx,0xc
c000b994:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b99a:	25 fc 0f 00 00       	and    eax,0xffc
c000b99f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b9a6:	01 d0                	add    eax,edx
c000b9a8:	c3                   	ret    
c000b9a9:	90                   	nop

c000b9aa <VAS::getPageTableEntry(unsigned long)>:
c000b9aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b9ae:	89 ca                	mov    edx,ecx
c000b9b0:	c1 e9 0a             	shr    ecx,0xa
c000b9b3:	c1 ea 16             	shr    edx,0x16
c000b9b6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b9bc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b9c2:	c1 e0 0c             	shl    eax,0xc
c000b9c5:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b9c8:	c3                   	ret    

c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b9c9:	57                   	push   edi
c000b9ca:	56                   	push   esi
c000b9cb:	be 01 00 00 00       	mov    esi,0x1
c000b9d0:	53                   	push   ebx
c000b9d1:	83 ec 10             	sub    esp,0x10
c000b9d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9d8:	c1 eb 0c             	shr    ebx,0xc
c000b9db:	eb 3f                	jmp    c000ba1c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b9dd:	83 ec 08             	sub    esp,0x8
c000b9e0:	57                   	push   edi
c000b9e1:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000b9e7:	e8 be ff ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9f1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b9f5:	f6 c4 04             	test   ah,0x4
c000b9f8:	75 5f                	jne    c000ba59 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b9fa:	80 fa 04             	cmp    dl,0x4
c000b9fd:	74 78                	je     c000ba77 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b9ff:	80 fa 02             	cmp    dl,0x2
c000ba02:	0f 84 88 00 00 00    	je     c000ba90 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba08:	80 fa 03             	cmp    dl,0x3
c000ba0b:	0f 84 ad 00 00 00    	je     c000babe <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba11:	fe ca                	dec    dl
c000ba13:	0f 84 92 00 00 00    	je     c000baab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba19:	43                   	inc    ebx
c000ba1a:	31 f6                	xor    esi,esi
c000ba1c:	53                   	push   ebx
c000ba1d:	89 df                	mov    edi,ebx
c000ba1f:	e8 51 fc ff ff       	call   c000b675 <Virt::getPageState(unsigned long)>
c000ba24:	c1 e7 0c             	shl    edi,0xc
c000ba27:	59                   	pop    ecx
c000ba28:	84 c0                	test   al,al
c000ba2a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ba2e:	75 ad                	jne    c000b9dd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000ba30:	83 ec 0c             	sub    esp,0xc
c000ba33:	68 62 2d 02 c0       	push   0xc0022d62
c000ba38:	e8 f0 88 00 00       	call   c001432d <Krnl::panic(char const*)>
c000ba3d:	58                   	pop    eax
c000ba3e:	5a                   	pop    edx
c000ba3f:	57                   	push   edi
c000ba40:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000ba46:	e8 5f ff ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000ba4b:	83 c4 10             	add    esp,0x10
c000ba4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba50:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba54:	f6 c4 04             	test   ah,0x4
c000ba57:	74 c0                	je     c000ba19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba59:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000ba5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	50                   	push   eax
c000ba66:	e8 ef e2 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba72:	80 fa 04             	cmp    dl,0x4
c000ba75:	75 88                	jne    c000b9ff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000ba77:	89 f0                	mov    eax,esi
c000ba79:	84 c0                	test   al,al
c000ba7b:	75 47                	jne    c000bac4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000ba7d:	c7 44 24 20 c0 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022bc0
c000ba85:	83 c4 10             	add    esp,0x10
c000ba88:	5b                   	pop    ebx
c000ba89:	5e                   	pop    esi
c000ba8a:	5f                   	pop    edi
c000ba8b:	e9 9d 88 00 00       	jmp    c001432d <Krnl::panic(char const*)>
c000ba90:	89 f0                	mov    eax,esi
c000ba92:	84 c0                	test   al,al
c000ba94:	75 15                	jne    c000baab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba96:	83 ec 0c             	sub    esp,0xc
c000ba99:	68 7e 2d 02 c0       	push   0xc0022d7e
c000ba9e:	e8 8a 88 00 00       	call   c001432d <Krnl::panic(char const*)>
c000baa3:	83 c4 10             	add    esp,0x10
c000baa6:	e9 6e ff ff ff       	jmp    c000ba19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baab:	83 ec 08             	sub    esp,0x8
c000baae:	6a 00                	push   0x0
c000bab0:	53                   	push   ebx
c000bab1:	e8 8a fb ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	e9 5b ff ff ff       	jmp    c000ba19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000babe:	89 f0                	mov    eax,esi
c000bac0:	84 c0                	test   al,al
c000bac2:	75 15                	jne    c000bad9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bac4:	83 ec 08             	sub    esp,0x8
c000bac7:	6a 00                	push   0x0
c000bac9:	53                   	push   ebx
c000baca:	e8 71 fb ff ff       	call   c000b640 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bacf:	83 c4 10             	add    esp,0x10
c000bad2:	83 c4 10             	add    esp,0x10
c000bad5:	5b                   	pop    ebx
c000bad6:	5e                   	pop    esi
c000bad7:	5f                   	pop    edi
c000bad8:	c3                   	ret    
c000bad9:	c7 44 24 20 9a 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d9a
c000bae1:	83 c4 10             	add    esp,0x10
c000bae4:	5b                   	pop    ebx
c000bae5:	5e                   	pop    esi
c000bae6:	5f                   	pop    edi
c000bae7:	e9 41 88 00 00       	jmp    c001432d <Krnl::panic(char const*)>

c000baec <VAS::freeAllocatedPages(unsigned long)>:
c000baec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000baf4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000baf8:	74 09                	je     c000bb03 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bafa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bafe:	e9 c6 fe ff ff       	jmp    c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000bb03:	c7 44 24 04 e4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022be4
c000bb0b:	e9 5b 0f 00 00       	jmp    c000ca6b <Dbg::kprintf(char const*, ...)>

c000bb10 <VAS::virtualToPhysical(unsigned long)>:
c000bb10:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb14:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb18:	e8 8d fe ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000bb1d:	5a                   	pop    edx
c000bb1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb20:	59                   	pop    ecx
c000bb21:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb26:	c3                   	ret    
c000bb27:	90                   	nop

c000bb28 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb28:	55                   	push   ebp
c000bb29:	57                   	push   edi
c000bb2a:	56                   	push   esi
c000bb2b:	53                   	push   ebx
c000bb2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb30:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bb34:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bb3c:	85 db                	test   ebx,ebx
c000bb3e:	7e 22                	jle    c000bb62 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bb40:	c1 e3 0c             	shl    ebx,0xc
c000bb43:	01 f3                	add    ebx,esi
c000bb45:	56                   	push   esi
c000bb46:	81 c6 00 10 00 00    	add    esi,0x1000
c000bb4c:	55                   	push   ebp
c000bb4d:	e8 58 fe ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000bb52:	5a                   	pop    edx
c000bb53:	59                   	pop    ecx
c000bb54:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb56:	21 f9                	and    ecx,edi
c000bb58:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bb5c:	39 f3                	cmp    ebx,esi
c000bb5e:	89 08                	mov    DWORD PTR [eax],ecx
c000bb60:	75 e3                	jne    c000bb45 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bb62:	5b                   	pop    ebx
c000bb63:	5e                   	pop    esi
c000bb64:	5f                   	pop    edi
c000bb65:	5d                   	pop    ebp
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <VAS::setToWriteCombining(unsigned long, int)>:
c000bb68:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000bb6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb73:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bb7a:	75 01                	jne    c000bb7d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bb7c:	c3                   	ret    
c000bb7d:	68 80 00 00 00       	push   0x80
c000bb82:	6a ff                	push   0xffffffff
c000bb84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb90:	e8 93 ff ff ff       	call   c000bb28 <VAS::reflagRange(unsigned long, int, int, int)>
c000bb95:	83 c4 14             	add    esp,0x14
c000bb98:	c3                   	ret    
c000bb99:	90                   	nop

c000bb9a <VAS::mapOtherVASIn(bool, VAS*)>:
c000bb9a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bb9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bba3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbaa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bbad:	19 c0                	sbb    eax,eax
c000bbaf:	83 ca 03             	or     edx,0x3
c000bbb2:	83 e0 fc             	and    eax,0xfffffffc
c000bbb5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bbbc:	0f 20 d8             	mov    eax,cr3
c000bbbf:	0f 22 d8             	mov    cr3,eax
c000bbc2:	c3                   	ret    
c000bbc3:	90                   	nop

c000bbc4 <VAS::~VAS()>:
c000bbc4:	83 ec 2c             	sub    esp,0x2c
c000bbc7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bbcf:	fa                   	cli    
c000bbd0:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bbd5:	40                   	inc    eax
c000bbd6:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000bbdb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bbe0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbe2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbe5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bbeb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bbef:	6a 01                	push   0x1
c000bbf1:	50                   	push   eax
c000bbf2:	e8 a3 ff ff ff       	call   c000bb9a <VAS::mapOtherVASIn(bool, VAS*)>
c000bbf7:	83 c4 0c             	add    esp,0xc
c000bbfa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc02:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc0a:	0f 8f d4 00 00 00    	jg     c000bce4 <VAS::~VAS()+0x120>
c000bc10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc1b:	c1 e2 02             	shl    edx,0x2
c000bc1e:	01 d0                	add    eax,edx
c000bc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc2a:	83 e0 01             	and    eax,0x1
c000bc2d:	0f 84 a8 00 00 00    	je     c000bcdb <VAS::~VAS()+0x117>
c000bc33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc3b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bc43:	7f 72                	jg     c000bcb7 <VAS::~VAS()+0xf3>
c000bc45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc49:	c1 e0 0a             	shl    eax,0xa
c000bc4c:	89 c2                	mov    edx,eax
c000bc4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bc52:	01 d0                	add    eax,edx
c000bc54:	c1 e0 0c             	shl    eax,0xc
c000bc57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc5b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc60:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc65:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc6b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc6f:	6a 01                	push   0x1
c000bc71:	50                   	push   eax
c000bc72:	e8 07 fd ff ff       	call   c000b97e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bc77:	83 c4 0c             	add    esp,0xc
c000bc7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc82:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc8c:	25 01 04 00 00       	and    eax,0x401
c000bc91:	3d 01 04 00 00       	cmp    eax,0x401
c000bc96:	75 19                	jne    c000bcb1 <VAS::~VAS()+0xed>
c000bc98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bca1:	83 ec 0c             	sub    esp,0xc
c000bca4:	50                   	push   eax
c000bca5:	e8 b0 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bcaa:	83 c4 10             	add    esp,0x10
c000bcad:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcb1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcb5:	eb 84                	jmp    c000bc3b <VAS::~VAS()+0x77>
c000bcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbb:	25 00 04 00 00       	and    eax,0x400
c000bcc0:	74 19                	je     c000bcdb <VAS::~VAS()+0x117>
c000bcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bccb:	83 ec 0c             	sub    esp,0xc
c000bcce:	50                   	push   eax
c000bccf:	e8 86 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bcd4:	83 c4 10             	add    esp,0x10
c000bcd7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcdb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bcdf:	e9 1e ff ff ff       	jmp    c000bc02 <VAS::~VAS()+0x3e>
c000bce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bce8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bceb:	83 ec 0c             	sub    esp,0xc
c000bcee:	50                   	push   eax
c000bcef:	e8 d5 fc ff ff       	call   c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000bcf4:	83 c4 10             	add    esp,0x10
c000bcf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bcfe:	83 ec 0c             	sub    esp,0xc
c000bd01:	50                   	push   eax
c000bd02:	e8 53 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd12:	c1 e0 02             	shl    eax,0x2
c000bd15:	83 ec 08             	sub    esp,0x8
c000bd18:	50                   	push   eax
c000bd19:	68 08 2c 02 c0       	push   0xc0022c08
c000bd1e:	e8 48 0d 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000bd23:	83 c4 10             	add    esp,0x10
c000bd26:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bd2b:	48                   	dec    eax
c000bd2c:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000bd31:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bd36:	85 c0                	test   eax,eax
c000bd38:	75 01                	jne    c000bd3b <VAS::~VAS()+0x177>
c000bd3a:	fb                   	sti    
c000bd3b:	90                   	nop
c000bd3c:	83 c4 2c             	add    esp,0x2c
c000bd3f:	c3                   	ret    

c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bd40:	55                   	push   ebp
c000bd41:	57                   	push   edi
c000bd42:	56                   	push   esi
c000bd43:	53                   	push   ebx
c000bd44:	83 ec 1c             	sub    esp,0x1c
c000bd47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd4f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bd55:	77 08                	ja     c000bd5f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bd57:	0f 20 d8             	mov    eax,cr3
c000bd5a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bd5d:	75 47                	jne    c000bda6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bd5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd63:	09 d8                	or     eax,ebx
c000bd65:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd6a:	75 57                	jne    c000bdc3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bd6c:	89 de                	mov    esi,ebx
c000bd6e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd71:	c1 ee 16             	shr    esi,0x16
c000bd74:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bd7b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bd7f:	74 54                	je     c000bdd5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bd81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd85:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bd8b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bd8f:	c1 e6 0c             	shl    esi,0xc
c000bd92:	c1 eb 0a             	shr    ebx,0xa
c000bd95:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bd9b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bd9e:	83 c4 1c             	add    esp,0x1c
c000bda1:	5b                   	pop    ebx
c000bda2:	5e                   	pop    esi
c000bda3:	5f                   	pop    edi
c000bda4:	5d                   	pop    ebp
c000bda5:	c3                   	ret    
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	68 28 2c 02 c0       	push   0xc0022c28
c000bdae:	e8 b8 0c 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000bdb3:	83 c4 10             	add    esp,0x10
c000bdb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdba:	09 d8                	or     eax,ebx
c000bdbc:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdc1:	74 a9                	je     c000bd6c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bdc3:	83 ec 0c             	sub    esp,0xc
c000bdc6:	68 90 2c 02 c0       	push   0xc0022c90
c000bdcb:	e8 5d 85 00 00       	call   c001432d <Krnl::panic(char const*)>
c000bdd0:	83 c4 10             	add    esp,0x10
c000bdd3:	eb 97                	jmp    c000bd6c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bdd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdd9:	e8 ed df ff ff       	call   c0009dcb <Phys::allocatePage()>
c000bdde:	83 ec 0c             	sub    esp,0xc
c000bde1:	89 c5                	mov    ebp,eax
c000bde3:	8b 0d 30 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026530
c000bde9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bded:	6a 01                	push   0x1
c000bdef:	e8 a5 f8 ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c000bdf4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bdfb:	6a 01                	push   0x1
c000bdfd:	50                   	push   eax
c000bdfe:	55                   	push   ebp
c000bdff:	81 cd 07 04 00 00    	or     ebp,0x407
c000be05:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be09:	51                   	push   ecx
c000be0a:	e8 27 02 00 00       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be0f:	83 c4 1c             	add    esp,0x1c
c000be12:	68 00 10 00 00       	push   0x1000
c000be17:	6a 00                	push   0x0
c000be19:	50                   	push   eax
c000be1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be1e:	e8 61 48 ff ff       	call   c0000684 <memset>
c000be23:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be27:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be2a:	e8 9a fb ff ff       	call   c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000be2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be33:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be36:	83 c4 10             	add    esp,0x10
c000be39:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000be3c:	e9 40 ff ff ff       	jmp    c000bd81 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000be41:	90                   	nop

c000be42 <VAS::allocatePages(int, int)>:
c000be42:	55                   	push   ebp
c000be43:	57                   	push   edi
c000be44:	56                   	push   esi
c000be45:	53                   	push   ebx
c000be46:	83 ec 1c             	sub    esp,0x1c
c000be49:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000be4d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000be52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be58:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be5e:	83 e0 01             	and    eax,0x1
c000be61:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000be65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000be69:	0f 85 cc 00 00 00    	jne    c000bf3b <VAS::allocatePages(int, int)+0xf9>
c000be6f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000be72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be76:	85 c0                	test   eax,eax
c000be78:	0f 84 a1 00 00 00    	je     c000bf1f <VAS::allocatePages(int, int)+0xdd>
c000be7e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be86:	c1 e6 0c             	shl    esi,0xc
c000be89:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000be8d:	85 c0                	test   eax,eax
c000be8f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000be92:	7e 33                	jle    c000bec7 <VAS::allocatePages(int, int)+0x85>
c000be94:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be98:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be9c:	81 cd 00 04 00 00    	or     ebp,0x400
c000bea2:	e8 24 df ff ff       	call   c0009dcb <Phys::allocatePage()>
c000bea7:	55                   	push   ebp
c000bea8:	53                   	push   ebx
c000bea9:	50                   	push   eax
c000beaa:	57                   	push   edi
c000beab:	e8 90 fe ff ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000beb0:	83 c4 10             	add    esp,0x10
c000beb3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000beb8:	74 03                	je     c000bebd <VAS::allocatePages(int, int)+0x7b>
c000beba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bebd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bec3:	39 de                	cmp    esi,ebx
c000bec5:	75 db                	jne    c000bea2 <VAS::allocatePages(int, int)+0x60>
c000bec7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000becc:	75 12                	jne    c000bee0 <VAS::allocatePages(int, int)+0x9e>
c000bece:	0f 20 d8             	mov    eax,cr3
c000bed1:	0f 22 d8             	mov    cr3,eax
c000bed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bed8:	83 c4 1c             	add    esp,0x1c
c000bedb:	5b                   	pop    ebx
c000bedc:	5e                   	pop    esi
c000bedd:	5f                   	pop    edi
c000bede:	5d                   	pop    ebp
c000bedf:	c3                   	ret    
c000bee0:	c1 ee 0a             	shr    esi,0xa
c000bee3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bee7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000beed:	c1 eb 0a             	shr    ebx,0xa
c000bef0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bef6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000befc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf02:	39 c3                	cmp    ebx,eax
c000bf04:	77 ce                	ja     c000bed4 <VAS::allocatePages(int, int)+0x92>
c000bf06:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf09:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf0f:	39 d8                	cmp    eax,ebx
c000bf11:	73 f3                	jae    c000bf06 <VAS::allocatePages(int, int)+0xc4>
c000bf13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf17:	83 c4 1c             	add    esp,0x1c
c000bf1a:	5b                   	pop    ebx
c000bf1b:	5e                   	pop    esi
c000bf1c:	5f                   	pop    edi
c000bf1d:	5d                   	pop    ebp
c000bf1e:	c3                   	ret    
c000bf1f:	83 ec 0c             	sub    esp,0xc
c000bf22:	68 b4 2c 02 c0       	push   0xc0022cb4
c000bf27:	e8 01 84 00 00       	call   c001432d <Krnl::panic(char const*)>
c000bf2c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf33:	83 c4 10             	add    esp,0x10
c000bf36:	e9 43 ff ff ff       	jmp    c000be7e <VAS::allocatePages(int, int)+0x3c>
c000bf3b:	83 ec 0c             	sub    esp,0xc
c000bf3e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bf42:	e8 52 f7 ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c000bf47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf4b:	83 c4 10             	add    esp,0x10
c000bf4e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bf53:	0f 87 9b 00 00 00    	ja     c000bff4 <VAS::allocatePages(int, int)+0x1b2>
c000bf59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bf5d:	85 d2                	test   edx,edx
c000bf5f:	7e 3c                	jle    c000bf9d <VAS::allocatePages(int, int)+0x15b>
c000bf61:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bf65:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf6d:	c1 e5 0c             	shl    ebp,0xc
c000bf70:	81 ce 00 04 00 00    	or     esi,0x400
c000bf76:	01 dd                	add    ebp,ebx
c000bf78:	e8 4e de ff ff       	call   c0009dcb <Phys::allocatePage()>
c000bf7d:	56                   	push   esi
c000bf7e:	53                   	push   ebx
c000bf7f:	50                   	push   eax
c000bf80:	57                   	push   edi
c000bf81:	e8 ba fd ff ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf86:	83 c4 10             	add    esp,0x10
c000bf89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf8e:	74 03                	je     c000bf93 <VAS::allocatePages(int, int)+0x151>
c000bf90:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf93:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf99:	39 dd                	cmp    ebp,ebx
c000bf9b:	75 db                	jne    c000bf78 <VAS::allocatePages(int, int)+0x136>
c000bf9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bfa2:	0f 84 26 ff ff ff    	je     c000bece <VAS::allocatePages(int, int)+0x8c>
c000bfa8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfb0:	89 d3                	mov    ebx,edx
c000bfb2:	c1 e0 0c             	shl    eax,0xc
c000bfb5:	c1 eb 0a             	shr    ebx,0xa
c000bfb8:	01 d0                	add    eax,edx
c000bfba:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bfc0:	c1 e8 0a             	shr    eax,0xa
c000bfc3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bfc9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfce:	2d 00 00 40 00       	sub    eax,0x400000
c000bfd3:	39 c3                	cmp    ebx,eax
c000bfd5:	0f 87 f9 fe ff ff    	ja     c000bed4 <VAS::allocatePages(int, int)+0x92>
c000bfdb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfde:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfe4:	39 d8                	cmp    eax,ebx
c000bfe6:	73 f3                	jae    c000bfdb <VAS::allocatePages(int, int)+0x199>
c000bfe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfec:	83 c4 1c             	add    esp,0x1c
c000bfef:	5b                   	pop    ebx
c000bff0:	5e                   	pop    esi
c000bff1:	5f                   	pop    edi
c000bff2:	5d                   	pop    ebp
c000bff3:	c3                   	ret    
c000bff4:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000bff9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfff:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c006:	0f 84 4d ff ff ff    	je     c000bf59 <VAS::allocatePages(int, int)+0x117>
c000c00c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c014:	e9 40 ff ff ff       	jmp    c000bf59 <VAS::allocatePages(int, int)+0x117>
c000c019:	90                   	nop

c000c01a <VAS::setCPUSpecific(unsigned long)>:
c000c01a:	83 ec 0c             	sub    esp,0xc
c000c01d:	6a 05                	push   0x5
c000c01f:	68 00 00 40 c2       	push   0xc2400000
c000c024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c02c:	e8 0f fd ff ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c031:	83 c4 1c             	add    esp,0x1c
c000c034:	c3                   	ret    
c000c035:	90                   	nop

c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c036:	55                   	push   ebp
c000c037:	57                   	push   edi
c000c038:	56                   	push   esi
c000c039:	53                   	push   ebx
c000c03a:	83 ec 1c             	sub    esp,0x1c
c000c03d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c042:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c046:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c04c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c050:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c056:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c05a:	83 e0 01             	and    eax,0x1
c000c05d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c061:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c065:	85 c0                	test   eax,eax
c000c067:	7e 39                	jle    c000c0a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c069:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c06d:	89 f3                	mov    ebx,esi
c000c06f:	c1 e0 0c             	shl    eax,0xc
c000c072:	01 f0                	add    eax,esi
c000c074:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c078:	55                   	push   ebp
c000c079:	53                   	push   ebx
c000c07a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c07e:	29 f0                	sub    eax,esi
c000c080:	01 d8                	add    eax,ebx
c000c082:	50                   	push   eax
c000c083:	57                   	push   edi
c000c084:	e8 b7 fc ff ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c091:	74 03                	je     c000c096 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c093:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c096:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c09c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c0a0:	75 d6                	jne    c000c078 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c0a2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0a7:	75 10                	jne    c000c0b9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c0a9:	0f 20 d8             	mov    eax,cr3
c000c0ac:	0f 22 d8             	mov    cr3,eax
c000c0af:	83 c4 1c             	add    esp,0x1c
c000c0b2:	89 f0                	mov    eax,esi
c000c0b4:	5b                   	pop    ebx
c000c0b5:	5e                   	pop    esi
c000c0b6:	5f                   	pop    edi
c000c0b7:	5d                   	pop    ebp
c000c0b8:	c3                   	ret    
c000c0b9:	89 f3                	mov    ebx,esi
c000c0bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0bf:	c1 eb 0a             	shr    ebx,0xa
c000c0c2:	c1 e0 0c             	shl    eax,0xc
c000c0c5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c0cb:	01 f0                	add    eax,esi
c000c0cd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c0d3:	c1 e8 0a             	shr    eax,0xa
c000c0d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0db:	2d 00 00 40 00       	sub    eax,0x400000
c000c0e0:	39 c3                	cmp    ebx,eax
c000c0e2:	77 cb                	ja     c000c0af <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c0e4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c0e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0ed:	39 d8                	cmp    eax,ebx
c000c0ef:	73 f3                	jae    c000c0e4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c0f1:	83 c4 1c             	add    esp,0x1c
c000c0f4:	89 f0                	mov    eax,esi
c000c0f6:	5b                   	pop    ebx
c000c0f7:	5e                   	pop    esi
c000c0f8:	5f                   	pop    edi
c000c0f9:	5d                   	pop    ebp
c000c0fa:	c3                   	ret    
c000c0fb:	90                   	nop

c000c0fc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c0fc:	55                   	push   ebp
c000c0fd:	57                   	push   edi
c000c0fe:	56                   	push   esi
c000c0ff:	53                   	push   ebx
c000c100:	83 ec 1c             	sub    esp,0x1c
c000c103:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c107:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c10b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c10f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c113:	a9 ff 0f 00 00       	test   eax,0xfff
c000c118:	75 4a                	jne    c000c164 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c11a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c11e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c121:	c1 eb 16             	shr    ebx,0x16
c000c124:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c12b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c12f:	74 4d                	je     c000c17e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c131:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c135:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c139:	c1 e8 0a             	shr    eax,0xa
c000c13c:	80 fa 01             	cmp    dl,0x1
c000c13f:	19 d2                	sbb    edx,edx
c000c141:	c1 e3 0c             	shl    ebx,0xc
c000c144:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c148:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c14e:	25 fc 0f 00 00       	and    eax,0xffc
c000c153:	01 d8                	add    eax,ebx
c000c155:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c15c:	83 c4 1c             	add    esp,0x1c
c000c15f:	5b                   	pop    ebx
c000c160:	5e                   	pop    esi
c000c161:	5f                   	pop    edi
c000c162:	5d                   	pop    ebp
c000c163:	c3                   	ret    
c000c164:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c168:	83 ec 0c             	sub    esp,0xc
c000c16b:	68 e0 2c 02 c0       	push   0xc0022ce0
c000c170:	e8 b8 81 00 00       	call   c001432d <Krnl::panic(char const*)>
c000c175:	83 c4 10             	add    esp,0x10
c000c178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c17c:	eb 9c                	jmp    c000c11a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c17e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c182:	e8 44 dc ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c187:	83 ec 0c             	sub    esp,0xc
c000c18a:	89 c5                	mov    ebp,eax
c000c18c:	8b 0d 30 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026530
c000c192:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c196:	6a 01                	push   0x1
c000c198:	e8 fc f4 ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c000c19d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c1a4:	6a 01                	push   0x1
c000c1a6:	50                   	push   eax
c000c1a7:	55                   	push   ebp
c000c1a8:	81 cd 07 04 00 00    	or     ebp,0x407
c000c1ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c1b2:	51                   	push   ecx
c000c1b3:	e8 7e fe ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1b8:	83 c4 1c             	add    esp,0x1c
c000c1bb:	68 00 10 00 00       	push   0x1000
c000c1c0:	6a 00                	push   0x0
c000c1c2:	50                   	push   eax
c000c1c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1c7:	e8 b8 44 ff ff       	call   c0000684 <memset>
c000c1cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c1d0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c1d3:	e8 f1 f7 ff ff       	call   c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c1e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1e5:	e9 47 ff ff ff       	jmp    c000c131 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c1ea <VAS::VAS(bool)>:
c000c1ea:	53                   	push   ebx
c000c1eb:	83 ec 28             	sub    esp,0x28
c000c1ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1f2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c1f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c201:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c205:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c20c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c210:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c214:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c217:	e8 af db ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c21c:	89 c2                	mov    edx,eax
c000c21e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c222:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c225:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	6a 01                	push   0x1
c000c230:	e8 64 f4 ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c000c235:	83 c4 10             	add    esp,0x10
c000c238:	89 c2                	mov    edx,eax
c000c23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c23e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c241:	83 ec 0c             	sub    esp,0xc
c000c244:	6a 03                	push   0x3
c000c246:	6a 01                	push   0x1
c000c248:	52                   	push   edx
c000c249:	50                   	push   eax
c000c24a:	53                   	push   ebx
c000c24b:	e8 e6 fd ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c250:	83 c4 20             	add    esp,0x20
c000c253:	89 c2                	mov    edx,eax
c000c255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c259:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c25c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c264:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c26c:	7f 1c                	jg     c000c28a <VAS::VAS(bool)+0xa0>
c000c26e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c272:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c275:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c279:	c1 e2 02             	shl    edx,0x2
c000c27c:	01 d0                	add    eax,edx
c000c27e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c284:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c288:	eb da                	jmp    c000c264 <VAS::VAS(bool)+0x7a>
c000c28a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c292:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c29a:	7f 7a                	jg     c000c316 <VAS::VAS(bool)+0x12c>
c000c29c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2a0:	2d 00 02 00 00       	sub    eax,0x200
c000c2a5:	c1 e0 0c             	shl    eax,0xc
c000c2a8:	83 c8 03             	or     eax,0x3
c000c2ab:	89 c2                	mov    edx,eax
c000c2ad:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c2b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2b8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c2be:	83 e0 10             	and    eax,0x10
c000c2c1:	84 c0                	test   al,al
c000c2c3:	74 07                	je     c000c2cc <VAS::VAS(bool)+0xe2>
c000c2c5:	b8 00 01 00 00       	mov    eax,0x100
c000c2ca:	eb 05                	jmp    c000c2d1 <VAS::VAS(bool)+0xe7>
c000c2cc:	b8 00 00 00 00       	mov    eax,0x0
c000c2d1:	09 d0                	or     eax,edx
c000c2d3:	89 c1                	mov    ecx,eax
c000c2d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2e0:	c1 e2 02             	shl    edx,0x2
c000c2e3:	01 d0                	add    eax,edx
c000c2e5:	89 ca                	mov    edx,ecx
c000c2e7:	89 10                	mov    DWORD PTR [eax],edx
c000c2e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2ed:	2d 40 03 00 00       	sub    eax,0x340
c000c2f2:	83 f8 7f             	cmp    eax,0x7f
c000c2f5:	77 16                	ja     c000c30d <VAS::VAS(bool)+0x123>
c000c2f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c302:	c1 e2 02             	shl    edx,0x2
c000c305:	01 d0                	add    eax,edx
c000c307:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c30d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c311:	e9 7c ff ff ff       	jmp    c000c292 <VAS::VAS(bool)+0xa8>
c000c316:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c31b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c321:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c327:	83 e0 10             	and    eax,0x10
c000c32a:	84 c0                	test   al,al
c000c32c:	74 07                	je     c000c335 <VAS::VAS(bool)+0x14b>
c000c32e:	b8 03 41 00 00       	mov    eax,0x4103
c000c333:	eb 05                	jmp    c000c33a <VAS::VAS(bool)+0x150>
c000c335:	b8 03 40 00 00       	mov    eax,0x4003
c000c33a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c33e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c341:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c347:	89 02                	mov    DWORD PTR [edx],eax
c000c349:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c34e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c354:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c35a:	83 ec 08             	sub    esp,0x8
c000c35d:	50                   	push   eax
c000c35e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c362:	e8 b3 fc ff ff       	call   c000c01a <VAS::setCPUSpecific(unsigned long)>
c000c367:	83 c4 10             	add    esp,0x10
c000c36a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c36e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c371:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c376:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c37c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c382:	83 e0 10             	and    eax,0x10
c000c385:	84 c0                	test   al,al
c000c387:	74 07                	je     c000c390 <VAS::VAS(bool)+0x1a6>
c000c389:	b8 00 01 00 00       	mov    eax,0x100
c000c38e:	eb 05                	jmp    c000c395 <VAS::VAS(bool)+0x1ab>
c000c390:	b8 00 00 00 00       	mov    eax,0x0
c000c395:	09 c2                	or     edx,eax
c000c397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c39e:	05 fc 0f 00 00       	add    eax,0xffc
c000c3a3:	83 ca 03             	or     edx,0x3
c000c3a6:	89 10                	mov    DWORD PTR [eax],edx
c000c3a8:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c3ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3b3:	83 ec 0c             	sub    esp,0xc
c000c3b6:	50                   	push   eax
c000c3b7:	e8 f6 1d 00 00       	call   c000e1b2 <Device::getName()>
c000c3bc:	83 c4 10             	add    esp,0x10
c000c3bf:	83 ec 08             	sub    esp,0x8
c000c3c2:	68 b4 2d 02 c0       	push   0xc0022db4
c000c3c7:	50                   	push   eax
c000c3c8:	e8 ff 43 ff ff       	call   c00007cc <strcmp>
c000c3cd:	83 c4 10             	add    esp,0x10
c000c3d0:	85 c0                	test   eax,eax
c000c3d2:	0f 94 c0             	sete   al
c000c3d5:	84 c0                	test   al,al
c000c3d7:	0f 84 87 00 00 00    	je     c000c464 <VAS::VAS(bool)+0x27a>
c000c3dd:	fa                   	cli    
c000c3de:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c3e3:	40                   	inc    eax
c000c3e4:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c3e9:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c3ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3f4:	05 7c 09 00 00       	add    eax,0x97c
c000c3f9:	83 ec 0c             	sub    esp,0xc
c000c3fc:	50                   	push   eax
c000c3fd:	e8 b0 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c402:	83 c4 10             	add    esp,0x10
c000c405:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c40a:	89 c3                	mov    ebx,eax
c000c40c:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c411:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c417:	05 7c 09 00 00       	add    eax,0x97c
c000c41c:	83 ec 0c             	sub    esp,0xc
c000c41f:	50                   	push   eax
c000c420:	e8 8d d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c425:	83 c4 10             	add    esp,0x10
c000c428:	83 ec 08             	sub    esp,0x8
c000c42b:	50                   	push   eax
c000c42c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c430:	e8 75 f5 ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000c435:	83 c4 10             	add    esp,0x10
c000c438:	8b 00                	mov    eax,DWORD PTR [eax]
c000c43a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c43f:	6a 11                	push   0x11
c000c441:	53                   	push   ebx
c000c442:	50                   	push   eax
c000c443:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c447:	e8 f4 f8 ff ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c454:	48                   	dec    eax
c000c455:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c45a:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c45f:	85 c0                	test   eax,eax
c000c461:	75 01                	jne    c000c464 <VAS::VAS(bool)+0x27a>
c000c463:	fb                   	sti    
c000c464:	90                   	nop
c000c465:	83 c4 28             	add    esp,0x28
c000c468:	5b                   	pop    ebx
c000c469:	c3                   	ret    

c000c46a <VAS::evict(unsigned long)>:
c000c46a:	55                   	push   ebp
c000c46b:	57                   	push   edi
c000c46c:	56                   	push   esi
c000c46d:	53                   	push   ebx
c000c46e:	83 ec 28             	sub    esp,0x28
c000c471:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c475:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c479:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c47d:	68 c2 2d 02 c0       	push   0xc0022dc2
c000c482:	e8 e4 05 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c487:	e8 4e f3 ff ff       	call   c000b7da <Virt::allocateSwapfilePage()>
c000c48c:	5a                   	pop    edx
c000c48d:	89 c7                	mov    edi,eax
c000c48f:	59                   	pop    ecx
c000c490:	50                   	push   eax
c000c491:	68 df 2d 02 c0       	push   0xc0022ddf
c000c496:	e8 d0 05 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c49b:	83 c4 10             	add    esp,0x10
c000c49e:	8b 1d 0c 58 02 c0    	mov    ebx,DWORD PTR ds:0xc002580c
c000c4a4:	85 db                	test   ebx,ebx
c000c4a6:	7e 3d                	jle    c000c4e5 <VAS::evict(unsigned long)+0x7b>
c000c4a8:	89 ee                	mov    esi,ebp
c000c4aa:	31 db                	xor    ebx,ebx
c000c4ac:	83 ec 0c             	sub    esp,0xc
c000c4af:	57                   	push   edi
c000c4b0:	e8 13 f3 ff ff       	call   c000b7c8 <Virt::swapIDToSector(unsigned long)>
c000c4b5:	89 34 24             	mov    DWORD PTR [esp],esi
c000c4b8:	01 d8                	add    eax,ebx
c000c4ba:	6a 01                	push   0x1
c000c4bc:	31 d2                	xor    edx,edx
c000c4be:	43                   	inc    ebx
c000c4bf:	52                   	push   edx
c000c4c0:	81 c6 00 02 00 00    	add    esi,0x200
c000c4c6:	50                   	push   eax
c000c4c7:	0f be 05 18 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025818
c000c4ce:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c000c4d5:	e8 1a 3d 00 00       	call   c00101f4 <LogicalDisk::write(unsigned long long, int, void*)>
c000c4da:	83 c4 20             	add    esp,0x20
c000c4dd:	39 1d 0c 58 02 c0    	cmp    DWORD PTR ds:0xc002580c,ebx
c000c4e3:	7f c7                	jg     c000c4ac <VAS::evict(unsigned long)+0x42>
c000c4e5:	83 ec 08             	sub    esp,0x8
c000c4e8:	c1 e7 0b             	shl    edi,0xb
c000c4eb:	55                   	push   ebp
c000c4ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4f0:	e8 b5 f4 ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000c4f5:	5a                   	pop    edx
c000c4f6:	89 c6                	mov    esi,eax
c000c4f8:	59                   	pop    ecx
c000c4f9:	ff 30                	push   DWORD PTR [eax]
c000c4fb:	68 ef 2d 02 c0       	push   0xc0022def
c000c500:	e8 66 05 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c505:	8b 16                	mov    edx,DWORD PTR [esi]
c000c507:	89 d3                	mov    ebx,edx
c000c509:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c50f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c515:	09 d7                	or     edi,edx
c000c517:	89 3e                	mov    DWORD PTR [esi],edi
c000c519:	5e                   	pop    esi
c000c51a:	58                   	pop    eax
c000c51b:	57                   	push   edi
c000c51c:	68 08 2e 02 c0       	push   0xc0022e08
c000c521:	e8 45 05 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c526:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c529:	ff 05 28 65 02 c0    	inc    DWORD PTR ds:0xc0026528
c000c52f:	e8 26 d8 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000c534:	0f 20 d8             	mov    eax,cr3
c000c537:	0f 22 d8             	mov    cr3,eax
c000c53a:	ff 35 28 65 02 c0    	push   DWORD PTR ds:0xc0026528
c000c540:	55                   	push   ebp
c000c541:	53                   	push   ebx
c000c542:	68 04 2d 02 c0       	push   0xc0022d04
c000c547:	e8 1f 05 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c54c:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000c551:	c7 44 24 50 21 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022e21
c000c559:	8d 50 01             	lea    edx,[eax+0x1]
c000c55c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c560:	89 15 24 65 02 c0    	mov    DWORD PTR ds:0xc0026524,edx
c000c566:	83 c4 3c             	add    esp,0x3c
c000c569:	5b                   	pop    ebx
c000c56a:	5e                   	pop    esi
c000c56b:	5f                   	pop    edi
c000c56c:	5d                   	pop    ebp
c000c56d:	e9 f9 04 00 00       	jmp    c000ca6b <Dbg::kprintf(char const*, ...)>

c000c572 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c572:	55                   	push   ebp
c000c573:	57                   	push   edi
c000c574:	56                   	push   esi
c000c575:	53                   	push   ebx
c000c576:	83 ec 24             	sub    esp,0x24
c000c579:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c57d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c581:	68 32 2e 02 c0       	push   0xc0022e32
c000c586:	e8 e0 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c58b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c58f:	58                   	pop    eax
c000c590:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c596:	5a                   	pop    edx
c000c597:	57                   	push   edi
c000c598:	53                   	push   ebx
c000c599:	e8 0c f4 ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000c59e:	59                   	pop    ecx
c000c59f:	5e                   	pop    esi
c000c5a0:	89 c6                	mov    esi,eax
c000c5a2:	ff 30                	push   DWORD PTR [eax]
c000c5a4:	68 45 2e 02 c0       	push   0xc0022e45
c000c5a9:	e8 bd 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c5ae:	83 c4 10             	add    esp,0x10
c000c5b1:	85 ff                	test   edi,edi
c000c5b3:	74 0a                	je     c000c5bf <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c5b5:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c5b7:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c5bd:	74 0a                	je     c000c5c9 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c5bf:	83 c4 1c             	add    esp,0x1c
c000c5c2:	31 c0                	xor    eax,eax
c000c5c4:	5b                   	pop    ebx
c000c5c5:	5e                   	pop    esi
c000c5c6:	5f                   	pop    edi
c000c5c7:	5d                   	pop    ebp
c000c5c8:	c3                   	ret    
c000c5c9:	83 ec 08             	sub    esp,0x8
c000c5cc:	c1 ed 0b             	shr    ebp,0xb
c000c5cf:	55                   	push   ebp
c000c5d0:	68 53 2e 02 c0       	push   0xc0022e53
c000c5d5:	e8 91 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c5da:	e8 ec d7 ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c5df:	59                   	pop    ecx
c000c5e0:	5a                   	pop    edx
c000c5e1:	50                   	push   eax
c000c5e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5e6:	68 5e 2e 02 c0       	push   0xc0022e5e
c000c5eb:	e8 7b 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c5f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5f4:	8b 16                	mov    edx,DWORD PTR [esi]
c000c5f6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c5fc:	09 d0                	or     eax,edx
c000c5fe:	0d 01 08 00 00       	or     eax,0x801
c000c603:	89 06                	mov    DWORD PTR [esi],eax
c000c605:	59                   	pop    ecx
c000c606:	5e                   	pop    esi
c000c607:	50                   	push   eax
c000c608:	68 73 2e 02 c0       	push   0xc0022e73
c000c60d:	e8 59 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c612:	0f 20 d8             	mov    eax,cr3
c000c615:	83 c4 0c             	add    esp,0xc
c000c618:	53                   	push   ebx
c000c619:	50                   	push   eax
c000c61a:	68 8b 2e 02 c0       	push   0xc0022e8b
c000c61f:	e8 47 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c624:	c7 04 24 a3 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ea3
c000c62b:	e8 3b 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c630:	83 c4 10             	add    esp,0x10
c000c633:	a1 0c 58 02 c0       	mov    eax,ds:0xc002580c
c000c638:	85 c0                	test   eax,eax
c000c63a:	7e 3d                	jle    c000c679 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c63c:	89 fe                	mov    esi,edi
c000c63e:	31 db                	xor    ebx,ebx
c000c640:	83 ec 0c             	sub    esp,0xc
c000c643:	55                   	push   ebp
c000c644:	e8 7f f1 ff ff       	call   c000b7c8 <Virt::swapIDToSector(unsigned long)>
c000c649:	89 34 24             	mov    DWORD PTR [esp],esi
c000c64c:	01 d8                	add    eax,ebx
c000c64e:	6a 01                	push   0x1
c000c650:	31 d2                	xor    edx,edx
c000c652:	43                   	inc    ebx
c000c653:	52                   	push   edx
c000c654:	81 c6 00 02 00 00    	add    esi,0x200
c000c65a:	50                   	push   eax
c000c65b:	0f be 05 18 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025818
c000c662:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c000c669:	e8 1a 3b 00 00       	call   c0010188 <LogicalDisk::read(unsigned long long, int, void*)>
c000c66e:	83 c4 20             	add    esp,0x20
c000c671:	39 1d 0c 58 02 c0    	cmp    DWORD PTR ds:0xc002580c,ebx
c000c677:	7f c7                	jg     c000c640 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c679:	a1 28 65 02 c0       	mov    eax,ds:0xc0026528
c000c67e:	48                   	dec    eax
c000c67f:	52                   	push   edx
c000c680:	a3 28 65 02 c0       	mov    ds:0xc0026528,eax
c000c685:	50                   	push   eax
c000c686:	57                   	push   edi
c000c687:	68 b3 2e 02 c0       	push   0xc0022eb3
c000c68c:	e8 da 03 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c691:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c694:	e8 11 f1 ff ff       	call   c000b7aa <Virt::freeSwapfilePage(unsigned long)>
c000c699:	c7 04 24 c8 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec8
c000c6a0:	e8 c6 03 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c6a5:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c6aa:	83 c4 10             	add    esp,0x10
c000c6ad:	48                   	dec    eax
c000c6ae:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c6b3:	85 c0                	test   eax,eax
c000c6b5:	75 01                	jne    c000c6b8 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c6b7:	fb                   	sti    
c000c6b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c6bc:	25 ff 0f 00 00       	and    eax,0xfff
c000c6c1:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c6c6:	77 20                	ja     c000c6e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c6c8:	0f 20 d8             	mov    eax,cr3
c000c6cb:	0f 22 d8             	mov    cr3,eax
c000c6ce:	83 ec 0c             	sub    esp,0xc
c000c6d1:	68 ee 2e 02 c0       	push   0xc0022eee
c000c6d6:	e8 90 03 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c6db:	83 c4 10             	add    esp,0x10
c000c6de:	b0 01                	mov    al,0x1
c000c6e0:	83 c4 1c             	add    esp,0x1c
c000c6e3:	5b                   	pop    ebx
c000c6e4:	5e                   	pop    esi
c000c6e5:	5f                   	pop    edi
c000c6e6:	5d                   	pop    ebp
c000c6e7:	c3                   	ret    
c000c6e8:	83 ec 0c             	sub    esp,0xc
c000c6eb:	68 de 2e 02 c0       	push   0xc0022ede
c000c6f0:	e8 76 03 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	eb ce                	jmp    c000c6c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c6fa <VAS::scanForEviction()>:
c000c6fa:	57                   	push   edi
c000c6fb:	31 ff                	xor    edi,edi
c000c6fd:	56                   	push   esi
c000c6fe:	53                   	push   ebx
c000c6ff:	83 ec 10             	sub    esp,0x10
c000c702:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c706:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c709:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c70f:	75 0e                	jne    c000c71f <VAS::scanForEviction()+0x25>
c000c711:	89 da                	mov    edx,ebx
c000c713:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c716:	c1 ea 16             	shr    edx,0x16
c000c719:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c71d:	74 4e                	je     c000c76d <VAS::scanForEviction()+0x73>
c000c71f:	53                   	push   ebx
c000c720:	56                   	push   esi
c000c721:	e8 84 f2 ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000c726:	5a                   	pop    edx
c000c727:	8b 10                	mov    edx,DWORD PTR [eax]
c000c729:	59                   	pop    ecx
c000c72a:	89 d1                	mov    ecx,edx
c000c72c:	81 e1 01 08 00 00    	and    ecx,0x801
c000c732:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c738:	74 3e                	je     c000c778 <VAS::scanForEviction()+0x7e>
c000c73a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c740:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c746:	76 2b                	jbe    c000c773 <VAS::scanForEviction()+0x79>
c000c748:	47                   	inc    edi
c000c749:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c750:	83 ff 03             	cmp    edi,0x3
c000c753:	74 32                	je     c000c787 <VAS::scanForEviction()+0x8d>
c000c755:	31 db                	xor    ebx,ebx
c000c757:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c75d:	75 c0                	jne    c000c71f <VAS::scanForEviction()+0x25>
c000c75f:	89 da                	mov    edx,ebx
c000c761:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c764:	c1 ea 16             	shr    edx,0x16
c000c767:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c76b:	75 b2                	jne    c000c71f <VAS::scanForEviction()+0x25>
c000c76d:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c773:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c776:	eb 91                	jmp    c000c709 <VAS::scanForEviction()+0xf>
c000c778:	f6 c2 20             	test   dl,0x20
c000c77b:	74 13                	je     c000c790 <VAS::scanForEviction()+0x96>
c000c77d:	83 e2 df             	and    edx,0xffffffdf
c000c780:	89 10                	mov    DWORD PTR [eax],edx
c000c782:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c785:	eb b3                	jmp    c000c73a <VAS::scanForEviction()+0x40>
c000c787:	83 c4 10             	add    esp,0x10
c000c78a:	31 c0                	xor    eax,eax
c000c78c:	5b                   	pop    ebx
c000c78d:	5e                   	pop    esi
c000c78e:	5f                   	pop    edi
c000c78f:	c3                   	ret    
c000c790:	83 ec 08             	sub    esp,0x8
c000c793:	89 d0                	mov    eax,edx
c000c795:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c79a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c79e:	53                   	push   ebx
c000c79f:	68 fc 2e 02 c0       	push   0xc0022efc
c000c7a4:	e8 c2 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c7a9:	58                   	pop    eax
c000c7aa:	5a                   	pop    edx
c000c7ab:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7ae:	56                   	push   esi
c000c7af:	e8 b6 fc ff ff       	call   c000c46a <VAS::evict(unsigned long)>
c000c7b4:	59                   	pop    ecx
c000c7b5:	5b                   	pop    ebx
c000c7b6:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7b9:	68 10 2f 02 c0       	push   0xc0022f10
c000c7be:	e8 a8 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c7c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c7ca:	83 c4 10             	add    esp,0x10
c000c7cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	5b                   	pop    ebx
c000c7d5:	5e                   	pop    esi
c000c7d6:	5f                   	pop    edi
c000c7d7:	c3                   	ret    

c000c7d8 <mapVASFirstTime>:
c000c7d8:	55                   	push   ebp
c000c7d9:	57                   	push   edi
c000c7da:	56                   	push   esi
c000c7db:	53                   	push   ebx
c000c7dc:	83 ec 0c             	sub    esp,0xc
c000c7df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7e7:	4a                   	dec    edx
c000c7e8:	0f 84 fe 00 00 00    	je     c000c8ec <mapVASFirstTime+0x114>
c000c7ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c7f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c7f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c7f9:	c1 e5 15             	shl    ebp,0x15
c000c7fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c801:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c807:	29 eb                	sub    ebx,ebp
c000c809:	29 ef                	sub    edi,ebp
c000c80b:	83 ec 08             	sub    esp,0x8
c000c80e:	53                   	push   ebx
c000c80f:	68 3c 2f 02 c0       	push   0xc0022f3c
c000c814:	e8 52 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c819:	e8 ad d5 ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c81e:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c825:	6a 01                	push   0x1
c000c827:	53                   	push   ebx
c000c828:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c82e:	50                   	push   eax
c000c82f:	56                   	push   esi
c000c830:	e8 01 f8 ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c835:	83 c4 20             	add    esp,0x20
c000c838:	39 fb                	cmp    ebx,edi
c000c83a:	75 cf                	jne    c000c80b <mapVASFirstTime+0x33>
c000c83c:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c841:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c846:	29 eb                	sub    ebx,ebp
c000c848:	29 ef                	sub    edi,ebp
c000c84a:	83 ec 08             	sub    esp,0x8
c000c84d:	53                   	push   ebx
c000c84e:	68 58 2f 02 c0       	push   0xc0022f58
c000c853:	e8 13 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c858:	58                   	pop    eax
c000c859:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c85d:	5a                   	pop    edx
c000c85e:	19 c0                	sbb    eax,eax
c000c860:	83 e0 04             	and    eax,0x4
c000c863:	05 03 04 00 00       	add    eax,0x403
c000c868:	50                   	push   eax
c000c869:	68 7d 2e 02 c0       	push   0xc0022e7d
c000c86e:	e8 f8 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c873:	e8 53 d5 ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c878:	59                   	pop    ecx
c000c879:	89 c5                	mov    ebp,eax
c000c87b:	58                   	pop    eax
c000c87c:	55                   	push   ebp
c000c87d:	68 6c 2f 02 c0       	push   0xc0022f6c
c000c882:	e8 e4 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c887:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c88b:	19 d2                	sbb    edx,edx
c000c88d:	83 e2 04             	and    edx,0x4
c000c890:	81 c2 03 04 00 00    	add    edx,0x403
c000c896:	89 14 24             	mov    DWORD PTR [esp],edx
c000c899:	6a 01                	push   0x1
c000c89b:	53                   	push   ebx
c000c89c:	55                   	push   ebp
c000c89d:	56                   	push   esi
c000c89e:	e8 93 f7 ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8a3:	83 c4 18             	add    esp,0x18
c000c8a6:	53                   	push   ebx
c000c8a7:	56                   	push   esi
c000c8a8:	e8 fd f0 ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c000c8ad:	5a                   	pop    edx
c000c8ae:	59                   	pop    ecx
c000c8af:	ff 30                	push   DWORD PTR [eax]
c000c8b1:	68 88 2f 02 c0       	push   0xc0022f88
c000c8b6:	e8 b0 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c8bb:	0f 20 d8             	mov    eax,cr3
c000c8be:	83 c4 0c             	add    esp,0xc
c000c8c1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8c7:	56                   	push   esi
c000c8c8:	50                   	push   eax
c000c8c9:	68 8b 2e 02 c0       	push   0xc0022e8b
c000c8ce:	e8 98 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c8d3:	83 c4 10             	add    esp,0x10
c000c8d6:	39 df                	cmp    edi,ebx
c000c8d8:	0f 85 6c ff ff ff    	jne    c000c84a <mapVASFirstTime+0x72>
c000c8de:	0f 20 d8             	mov    eax,cr3
c000c8e1:	0f 22 d8             	mov    cr3,eax
c000c8e4:	83 c4 0c             	add    esp,0xc
c000c8e7:	5b                   	pop    ebx
c000c8e8:	5e                   	pop    esi
c000c8e9:	5f                   	pop    edi
c000c8ea:	5d                   	pop    ebp
c000c8eb:	c3                   	ret    
c000c8ec:	83 ec 0c             	sub    esp,0xc
c000c8ef:	68 23 2f 02 c0       	push   0xc0022f23
c000c8f4:	e8 72 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	83 c4 0c             	add    esp,0xc
c000c8ff:	5b                   	pop    ebx
c000c900:	5e                   	pop    esi
c000c901:	5f                   	pop    edi
c000c902:	5d                   	pop    ebp
c000c903:	c3                   	ret    

c000c904 <__cxa_atexit>:
c000c904:	31 c0                	xor    eax,eax
c000c906:	c3                   	ret    

c000c907 <__cxa_finalize>:
c000c907:	c3                   	ret    

c000c908 <__stack_chk_fail>:
c000c908:	55                   	push   ebp
c000c909:	89 e5                	mov    ebp,esp
c000c90b:	83 ec 14             	sub    esp,0x14
c000c90e:	68 93 2f 02 c0       	push   0xc0022f93
c000c913:	e8 53 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c918:	58                   	pop    eax
c000c919:	5a                   	pop    edx
c000c91a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c91d:	68 e3 2f 02 c0       	push   0xc0022fe3
c000c922:	e8 44 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c927:	59                   	pop    ecx
c000c928:	58                   	pop    eax
c000c929:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c92c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c92f:	68 e3 2f 02 c0       	push   0xc0022fe3
c000c934:	e8 32 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c939:	5a                   	pop    edx
c000c93a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c93d:	59                   	pop    ecx
c000c93e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c940:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c943:	68 e3 2f 02 c0       	push   0xc0022fe3
c000c948:	e8 1e 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c94d:	5a                   	pop    edx
c000c94e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c951:	59                   	pop    ecx
c000c952:	8b 00                	mov    eax,DWORD PTR [eax]
c000c954:	8b 00                	mov    eax,DWORD PTR [eax]
c000c956:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c959:	68 e3 2f 02 c0       	push   0xc0022fe3
c000c95e:	e8 08 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c963:	c7 04 24 eb 2f 02 c0 	mov    DWORD PTR [esp],0xc0022feb
c000c96a:	e8 be 79 00 00       	call   c001432d <Krnl::panic(char const*)>
c000c96f:	83 c4 10             	add    esp,0x10
c000c972:	c9                   	leave  
c000c973:	c3                   	ret    

c000c974 <__cxa_pure_virtual>:
c000c974:	83 ec 18             	sub    esp,0x18
c000c977:	68 03 30 02 c0       	push   0xc0023003
c000c97c:	e8 ac 79 00 00       	call   c001432d <Krnl::panic(char const*)>
c000c981:	83 c4 1c             	add    esp,0x1c
c000c984:	c3                   	ret    

c000c985 <operator new[](unsigned long)>:
c000c985:	e9 39 d0 ff ff       	jmp    c00099c3 <malloc>

c000c98a <operator delete(void*, unsigned long)>:
c000c98a:	e9 54 d0 ff ff       	jmp    c00099e3 <rfree>

c000c98f <operator delete[](void*)>:
c000c98f:	e9 4f d0 ff ff       	jmp    c00099e3 <rfree>

c000c994 <operator delete[](void*, unsigned long)>:
c000c994:	e9 4a d0 ff ff       	jmp    c00099e3 <rfree>

c000c999 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c999:	55                   	push   ebp
c000c99a:	b9 11 00 00 00       	mov    ecx,0x11
c000c99f:	57                   	push   edi
c000c9a0:	56                   	push   esi
c000c9a1:	be 1e 2a 02 c0       	mov    esi,0xc0022a1e
c000c9a6:	53                   	push   ebx
c000c9a7:	83 ec 20             	sub    esp,0x20
c000c9aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c9ae:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c9b2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c9b6:	fc                   	cld    
c000c9b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9b9:	89 ee                	mov    esi,ebp
c000c9bb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c9bf:	eb 02                	jmp    c000c9c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c9c1:	89 c6                	mov    esi,eax
c000c9c3:	31 d2                	xor    edx,edx
c000c9c5:	41                   	inc    ecx
c000c9c6:	89 f0                	mov    eax,esi
c000c9c8:	f7 f3                	div    ebx
c000c9ca:	39 de                	cmp    esi,ebx
c000c9cc:	73 f3                	jae    c000c9c1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c9ce:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c9d1:	eb 02                	jmp    c000c9d5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c9d3:	89 c5                	mov    ebp,eax
c000c9d5:	31 d2                	xor    edx,edx
c000c9d7:	49                   	dec    ecx
c000c9d8:	89 e8                	mov    eax,ebp
c000c9da:	f7 f3                	div    ebx
c000c9dc:	39 dd                	cmp    ebp,ebx
c000c9de:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c9e2:	88 11                	mov    BYTE PTR [ecx],dl
c000c9e4:	73 ed                	jae    c000c9d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	5b                   	pop    ebx
c000c9ee:	5e                   	pop    esi
c000c9ef:	5f                   	pop    edi
c000c9f0:	5d                   	pop    ebp
c000c9f1:	c3                   	ret    

c000c9f2 <Dbg::logc(char)>:
c000c9f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9f6:	f6 05 e0 63 02 c0 10 	test   BYTE PTR ds:0xc00263e0,0x10
c000c9fd:	75 12                	jne    c000ca11 <Dbg::logc(char)+0x1f>
c000c9ff:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca04:	ec                   	in     al,dx
c000ca05:	a8 20                	test   al,0x20
c000ca07:	74 fb                	je     c000ca04 <Dbg::logc(char)+0x12>
c000ca09:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca0e:	88 c8                	mov    al,cl
c000ca10:	ee                   	out    dx,al
c000ca11:	c3                   	ret    

c000ca12 <Dbg::logs(char*)>:
c000ca12:	53                   	push   ebx
c000ca13:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca17:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca1a:	84 c0                	test   al,al
c000ca1c:	74 0f                	je     c000ca2d <Dbg::logs(char*)+0x1b>
c000ca1e:	50                   	push   eax
c000ca1f:	43                   	inc    ebx
c000ca20:	e8 cd ff ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000ca25:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca28:	5a                   	pop    edx
c000ca29:	84 c0                	test   al,al
c000ca2b:	75 f1                	jne    c000ca1e <Dbg::logs(char*)+0xc>
c000ca2d:	5b                   	pop    ebx
c000ca2e:	c3                   	ret    

c000ca2f <Dbg::logWriteInt(unsigned int)>:
c000ca2f:	83 ec 10             	sub    esp,0x10
c000ca32:	6a 0a                	push   0xa
c000ca34:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca38:	50                   	push   eax
c000ca39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3d:	e8 57 ff ff ff       	call   c000c999 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca42:	50                   	push   eax
c000ca43:	e8 ca ff ff ff       	call   c000ca12 <Dbg::logs(char*)>
c000ca48:	83 c4 20             	add    esp,0x20
c000ca4b:	c3                   	ret    

c000ca4c <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca4c:	83 ec 10             	sub    esp,0x10
c000ca4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca53:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca57:	50                   	push   eax
c000ca58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca5c:	e8 38 ff ff ff       	call   c000c999 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca61:	50                   	push   eax
c000ca62:	e8 ab ff ff ff       	call   c000ca12 <Dbg::logs(char*)>
c000ca67:	83 c4 20             	add    esp,0x20
c000ca6a:	c3                   	ret    

c000ca6b <Dbg::kprintf(char const*, ...)>:
c000ca6b:	55                   	push   ebp
c000ca6c:	57                   	push   edi
c000ca6d:	56                   	push   esi
c000ca6e:	53                   	push   ebx
c000ca6f:	83 ec 0c             	sub    esp,0xc
c000ca72:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca76:	f6 05 e0 63 02 c0 10 	test   BYTE PTR ds:0xc00263e0,0x10
c000ca7d:	74 08                	je     c000ca87 <Dbg::kprintf(char const*, ...)+0x1c>
c000ca7f:	83 c4 0c             	add    esp,0xc
c000ca82:	5b                   	pop    ebx
c000ca83:	5e                   	pop    esi
c000ca84:	5f                   	pop    edi
c000ca85:	5d                   	pop    ebp
c000ca86:	c3                   	ret    
c000ca87:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca8b:	31 db                	xor    ebx,ebx
c000ca8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca91:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca94:	84 c0                	test   al,al
c000ca96:	74 e7                	je     c000ca7f <Dbg::kprintf(char const*, ...)+0x14>
c000ca98:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca9b:	3c 25                	cmp    al,0x25
c000ca9d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caa0:	75 44                	jne    c000cae6 <Dbg::kprintf(char const*, ...)+0x7b>
c000caa2:	83 c3 02             	add    ebx,0x2
c000caa5:	8a 07                	mov    al,BYTE PTR [edi]
c000caa7:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000caaa:	83 e8 25             	sub    eax,0x25
c000caad:	3c 53                	cmp    al,0x53
c000caaf:	0f 87 c9 00 00 00    	ja     c000cb7e <Dbg::kprintf(char const*, ...)+0x113>
c000cab5:	0f b6 c0             	movzx  eax,al
c000cab8:	ff 24 85 18 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcfe8]
c000cabf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cac3:	89 c8                	mov    eax,ecx
c000cac5:	83 c1 04             	add    ecx,0x4
c000cac8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cacc:	ff 30                	push   DWORD PTR [eax]
c000cace:	e8 5c ff ff ff       	call   c000ca2f <Dbg::logWriteInt(unsigned int)>
c000cad3:	5f                   	pop    edi
c000cad4:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cad8:	84 c0                	test   al,al
c000cada:	74 a3                	je     c000ca7f <Dbg::kprintf(char const*, ...)+0x14>
c000cadc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cadf:	3c 25                	cmp    al,0x25
c000cae1:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cae4:	74 bc                	je     c000caa2 <Dbg::kprintf(char const*, ...)+0x37>
c000cae6:	50                   	push   eax
c000cae7:	89 eb                	mov    ebx,ebp
c000cae9:	e8 04 ff ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000caee:	89 fd                	mov    ebp,edi
c000caf0:	58                   	pop    eax
c000caf1:	eb e1                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000caf3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000caf7:	89 c8                	mov    eax,ecx
c000caf9:	83 c1 04             	add    ecx,0x4
c000cafc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb00:	ff 30                	push   DWORD PTR [eax]
c000cb02:	e8 0b ff ff ff       	call   c000ca12 <Dbg::logs(char*)>
c000cb07:	58                   	pop    eax
c000cb08:	eb ca                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb0e:	89 d0                	mov    eax,edx
c000cb10:	83 c2 04             	add    edx,0x4
c000cb13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb17:	ff 30                	push   DWORD PTR [eax]
c000cb19:	e8 11 ff ff ff       	call   c000ca2f <Dbg::logWriteInt(unsigned int)>
c000cb1e:	58                   	pop    eax
c000cb1f:	eb b3                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb25:	89 d0                	mov    eax,edx
c000cb27:	83 c2 04             	add    edx,0x4
c000cb2a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb31:	50                   	push   eax
c000cb32:	e8 bb fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb37:	58                   	pop    eax
c000cb38:	eb 9a                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb3e:	89 c8                	mov    eax,ecx
c000cb40:	83 c1 04             	add    ecx,0x4
c000cb43:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb47:	6a 10                	push   0x10
c000cb49:	ff 30                	push   DWORD PTR [eax]
c000cb4b:	e8 fc fe ff ff       	call   c000ca4c <Dbg::logWriteIntBase(unsigned int, int)>
c000cb50:	59                   	pop    ecx
c000cb51:	5f                   	pop    edi
c000cb52:	eb 80                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb58:	89 d0                	mov    eax,edx
c000cb5a:	83 c2 08             	add    edx,0x8
c000cb5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb61:	6a 10                	push   0x10
c000cb63:	ff 30                	push   DWORD PTR [eax]
c000cb65:	e8 e2 fe ff ff       	call   c000ca4c <Dbg::logWriteIntBase(unsigned int, int)>
c000cb6a:	58                   	pop    eax
c000cb6b:	5a                   	pop    edx
c000cb6c:	e9 63 ff ff ff       	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb71:	6a 25                	push   0x25
c000cb73:	e8 7a fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb78:	58                   	pop    eax
c000cb79:	e9 56 ff ff ff       	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb7e:	6a 25                	push   0x25
c000cb80:	e8 6d fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb85:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb88:	50                   	push   eax
c000cb89:	e8 64 fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb8e:	5a                   	pop    edx
c000cb8f:	59                   	pop    ecx
c000cb90:	e9 3f ff ff ff       	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb95:	90                   	nop

c000cb96 <File::read(unsigned long long, void*, int*)>:
c000cb96:	53                   	push   ebx
c000cb97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb9f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cba6:	3c 19                	cmp    al,0x19
c000cba8:	77 35                	ja     c000cbdf <File::read(unsigned long long, void*, int*)+0x49>
c000cbaa:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cbb1:	85 c0                	test   eax,eax
c000cbb3:	74 2a                	je     c000cbdf <File::read(unsigned long long, void*, int*)+0x49>
c000cbb5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbbb:	85 c0                	test   eax,eax
c000cbbd:	74 20                	je     c000cbdf <File::read(unsigned long long, void*, int*)+0x49>
c000cbbf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbc3:	74 21                	je     c000cbe6 <File::read(unsigned long long, void*, int*)+0x50>
c000cbc5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbc7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbcb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbd9:	5b                   	pop    ebx
c000cbda:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cbdd:	ff e0                	jmp    eax
c000cbdf:	b8 0b 00 00 00       	mov    eax,0xb
c000cbe4:	eb 05                	jmp    c000cbeb <File::read(unsigned long long, void*, int*)+0x55>
c000cbe6:	b8 05 00 00 00       	mov    eax,0x5
c000cbeb:	5b                   	pop    ebx
c000cbec:	c3                   	ret    
c000cbed:	90                   	nop

c000cbee <File::write(unsigned long long, void*, int*)>:
c000cbee:	53                   	push   ebx
c000cbef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbf3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbf7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbfe:	3c 19                	cmp    al,0x19
c000cc00:	77 35                	ja     c000cc37 <File::write(unsigned long long, void*, int*)+0x49>
c000cc02:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cc09:	85 c0                	test   eax,eax
c000cc0b:	74 2a                	je     c000cc37 <File::write(unsigned long long, void*, int*)+0x49>
c000cc0d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc13:	85 c0                	test   eax,eax
c000cc15:	74 20                	je     c000cc37 <File::write(unsigned long long, void*, int*)+0x49>
c000cc17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc1b:	74 21                	je     c000cc3e <File::write(unsigned long long, void*, int*)+0x50>
c000cc1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc23:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc31:	5b                   	pop    ebx
c000cc32:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc35:	ff e0                	jmp    eax
c000cc37:	b8 0b 00 00 00       	mov    eax,0xb
c000cc3c:	eb 05                	jmp    c000cc43 <File::write(unsigned long long, void*, int*)+0x55>
c000cc3e:	b8 05 00 00 00       	mov    eax,0x5
c000cc43:	5b                   	pop    ebx
c000cc44:	c3                   	ret    
c000cc45:	90                   	nop

c000cc46 <Directory::read(unsigned long long, void*, int*)>:
c000cc46:	53                   	push   ebx
c000cc47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc4f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc56:	3c 19                	cmp    al,0x19
c000cc58:	77 35                	ja     c000cc8f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc5a:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cc61:	85 c0                	test   eax,eax
c000cc63:	74 2a                	je     c000cc8f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc65:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc6b:	85 c0                	test   eax,eax
c000cc6d:	74 20                	je     c000cc8f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc73:	74 21                	je     c000cc96 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc75:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc7b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc89:	5b                   	pop    ebx
c000cc8a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc8d:	ff e0                	jmp    eax
c000cc8f:	b8 0b 00 00 00       	mov    eax,0xb
c000cc94:	eb 05                	jmp    c000cc9b <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc96:	b8 05 00 00 00       	mov    eax,0x5
c000cc9b:	5b                   	pop    ebx
c000cc9c:	c3                   	ret    
c000cc9d:	90                   	nop

c000cc9e <Directory::write(unsigned long long, void*, int*)>:
c000cc9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cca9:	b8 0b 00 00 00       	mov    eax,0xb
c000ccae:	80 fa 19             	cmp    dl,0x19
c000ccb1:	77 18                	ja     c000cccb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccb3:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000ccba:	85 d2                	test   edx,edx
c000ccbc:	74 0d                	je     c000cccb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccbe:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ccc5:	19 c0                	sbb    eax,eax
c000ccc7:	83 e0 0a             	and    eax,0xa
c000ccca:	40                   	inc    eax
c000cccb:	c3                   	ret    

c000cccc <File::isAtty()>:
c000cccc:	31 c0                	xor    eax,eax
c000ccce:	c3                   	ret    
c000cccf:	90                   	nop

c000ccd0 <Directory::isAtty()>:
c000ccd0:	31 c0                	xor    eax,eax
c000ccd2:	c3                   	ret    
c000ccd3:	90                   	nop

c000ccd4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ccd4:	b8 0a 00 00 00       	mov    eax,0xa
c000ccd9:	c3                   	ret    

c000ccda <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ccda:	b8 0a 00 00 00       	mov    eax,0xa
c000ccdf:	c3                   	ret    

c000cce0 <Filesystem::allocateSwapfile(char const*, int)>:
c000cce0:	31 c0                	xor    eax,eax
c000cce2:	31 d2                	xor    edx,edx
c000cce4:	c3                   	ret    
c000cce5:	90                   	nop

c000cce6 <File::~File()>:
c000cce6:	83 ec 0c             	sub    esp,0xc
c000cce9:	ba d8 31 02 c0       	mov    edx,0xc00231d8
c000ccee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf2:	89 10                	mov    DWORD PTR [eax],edx
c000ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	50                   	push   eax
c000ccfc:	e8 37 e7 ff ff       	call   c000b438 <UnixFile::~UnixFile()>
c000cd01:	83 c4 10             	add    esp,0x10
c000cd04:	90                   	nop
c000cd05:	83 c4 0c             	add    esp,0xc
c000cd08:	c3                   	ret    
c000cd09:	90                   	nop

c000cd0a <File::~File()>:
c000cd0a:	83 ec 0c             	sub    esp,0xc
c000cd0d:	83 ec 0c             	sub    esp,0xc
c000cd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd14:	e8 cd ff ff ff       	call   c000cce6 <File::~File()>
c000cd19:	83 c4 10             	add    esp,0x10
c000cd1c:	83 ec 08             	sub    esp,0x8
c000cd1f:	68 14 01 00 00       	push   0x114
c000cd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd28:	e8 5d fc ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000cd2d:	83 c4 10             	add    esp,0x10
c000cd30:	83 c4 0c             	add    esp,0xc
c000cd33:	c3                   	ret    

c000cd34 <Directory::~Directory()>:
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	ba f4 31 02 c0       	mov    edx,0xc00231f4
c000cd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd40:	89 10                	mov    DWORD PTR [eax],edx
c000cd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	50                   	push   eax
c000cd4a:	e8 e9 e6 ff ff       	call   c000b438 <UnixFile::~UnixFile()>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	90                   	nop
c000cd53:	83 c4 0c             	add    esp,0xc
c000cd56:	c3                   	ret    
c000cd57:	90                   	nop

c000cd58 <Directory::~Directory()>:
c000cd58:	83 ec 0c             	sub    esp,0xc
c000cd5b:	83 ec 0c             	sub    esp,0xc
c000cd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd62:	e8 cd ff ff ff       	call   c000cd34 <Directory::~Directory()>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	83 ec 08             	sub    esp,0x8
c000cd6d:	68 14 01 00 00       	push   0x114
c000cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd76:	e8 0f fc ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	83 c4 0c             	add    esp,0xc
c000cd81:	c3                   	ret    

c000cd82 <Filesystem::Filesystem()>:
c000cd82:	ba 70 31 02 c0       	mov    edx,0xc0023170
c000cd87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd8b:	89 10                	mov    DWORD PTR [eax],edx
c000cd8d:	8b 15 34 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026534
c000cd93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd9e:	a3 34 65 02 c0       	mov    ds:0xc0026534,eax
c000cda3:	90                   	nop
c000cda4:	c3                   	ret    
c000cda5:	90                   	nop

c000cda6 <Filesystem::~Filesystem()>:
c000cda6:	ba 70 31 02 c0       	mov    edx,0xc0023170
c000cdab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdaf:	89 10                	mov    DWORD PTR [eax],edx
c000cdb1:	90                   	nop
c000cdb2:	c3                   	ret    
c000cdb3:	90                   	nop

c000cdb4 <Filesystem::~Filesystem()>:
c000cdb4:	83 ec 0c             	sub    esp,0xc
c000cdb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdbb:	e8 e6 ff ff ff       	call   c000cda6 <Filesystem::~Filesystem()>
c000cdc0:	83 c4 04             	add    esp,0x4
c000cdc3:	83 ec 08             	sub    esp,0x8
c000cdc6:	6a 08                	push   0x8
c000cdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdcc:	e8 b9 fb ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	83 c4 0c             	add    esp,0xc
c000cdd7:	c3                   	ret    

c000cdd8 <Fs::getcwd(Process*, char*, int)>:
c000cdd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cddc:	31 c0                	xor    eax,eax
c000cdde:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cde1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cde5:	7d 15                	jge    c000cdfc <Fs::getcwd(Process*, char*, int)+0x24>
c000cde7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdeb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cdf2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cdf5:	84 c9                	test   cl,cl
c000cdf7:	74 06                	je     c000cdff <Fs::getcwd(Process*, char*, int)+0x27>
c000cdf9:	40                   	inc    eax
c000cdfa:	eb e2                	jmp    c000cdde <Fs::getcwd(Process*, char*, int)+0x6>
c000cdfc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cdff:	31 c0                	xor    eax,eax
c000ce01:	c3                   	ret    

c000ce02 <Fs::initVFS()>:
c000ce02:	83 ec 18             	sub    esp,0x18
c000ce05:	6a 08                	push   0x8
c000ce07:	e8 b7 cb ff ff       	call   c00099c3 <malloc>
c000ce0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce0f:	e8 70 e3 00 00       	call   c001b184 <FAT::FAT()>
c000ce14:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce1b:	e8 a3 cb ff ff       	call   c00099c3 <malloc>
c000ce20:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce23:	e8 ba f5 00 00       	call   c001c3e2 <ISO9660::ISO9660()>
c000ce28:	83 c4 1c             	add    esp,0x1c
c000ce2b:	c3                   	ret    

c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce2c:	55                   	push   ebp
c000ce2d:	57                   	push   edi
c000ce2e:	56                   	push   esi
c000ce2f:	53                   	push   ebx
c000ce30:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce36:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce3d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce44:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce4b:	68 00 04 00 00       	push   0x400
c000ce50:	6a 00                	push   0x0
c000ce52:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce56:	56                   	push   esi
c000ce57:	e8 28 38 ff ff       	call   c0000684 <memset>
c000ce5c:	83 c4 10             	add    esp,0x10
c000ce5f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce63:	75 0b                	jne    c000ce70 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce65:	50                   	push   eax
c000ce66:	50                   	push   eax
c000ce67:	57                   	push   edi
c000ce68:	56                   	push   esi
c000ce69:	e8 d2 38 ff ff       	call   c0000740 <strcpy>
c000ce6e:	eb 41                	jmp    c000ceb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce70:	8a 07                	mov    al,BYTE PTR [edi]
c000ce72:	3c 5c                	cmp    al,0x5c
c000ce74:	74 04                	je     c000ce7a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce76:	3c 2f                	cmp    al,0x2f
c000ce78:	75 18                	jne    c000ce92 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce7a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce7d:	3c 60                	cmp    al,0x60
c000ce7f:	7e 03                	jle    c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce81:	83 e8 20             	sub    eax,0x20
c000ce84:	88 04 24             	mov    BYTE PTR [esp],al
c000ce87:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce8e:	50                   	push   eax
c000ce8f:	50                   	push   eax
c000ce90:	eb 18                	jmp    c000ceaa <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce92:	50                   	push   eax
c000ce93:	50                   	push   eax
c000ce94:	55                   	push   ebp
c000ce95:	56                   	push   esi
c000ce96:	e8 a5 38 ff ff       	call   c0000740 <strcpy>
c000ce9b:	5a                   	pop    edx
c000ce9c:	59                   	pop    ecx
c000ce9d:	68 fa 47 02 c0       	push   0xc00247fa
c000cea2:	56                   	push   esi
c000cea3:	e8 d8 39 ff ff       	call   c0000880 <strcat>
c000cea8:	5d                   	pop    ebp
c000cea9:	58                   	pop    eax
c000ceaa:	57                   	push   edi
c000ceab:	56                   	push   esi
c000ceac:	e8 cf 39 ff ff       	call   c0000880 <strcat>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ceb7:	3c 60                	cmp    al,0x60
c000ceb9:	7e 03                	jle    c000cebe <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cebb:	83 e8 20             	sub    eax,0x20
c000cebe:	88 04 24             	mov    BYTE PTR [esp],al
c000cec1:	88 03                	mov    BYTE PTR [ebx],al
c000cec3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ceca:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ced0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ced4:	bf 03 00 00 00       	mov    edi,0x3
c000ced9:	b8 03 00 00 00       	mov    eax,0x3
c000cede:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cee1:	84 d2                	test   dl,dl
c000cee3:	0f 84 91 00 00 00    	je     c000cf7a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cee9:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ceec:	80 fa 5c             	cmp    dl,0x5c
c000ceef:	74 05                	je     c000cef6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cef1:	80 fa 2f             	cmp    dl,0x2f
c000cef4:	75 12                	jne    c000cf08 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cef6:	89 c5                	mov    ebp,eax
c000cef8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cefd:	74 09                	je     c000cf08 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ceff:	40                   	inc    eax
c000cf00:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf04:	89 cf                	mov    edi,ecx
c000cf06:	eb d6                	jmp    c000cede <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf08:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf0d:	75 5b                	jne    c000cf6a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf0f:	80 fa 2e             	cmp    dl,0x2e
c000cf12:	75 56                	jne    c000cf6a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf14:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf18:	74 19                	je     c000cf33 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf1a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf1f:	74 53                	je     c000cf74 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf21:	89 f9                	mov    ecx,edi
c000cf23:	41                   	inc    ecx
c000cf24:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf27:	80 fa 2f             	cmp    dl,0x2f
c000cf2a:	74 f7                	je     c000cf23 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf2c:	80 fa 5c             	cmp    dl,0x5c
c000cf2f:	74 f2                	je     c000cf23 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf31:	eb d1                	jmp    c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf33:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf38:	74 3a                	je     c000cf74 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf3a:	83 f8 03             	cmp    eax,0x3
c000cf3d:	74 c5                	je     c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf3f:	41                   	inc    ecx
c000cf40:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf43:	80 fa 2f             	cmp    dl,0x2f
c000cf46:	74 f7                	je     c000cf3f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf48:	80 fa 5c             	cmp    dl,0x5c
c000cf4b:	74 f2                	je     c000cf3f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf4d:	48                   	dec    eax
c000cf4e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf52:	75 06                	jne    c000cf5a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf54:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf58:	eb f3                	jmp    c000cf4d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf5a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf5e:	74 07                	je     c000cf67 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf60:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf64:	48                   	dec    eax
c000cf65:	eb f3                	jmp    c000cf5a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf67:	40                   	inc    eax
c000cf68:	eb 9a                	jmp    c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf6a:	80 fa 2f             	cmp    dl,0x2f
c000cf6d:	74 95                	je     c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf6f:	80 fa 5c             	cmp    dl,0x5c
c000cf72:	74 90                	je     c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf74:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf77:	40                   	inc    eax
c000cf78:	eb 8a                	jmp    c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf7e:	83 ec 0c             	sub    esp,0xc
c000cf81:	53                   	push   ebx
c000cf82:	e8 19 37 ff ff       	call   c00006a0 <strlen>
c000cf87:	83 c4 10             	add    esp,0x10
c000cf8a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf8f:	75 26                	jne    c000cfb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf91:	83 ec 0c             	sub    esp,0xc
c000cf94:	53                   	push   ebx
c000cf95:	e8 06 37 ff ff       	call   c00006a0 <strlen>
c000cf9a:	83 c4 10             	add    esp,0x10
c000cf9d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cfa2:	74 26                	je     c000cfca <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cfa4:	83 ec 0c             	sub    esp,0xc
c000cfa7:	53                   	push   ebx
c000cfa8:	e8 f3 36 ff ff       	call   c00006a0 <strlen>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cfb5:	eb c7                	jmp    c000cf7e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cfb7:	83 ec 0c             	sub    esp,0xc
c000cfba:	53                   	push   ebx
c000cfbb:	e8 e0 36 ff ff       	call   c00006a0 <strlen>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cfc8:	74 c7                	je     c000cf91 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cfca:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cfd0:	5b                   	pop    ebx
c000cfd1:	5e                   	pop    esi
c000cfd2:	5f                   	pop    edi
c000cfd3:	5d                   	pop    ebp
c000cfd4:	c3                   	ret    
c000cfd5:	90                   	nop

c000cfd6 <File::File(char const*, Process*)>:
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfdd:	83 ec 08             	sub    esp,0x8
c000cfe0:	6a 00                	push   0x0
c000cfe2:	50                   	push   eax
c000cfe3:	e8 6e e2 ff ff       	call   c000b256 <UnixFile::UnixFile(int)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	ba d8 31 02 c0       	mov    edx,0xc00231d8
c000cff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff4:	89 10                	mov    DWORD PTR [eax],edx
c000cff6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cffa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d004:	83 c0 0d             	add    eax,0xd
c000d007:	83 ec 04             	sub    esp,0x4
c000d00a:	52                   	push   edx
c000d00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00f:	50                   	push   eax
c000d010:	e8 17 fe ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d015:	83 c4 10             	add    esp,0x10
c000d018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d01c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d01f:	8d 50 bf             	lea    edx,[eax-0x41]
c000d022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d026:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d030:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d034:	90                   	nop
c000d035:	83 c4 0c             	add    esp,0xc
c000d038:	c3                   	ret    
c000d039:	90                   	nop

c000d03a <File::open(FileOpenMode)>:
c000d03a:	53                   	push   ebx
c000d03b:	b8 0b 00 00 00       	mov    eax,0xb
c000d040:	83 ec 08             	sub    esp,0x8
c000d043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d047:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d04e:	80 fa 19             	cmp    dl,0x19
c000d051:	77 40                	ja     c000d093 <File::open(FileOpenMode)+0x59>
c000d053:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d05a:	85 d2                	test   edx,edx
c000d05c:	74 35                	je     c000d093 <File::open(FileOpenMode)+0x59>
c000d05e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d064:	85 d2                	test   edx,edx
c000d066:	74 2b                	je     c000d093 <File::open(FileOpenMode)+0x59>
c000d068:	b8 06 00 00 00       	mov    eax,0x6
c000d06d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d071:	75 20                	jne    c000d093 <File::open(FileOpenMode)+0x59>
c000d073:	8b 02                	mov    eax,DWORD PTR [edx]
c000d075:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07f:	51                   	push   ecx
c000d080:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d083:	51                   	push   ecx
c000d084:	52                   	push   edx
c000d085:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d088:	83 c4 10             	add    esp,0x10
c000d08b:	85 c0                	test   eax,eax
c000d08d:	75 04                	jne    c000d093 <File::open(FileOpenMode)+0x59>
c000d08f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d093:	83 c4 08             	add    esp,0x8
c000d096:	5b                   	pop    ebx
c000d097:	c3                   	ret    

c000d098 <File::close()>:
c000d098:	53                   	push   ebx
c000d099:	b8 0b 00 00 00       	mov    eax,0xb
c000d09e:	83 ec 08             	sub    esp,0x8
c000d0a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0ac:	80 fa 19             	cmp    dl,0x19
c000d0af:	77 41                	ja     c000d0f2 <File::close()+0x5a>
c000d0b1:	8b 1c 95 c0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9640]
c000d0b8:	85 db                	test   ebx,ebx
c000d0ba:	74 36                	je     c000d0f2 <File::close()+0x5a>
c000d0bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d0c3:	74 2d                	je     c000d0f2 <File::close()+0x5a>
c000d0c5:	b8 05 00 00 00       	mov    eax,0x5
c000d0ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d0ce:	74 22                	je     c000d0f2 <File::close()+0x5a>
c000d0d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d0d4:	8b 04 95 c0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9640]
c000d0db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d0e1:	53                   	push   ebx
c000d0e2:	53                   	push   ebx
c000d0e3:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0eb:	50                   	push   eax
c000d0ec:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0ef:	83 c4 10             	add    esp,0x10
c000d0f2:	83 c4 08             	add    esp,0x8
c000d0f5:	5b                   	pop    ebx
c000d0f6:	c3                   	ret    
c000d0f7:	90                   	nop

c000d0f8 <File::seek(unsigned long long)>:
c000d0f8:	56                   	push   esi
c000d0f9:	53                   	push   ebx
c000d0fa:	b8 0b 00 00 00       	mov    eax,0xb
c000d0ff:	51                   	push   ecx
c000d100:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d104:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d108:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d10f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d113:	80 fa 19             	cmp    dl,0x19
c000d116:	77 31                	ja     c000d149 <File::seek(unsigned long long)+0x51>
c000d118:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d11f:	85 d2                	test   edx,edx
c000d121:	74 26                	je     c000d149 <File::seek(unsigned long long)+0x51>
c000d123:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d129:	85 d2                	test   edx,edx
c000d12b:	74 1c                	je     c000d149 <File::seek(unsigned long long)+0x51>
c000d12d:	b8 05 00 00 00       	mov    eax,0x5
c000d132:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d136:	74 11                	je     c000d149 <File::seek(unsigned long long)+0x51>
c000d138:	8b 02                	mov    eax,DWORD PTR [edx]
c000d13a:	53                   	push   ebx
c000d13b:	51                   	push   ecx
c000d13c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d142:	52                   	push   edx
c000d143:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d146:	83 c4 10             	add    esp,0x10
c000d149:	5a                   	pop    edx
c000d14a:	5b                   	pop    ebx
c000d14b:	5e                   	pop    esi
c000d14c:	c3                   	ret    
c000d14d:	90                   	nop

c000d14e <File::tell(unsigned long long*)>:
c000d14e:	83 ec 0c             	sub    esp,0xc
c000d151:	b8 0b 00 00 00       	mov    eax,0xb
c000d156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d15a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d161:	80 fa 19             	cmp    dl,0x19
c000d164:	77 34                	ja     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d166:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d16d:	85 d2                	test   edx,edx
c000d16f:	74 29                	je     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d171:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d177:	85 d2                	test   edx,edx
c000d179:	74 1f                	je     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d17b:	b8 05 00 00 00       	mov    eax,0x5
c000d180:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d184:	74 14                	je     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d186:	50                   	push   eax
c000d187:	8b 02                	mov    eax,DWORD PTR [edx]
c000d189:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d18d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d193:	52                   	push   edx
c000d194:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d197:	83 c4 10             	add    esp,0x10
c000d19a:	83 c4 0c             	add    esp,0xc
c000d19d:	c3                   	ret    

c000d19e <File::rewind()>:
c000d19e:	83 ec 10             	sub    esp,0x10
c000d1a1:	6a 00                	push   0x0
c000d1a3:	6a 00                	push   0x0
c000d1a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a9:	e8 4a ff ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c000d1ae:	83 c4 1c             	add    esp,0x1c
c000d1b1:	c3                   	ret    

c000d1b2 <File::unlink()>:
c000d1b2:	83 ec 0c             	sub    esp,0xc
c000d1b5:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1c5:	80 f9 19             	cmp    cl,0x19
c000d1c8:	77 2f                	ja     c000d1f9 <File::unlink()+0x47>
c000d1ca:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d1d1:	85 c9                	test   ecx,ecx
c000d1d3:	74 24                	je     c000d1f9 <File::unlink()+0x47>
c000d1d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1db:	85 c9                	test   ecx,ecx
c000d1dd:	74 1a                	je     c000d1f9 <File::unlink()+0x47>
c000d1df:	b8 06 00 00 00       	mov    eax,0x6
c000d1e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1e8:	75 0f                	jne    c000d1f9 <File::unlink()+0x47>
c000d1ea:	83 c2 0d             	add    edx,0xd
c000d1ed:	50                   	push   eax
c000d1ee:	50                   	push   eax
c000d1ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1f1:	52                   	push   edx
c000d1f2:	51                   	push   ecx
c000d1f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	83 c4 0c             	add    esp,0xc
c000d1fc:	c3                   	ret    
c000d1fd:	90                   	nop

c000d1fe <File::rename(char const*)>:
c000d1fe:	83 ec 0c             	sub    esp,0xc
c000d201:	b8 0b 00 00 00       	mov    eax,0xb
c000d206:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d20a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d211:	80 f9 19             	cmp    cl,0x19
c000d214:	77 32                	ja     c000d248 <File::rename(char const*)+0x4a>
c000d216:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d21d:	85 c9                	test   ecx,ecx
c000d21f:	74 27                	je     c000d248 <File::rename(char const*)+0x4a>
c000d221:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d227:	85 c9                	test   ecx,ecx
c000d229:	74 1d                	je     c000d248 <File::rename(char const*)+0x4a>
c000d22b:	b8 06 00 00 00       	mov    eax,0x6
c000d230:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d234:	75 12                	jne    c000d248 <File::rename(char const*)+0x4a>
c000d236:	83 c2 0d             	add    edx,0xd
c000d239:	50                   	push   eax
c000d23a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d23c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d240:	52                   	push   edx
c000d241:	51                   	push   ecx
c000d242:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d245:	83 c4 10             	add    esp,0x10
c000d248:	83 c4 0c             	add    esp,0xc
c000d24b:	c3                   	ret    

c000d24c <File::chfatattr(unsigned char, unsigned char)>:
c000d24c:	57                   	push   edi
c000d24d:	b8 0b 00 00 00       	mov    eax,0xb
c000d252:	56                   	push   esi
c000d253:	53                   	push   ebx
c000d254:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d258:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d25c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d263:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d267:	80 f9 19             	cmp    cl,0x19
c000d26a:	77 37                	ja     c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d26c:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d273:	85 c9                	test   ecx,ecx
c000d275:	74 2c                	je     c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d277:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d27d:	85 c9                	test   ecx,ecx
c000d27f:	74 22                	je     c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d281:	b8 06 00 00 00       	mov    eax,0x6
c000d286:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d28a:	75 17                	jne    c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d28c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d28e:	89 f0                	mov    eax,esi
c000d290:	83 c2 0d             	add    edx,0xd
c000d293:	0f b6 f0             	movzx  esi,al
c000d296:	0f b6 db             	movzx  ebx,bl
c000d299:	56                   	push   esi
c000d29a:	53                   	push   ebx
c000d29b:	52                   	push   edx
c000d29c:	51                   	push   ecx
c000d29d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d2a0:	83 c4 10             	add    esp,0x10
c000d2a3:	5b                   	pop    ebx
c000d2a4:	5e                   	pop    esi
c000d2a5:	5f                   	pop    edi
c000d2a6:	c3                   	ret    
c000d2a7:	90                   	nop

c000d2a8 <File::exists()>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	31 c0                	xor    eax,eax
c000d2ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2b1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b8:	80 f9 19             	cmp    cl,0x19
c000d2bb:	77 24                	ja     c000d2e1 <File::exists()+0x39>
c000d2bd:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d2c4:	85 c9                	test   ecx,ecx
c000d2c6:	74 19                	je     c000d2e1 <File::exists()+0x39>
c000d2c8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2ce:	85 c9                	test   ecx,ecx
c000d2d0:	74 0f                	je     c000d2e1 <File::exists()+0x39>
c000d2d2:	83 c2 0d             	add    edx,0xd
c000d2d5:	50                   	push   eax
c000d2d6:	50                   	push   eax
c000d2d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2d9:	52                   	push   edx
c000d2da:	51                   	push   ecx
c000d2db:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d2de:	83 c4 10             	add    esp,0x10
c000d2e1:	83 c4 0c             	add    esp,0xc
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop

c000d2e6 <File::stat(unsigned long long*, bool*)>:
c000d2e6:	56                   	push   esi
c000d2e7:	53                   	push   ebx
c000d2e8:	50                   	push   eax
c000d2e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d2ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d301:	80 f9 19             	cmp    cl,0x19
c000d304:	77 3d                	ja     c000d343 <File::stat(unsigned long long*, bool*)+0x5d>
c000d306:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d30d:	85 c9                	test   ecx,ecx
c000d30f:	74 32                	je     c000d343 <File::stat(unsigned long long*, bool*)+0x5d>
c000d311:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d317:	85 c9                	test   ecx,ecx
c000d319:	74 28                	je     c000d343 <File::stat(unsigned long long*, bool*)+0x5d>
c000d31b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d31d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d321:	74 13                	je     c000d336 <File::stat(unsigned long long*, bool*)+0x50>
c000d323:	83 ec 04             	sub    esp,0x4
c000d326:	56                   	push   esi
c000d327:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d32d:	51                   	push   ecx
c000d32e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d331:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d334:	eb 0a                	jmp    c000d340 <File::stat(unsigned long long*, bool*)+0x5a>
c000d336:	53                   	push   ebx
c000d337:	83 c2 0d             	add    edx,0xd
c000d33a:	56                   	push   esi
c000d33b:	52                   	push   edx
c000d33c:	51                   	push   ecx
c000d33d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	5a                   	pop    edx
c000d344:	5b                   	pop    ebx
c000d345:	5e                   	pop    esi
c000d346:	c3                   	ret    

c000d347 <Fs::setcwd(Process*, char*)>:
c000d347:	55                   	push   ebp
c000d348:	57                   	push   edi
c000d349:	56                   	push   esi
c000d34a:	53                   	push   ebx
c000d34b:	81 ec 20 02 00 00    	sub    esp,0x220
c000d351:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d358:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d35e:	57                   	push   edi
c000d35f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d366:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d36a:	56                   	push   esi
c000d36b:	e8 bc fa ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d370:	89 34 24             	mov    DWORD PTR [esp],esi
c000d373:	e8 28 33 ff ff       	call   c00006a0 <strlen>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	83 f8 02             	cmp    eax,0x2
c000d37e:	77 17                	ja     c000d397 <Fs::setcwd(Process*, char*)+0x50>
c000d380:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d385:	83 e8 41             	sub    eax,0x41
c000d388:	83 f8 19             	cmp    eax,0x19
c000d38b:	76 24                	jbe    c000d3b1 <Fs::setcwd(Process*, char*)+0x6a>
c000d38d:	b8 03 00 00 00       	mov    eax,0x3
c000d392:	e9 e0 00 00 00       	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d397:	83 ec 0c             	sub    esp,0xc
c000d39a:	56                   	push   esi
c000d39b:	e8 00 33 ff ff       	call   c00006a0 <strlen>
c000d3a0:	83 c4 10             	add    esp,0x10
c000d3a3:	83 f8 03             	cmp    eax,0x3
c000d3a6:	75 34                	jne    c000d3dc <Fs::setcwd(Process*, char*)+0x95>
c000d3a8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d3ad:	75 2d                	jne    c000d3dc <Fs::setcwd(Process*, char*)+0x95>
c000d3af:	eb cf                	jmp    c000d380 <Fs::setcwd(Process*, char*)+0x39>
c000d3b1:	8b 14 85 c0 69 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9640]
c000d3b8:	b8 05 00 00 00       	mov    eax,0x5
c000d3bd:	85 d2                	test   edx,edx
c000d3bf:	0f 84 b2 00 00 00    	je     c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d3c5:	b8 06 00 00 00       	mov    eax,0x6
c000d3ca:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d3d1:	0f 85 92 00 00 00    	jne    c000d469 <Fs::setcwd(Process*, char*)+0x122>
c000d3d7:	e9 9b 00 00 00       	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d3dc:	83 ec 0c             	sub    esp,0xc
c000d3df:	68 14 01 00 00       	push   0x114
c000d3e4:	e8 da c5 ff ff       	call   c00099c3 <malloc>
c000d3e9:	83 c4 0c             	add    esp,0xc
c000d3ec:	89 c3                	mov    ebx,eax
c000d3ee:	55                   	push   ebp
c000d3ef:	56                   	push   esi
c000d3f0:	50                   	push   eax
c000d3f1:	e8 e0 fb ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c000d3f6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d3fb:	83 c4 0c             	add    esp,0xc
c000d3fe:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d402:	50                   	push   eax
c000d403:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d407:	50                   	push   eax
c000d408:	53                   	push   ebx
c000d409:	e8 d8 fe ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c000d40e:	83 c4 10             	add    esp,0x10
c000d411:	83 f8 02             	cmp    eax,0x2
c000d414:	74 04                	je     c000d41a <Fs::setcwd(Process*, char*)+0xd3>
c000d416:	85 c0                	test   eax,eax
c000d418:	74 1c                	je     c000d436 <Fs::setcwd(Process*, char*)+0xef>
c000d41a:	b8 01 00 00 00       	mov    eax,0x1
c000d41f:	85 db                	test   ebx,ebx
c000d421:	74 54                	je     c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d423:	83 ec 0c             	sub    esp,0xc
c000d426:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d428:	53                   	push   ebx
c000d429:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	b8 01 00 00 00       	mov    eax,0x1
c000d434:	eb 41                	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d436:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d43b:	75 1c                	jne    c000d459 <Fs::setcwd(Process*, char*)+0x112>
c000d43d:	b8 02 00 00 00       	mov    eax,0x2
c000d442:	85 db                	test   ebx,ebx
c000d444:	74 31                	je     c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d446:	83 ec 0c             	sub    esp,0xc
c000d449:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d44b:	53                   	push   ebx
c000d44c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d44f:	83 c4 10             	add    esp,0x10
c000d452:	b8 02 00 00 00       	mov    eax,0x2
c000d457:	eb 1e                	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d459:	85 db                	test   ebx,ebx
c000d45b:	74 0c                	je     c000d469 <Fs::setcwd(Process*, char*)+0x122>
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d462:	53                   	push   ebx
c000d463:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	50                   	push   eax
c000d46a:	50                   	push   eax
c000d46b:	56                   	push   esi
c000d46c:	57                   	push   edi
c000d46d:	e8 ce 32 ff ff       	call   c0000740 <strcpy>
c000d472:	83 c4 10             	add    esp,0x10
c000d475:	31 c0                	xor    eax,eax
c000d477:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d47d:	5b                   	pop    ebx
c000d47e:	5e                   	pop    esi
c000d47f:	5f                   	pop    edi
c000d480:	5d                   	pop    ebp
c000d481:	c3                   	ret    

c000d482 <Directory::Directory(char const*, Process*)>:
c000d482:	83 ec 0c             	sub    esp,0xc
c000d485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d489:	83 ec 08             	sub    esp,0x8
c000d48c:	6a 00                	push   0x0
c000d48e:	50                   	push   eax
c000d48f:	e8 c2 dd ff ff       	call   c000b256 <UnixFile::UnixFile(int)>
c000d494:	83 c4 10             	add    esp,0x10
c000d497:	ba f4 31 02 c0       	mov    edx,0xc00231f4
c000d49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a0:	89 10                	mov    DWORD PTR [eax],edx
c000d4a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	83 c0 0d             	add    eax,0xd
c000d4b3:	83 ec 04             	sub    esp,0x4
c000d4b6:	52                   	push   edx
c000d4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4bb:	50                   	push   eax
c000d4bc:	e8 6b f9 ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d4c1:	83 c4 10             	add    esp,0x10
c000d4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d4cb:	8d 50 bf             	lea    edx,[eax-0x41]
c000d4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4dc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d4e0:	90                   	nop
c000d4e1:	83 c4 0c             	add    esp,0xc
c000d4e4:	c3                   	ret    
c000d4e5:	90                   	nop

c000d4e6 <Directory::open()>:
c000d4e6:	53                   	push   ebx
c000d4e7:	b8 0b 00 00 00       	mov    eax,0xb
c000d4ec:	83 ec 08             	sub    esp,0x8
c000d4ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4f3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d4fa:	80 fa 19             	cmp    dl,0x19
c000d4fd:	77 3d                	ja     c000d53c <Directory::open()+0x56>
c000d4ff:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d506:	85 d2                	test   edx,edx
c000d508:	74 32                	je     c000d53c <Directory::open()+0x56>
c000d50a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d510:	85 d2                	test   edx,edx
c000d512:	74 28                	je     c000d53c <Directory::open()+0x56>
c000d514:	b8 06 00 00 00       	mov    eax,0x6
c000d519:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d51d:	75 1d                	jne    c000d53c <Directory::open()+0x56>
c000d51f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d525:	50                   	push   eax
c000d526:	8b 02                	mov    eax,DWORD PTR [edx]
c000d528:	51                   	push   ecx
c000d529:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d52c:	51                   	push   ecx
c000d52d:	52                   	push   edx
c000d52e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d531:	83 c4 10             	add    esp,0x10
c000d534:	85 c0                	test   eax,eax
c000d536:	75 04                	jne    c000d53c <Directory::open()+0x56>
c000d538:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d53c:	83 c4 08             	add    esp,0x8
c000d53f:	5b                   	pop    ebx
c000d540:	c3                   	ret    
c000d541:	90                   	nop

c000d542 <Directory::close()>:
c000d542:	53                   	push   ebx
c000d543:	b8 0b 00 00 00       	mov    eax,0xb
c000d548:	83 ec 08             	sub    esp,0x8
c000d54b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d54f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d556:	80 fa 19             	cmp    dl,0x19
c000d559:	77 41                	ja     c000d59c <Directory::close()+0x5a>
c000d55b:	8b 1c 95 c0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9640]
c000d562:	85 db                	test   ebx,ebx
c000d564:	74 36                	je     c000d59c <Directory::close()+0x5a>
c000d566:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d56d:	74 2d                	je     c000d59c <Directory::close()+0x5a>
c000d56f:	b8 05 00 00 00       	mov    eax,0x5
c000d574:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d578:	74 22                	je     c000d59c <Directory::close()+0x5a>
c000d57a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d57e:	8b 04 95 c0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9640]
c000d585:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d58b:	53                   	push   ebx
c000d58c:	53                   	push   ebx
c000d58d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d58f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d595:	50                   	push   eax
c000d596:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d599:	83 c4 10             	add    esp,0x10
c000d59c:	83 c4 08             	add    esp,0x8
c000d59f:	5b                   	pop    ebx
c000d5a0:	c3                   	ret    
c000d5a1:	90                   	nop

c000d5a2 <Directory::unlink()>:
c000d5a2:	83 ec 0c             	sub    esp,0xc
c000d5a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5b5:	80 f9 19             	cmp    cl,0x19
c000d5b8:	77 2f                	ja     c000d5e9 <Directory::unlink()+0x47>
c000d5ba:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d5c1:	85 c9                	test   ecx,ecx
c000d5c3:	74 24                	je     c000d5e9 <Directory::unlink()+0x47>
c000d5c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5cb:	85 c9                	test   ecx,ecx
c000d5cd:	74 1a                	je     c000d5e9 <Directory::unlink()+0x47>
c000d5cf:	b8 06 00 00 00       	mov    eax,0x6
c000d5d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5d8:	75 0f                	jne    c000d5e9 <Directory::unlink()+0x47>
c000d5da:	83 c2 0d             	add    edx,0xd
c000d5dd:	50                   	push   eax
c000d5de:	50                   	push   eax
c000d5df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5e1:	52                   	push   edx
c000d5e2:	51                   	push   ecx
c000d5e3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5e6:	83 c4 10             	add    esp,0x10
c000d5e9:	83 c4 0c             	add    esp,0xc
c000d5ec:	c3                   	ret    
c000d5ed:	90                   	nop

c000d5ee <Directory::rename(char const*)>:
c000d5ee:	83 ec 0c             	sub    esp,0xc
c000d5f1:	b8 0b 00 00 00       	mov    eax,0xb
c000d5f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d601:	80 f9 19             	cmp    cl,0x19
c000d604:	77 32                	ja     c000d638 <Directory::rename(char const*)+0x4a>
c000d606:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d60d:	85 c9                	test   ecx,ecx
c000d60f:	74 27                	je     c000d638 <Directory::rename(char const*)+0x4a>
c000d611:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d617:	85 c9                	test   ecx,ecx
c000d619:	74 1d                	je     c000d638 <Directory::rename(char const*)+0x4a>
c000d61b:	b8 06 00 00 00       	mov    eax,0x6
c000d620:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d624:	75 12                	jne    c000d638 <Directory::rename(char const*)+0x4a>
c000d626:	83 c2 0d             	add    edx,0xd
c000d629:	50                   	push   eax
c000d62a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d62c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d630:	52                   	push   edx
c000d631:	51                   	push   ecx
c000d632:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d635:	83 c4 10             	add    esp,0x10
c000d638:	83 c4 0c             	add    esp,0xc
c000d63b:	c3                   	ret    

c000d63c <Directory::exists()>:
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	31 c0                	xor    eax,eax
c000d641:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d645:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d64c:	80 f9 19             	cmp    cl,0x19
c000d64f:	77 24                	ja     c000d675 <Directory::exists()+0x39>
c000d651:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d658:	85 c9                	test   ecx,ecx
c000d65a:	74 19                	je     c000d675 <Directory::exists()+0x39>
c000d65c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d662:	85 c9                	test   ecx,ecx
c000d664:	74 0f                	je     c000d675 <Directory::exists()+0x39>
c000d666:	83 c2 0d             	add    edx,0xd
c000d669:	50                   	push   eax
c000d66a:	50                   	push   eax
c000d66b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d66d:	52                   	push   edx
c000d66e:	51                   	push   ecx
c000d66f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d672:	83 c4 10             	add    esp,0x10
c000d675:	83 c4 0c             	add    esp,0xc
c000d678:	c3                   	ret    
c000d679:	90                   	nop

c000d67a <Directory::read(dirent*)>:
c000d67a:	83 ec 1c             	sub    esp,0x1c
c000d67d:	b8 0b 00 00 00       	mov    eax,0xb
c000d682:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d686:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d68d:	80 fa 19             	cmp    dl,0x19
c000d690:	77 30                	ja     c000d6c2 <Directory::read(dirent*)+0x48>
c000d692:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d699:	85 d2                	test   edx,edx
c000d69b:	74 25                	je     c000d6c2 <Directory::read(dirent*)+0x48>
c000d69d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6a4:	74 1c                	je     c000d6c2 <Directory::read(dirent*)+0x48>
c000d6a6:	83 ec 0c             	sub    esp,0xc
c000d6a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6ab:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d6af:	52                   	push   edx
c000d6b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b4:	6a 00                	push   0x0
c000d6b6:	68 10 01 00 00       	push   0x110
c000d6bb:	51                   	push   ecx
c000d6bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d6bf:	83 c4 20             	add    esp,0x20
c000d6c2:	83 c4 1c             	add    esp,0x1c
c000d6c5:	c3                   	ret    

c000d6c6 <Directory::create()>:
c000d6c6:	83 ec 0c             	sub    esp,0xc
c000d6c9:	b8 0b 00 00 00       	mov    eax,0xb
c000d6ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6d9:	80 f9 19             	cmp    cl,0x19
c000d6dc:	77 2f                	ja     c000d70d <Directory::create()+0x47>
c000d6de:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d6e5:	85 c9                	test   ecx,ecx
c000d6e7:	74 24                	je     c000d70d <Directory::create()+0x47>
c000d6e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6ef:	85 c9                	test   ecx,ecx
c000d6f1:	74 1a                	je     c000d70d <Directory::create()+0x47>
c000d6f3:	b8 06 00 00 00       	mov    eax,0x6
c000d6f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6fc:	75 0f                	jne    c000d70d <Directory::create()+0x47>
c000d6fe:	83 c2 0d             	add    edx,0xd
c000d701:	50                   	push   eax
c000d702:	50                   	push   eax
c000d703:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d705:	52                   	push   edx
c000d706:	51                   	push   ecx
c000d707:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d70a:	83 c4 10             	add    esp,0x10
c000d70d:	83 c4 0c             	add    esp,0xc
c000d710:	c3                   	ret    
c000d711:	90                   	nop

c000d712 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d712:	b8 0a 00 00 00       	mov    eax,0xa
c000d717:	c3                   	ret    

c000d718 <Bus::Bus(char const*)>:
c000d718:	83 ec 0c             	sub    esp,0xc
c000d71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71f:	83 ec 08             	sub    esp,0x8
c000d722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d726:	50                   	push   eax
c000d727:	e8 8a 09 00 00       	call   c000e0b6 <Device::Device(char const*)>
c000d72c:	83 c4 10             	add    esp,0x10
c000d72f:	ba 10 32 02 c0       	mov    edx,0xc0023210
c000d734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d738:	89 10                	mov    DWORD PTR [eax],edx
c000d73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d748:	90                   	nop
c000d749:	83 c4 0c             	add    esp,0xc
c000d74c:	c3                   	ret    
c000d74d:	90                   	nop
c000d74e:	66 90                	xchg   ax,ax

c000d750 <Bus::~Bus()>:
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	ba 10 32 02 c0       	mov    edx,0xc0023210
c000d758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75c:	89 10                	mov    DWORD PTR [eax],edx
c000d75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d762:	83 ec 0c             	sub    esp,0xc
c000d765:	50                   	push   eax
c000d766:	e8 15 06 00 00       	call   c000dd80 <Device::~Device()>
c000d76b:	83 c4 10             	add    esp,0x10
c000d76e:	90                   	nop
c000d76f:	83 c4 0c             	add    esp,0xc
c000d772:	c3                   	ret    
c000d773:	90                   	nop

c000d774 <Bus::~Bus()>:
c000d774:	83 ec 0c             	sub    esp,0xc
c000d777:	83 ec 0c             	sub    esp,0xc
c000d77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77e:	e8 cd ff ff ff       	call   c000d750 <Bus::~Bus()>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	83 ec 08             	sub    esp,0x8
c000d789:	68 58 01 00 00       	push   0x158
c000d78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d792:	e8 f3 f1 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	83 c4 0c             	add    esp,0xc
c000d79d:	c3                   	ret    
c000d79e:	66 90                	xchg   ax,ax

c000d7a0 <Buzzer::Buzzer(char const*)>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a7:	83 ec 08             	sub    esp,0x8
c000d7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ae:	50                   	push   eax
c000d7af:	e8 02 09 00 00       	call   c000e0b6 <Device::Device(char const*)>
c000d7b4:	83 c4 10             	add    esp,0x10
c000d7b7:	ba 3c 32 02 c0       	mov    edx,0xc002323c
c000d7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c0:	89 10                	mov    DWORD PTR [eax],edx
c000d7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d7de:	90                   	nop
c000d7df:	83 c4 0c             	add    esp,0xc
c000d7e2:	c3                   	ret    
c000d7e3:	90                   	nop

c000d7e4 <Buzzer::~Buzzer()>:
c000d7e4:	83 ec 0c             	sub    esp,0xc
c000d7e7:	ba 3c 32 02 c0       	mov    edx,0xc002323c
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	89 10                	mov    DWORD PTR [eax],edx
c000d7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f6:	83 ec 0c             	sub    esp,0xc
c000d7f9:	50                   	push   eax
c000d7fa:	e8 81 05 00 00       	call   c000dd80 <Device::~Device()>
c000d7ff:	83 c4 10             	add    esp,0x10
c000d802:	90                   	nop
c000d803:	83 c4 0c             	add    esp,0xc
c000d806:	c3                   	ret    
c000d807:	90                   	nop

c000d808 <Buzzer::~Buzzer()>:
c000d808:	83 ec 0c             	sub    esp,0xc
c000d80b:	83 ec 0c             	sub    esp,0xc
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	e8 cd ff ff ff       	call   c000d7e4 <Buzzer::~Buzzer()>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	83 ec 08             	sub    esp,0x8
c000d81d:	68 5c 01 00 00       	push   0x15c
c000d822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d826:	e8 5f f1 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000d82b:	83 c4 10             	add    esp,0x10
c000d82e:	83 c4 0c             	add    esp,0xc
c000d831:	c3                   	ret    

c000d832 <Buzzer::stop()>:
c000d832:	83 ec 14             	sub    esp,0x14
c000d835:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d839:	8b 10                	mov    edx,DWORD PTR [eax]
c000d83b:	6a 00                	push   0x0
c000d83d:	50                   	push   eax
c000d83e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d841:	83 c4 1c             	add    esp,0x1c
c000d844:	c3                   	ret    

c000d845 <beepThread(void*)>:
c000d845:	53                   	push   ebx
c000d846:	83 ec 08             	sub    esp,0x8
c000d849:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000d84e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d852:	48                   	dec    eax
c000d853:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000d858:	75 02                	jne    c000d85c <beepThread(void*)+0x17>
c000d85a:	fb                   	sti    
c000d85b:	90                   	nop
c000d85c:	83 ec 0c             	sub    esp,0xc
c000d85f:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d866:	50                   	push   eax
c000d867:	e8 8c a9 00 00       	call   c00181f8 <milliTenthSleep(unsigned int)>
c000d86c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d86f:	e8 be ff ff ff       	call   c000d832 <Buzzer::stop()>
c000d874:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d87c:	83 c4 18             	add    esp,0x18
c000d87f:	5b                   	pop    ebx
c000d880:	e9 73 a8 00 00       	jmp    c00180f8 <blockTask(TaskState)>
c000d885:	90                   	nop

c000d886 <Buzzer::beep(int, int, bool)>:
c000d886:	57                   	push   edi
c000d887:	56                   	push   esi
c000d888:	53                   	push   ebx
c000d889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d88d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d891:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d895:	50                   	push   eax
c000d896:	50                   	push   eax
c000d897:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d89d:	53                   	push   ebx
c000d89e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	89 f8                	mov    eax,edi
c000d8a6:	84 c0                	test   al,al
c000d8a8:	74 1e                	je     c000d8c8 <Buzzer::beep(int, int, bool)+0x42>
c000d8aa:	83 ec 0c             	sub    esp,0xc
c000d8ad:	6b f6 0a             	imul   esi,esi,0xa
c000d8b0:	56                   	push   esi
c000d8b1:	e8 42 a9 00 00       	call   c00181f8 <milliTenthSleep(unsigned int)>
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8bd:	5b                   	pop    ebx
c000d8be:	5e                   	pop    esi
c000d8bf:	5f                   	pop    edi
c000d8c0:	e9 6d ff ff ff       	jmp    c000d832 <Buzzer::stop()>
c000d8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c8:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d8ce:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000d8d3:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d8db:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8df:	c7 44 24 14 45 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d845
c000d8e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8eb:	5b                   	pop    ebx
c000d8ec:	5e                   	pop    esi
c000d8ed:	5f                   	pop    edi
c000d8ee:	e9 f1 a3 00 00       	jmp    c0017ce4 <Process::createThread(void (*)(void*), void*, int)>
c000d8f3:	90                   	nop

c000d8f4 <User::loadClockSettings(int)>:
c000d8f4:	53                   	push   ebx
c000d8f5:	83 ec 14             	sub    esp,0x14
c000d8f8:	68 14 01 00 00       	push   0x114
c000d8fd:	e8 c1 c0 ff ff       	call   c00099c3 <malloc>
c000d902:	83 c4 0c             	add    esp,0xc
c000d905:	89 c3                	mov    ebx,eax
c000d907:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c000d90d:	68 64 32 02 c0       	push   0xc0023264
c000d912:	50                   	push   eax
c000d913:	e8 be f6 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c000d918:	58                   	pop    eax
c000d919:	5a                   	pop    edx
c000d91a:	6a 01                	push   0x1
c000d91c:	53                   	push   ebx
c000d91d:	e8 18 f7 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c000d922:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d925:	e8 6e f7 ff ff       	call   c000d098 <File::close()>
c000d92a:	83 c4 10             	add    esp,0x10
c000d92d:	85 db                	test   ebx,ebx
c000d92f:	74 0f                	je     c000d940 <User::loadClockSettings(int)+0x4c>
c000d931:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d933:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d937:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d93a:	83 c4 08             	add    esp,0x8
c000d93d:	5b                   	pop    ebx
c000d93e:	ff e0                	jmp    eax
c000d940:	83 c4 08             	add    esp,0x8
c000d943:	5b                   	pop    ebx
c000d944:	c3                   	ret    
c000d945:	90                   	nop

c000d946 <Clock::Clock(char const*)>:
c000d946:	83 ec 0c             	sub    esp,0xc
c000d949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94d:	83 ec 08             	sub    esp,0x8
c000d950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d954:	50                   	push   eax
c000d955:	e8 5c 07 00 00       	call   c000e0b6 <Device::Device(char const*)>
c000d95a:	83 c4 10             	add    esp,0x10
c000d95d:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c000d962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d966:	89 10                	mov    DWORD PTR [eax],edx
c000d968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d976:	90                   	nop
c000d977:	83 c4 0c             	add    esp,0xc
c000d97a:	c3                   	ret    
c000d97b:	90                   	nop

c000d97c <Clock::~Clock()>:
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c000d984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d988:	89 10                	mov    DWORD PTR [eax],edx
c000d98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d98e:	83 ec 0c             	sub    esp,0xc
c000d991:	50                   	push   eax
c000d992:	e8 e9 03 00 00       	call   c000dd80 <Device::~Device()>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	90                   	nop
c000d99b:	83 c4 0c             	add    esp,0xc
c000d99e:	c3                   	ret    
c000d99f:	90                   	nop

c000d9a0 <Clock::~Clock()>:
c000d9a0:	83 ec 0c             	sub    esp,0xc
c000d9a3:	83 ec 0c             	sub    esp,0xc
c000d9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9aa:	e8 cd ff ff ff       	call   c000d97c <Clock::~Clock()>
c000d9af:	83 c4 10             	add    esp,0x10
c000d9b2:	83 ec 08             	sub    esp,0x8
c000d9b5:	68 58 01 00 00       	push   0x158
c000d9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9be:	e8 c7 ef ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	83 c4 0c             	add    esp,0xc
c000d9c9:	c3                   	ret    

c000d9ca <Clock::timeInSecondsLocal()>:
c000d9ca:	53                   	push   ebx
c000d9cb:	83 ec 14             	sub    esp,0x14
c000d9ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9d4:	50                   	push   eax
c000d9d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9d8:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000d9df:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000d9e5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9eb:	89 cb                	mov    ebx,ecx
c000d9ed:	c1 fb 1f             	sar    ebx,0x1f
c000d9f0:	01 c8                	add    eax,ecx
c000d9f2:	11 da                	adc    edx,ebx
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	31 c9                	xor    ecx,ecx
c000d9f9:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000da00:	74 05                	je     c000da07 <Clock::timeInSecondsLocal()+0x3d>
c000da02:	b9 08 07 00 00       	mov    ecx,0x708
c000da07:	31 db                	xor    ebx,ebx
c000da09:	01 c8                	add    eax,ecx
c000da0b:	11 da                	adc    edx,ebx
c000da0d:	83 c4 08             	add    esp,0x8
c000da10:	5b                   	pop    ebx
c000da11:	c3                   	ret    

c000da12 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da12:	57                   	push   edi
c000da13:	56                   	push   esi
c000da14:	53                   	push   ebx
c000da15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da19:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da23:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da26:	0f b6 05 3c 65 02 c0 	movzx  eax,BYTE PTR ds:0xc002653c
c000da2d:	03 05 40 65 02 c0    	add    eax,DWORD PTR ds:0xc0026540
c000da33:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da39:	99                   	cdq    
c000da3a:	29 c6                	sub    esi,eax
c000da3c:	19 d7                	sbb    edi,edx
c000da3e:	89 f0                	mov    eax,esi
c000da40:	89 fa                	mov    edx,edi
c000da42:	31 f6                	xor    esi,esi
c000da44:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000da4b:	74 05                	je     c000da52 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da4d:	be 08 07 00 00       	mov    esi,0x708
c000da52:	31 ff                	xor    edi,edi
c000da54:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da58:	29 f0                	sub    eax,esi
c000da5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da5e:	19 fa                	sbb    edx,edi
c000da60:	89 d8                	mov    eax,ebx
c000da62:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da66:	5b                   	pop    ebx
c000da67:	5e                   	pop    esi
c000da68:	5f                   	pop    edi
c000da69:	ff e0                	jmp    eax

c000da6b <datetimeToSeconds(datetime_t)>:
c000da6b:	55                   	push   ebp
c000da6c:	57                   	push   edi
c000da6d:	56                   	push   esi
c000da6e:	53                   	push   ebx
c000da6f:	83 ec 14             	sub    esp,0x14
c000da72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da76:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da7a:	89 d3                	mov    ebx,edx
c000da7c:	0f b6 c6             	movzx  eax,dh
c000da7f:	c1 eb 10             	shr    ebx,0x10
c000da82:	48                   	dec    eax
c000da83:	66 81 eb 6c 07       	sub    bx,0x76c
c000da88:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da8c:	0f b6 f5             	movzx  esi,ch
c000da8f:	89 cf                	mov    edi,ecx
c000da91:	6b f6 3c             	imul   esi,esi,0x3c
c000da94:	c1 ef 10             	shr    edi,0x10
c000da97:	0f b6 c9             	movzx  ecx,cl
c000da9a:	89 f8                	mov    eax,edi
c000da9c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000daa2:	0f b6 f8             	movzx  edi,al
c000daa5:	0f b6 d2             	movzx  edx,dl
c000daa8:	01 fe                	add    esi,edi
c000daaa:	01 f1                	add    ecx,esi
c000daac:	0f b7 f3             	movzx  esi,bx
c000daaf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dab3:	c1 f9 1f             	sar    ecx,0x1f
c000dab6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dabb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dabf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dac4:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000dacb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dacf:	76 29                	jbe    c000dafa <datetimeToSeconds(datetime_t)+0x8f>
c000dad1:	f6 c3 03             	test   bl,0x3
c000dad4:	75 24                	jne    c000dafa <datetimeToSeconds(datetime_t)+0x8f>
c000dad6:	31 d2                	xor    edx,edx
c000dad8:	bf 64 00 00 00       	mov    edi,0x64
c000dadd:	89 d8                	mov    eax,ebx
c000dadf:	66 f7 f7             	div    di
c000dae2:	66 85 d2             	test   dx,dx
c000dae5:	75 12                	jne    c000daf9 <datetimeToSeconds(datetime_t)+0x8e>
c000dae7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000daed:	bf 90 01 00 00       	mov    edi,0x190
c000daf2:	99                   	cdq    
c000daf3:	f7 ff                	idiv   edi
c000daf5:	85 d2                	test   edx,edx
c000daf7:	75 01                	jne    c000dafa <datetimeToSeconds(datetime_t)+0x8f>
c000daf9:	41                   	inc    ecx
c000dafa:	66 83 fb 46          	cmp    bx,0x46
c000dafe:	76 45                	jbe    c000db45 <datetimeToSeconds(datetime_t)+0xda>
c000db00:	bb 46 00 00 00       	mov    ebx,0x46
c000db05:	bf 64 00 00 00       	mov    edi,0x64
c000db0a:	bd 90 01 00 00       	mov    ebp,0x190
c000db0f:	b8 6d 01 00 00       	mov    eax,0x16d
c000db14:	f6 c3 03             	test   bl,0x3
c000db17:	75 23                	jne    c000db3c <datetimeToSeconds(datetime_t)+0xd1>
c000db19:	89 d8                	mov    eax,ebx
c000db1b:	99                   	cdq    
c000db1c:	f7 ff                	idiv   edi
c000db1e:	b8 6e 01 00 00       	mov    eax,0x16e
c000db23:	85 d2                	test   edx,edx
c000db25:	75 15                	jne    c000db3c <datetimeToSeconds(datetime_t)+0xd1>
c000db27:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db2d:	99                   	cdq    
c000db2e:	f7 fd                	idiv   ebp
c000db30:	83 fa 01             	cmp    edx,0x1
c000db33:	19 c0                	sbb    eax,eax
c000db35:	f7 d0                	not    eax
c000db37:	05 6e 01 00 00       	add    eax,0x16e
c000db3c:	01 c1                	add    ecx,eax
c000db3e:	43                   	inc    ebx
c000db3f:	39 f3                	cmp    ebx,esi
c000db41:	7c cc                	jl     c000db0f <datetimeToSeconds(datetime_t)+0xa4>
c000db43:	eb 35                	jmp    c000db7a <datetimeToSeconds(datetime_t)+0x10f>
c000db45:	74 33                	je     c000db7a <datetimeToSeconds(datetime_t)+0x10f>
c000db47:	b8 45 00 00 00       	mov    eax,0x45
c000db4c:	89 c2                	mov    edx,eax
c000db4e:	83 e2 03             	and    edx,0x3
c000db51:	39 f0                	cmp    eax,esi
c000db53:	7e 0f                	jle    c000db64 <datetimeToSeconds(datetime_t)+0xf9>
c000db55:	83 fa 01             	cmp    edx,0x1
c000db58:	19 d2                	sbb    edx,edx
c000db5a:	48                   	dec    eax
c000db5b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db62:	eb e8                	jmp    c000db4c <datetimeToSeconds(datetime_t)+0xe1>
c000db64:	b8 6d 01 00 00       	mov    eax,0x16d
c000db69:	85 d2                	test   edx,edx
c000db6b:	75 0b                	jne    c000db78 <datetimeToSeconds(datetime_t)+0x10d>
c000db6d:	66 83 fb 01          	cmp    bx,0x1
c000db71:	19 c0                	sbb    eax,eax
c000db73:	05 6e 01 00 00       	add    eax,0x16e
c000db78:	29 c1                	sub    ecx,eax
c000db7a:	b8 80 51 01 00       	mov    eax,0x15180
c000db7f:	f7 e9                	imul   ecx
c000db81:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db85:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db89:	83 c4 14             	add    esp,0x14
c000db8c:	5b                   	pop    ebx
c000db8d:	5e                   	pop    esi
c000db8e:	5f                   	pop    edi
c000db8f:	5d                   	pop    ebp
c000db90:	c3                   	ret    
c000db91:	90                   	nop

c000db92 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db92:	57                   	push   edi
c000db93:	56                   	push   esi
c000db94:	53                   	push   ebx
c000db95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db99:	8b 06                	mov    eax,DWORD PTR [esi]
c000db9b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dba2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dba6:	e8 c0 fe ff ff       	call   c000da6b <datetimeToSeconds(datetime_t)>
c000dbab:	59                   	pop    ecx
c000dbac:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000dbb3:	5b                   	pop    ebx
c000dbb4:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000dbba:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dbc0:	89 cb                	mov    ebx,ecx
c000dbc2:	c1 fb 1f             	sar    ebx,0x1f
c000dbc5:	29 c8                	sub    eax,ecx
c000dbc7:	19 da                	sbb    edx,ebx
c000dbc9:	31 c9                	xor    ecx,ecx
c000dbcb:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000dbd2:	74 05                	je     c000dbd9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dbd4:	b9 08 07 00 00       	mov    ecx,0x708
c000dbd9:	31 db                	xor    ebx,ebx
c000dbdb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dbdf:	29 c8                	sub    eax,ecx
c000dbe1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbe5:	19 da                	sbb    edx,ebx
c000dbe7:	89 f8                	mov    eax,edi
c000dbe9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbed:	5b                   	pop    ebx
c000dbee:	5e                   	pop    esi
c000dbef:	5f                   	pop    edi
c000dbf0:	ff e0                	jmp    eax

c000dbf2 <secondsToDatetime(unsigned long long)>:
c000dbf2:	55                   	push   ebp
c000dbf3:	57                   	push   edi
c000dbf4:	56                   	push   esi
c000dbf5:	53                   	push   ebx
c000dbf6:	83 ec 1c             	sub    esp,0x1c
c000dbf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dbfd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc01:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc05:	6a 00                	push   0x0
c000dc07:	68 80 51 01 00       	push   0x15180
c000dc0c:	55                   	push   ebp
c000dc0d:	57                   	push   edi
c000dc0e:	e8 21 33 01 00       	call   c0020f34 <__udivdi3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc20:	6a 00                	push   0x0
c000dc22:	68 80 51 01 00       	push   0x15180
c000dc27:	55                   	push   ebp
c000dc28:	57                   	push   edi
c000dc29:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc2e:	e8 01 34 01 00       	call   c0021034 <__umoddi3>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	99                   	cdq    
c000dc37:	f7 ff                	idiv   edi
c000dc39:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc3e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc41:	89 d0                	mov    eax,edx
c000dc43:	99                   	cdq    
c000dc44:	f7 ff                	idiv   edi
c000dc46:	85 db                	test   ebx,ebx
c000dc48:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc4b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc4e:	79 11                	jns    c000dc61 <secondsToDatetime(unsigned long long)+0x6f>
c000dc50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc54:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc5a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc5f:	eb 07                	jmp    c000dc68 <secondsToDatetime(unsigned long long)+0x76>
c000dc61:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc66:	89 d8                	mov    eax,ebx
c000dc68:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc6d:	99                   	cdq    
c000dc6e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc73:	f7 f9                	idiv   ecx
c000dc75:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc7e:	31 d2                	xor    edx,edx
c000dc80:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc88:	01 c3                	add    ebx,eax
c000dc8a:	89 d8                	mov    eax,ebx
c000dc8c:	f7 f1                	div    ecx
c000dc8e:	31 d2                	xor    edx,edx
c000dc90:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc93:	89 d8                	mov    eax,ebx
c000dc95:	f7 f7                	div    edi
c000dc97:	31 d2                	xor    edx,edx
c000dc99:	29 c1                	sub    ecx,eax
c000dc9b:	89 d8                	mov    eax,ebx
c000dc9d:	f7 f5                	div    ebp
c000dc9f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dca4:	29 c1                	sub    ecx,eax
c000dca6:	31 d2                	xor    edx,edx
c000dca8:	89 c8                	mov    eax,ecx
c000dcaa:	f7 f5                	div    ebp
c000dcac:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dcb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcb5:	31 d2                	xor    edx,edx
c000dcb7:	89 c8                	mov    eax,ecx
c000dcb9:	f7 f5                	div    ebp
c000dcbb:	31 d2                	xor    edx,edx
c000dcbd:	01 c3                	add    ebx,eax
c000dcbf:	89 c8                	mov    eax,ecx
c000dcc1:	f7 f7                	div    edi
c000dcc3:	bf 99 00 00 00       	mov    edi,0x99
c000dcc8:	29 c3                	sub    ebx,eax
c000dcca:	31 d2                	xor    edx,edx
c000dccc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dcd4:	29 c3                	sub    ebx,eax
c000dcd6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dcd9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dcdc:	bb 05 00 00 00       	mov    ebx,0x5
c000dce1:	83 c1 02             	add    ecx,0x2
c000dce4:	89 c8                	mov    eax,ecx
c000dce6:	f7 f7                	div    edi
c000dce8:	31 d2                	xor    edx,edx
c000dcea:	89 c7                	mov    edi,eax
c000dcec:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dcf2:	83 c0 02             	add    eax,0x2
c000dcf5:	f7 f3                	div    ebx
c000dcf7:	89 eb                	mov    ebx,ebp
c000dcf9:	29 c3                	sub    ebx,eax
c000dcfb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd01:	88 1e                	mov    BYTE PTR [esi],bl
c000dd03:	19 c0                	sbb    eax,eax
c000dd05:	31 d2                	xor    edx,edx
c000dd07:	83 e0 0c             	and    eax,0xc
c000dd0a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd0e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd16:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd1a:	83 f9 01             	cmp    ecx,0x1
c000dd1d:	0f 96 c2             	setbe  dl
c000dd20:	41                   	inc    ecx
c000dd21:	01 d0                	add    eax,edx
c000dd23:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd26:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd2a:	83 c4 1c             	add    esp,0x1c
c000dd2d:	89 f0                	mov    eax,esi
c000dd2f:	5b                   	pop    ebx
c000dd30:	5e                   	pop    esi
c000dd31:	5f                   	pop    edi
c000dd32:	5d                   	pop    ebp
c000dd33:	c2 04 00             	ret    0x4

c000dd36 <Clock::timeInDatetimeLocal()>:
c000dd36:	53                   	push   ebx
c000dd37:	83 ec 14             	sub    esp,0x14
c000dd3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd42:	e8 83 fc ff ff       	call   c000d9ca <Clock::timeInSecondsLocal()>
c000dd47:	83 c4 0c             	add    esp,0xc
c000dd4a:	52                   	push   edx
c000dd4b:	50                   	push   eax
c000dd4c:	53                   	push   ebx
c000dd4d:	e8 a0 fe ff ff       	call   c000dbf2 <secondsToDatetime(unsigned long long)>
c000dd52:	89 d8                	mov    eax,ebx
c000dd54:	83 c4 14             	add    esp,0x14
c000dd57:	5b                   	pop    ebx
c000dd58:	c2 04 00             	ret    0x4
c000dd5b:	90                   	nop

c000dd5c <Device::hibernate()>:
c000dd5c:	c3                   	ret    
c000dd5d:	90                   	nop

c000dd5e <Device::wake()>:
c000dd5e:	c3                   	ret    
c000dd5f:	90                   	nop

c000dd60 <Device::detect()>:
c000dd60:	c3                   	ret    
c000dd61:	90                   	nop

c000dd62 <Device::disableLegacy()>:
c000dd62:	c3                   	ret    
c000dd63:	90                   	nop

c000dd64 <Device::powerSaving(PowerSavingLevel)>:
c000dd64:	c3                   	ret    
c000dd65:	90                   	nop

c000dd66 <DriverlessDevice::close(int, int, void*)>:
c000dd66:	31 c0                	xor    eax,eax
c000dd68:	c3                   	ret    
c000dd69:	90                   	nop

c000dd6a <DriverlessDevice::detect()>:
c000dd6a:	c3                   	ret    
c000dd6b:	90                   	nop

c000dd6c <DriverlessDevice::open(int, int, void*)>:
c000dd6c:	83 ec 18             	sub    esp,0x18
c000dd6f:	68 f0 32 02 c0       	push   0xc00232f0
c000dd74:	e8 b4 65 00 00       	call   c001432d <Krnl::panic(char const*)>
c000dd79:	83 c8 ff             	or     eax,0xffffffff
c000dd7c:	83 c4 1c             	add    esp,0x1c
c000dd7f:	c3                   	ret    

c000dd80 <Device::~Device()>:
c000dd80:	ba 50 33 02 c0       	mov    edx,0xc0023350
c000dd85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd89:	89 10                	mov    DWORD PTR [eax],edx
c000dd8b:	90                   	nop
c000dd8c:	c3                   	ret    
c000dd8d:	90                   	nop

c000dd8e <Device::~Device()>:
c000dd8e:	83 ec 0c             	sub    esp,0xc
c000dd91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd95:	e8 e6 ff ff ff       	call   c000dd80 <Device::~Device()>
c000dd9a:	83 c4 04             	add    esp,0x4
c000dd9d:	83 ec 08             	sub    esp,0x8
c000dda0:	68 58 01 00 00       	push   0x158
c000dda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda9:	e8 dc eb ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000ddae:	83 c4 10             	add    esp,0x10
c000ddb1:	83 c4 0c             	add    esp,0xc
c000ddb4:	c3                   	ret    
c000ddb5:	90                   	nop

c000ddb6 <Device::findAndLoadDriver()>:
c000ddb6:	c7 44 24 04 0e 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc002330e
c000ddbe:	e9 a8 ec ff ff       	jmp    c000ca6b <Dbg::kprintf(char const*, ...)>
c000ddc3:	90                   	nop

c000ddc4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ddc4:	57                   	push   edi
c000ddc5:	b9 09 00 00 00       	mov    ecx,0x9
c000ddca:	56                   	push   esi
c000ddcb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ddcf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ddd3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dddd:	81 c7 18 01 00 00    	add    edi,0x118
c000dde3:	fc                   	cld    
c000dde4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dde6:	5e                   	pop    esi
c000dde7:	5f                   	pop    edi
c000dde8:	c3                   	ret    
c000dde9:	90                   	nop

c000ddea <Device::preOpenACPI(void*, char*, char*)>:
c000ddea:	57                   	push   edi
c000ddeb:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ddf0:	56                   	push   esi
c000ddf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddf5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddf9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de03:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de09:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de15:	b9 0e 00 00 00       	mov    ecx,0xe
c000de1a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de26:	5e                   	pop    esi
c000de27:	5f                   	pop    edi
c000de28:	c3                   	ret    
c000de29:	90                   	nop

c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de2e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de33:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de3a:	75 0b                	jne    c000de47 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de42:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de45:	eb 1e                	jmp    c000de65 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de47:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000de4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de52:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de58:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de62:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de65:	ff e0                	jmp    eax
c000de67:	90                   	nop

c000de68 <Device::getParent()>:
c000de68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de6c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de72:	c3                   	ret    
c000de73:	90                   	nop

c000de74 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de78:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de7d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de84:	75 0b                	jne    c000de91 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de86:	8b 00                	mov    eax,DWORD PTR [eax]
c000de88:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de8f:	eb 1e                	jmp    c000deaf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de91:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000de96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de9c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000dea2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dea4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dea8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deac:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000deaf:	ff e0                	jmp    eax
c000deb1:	90                   	nop

c000deb2 <Device::addChild(Device*)>:
c000deb2:	53                   	push   ebx
c000deb3:	83 ec 08             	sub    esp,0x8
c000deb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000debe:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000dec4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000deca:	8b 13                	mov    edx,DWORD PTR [ebx]
c000decc:	85 d2                	test   edx,edx
c000dece:	74 04                	je     c000ded4 <Device::addChild(Device*)+0x22>
c000ded0:	89 d3                	mov    ebx,edx
c000ded2:	eb f6                	jmp    c000deca <Device::addChild(Device*)+0x18>
c000ded4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ded7:	83 ec 0c             	sub    esp,0xc
c000deda:	6a 08                	push   0x8
c000dedc:	e8 e2 ba ff ff       	call   c00099c3 <malloc>
c000dee1:	89 03                	mov    DWORD PTR [ebx],eax
c000dee3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dee9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000def0:	83 c4 18             	add    esp,0x18
c000def3:	5b                   	pop    ebx
c000def4:	c3                   	ret    
c000def5:	90                   	nop

c000def6 <Device::removeAllChildren()>:
c000def6:	56                   	push   esi
c000def7:	53                   	push   ebx
c000def8:	52                   	push   edx
c000def9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000defd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df06:	74 17                	je     c000df1f <Device::removeAllChildren()+0x29>
c000df08:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df0b:	85 c0                	test   eax,eax
c000df0d:	74 0c                	je     c000df1b <Device::removeAllChildren()+0x25>
c000df0f:	83 ec 0c             	sub    esp,0xc
c000df12:	8b 10                	mov    edx,DWORD PTR [eax]
c000df14:	50                   	push   eax
c000df15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df18:	83 c4 10             	add    esp,0x10
c000df1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df1d:	eb e4                	jmp    c000df03 <Device::removeAllChildren()+0xd>
c000df1f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df25:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df2b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df38:	58                   	pop    eax
c000df39:	5b                   	pop    ebx
c000df3a:	5e                   	pop    esi
c000df3b:	c3                   	ret    

c000df3c <Device::hibernateAll()>:
c000df3c:	53                   	push   ebx
c000df3d:	83 ec 14             	sub    esp,0x14
c000df40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df46:	53                   	push   ebx
c000df47:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df50:	83 c4 10             	add    esp,0x10
c000df53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df56:	74 0f                	je     c000df67 <Device::hibernateAll()+0x2b>
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df5e:	e8 d9 ff ff ff       	call   c000df3c <Device::hibernateAll()>
c000df63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df65:	eb e9                	jmp    c000df50 <Device::hibernateAll()+0x14>
c000df67:	83 c4 08             	add    esp,0x8
c000df6a:	5b                   	pop    ebx
c000df6b:	c3                   	ret    

c000df6c <Device::wakeAll()>:
c000df6c:	53                   	push   ebx
c000df6d:	83 ec 14             	sub    esp,0x14
c000df70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df74:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df76:	53                   	push   ebx
c000df77:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df7a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df80:	83 c4 10             	add    esp,0x10
c000df83:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df86:	74 0f                	je     c000df97 <Device::wakeAll()+0x2b>
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df8e:	e8 d9 ff ff ff       	call   c000df6c <Device::wakeAll()>
c000df93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df95:	eb e9                	jmp    c000df80 <Device::wakeAll()+0x14>
c000df97:	83 c4 08             	add    esp,0x8
c000df9a:	5b                   	pop    ebx
c000df9b:	c3                   	ret    

c000df9c <Device::detectAll()>:
c000df9c:	53                   	push   ebx
c000df9d:	83 ec 14             	sub    esp,0x14
c000dfa0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfa6:	53                   	push   ebx
c000dfa7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dfaa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfb0:	83 c4 10             	add    esp,0x10
c000dfb3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfb6:	74 0f                	je     c000dfc7 <Device::detectAll()+0x2b>
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfbe:	e8 d9 ff ff ff       	call   c000df9c <Device::detectAll()>
c000dfc3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfc5:	eb e9                	jmp    c000dfb0 <Device::detectAll()+0x14>
c000dfc7:	83 c4 08             	add    esp,0x8
c000dfca:	5b                   	pop    ebx
c000dfcb:	c3                   	ret    

c000dfcc <Device::disableLegacyAll()>:
c000dfcc:	53                   	push   ebx
c000dfcd:	83 ec 14             	sub    esp,0x14
c000dfd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfd6:	53                   	push   ebx
c000dfd7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dfda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfe0:	83 c4 10             	add    esp,0x10
c000dfe3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfe6:	74 0f                	je     c000dff7 <Device::disableLegacyAll()+0x2b>
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfee:	e8 d9 ff ff ff       	call   c000dfcc <Device::disableLegacyAll()>
c000dff3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dff5:	eb e9                	jmp    c000dfe0 <Device::disableLegacyAll()+0x14>
c000dff7:	83 c4 08             	add    esp,0x8
c000dffa:	5b                   	pop    ebx
c000dffb:	c3                   	ret    

c000dffc <Device::loadDriversForAll()>:
c000dffc:	53                   	push   ebx
c000dffd:	83 ec 08             	sub    esp,0x8
c000e000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e004:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e00b:	75 0c                	jne    c000e019 <Device::loadDriversForAll()+0x1d>
c000e00d:	83 ec 0c             	sub    esp,0xc
c000e010:	53                   	push   ebx
c000e011:	e8 a0 fd ff ff       	call   c000ddb6 <Device::findAndLoadDriver()>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e01f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e022:	74 12                	je     c000e036 <Device::loadDriversForAll()+0x3a>
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e02a:	e8 cd ff ff ff       	call   c000dffc <Device::loadDriversForAll()>
c000e02f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	eb e9                	jmp    c000e01f <Device::loadDriversForAll()+0x23>
c000e036:	83 c4 08             	add    esp,0x8
c000e039:	5b                   	pop    ebx
c000e03a:	c3                   	ret    
c000e03b:	90                   	nop

c000e03c <Device::closeAll()>:
c000e03c:	53                   	push   ebx
c000e03d:	83 ec 08             	sub    esp,0x8
c000e040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e044:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e046:	6a 00                	push   0x0
c000e048:	6a 00                	push   0x0
c000e04a:	6a 00                	push   0x0
c000e04c:	53                   	push   ebx
c000e04d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e050:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e05c:	74 0f                	je     c000e06d <Device::closeAll()+0x31>
c000e05e:	83 ec 0c             	sub    esp,0xc
c000e061:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e064:	e8 d3 ff ff ff       	call   c000e03c <Device::closeAll()>
c000e069:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e06b:	eb e9                	jmp    c000e056 <Device::closeAll()+0x1a>
c000e06d:	83 c4 08             	add    esp,0x8
c000e070:	5b                   	pop    ebx
c000e071:	c3                   	ret    

c000e072 <Device::powerSavingAll(PowerSavingLevel)>:
c000e072:	56                   	push   esi
c000e073:	53                   	push   ebx
c000e074:	83 ec 0c             	sub    esp,0xc
c000e077:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e07b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e07f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e081:	56                   	push   esi
c000e082:	53                   	push   ebx
c000e083:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e086:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e08c:	83 c4 10             	add    esp,0x10
c000e08f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e092:	74 0f                	je     c000e0a3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e094:	52                   	push   edx
c000e095:	52                   	push   edx
c000e096:	56                   	push   esi
c000e097:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e09a:	e8 d3 ff ff ff       	call   c000e072 <Device::powerSavingAll(PowerSavingLevel)>
c000e09f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0a1:	eb e9                	jmp    c000e08c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e0a3:	58                   	pop    eax
c000e0a4:	5b                   	pop    ebx
c000e0a5:	5e                   	pop    esi
c000e0a6:	c3                   	ret    
c000e0a7:	90                   	nop

c000e0a8 <Device::setName(char const*)>:
c000e0a8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e0b0:	e9 8b 26 ff ff       	jmp    c0000740 <strcpy>
c000e0b5:	90                   	nop

c000e0b6 <Device::Device(char const*)>:
c000e0b6:	83 ec 1c             	sub    esp,0x1c
c000e0b9:	ba 50 33 02 c0       	mov    edx,0xc0023350
c000e0be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c2:	89 10                	mov    DWORD PTR [eax],edx
c000e0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e0d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e0e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e0fc:	83 ec 08             	sub    esp,0x8
c000e0ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e103:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e107:	e8 9c ff ff ff       	call   c000e0a8 <Device::setName(char const*)>
c000e10c:	83 c4 10             	add    esp,0x10
c000e10f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e117:	83 ec 0c             	sub    esp,0xc
c000e11a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e11e:	e8 a0 b8 ff ff       	call   c00099c3 <malloc>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e12c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e133:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e137:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e13d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e141:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e147:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e14d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e151:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e157:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e15e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e162:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e16d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e178:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e186:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e194:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e19e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e1ac:	90                   	nop
c000e1ad:	83 c4 1c             	add    esp,0x1c
c000e1b0:	c3                   	ret    
c000e1b1:	90                   	nop

c000e1b2 <Device::getName()>:
c000e1b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1b6:	05 d0 00 00 00       	add    eax,0xd0
c000e1bb:	c3                   	ret    

c000e1bc <DriverlessDevice::DriverlessDevice(char const*)>:
c000e1bc:	83 ec 0c             	sub    esp,0xc
c000e1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1c3:	83 ec 08             	sub    esp,0x8
c000e1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ca:	50                   	push   eax
c000e1cb:	e8 e6 fe ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e1d0:	83 c4 10             	add    esp,0x10
c000e1d3:	ba 7c 33 02 c0       	mov    edx,0xc002337c
c000e1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1dc:	89 10                	mov    DWORD PTR [eax],edx
c000e1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1ec:	90                   	nop
c000e1ed:	83 c4 0c             	add    esp,0xc
c000e1f0:	c3                   	ret    
c000e1f1:	90                   	nop

c000e1f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1f2:	57                   	push   edi
c000e1f3:	56                   	push   esi
c000e1f4:	53                   	push   ebx
c000e1f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e201:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e207:	75 0c                	jne    c000e215 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e209:	52                   	push   edx
c000e20a:	52                   	push   edx
c000e20b:	53                   	push   ebx
c000e20c:	56                   	push   esi
c000e20d:	e8 d4 31 01 00       	call   c00213e6 <LinkedList<Device>::addElement(Device*)>
c000e212:	83 c4 10             	add    esp,0x10
c000e215:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e21b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e21e:	74 12                	je     c000e232 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e220:	50                   	push   eax
c000e221:	57                   	push   edi
c000e222:	56                   	push   esi
c000e223:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e226:	e8 c7 ff ff ff       	call   c000e1f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e22b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e22d:	83 c4 10             	add    esp,0x10
c000e230:	eb e9                	jmp    c000e21b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e232:	5b                   	pop    ebx
c000e233:	5e                   	pop    esi
c000e234:	5f                   	pop    edi
c000e235:	c3                   	ret    

c000e236 <getDevicesOfType(DeviceType)>:
c000e236:	53                   	push   ebx
c000e237:	83 ec 14             	sub    esp,0x14
c000e23a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e23e:	53                   	push   ebx
c000e23f:	e8 7e 32 01 00       	call   c00214c2 <LinkedList<Device>::LinkedList()>
c000e244:	83 c4 0c             	add    esp,0xc
c000e247:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e24b:	53                   	push   ebx
c000e24c:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c000e252:	e8 9b ff ff ff       	call   c000e1f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e257:	89 d8                	mov    eax,ebx
c000e259:	83 c4 18             	add    esp,0x18
c000e25c:	5b                   	pop    ebx
c000e25d:	c2 04 00             	ret    0x4

c000e260 <HardDiskController::HardDiskController(char const*)>:
c000e260:	83 ec 0c             	sub    esp,0xc
c000e263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e267:	83 ec 08             	sub    esp,0x8
c000e26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e26e:	50                   	push   eax
c000e26f:	e8 42 fe ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e274:	83 c4 10             	add    esp,0x10
c000e277:	ba a8 33 02 c0       	mov    edx,0xc00233a8
c000e27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e280:	89 10                	mov    DWORD PTR [eax],edx
c000e282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e286:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e290:	90                   	nop
c000e291:	83 c4 0c             	add    esp,0xc
c000e294:	c3                   	ret    
c000e295:	90                   	nop
c000e296:	66 90                	xchg   ax,ax

c000e298 <HardDiskController::~HardDiskController()>:
c000e298:	83 ec 0c             	sub    esp,0xc
c000e29b:	ba a8 33 02 c0       	mov    edx,0xc00233a8
c000e2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a4:	89 10                	mov    DWORD PTR [eax],edx
c000e2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2aa:	83 ec 0c             	sub    esp,0xc
c000e2ad:	50                   	push   eax
c000e2ae:	e8 cd fa ff ff       	call   c000dd80 <Device::~Device()>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	90                   	nop
c000e2b7:	83 c4 0c             	add    esp,0xc
c000e2ba:	c3                   	ret    
c000e2bb:	90                   	nop

c000e2bc <HardDiskController::~HardDiskController()>:
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	83 ec 0c             	sub    esp,0xc
c000e2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c6:	e8 cd ff ff ff       	call   c000e298 <HardDiskController::~HardDiskController()>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	83 ec 08             	sub    esp,0x8
c000e2d1:	68 58 01 00 00       	push   0x158
c000e2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2da:	e8 ab e6 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	83 c4 0c             	add    esp,0xc
c000e2e5:	c3                   	ret    

c000e2e6 <PhysicalDisk::eject()>:
c000e2e6:	83 c8 ff             	or     eax,0xffffffff
c000e2e9:	c3                   	ret    

c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f8:	50                   	push   eax
c000e2f9:	e8 b8 fd ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e2fe:	83 c4 10             	add    esp,0x10
c000e301:	ba d4 33 02 c0       	mov    edx,0xc00233d4
c000e306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30a:	89 10                	mov    DWORD PTR [eax],edx
c000e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e310:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e326:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e334:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e338:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e342:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e34c:	90                   	nop
c000e34d:	83 c4 0c             	add    esp,0xc
c000e350:	c3                   	ret    
c000e351:	90                   	nop

c000e352 <PhysicalDisk::startCache()>:
c000e352:	56                   	push   esi
c000e353:	53                   	push   ebx
c000e354:	83 ec 10             	sub    esp,0x10
c000e357:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e35b:	6a 44                	push   0x44
c000e35d:	e8 61 b6 ff ff       	call   c00099c3 <malloc>
c000e362:	89 c6                	mov    esi,eax
c000e364:	58                   	pop    eax
c000e365:	5a                   	pop    edx
c000e366:	53                   	push   ebx
c000e367:	56                   	push   esi
c000e368:	e8 2f 26 00 00       	call   c001099c <VCache::VCache(PhysicalDisk*)>
c000e36d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e373:	83 c4 14             	add    esp,0x14
c000e376:	5b                   	pop    ebx
c000e377:	5e                   	pop    esi
c000e378:	c3                   	ret    
c000e379:	90                   	nop

c000e37a <PhysicalDisk::~PhysicalDisk()>:
c000e37a:	83 ec 0c             	sub    esp,0xc
c000e37d:	ba d4 33 02 c0       	mov    edx,0xc00233d4
c000e382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e386:	89 10                	mov    DWORD PTR [eax],edx
c000e388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38c:	83 ec 0c             	sub    esp,0xc
c000e38f:	50                   	push   eax
c000e390:	e8 eb f9 ff ff       	call   c000dd80 <Device::~Device()>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	90                   	nop
c000e399:	83 c4 0c             	add    esp,0xc
c000e39c:	c3                   	ret    
c000e39d:	90                   	nop

c000e39e <PhysicalDisk::~PhysicalDisk()>:
c000e39e:	83 ec 0c             	sub    esp,0xc
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a8:	e8 cd ff ff ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c000e3ad:	83 c4 10             	add    esp,0x10
c000e3b0:	83 ec 08             	sub    esp,0x8
c000e3b3:	68 6c 01 00 00       	push   0x16c
c000e3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3bc:	e8 c9 e5 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	83 c4 0c             	add    esp,0xc
c000e3c7:	c3                   	ret    

c000e3c8 <FPU::FPU(char const*)>:
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cf:	83 ec 08             	sub    esp,0x8
c000e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d6:	50                   	push   eax
c000e3d7:	e8 da fc ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e3dc:	83 c4 10             	add    esp,0x10
c000e3df:	ba 18 34 02 c0       	mov    edx,0xc0023418
c000e3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e8:	89 10                	mov    DWORD PTR [eax],edx
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3f8:	90                   	nop
c000e3f9:	83 c4 0c             	add    esp,0xc
c000e3fc:	c3                   	ret    
c000e3fd:	90                   	nop
c000e3fe:	66 90                	xchg   ax,ax

c000e400 <FPU::~FPU()>:
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	ba 18 34 02 c0       	mov    edx,0xc0023418
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	89 10                	mov    DWORD PTR [eax],edx
c000e40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e412:	83 ec 0c             	sub    esp,0xc
c000e415:	50                   	push   eax
c000e416:	e8 65 f9 ff ff       	call   c000dd80 <Device::~Device()>
c000e41b:	83 c4 10             	add    esp,0x10
c000e41e:	90                   	nop
c000e41f:	83 c4 0c             	add    esp,0xc
c000e422:	c3                   	ret    
c000e423:	90                   	nop

c000e424 <FPU::~FPU()>:
c000e424:	83 ec 0c             	sub    esp,0xc
c000e427:	83 ec 0c             	sub    esp,0xc
c000e42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42e:	e8 cd ff ff ff       	call   c000e400 <FPU::~FPU()>
c000e433:	83 c4 10             	add    esp,0x10
c000e436:	83 ec 08             	sub    esp,0x8
c000e439:	68 58 01 00 00       	push   0x158
c000e43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e442:	e8 43 e5 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e447:	83 c4 10             	add    esp,0x10
c000e44a:	83 c4 0c             	add    esp,0xc
c000e44d:	c3                   	ret    

c000e44e <setupFPU()>:
c000e44e:	53                   	push   ebx
c000e44f:	83 ec 08             	sub    esp,0x8
c000e452:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c000e458:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e45f:	74 1b                	je     c000e47c <setupFPU()+0x2e>
c000e461:	83 ec 0c             	sub    esp,0xc
c000e464:	68 58 01 00 00       	push   0x158
c000e469:	e8 55 b5 ff ff       	call   c00099c3 <malloc>
c000e46e:	89 c3                	mov    ebx,eax
c000e470:	89 04 24             	mov    DWORD PTR [esp],eax
c000e473:	e8 48 16 01 00       	call   c001fac0 <AVX::AVX()>
c000e478:	eb 62                	jmp    c000e4dc <setupFPU()+0x8e>
c000e47a:	66 90                	xchg   ax,ax
c000e47c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e482:	84 c0                	test   al,al
c000e484:	79 1a                	jns    c000e4a0 <setupFPU()+0x52>
c000e486:	83 ec 0c             	sub    esp,0xc
c000e489:	68 58 01 00 00       	push   0x158
c000e48e:	e8 30 b5 ff ff       	call   c00099c3 <malloc>
c000e493:	89 c3                	mov    ebx,eax
c000e495:	89 04 24             	mov    DWORD PTR [esp],eax
c000e498:	e8 53 17 01 00       	call   c001fbf0 <SSE::SSE()>
c000e49d:	eb 3d                	jmp    c000e4dc <setupFPU()+0x8e>
c000e49f:	90                   	nop
c000e4a0:	a8 20                	test   al,0x20
c000e4a2:	74 1c                	je     c000e4c0 <setupFPU()+0x72>
c000e4a4:	83 ec 0c             	sub    esp,0xc
c000e4a7:	68 58 01 00 00       	push   0x158
c000e4ac:	e8 12 b5 ff ff       	call   c00099c3 <malloc>
c000e4b1:	89 c3                	mov    ebx,eax
c000e4b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4b6:	e8 99 16 01 00       	call   c001fb54 <MMX::MMX()>
c000e4bb:	eb 1f                	jmp    c000e4dc <setupFPU()+0x8e>
c000e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c0:	a8 10                	test   al,0x10
c000e4c2:	74 20                	je     c000e4e4 <setupFPU()+0x96>
c000e4c4:	83 ec 0c             	sub    esp,0xc
c000e4c7:	68 58 01 00 00       	push   0x158
c000e4cc:	e8 f2 b4 ff ff       	call   c00099c3 <malloc>
c000e4d1:	89 c3                	mov    ebx,eax
c000e4d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d6:	e8 a9 17 01 00       	call   c001fc84 <x87::x87()>
c000e4db:	90                   	nop
c000e4dc:	83 c4 10             	add    esp,0x10
c000e4df:	eb 27                	jmp    c000e508 <setupFPU()+0xba>
c000e4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e4:	83 e0 ef             	and    eax,0xffffffef
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4f0:	68 04 34 02 c0       	push   0xc0023404
c000e4f5:	e8 71 e5 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e4fa:	0f 20 c0             	mov    eax,cr0
c000e4fd:	83 c8 04             	or     eax,0x4
c000e500:	0f 22 c0             	mov    cr0,eax
c000e503:	31 db                	xor    ebx,ebx
c000e505:	83 c4 10             	add    esp,0x10
c000e508:	89 d8                	mov    eax,ebx
c000e50a:	83 c4 08             	add    esp,0x8
c000e50d:	5b                   	pop    ebx
c000e50e:	c3                   	ret    
c000e50f:	90                   	nop

c000e510 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e518:	c1 e0 04             	shl    eax,0x4
c000e51b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e51f:	8d 50 10             	lea    edx,[eax+0x10]
c000e522:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e528:	74 08                	je     c000e532 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e52a:	83 c0 04             	add    eax,0x4
c000e52d:	39 d0                	cmp    eax,edx
c000e52f:	75 f1                	jne    c000e522 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e531:	c3                   	ret    
c000e532:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e53c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e546:	eb e2                	jmp    c000e52a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e548 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e548:	57                   	push   edi
c000e549:	31 c0                	xor    eax,eax
c000e54b:	56                   	push   esi
c000e54c:	53                   	push   ebx
c000e54d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e551:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e555:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e559:	89 da                	mov    edx,ebx
c000e55b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e55f:	c1 e2 04             	shl    edx,0x4
c000e562:	01 ca                	add    edx,ecx
c000e564:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e56c:	74 16                	je     c000e584 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e56e:	40                   	inc    eax
c000e56f:	83 f8 04             	cmp    eax,0x4
c000e572:	75 f0                	jne    c000e564 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e574:	c7 44 24 10 48 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023448
c000e57c:	5b                   	pop    ebx
c000e57d:	5e                   	pop    esi
c000e57e:	5f                   	pop    edi
c000e57f:	e9 a9 5d 00 00       	jmp    c001432d <Krnl::panic(char const*)>
c000e584:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e587:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e58a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e590:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e596:	5b                   	pop    ebx
c000e597:	5e                   	pop    esi
c000e598:	5f                   	pop    edi
c000e599:	c3                   	ret    

c000e59a <doubleFault(regs*, void*)>:
c000e59a:	55                   	push   ebp
c000e59b:	89 e5                	mov    ebp,esp
c000e59d:	83 ec 08             	sub    esp,0x8
c000e5a0:	83 ec 0c             	sub    esp,0xc
c000e5a3:	68 55 34 02 c0       	push   0xc0023455
c000e5a8:	e8 80 5d 00 00       	call   c001432d <Krnl::panic(char const*)>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	90                   	nop
c000e5b1:	c9                   	leave  
c000e5b2:	c3                   	ret    
c000e5b3:	90                   	nop

c000e5b4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5b4:	56                   	push   esi
c000e5b5:	53                   	push   ebx
c000e5b6:	50                   	push   eax
c000e5b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5bf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e5c4:	75 35                	jne    c000e5fb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e5c6:	8d 43 20             	lea    eax,[ebx+0x20]
c000e5c9:	31 d2                	xor    edx,edx
c000e5cb:	89 c1                	mov    ecx,eax
c000e5cd:	c1 e1 04             	shl    ecx,0x4
c000e5d0:	01 f1                	add    ecx,esi
c000e5d2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e5da:	74 3e                	je     c000e61a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e5dc:	42                   	inc    edx
c000e5dd:	83 fa 04             	cmp    edx,0x4
c000e5e0:	75 f0                	jne    c000e5d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e5e2:	83 ec 0c             	sub    esp,0xc
c000e5e5:	68 6f 34 02 c0       	push   0xc002346f
c000e5ea:	e8 3e 5d 00 00       	call   c001432d <Krnl::panic(char const*)>
c000e5ef:	83 c4 10             	add    esp,0x10
c000e5f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5f7:	5a                   	pop    edx
c000e5f8:	5b                   	pop    ebx
c000e5f9:	5e                   	pop    esi
c000e5fa:	c3                   	ret    
c000e5fb:	83 ec 0c             	sub    esp,0xc
c000e5fe:	56                   	push   esi
c000e5ff:	e8 ae fb ff ff       	call   c000e1b2 <Device::getName()>
c000e604:	83 c4 10             	add    esp,0x10
c000e607:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e60a:	75 ba                	jne    c000e5c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e60c:	83 fb 0f             	cmp    ebx,0xf
c000e60f:	7f 29                	jg     c000e63a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e611:	0f b6 9b c0 5a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda540]
c000e618:	eb ac                	jmp    c000e5c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e61a:	8d 04 82             	lea    eax,[edx+eax*4]
c000e61d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e621:	8d 04 86             	lea    eax,[esi+eax*4]
c000e624:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e62a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e62e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e634:	89 d8                	mov    eax,ebx
c000e636:	5a                   	pop    edx
c000e637:	5b                   	pop    ebx
c000e638:	5e                   	pop    esi
c000e639:	c3                   	ret    
c000e63a:	83 ec 0c             	sub    esp,0xc
c000e63d:	68 62 34 02 c0       	push   0xc0023462
c000e642:	e8 e6 5c 00 00       	call   c001432d <Krnl::panic(char const*)>
c000e647:	83 c4 10             	add    esp,0x10
c000e64a:	e9 77 ff ff ff       	jmp    c000e5c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e64f:	90                   	nop

c000e650 <InterruptController::clearAllHandlers(int, bool)>:
c000e650:	56                   	push   esi
c000e651:	53                   	push   ebx
c000e652:	52                   	push   edx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e660:	75 61                	jne    c000e6c3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e662:	8d 46 20             	lea    eax,[esi+0x20]
c000e665:	c1 e6 04             	shl    esi,0x4
c000e668:	c1 e0 04             	shl    eax,0x4
c000e66b:	01 de                	add    esi,ebx
c000e66d:	01 d8                	add    eax,ebx
c000e66f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e679:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e683:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e68d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e697:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e6a1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e6ab:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e6b5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e6bf:	58                   	pop    eax
c000e6c0:	5b                   	pop    ebx
c000e6c1:	5e                   	pop    esi
c000e6c2:	c3                   	ret    
c000e6c3:	83 ec 0c             	sub    esp,0xc
c000e6c6:	53                   	push   ebx
c000e6c7:	e8 e6 fa ff ff       	call   c000e1b2 <Device::getName()>
c000e6cc:	83 c4 10             	add    esp,0x10
c000e6cf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e6d2:	75 8e                	jne    c000e662 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6d4:	83 fe 0f             	cmp    esi,0xf
c000e6d7:	7f 09                	jg     c000e6e2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e6d9:	0f b6 b6 c0 5a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda540]
c000e6e0:	eb 80                	jmp    c000e662 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6e2:	83 ec 0c             	sub    esp,0xc
c000e6e5:	68 7c 34 02 c0       	push   0xc002347c
c000e6ea:	e8 3e 5c 00 00       	call   c001432d <Krnl::panic(char const*)>
c000e6ef:	83 c4 10             	add    esp,0x10
c000e6f2:	e9 6b ff ff ff       	jmp    c000e662 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6f7:	90                   	nop

c000e6f8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e6f8:	56                   	push   esi
c000e6f9:	53                   	push   ebx
c000e6fa:	52                   	push   edx
c000e6fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e703:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e708:	75 3a                	jne    c000e744 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e70a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e70e:	8d 50 20             	lea    edx,[eax+0x20]
c000e711:	c1 e2 04             	shl    edx,0x4
c000e714:	8d 04 16             	lea    eax,[esi+edx*1]
c000e717:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e71b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e721:	74 0b                	je     c000e72e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e723:	83 c0 04             	add    eax,0x4
c000e726:	39 d0                	cmp    eax,edx
c000e728:	75 f1                	jne    c000e71b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e72a:	58                   	pop    eax
c000e72b:	5b                   	pop    ebx
c000e72c:	5e                   	pop    esi
c000e72d:	c3                   	ret    
c000e72e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e738:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e742:	eb df                	jmp    c000e723 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	56                   	push   esi
c000e748:	e8 65 fa ff ff       	call   c000e1b2 <Device::getName()>
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e753:	75 b5                	jne    c000e70a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e755:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e75a:	7f 11                	jg     c000e76d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e75c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e760:	0f b6 80 c0 5a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda540]
c000e767:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e76b:	eb 9d                	jmp    c000e70a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e76d:	83 ec 0c             	sub    esp,0xc
c000e770:	68 89 34 02 c0       	push   0xc0023489
c000e775:	e8 b3 5b 00 00       	call   c001432d <Krnl::panic(char const*)>
c000e77a:	83 c4 10             	add    esp,0x10
c000e77d:	eb 8b                	jmp    c000e70a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e77f <nmiHandler(regs*, void*)>:
c000e77f:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000e784:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e788:	e9 01 aa ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e78d <int_handler>:
c000e78d:	55                   	push   ebp
c000e78e:	57                   	push   edi
c000e78f:	56                   	push   esi
c000e790:	53                   	push   ebx
c000e791:	83 ec 0c             	sub    esp,0xc
c000e794:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e798:	80 3d e4 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ee4,0x0
c000e79f:	74 0b                	je     c000e7ac <int_handler+0x1f>
c000e7a1:	fa                   	cli    
c000e7a2:	f4                   	hlt    
c000e7a3:	80 3d e4 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ee4,0x0
c000e7aa:	75 f5                	jne    c000e7a1 <int_handler+0x14>
c000e7ac:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000e7b1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e7b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e7ba:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e7c0:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7c3:	83 f8 17             	cmp    eax,0x17
c000e7c6:	77 13                	ja     c000e7db <int_handler+0x4e>
c000e7c8:	83 ec 08             	sub    esp,0x8
c000e7cb:	8b 17                	mov    edx,DWORD PTR [edi]
c000e7cd:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7d0:	0f b6 c0             	movzx  eax,al
c000e7d3:	50                   	push   eax
c000e7d4:	57                   	push   edi
c000e7d5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e7d8:	83 c4 10             	add    esp,0x10
c000e7db:	83 c3 15             	add    ebx,0x15
c000e7de:	c1 e3 04             	shl    ebx,0x4
c000e7e1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7e5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7ec:	31 db                	xor    ebx,ebx
c000e7ee:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7f2:	85 c0                	test   eax,eax
c000e7f4:	74 13                	je     c000e809 <int_handler+0x7c>
c000e7f6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e7f9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e7fd:	74 1c                	je     c000e81b <int_handler+0x8e>
c000e7ff:	83 ec 08             	sub    esp,0x8
c000e802:	52                   	push   edx
c000e803:	56                   	push   esi
c000e804:	ff d0                	call   eax
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	43                   	inc    ebx
c000e80a:	83 fb 04             	cmp    ebx,0x4
c000e80d:	75 df                	jne    c000e7ee <int_handler+0x61>
c000e80f:	83 c4 0c             	add    esp,0xc
c000e812:	31 c0                	xor    eax,eax
c000e814:	5b                   	pop    ebx
c000e815:	31 d2                	xor    edx,edx
c000e817:	5e                   	pop    esi
c000e818:	5f                   	pop    edi
c000e819:	5d                   	pop    ebp
c000e81a:	c3                   	ret    
c000e81b:	83 ec 08             	sub    esp,0x8
c000e81e:	52                   	push   edx
c000e81f:	56                   	push   esi
c000e820:	ff d0                	call   eax
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	83 c4 0c             	add    esp,0xc
c000e828:	5b                   	pop    ebx
c000e829:	5e                   	pop    esi
c000e82a:	5f                   	pop    edi
c000e82b:	5d                   	pop    ebp
c000e82c:	c3                   	ret    
c000e82d:	90                   	nop

c000e82e <InterruptController::InterruptController(char const*)>:
c000e82e:	83 ec 1c             	sub    esp,0x1c
c000e831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e83c:	50                   	push   eax
c000e83d:	e8 74 f8 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e842:	83 c4 10             	add    esp,0x10
c000e845:	ba 40 37 02 c0       	mov    edx,0xc0023740
c000e84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e84e:	89 10                	mov    DWORD PTR [eax],edx
c000e850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e854:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e85e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e866:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e86e:	7f 5e                	jg     c000e8ce <InterruptController::InterruptController(char const*)+0xa0>
c000e870:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e878:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e87d:	7f 49                	jg     c000e8c8 <InterruptController::InterruptController(char const*)+0x9a>
c000e87f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e887:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e88e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e892:	01 ca                	add    edx,ecx
c000e894:	83 c2 54             	add    edx,0x54
c000e897:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8a7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8b2:	01 ca                	add    edx,ecx
c000e8b4:	81 c2 54 04 00 00    	add    edx,0x454
c000e8ba:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8c2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e8c6:	eb b0                	jmp    c000e878 <InterruptController::InterruptController(char const*)+0x4a>
c000e8c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e8cc:	eb 98                	jmp    c000e866 <InterruptController::InterruptController(char const*)+0x38>
c000e8ce:	90                   	nop
c000e8cf:	83 c4 1c             	add    esp,0x1c
c000e8d2:	c3                   	ret    
c000e8d3:	90                   	nop

c000e8d4 <InterruptController::~InterruptController()>:
c000e8d4:	83 ec 0c             	sub    esp,0xc
c000e8d7:	ba 40 37 02 c0       	mov    edx,0xc0023740
c000e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e0:	89 10                	mov    DWORD PTR [eax],edx
c000e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e6:	83 ec 0c             	sub    esp,0xc
c000e8e9:	50                   	push   eax
c000e8ea:	e8 91 f4 ff ff       	call   c000dd80 <Device::~Device()>
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	90                   	nop
c000e8f3:	83 c4 0c             	add    esp,0xc
c000e8f6:	c3                   	ret    
c000e8f7:	90                   	nop

c000e8f8 <InterruptController::~InterruptController()>:
c000e8f8:	83 ec 0c             	sub    esp,0xc
c000e8fb:	83 ec 0c             	sub    esp,0xc
c000e8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e902:	e8 cd ff ff ff       	call   c000e8d4 <InterruptController::~InterruptController()>
c000e907:	83 c4 10             	add    esp,0x10
c000e90a:	83 ec 08             	sub    esp,0x8
c000e90d:	68 58 21 00 00       	push   0x2158
c000e912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e916:	e8 6f e0 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e91b:	83 c4 10             	add    esp,0x10
c000e91e:	83 c4 0c             	add    esp,0xc
c000e921:	c3                   	ret    

c000e922 <displayDebugInfo(regs*)>:
c000e922:	55                   	push   ebp
c000e923:	57                   	push   edi
c000e924:	56                   	push   esi
c000e925:	53                   	push   ebx
c000e926:	83 ec 24             	sub    esp,0x24
c000e929:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e92d:	0f 20 c2             	mov    edx,cr0
c000e930:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e934:	0f 20 d7             	mov    edi,cr2
c000e937:	0f 20 de             	mov    esi,cr3
c000e93a:	0f 20 e5             	mov    ebp,cr4
c000e93d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e940:	68 96 34 02 c0       	push   0xc0023496
c000e945:	e8 21 e1 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e94a:	59                   	pop    ecx
c000e94b:	58                   	pop    eax
c000e94c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e94f:	68 a1 34 02 c0       	push   0xc00234a1
c000e954:	e8 12 e1 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e959:	58                   	pop    eax
c000e95a:	5a                   	pop    edx
c000e95b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e95e:	68 ac 34 02 c0       	push   0xc00234ac
c000e963:	e8 03 e1 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e968:	59                   	pop    ecx
c000e969:	58                   	pop    eax
c000e96a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e96d:	68 b7 34 02 c0       	push   0xc00234b7
c000e972:	e8 f4 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e977:	58                   	pop    eax
c000e978:	5a                   	pop    edx
c000e979:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e97c:	68 c2 34 02 c0       	push   0xc00234c2
c000e981:	e8 e5 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e986:	59                   	pop    ecx
c000e987:	58                   	pop    eax
c000e988:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e98b:	68 cd 34 02 c0       	push   0xc00234cd
c000e990:	e8 d6 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e995:	58                   	pop    eax
c000e996:	5a                   	pop    edx
c000e997:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e99a:	68 d8 34 02 c0       	push   0xc00234d8
c000e99f:	e8 c7 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9a4:	59                   	pop    ecx
c000e9a5:	58                   	pop    eax
c000e9a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e9a9:	68 e3 34 02 c0       	push   0xc00234e3
c000e9ae:	e8 b8 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9b3:	58                   	pop    eax
c000e9b4:	5a                   	pop    edx
c000e9b5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e9b8:	68 ee 34 02 c0       	push   0xc00234ee
c000e9bd:	e8 a9 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9c2:	59                   	pop    ecx
c000e9c3:	58                   	pop    eax
c000e9c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e9c7:	68 fd 34 02 c0       	push   0xc00234fd
c000e9cc:	e8 9a e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9d1:	58                   	pop    eax
c000e9d2:	5a                   	pop    edx
c000e9d3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e9d6:	68 08 35 02 c0       	push   0xc0023508
c000e9db:	e8 8b e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9e0:	59                   	pop    ecx
c000e9e1:	58                   	pop    eax
c000e9e2:	57                   	push   edi
c000e9e3:	68 13 35 02 c0       	push   0xc0023513
c000e9e8:	e8 7e e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9ed:	58                   	pop    eax
c000e9ee:	5a                   	pop    edx
c000e9ef:	56                   	push   esi
c000e9f0:	68 1e 35 02 c0       	push   0xc002351e
c000e9f5:	e8 71 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9fa:	59                   	pop    ecx
c000e9fb:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea00:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea06:	e8 be bd ff ff       	call   c000a7c9 <setActiveTerminal(VgaText*)>
c000ea0b:	58                   	pop    eax
c000ea0c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea0f:	5a                   	pop    edx
c000ea10:	c1 e0 05             	shl    eax,0x5
c000ea13:	05 20 58 02 c0       	add    eax,0xc0025820
c000ea18:	50                   	push   eax
c000ea19:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea24:	e8 ad c2 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ea29:	59                   	pop    ecx
c000ea2a:	58                   	pop    eax
c000ea2b:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea30:	68 29 35 02 c0       	push   0xc0023529
c000ea35:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea3b:	e8 96 c2 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ea40:	58                   	pop    eax
c000ea41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea46:	5a                   	pop    edx
c000ea47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea4a:	83 c0 0c             	add    eax,0xc
c000ea4d:	50                   	push   eax
c000ea4e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea59:	e8 78 c2 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ea5e:	59                   	pop    ecx
c000ea5f:	58                   	pop    eax
c000ea60:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea65:	68 32 35 02 c0       	push   0xc0023532
c000ea6a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea70:	e8 61 c2 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ea75:	58                   	pop    eax
c000ea76:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea7b:	5a                   	pop    edx
c000ea7c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea7f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea85:	e8 06 c2 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ea8a:	59                   	pop    ecx
c000ea8b:	58                   	pop    eax
c000ea8c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea91:	68 3a 35 02 c0       	push   0xc002353a
c000ea96:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea9c:	e8 35 c2 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000eaa1:	58                   	pop    eax
c000eaa2:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eaa7:	5a                   	pop    edx
c000eaa8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eaab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eab1:	e8 da c1 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000eab6:	59                   	pop    ecx
c000eab7:	58                   	pop    eax
c000eab8:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eabd:	68 42 35 02 c0       	push   0xc0023542
c000eac2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eac8:	e8 09 c2 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000eacd:	58                   	pop    eax
c000eace:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ead3:	5a                   	pop    edx
c000ead4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ead7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eadd:	e8 ae c1 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000eae2:	59                   	pop    ecx
c000eae3:	58                   	pop    eax
c000eae4:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eae9:	68 4a 35 02 c0       	push   0xc002354a
c000eaee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaf4:	e8 dd c1 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000eaf9:	58                   	pop    eax
c000eafa:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eaff:	5a                   	pop    edx
c000eb00:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb09:	e8 82 c1 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000eb0e:	59                   	pop    ecx
c000eb0f:	58                   	pop    eax
c000eb10:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb15:	68 52 35 02 c0       	push   0xc0023552
c000eb1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb20:	e8 b1 c1 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000eb25:	58                   	pop    eax
c000eb26:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb2b:	5a                   	pop    edx
c000eb2c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb2f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb35:	e8 56 c1 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000eb3a:	59                   	pop    ecx
c000eb3b:	58                   	pop    eax
c000eb3c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb41:	68 5a 35 02 c0       	push   0xc002355a
c000eb46:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb4c:	e8 85 c1 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000eb51:	58                   	pop    eax
c000eb52:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb57:	5a                   	pop    edx
c000eb58:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb5b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb61:	e8 2a c1 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000eb66:	59                   	pop    ecx
c000eb67:	58                   	pop    eax
c000eb68:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb6d:	68 62 35 02 c0       	push   0xc0023562
c000eb72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb78:	e8 59 c1 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000eb7d:	58                   	pop    eax
c000eb7e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb83:	5a                   	pop    edx
c000eb84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb88:	52                   	push   edx
c000eb89:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb8f:	e8 fc c0 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000eb94:	59                   	pop    ecx
c000eb95:	58                   	pop    eax
c000eb96:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb9b:	68 6b 35 02 c0       	push   0xc002356b
c000eba0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eba6:	e8 2b c1 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ebab:	58                   	pop    eax
c000ebac:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebb1:	5a                   	pop    edx
c000ebb2:	57                   	push   edi
c000ebb3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb9:	e8 d2 c0 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ebbe:	59                   	pop    ecx
c000ebbf:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebc4:	5f                   	pop    edi
c000ebc5:	68 73 35 02 c0       	push   0xc0023573
c000ebca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebd0:	e8 01 c1 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ebd5:	58                   	pop    eax
c000ebd6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebdb:	5a                   	pop    edx
c000ebdc:	56                   	push   esi
c000ebdd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebe3:	e8 a8 c0 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ebe8:	59                   	pop    ecx
c000ebe9:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebee:	5e                   	pop    esi
c000ebef:	68 7b 35 02 c0       	push   0xc002357b
c000ebf4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebfa:	e8 d7 c0 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ebff:	5f                   	pop    edi
c000ec00:	58                   	pop    eax
c000ec01:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec06:	55                   	push   ebp
c000ec07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec0d:	e8 7e c0 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ec12:	58                   	pop    eax
c000ec13:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec18:	5a                   	pop    edx
c000ec19:	68 83 35 02 c0       	push   0xc0023583
c000ec1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec24:	e8 ad c0 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ec29:	0f 21 c0             	mov    eax,db0
c000ec2c:	59                   	pop    ecx
c000ec2d:	5e                   	pop    esi
c000ec2e:	50                   	push   eax
c000ec2f:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec34:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec3a:	e8 51 c0 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ec3f:	5f                   	pop    edi
c000ec40:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec45:	5d                   	pop    ebp
c000ec46:	68 8c 35 02 c0       	push   0xc002358c
c000ec4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec51:	e8 80 c0 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ec56:	0f 21 c8             	mov    eax,db1
c000ec59:	5a                   	pop    edx
c000ec5a:	59                   	pop    ecx
c000ec5b:	50                   	push   eax
c000ec5c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec61:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec67:	e8 24 c0 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ec6c:	5e                   	pop    esi
c000ec6d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec72:	5f                   	pop    edi
c000ec73:	68 94 35 02 c0       	push   0xc0023594
c000ec78:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec7e:	e8 53 c0 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ec83:	0f 21 d0             	mov    eax,db2
c000ec86:	5d                   	pop    ebp
c000ec87:	5a                   	pop    edx
c000ec88:	50                   	push   eax
c000ec89:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec94:	e8 f7 bf ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ec99:	59                   	pop    ecx
c000ec9a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec9f:	5e                   	pop    esi
c000eca0:	68 9c 35 02 c0       	push   0xc002359c
c000eca5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecab:	e8 26 c0 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ecb0:	0f 21 d8             	mov    eax,db3
c000ecb3:	5f                   	pop    edi
c000ecb4:	5d                   	pop    ebp
c000ecb5:	50                   	push   eax
c000ecb6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecbb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecc1:	e8 ca bf ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ecc6:	58                   	pop    eax
c000ecc7:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eccc:	5a                   	pop    edx
c000eccd:	68 a4 35 02 c0       	push   0xc00235a4
c000ecd2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd8:	e8 f9 bf ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ecdd:	0f 21 f0             	mov    eax,db6
c000ece0:	59                   	pop    ecx
c000ece1:	5e                   	pop    esi
c000ece2:	50                   	push   eax
c000ece3:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ece8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecee:	e8 9d bf ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ecf3:	5f                   	pop    edi
c000ecf4:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecf9:	5d                   	pop    ebp
c000ecfa:	68 ac 35 02 c0       	push   0xc00235ac
c000ecff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed05:	e8 cc bf ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ed0a:	0f 21 f8             	mov    eax,db7
c000ed0d:	5a                   	pop    edx
c000ed0e:	59                   	pop    ecx
c000ed0f:	50                   	push   eax
c000ed10:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed15:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed1b:	e8 70 bf ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ed20:	5e                   	pop    esi
c000ed21:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed24:	e8 a0 87 00 00       	call   c00174c9 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	85 c0                	test   eax,eax
c000ed2e:	74 7d                	je     c000edad <displayDebugInfo(regs*)+0x48b>
c000ed30:	89 c6                	mov    esi,eax
c000ed32:	50                   	push   eax
c000ed33:	50                   	push   eax
c000ed34:	56                   	push   esi
c000ed35:	68 b4 35 02 c0       	push   0xc00235b4
c000ed3a:	e8 2c dd ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ed3f:	5a                   	pop    edx
c000ed40:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed45:	59                   	pop    ecx
c000ed46:	68 c2 35 02 c0       	push   0xc00235c2
c000ed4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed51:	e8 80 bf ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ed56:	5f                   	pop    edi
c000ed57:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed5c:	5d                   	pop    ebp
c000ed5d:	56                   	push   esi
c000ed5e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed64:	e8 6d bf ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ed69:	58                   	pop    eax
c000ed6a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed6f:	5a                   	pop    edx
c000ed70:	68 ce 35 02 c0       	push   0xc00235ce
c000ed75:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7b:	e8 56 bf ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c000ed80:	59                   	pop    ecx
c000ed81:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed86:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed8c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed8f:	e8 6c 87 00 00       	call   c0017500 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed94:	5b                   	pop    ebx
c000ed95:	5d                   	pop    ebp
c000ed96:	50                   	push   eax
c000ed97:	57                   	push   edi
c000ed98:	e8 f3 be ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c000ed9d:	58                   	pop    eax
c000ed9e:	5a                   	pop    edx
c000ed9f:	56                   	push   esi
c000eda0:	68 da 35 02 c0       	push   0xc00235da
c000eda5:	e8 c1 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000edaa:	83 c4 10             	add    esp,0x10
c000edad:	fa                   	cli    
c000edae:	f4                   	hlt    
c000edaf:	eb fe                	jmp    c000edaf <displayDebugInfo(regs*)+0x48d>

c000edb1 <x87EmulHandler(regs*, void*)>:
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	0f 20 c2             	mov    edx,cr0
c000edb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edbc:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000edc0:	75 4b                	jne    c000ee0d <x87EmulHandler(regs*, void*)+0x5c>
c000edc2:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000edc7:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000edcd:	85 c0                	test   eax,eax
c000edcf:	74 05                	je     c000edd6 <x87EmulHandler(regs*, void*)+0x25>
c000edd1:	83 e2 08             	and    edx,0x8
c000edd4:	75 17                	jne    c000eded <x87EmulHandler(regs*, void*)+0x3c>
c000edd6:	83 ec 0c             	sub    esp,0xc
c000edd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eddd:	e8 94 ab 00 00       	call   c0019976 <Vm::x87Handler(regs*)>
c000ede2:	83 c4 10             	add    esp,0x10
c000ede5:	84 c0                	test   al,al
c000ede7:	74 24                	je     c000ee0d <x87EmulHandler(regs*, void*)+0x5c>
c000ede9:	83 c4 0c             	add    esp,0xc
c000edec:	c3                   	ret    
c000eded:	83 ec 0c             	sub    esp,0xc
c000edf0:	68 00 36 02 c0       	push   0xc0023600
c000edf5:	e8 71 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000edfa:	0f 06                	clts   
c000edfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	a3 48 65 02 c0       	mov    ds:0xc0026548,eax
c000ee09:	83 c4 0c             	add    esp,0xc
c000ee0c:	c3                   	ret    
c000ee0d:	83 ec 0c             	sub    esp,0xc
c000ee10:	68 ea 35 02 c0       	push   0xc00235ea
c000ee15:	e8 51 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ee1a:	5a                   	pop    edx
c000ee1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee1f:	e8 fe fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000ee24 <gpFault(regs*, void*)>:
c000ee24:	53                   	push   ebx
c000ee25:	83 ec 14             	sub    esp,0x14
c000ee28:	c7 05 44 65 02 c0 32 8e 01 c0 	mov    DWORD PTR ds:0xc0026544,0xc0018e32
c000ee32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee36:	53                   	push   ebx
c000ee37:	e8 f6 9f 00 00       	call   c0018e32 <Vm::faultHandler(regs*)>
c000ee3c:	83 c4 10             	add    esp,0x10
c000ee3f:	84 c0                	test   al,al
c000ee41:	74 05                	je     c000ee48 <gpFault(regs*, void*)+0x24>
c000ee43:	83 c4 08             	add    esp,0x8
c000ee46:	5b                   	pop    ebx
c000ee47:	c3                   	ret    
c000ee48:	83 ec 0c             	sub    esp,0xc
c000ee4b:	68 0d 36 02 c0       	push   0xc002360d
c000ee50:	e8 16 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ee55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee58:	e8 c5 fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000ee5d <pgFault(regs*, void*)>:
c000ee5d:	53                   	push   ebx
c000ee5e:	83 ec 10             	sub    esp,0x10
c000ee61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee65:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee68:	68 28 36 02 c0       	push   0xc0023628
c000ee6d:	e8 f9 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ee72:	0f 20 d0             	mov    eax,cr2
c000ee75:	5a                   	pop    edx
c000ee76:	59                   	pop    ecx
c000ee77:	50                   	push   eax
c000ee78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee7d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee80:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee86:	e8 e7 d6 ff ff       	call   c000c572 <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	84 c0                	test   al,al
c000ee90:	74 05                	je     c000ee97 <pgFault(regs*, void*)+0x3a>
c000ee92:	83 c4 08             	add    esp,0x8
c000ee95:	5b                   	pop    ebx
c000ee96:	c3                   	ret    
c000ee97:	83 ec 0c             	sub    esp,0xc
c000ee9a:	68 3d 36 02 c0       	push   0xc002363d
c000ee9f:	e8 c7 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000eea4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eea7:	e8 76 fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000eeac <otherISRHandler(regs*, void*)>:
c000eeac:	53                   	push   ebx
c000eead:	83 ec 0c             	sub    esp,0xc
c000eeb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eeb4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eeb7:	50                   	push   eax
c000eeb8:	50                   	push   eax
c000eeb9:	68 4a 36 02 c0       	push   0xc002364a
c000eebe:	e8 a8 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000eec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec6:	e8 57 fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000eecb <opcodeFault(regs*, void*)>:
c000eecb:	55                   	push   ebp
c000eecc:	89 e5                	mov    ebp,esp
c000eece:	56                   	push   esi
c000eecf:	53                   	push   ebx
c000eed0:	83 ec 30             	sub    esp,0x30
c000eed3:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000eed8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eede:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eee4:	84 c0                	test   al,al
c000eee6:	74 24                	je     c000ef0c <opcodeFault(regs*, void*)+0x41>
c000eee8:	83 ec 0c             	sub    esp,0xc
c000eeeb:	68 68 36 02 c0       	push   0xc0023668
c000eef0:	e8 76 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000eef5:	83 c4 10             	add    esp,0x10
c000eef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eefb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eefe:	8d 50 19             	lea    edx,[eax+0x19]
c000ef01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef07:	e9 7b 03 00 00       	jmp    c000f287 <opcodeFault(regs*, void*)+0x3bc>
c000ef0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef0f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef15:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef25:	8a 00                	mov    al,BYTE PTR [eax]
c000ef27:	3c f0                	cmp    al,0xf0
c000ef29:	75 17                	jne    c000ef42 <opcodeFault(regs*, void*)+0x77>
c000ef2b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef31:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef34:	8d 50 01             	lea    edx,[eax+0x1]
c000ef37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef3d:	e9 d6 00 00 00       	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000ef42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef45:	8a 00                	mov    al,BYTE PTR [eax]
c000ef47:	3c f2                	cmp    al,0xf2
c000ef49:	74 09                	je     c000ef54 <opcodeFault(regs*, void*)+0x89>
c000ef4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef4e:	8a 00                	mov    al,BYTE PTR [eax]
c000ef50:	3c f3                	cmp    al,0xf3
c000ef52:	75 1b                	jne    c000ef6f <opcodeFault(regs*, void*)+0xa4>
c000ef54:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef61:	8d 50 01             	lea    edx,[eax+0x1]
c000ef64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef67:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef6a:	e9 a9 00 00 00       	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000ef6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef72:	8a 00                	mov    al,BYTE PTR [eax]
c000ef74:	3c 66                	cmp    al,0x66
c000ef76:	75 1b                	jne    c000ef93 <opcodeFault(regs*, void*)+0xc8>
c000ef78:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef7c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef85:	8d 50 01             	lea    edx,[eax+0x1]
c000ef88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef8b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef8e:	e9 85 00 00 00       	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000ef93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef96:	8a 00                	mov    al,BYTE PTR [eax]
c000ef98:	3c 67                	cmp    al,0x67
c000ef9a:	75 18                	jne    c000efb4 <opcodeFault(regs*, void*)+0xe9>
c000ef9c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efa0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efa9:	8d 50 01             	lea    edx,[eax+0x1]
c000efac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efaf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efb2:	eb 64                	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000efb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb7:	8a 00                	mov    al,BYTE PTR [eax]
c000efb9:	3c 2e                	cmp    al,0x2e
c000efbb:	74 09                	je     c000efc6 <opcodeFault(regs*, void*)+0xfb>
c000efbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efc0:	8a 00                	mov    al,BYTE PTR [eax]
c000efc2:	3c 3e                	cmp    al,0x3e
c000efc4:	75 18                	jne    c000efde <opcodeFault(regs*, void*)+0x113>
c000efc6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efd3:	8d 50 01             	lea    edx,[eax+0x1]
c000efd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efdc:	eb 3a                	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000efde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe1:	8a 00                	mov    al,BYTE PTR [eax]
c000efe3:	3c 36                	cmp    al,0x36
c000efe5:	74 1b                	je     c000f002 <opcodeFault(regs*, void*)+0x137>
c000efe7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efea:	8a 00                	mov    al,BYTE PTR [eax]
c000efec:	3c 26                	cmp    al,0x26
c000efee:	74 12                	je     c000f002 <opcodeFault(regs*, void*)+0x137>
c000eff0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eff3:	8a 00                	mov    al,BYTE PTR [eax]
c000eff5:	3c 64                	cmp    al,0x64
c000eff7:	74 09                	je     c000f002 <opcodeFault(regs*, void*)+0x137>
c000eff9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000effc:	8a 00                	mov    al,BYTE PTR [eax]
c000effe:	3c 65                	cmp    al,0x65
c000f000:	75 16                	jne    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000f002:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f006:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f00c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f00f:	8d 50 01             	lea    edx,[eax+0x1]
c000f012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f015:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f018:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f01b:	8a 00                	mov    al,BYTE PTR [eax]
c000f01d:	3c 0f                	cmp    al,0xf
c000f01f:	0f 85 8d 01 00 00    	jne    c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f025:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f028:	40                   	inc    eax
c000f029:	8a 00                	mov    al,BYTE PTR [eax]
c000f02b:	3c c7                	cmp    al,0xc7
c000f02d:	0f 85 7f 01 00 00    	jne    c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f033:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f039:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f03c:	8d 50 01             	lea    edx,[eax+0x1]
c000f03f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f042:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f045:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f048:	50                   	push   eax
c000f049:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f04c:	50                   	push   eax
c000f04d:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f050:	50                   	push   eax
c000f051:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f054:	e8 ed 49 00 00       	call   c0013a46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f059:	83 c4 10             	add    esp,0x10
c000f05c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f05f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f062:	83 f0 01             	xor    eax,0x1
c000f065:	84 c0                	test   al,al
c000f067:	0f 84 45 01 00 00    	je     c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f06d:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f070:	3c 01                	cmp    al,0x1
c000f072:	0f 85 3a 01 00 00    	jne    c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f078:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f07b:	83 f0 01             	xor    eax,0x1
c000f07e:	84 c0                	test   al,al
c000f080:	0f 84 2c 01 00 00    	je     c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f089:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f08c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f08f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f096:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f099:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f09c:	89 c2                	mov    edx,eax
c000f09e:	b8 00 00 00 00       	mov    eax,0x0
c000f0a3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0a6:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f0af:	ba 00 00 00 00       	mov    edx,0x0
c000f0b4:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f0b7:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f0ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f0c0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0c3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f0ca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0cd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0d0:	89 c2                	mov    edx,eax
c000f0d2:	b8 00 00 00 00       	mov    eax,0x0
c000f0d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0da:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0e3:	ba 00 00 00 00       	mov    edx,0x0
c000f0e8:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0eb:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0ee:	fa                   	cli    
c000f0ef:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f0f4:	40                   	inc    eax
c000f0f5:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f0fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0fd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f100:	8b 00                	mov    eax,DWORD PTR [eax]
c000f102:	89 c1                	mov    ecx,eax
c000f104:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f107:	89 cb                	mov    ebx,ecx
c000f109:	89 d0                	mov    eax,edx
c000f10b:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f10e:	89 c6                	mov    esi,eax
c000f110:	89 f0                	mov    eax,esi
c000f112:	09 d8                	or     eax,ebx
c000f114:	85 c0                	test   eax,eax
c000f116:	75 21                	jne    c000f139 <opcodeFault(regs*, void*)+0x26e>
c000f118:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f11b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f11e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f121:	89 01                	mov    DWORD PTR [ecx],eax
c000f123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f129:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f12c:	83 c8 40             	or     eax,0x40
c000f12f:	89 c2                	mov    edx,eax
c000f131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f134:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f137:	eb 3e                	jmp    c000f177 <opcodeFault(regs*, void*)+0x2ac>
c000f139:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f13c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f13f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f141:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f144:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f147:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f14a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f14d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f150:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f153:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f156:	89 d0                	mov    eax,edx
c000f158:	31 d2                	xor    edx,edx
c000f15a:	89 c3                	mov    ebx,eax
c000f15c:	89 d6                	mov    esi,edx
c000f15e:	89 da                	mov    edx,ebx
c000f160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f163:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f169:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f16c:	83 e0 bf             	and    eax,0xffffffbf
c000f16f:	89 c2                	mov    edx,eax
c000f171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f174:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f177:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f17c:	48                   	dec    eax
c000f17d:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f182:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f187:	85 c0                	test   eax,eax
c000f189:	75 01                	jne    c000f18c <opcodeFault(regs*, void*)+0x2c1>
c000f18b:	fb                   	sti    
c000f18c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f192:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f195:	01 c2                	add    edx,eax
c000f197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f19a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f19d:	83 ec 0c             	sub    esp,0xc
c000f1a0:	68 8b 36 02 c0       	push   0xc002368b
c000f1a5:	e8 c1 d8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f1aa:	83 c4 10             	add    esp,0x10
c000f1ad:	e9 d5 00 00 00       	jmp    c000f287 <opcodeFault(regs*, void*)+0x3bc>
c000f1b2:	83 ec 0c             	sub    esp,0xc
c000f1b5:	68 9e 36 02 c0       	push   0xc002369e
c000f1ba:	e8 ac d8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f1bf:	83 c4 10             	add    esp,0x10
c000f1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1ce:	c1 e0 04             	shl    eax,0x4
c000f1d1:	01 d0                	add    eax,edx
c000f1d3:	83 c0 03             	add    eax,0x3
c000f1d6:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d8:	0f b6 d8             	movzx  ebx,al
c000f1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1de:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1e7:	c1 e0 04             	shl    eax,0x4
c000f1ea:	01 d0                	add    eax,edx
c000f1ec:	83 c0 02             	add    eax,0x2
c000f1ef:	8a 00                	mov    al,BYTE PTR [eax]
c000f1f1:	0f b6 c8             	movzx  ecx,al
c000f1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f200:	c1 e0 04             	shl    eax,0x4
c000f203:	01 d0                	add    eax,edx
c000f205:	40                   	inc    eax
c000f206:	8a 00                	mov    al,BYTE PTR [eax]
c000f208:	0f b6 d0             	movzx  edx,al
c000f20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f214:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f217:	c1 e0 04             	shl    eax,0x4
c000f21a:	01 f0                	add    eax,esi
c000f21c:	8a 00                	mov    al,BYTE PTR [eax]
c000f21e:	0f b6 c0             	movzx  eax,al
c000f221:	83 ec 0c             	sub    esp,0xc
c000f224:	53                   	push   ebx
c000f225:	51                   	push   ecx
c000f226:	52                   	push   edx
c000f227:	50                   	push   eax
c000f228:	68 b0 36 02 c0       	push   0xc00236b0
c000f22d:	e8 39 d8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f232:	83 c4 20             	add    esp,0x20
c000f235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f238:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f23b:	83 c0 03             	add    eax,0x3
c000f23e:	8a 00                	mov    al,BYTE PTR [eax]
c000f240:	0f b6 d8             	movzx  ebx,al
c000f243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f246:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f249:	83 c0 02             	add    eax,0x2
c000f24c:	8a 00                	mov    al,BYTE PTR [eax]
c000f24e:	0f b6 c8             	movzx  ecx,al
c000f251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f254:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f257:	40                   	inc    eax
c000f258:	8a 00                	mov    al,BYTE PTR [eax]
c000f25a:	0f b6 d0             	movzx  edx,al
c000f25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f260:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f263:	8a 00                	mov    al,BYTE PTR [eax]
c000f265:	0f b6 c0             	movzx  eax,al
c000f268:	83 ec 0c             	sub    esp,0xc
c000f26b:	53                   	push   ebx
c000f26c:	51                   	push   ecx
c000f26d:	52                   	push   edx
c000f26e:	50                   	push   eax
c000f26f:	68 d8 36 02 c0       	push   0xc00236d8
c000f274:	e8 f2 d7 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f279:	83 c4 20             	add    esp,0x20
c000f27c:	83 ec 0c             	sub    esp,0xc
c000f27f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f282:	e8 9b f6 ff ff       	call   c000e922 <displayDebugInfo(regs*)>
c000f287:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f28a:	5b                   	pop    ebx
c000f28b:	5e                   	pop    esi
c000f28c:	5d                   	pop    ebp
c000f28d:	c3                   	ret    

c000f28e <displayProgramFault(char const*)>:
c000f28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f293:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f296:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f29c:	85 c0                	test   eax,eax
c000f29e:	74 15                	je     c000f2b5 <displayProgramFault(char const*)+0x27>
c000f2a0:	83 ec 0c             	sub    esp,0xc
c000f2a3:	6a 04                	push   0x4
c000f2a5:	6a 0f                	push   0xf
c000f2a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2ab:	50                   	push   eax
c000f2ac:	e8 21 b7 ff ff       	call   c000a9d2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f2b1:	83 c4 1c             	add    esp,0x1c
c000f2b4:	c3                   	ret    
c000f2b5:	c3                   	ret    

c000f2b6 <setupInterruptController()>:
c000f2b6:	55                   	push   ebp
c000f2b7:	89 e5                	mov    ebp,esp
c000f2b9:	53                   	push   ebx
c000f2ba:	83 ec 24             	sub    esp,0x24
c000f2bd:	b8 00 00 00 00       	mov    eax,0x0
c000f2c2:	85 c0                	test   eax,eax
c000f2c4:	0f 95 c0             	setne  al
c000f2c7:	84 c0                	test   al,al
c000f2c9:	74 5b                	je     c000f326 <setupInterruptController()+0x70>
c000f2cb:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f2d2:	83 ec 0c             	sub    esp,0xc
c000f2d5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2d8:	e8 e6 a6 ff ff       	call   c00099c3 <malloc>
c000f2dd:	83 c4 10             	add    esp,0x10
c000f2e0:	89 c3                	mov    ebx,eax
c000f2e2:	83 ec 0c             	sub    esp,0xc
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 d7 0b 01 00       	call   c001fec2 <APIC::APIC()>
c000f2eb:	83 c4 10             	add    esp,0x10
c000f2ee:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f9:	83 c0 08             	add    eax,0x8
c000f2fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2fe:	6a 00                	push   0x0
c000f300:	6a 00                	push   0x0
c000f302:	6a 00                	push   0x0
c000f304:	52                   	push   edx
c000f305:	ff d0                	call   eax
c000f307:	83 c4 10             	add    esp,0x10
c000f30a:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f30f:	83 ec 08             	sub    esp,0x8
c000f312:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f315:	50                   	push   eax
c000f316:	e8 97 eb ff ff       	call   c000deb2 <Device::addChild(Device*)>
c000f31b:	83 c4 10             	add    esp,0x10
c000f31e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f321:	e9 79 03 00 00       	jmp    c000f69f <setupInterruptController()+0x3e9>
c000f326:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c000f32b:	84 c0                	test   al,al
c000f32d:	75 14                	jne    c000f343 <setupInterruptController()+0x8d>
c000f32f:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f334:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f33a:	83 e2 fe             	and    edx,0xfffffffe
c000f33d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f343:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f348:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f34e:	83 e0 01             	and    eax,0x1
c000f351:	84 c0                	test   al,al
c000f353:	0f 95 c0             	setne  al
c000f356:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f359:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f360:	83 ec 0c             	sub    esp,0xc
c000f363:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f366:	e8 58 a6 ff ff       	call   c00099c3 <malloc>
c000f36b:	83 c4 10             	add    esp,0x10
c000f36e:	89 c3                	mov    ebx,eax
c000f370:	83 ec 0c             	sub    esp,0xc
c000f373:	53                   	push   ebx
c000f374:	e8 a1 10 01 00       	call   c002041a <PIC::PIC()>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f37f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f382:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f385:	8b 00                	mov    eax,DWORD PTR [eax]
c000f387:	83 c0 08             	add    eax,0x8
c000f38a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38c:	6a 00                	push   0x0
c000f38e:	6a 00                	push   0x0
c000f390:	6a 00                	push   0x0
c000f392:	52                   	push   edx
c000f393:	ff d0                	call   eax
c000f395:	83 c4 10             	add    esp,0x10
c000f398:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f39c:	74 73                	je     c000f411 <setupInterruptController()+0x15b>
c000f39e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a6:	83 c0 0c             	add    eax,0xc
c000f3a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ab:	6a 00                	push   0x0
c000f3ad:	6a 00                	push   0x0
c000f3af:	6a 00                	push   0x0
c000f3b1:	52                   	push   edx
c000f3b2:	ff d0                	call   eax
c000f3b4:	83 c4 10             	add    esp,0x10
c000f3b7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f3bb:	74 15                	je     c000f3d2 <setupInterruptController()+0x11c>
c000f3bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c2:	83 c0 04             	add    eax,0x4
c000f3c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c7:	83 ec 0c             	sub    esp,0xc
c000f3ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3cd:	ff d0                	call   eax
c000f3cf:	83 c4 10             	add    esp,0x10
c000f3d2:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f3d9:	83 ec 0c             	sub    esp,0xc
c000f3dc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3df:	e8 df a5 ff ff       	call   c00099c3 <malloc>
c000f3e4:	83 c4 10             	add    esp,0x10
c000f3e7:	89 c3                	mov    ebx,eax
c000f3e9:	83 ec 0c             	sub    esp,0xc
c000f3ec:	53                   	push   ebx
c000f3ed:	e8 d0 0a 01 00       	call   c001fec2 <APIC::APIC()>
c000f3f2:	83 c4 10             	add    esp,0x10
c000f3f5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f400:	83 c0 08             	add    eax,0x8
c000f403:	8b 00                	mov    eax,DWORD PTR [eax]
c000f405:	6a 00                	push   0x0
c000f407:	6a 00                	push   0x0
c000f409:	6a 00                	push   0x0
c000f40b:	52                   	push   edx
c000f40c:	ff d0                	call   eax
c000f40e:	83 c4 10             	add    esp,0x10
c000f411:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f416:	83 ec 08             	sub    esp,0x8
c000f419:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f41c:	50                   	push   eax
c000f41d:	e8 90 ea ff ff       	call   c000deb2 <Device::addChild(Device*)>
c000f422:	83 c4 10             	add    esp,0x10
c000f425:	c7 05 48 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026548,0x0
c000f42f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f432:	8b 00                	mov    eax,DWORD PTR [eax]
c000f434:	83 c0 24             	add    eax,0x24
c000f437:	8b 00                	mov    eax,DWORD PTR [eax]
c000f439:	6a 00                	push   0x0
c000f43b:	68 ac ee 00 c0       	push   0xc000eeac
c000f440:	6a 00                	push   0x0
c000f442:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f445:	ff d0                	call   eax
c000f447:	83 c4 10             	add    esp,0x10
c000f44a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f44d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f44f:	83 c0 24             	add    eax,0x24
c000f452:	8b 00                	mov    eax,DWORD PTR [eax]
c000f454:	6a 00                	push   0x0
c000f456:	68 ac ee 00 c0       	push   0xc000eeac
c000f45b:	6a 01                	push   0x1
c000f45d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f460:	ff d0                	call   eax
c000f462:	83 c4 10             	add    esp,0x10
c000f465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f468:	8b 00                	mov    eax,DWORD PTR [eax]
c000f46a:	83 c0 24             	add    eax,0x24
c000f46d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f46f:	6a 00                	push   0x0
c000f471:	68 7f e7 00 c0       	push   0xc000e77f
c000f476:	6a 02                	push   0x2
c000f478:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f47b:	ff d0                	call   eax
c000f47d:	83 c4 10             	add    esp,0x10
c000f480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f483:	8b 00                	mov    eax,DWORD PTR [eax]
c000f485:	83 c0 24             	add    eax,0x24
c000f488:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48a:	6a 00                	push   0x0
c000f48c:	68 ac ee 00 c0       	push   0xc000eeac
c000f491:	6a 03                	push   0x3
c000f493:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f496:	ff d0                	call   eax
c000f498:	83 c4 10             	add    esp,0x10
c000f49b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f49e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a0:	83 c0 24             	add    eax,0x24
c000f4a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 ac ee 00 c0       	push   0xc000eeac
c000f4ac:	6a 04                	push   0x4
c000f4ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4b1:	ff d0                	call   eax
c000f4b3:	83 c4 10             	add    esp,0x10
c000f4b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4bb:	83 c0 24             	add    eax,0x24
c000f4be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c0:	6a 00                	push   0x0
c000f4c2:	68 ac ee 00 c0       	push   0xc000eeac
c000f4c7:	6a 05                	push   0x5
c000f4c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4cc:	ff d0                	call   eax
c000f4ce:	83 c4 10             	add    esp,0x10
c000f4d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d6:	83 c0 24             	add    eax,0x24
c000f4d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4db:	6a 00                	push   0x0
c000f4dd:	68 cb ee 00 c0       	push   0xc000eecb
c000f4e2:	6a 06                	push   0x6
c000f4e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4e7:	ff d0                	call   eax
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f1:	83 c0 24             	add    eax,0x24
c000f4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 b1 ed 00 c0       	push   0xc000edb1
c000f4fd:	6a 07                	push   0x7
c000f4ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f502:	ff d0                	call   eax
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f50a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f50c:	83 c0 24             	add    eax,0x24
c000f50f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f511:	6a 00                	push   0x0
c000f513:	68 9a e5 00 c0       	push   0xc000e59a
c000f518:	6a 08                	push   0x8
c000f51a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f51d:	ff d0                	call   eax
c000f51f:	83 c4 10             	add    esp,0x10
c000f522:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f525:	8b 00                	mov    eax,DWORD PTR [eax]
c000f527:	83 c0 24             	add    eax,0x24
c000f52a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52c:	6a 00                	push   0x0
c000f52e:	68 ac ee 00 c0       	push   0xc000eeac
c000f533:	6a 09                	push   0x9
c000f535:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f538:	ff d0                	call   eax
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f540:	8b 00                	mov    eax,DWORD PTR [eax]
c000f542:	83 c0 24             	add    eax,0x24
c000f545:	8b 00                	mov    eax,DWORD PTR [eax]
c000f547:	6a 00                	push   0x0
c000f549:	68 ac ee 00 c0       	push   0xc000eeac
c000f54e:	6a 0a                	push   0xa
c000f550:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f553:	ff d0                	call   eax
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f55b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55d:	83 c0 24             	add    eax,0x24
c000f560:	8b 00                	mov    eax,DWORD PTR [eax]
c000f562:	6a 00                	push   0x0
c000f564:	68 ac ee 00 c0       	push   0xc000eeac
c000f569:	6a 0b                	push   0xb
c000f56b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f56e:	ff d0                	call   eax
c000f570:	83 c4 10             	add    esp,0x10
c000f573:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f576:	8b 00                	mov    eax,DWORD PTR [eax]
c000f578:	83 c0 24             	add    eax,0x24
c000f57b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f57d:	6a 00                	push   0x0
c000f57f:	68 ac ee 00 c0       	push   0xc000eeac
c000f584:	6a 0c                	push   0xc
c000f586:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f589:	ff d0                	call   eax
c000f58b:	83 c4 10             	add    esp,0x10
c000f58e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f591:	8b 00                	mov    eax,DWORD PTR [eax]
c000f593:	83 c0 24             	add    eax,0x24
c000f596:	8b 00                	mov    eax,DWORD PTR [eax]
c000f598:	6a 00                	push   0x0
c000f59a:	68 24 ee 00 c0       	push   0xc000ee24
c000f59f:	6a 0d                	push   0xd
c000f5a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5a4:	ff d0                	call   eax
c000f5a6:	83 c4 10             	add    esp,0x10
c000f5a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ae:	83 c0 24             	add    eax,0x24
c000f5b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b3:	6a 00                	push   0x0
c000f5b5:	68 5d ee 00 c0       	push   0xc000ee5d
c000f5ba:	6a 0e                	push   0xe
c000f5bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5bf:	ff d0                	call   eax
c000f5c1:	83 c4 10             	add    esp,0x10
c000f5c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c9:	83 c0 24             	add    eax,0x24
c000f5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 ac ee 00 c0       	push   0xc000eeac
c000f5d5:	6a 0f                	push   0xf
c000f5d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5da:	ff d0                	call   eax
c000f5dc:	83 c4 10             	add    esp,0x10
c000f5df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e4:	83 c0 24             	add    eax,0x24
c000f5e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e9:	6a 00                	push   0x0
c000f5eb:	68 ac ee 00 c0       	push   0xc000eeac
c000f5f0:	6a 10                	push   0x10
c000f5f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5f5:	ff d0                	call   eax
c000f5f7:	83 c4 10             	add    esp,0x10
c000f5fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ff:	83 c0 24             	add    eax,0x24
c000f602:	8b 00                	mov    eax,DWORD PTR [eax]
c000f604:	6a 00                	push   0x0
c000f606:	68 ac ee 00 c0       	push   0xc000eeac
c000f60b:	6a 11                	push   0x11
c000f60d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f610:	ff d0                	call   eax
c000f612:	83 c4 10             	add    esp,0x10
c000f615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f618:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61a:	83 c0 24             	add    eax,0x24
c000f61d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61f:	6a 00                	push   0x0
c000f621:	68 ac ee 00 c0       	push   0xc000eeac
c000f626:	6a 12                	push   0x12
c000f628:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f62b:	ff d0                	call   eax
c000f62d:	83 c4 10             	add    esp,0x10
c000f630:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f633:	8b 00                	mov    eax,DWORD PTR [eax]
c000f635:	83 c0 24             	add    eax,0x24
c000f638:	8b 00                	mov    eax,DWORD PTR [eax]
c000f63a:	6a 00                	push   0x0
c000f63c:	68 ac ee 00 c0       	push   0xc000eeac
c000f641:	6a 13                	push   0x13
c000f643:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f646:	ff d0                	call   eax
c000f648:	83 c4 10             	add    esp,0x10
c000f64b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f64e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f650:	83 c0 24             	add    eax,0x24
c000f653:	8b 00                	mov    eax,DWORD PTR [eax]
c000f655:	6a 00                	push   0x0
c000f657:	68 ac ee 00 c0       	push   0xc000eeac
c000f65c:	6a 14                	push   0x14
c000f65e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f661:	ff d0                	call   eax
c000f663:	83 c4 10             	add    esp,0x10
c000f666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f669:	8b 00                	mov    eax,DWORD PTR [eax]
c000f66b:	83 c0 24             	add    eax,0x24
c000f66e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f670:	6a 00                	push   0x0
c000f672:	68 ac ee 00 c0       	push   0xc000eeac
c000f677:	6a 1e                	push   0x1e
c000f679:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f67c:	ff d0                	call   eax
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f684:	8b 00                	mov    eax,DWORD PTR [eax]
c000f686:	83 c0 24             	add    eax,0x24
c000f689:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68b:	6a 00                	push   0x0
c000f68d:	68 3f 65 01 c0       	push   0xc001653f
c000f692:	6a 60                	push   0x60
c000f694:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f697:	ff d0                	call   eax
c000f699:	83 c4 10             	add    esp,0x10
c000f69c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f69f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f6a2:	c9                   	leave  
c000f6a3:	c3                   	ret    

c000f6a4 <InterruptController::convertLegacyIRQNumber(int)>:
c000f6a4:	55                   	push   ebp
c000f6a5:	89 e5                	mov    ebp,esp
c000f6a7:	83 ec 08             	sub    esp,0x8
c000f6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6ad:	83 ec 0c             	sub    esp,0xc
c000f6b0:	50                   	push   eax
c000f6b1:	e8 fc ea ff ff       	call   c000e1b2 <Device::getName()>
c000f6b6:	83 c4 10             	add    esp,0x10
c000f6b9:	8a 00                	mov    al,BYTE PTR [eax]
c000f6bb:	3c 41                	cmp    al,0x41
c000f6bd:	0f 94 c0             	sete   al
c000f6c0:	84 c0                	test   al,al
c000f6c2:	74 28                	je     c000f6ec <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6c4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f6c8:	7f 12                	jg     c000f6dc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f6ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6cd:	05 c0 5a 02 c0       	add    eax,0xc0025ac0
c000f6d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d4:	0f b6 c0             	movzx  eax,al
c000f6d7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f6da:	eb 10                	jmp    c000f6ec <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6dc:	83 ec 0c             	sub    esp,0xc
c000f6df:	68 00 37 02 c0       	push   0xc0023700
c000f6e4:	e8 44 4c 00 00       	call   c001432d <Krnl::panic(char const*)>
c000f6e9:	83 c4 10             	add    esp,0x10
c000f6ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6ef:	c9                   	leave  
c000f6f0:	c3                   	ret    
c000f6f1:	90                   	nop

c000f6f2 <startGUI(void*)>:
c000f6f2:	55                   	push   ebp
c000f6f3:	89 e5                	mov    ebp,esp
c000f6f5:	53                   	push   ebx
c000f6f6:	83 ec 04             	sub    esp,0x4
c000f6f9:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f6fe:	48                   	dec    eax
c000f6ff:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f704:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f709:	85 c0                	test   eax,eax
c000f70b:	75 01                	jne    c000f70e <startGUI(void*)+0x1c>
c000f70d:	fb                   	sti    
c000f70e:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f714:	83 ec 08             	sub    esp,0x8
c000f717:	6a 01                	push   0x1
c000f719:	68 80 37 02 c0       	push   0xc0023780
c000f71e:	e8 f7 7d 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c000f723:	83 c4 10             	add    esp,0x10
c000f726:	83 ec 08             	sub    esp,0x8
c000f729:	53                   	push   ebx
c000f72a:	50                   	push   eax
c000f72b:	e8 1b 80 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c000f730:	83 c4 10             	add    esp,0x10
c000f733:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f739:	83 ec 08             	sub    esp,0x8
c000f73c:	6a 01                	push   0x1
c000f73e:	68 9a 37 02 c0       	push   0xc002379a
c000f743:	e8 d2 7d 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c000f748:	83 c4 10             	add    esp,0x10
c000f74b:	83 ec 08             	sub    esp,0x8
c000f74e:	53                   	push   ebx
c000f74f:	50                   	push   eax
c000f750:	e8 f6 7f 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c000f755:	83 c4 10             	add    esp,0x10
c000f758:	90                   	nop
c000f759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f75c:	c9                   	leave  
c000f75d:	c3                   	ret    

c000f75e <startGUIVESA(void*)>:
c000f75e:	55                   	push   ebp
c000f75f:	89 e5                	mov    ebp,esp
c000f761:	53                   	push   ebx
c000f762:	83 ec 04             	sub    esp,0x4
c000f765:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f76a:	48                   	dec    eax
c000f76b:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f770:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f775:	85 c0                	test   eax,eax
c000f777:	75 01                	jne    c000f77a <startGUIVESA(void*)+0x1c>
c000f779:	fb                   	sti    
c000f77a:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f780:	83 ec 08             	sub    esp,0x8
c000f783:	6a 01                	push   0x1
c000f785:	68 b4 37 02 c0       	push   0xc00237b4
c000f78a:	e8 8b 7d 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c000f78f:	83 c4 10             	add    esp,0x10
c000f792:	83 ec 08             	sub    esp,0x8
c000f795:	53                   	push   ebx
c000f796:	50                   	push   eax
c000f797:	e8 af 7f 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c000f79c:	83 c4 10             	add    esp,0x10
c000f79f:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f7a5:	83 ec 08             	sub    esp,0x8
c000f7a8:	6a 01                	push   0x1
c000f7aa:	68 9a 37 02 c0       	push   0xc002379a
c000f7af:	e8 66 7d 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c000f7b4:	83 c4 10             	add    esp,0x10
c000f7b7:	83 ec 08             	sub    esp,0x8
c000f7ba:	53                   	push   ebx
c000f7bb:	50                   	push   eax
c000f7bc:	e8 8a 7f 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c000f7c1:	83 c4 10             	add    esp,0x10
c000f7c4:	90                   	nop
c000f7c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7c8:	c9                   	leave  
c000f7c9:	c3                   	ret    

c000f7ca <sendKeyToTerminal(unsigned char)>:
c000f7ca:	55                   	push   ebp
c000f7cb:	89 e5                	mov    ebp,esp
c000f7cd:	83 ec 28             	sub    esp,0x28
c000f7d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f7d6:	a1 84 64 02 c0       	mov    eax,ds:0xc0026484
c000f7db:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f7df:	83 ec 08             	sub    esp,0x8
c000f7e2:	52                   	push   edx
c000f7e3:	50                   	push   eax
c000f7e4:	e8 91 b6 ff ff       	call   c000ae7a <VgaText::receiveKey(unsigned char)>
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7f0:	0f 85 8f 00 00 00    	jne    c000f885 <sendKeyToTerminal(unsigned char)+0xbb>
c000f7f6:	fa                   	cli    
c000f7f7:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f7fc:	40                   	inc    eax
c000f7fd:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f802:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f807:	40                   	inc    eax
c000f808:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c000f80d:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c000f812:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f815:	c7 05 60 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026560,0x0
c000f81f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f823:	74 1f                	je     c000f844 <sendKeyToTerminal(unsigned char)+0x7a>
c000f825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f828:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f82b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f82e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f831:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f834:	83 ec 0c             	sub    esp,0xc
c000f837:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f83a:	e8 7d 8b 00 00       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	eb db                	jmp    c000f81f <sendKeyToTerminal(unsigned char)+0x55>
c000f844:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f849:	48                   	dec    eax
c000f84a:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c000f84f:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f854:	85 c0                	test   eax,eax
c000f856:	75 18                	jne    c000f870 <sendKeyToTerminal(unsigned char)+0xa6>
c000f858:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c000f85d:	85 c0                	test   eax,eax
c000f85f:	74 0f                	je     c000f870 <sendKeyToTerminal(unsigned char)+0xa6>
c000f861:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c000f86b:	e8 90 86 00 00       	call   c0017f00 <schedule()>
c000f870:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f875:	48                   	dec    eax
c000f876:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f87b:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f880:	85 c0                	test   eax,eax
c000f882:	75 01                	jne    c000f885 <sendKeyToTerminal(unsigned char)+0xbb>
c000f884:	fb                   	sti    
c000f885:	90                   	nop
c000f886:	c9                   	leave  
c000f887:	c3                   	ret    

c000f888 <sendKeyboardToken(KeyboardToken)>:
c000f888:	55                   	push   ebp
c000f889:	89 e5                	mov    ebp,esp
c000f88b:	83 ec 18             	sub    esp,0x18
c000f88e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f894:	0f b7 c0             	movzx  eax,ax
c000f897:	83 f2 01             	xor    edx,0x1
c000f89a:	88 90 80 65 02 c0    	mov    BYTE PTR [eax-0x3ffd9a80],dl
c000f8a0:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000f8a5:	85 c0                	test   eax,eax
c000f8a7:	74 24                	je     c000f8cd <sendKeyboardToken(KeyboardToken)+0x45>
c000f8a9:	8b 0d 68 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026568
c000f8af:	83 ec 04             	sub    esp,0x4
c000f8b2:	68 80 65 02 c0       	push   0xc0026580
c000f8b7:	83 ec 08             	sub    esp,0x8
c000f8ba:	89 e2                	mov    edx,esp
c000f8bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8bf:	89 02                	mov    DWORD PTR [edx],eax
c000f8c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8c4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f8c8:	ff d1                	call   ecx
c000f8ca:	83 c4 10             	add    esp,0x10
c000f8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d0:	66 3d 03 02          	cmp    ax,0x203
c000f8d4:	75 07                	jne    c000f8dd <sendKeyboardToken(KeyboardToken)+0x55>
c000f8d6:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000f8db:	84 c0                	test   al,al
c000f8dd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f8e1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8e4:	a0 88 69 02 c0       	mov    al,ds:0xc0026988
c000f8e9:	38 c2                	cmp    dl,al
c000f8eb:	74 1c                	je     c000f909 <sendKeyboardToken(KeyboardToken)+0x81>
c000f8ed:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8f0:	a2 88 69 02 c0       	mov    ds:0xc0026988,al
c000f8f5:	a0 88 69 02 c0       	mov    al,ds:0xc0026988
c000f8fa:	0f b6 c0             	movzx  eax,al
c000f8fd:	83 ec 0c             	sub    esp,0xc
c000f900:	50                   	push   eax
c000f901:	e8 b4 ab ff ff       	call   c000a4ba <setTerminalScrollLock(bool)>
c000f906:	83 c4 10             	add    esp,0x10
c000f909:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f90c:	84 c0                	test   al,al
c000f90e:	0f 84 ae 00 00 00    	je     c000f9c2 <sendKeyboardToken(KeyboardToken)+0x13a>
c000f914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f917:	66 3d 10 03          	cmp    ax,0x310
c000f91b:	75 06                	jne    c000f923 <sendKeyboardToken(KeyboardToken)+0x9b>
c000f91d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f926:	66 3d 11 03          	cmp    ax,0x311
c000f92a:	75 06                	jne    c000f932 <sendKeyboardToken(KeyboardToken)+0xaa>
c000f92c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f935:	66 3d 12 03          	cmp    ax,0x312
c000f939:	75 06                	jne    c000f941 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f93b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f944:	66 3d 13 03          	cmp    ax,0x313
c000f948:	75 06                	jne    c000f950 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f94a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f953:	66 3d 14 03          	cmp    ax,0x314
c000f957:	75 06                	jne    c000f95f <sendKeyboardToken(KeyboardToken)+0xd7>
c000f959:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f962:	66 3d 15 03          	cmp    ax,0x315
c000f966:	75 06                	jne    c000f96e <sendKeyboardToken(KeyboardToken)+0xe6>
c000f968:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f96e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f971:	66 3d 16 03          	cmp    ax,0x316
c000f975:	75 06                	jne    c000f97d <sendKeyboardToken(KeyboardToken)+0xf5>
c000f977:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f97d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f980:	66 3d 17 03          	cmp    ax,0x317
c000f984:	75 06                	jne    c000f98c <sendKeyboardToken(KeyboardToken)+0x104>
c000f986:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f98c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f98f:	66 3d 18 03          	cmp    ax,0x318
c000f993:	75 06                	jne    c000f99b <sendKeyboardToken(KeyboardToken)+0x113>
c000f995:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f99b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f99e:	66 3d 19 03          	cmp    ax,0x319
c000f9a2:	75 06                	jne    c000f9aa <sendKeyboardToken(KeyboardToken)+0x122>
c000f9a4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f9aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ad:	66 3d 1a 03          	cmp    ax,0x31a
c000f9b1:	0f 85 c9 00 00 00    	jne    c000fa80 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9b7:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f9bd:	e9 be 00 00 00       	jmp    c000fa80 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c5:	66 3d 10 03          	cmp    ax,0x310
c000f9c9:	75 0a                	jne    c000f9d5 <sendKeyboardToken(KeyboardToken)+0x14d>
c000f9cb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f9d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d8:	66 3d 11 03          	cmp    ax,0x311
c000f9dc:	75 0a                	jne    c000f9e8 <sendKeyboardToken(KeyboardToken)+0x160>
c000f9de:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9eb:	66 3d 12 03          	cmp    ax,0x312
c000f9ef:	75 0a                	jne    c000f9fb <sendKeyboardToken(KeyboardToken)+0x173>
c000f9f1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9fe:	66 3d 13 03          	cmp    ax,0x313
c000fa02:	75 0a                	jne    c000fa0e <sendKeyboardToken(KeyboardToken)+0x186>
c000fa04:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa11:	66 3d 14 03          	cmp    ax,0x314
c000fa15:	75 0a                	jne    c000fa21 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa17:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa1d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa24:	66 3d 15 03          	cmp    ax,0x315
c000fa28:	75 0a                	jne    c000fa34 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa2a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa37:	66 3d 16 03          	cmp    ax,0x316
c000fa3b:	75 0a                	jne    c000fa47 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa3d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa4a:	66 3d 17 03          	cmp    ax,0x317
c000fa4e:	75 0a                	jne    c000fa5a <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa50:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5d:	66 3d 18 03          	cmp    ax,0x318
c000fa61:	75 0a                	jne    c000fa6d <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa63:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa70:	66 3d 19 03          	cmp    ax,0x319
c000fa74:	75 0a                	jne    c000fa80 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa76:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa83:	66 3d 00 02          	cmp    ax,0x200
c000fa87:	75 2c                	jne    c000fab5 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa89:	a0 80 69 02 c0       	mov    al,ds:0xc0026980
c000fa8e:	83 f0 01             	xor    eax,0x1
c000fa91:	84 c0                	test   al,al
c000fa93:	74 20                	je     c000fab5 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa95:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000fa9a:	6a 01                	push   0x1
c000fa9c:	6a 00                	push   0x0
c000fa9e:	68 f2 f6 00 c0       	push   0xc000f6f2
c000faa3:	50                   	push   eax
c000faa4:	e8 3b 82 00 00       	call   c0017ce4 <Process::createThread(void (*)(void*), void*, int)>
c000faa9:	83 c4 10             	add    esp,0x10
c000faac:	c6 05 80 69 02 c0 01 	mov    BYTE PTR ds:0xc0026980,0x1
c000fab3:	eb 33                	jmp    c000fae8 <sendKeyboardToken(KeyboardToken)+0x260>
c000fab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab8:	66 3d 01 02          	cmp    ax,0x201
c000fabc:	75 2a                	jne    c000fae8 <sendKeyboardToken(KeyboardToken)+0x260>
c000fabe:	a0 80 69 02 c0       	mov    al,ds:0xc0026980
c000fac3:	83 f0 01             	xor    eax,0x1
c000fac6:	84 c0                	test   al,al
c000fac8:	74 1e                	je     c000fae8 <sendKeyboardToken(KeyboardToken)+0x260>
c000faca:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000facf:	6a 01                	push   0x1
c000fad1:	6a 00                	push   0x0
c000fad3:	68 5e f7 00 c0       	push   0xc000f75e
c000fad8:	50                   	push   eax
c000fad9:	e8 06 82 00 00       	call   c0017ce4 <Process::createThread(void (*)(void*), void*, int)>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	c6 05 80 69 02 c0 01 	mov    BYTE PTR ds:0xc0026980,0x1
c000fae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faeb:	66 3d 1d 03          	cmp    ax,0x31d
c000faef:	75 06                	jne    c000faf7 <sendKeyboardToken(KeyboardToken)+0x26f>
c000faf1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000faf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fafa:	66 3d 1c 03          	cmp    ax,0x31c
c000fafe:	75 06                	jne    c000fb06 <sendKeyboardToken(KeyboardToken)+0x27e>
c000fb00:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb09:	66 3d 1b 03          	cmp    ax,0x31b
c000fb0d:	75 06                	jne    c000fb15 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb0f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb18:	66 3d 1e 03          	cmp    ax,0x31e
c000fb1c:	75 06                	jne    c000fb24 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb1e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb27:	66 3d 1f 03          	cmp    ax,0x31f
c000fb2b:	75 06                	jne    c000fb33 <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb2d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb36:	66 3d 1a 03          	cmp    ax,0x31a
c000fb3a:	75 06                	jne    c000fb42 <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb3c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb42:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb46:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb49:	83 f0 01             	xor    eax,0x1
c000fb4c:	84 c0                	test   al,al
c000fb4e:	74 77                	je     c000fbc7 <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb50:	a0 81 66 02 c0       	mov    al,ds:0xc0026681
c000fb55:	84 c0                	test   al,al
c000fb57:	74 41                	je     c000fb9a <sendKeyboardToken(KeyboardToken)+0x312>
c000fb59:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb5d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb61:	74 2b                	je     c000fb8e <sendKeyboardToken(KeyboardToken)+0x306>
c000fb63:	8b 15 84 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026984
c000fb69:	89 d0                	mov    eax,edx
c000fb6b:	c1 e0 02             	shl    eax,0x2
c000fb6e:	01 d0                	add    eax,edx
c000fb70:	01 c0                	add    eax,eax
c000fb72:	a3 84 69 02 c0       	mov    ds:0xc0026984,eax
c000fb77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb7a:	0f b7 c0             	movzx  eax,ax
c000fb7d:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb80:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fb85:	01 d0                	add    eax,edx
c000fb87:	a3 84 69 02 c0       	mov    ds:0xc0026984,eax
c000fb8c:	eb 6d                	jmp    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fb8e:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fb98:	eb 61                	jmp    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fb9a:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	74 18                	je     c000fbbb <sendKeyboardToken(KeyboardToken)+0x333>
c000fba3:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fba8:	0f b6 c0             	movzx  eax,al
c000fbab:	83 ec 0c             	sub    esp,0xc
c000fbae:	50                   	push   eax
c000fbaf:	e8 16 fc ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fbb4:	83 c4 10             	add    esp,0x10
c000fbb7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbbb:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fbc5:	eb 34                	jmp    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbca:	66 3d 01 01          	cmp    ax,0x101
c000fbce:	75 2b                	jne    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fbd0:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fbd5:	85 c0                	test   eax,eax
c000fbd7:	74 18                	je     c000fbf1 <sendKeyboardToken(KeyboardToken)+0x369>
c000fbd9:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fbde:	0f b6 c0             	movzx  eax,al
c000fbe1:	83 ec 0c             	sub    esp,0xc
c000fbe4:	50                   	push   eax
c000fbe5:	e8 e0 fb ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fbea:	83 c4 10             	add    esp,0x10
c000fbed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbf1:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fbfb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbfe:	83 f0 01             	xor    eax,0x1
c000fc01:	84 c0                	test   al,al
c000fc03:	74 4c                	je     c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc05:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc08:	83 f0 01             	xor    eax,0x1
c000fc0b:	84 c0                	test   al,al
c000fc0d:	74 42                	je     c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc0f:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000fc14:	83 f0 01             	xor    eax,0x1
c000fc17:	84 c0                	test   al,al
c000fc19:	74 36                	je     c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1e:	66 83 f8 1f          	cmp    ax,0x1f
c000fc22:	76 09                	jbe    c000fc2d <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc27:	66 83 f8 7e          	cmp    ax,0x7e
c000fc2b:	76 12                	jbe    c000fc3f <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc30:	66 83 f8 0a          	cmp    ax,0xa
c000fc34:	74 09                	je     c000fc3f <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc39:	66 83 f8 08          	cmp    ax,0x8
c000fc3d:	75 12                	jne    c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc42:	0f b6 c0             	movzx  eax,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	50                   	push   eax
c000fc49:	e8 7c fb ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fc4e:	83 c4 10             	add    esp,0x10
c000fc51:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc54:	83 f0 01             	xor    eax,0x1
c000fc57:	84 c0                	test   al,al
c000fc59:	74 4f                	je     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc5b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc5e:	83 f0 01             	xor    eax,0x1
c000fc61:	84 c0                	test   al,al
c000fc63:	74 45                	je     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc65:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000fc6a:	84 c0                	test   al,al
c000fc6c:	74 3c                	je     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc71:	66 83 f8 3f          	cmp    ax,0x3f
c000fc75:	76 33                	jbe    c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7a:	66 83 f8 7f          	cmp    ax,0x7f
c000fc7e:	77 2a                	ja     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc83:	88 c2                	mov    dl,al
c000fc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc88:	66 83 f8 5f          	cmp    ax,0x5f
c000fc8c:	76 04                	jbe    c000fc92 <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc8e:	b0 20                	mov    al,0x20
c000fc90:	eb 02                	jmp    c000fc94 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc92:	b0 00                	mov    al,0x0
c000fc94:	29 c2                	sub    edx,eax
c000fc96:	88 d0                	mov    al,dl
c000fc98:	83 e8 40             	sub    eax,0x40
c000fc9b:	0f b6 c0             	movzx  eax,al
c000fc9e:	83 ec 0c             	sub    esp,0xc
c000fca1:	50                   	push   eax
c000fca2:	e8 23 fb ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcad:	66 3d 00 03          	cmp    ax,0x300
c000fcb1:	75 0f                	jne    c000fcc2 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcb3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcb6:	83 f0 01             	xor    eax,0x1
c000fcb9:	84 c0                	test   al,al
c000fcbb:	74 05                	je     c000fcc2 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcbd:	e8 69 ab ff ff       	call   c000a82b <doTerminalCycle()>
c000fcc2:	90                   	nop
c000fcc3:	c9                   	leave  
c000fcc4:	c3                   	ret    

c000fcc5 <clearInternalKeybuffer(VgaText*)>:
c000fcc5:	55                   	push   ebp
c000fcc6:	89 e5                	mov    ebp,esp
c000fcc8:	83 ec 08             	sub    esp,0x8
c000fccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcce:	05 98 01 00 00       	add    eax,0x198
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	50                   	push   eax
c000fcd7:	e8 c4 09 ff ff       	call   c00006a0 <strlen>
c000fcdc:	83 c4 10             	add    esp,0x10
c000fcdf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fce2:	81 c2 98 01 00 00    	add    edx,0x198
c000fce8:	83 ec 04             	sub    esp,0x4
c000fceb:	50                   	push   eax
c000fcec:	6a 00                	push   0x0
c000fcee:	52                   	push   edx
c000fcef:	e8 90 09 ff ff       	call   c0000684 <memset>
c000fcf4:	83 c4 10             	add    esp,0x10
c000fcf7:	90                   	nop
c000fcf8:	c9                   	leave  
c000fcf9:	c3                   	ret    

c000fcfa <readKeyboard(VgaText*, char*, unsigned long)>:
c000fcfa:	55                   	push   ebp
c000fcfb:	89 e5                	mov    ebp,esp
c000fcfd:	83 ec 18             	sub    esp,0x18
c000fd00:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000fd05:	85 c0                	test   eax,eax
c000fd07:	74 2a                	je     c000fd33 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd09:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd0f:	8b 0d 68 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026568
c000fd15:	83 ec 04             	sub    esp,0x4
c000fd18:	68 80 65 02 c0       	push   0xc0026580
c000fd1d:	83 ec 08             	sub    esp,0x8
c000fd20:	89 e2                	mov    edx,esp
c000fd22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd25:	89 02                	mov    DWORD PTR [edx],eax
c000fd27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd2a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd2e:	ff d1                	call   ecx
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	fb                   	sti    
c000fd34:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd3b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd3f:	0f 84 a1 00 00 00    	je     c000fde6 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd48:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd4e:	84 c0                	test   al,al
c000fd50:	75 28                	jne    c000fd7a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd52:	fa                   	cli    
c000fd53:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd58:	40                   	inc    eax
c000fd59:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000fd5e:	e8 9d 81 00 00       	call   c0017f00 <schedule()>
c000fd63:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd68:	48                   	dec    eax
c000fd69:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000fd6e:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd73:	85 c0                	test   eax,eax
c000fd75:	75 ce                	jne    c000fd45 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd77:	fb                   	sti    
c000fd78:	eb cb                	jmp    c000fd45 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd7d:	8d 50 01             	lea    edx,[eax+0x1]
c000fd80:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd86:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd8c:	88 10                	mov    BYTE PTR [eax],dl
c000fd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd91:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd97:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd9d:	05 98 01 00 00       	add    eax,0x198
c000fda2:	83 ec 0c             	sub    esp,0xc
c000fda5:	50                   	push   eax
c000fda6:	e8 f5 08 ff ff       	call   c00006a0 <strlen>
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdb1:	81 c2 98 01 00 00    	add    edx,0x198
c000fdb7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fdba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdbd:	81 c2 98 01 00 00    	add    edx,0x198
c000fdc3:	83 ec 04             	sub    esp,0x4
c000fdc6:	50                   	push   eax
c000fdc7:	51                   	push   ecx
c000fdc8:	52                   	push   edx
c000fdc9:	e8 ee 07 ff ff       	call   c00005bc <memmove>
c000fdce:	83 c4 10             	add    esp,0x10
c000fdd1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fdd4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fdd7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fddb:	0f 85 5a ff ff ff    	jne    c000fd3b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fde1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde4:	eb 03                	jmp    c000fde9 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fde6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde9:	c9                   	leave  
c000fdea:	c3                   	ret    
c000fdeb:	90                   	nop

c000fdec <Keyboard::Keyboard(char const*)>:
c000fdec:	83 ec 0c             	sub    esp,0xc
c000fdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf3:	83 ec 08             	sub    esp,0x8
c000fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdfa:	50                   	push   eax
c000fdfb:	e8 b6 e2 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c000fe08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0c:	89 10                	mov    DWORD PTR [eax],edx
c000fe0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe12:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe1c:	c6 05 64 65 02 c0 01 	mov    BYTE PTR ds:0xc0026564,0x1
c000fe23:	90                   	nop
c000fe24:	83 c4 0c             	add    esp,0xc
c000fe27:	c3                   	ret    

c000fe28 <Keyboard::~Keyboard()>:
c000fe28:	83 ec 0c             	sub    esp,0xc
c000fe2b:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c000fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe34:	89 10                	mov    DWORD PTR [eax],edx
c000fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3a:	83 ec 0c             	sub    esp,0xc
c000fe3d:	50                   	push   eax
c000fe3e:	e8 3d df ff ff       	call   c000dd80 <Device::~Device()>
c000fe43:	83 c4 10             	add    esp,0x10
c000fe46:	90                   	nop
c000fe47:	83 c4 0c             	add    esp,0xc
c000fe4a:	c3                   	ret    
c000fe4b:	90                   	nop

c000fe4c <Keyboard::~Keyboard()>:
c000fe4c:	83 ec 0c             	sub    esp,0xc
c000fe4f:	83 ec 0c             	sub    esp,0xc
c000fe52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe56:	e8 cd ff ff ff       	call   c000fe28 <Keyboard::~Keyboard()>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	83 ec 08             	sub    esp,0x8
c000fe61:	68 5c 01 00 00       	push   0x15c
c000fe66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe6a:	e8 1b cb ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	83 c4 0c             	add    esp,0xc
c000fe75:	c3                   	ret    

c000fe76 <LogicalDisk::close(int, int, void*)>:
c000fe76:	83 c8 ff             	or     eax,0xffffffff
c000fe79:	c3                   	ret    

c000fe7a <LogicalDisk::~LogicalDisk()>:
c000fe7a:	83 ec 0c             	sub    esp,0xc
c000fe7d:	ba 50 38 02 c0       	mov    edx,0xc0023850
c000fe82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe86:	89 10                	mov    DWORD PTR [eax],edx
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	83 ec 0c             	sub    esp,0xc
c000fe8f:	50                   	push   eax
c000fe90:	e8 eb de ff ff       	call   c000dd80 <Device::~Device()>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	90                   	nop
c000fe99:	83 c4 0c             	add    esp,0xc
c000fe9c:	c3                   	ret    
c000fe9d:	90                   	nop

c000fe9e <LogicalDisk::~LogicalDisk()>:
c000fe9e:	83 ec 0c             	sub    esp,0xc
c000fea1:	83 ec 0c             	sub    esp,0xc
c000fea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea8:	e8 cd ff ff ff       	call   c000fe7a <LogicalDisk::~LogicalDisk()>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	83 ec 08             	sub    esp,0x8
c000feb3:	68 74 01 00 00       	push   0x174
c000feb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000febc:	e8 c9 ca ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	83 c4 0c             	add    esp,0xc
c000fec7:	c3                   	ret    

c000fec8 <LogicalDisk::open(int, int, void*)>:
c000fec8:	83 ec 18             	sub    esp,0x18
c000fecb:	68 04 38 02 c0       	push   0xc0023804
c000fed0:	e8 58 44 00 00       	call   c001432d <Krnl::panic(char const*)>
c000fed5:	83 c8 ff             	or     eax,0xffffffff
c000fed8:	83 c4 1c             	add    esp,0x1c
c000fedb:	c3                   	ret    

c000fedc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fedc:	53                   	push   ebx
c000fedd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fee9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000feef:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000fef5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000fefb:	77 10                	ja     c000ff0d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000fefd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ff03:	89 d3                	mov    ebx,edx
c000ff05:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff0b:	72 05                	jb     c000ff12 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff0d:	83 c8 ff             	or     eax,0xffffffff
c000ff10:	89 c2                	mov    edx,eax
c000ff12:	5b                   	pop    ebx
c000ff13:	c3                   	ret    

c000ff14 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff14:	56                   	push   esi
c000ff15:	83 c8 ff             	or     eax,0xffffffff
c000ff18:	53                   	push   ebx
c000ff19:	89 c2                	mov    edx,eax
c000ff1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff1f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff23:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff2d:	77 27                	ja     c000ff56 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff2f:	89 d8                	mov    eax,ebx
c000ff31:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff37:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff42:	89 c2                	mov    edx,eax
c000ff44:	73 10                	jae    c000ff56 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff46:	89 c8                	mov    eax,ecx
c000ff48:	89 da                	mov    edx,ebx
c000ff4a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff50:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff56:	5b                   	pop    ebx
c000ff57:	5e                   	pop    esi
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff5a:	83 ec 1c             	sub    esp,0x1c
c000ff5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff71:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff80:	83 ec 08             	sub    esp,0x8
c000ff83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff87:	50                   	push   eax
c000ff88:	e8 29 e1 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	ba 50 38 02 c0       	mov    edx,0xc0023850
c000ff95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff99:	89 10                	mov    DWORD PTR [eax],edx
c000ff9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff9f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffaa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ffbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffcb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ffd1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ffd7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ffe2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ffe8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ffee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fff6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000fffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010000:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001000a:	90                   	nop
c001000b:	83 c4 1c             	add    esp,0x1c
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <LogicalDisk::assignDriveLetter()>:
c0010010:	55                   	push   ebp
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	83 ec 14             	sub    esp,0x14
c0010017:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001001b:	8b 3d a0 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a0
c0010021:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010027:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001002b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010031:	8b 3d a4 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a4
c0010037:	3c 01                	cmp    al,0x1
c0010039:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001003d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010041:	19 c0                	sbb    eax,eax
c0010043:	83 e0 02             	and    eax,0x2
c0010046:	83 c0 41             	add    eax,0x41
c0010049:	0f be e8             	movsx  ebp,al
c001004c:	3c 43                	cmp    al,0x43
c001004e:	75 10                	jne    c0010060 <LogicalDisk::assignDriveLetter()+0x50>
c0010050:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010057:	75 5d                	jne    c00100b6 <LogicalDisk::assignDriveLetter()+0xa6>
c0010059:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001005e:	75 56                	jne    c00100b6 <LogicalDisk::assignDriveLetter()+0xa6>
c0010060:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010063:	ba 01 00 00 00       	mov    edx,0x1
c0010068:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001006c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010070:	d3 e2                	shl    edx,cl
c0010072:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010076:	89 d7                	mov    edi,edx
c0010078:	89 d6                	mov    esi,edx
c001007a:	c1 ff 1f             	sar    edi,0x1f
c001007d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010081:	21 f9                	and    ecx,edi
c0010083:	09 d1                	or     ecx,edx
c0010085:	75 2f                	jne    c00100b6 <LogicalDisk::assignDriveLetter()+0xa6>
c0010087:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001008b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001008f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010095:	09 f2                	or     edx,esi
c0010097:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c001009d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100a1:	09 fa                	or     edx,edi
c00100a3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00100a7:	89 15 a4 69 02 c0    	mov    DWORD PTR ds:0xc00269a4,edx
c00100ad:	89 1c bd c0 69 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9640],ebx
c00100b4:	eb 08                	jmp    c00100be <LogicalDisk::assignDriveLetter()+0xae>
c00100b6:	45                   	inc    ebp
c00100b7:	40                   	inc    eax
c00100b8:	3c 5b                	cmp    al,0x5b
c00100ba:	75 90                	jne    c001004c <LogicalDisk::assignDriveLetter()+0x3c>
c00100bc:	31 c0                	xor    eax,eax
c00100be:	83 c4 14             	add    esp,0x14
c00100c1:	5b                   	pop    ebx
c00100c2:	5e                   	pop    esi
c00100c3:	5f                   	pop    edi
c00100c4:	5d                   	pop    ebp
c00100c5:	c3                   	ret    

c00100c6 <LogicalDisk::mount()>:
c00100c6:	56                   	push   esi
c00100c7:	53                   	push   ebx
c00100c8:	53                   	push   ebx
c00100c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100cd:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c00100d3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00100dd:	85 db                	test   ebx,ebx
c00100df:	74 27                	je     c0010108 <LogicalDisk::mount()+0x42>
c00100e1:	51                   	push   ecx
c00100e2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100eb:	83 e8 41             	sub    eax,0x41
c00100ee:	50                   	push   eax
c00100ef:	56                   	push   esi
c00100f0:	53                   	push   ebx
c00100f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100f4:	83 c4 10             	add    esp,0x10
c00100f7:	84 c0                	test   al,al
c00100f9:	74 08                	je     c0010103 <LogicalDisk::mount()+0x3d>
c00100fb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010101:	eb 07                	jmp    c001010a <LogicalDisk::mount()+0x44>
c0010103:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010106:	eb d5                	jmp    c00100dd <LogicalDisk::mount()+0x17>
c0010108:	31 c0                	xor    eax,eax
c001010a:	5a                   	pop    edx
c001010b:	5b                   	pop    ebx
c001010c:	5e                   	pop    esi
c001010d:	c3                   	ret    

c001010e <LogicalDisk::unmount()>:
c001010e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010112:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001011c:	c3                   	ret    
c001011d:	90                   	nop

c001011e <LogicalDisk::eject()>:
c001011e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010122:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010128:	8b 10                	mov    edx,DWORD PTR [eax]
c001012a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001012e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010131:	90                   	nop

c0010132 <LogicalDisk::unassignDriveLetter()>:
c0010132:	57                   	push   edi
c0010133:	56                   	push   esi
c0010134:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010138:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001013f:	84 c9                	test   cl,cl
c0010141:	75 0f                	jne    c0010152 <LogicalDisk::unassignDriveLetter()+0x20>
c0010143:	c7 44 24 0c 28 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023828
c001014b:	5e                   	pop    esi
c001014c:	5f                   	pop    edi
c001014d:	e9 db 41 00 00       	jmp    c001432d <Krnl::panic(char const*)>
c0010152:	83 e9 41             	sub    ecx,0x41
c0010155:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001015c:	b8 01 00 00 00       	mov    eax,0x1
c0010161:	c7 04 8d c0 69 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9640],0x0
c001016c:	d3 e0                	shl    eax,cl
c001016e:	89 c7                	mov    edi,eax
c0010170:	f7 d0                	not    eax
c0010172:	c1 ff 1f             	sar    edi,0x1f
c0010175:	21 05 a0 69 02 c0    	and    DWORD PTR ds:0xc00269a0,eax
c001017b:	89 fe                	mov    esi,edi
c001017d:	f7 d6                	not    esi
c001017f:	21 35 a4 69 02 c0    	and    DWORD PTR ds:0xc00269a4,esi
c0010185:	5e                   	pop    esi
c0010186:	5f                   	pop    edi
c0010187:	c3                   	ret    

c0010188 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010188:	57                   	push   edi
c0010189:	56                   	push   esi
c001018a:	53                   	push   ebx
c001018b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001018f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010193:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010197:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001019b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101a1:	77 41                	ja     c00101e4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00101a3:	99                   	cdq    
c00101a4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101aa:	01 c8                	add    eax,ecx
c00101ac:	11 da                	adc    edx,ebx
c00101ae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101b4:	19 d7                	sbb    edi,edx
c00101b6:	72 33                	jb     c00101eb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00101b8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101be:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101c8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101cc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101dc:	5b                   	pop    ebx
c00101dd:	5e                   	pop    esi
c00101de:	5f                   	pop    edi
c00101df:	e9 3c 0b 00 00       	jmp    c0010d20 <VCache::read(unsigned long long, int, void*)>
c00101e4:	b8 05 00 00 00       	mov    eax,0x5
c00101e9:	eb 05                	jmp    c00101f0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101eb:	b8 07 00 00 00       	mov    eax,0x7
c00101f0:	5b                   	pop    ebx
c00101f1:	5e                   	pop    esi
c00101f2:	5f                   	pop    edi
c00101f3:	c3                   	ret    

c00101f4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00101f4:	57                   	push   edi
c00101f5:	56                   	push   esi
c00101f6:	53                   	push   ebx
c00101f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010207:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001020d:	77 41                	ja     c0010250 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001020f:	99                   	cdq    
c0010210:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010216:	01 c8                	add    eax,ecx
c0010218:	11 da                	adc    edx,ebx
c001021a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010220:	19 d7                	sbb    edi,edx
c0010222:	72 33                	jb     c0010257 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010224:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001022a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010230:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010234:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010238:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001023e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010244:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010248:	5b                   	pop    ebx
c0010249:	5e                   	pop    esi
c001024a:	5f                   	pop    edi
c001024b:	e9 8c 09 00 00       	jmp    c0010bdc <VCache::write(unsigned long long, int, void*)>
c0010250:	b8 05 00 00 00       	mov    eax,0x5
c0010255:	eb 05                	jmp    c001025c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010257:	b8 07 00 00 00       	mov    eax,0x7
c001025c:	5b                   	pop    ebx
c001025d:	5e                   	pop    esi
c001025e:	5f                   	pop    edi
c001025f:	c3                   	ret    

c0010260 <Mouse::Mouse(char const*)>:
c0010260:	83 ec 0c             	sub    esp,0xc
c0010263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010267:	83 ec 08             	sub    esp,0x8
c001026a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001026e:	50                   	push   eax
c001026f:	e8 42 de ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0010274:	83 c4 10             	add    esp,0x10
c0010277:	ba 7c 38 02 c0       	mov    edx,0xc002387c
c001027c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010280:	89 10                	mov    DWORD PTR [eax],edx
c0010282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010286:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010290:	90                   	nop
c0010291:	83 c4 0c             	add    esp,0xc
c0010294:	c3                   	ret    
c0010295:	90                   	nop
c0010296:	66 90                	xchg   ax,ax

c0010298 <Mouse::~Mouse()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba 7c 38 02 c0       	mov    edx,0xc002387c
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 cd da ff ff       	call   c000dd80 <Device::~Device()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <Mouse::~Mouse()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <Mouse::~Mouse()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	68 58 01 00 00       	push   0x158
c00102d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102da:	e8 ab c6 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	83 c4 0c             	add    esp,0xc
c00102e5:	c3                   	ret    

c00102e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102e6:	55                   	push   ebp
c00102e7:	57                   	push   edi
c00102e8:	56                   	push   esi
c00102e9:	53                   	push   ebx
c00102ea:	81 ec 28 01 00 00    	sub    esp,0x128
c00102f0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102f7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00102fe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010305:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001030c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010310:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010314:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001031b:	e8 92 de ff ff       	call   c000e1b2 <Device::getName()>
c0010320:	5a                   	pop    edx
c0010321:	59                   	pop    ecx
c0010322:	50                   	push   eax
c0010323:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010327:	55                   	push   ebp
c0010328:	e8 13 04 ff ff       	call   c0000740 <strcpy>
c001032d:	5b                   	pop    ebx
c001032e:	58                   	pop    eax
c001032f:	68 a0 38 02 c0       	push   0xc00238a0
c0010334:	55                   	push   ebp
c0010335:	e8 46 05 ff ff       	call   c0000880 <strcat>
c001033a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010341:	e8 7d 96 ff ff       	call   c00099c3 <malloc>
c0010346:	83 c4 0c             	add    esp,0xc
c0010349:	89 c3                	mov    ebx,eax
c001034b:	57                   	push   edi
c001034c:	56                   	push   esi
c001034d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010355:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001035c:	55                   	push   ebp
c001035d:	50                   	push   eax
c001035e:	e8 f7 fb ff ff       	call   c000ff5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010363:	83 c4 14             	add    esp,0x14
c0010366:	53                   	push   ebx
c0010367:	e8 a4 fc ff ff       	call   c0010010 <LogicalDisk::assignDriveLetter()>
c001036c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001036f:	e8 52 fd ff ff       	call   c00100c6 <LogicalDisk::mount()>
c0010374:	58                   	pop    eax
c0010375:	5a                   	pop    edx
c0010376:	53                   	push   ebx
c0010377:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001037e:	e8 2f db ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010383:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010389:	5b                   	pop    ebx
c001038a:	5e                   	pop    esi
c001038b:	5f                   	pop    edi
c001038c:	5d                   	pop    ebp
c001038d:	c3                   	ret    

c001038e <createPartitionsForDisk(PhysicalDisk*)>:
c001038e:	55                   	push   ebp
c001038f:	57                   	push   edi
c0010390:	56                   	push   esi
c0010391:	53                   	push   ebx
c0010392:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010398:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001039f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00103a5:	3d 00 02 00 00       	cmp    eax,0x200
c00103aa:	74 27                	je     c00103d3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00103ac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00103b2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00103b8:	83 ec 10             	sub    esp,0x10
c00103bb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00103bf:	99                   	cdq    
c00103c0:	c1 e6 0a             	shl    esi,0xa
c00103c3:	52                   	push   edx
c00103c4:	89 fd                	mov    ebp,edi
c00103c6:	50                   	push   eax
c00103c7:	55                   	push   ebp
c00103c8:	56                   	push   esi
c00103c9:	e8 66 0b 01 00       	call   c0020f34 <__udivdi3>
c00103ce:	e9 b1 00 00 00       	jmp    c0010484 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103d8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00103dc:	56                   	push   esi
c00103dd:	6a 01                	push   0x1
c00103df:	6a 00                	push   0x0
c00103e1:	6a 00                	push   0x0
c00103e3:	53                   	push   ebx
c00103e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103e7:	83 c4 20             	add    esp,0x20
c00103ea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103f2:	75 0a                	jne    c00103fe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103f4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00103fc:	74 2c                	je     c001042a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00103fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010404:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001040a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010410:	83 ec 10             	sub    esp,0x10
c0010413:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010417:	89 f7                	mov    edi,esi
c0010419:	c1 e0 0a             	shl    eax,0xa
c001041c:	c1 ff 1f             	sar    edi,0x1f
c001041f:	57                   	push   edi
c0010420:	56                   	push   esi
c0010421:	52                   	push   edx
c0010422:	50                   	push   eax
c0010423:	e8 0c 0b 01 00       	call   c0020f34 <__udivdi3>
c0010428:	eb 5a                	jmp    c0010484 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001042a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010431:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010438:	83 e1 7f             	and    ecx,0x7f
c001043b:	83 e0 7f             	and    eax,0x7f
c001043e:	01 c1                	add    ecx,eax
c0010440:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010447:	83 e0 7f             	and    eax,0x7f
c001044a:	01 c1                	add    ecx,eax
c001044c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010453:	83 e0 7f             	and    eax,0x7f
c0010456:	00 c1                	add    cl,al
c0010458:	74 41                	je     c001049b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001045a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010460:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010466:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001046c:	83 ec 10             	sub    esp,0x10
c001046f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010473:	89 f7                	mov    edi,esi
c0010475:	c1 e0 0a             	shl    eax,0xa
c0010478:	c1 ff 1f             	sar    edi,0x1f
c001047b:	57                   	push   edi
c001047c:	56                   	push   esi
c001047d:	52                   	push   edx
c001047e:	50                   	push   eax
c001047f:	e8 b0 0a 01 00       	call   c0020f34 <__udivdi3>
c0010484:	83 c4 14             	add    esp,0x14
c0010487:	52                   	push   edx
c0010488:	50                   	push   eax
c0010489:	6a 00                	push   0x0
c001048b:	6a 00                	push   0x0
c001048d:	53                   	push   ebx
c001048e:	e8 53 fe ff ff       	call   c00102e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010493:	83 c4 20             	add    esp,0x20
c0010496:	e9 79 01 00 00       	jmp    c0010614 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001049b:	89 f0                	mov    eax,esi
c001049d:	31 f6                	xor    esi,esi
c001049f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00104a6:	75 02                	jne    c00104aa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00104a8:	89 f1                	mov    ecx,esi
c00104aa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00104b1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00104b8:	c1 e2 08             	shl    edx,0x8
c00104bb:	c1 e7 10             	shl    edi,0x10
c00104be:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00104c6:	09 fa                	or     edx,edi
c00104c8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00104d0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00104d7:	83 c0 10             	add    eax,0x10
c00104da:	09 fa                	or     edx,edi
c00104dc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00104e3:	c1 e7 18             	shl    edi,0x18
c00104e6:	09 fa                	or     edx,edi
c00104e8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104ef:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104f3:	c1 e7 10             	shl    edi,0x10
c00104f6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00104fd:	c1 e2 08             	shl    edx,0x8
c0010500:	09 fa                	or     edx,edi
c0010502:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010509:	09 fa                	or     edx,edi
c001050b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010512:	c1 e7 18             	shl    edi,0x18
c0010515:	09 fa                	or     edx,edi
c0010517:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001051b:	46                   	inc    esi
c001051c:	83 fe 04             	cmp    esi,0x4
c001051f:	0f 85 7a ff ff ff    	jne    c001049f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010529:	83 f0 01             	xor    eax,0x1
c001052c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010530:	75 57                	jne    c0010589 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010536:	83 f0 01             	xor    eax,0x1
c0010539:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001053d:	75 4a                	jne    c0010589 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001053f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010543:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001054b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010553:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010559:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001055f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010565:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010569:	89 f7                	mov    edi,esi
c001056b:	c1 e0 0a             	shl    eax,0xa
c001056e:	c1 ff 1f             	sar    edi,0x1f
c0010571:	57                   	push   edi
c0010572:	56                   	push   esi
c0010573:	52                   	push   edx
c0010574:	50                   	push   eax
c0010575:	e8 ba 09 01 00       	call   c0020f34 <__udivdi3>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010581:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010585:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010589:	84 c9                	test   cl,cl
c001058b:	74 53                	je     c00105e0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001058d:	0f b6 c9             	movzx  ecx,cl
c0010590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010594:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010598:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001059c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105a8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00105ac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00105b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00105b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105c0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00105c4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00105c8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00105cc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00105d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105d8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00105dc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00105e0:	31 ed                	xor    ebp,ebp
c00105e2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105e6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105ea:	89 f8                	mov    eax,edi
c00105ec:	09 f0                	or     eax,esi
c00105ee:	74 1e                	je     c001060e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105f0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105f4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00105f8:	89 d1                	mov    ecx,edx
c00105fa:	09 c1                	or     ecx,eax
c00105fc:	74 10                	je     c001060e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105fe:	83 ec 0c             	sub    esp,0xc
c0010601:	57                   	push   edi
c0010602:	56                   	push   esi
c0010603:	52                   	push   edx
c0010604:	50                   	push   eax
c0010605:	53                   	push   ebx
c0010606:	e8 db fc ff ff       	call   c00102e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001060b:	83 c4 20             	add    esp,0x20
c001060e:	45                   	inc    ebp
c001060f:	83 fd 04             	cmp    ebp,0x4
c0010612:	75 ce                	jne    c00105e2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010614:	81 c4 5c 02 00 00    	add    esp,0x25c
c001061a:	5b                   	pop    ebx
c001061b:	5e                   	pop    esi
c001061c:	5f                   	pop    edi
c001061d:	5d                   	pop    ebp
c001061e:	c3                   	ret    
c001061f:	90                   	nop

c0010620 <Serial::Serial(char const*)>:
c0010620:	83 ec 0c             	sub    esp,0xc
c0010623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010627:	83 ec 08             	sub    esp,0x8
c001062a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062e:	50                   	push   eax
c001062f:	e8 82 da ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0010634:	83 c4 10             	add    esp,0x10
c0010637:	ba b4 38 02 c0       	mov    edx,0xc00238b4
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	89 10                	mov    DWORD PTR [eax],edx
c0010642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010646:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010650:	90                   	nop
c0010651:	83 c4 0c             	add    esp,0xc
c0010654:	c3                   	ret    
c0010655:	90                   	nop
c0010656:	66 90                	xchg   ax,ax

c0010658 <Serial::~Serial()>:
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	ba b4 38 02 c0       	mov    edx,0xc00238b4
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	89 10                	mov    DWORD PTR [eax],edx
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	83 ec 0c             	sub    esp,0xc
c001066d:	50                   	push   eax
c001066e:	e8 0d d7 ff ff       	call   c000dd80 <Device::~Device()>
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	90                   	nop
c0010677:	83 c4 0c             	add    esp,0xc
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <Serial::~Serial()>:
c001067c:	83 ec 0c             	sub    esp,0xc
c001067f:	83 ec 0c             	sub    esp,0xc
c0010682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010686:	e8 cd ff ff ff       	call   c0010658 <Serial::~Serial()>
c001068b:	83 c4 10             	add    esp,0x10
c001068e:	83 ec 08             	sub    esp,0x8
c0010691:	68 58 01 00 00       	push   0x158
c0010696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069a:	e8 eb c2 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001069f:	83 c4 10             	add    esp,0x10
c00106a2:	83 c4 0c             	add    esp,0xc
c00106a5:	c3                   	ret    
c00106a6:	66 90                	xchg   ax,ax

c00106a8 <Timer::Timer(char const*)>:
c00106a8:	83 ec 0c             	sub    esp,0xc
c00106ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106af:	83 ec 08             	sub    esp,0x8
c00106b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b6:	50                   	push   eax
c00106b7:	e8 fa d9 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c00106c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c8:	89 10                	mov    DWORD PTR [eax],edx
c00106ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ce:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00106d8:	90                   	nop
c00106d9:	83 c4 0c             	add    esp,0xc
c00106dc:	c3                   	ret    
c00106dd:	90                   	nop
c00106de:	66 90                	xchg   ax,ax

c00106e0 <Timer::~Timer()>:
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c00106e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ec:	89 10                	mov    DWORD PTR [eax],edx
c00106ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f2:	83 ec 0c             	sub    esp,0xc
c00106f5:	50                   	push   eax
c00106f6:	e8 85 d6 ff ff       	call   c000dd80 <Device::~Device()>
c00106fb:	83 c4 10             	add    esp,0x10
c00106fe:	90                   	nop
c00106ff:	83 c4 0c             	add    esp,0xc
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <Timer::~Timer()>:
c0010704:	83 ec 0c             	sub    esp,0xc
c0010707:	83 ec 0c             	sub    esp,0xc
c001070a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070e:	e8 cd ff ff ff       	call   c00106e0 <Timer::~Timer()>
c0010713:	83 c4 10             	add    esp,0x10
c0010716:	83 ec 08             	sub    esp,0x8
c0010719:	68 5c 01 00 00       	push   0x15c
c001071e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010722:	e8 63 c2 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	83 c4 0c             	add    esp,0xc
c001072d:	c3                   	ret    

c001072e <Timer::read()>:
c001072e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010732:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010738:	c3                   	ret    

c0010739 <timerHandler(unsigned int)>:
c0010739:	56                   	push   esi
c001073a:	53                   	push   ebx
c001073b:	51                   	push   ecx
c001073c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010740:	01 05 2c 6a 02 c0    	add    DWORD PTR ds:0xc0026a2c,eax
c0010746:	80 3d cd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263cd,0x0
c001074d:	0f 84 49 01 00 00    	je     c001089c <timerHandler(unsigned int)+0x163>
c0010753:	fa                   	cli    
c0010754:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001075a:	83 ec 0c             	sub    esp,0xc
c001075d:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0010763:	68 d8 78 02 c0       	push   0xc00278d8
c0010768:	e8 97 0d 01 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001076d:	83 c4 10             	add    esp,0x10
c0010770:	84 c0                	test   al,al
c0010772:	0f 85 a0 00 00 00    	jne    c0010818 <timerHandler(unsigned int)+0xdf>
c0010778:	83 ec 0c             	sub    esp,0xc
c001077b:	68 d8 78 02 c0       	push   0xc00278d8
c0010780:	e8 9b 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010785:	83 c4 10             	add    esp,0x10
c0010788:	89 c6                	mov    esi,eax
c001078a:	66 90                	xchg   ax,ax
c001078c:	83 ec 0c             	sub    esp,0xc
c001078f:	68 d8 78 02 c0       	push   0xc00278d8
c0010794:	e8 87 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010799:	c7 04 24 d8 78 02 c0 	mov    DWORD PTR [esp],0xc00278d8
c00107a0:	89 c3                	mov    ebx,eax
c00107a2:	e8 81 0d 01 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00107a7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00107aa:	83 c4 10             	add    esp,0x10
c00107ad:	3b 05 2c 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026a2c
c00107b3:	77 23                	ja     c00107d8 <timerHandler(unsigned int)+0x9f>
c00107b5:	83 ec 0c             	sub    esp,0xc
c00107b8:	53                   	push   ebx
c00107b9:	e8 fe 7b 00 00       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c00107be:	83 c4 10             	add    esp,0x10
c00107c1:	39 de                	cmp    esi,ebx
c00107c3:	75 27                	jne    c00107ec <timerHandler(unsigned int)+0xb3>
c00107c5:	83 ec 0c             	sub    esp,0xc
c00107c8:	68 d8 78 02 c0       	push   0xc00278d8
c00107cd:	e8 4e 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107d2:	89 c6                	mov    esi,eax
c00107d4:	eb 12                	jmp    c00107e8 <timerHandler(unsigned int)+0xaf>
c00107d6:	66 90                	xchg   ax,ax
c00107d8:	52                   	push   edx
c00107d9:	52                   	push   edx
c00107da:	53                   	push   ebx
c00107db:	68 d8 78 02 c0       	push   0xc00278d8
c00107e0:	e8 fb 0d 01 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107e5:	8d 76 00             	lea    esi,[esi+0x0]
c00107e8:	83 c4 10             	add    esp,0x10
c00107eb:	90                   	nop
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	68 d8 78 02 c0       	push   0xc00278d8
c00107f4:	e8 0b 0d 01 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	84 c0                	test   al,al
c00107fe:	75 18                	jne    c0010818 <timerHandler(unsigned int)+0xdf>
c0010800:	83 ec 0c             	sub    esp,0xc
c0010803:	68 d8 78 02 c0       	push   0xc00278d8
c0010808:	e8 13 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001080d:	83 c4 10             	add    esp,0x10
c0010810:	39 f0                	cmp    eax,esi
c0010812:	0f 85 74 ff ff ff    	jne    c001078c <timerHandler(unsigned int)+0x53>
c0010818:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001081d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010821:	74 41                	je     c0010864 <timerHandler(unsigned int)+0x12b>
c0010823:	80 3d cc 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263cc,0x0
c001082a:	74 38                	je     c0010864 <timerHandler(unsigned int)+0x12b>
c001082c:	fa                   	cli    
c001082d:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0010833:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0010838:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001083e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010841:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010847:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001084a:	72 08                	jb     c0010854 <timerHandler(unsigned int)+0x11b>
c001084c:	e8 af 76 00 00       	call   c0017f00 <schedule()>
c0010851:	8d 76 00             	lea    esi,[esi+0x0]
c0010854:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0010859:	48                   	dec    eax
c001085a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001085f:	75 03                	jne    c0010864 <timerHandler(unsigned int)+0x12b>
c0010861:	fb                   	sti    
c0010862:	66 90                	xchg   ax,ax
c0010864:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0010869:	48                   	dec    eax
c001086a:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c001086f:	75 1b                	jne    c001088c <timerHandler(unsigned int)+0x153>
c0010871:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c0010878:	74 12                	je     c001088c <timerHandler(unsigned int)+0x153>
c001087a:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c0010884:	e8 77 76 00 00       	call   c0017f00 <schedule()>
c0010889:	8d 76 00             	lea    esi,[esi+0x0]
c001088c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0010891:	48                   	dec    eax
c0010892:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0010897:	75 03                	jne    c001089c <timerHandler(unsigned int)+0x163>
c0010899:	fb                   	sti    
c001089a:	66 90                	xchg   ax,ax
c001089c:	58                   	pop    eax
c001089d:	5b                   	pop    ebx
c001089e:	5e                   	pop    esi
c001089f:	c3                   	ret    

c00108a0 <setupTimer(int)>:
c00108a0:	57                   	push   edi
c00108a1:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00108a6:	56                   	push   esi
c00108a7:	53                   	push   ebx
c00108a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00108bb:	e8 f2 d8 ff ff       	call   c000e1b2 <Device::getName()>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108c6:	0f 85 94 00 00 00    	jne    c0010960 <setupTimer(int)+0xc0>
c00108cc:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00108d1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00108d8:	0f 84 82 00 00 00    	je     c0010960 <setupTimer(int)+0xc0>
c00108de:	83 ec 0c             	sub    esp,0xc
c00108e1:	68 5c 01 00 00       	push   0x15c
c00108e6:	e8 d8 90 ff ff       	call   c00099c3 <malloc>
c00108eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ee:	89 c3                	mov    ebx,eax
c00108f0:	e8 0f 02 01 00       	call   c0020b04 <PIT::PIT()>
c00108f5:	59                   	pop    ecx
c00108f6:	5f                   	pop    edi
c00108f7:	53                   	push   ebx
c00108f8:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c00108fe:	e8 af d5 ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010903:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010905:	6a 00                	push   0x0
c0010907:	6a 00                	push   0x0
c0010909:	56                   	push   esi
c001090a:	53                   	push   ebx
c001090b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001090e:	83 c4 14             	add    esp,0x14
c0010911:	68 60 01 00 00       	push   0x160
c0010916:	e8 a8 90 ff ff       	call   c00099c3 <malloc>
c001091b:	89 04 24             	mov    DWORD PTR [esp],eax
c001091e:	89 c7                	mov    edi,eax
c0010920:	e8 93 00 01 00       	call   c00209b8 <APICTimer::APICTimer()>
c0010925:	6a 00                	push   0x0
c0010927:	6a 00                	push   0x0
c0010929:	56                   	push   esi
c001092a:	57                   	push   edi
c001092b:	e8 88 ff 00 00       	call   c00208b8 <APICTimer::open(int, int, void*)>
c0010930:	83 c4 20             	add    esp,0x20
c0010933:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010935:	6a 00                	push   0x0
c0010937:	6a 00                	push   0x0
c0010939:	6a 00                	push   0x0
c001093b:	53                   	push   ebx
c001093c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001093f:	58                   	pop    eax
c0010940:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0010945:	5a                   	pop    edx
c0010946:	57                   	push   edi
c0010947:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001094d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010953:	e8 5a d5 ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010958:	83 c4 10             	add    esp,0x10
c001095b:	eb 37                	jmp    c0010994 <setupTimer(int)+0xf4>
c001095d:	8d 76 00             	lea    esi,[esi+0x0]
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	68 5c 01 00 00       	push   0x15c
c0010968:	e8 56 90 ff ff       	call   c00099c3 <malloc>
c001096d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010970:	89 c3                	mov    ebx,eax
c0010972:	e8 8d 01 01 00       	call   c0020b04 <PIT::PIT()>
c0010977:	58                   	pop    eax
c0010978:	5a                   	pop    edx
c0010979:	53                   	push   ebx
c001097a:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c0010980:	e8 2d d5 ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010985:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010987:	6a 00                	push   0x0
c0010989:	6a 00                	push   0x0
c001098b:	56                   	push   esi
c001098c:	53                   	push   ebx
c001098d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010990:	83 c4 20             	add    esp,0x20
c0010993:	90                   	nop
c0010994:	89 d8                	mov    eax,ebx
c0010996:	5b                   	pop    ebx
c0010997:	5e                   	pop    esi
c0010998:	5f                   	pop    edi
c0010999:	c3                   	ret    
c001099a:	66 90                	xchg   ax,ax

c001099c <VCache::VCache(PhysicalDisk*)>:
c001099c:	53                   	push   ebx
c001099d:	83 ec 18             	sub    esp,0x18
c00109a0:	ba 48 3a 02 c0       	mov    edx,0xc0023a48
c00109a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a9:	89 10                	mov    DWORD PTR [eax],edx
c00109ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109af:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00109b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109ba:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00109c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109c5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00109cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00109d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00109de:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00109f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109fc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010a03:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a16:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a26:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a2d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a35:	83 ec 0c             	sub    esp,0xc
c0010a38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a3c:	e8 82 8f ff ff       	call   c00099c3 <malloc>
c0010a41:	83 c4 10             	add    esp,0x10
c0010a44:	89 c3                	mov    ebx,eax
c0010a46:	83 ec 0c             	sub    esp,0xc
c0010a49:	53                   	push   ebx
c0010a4a:	e8 81 72 00 00       	call   c0017cd0 <Mutex::Mutex()>
c0010a4f:	83 c4 10             	add    esp,0x10
c0010a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a56:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a68:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a73:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a7d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a84:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a94:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a97:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010aa2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010aa6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010aac:	05 00 01 00 00       	add    eax,0x100
c0010ab1:	c1 e0 04             	shl    eax,0x4
c0010ab4:	83 ec 0c             	sub    esp,0xc
c0010ab7:	50                   	push   eax
c0010ab8:	e8 06 8f ff ff       	call   c00099c3 <malloc>
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	89 c2                	mov    edx,eax
c0010ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010acd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010adc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ae0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ae6:	c1 e0 06             	shl    eax,0x6
c0010ae9:	83 ec 0c             	sub    esp,0xc
c0010aec:	50                   	push   eax
c0010aed:	e8 d1 8e ff ff       	call   c00099c3 <malloc>
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	89 c2                	mov    edx,eax
c0010af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010afb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010afe:	90                   	nop
c0010aff:	83 c4 18             	add    esp,0x18
c0010b02:	5b                   	pop    ebx
c0010b03:	c3                   	ret    

c0010b04 <VCache::invalidateReadBuffer()>:
c0010b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b08:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b12:	c3                   	ret    
c0010b13:	90                   	nop

c0010b14 <VCache::writeWriteBuffer()>:
c0010b14:	53                   	push   ebx
c0010b15:	83 ec 0c             	sub    esp,0xc
c0010b18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b1c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b1f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b22:	68 20 39 02 c0       	push   0xc0023920
c0010b27:	e8 3f bf ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010b2c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b2f:	5a                   	pop    edx
c0010b30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b32:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b35:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b38:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b3b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b3e:	50                   	push   eax
c0010b3f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b42:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b49:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b50:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b54:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b5b:	83 c4 28             	add    esp,0x28
c0010b5e:	5b                   	pop    ebx
c0010b5f:	c3                   	ret    

c0010b60 <VCache::~VCache()>:
c0010b60:	83 ec 0c             	sub    esp,0xc
c0010b63:	ba 48 3a 02 c0       	mov    edx,0xc0023a48
c0010b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6c:	89 10                	mov    DWORD PTR [eax],edx
c0010b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b72:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b75:	84 c0                	test   al,al
c0010b77:	74 0f                	je     c0010b88 <VCache::~VCache()+0x28>
c0010b79:	83 ec 0c             	sub    esp,0xc
c0010b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b80:	e8 8f ff ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b8f:	83 ec 0c             	sub    esp,0xc
c0010b92:	50                   	push   eax
c0010b93:	e8 3b 8e ff ff       	call   c00099d3 <free>
c0010b98:	83 c4 10             	add    esp,0x10
c0010b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010ba2:	83 ec 0c             	sub    esp,0xc
c0010ba5:	50                   	push   eax
c0010ba6:	e8 28 8e ff ff       	call   c00099d3 <free>
c0010bab:	83 c4 10             	add    esp,0x10
c0010bae:	90                   	nop
c0010baf:	83 c4 0c             	add    esp,0xc
c0010bb2:	c3                   	ret    
c0010bb3:	90                   	nop

c0010bb4 <VCache::~VCache()>:
c0010bb4:	83 ec 0c             	sub    esp,0xc
c0010bb7:	83 ec 0c             	sub    esp,0xc
c0010bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbe:	e8 9d ff ff ff       	call   c0010b60 <VCache::~VCache()>
c0010bc3:	83 c4 10             	add    esp,0x10
c0010bc6:	83 ec 08             	sub    esp,0x8
c0010bc9:	6a 44                	push   0x44
c0010bcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bcf:	e8 b6 bd ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	83 c4 0c             	add    esp,0xc
c0010bda:	c3                   	ret    
c0010bdb:	90                   	nop

c0010bdc <VCache::write(unsigned long long, int, void*)>:
c0010bdc:	55                   	push   ebp
c0010bdd:	31 c0                	xor    eax,eax
c0010bdf:	57                   	push   edi
c0010be0:	56                   	push   esi
c0010be1:	53                   	push   ebx
c0010be2:	83 ec 0c             	sub    esp,0xc
c0010be5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010be9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010bed:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010bf1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010bfc:	7d 16                	jge    c0010c14 <VCache::write(unsigned long long, int, void*)+0x38>
c0010bfe:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010c01:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010c07:	0f af c8             	imul   ecx,eax
c0010c0a:	89 ca                	mov    edx,ecx
c0010c0c:	01 f2                	add    edx,esi
c0010c0e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010c10:	40                   	inc    eax
c0010c11:	eb e5                	jmp    c0010bf8 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010c13:	90                   	nop
c0010c14:	83 ec 0c             	sub    esp,0xc
c0010c17:	68 44 39 02 c0       	push   0xc0023944
c0010c1c:	e8 4a be ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010c21:	83 c4 10             	add    esp,0x10
c0010c24:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c28:	74 0e                	je     c0010c38 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c2a:	83 ec 0c             	sub    esp,0xc
c0010c2d:	53                   	push   ebx
c0010c2e:	e8 d1 fe ff ff       	call   c0010b04 <VCache::invalidateReadBuffer()>
c0010c33:	83 c4 10             	add    esp,0x10
c0010c36:	66 90                	xchg   ax,ax
c0010c38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c3c:	74 66                	je     c0010ca4 <VCache::write(unsigned long long, int, void*)+0xc8>
c0010c3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c41:	99                   	cdq    
c0010c42:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c45:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c48:	31 f8                	xor    eax,edi
c0010c4a:	89 d1                	mov    ecx,edx
c0010c4c:	89 ca                	mov    edx,ecx
c0010c4e:	31 ea                	xor    edx,ebp
c0010c50:	09 d0                	or     eax,edx
c0010c52:	75 44                	jne    c0010c98 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c54:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c59:	75 3d                	jne    c0010c98 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c5b:	83 ec 0c             	sub    esp,0xc
c0010c5e:	68 6b 39 02 c0       	push   0xc002396b
c0010c63:	e8 03 be ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010c68:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c6b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010c6e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c74:	0f af f9             	imul   edi,ecx
c0010c77:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c7c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c7f:	83 c4 10             	add    esp,0x10
c0010c82:	40                   	inc    eax
c0010c83:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c86:	83 f8 40             	cmp    eax,0x40
c0010c89:	75 7d                	jne    c0010d08 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010c8b:	83 ec 0c             	sub    esp,0xc
c0010c8e:	53                   	push   ebx
c0010c8f:	e8 80 fe ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010c94:	eb 42                	jmp    c0010cd8 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010c96:	66 90                	xchg   ax,ax
c0010c98:	83 ec 0c             	sub    esp,0xc
c0010c9b:	53                   	push   ebx
c0010c9c:	e8 73 fe ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010ca9:	7f 35                	jg     c0010ce0 <VCache::write(unsigned long long, int, void*)+0x104>
c0010cab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010caf:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010cb2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010cb5:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010cb8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010cbc:	52                   	push   edx
c0010cbd:	56                   	push   esi
c0010cbe:	6a 01                	push   0x1
c0010cc0:	68 81 39 02 c0       	push   0xc0023981
c0010cc5:	e8 a1 bd ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010cca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ccd:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010cd0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010cd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cd8:	83 c4 10             	add    esp,0x10
c0010cdb:	eb 2b                	jmp    c0010d08 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ce0:	50                   	push   eax
c0010ce1:	56                   	push   esi
c0010ce2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010ce6:	68 a2 39 02 c0       	push   0xc00239a2
c0010ceb:	e8 7b bd ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010cf0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cf5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cfc:	55                   	push   ebp
c0010cfd:	57                   	push   edi
c0010cfe:	50                   	push   eax
c0010cff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d02:	83 c4 20             	add    esp,0x20
c0010d05:	8d 76 00             	lea    esi,[esi+0x0]
c0010d08:	83 ec 0c             	sub    esp,0xc
c0010d0b:	68 bf 39 02 c0       	push   0xc00239bf
c0010d10:	e8 56 bd ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010d15:	83 c4 1c             	add    esp,0x1c
c0010d18:	31 c0                	xor    eax,eax
c0010d1a:	5b                   	pop    ebx
c0010d1b:	5e                   	pop    esi
c0010d1c:	5f                   	pop    edi
c0010d1d:	5d                   	pop    ebp
c0010d1e:	c3                   	ret    
c0010d1f:	90                   	nop

c0010d20 <VCache::read(unsigned long long, int, void*)>:
c0010d20:	55                   	push   ebp
c0010d21:	57                   	push   edi
c0010d22:	56                   	push   esi
c0010d23:	53                   	push   ebx
c0010d24:	83 ec 1c             	sub    esp,0x1c
c0010d27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d2b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d32:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d3a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010d3e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010d42:	31 c0                	xor    eax,eax
c0010d44:	39 f0                	cmp    eax,esi
c0010d46:	7d 18                	jge    c0010d60 <VCache::read(unsigned long long, int, void*)+0x40>
c0010d48:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010d4b:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010d51:	0f af f8             	imul   edi,eax
c0010d54:	89 fa                	mov    edx,edi
c0010d56:	01 ea                	add    edx,ebp
c0010d58:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010d5a:	40                   	inc    eax
c0010d5b:	eb e7                	jmp    c0010d44 <VCache::read(unsigned long long, int, void*)+0x24>
c0010d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d60:	83 ec 0c             	sub    esp,0xc
c0010d63:	68 df 39 02 c0       	push   0xc00239df
c0010d68:	e8 fe bc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010d6d:	83 c4 10             	add    esp,0x10
c0010d70:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010d74:	74 0e                	je     c0010d84 <VCache::read(unsigned long long, int, void*)+0x64>
c0010d76:	83 ec 0c             	sub    esp,0xc
c0010d79:	53                   	push   ebx
c0010d7a:	e8 95 fd ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010d7f:	83 c4 10             	add    esp,0x10
c0010d82:	66 90                	xchg   ax,ax
c0010d84:	83 fe 01             	cmp    esi,0x1
c0010d87:	75 7b                	jne    c0010e04 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d89:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d8c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d93:	75 6f                	jne    c0010e04 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d95:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010d98:	89 d1                	mov    ecx,edx
c0010d9a:	f7 d9                	neg    ecx
c0010d9c:	89 cf                	mov    edi,ecx
c0010d9e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010da2:	c1 ff 1f             	sar    edi,0x1f
c0010da5:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010da8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010dac:	89 ce                	mov    esi,ecx
c0010dae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010db2:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010db6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010dba:	89 cf                	mov    edi,ecx
c0010dbc:	74 0a                	je     c0010dc8 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010dbe:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010dc1:	75 05                	jne    c0010dc8 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010dc3:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010dc6:	74 1c                	je     c0010de4 <VCache::read(unsigned long long, int, void*)+0xc4>
c0010dc8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010dcc:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010dcf:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010dd2:	83 ec 0c             	sub    esp,0xc
c0010dd5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010dd7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010dda:	52                   	push   edx
c0010ddb:	57                   	push   edi
c0010ddc:	56                   	push   esi
c0010ddd:	50                   	push   eax
c0010dde:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010de1:	83 c4 20             	add    esp,0x20
c0010de4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010de7:	89 ef                	mov    edi,ebp
c0010de9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010def:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010df2:	8d 70 ff             	lea    esi,[eax-0x1]
c0010df5:	23 34 24             	and    esi,DWORD PTR [esp]
c0010df8:	0f af f1             	imul   esi,ecx
c0010dfb:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010dfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e00:	eb 32                	jmp    c0010e34 <VCache::read(unsigned long long, int, void*)+0x114>
c0010e02:	66 90                	xchg   ax,ax
c0010e04:	83 ec 0c             	sub    esp,0xc
c0010e07:	53                   	push   ebx
c0010e08:	e8 f7 fc ff ff       	call   c0010b04 <VCache::invalidateReadBuffer()>
c0010e0d:	83 c4 0c             	add    esp,0xc
c0010e10:	55                   	push   ebp
c0010e11:	56                   	push   esi
c0010e12:	68 05 3a 02 c0       	push   0xc0023a05
c0010e17:	e8 4f bc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010e1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e24:	56                   	push   esi
c0010e25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e2d:	50                   	push   eax
c0010e2e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010e31:	83 c4 20             	add    esp,0x20
c0010e34:	83 ec 0c             	sub    esp,0xc
c0010e37:	68 21 3a 02 c0       	push   0xc0023a21
c0010e3c:	e8 2a bc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0010e41:	83 c4 2c             	add    esp,0x2c
c0010e44:	31 c0                	xor    eax,eax
c0010e46:	5b                   	pop    ebx
c0010e47:	5e                   	pop    esi
c0010e48:	5f                   	pop    edi
c0010e49:	5d                   	pop    ebp
c0010e4a:	c3                   	ret    
c0010e4b:	90                   	nop

c0010e4c <Video::putrect(int, int, int, int, unsigned int)>:
c0010e4c:	55                   	push   ebp
c0010e4d:	57                   	push   edi
c0010e4e:	56                   	push   esi
c0010e4f:	53                   	push   ebx
c0010e50:	83 ec 1c             	sub    esp,0x1c
c0010e53:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010e5b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010e5f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010e63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e6b:	01 df                	add    edi,ebx
c0010e6d:	39 fb                	cmp    ebx,edi
c0010e6f:	7d 1f                	jge    c0010e90 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010e71:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010e75:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010e79:	7d 12                	jge    c0010e8d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010e7b:	8b 16                	mov    edx,DWORD PTR [esi]
c0010e7d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010e81:	53                   	push   ebx
c0010e82:	55                   	push   ebp
c0010e83:	45                   	inc    ebp
c0010e84:	56                   	push   esi
c0010e85:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	eb e8                	jmp    c0010e75 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010e8d:	43                   	inc    ebx
c0010e8e:	eb dd                	jmp    c0010e6d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e90:	83 c4 1c             	add    esp,0x1c
c0010e93:	5b                   	pop    ebx
c0010e94:	5e                   	pop    esi
c0010e95:	5f                   	pop    edi
c0010e96:	5d                   	pop    ebp
c0010e97:	c3                   	ret    

c0010e98 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010e98:	55                   	push   ebp
c0010e99:	57                   	push   edi
c0010e9a:	31 ff                	xor    edi,edi
c0010e9c:	56                   	push   esi
c0010e9d:	53                   	push   ebx
c0010e9e:	83 ec 1c             	sub    esp,0x1c
c0010ea1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010ea5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ea9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010eb0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010eb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eb9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010ebd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010ec1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010ec4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010ec8:	01 f9                	add    ecx,edi
c0010eca:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010ece:	7d 2f                	jge    c0010eff <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010ed0:	31 f6                	xor    esi,esi
c0010ed2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010ed6:	01 f2                	add    edx,esi
c0010ed8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010edc:	7d 1a                	jge    c0010ef8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010ede:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ee1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010ee4:	46                   	inc    esi
c0010ee5:	51                   	push   ecx
c0010ee6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010eea:	52                   	push   edx
c0010eeb:	55                   	push   ebp
c0010eec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ef6:	eb da                	jmp    c0010ed2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010ef8:	47                   	inc    edi
c0010ef9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010efd:	eb c5                	jmp    c0010ec4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010eff:	83 c4 1c             	add    esp,0x1c
c0010f02:	5b                   	pop    ebx
c0010f03:	5e                   	pop    esi
c0010f04:	5f                   	pop    edi
c0010f05:	5d                   	pop    ebp
c0010f06:	c3                   	ret    
c0010f07:	90                   	nop

c0010f08 <Video::blit(unsigned int*, int, int, int, int)>:
c0010f08:	55                   	push   ebp
c0010f09:	57                   	push   edi
c0010f0a:	56                   	push   esi
c0010f0b:	53                   	push   ebx
c0010f0c:	83 ec 1c             	sub    esp,0x1c
c0010f0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f17:	85 c0                	test   eax,eax
c0010f19:	79 02                	jns    c0010f1d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010f1b:	31 c0                	xor    eax,eax
c0010f1d:	c1 e0 02             	shl    eax,0x2
c0010f20:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010f2c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010f30:	39 d8                	cmp    eax,ebx
c0010f32:	7e 49                	jle    c0010f7d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f34:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f3a:	7c 41                	jl     c0010f7d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f3c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f40:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f44:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f48:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010f4c:	39 f9                	cmp    ecx,edi
c0010f4e:	7e 22                	jle    c0010f72 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010f50:	83 c5 04             	add    ebp,0x4
c0010f53:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f59:	7c 14                	jl     c0010f6f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010f5b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010f5d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010f60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f68:	56                   	push   esi
c0010f69:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	47                   	inc    edi
c0010f70:	eb d2                	jmp    c0010f44 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010f72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f76:	43                   	inc    ebx
c0010f77:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010f7b:	eb ab                	jmp    c0010f28 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010f7d:	83 c4 1c             	add    esp,0x1c
c0010f80:	5b                   	pop    ebx
c0010f81:	5e                   	pop    esi
c0010f82:	5f                   	pop    edi
c0010f83:	5d                   	pop    ebp
c0010f84:	c3                   	ret    
c0010f85:	90                   	nop

c0010f86 <Video::clearScreen(unsigned int)>:
c0010f86:	57                   	push   edi
c0010f87:	56                   	push   esi
c0010f88:	53                   	push   ebx
c0010f89:	31 db                	xor    ebx,ebx
c0010f8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f8f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f95:	7e 1f                	jle    c0010fb6 <Video::clearScreen(unsigned int)+0x30>
c0010f97:	31 ff                	xor    edi,edi
c0010f99:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f9f:	7e 12                	jle    c0010fb3 <Video::clearScreen(unsigned int)+0x2d>
c0010fa1:	8b 06                	mov    eax,DWORD PTR [esi]
c0010fa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010fa7:	53                   	push   ebx
c0010fa8:	57                   	push   edi
c0010fa9:	47                   	inc    edi
c0010faa:	56                   	push   esi
c0010fab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	eb e6                	jmp    c0010f99 <Video::clearScreen(unsigned int)+0x13>
c0010fb3:	43                   	inc    ebx
c0010fb4:	eb d9                	jmp    c0010f8f <Video::clearScreen(unsigned int)+0x9>
c0010fb6:	5b                   	pop    ebx
c0010fb7:	5e                   	pop    esi
c0010fb8:	5f                   	pop    edi
c0010fb9:	c3                   	ret    

c0010fba <Video::putpixel(int, int, unsigned int)>:
c0010fba:	c7 44 24 04 50 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a50
c0010fc2:	e9 66 33 00 00       	jmp    c001432d <Krnl::panic(char const*)>
c0010fc7:	90                   	nop

c0010fc8 <Video::Video(char const*)>:
c0010fc8:	83 ec 0c             	sub    esp,0xc
c0010fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fcf:	83 ec 08             	sub    esp,0x8
c0010fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd6:	50                   	push   eax
c0010fd7:	e8 da d0 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0010fdc:	83 c4 10             	add    esp,0x10
c0010fdf:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c0010fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe8:	89 10                	mov    DWORD PTR [eax],edx
c0010fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fee:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010ff8:	90                   	nop
c0010ff9:	83 c4 0c             	add    esp,0xc
c0010ffc:	c3                   	ret    
c0010ffd:	90                   	nop

c0010ffe <Video::~Video()>:
c0010ffe:	83 ec 0c             	sub    esp,0xc
c0011001:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c0011006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100a:	89 10                	mov    DWORD PTR [eax],edx
c001100c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011010:	83 ec 0c             	sub    esp,0xc
c0011013:	50                   	push   eax
c0011014:	e8 67 cd ff ff       	call   c000dd80 <Device::~Device()>
c0011019:	83 c4 10             	add    esp,0x10
c001101c:	90                   	nop
c001101d:	83 c4 0c             	add    esp,0xc
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <Video::~Video()>:
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	83 ec 0c             	sub    esp,0xc
c0011028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102c:	e8 cd ff ff ff       	call   c0010ffe <Video::~Video()>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	83 ec 08             	sub    esp,0x8
c0011037:	68 64 01 00 00       	push   0x164
c001103c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011040:	e8 45 b9 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 c4 0c             	add    esp,0xc
c001104b:	c3                   	ret    

c001104c <Video::isMonochrome()>:
c001104c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011050:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011056:	c3                   	ret    
c0011057:	90                   	nop

c0011058 <Video::getWidth()>:
c0011058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001105c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011062:	c3                   	ret    
c0011063:	90                   	nop

c0011064 <Video::getHeight()>:
c0011064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011068:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001106e:	c3                   	ret    
c001106f:	90                   	nop

c0011070 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011070:	55                   	push   ebp
c0011071:	57                   	push   edi
c0011072:	56                   	push   esi
c0011073:	53                   	push   ebx
c0011074:	83 ec 2c             	sub    esp,0x2c
c0011077:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001107b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001107f:	83 f8 01             	cmp    eax,0x1
c0011082:	19 c9                	sbb    ecx,ecx
c0011084:	31 db                	xor    ebx,ebx
c0011086:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001108a:	89 cd                	mov    ebp,ecx
c001108c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011094:	f7 d5                	not    ebp
c0011096:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001109c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00110a0:	01 d8                	add    eax,ebx
c00110a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110a6:	56                   	push   esi
c00110a7:	e8 b8 ff ff ff       	call   c0011064 <Video::getHeight()>
c00110ac:	59                   	pop    ecx
c00110ad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00110b1:	7e 70                	jle    c0011123 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00110b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110b7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00110bb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00110be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110c6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00110cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110d1:	89 f8                	mov    eax,edi
c00110d3:	83 c0 20             	add    eax,0x20
c00110d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110da:	56                   	push   esi
c00110db:	e8 78 ff ff ff       	call   c0011058 <Video::getWidth()>
c00110e0:	5a                   	pop    edx
c00110e1:	39 c7                	cmp    edi,eax
c00110e3:	7d 34                	jge    c0011119 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00110e5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00110ea:	74 05                	je     c00110f1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00110ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00110ee:	55                   	push   ebp
c00110ef:	eb 0d                	jmp    c00110fe <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00110f1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00110f6:	74 12                	je     c001110a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00110f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00110fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011102:	57                   	push   edi
c0011103:	56                   	push   esi
c0011104:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001110e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011112:	47                   	inc    edi
c0011113:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011117:	75 c1                	jne    c00110da <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011119:	43                   	inc    ebx
c001111a:	83 fb 20             	cmp    ebx,0x20
c001111d:	0f 85 79 ff ff ff    	jne    c001109c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011123:	83 c4 2c             	add    esp,0x2c
c0011126:	5b                   	pop    ebx
c0011127:	5e                   	pop    esi
c0011128:	5f                   	pop    edi
c0011129:	5d                   	pop    ebp
c001112a:	c3                   	ret    
c001112b:	90                   	nop

c001112c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001112c:	55                   	push   ebp
c001112d:	57                   	push   edi
c001112e:	56                   	push   esi
c001112f:	53                   	push   ebx
c0011130:	83 ec 28             	sub    esp,0x28
c0011133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011137:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001113b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001113f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011143:	c1 e6 08             	shl    esi,0x8
c0011146:	01 c6                	add    esi,eax
c0011148:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001114c:	c1 e0 08             	shl    eax,0x8
c001114f:	01 d0                	add    eax,edx
c0011151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011155:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011159:	0f af c6             	imul   eax,esi
c001115c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011163:	50                   	push   eax
c0011164:	e8 5a 88 ff ff       	call   c00099c3 <malloc>
c0011169:	83 c4 10             	add    esp,0x10
c001116c:	89 c7                	mov    edi,eax
c001116e:	85 c0                	test   eax,eax
c0011170:	75 10                	jne    c0011182 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011172:	83 ec 0c             	sub    esp,0xc
c0011175:	68 71 3a 02 c0       	push   0xc0023a71
c001117a:	e8 ae 31 00 00       	call   c001432d <Krnl::panic(char const*)>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011185:	ba 12 00 00 00       	mov    edx,0x12
c001118a:	84 c0                	test   al,al
c001118c:	74 11                	je     c001119f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001118e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011192:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011196:	c1 fa 03             	sar    edx,0x3
c0011199:	0f af d1             	imul   edx,ecx
c001119c:	83 c2 12             	add    edx,0x12
c001119f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00111a3:	74 04                	je     c00111a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00111a5:	85 f6                	test   esi,esi
c00111a7:	75 12                	jne    c00111bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00111a9:	83 ec 0c             	sub    esp,0xc
c00111ac:	68 81 3a 02 c0       	push   0xc0023a81
c00111b1:	e8 b5 b8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00111b6:	e9 b8 00 00 00       	jmp    c0011273 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00111bb:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00111bf:	80 f9 02             	cmp    cl,0x2
c00111c2:	0f 85 96 00 00 00    	jne    c001125e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00111c8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00111cd:	75 0e                	jne    c00111dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111cf:	84 c0                	test   al,al
c00111d1:	75 0a                	jne    c00111dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111d3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00111d6:	83 e8 18             	sub    eax,0x18
c00111d9:	a8 f7                	test   al,0xf7
c00111db:	74 0a                	je     c00111e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00111dd:	83 ec 0c             	sub    esp,0xc
c00111e0:	68 96 3a 02 c0       	push   0xc0023a96
c00111e5:	eb 7f                	jmp    c0011266 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00111e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00111f7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00111fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011203:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011207:	75 0c                	jne    c0011215 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011209:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001120e:	c1 e0 18             	shl    eax,0x18
c0011211:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011215:	45                   	inc    ebp
c0011216:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001121b:	c1 e1 10             	shl    ecx,0x10
c001121e:	89 c8                	mov    eax,ecx
c0011220:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011225:	c1 e1 08             	shl    ecx,0x8
c0011228:	09 c1                	or     ecx,eax
c001122a:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001122e:	09 c1                	or     ecx,eax
c0011230:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011234:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011238:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001123c:	c1 f8 03             	sar    eax,0x3
c001123f:	01 c2                	add    edx,eax
c0011241:	89 e8                	mov    eax,ebp
c0011243:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011247:	39 c6                	cmp    esi,eax
c0011249:	7f b0                	jg     c00111fb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001124b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001124f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011253:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011256:	7e 22                	jle    c001127a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011258:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001125c:	eb 99                	jmp    c00111f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001125e:	50                   	push   eax
c001125f:	50                   	push   eax
c0011260:	51                   	push   ecx
c0011261:	68 a4 3a 02 c0       	push   0xc0023aa4
c0011266:	e8 00 b8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001126b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001126e:	e8 60 87 ff ff       	call   c00099d3 <free>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	31 ff                	xor    edi,edi
c0011278:	eb 0f                	jmp    c0011289 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001127a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001127e:	89 30                	mov    DWORD PTR [eax],esi
c0011280:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011284:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011287:	89 30                	mov    DWORD PTR [eax],esi
c0011289:	83 c4 1c             	add    esp,0x1c
c001128c:	89 f8                	mov    eax,edi
c001128e:	5b                   	pop    ebx
c001128f:	5e                   	pop    esi
c0011290:	5f                   	pop    edi
c0011291:	5d                   	pop    ebp
c0011292:	c3                   	ret    
c0011293:	90                   	nop

c0011294 <Video::putTGA(int, int, unsigned char*, int)>:
c0011294:	55                   	push   ebp
c0011295:	57                   	push   edi
c0011296:	56                   	push   esi
c0011297:	53                   	push   ebx
c0011298:	83 ec 28             	sub    esp,0x28
c001129b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001129f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112a3:	50                   	push   eax
c00112a4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112a8:	50                   	push   eax
c00112a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112b1:	56                   	push   esi
c00112b2:	e8 75 fe ff ff       	call   c001112c <Video::tgaParse(unsigned char*, int, int*, int*)>
c00112b7:	83 c4 20             	add    esp,0x20
c00112ba:	85 c0                	test   eax,eax
c00112bc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00112c0:	74 35                	je     c00112f7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112c2:	89 c7                	mov    edi,eax
c00112c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00112c8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00112cc:	39 d8                	cmp    eax,ebx
c00112ce:	7e 27                	jle    c00112f7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112d0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00112d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112d8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00112dc:	39 e8                	cmp    eax,ebp
c00112de:	7e 14                	jle    c00112f4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00112e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00112e2:	83 c7 04             	add    edi,0x4
c00112e5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00112e8:	53                   	push   ebx
c00112e9:	55                   	push   ebp
c00112ea:	45                   	inc    ebp
c00112eb:	56                   	push   esi
c00112ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	eb e0                	jmp    c00112d4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00112f4:	43                   	inc    ebx
c00112f5:	eb cd                	jmp    c00112c4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00112f7:	83 c4 1c             	add    esp,0x1c
c00112fa:	5b                   	pop    ebx
c00112fb:	5e                   	pop    esi
c00112fc:	5f                   	pop    edi
c00112fd:	5d                   	pop    ebp
c00112fe:	c3                   	ret    
c00112ff:	90                   	nop

c0011300 <ACPI::close(int, int, void*)>:
c0011300:	83 ec 1c             	sub    esp,0x1c
c0011303:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001130b:	74 0b                	je     c0011318 <ACPI::close(int, int, void*)+0x18>
c001130d:	b8 00 00 00 00       	mov    eax,0x0
c0011312:	e9 99 00 00 00       	jmp    c00113b0 <ACPI::close(int, int, void*)+0xb0>
c0011317:	90                   	nop
c0011318:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001131d:	75 29                	jne    c0011348 <ACPI::close(int, int, void*)+0x48>
c001131f:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c0011324:	85 c0                	test   eax,eax
c0011326:	74 08                	je     c0011330 <ACPI::close(int, int, void*)+0x30>
c0011328:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c001132d:	ff d0                	call   eax
c001132f:	90                   	nop
c0011330:	83 ec 0c             	sub    esp,0xc
c0011333:	68 00 3b 02 c0       	push   0xc0023b00
c0011338:	e8 f0 2f 00 00       	call   c001432d <Krnl::panic(char const*)>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011345:	eb 69                	jmp    c00113b0 <ACPI::close(int, int, void*)+0xb0>
c0011347:	90                   	nop
c0011348:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001134d:	75 59                	jne    c00113a8 <ACPI::close(int, int, void*)+0xa8>
c001134f:	a1 44 6a 02 c0       	mov    eax,ds:0xc0026a44
c0011354:	85 c0                	test   eax,eax
c0011356:	74 08                	je     c0011360 <ACPI::close(int, int, void*)+0x60>
c0011358:	a1 44 6a 02 c0       	mov    eax,ds:0xc0026a44
c001135d:	ff d0                	call   eax
c001135f:	90                   	nop
c0011360:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011365:	8d 76 00             	lea    esi,[esi+0x0]
c0011368:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001136d:	83 e0 02             	and    eax,0x2
c0011370:	74 1e                	je     c0011390 <ACPI::close(int, int, void*)+0x90>
c0011372:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001137d:	89 c2                	mov    edx,eax
c001137f:	ec                   	in     al,dx
c0011380:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011384:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011388:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001138c:	eb da                	jmp    c0011368 <ACPI::close(int, int, void*)+0x68>
c001138e:	66 90                	xchg   ax,ax
c0011390:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011397:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001139c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00113a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113a4:	ee                   	out    dx,al
c00113a5:	8d 76 00             	lea    esi,[esi+0x0]
c00113a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113ad:	8d 76 00             	lea    esi,[esi+0x0]
c00113b0:	83 c4 1c             	add    esp,0x1c
c00113b3:	c3                   	ret    

c00113b4 <findRSDP()>:
c00113b4:	83 ec 1c             	sub    esp,0x1c
c00113b7:	83 ec 0c             	sub    esp,0xc
c00113ba:	68 db 3b 02 c0       	push   0xc0023bdb
c00113bf:	e8 59 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00113cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113d2:	83 e0 04             	and    eax,0x4
c00113d5:	84 c0                	test   al,al
c00113d7:	75 0b                	jne    c00113e4 <findRSDP()+0x30>
c00113d9:	b8 00 00 00 00       	mov    eax,0x0
c00113de:	e9 a1 00 00 00       	jmp    c0011484 <findRSDP()+0xd0>
c00113e3:	90                   	nop
c00113e4:	a1 14 64 02 c0       	mov    eax,ds:0xc0026414
c00113e9:	3d ff 07 00 00       	cmp    eax,0x7ff
c00113ee:	7f 1c                	jg     c001140c <findRSDP()+0x58>
c00113f0:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00113f5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00113fb:	83 e2 fb             	and    edx,0xfffffffb
c00113fe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011404:	b8 00 00 00 00       	mov    eax,0x0
c0011409:	eb 79                	jmp    c0011484 <findRSDP()+0xd0>
c001140b:	90                   	nop
c001140c:	83 ec 0c             	sub    esp,0xc
c001140f:	68 eb 3b 02 c0       	push   0xc0023beb
c0011414:	e8 04 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011419:	83 c4 10             	add    esp,0x10
c001141c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011424:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001142c:	77 3e                	ja     c001146c <findRSDP()+0xb8>
c001142e:	83 ec 04             	sub    esp,0x4
c0011431:	6a 08                	push   0x8
c0011433:	68 04 3c 02 c0       	push   0xc0023c04
c0011438:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001143c:	e8 3f f1 fe ff       	call   c0000580 <memcmp>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	85 c0                	test   eax,eax
c0011446:	0f 94 c0             	sete   al
c0011449:	84 c0                	test   al,al
c001144b:	74 17                	je     c0011464 <findRSDP()+0xb0>
c001144d:	83 ec 0c             	sub    esp,0xc
c0011450:	68 0d 3c 02 c0       	push   0xc0023c0d
c0011455:	e8 c3 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001145a:	83 c4 10             	add    esp,0x10
c001145d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011461:	eb 21                	jmp    c0011484 <findRSDP()+0xd0>
c0011463:	90                   	nop
c0011464:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011469:	eb b9                	jmp    c0011424 <findRSDP()+0x70>
c001146b:	90                   	nop
c001146c:	83 ec 0c             	sub    esp,0xc
c001146f:	68 1b 3c 02 c0       	push   0xc0023c1b
c0011474:	e8 a4 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	b8 00 00 00 00       	mov    eax,0x0
c0011481:	8d 76 00             	lea    esi,[esi+0x0]
c0011484:	83 c4 1c             	add    esp,0x1c
c0011487:	c3                   	ret    

c0011488 <loadACPITables(unsigned char*)>:
c0011488:	57                   	push   edi
c0011489:	56                   	push   esi
c001148a:	53                   	push   ebx
c001148b:	83 ec 60             	sub    esp,0x60
c001148e:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011493:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011499:	83 e0 04             	and    eax,0x4
c001149c:	84 c0                	test   al,al
c001149e:	0f 84 3c 02 00 00    	je     c00116e0 <loadACPITables(unsigned char*)+0x258>
c00114a4:	a0 60 6c 02 c0       	mov    al,ds:0xc0026c60
c00114a9:	84 c0                	test   al,al
c00114ab:	74 77                	je     c0011524 <loadACPITables(unsigned char*)+0x9c>
c00114ad:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114b1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00114b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00114b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bc:	83 e8 24             	sub    eax,0x24
c00114bf:	c1 e8 03             	shr    eax,0x3
c00114c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00114c6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00114ce:	66 90                	xchg   ax,ax
c00114d0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114d4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00114d8:	0f 8d b6 00 00 00    	jge    c0011594 <loadACPITables(unsigned char*)+0x10c>
c00114de:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114e2:	83 c0 24             	add    eax,0x24
c00114e5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00114e9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00114ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00114f1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114f5:	c1 e0 03             	shl    eax,0x3
c00114f8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00114fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011500:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011503:	8b 00                	mov    eax,DWORD PTR [eax]
c0011505:	89 c1                	mov    ecx,eax
c0011507:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c001150c:	8d 50 01             	lea    edx,[eax+0x1]
c001150f:	89 15 4c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a4c,edx
c0011515:	89 ca                	mov    edx,ecx
c0011517:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c001151e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011522:	eb ac                	jmp    c00114d0 <loadACPITables(unsigned char*)+0x48>
c0011524:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011528:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001152c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	83 e8 24             	sub    eax,0x24
c0011536:	c1 e8 02             	shr    eax,0x2
c0011539:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001153d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011545:	8d 76 00             	lea    esi,[esi+0x0]
c0011548:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001154c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011550:	7d 42                	jge    c0011594 <loadACPITables(unsigned char*)+0x10c>
c0011552:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011556:	83 c0 24             	add    eax,0x24
c0011559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001155d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011561:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011565:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011569:	c1 e0 02             	shl    eax,0x2
c001156c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011570:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011574:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011576:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c001157b:	8d 50 01             	lea    edx,[eax+0x1]
c001157e:	89 15 4c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a4c,edx
c0011584:	89 ca                	mov    edx,ecx
c0011586:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c001158d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011591:	eb b5                	jmp    c0011548 <loadACPITables(unsigned char*)+0xc0>
c0011593:	90                   	nop
c0011594:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001159c:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c00115a1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00115a5:	0f 8d 39 01 00 00    	jge    c00116e4 <loadACPITables(unsigned char*)+0x25c>
c00115ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00115af:	8b 04 c5 64 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd959c]
c00115b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115be:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00115c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c6:	25 ff 0f 00 00       	and    eax,0xfff
c00115cb:	89 c6                	mov    esi,eax
c00115cd:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c00115d3:	83 ec 0c             	sub    esp,0xc
c00115d6:	6a 01                	push   0x1
c00115d8:	e8 bc a0 ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c00115dd:	83 c4 10             	add    esp,0x10
c00115e0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00115ea:	83 ec 0c             	sub    esp,0xc
c00115ed:	6a 01                	push   0x1
c00115ef:	6a 01                	push   0x1
c00115f1:	50                   	push   eax
c00115f2:	52                   	push   edx
c00115f3:	53                   	push   ebx
c00115f4:	e8 3d aa ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00115f9:	83 c4 20             	add    esp,0x20
c00115fc:	09 f0                	or     eax,esi
c00115fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011602:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011606:	c1 e0 03             	shl    eax,0x3
c0011609:	05 60 6a 02 c0       	add    eax,0xc0026a60
c001160e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011612:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011616:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001161a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011622:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011626:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001162a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001162e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011632:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011636:	89 c6                	mov    esi,eax
c0011638:	89 d7                	mov    edi,edx
c001163a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001163c:	89 c8                	mov    eax,ecx
c001163e:	89 fa                	mov    edx,edi
c0011640:	89 f3                	mov    ebx,esi
c0011642:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011646:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001164a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001164e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011655:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011659:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001165d:	05 00 10 00 00       	add    eax,0x1000
c0011662:	c1 e8 0c             	shr    eax,0xc
c0011665:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001166d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011671:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011675:	25 ff 0f 00 00       	and    eax,0xfff
c001167a:	89 c6                	mov    esi,eax
c001167c:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011689:	e8 0b a0 ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c001168e:	83 c4 10             	add    esp,0x10
c0011691:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011695:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	6a 01                	push   0x1
c00116a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00116a4:	50                   	push   eax
c00116a5:	52                   	push   edx
c00116a6:	53                   	push   ebx
c00116a7:	e8 8a a9 ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00116ac:	83 c4 20             	add    esp,0x20
c00116af:	09 f0                	or     eax,esi
c00116b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00116b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b9:	83 ec 0c             	sub    esp,0xc
c00116bc:	50                   	push   eax
c00116bd:	e8 07 a3 ff ff       	call   c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>
c00116c2:	83 c4 10             	add    esp,0x10
c00116c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00116c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116cd:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c00116d4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00116d8:	e9 bf fe ff ff       	jmp    c001159c <loadACPITables(unsigned char*)+0x114>
c00116dd:	8d 76 00             	lea    esi,[esi+0x0]
c00116e0:	90                   	nop
c00116e1:	8d 76 00             	lea    esi,[esi+0x0]
c00116e4:	83 c4 60             	add    esp,0x60
c00116e7:	5b                   	pop    ebx
c00116e8:	5e                   	pop    esi
c00116e9:	5f                   	pop    edi
c00116ea:	c3                   	ret    
c00116eb:	90                   	nop

c00116ec <findRSDT(unsigned char*)>:
c00116ec:	57                   	push   edi
c00116ed:	56                   	push   esi
c00116ee:	53                   	push   ebx
c00116ef:	83 ec 50             	sub    esp,0x50
c00116f2:	83 ec 0c             	sub    esp,0xc
c00116f5:	68 2f 3c 02 c0       	push   0xc0023c2f
c00116fa:	e8 1e 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011707:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001170d:	83 e0 04             	and    eax,0x4
c0011710:	84 c0                	test   al,al
c0011712:	75 0c                	jne    c0011720 <findRSDT(unsigned char*)+0x34>
c0011714:	b8 00 00 00 00       	mov    eax,0x0
c0011719:	e9 86 01 00 00       	jmp    c00118a4 <findRSDT(unsigned char*)+0x1b8>
c001171e:	66 90                	xchg   ax,ax
c0011720:	83 ec 0c             	sub    esp,0xc
c0011723:	68 41 3c 02 c0       	push   0xc0023c41
c0011728:	e8 f0 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	89 e0                	mov    eax,esp
c0011732:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011736:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001173a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001173e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011746:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001174a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001174e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011752:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011756:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001175a:	89 c6                	mov    esi,eax
c001175c:	89 d7                	mov    edi,edx
c001175e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011760:	89 c8                	mov    eax,ecx
c0011762:	89 fa                	mov    edx,edi
c0011764:	89 f3                	mov    ebx,esi
c0011766:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001176a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001176e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011772:	83 ec 0c             	sub    esp,0xc
c0011775:	68 53 3c 02 c0       	push   0xc0023c53
c001177a:	e8 9e 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011786:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001178a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011792:	83 ec 0c             	sub    esp,0xc
c0011795:	68 65 3c 02 c0       	push   0xc0023c65
c001179a:	e8 7e 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117aa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00117ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00117b6:	83 ec 04             	sub    esp,0x4
c00117b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117c1:	68 24 3b 02 c0       	push   0xc0023b24
c00117c6:	e8 a0 b2 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00117cb:	83 c4 10             	add    esp,0x10
c00117ce:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00117d2:	25 ff 0f 00 00       	and    eax,0xfff
c00117d7:	89 c6                	mov    esi,eax
c00117d9:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c00117df:	83 ec 0c             	sub    esp,0xc
c00117e2:	6a 02                	push   0x2
c00117e4:	e8 b0 9e ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00117f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117f6:	83 ec 0c             	sub    esp,0xc
c00117f9:	6a 01                	push   0x1
c00117fb:	6a 02                	push   0x2
c00117fd:	50                   	push   eax
c00117fe:	52                   	push   edx
c00117ff:	53                   	push   ebx
c0011800:	e8 31 a8 ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011805:	83 c4 20             	add    esp,0x20
c0011808:	09 f0                	or     eax,esi
c001180a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001180e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011812:	25 ff 0f 00 00       	and    eax,0xfff
c0011817:	89 c6                	mov    esi,eax
c0011819:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c001181f:	83 ec 0c             	sub    esp,0xc
c0011822:	6a 02                	push   0x2
c0011824:	e8 70 9e ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011830:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011836:	83 ec 0c             	sub    esp,0xc
c0011839:	6a 01                	push   0x1
c001183b:	6a 02                	push   0x2
c001183d:	50                   	push   eax
c001183e:	52                   	push   edx
c001183f:	53                   	push   ebx
c0011840:	e8 f1 a7 ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011845:	83 c4 20             	add    esp,0x20
c0011848:	09 f0                	or     eax,esi
c001184a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001184e:	83 ec 04             	sub    esp,0x4
c0011851:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011855:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011859:	68 44 3b 02 c0       	push   0xc0023b44
c001185e:	e8 08 b2 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001186b:	75 13                	jne    c0011880 <findRSDT(unsigned char*)+0x194>
c001186d:	c6 05 60 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026c60,0x0
c0011874:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011878:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001187c:	eb 22                	jmp    c00118a0 <findRSDT(unsigned char*)+0x1b4>
c001187e:	66 90                	xchg   ax,ax
c0011880:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011885:	75 11                	jne    c0011898 <findRSDT(unsigned char*)+0x1ac>
c0011887:	c6 05 60 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026c60,0x1
c001188e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011892:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011896:	eb 08                	jmp    c00118a0 <findRSDT(unsigned char*)+0x1b4>
c0011898:	b8 00 00 00 00       	mov    eax,0x0
c001189d:	eb 05                	jmp    c00118a4 <findRSDT(unsigned char*)+0x1b8>
c001189f:	90                   	nop
c00118a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00118a4:	83 c4 50             	add    esp,0x50
c00118a7:	5b                   	pop    ebx
c00118a8:	5e                   	pop    esi
c00118a9:	5f                   	pop    edi
c00118aa:	c3                   	ret    
c00118ab:	90                   	nop

c00118ac <findDataTable(unsigned char*, char*)>:
c00118ac:	83 ec 1c             	sub    esp,0x1c
c00118af:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00118b4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118ba:	83 e0 04             	and    eax,0x4
c00118bd:	84 c0                	test   al,al
c00118bf:	75 07                	jne    c00118c8 <findDataTable(unsigned char*, char*)+0x1c>
c00118c1:	b8 00 00 00 00       	mov    eax,0x0
c00118c6:	eb 58                	jmp    c0011920 <findDataTable(unsigned char*, char*)+0x74>
c00118c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118d0:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c00118d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00118d9:	7d 3d                	jge    c0011918 <findDataTable(unsigned char*, char*)+0x6c>
c00118db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118df:	c1 e0 03             	shl    eax,0x3
c00118e2:	05 60 6a 02 c0       	add    eax,0xc0026a60
c00118e7:	83 ec 04             	sub    esp,0x4
c00118ea:	6a 04                	push   0x4
c00118ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f0:	50                   	push   eax
c00118f1:	e8 8a ec fe ff       	call   c0000580 <memcmp>
c00118f6:	83 c4 10             	add    esp,0x10
c00118f9:	85 c0                	test   eax,eax
c00118fb:	0f 94 c0             	sete   al
c00118fe:	84 c0                	test   al,al
c0011900:	74 0e                	je     c0011910 <findDataTable(unsigned char*, char*)+0x64>
c0011902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011906:	8b 04 c5 64 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd959c]
c001190d:	eb 11                	jmp    c0011920 <findDataTable(unsigned char*, char*)+0x74>
c001190f:	90                   	nop
c0011910:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011914:	eb ba                	jmp    c00118d0 <findDataTable(unsigned char*, char*)+0x24>
c0011916:	66 90                	xchg   ax,ax
c0011918:	b8 00 00 00 00       	mov    eax,0x0
c001191d:	8d 76 00             	lea    esi,[esi+0x0]
c0011920:	83 c4 1c             	add    esp,0x1c
c0011923:	c3                   	ret    

c0011924 <scanMADT()>:
c0011924:	53                   	push   ebx
c0011925:	83 ec 38             	sub    esp,0x38
c0011928:	83 ec 0c             	sub    esp,0xc
c001192b:	68 77 3c 02 c0       	push   0xc0023c77
c0011930:	e8 e8 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	a1 e0 63 02 c0       	mov    eax,ds:0xc00263e0
c001193d:	25 00 04 00 00       	and    eax,0x400
c0011942:	74 14                	je     c0011958 <scanMADT()+0x34>
c0011944:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011949:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001194f:	83 e2 fb             	and    edx,0xfffffffb
c0011952:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011958:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001195d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011963:	83 e0 04             	and    eax,0x4
c0011966:	84 c0                	test   al,al
c0011968:	0f 84 82 04 00 00    	je     c0011df0 <scanMADT()+0x4cc>
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	68 84 3c 02 c0       	push   0xc0023c84
c0011976:	e8 a2 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	e8 31 fa ff ff       	call   c00113b4 <findRSDP()>
c0011983:	a3 6c 6c 02 c0       	mov    ds:0xc0026c6c,eax
c0011988:	a1 6c 6c 02 c0       	mov    eax,ds:0xc0026c6c
c001198d:	85 c0                	test   eax,eax
c001198f:	75 1b                	jne    c00119ac <scanMADT()+0x88>
c0011991:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011996:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001199c:	83 e2 fb             	and    edx,0xfffffffb
c001199f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119a5:	e9 4e 04 00 00       	jmp    c0011df8 <scanMADT()+0x4d4>
c00119aa:	66 90                	xchg   ax,ax
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	68 96 3c 02 c0       	push   0xc0023c96
c00119b4:	e8 64 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	a1 6c 6c 02 c0       	mov    eax,ds:0xc0026c6c
c00119c1:	83 ec 0c             	sub    esp,0xc
c00119c4:	50                   	push   eax
c00119c5:	e8 22 fd ff ff       	call   c00116ec <findRSDT(unsigned char*)>
c00119ca:	83 c4 10             	add    esp,0x10
c00119cd:	a3 68 6c 02 c0       	mov    ds:0xc0026c68,eax
c00119d2:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c00119d7:	85 c0                	test   eax,eax
c00119d9:	75 19                	jne    c00119f4 <scanMADT()+0xd0>
c00119db:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00119e0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119e6:	83 e2 fb             	and    edx,0xfffffffb
c00119e9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119ef:	e9 04 04 00 00       	jmp    c0011df8 <scanMADT()+0x4d4>
c00119f4:	83 ec 0c             	sub    esp,0xc
c00119f7:	68 a6 3c 02 c0       	push   0xc0023ca6
c00119fc:	e8 1c 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0011a09:	83 ec 0c             	sub    esp,0xc
c0011a0c:	50                   	push   eax
c0011a0d:	e8 76 fa ff ff       	call   c0011488 <loadACPITables(unsigned char*)>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	68 be 3c 02 c0       	push   0xc0023cbe
c0011a22:	50                   	push   eax
c0011a23:	e8 84 fe ff ff       	call   c00118ac <findDataTable(unsigned char*, char*)>
c0011a28:	83 c4 10             	add    esp,0x10
c0011a2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a2f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011a34:	75 1a                	jne    c0011a50 <scanMADT()+0x12c>
c0011a36:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011a3b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a41:	83 e2 fe             	and    edx,0xfffffffe
c0011a44:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a4a:	e9 a9 03 00 00       	jmp    c0011df8 <scanMADT()+0x4d4>
c0011a4f:	90                   	nop
c0011a50:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a5f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011a63:	0f 87 8f 03 00 00    	ja     c0011df8 <scanMADT()+0x4d4>
c0011a69:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011a71:	0f 87 81 03 00 00    	ja     c0011df8 <scanMADT()+0x4d4>
c0011a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a83:	8d 50 01             	lea    edx,[eax+0x1]
c0011a86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a8e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a92:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a9a:	8d 50 01             	lea    edx,[eax+0x1]
c0011a9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aa1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011aa5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011aa9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011aad:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011ab2:	0f 86 3c 03 00 00    	jbe    c0011df4 <scanMADT()+0x4d0>
c0011ab8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011abd:	75 59                	jne    c0011b18 <scanMADT()+0x1f4>
c0011abf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ac3:	8d 50 01             	lea    edx,[eax+0x1]
c0011ac6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aca:	8a 15 60 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e60
c0011ad0:	0f b6 d2             	movzx  edx,dl
c0011ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ad7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011adb:	88 82 a0 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9160],al
c0011ae1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ae5:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aec:	8a 15 60 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e60
c0011af2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011af5:	88 0d 60 6e 02 c0    	mov    BYTE PTR ds:0xc0026e60,cl
c0011afb:	0f b6 d2             	movzx  edx,dl
c0011afe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b02:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b06:	88 82 80 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9180],al
c0011b0c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b11:	e9 c6 02 00 00       	jmp    c0011ddc <scanMADT()+0x4b8>
c0011b16:	66 90                	xchg   ax,ax
c0011b18:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011b1d:	0f 85 15 01 00 00    	jne    c0011c38 <scanMADT()+0x314>
c0011b23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b27:	8d 50 01             	lea    edx,[eax+0x1]
c0011b2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b2e:	8a 15 20 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d20
c0011b34:	0f b6 d2             	movzx  edx,dl
c0011b37:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b3b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b3f:	88 82 40 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd92c0],al
c0011b45:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011b49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b51:	01 d0                	add    eax,edx
c0011b53:	83 c0 2c             	add    eax,0x2c
c0011b56:	8a 00                	mov    al,BYTE PTR [eax]
c0011b58:	0f b6 d0             	movzx  edx,al
c0011b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b5f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b66:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b6a:	0f b6 c0             	movzx  eax,al
c0011b6d:	c1 e0 08             	shl    eax,0x8
c0011b70:	89 d1                	mov    ecx,edx
c0011b72:	09 c1                	or     ecx,eax
c0011b74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b78:	8d 50 02             	lea    edx,[eax+0x2]
c0011b7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b7f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b83:	0f b6 c0             	movzx  eax,al
c0011b86:	c1 e0 10             	shl    eax,0x10
c0011b89:	09 c1                	or     ecx,eax
c0011b8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b8f:	8d 50 03             	lea    edx,[eax+0x3]
c0011b92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b96:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b9a:	0f b6 c0             	movzx  eax,al
c0011b9d:	c1 e0 18             	shl    eax,0x18
c0011ba0:	09 c1                	or     ecx,eax
c0011ba2:	89 ca                	mov    edx,ecx
c0011ba4:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011ba9:	0f b6 c0             	movzx  eax,al
c0011bac:	89 14 85 60 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd92a0],edx
c0011bb3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011bb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc0:	01 d0                	add    eax,edx
c0011bc2:	83 c0 2c             	add    eax,0x2c
c0011bc5:	8a 00                	mov    al,BYTE PTR [eax]
c0011bc7:	0f b6 d0             	movzx  edx,al
c0011bca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bce:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bd5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bd9:	0f b6 c0             	movzx  eax,al
c0011bdc:	c1 e0 08             	shl    eax,0x8
c0011bdf:	89 d1                	mov    ecx,edx
c0011be1:	09 c1                	or     ecx,eax
c0011be3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011be7:	8d 50 02             	lea    edx,[eax+0x2]
c0011bea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bf2:	0f b6 c0             	movzx  eax,al
c0011bf5:	c1 e0 10             	shl    eax,0x10
c0011bf8:	09 c1                	or     ecx,eax
c0011bfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bfe:	8d 50 03             	lea    edx,[eax+0x3]
c0011c01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c05:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c09:	0f b6 c0             	movzx  eax,al
c0011c0c:	c1 e0 18             	shl    eax,0x18
c0011c0f:	09 c1                	or     ecx,eax
c0011c11:	89 ca                	mov    edx,ecx
c0011c13:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011c18:	0f b6 c0             	movzx  eax,al
c0011c1b:	89 14 85 e0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9220],edx
c0011c22:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c27:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011c2c:	40                   	inc    eax
c0011c2d:	a2 20 6d 02 c0       	mov    ds:0xc0026d20,al
c0011c32:	e9 a5 01 00 00       	jmp    c0011ddc <scanMADT()+0x4b8>
c0011c37:	90                   	nop
c0011c38:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011c3d:	0f 85 e9 00 00 00    	jne    c0011d2c <scanMADT()+0x408>
c0011c43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c47:	8d 50 01             	lea    edx,[eax+0x1]
c0011c4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c52:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c56:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011c5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c5e:	8d 50 01             	lea    edx,[eax+0x1]
c0011c61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c69:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c6d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011c71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c79:	01 d0                	add    eax,edx
c0011c7b:	83 c0 2c             	add    eax,0x2c
c0011c7e:	8a 00                	mov    al,BYTE PTR [eax]
c0011c80:	0f b6 d0             	movzx  edx,al
c0011c83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c87:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c8e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c92:	0f b6 c0             	movzx  eax,al
c0011c95:	c1 e0 08             	shl    eax,0x8
c0011c98:	89 d1                	mov    ecx,edx
c0011c9a:	09 c1                	or     ecx,eax
c0011c9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ca0:	8d 50 02             	lea    edx,[eax+0x2]
c0011ca3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ca7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cab:	0f b6 c0             	movzx  eax,al
c0011cae:	c1 e0 10             	shl    eax,0x10
c0011cb1:	09 c1                	or     ecx,eax
c0011cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb7:	8d 50 03             	lea    edx,[eax+0x3]
c0011cba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cbe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cc2:	0f b6 c0             	movzx  eax,al
c0011cc5:	c1 e0 18             	shl    eax,0x18
c0011cc8:	09 c8                	or     eax,ecx
c0011cca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011cd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cdb:	01 d0                	add    eax,edx
c0011cdd:	83 c0 2c             	add    eax,0x2c
c0011ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ce9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011cec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cf0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011cf4:	0f b6 d2             	movzx  edx,dl
c0011cf7:	c1 e2 08             	shl    edx,0x8
c0011cfa:	09 d0                	or     eax,edx
c0011cfc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011d01:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d06:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d0f:	88 90 c0 5a 02 c0    	mov    BYTE PTR [eax-0x3ffda540],dl
c0011d15:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011d1a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011d1f:	66 89 84 12 00 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9300],ax
c0011d27:	e9 b0 00 00 00       	jmp    c0011ddc <scanMADT()+0x4b8>
c0011d2c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011d31:	0f 85 99 00 00 00    	jne    c0011dd0 <scanMADT()+0x4ac>
c0011d37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d3b:	8d 50 01             	lea    edx,[eax+0x1]
c0011d3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d46:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d4a:	0f b6 c0             	movzx  eax,al
c0011d4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d59:	01 d0                	add    eax,edx
c0011d5b:	83 c0 2c             	add    eax,0x2c
c0011d5e:	8a 00                	mov    al,BYTE PTR [eax]
c0011d60:	0f b6 d0             	movzx  edx,al
c0011d63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d67:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d72:	0f b6 c0             	movzx  eax,al
c0011d75:	c1 e0 08             	shl    eax,0x8
c0011d78:	09 d0                	or     eax,edx
c0011d7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d7e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d87:	8d 50 01             	lea    edx,[eax+0x1]
c0011d8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d92:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d96:	0f b6 c0             	movzx  eax,al
c0011d99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011da1:	c1 e0 08             	shl    eax,0x8
c0011da4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011da8:	89 c1                	mov    ecx,eax
c0011daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dae:	c1 e0 18             	shl    eax,0x18
c0011db1:	89 c3                	mov    ebx,eax
c0011db3:	a1 70 6c 02 c0       	mov    eax,ds:0xc0026c70
c0011db8:	8d 50 01             	lea    edx,[eax+0x1]
c0011dbb:	89 15 70 6c 02 c0    	mov    DWORD PTR ds:0xc0026c70,edx
c0011dc1:	09 d9                	or     ecx,ebx
c0011dc3:	89 ca                	mov    edx,ecx
c0011dc5:	89 14 85 80 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9380],edx
c0011dcc:	eb 0e                	jmp    c0011ddc <scanMADT()+0x4b8>
c0011dce:	66 90                	xchg   ax,ax
c0011dd0:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011dd5:	75 05                	jne    c0011ddc <scanMADT()+0x4b8>
c0011dd7:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011ddc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011de1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011de5:	01 d0                	add    eax,edx
c0011de7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011deb:	e9 68 fc ff ff       	jmp    c0011a58 <scanMADT()+0x134>
c0011df0:	90                   	nop
c0011df1:	eb 05                	jmp    c0011df8 <scanMADT()+0x4d4>
c0011df3:	90                   	nop
c0011df4:	90                   	nop
c0011df5:	8d 76 00             	lea    esi,[esi+0x0]
c0011df8:	83 c4 38             	add    esp,0x38
c0011dfb:	5b                   	pop    ebx
c0011dfc:	c3                   	ret    
c0011dfd:	90                   	nop
c0011dfe:	66 90                	xchg   ax,ax

c0011e00 <ACPI::ACPI()>:
c0011e00:	83 ec 0c             	sub    esp,0xc
c0011e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e07:	83 ec 08             	sub    esp,0x8
c0011e0a:	68 c3 3c 02 c0       	push   0xc0023cc3
c0011e0f:	50                   	push   eax
c0011e10:	e8 a1 c2 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	ba 4c 3e 02 c0       	mov    edx,0xc0023e4c
c0011e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e21:	89 10                	mov    DWORD PTR [eax],edx
c0011e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e27:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e32:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e40:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	68 c8 3c 02 c0       	push   0xc0023cc8
c0011e52:	e8 c6 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	e8 c5 fa ff ff       	call   c0011924 <scanMADT()>
c0011e5f:	90                   	nop
c0011e60:	83 c4 0c             	add    esp,0xc
c0011e63:	c3                   	ret    

c0011e64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011e64:	83 ec 2c             	sub    esp,0x2c
c0011e67:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011e6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e6f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011e73:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011e77:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011e7c:	88 d0                	mov    al,dl
c0011e7e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011e82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011e87:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e8f:	90                   	nop
c0011e90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e94:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011e9a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011e9e:	0f 8d 9c 00 00 00    	jge    c0011f40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011ea4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ea8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eac:	83 c2 2a             	add    edx,0x2a
c0011eaf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011eb3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011eb8:	75 7a                	jne    c0011f34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011eba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ebe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ec2:	83 c2 2a             	add    edx,0x2a
c0011ec5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011ec9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011ecd:	75 65                	jne    c0011f34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011ecf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011ed4:	74 3a                	je     c0011f10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011ed6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ede:	83 c2 2a             	add    edx,0x2a
c0011ee1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011ee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011eec:	39 c2                	cmp    edx,eax
c0011eee:	74 10                	je     c0011f00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011ef0:	83 ec 0c             	sub    esp,0xc
c0011ef3:	68 64 3b 02 c0       	push   0xc0023b64
c0011ef8:	e8 30 24 00 00       	call   c001432d <Krnl::panic(char const*)>
c0011efd:	83 c4 10             	add    esp,0x10
c0011f00:	83 ec 0c             	sub    esp,0xc
c0011f03:	68 d6 3c 02 c0       	push   0xc0023cd6
c0011f08:	e8 20 24 00 00       	call   c001432d <Krnl::panic(char const*)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f1c:	83 c2 2a             	add    edx,0x2a
c0011f1f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011f23:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f25:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f28:	89 01                	mov    DWORD PTR [ecx],eax
c0011f2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011f2d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f32:	66 90                	xchg   ax,ax
c0011f34:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f38:	e9 53 ff ff ff       	jmp    c0011e90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011f40:	90                   	nop
c0011f41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f45:	83 c4 2c             	add    esp,0x2c
c0011f48:	c2 04 00             	ret    0x4
c0011f4b:	90                   	nop

c0011f4c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011f4c:	83 ec 1c             	sub    esp,0x1c
c0011f4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011f57:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f60:	88 c8                	mov    al,cl
c0011f62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011f66:	88 d0                	mov    al,dl
c0011f68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f70:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f7a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f7d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011f81:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f89:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f93:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f9a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fa3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fa9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011fad:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fb4:	83 c2 2a             	add    edx,0x2a
c0011fb7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fbf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fc9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011fcc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011fd0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fd8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fde:	8d 50 01             	lea    edx,[eax+0x1]
c0011fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fe5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fef:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011ff5:	3d 00 02 00 00       	cmp    eax,0x200
c0011ffa:	75 10                	jne    c001200c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011ffc:	83 ec 0c             	sub    esp,0xc
c0011fff:	68 e5 3c 02 c0       	push   0xc0023ce5
c0012004:	e8 24 23 00 00       	call   c001432d <Krnl::panic(char const*)>
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	90                   	nop
c001200d:	83 c4 1c             	add    esp,0x1c
c0012010:	c3                   	ret    
c0012011:	90                   	nop
c0012012:	66 90                	xchg   ax,ax

c0012014 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012014:	b8 00 00 00 00       	mov    eax,0x0
c0012019:	c3                   	ret    
c001201a:	66 90                	xchg   ax,ax

c001201c <ACPI::detectPCI()>:
c001201c:	53                   	push   ebx
c001201d:	83 ec 28             	sub    esp,0x28
c0012020:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012025:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001202a:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001202f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012035:	83 e0 04             	and    eax,0x4
c0012038:	84 c0                	test   al,al
c001203a:	74 2c                	je     c0012068 <ACPI::detectPCI()+0x4c>
c001203c:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0012041:	83 ec 08             	sub    esp,0x8
c0012044:	68 02 3d 02 c0       	push   0xc0023d02
c0012049:	50                   	push   eax
c001204a:	e8 5d f8 ff ff       	call   c00118ac <findDataTable(unsigned char*, char*)>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012056:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001205b:	74 0b                	je     c0012068 <ACPI::detectPCI()+0x4c>
c001205d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012062:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012067:	90                   	nop
c0012068:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0012070:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012074:	8a 00                	mov    al,BYTE PTR [eax]
c0012076:	3c 01                	cmp    al,0x1
c0012078:	75 0e                	jne    c0012088 <ACPI::detectPCI()+0x6c>
c001207a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001207f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012084:	eb 2a                	jmp    c00120b0 <ACPI::detectPCI()+0x94>
c0012086:	66 90                	xchg   ax,ax
c0012088:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001208c:	8a 00                	mov    al,BYTE PTR [eax]
c001208e:	3c 02                	cmp    al,0x2
c0012090:	75 1e                	jne    c00120b0 <ACPI::detectPCI()+0x94>
c0012092:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012097:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001209c:	74 12                	je     c00120b0 <ACPI::detectPCI()+0x94>
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	68 94 3b 02 c0       	push   0xc0023b94
c00120a6:	e8 82 22 00 00       	call   c001432d <Krnl::panic(char const*)>
c00120ab:	83 c4 10             	add    esp,0x10
c00120ae:	66 90                	xchg   ax,ax
c00120b0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00120b4:	83 f0 01             	xor    eax,0x1
c00120b7:	84 c0                	test   al,al
c00120b9:	74 41                	je     c00120fc <ACPI::detectPCI()+0xe0>
c00120bb:	e8 90 e0 fe ff       	call   c0000150 <manualPCIProbe>
c00120c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120c4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00120c9:	75 0d                	jne    c00120d8 <ACPI::detectPCI()+0xbc>
c00120cb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120d0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120d5:	eb 25                	jmp    c00120fc <ACPI::detectPCI()+0xe0>
c00120d7:	90                   	nop
c00120d8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00120dd:	75 1d                	jne    c00120fc <ACPI::detectPCI()+0xe0>
c00120df:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120e4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120e9:	74 11                	je     c00120fc <ACPI::detectPCI()+0xe0>
c00120eb:	83 ec 0c             	sub    esp,0xc
c00120ee:	68 94 3b 02 c0       	push   0xc0023b94
c00120f3:	e8 35 22 00 00       	call   c001432d <Krnl::panic(char const*)>
c00120f8:	83 c4 10             	add    esp,0x10
c00120fb:	90                   	nop
c00120fc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012101:	0f 84 85 00 00 00    	je     c001218c <ACPI::detectPCI()+0x170>
c0012107:	83 ec 0c             	sub    esp,0xc
c001210a:	68 07 3d 02 c0       	push   0xc0023d07
c001210f:	e8 09 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001211f:	83 ec 0c             	sub    esp,0xc
c0012122:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012126:	e8 98 78 ff ff       	call   c00099c3 <malloc>
c001212b:	83 c4 10             	add    esp,0x10
c001212e:	89 c3                	mov    ebx,eax
c0012130:	83 ec 0c             	sub    esp,0xc
c0012133:	53                   	push   ebx
c0012134:	e8 dd a9 00 00       	call   c001cb16 <PCI::PCI()>
c0012139:	83 c4 10             	add    esp,0x10
c001213c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012140:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012144:	83 ec 08             	sub    esp,0x8
c0012147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001214b:	50                   	push   eax
c001214c:	e8 61 bd ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0012151:	83 c4 10             	add    esp,0x10
c0012154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012158:	8b 00                	mov    eax,DWORD PTR [eax]
c001215a:	83 c0 08             	add    eax,0x8
c001215d:	8b 00                	mov    eax,DWORD PTR [eax]
c001215f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012164:	74 0a                	je     c0012170 <ACPI::detectPCI()+0x154>
c0012166:	ba 01 00 00 00       	mov    edx,0x1
c001216b:	eb 0b                	jmp    c0012178 <ACPI::detectPCI()+0x15c>
c001216d:	8d 76 00             	lea    esi,[esi+0x0]
c0012170:	ba 02 00 00 00       	mov    edx,0x2
c0012175:	8d 76 00             	lea    esi,[esi+0x0]
c0012178:	6a 00                	push   0x0
c001217a:	6a 00                	push   0x0
c001217c:	52                   	push   edx
c001217d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012181:	ff d0                	call   eax
c0012183:	83 c4 10             	add    esp,0x10
c0012186:	e9 a1 00 00 00       	jmp    c001222c <ACPI::detectPCI()+0x210>
c001218b:	90                   	nop
c001218c:	83 ec 0c             	sub    esp,0xc
c001218f:	68 1f 3d 02 c0       	push   0xc0023d1f
c0012194:	e8 d2 a8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0012199:	83 c4 10             	add    esp,0x10
c001219c:	83 ec 0c             	sub    esp,0xc
c001219f:	68 2a 3d 02 c0       	push   0xc0023d2a
c00121a4:	e8 74 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00121b3:	83 ec 0c             	sub    esp,0xc
c00121b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121ba:	e8 04 78 ff ff       	call   c00099c3 <malloc>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	89 c3                	mov    ebx,eax
c00121c4:	83 ec 0c             	sub    esp,0xc
c00121c7:	53                   	push   ebx
c00121c8:	e8 b3 b4 00 00       	call   c001d680 <IDE::IDE()>
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00121d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d8:	83 ec 08             	sub    esp,0x8
c00121db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121df:	50                   	push   eax
c00121e0:	e8 cd bc ff ff       	call   c000deb2 <Device::addChild(Device*)>
c00121e5:	83 c4 10             	add    esp,0x10
c00121e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121ec:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00121f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121fa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012203:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012207:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012214:	8b 00                	mov    eax,DWORD PTR [eax]
c0012216:	83 c0 08             	add    eax,0x8
c0012219:	8b 00                	mov    eax,DWORD PTR [eax]
c001221b:	6a 00                	push   0x0
c001221d:	6a 00                	push   0x0
c001221f:	6a 00                	push   0x0
c0012221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012225:	ff d0                	call   eax
c0012227:	83 c4 10             	add    esp,0x10
c001222a:	66 90                	xchg   ax,ax
c001222c:	90                   	nop
c001222d:	83 c4 28             	add    esp,0x28
c0012230:	5b                   	pop    ebx
c0012231:	c3                   	ret    
c0012232:	66 90                	xchg   ax,ax

c0012234 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012234:	83 ec 1c             	sub    esp,0x1c
c0012237:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001223b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001223e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012242:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0012247:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001224c:	83 ec 08             	sub    esp,0x8
c001224f:	52                   	push   edx
c0012250:	50                   	push   eax
c0012251:	e8 3e 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c0012256:	83 c4 10             	add    esp,0x10
c0012259:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001225d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0012262:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012267:	83 ec 04             	sub    esp,0x4
c001226a:	6a 01                	push   0x1
c001226c:	52                   	push   edx
c001226d:	50                   	push   eax
c001226e:	e8 fd 6e ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012273:	83 c4 10             	add    esp,0x10
c0012276:	90                   	nop
c0012277:	83 c4 1c             	add    esp,0x1c
c001227a:	c3                   	ret    
c001227b:	90                   	nop

c001227c <ACPI::sleep()>:
c001227c:	83 ec 0c             	sub    esp,0xc
c001227f:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c0012284:	85 c0                	test   eax,eax
c0012286:	74 08                	je     c0012290 <ACPI::sleep()+0x14>
c0012288:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c001228d:	ff d0                	call   eax
c001228f:	90                   	nop
c0012290:	90                   	nop
c0012291:	83 c4 0c             	add    esp,0xc
c0012294:	c3                   	ret    
c0012295:	90                   	nop
c0012296:	66 90                	xchg   ax,ax

c0012298 <ACPI::open(int, int, void*)>:
c0012298:	57                   	push   edi
c0012299:	56                   	push   esi
c001229a:	53                   	push   ebx
c001229b:	81 ec 70 01 00 00    	sub    esp,0x170
c00122a1:	83 ec 0c             	sub    esp,0xc
c00122a4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00122ab:	e8 6c fd ff ff       	call   c001201c <ACPI::detectPCI()>
c00122b0:	83 c4 10             	add    esp,0x10
c00122b3:	83 ec 0c             	sub    esp,0xc
c00122b6:	68 bc 3b 02 c0       	push   0xc0023bbc
c00122bb:	e8 5d 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	83 ec 0c             	sub    esp,0xc
c00122c6:	68 3f 3d 02 c0       	push   0xc0023d3f
c00122cb:	e8 d3 47 00 00       	call   c0016aa3 <Thr::loadKernelSymbolTable(char const*)>
c00122d0:	83 c4 10             	add    esp,0x10
c00122d3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00122db:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00122f0:	e8 ce 76 ff ff       	call   c00099c3 <malloc>
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	89 c3                	mov    ebx,eax
c00122fa:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00122ff:	83 ec 04             	sub    esp,0x4
c0012302:	50                   	push   eax
c0012303:	68 5d 3d 02 c0       	push   0xc0023d5d
c0012308:	53                   	push   ebx
c0012309:	e8 c8 ac ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001230e:	83 c4 10             	add    esp,0x10
c0012311:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012318:	83 ec 08             	sub    esp,0x8
c001231b:	6a 01                	push   0x1
c001231d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012324:	e8 11 ad ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012333:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001233b:	75 17                	jne    c0012354 <ACPI::open(int, int, void*)+0xbc>
c001233d:	83 ec 0c             	sub    esp,0xc
c0012340:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012347:	e8 4c ad ff ff       	call   c000d098 <File::close()>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	eb 0b                	jmp    c001235c <ACPI::open(int, int, void*)+0xc4>
c0012351:	8d 76 00             	lea    esi,[esi+0x0]
c0012354:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001235c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012364:	74 1e                	je     c0012384 <ACPI::open(int, int, void*)+0xec>
c0012366:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001236d:	8b 00                	mov    eax,DWORD PTR [eax]
c001236f:	83 c0 08             	add    eax,0x8
c0012372:	8b 00                	mov    eax,DWORD PTR [eax]
c0012374:	83 ec 0c             	sub    esp,0xc
c0012377:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001237e:	ff d0                	call   eax
c0012380:	83 c4 10             	add    esp,0x10
c0012383:	90                   	nop
c0012384:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001238b:	83 f0 01             	xor    eax,0x1
c001238e:	84 c0                	test   al,al
c0012390:	74 42                	je     c00123d4 <ACPI::open(int, int, void*)+0x13c>
c0012392:	83 ec 0c             	sub    esp,0xc
c0012395:	68 7b 3d 02 c0       	push   0xc0023d7b
c001239a:	e8 7e 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001239f:	83 c4 10             	add    esp,0x10
c00123a2:	83 ec 04             	sub    esp,0x4
c00123a5:	6a 0c                	push   0xc
c00123a7:	68 96 3d 02 c0       	push   0xc0023d96
c00123ac:	68 a7 3d 02 c0       	push   0xc0023da7
c00123b1:	e8 57 2d 00 00       	call   c001510d <Reg::readIntWithDefault(char*, char*, int)>
c00123b6:	83 c4 10             	add    esp,0x10
c00123b9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00123c0:	83 ec 0c             	sub    esp,0xc
c00123c3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00123ca:	e8 d4 94 ff ff       	call   c000b8a3 <Virt::setupPageSwapping(int)>
c00123cf:	83 c4 10             	add    esp,0x10
c00123d2:	66 90                	xchg   ax,ax
c00123d4:	83 ec 0c             	sub    esp,0xc
c00123d7:	68 26 25 02 c0       	push   0xc0022526
c00123dc:	e8 3c 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c00123ea:	83 ec 08             	sub    esp,0x8
c00123ed:	6a 01                	push   0x1
c00123ef:	68 ae 3d 02 c0       	push   0xc0023dae
c00123f4:	e8 21 51 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	83 ec 08             	sub    esp,0x8
c00123ff:	53                   	push   ebx
c0012400:	50                   	push   eax
c0012401:	e8 45 53 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012410:	83 ec 08             	sub    esp,0x8
c0012413:	6a 12                	push   0x12
c0012415:	50                   	push   eax
c0012416:	e8 1b be ff ff       	call   c000e236 <getDevicesOfType(DeviceType)>
c001241b:	83 c4 0c             	add    esp,0xc
c001241e:	66 90                	xchg   ax,ax
c0012420:	83 ec 0c             	sub    esp,0xc
c0012423:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001242a:	50                   	push   eax
c001242b:	e8 e0 f2 00 00       	call   c0021710 <LinkedList<Device>::isEmpty()>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	83 f0 01             	xor    eax,0x1
c0012436:	84 c0                	test   al,al
c0012438:	0f 84 46 01 00 00    	je     c0012584 <ACPI::open(int, int, void*)+0x2ec>
c001243e:	83 ec 0c             	sub    esp,0xc
c0012441:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012448:	50                   	push   eax
c0012449:	e8 de f2 00 00       	call   c002172c <LinkedList<Device>::getFirstElement()>
c001244e:	83 c4 10             	add    esp,0x10
c0012451:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012458:	83 ec 0c             	sub    esp,0xc
c001245b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012462:	50                   	push   eax
c0012463:	e8 cc f2 00 00       	call   c0021734 <LinkedList<Device>::removeFirst()>
c0012468:	83 c4 10             	add    esp,0x10
c001246b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012472:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012479:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012480:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012484:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001248a:	ba 09 00 00 00       	mov    edx,0x9
c001248f:	fc                   	cld    
c0012490:	89 c7                	mov    edi,eax
c0012492:	89 de                	mov    esi,ebx
c0012494:	89 d1                	mov    ecx,edx
c0012496:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012498:	83 ec 08             	sub    esp,0x8
c001249b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001249f:	50                   	push   eax
c00124a0:	83 ec 24             	sub    esp,0x24
c00124a3:	89 e0                	mov    eax,esp
c00124a5:	89 c3                	mov    ebx,eax
c00124a7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124ab:	ba 09 00 00 00       	mov    edx,0x9
c00124b0:	89 df                	mov    edi,ebx
c00124b2:	89 c6                	mov    esi,eax
c00124b4:	89 d1                	mov    ecx,edx
c00124b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00124b8:	e8 37 ab 00 00       	call   c001cff4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00124bd:	83 c4 30             	add    esp,0x30
c00124c0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00124c7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00124cf:	0f 84 4b ff ff ff    	je     c0012420 <ACPI::open(int, int, void*)+0x188>
c00124d5:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00124ea:	e8 d4 74 ff ff       	call   c00099c3 <malloc>
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	89 c3                	mov    ebx,eax
c00124f4:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00124f9:	83 ec 04             	sub    esp,0x4
c00124fc:	50                   	push   eax
c00124fd:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012504:	53                   	push   ebx
c0012505:	e8 cc aa ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001250a:	83 c4 10             	add    esp,0x10
c001250d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012514:	83 ec 0c             	sub    esp,0xc
c0012517:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001251e:	e8 85 ad ff ff       	call   c000d2a8 <File::exists()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	84 c0                	test   al,al
c0012528:	74 2a                	je     c0012554 <ACPI::open(int, int, void*)+0x2bc>
c001252a:	83 ec 08             	sub    esp,0x8
c001252d:	6a 01                	push   0x1
c001252f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012536:	e8 df 4f 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 ec 08             	sub    esp,0x8
c0012541:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012548:	50                   	push   eax
c0012549:	e8 fd 51 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c001254e:	83 c4 10             	add    esp,0x10
c0012551:	8d 76 00             	lea    esi,[esi+0x0]
c0012554:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001255c:	0f 84 be fe ff ff    	je     c0012420 <ACPI::open(int, int, void*)+0x188>
c0012562:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012569:	8b 00                	mov    eax,DWORD PTR [eax]
c001256b:	83 c0 08             	add    eax,0x8
c001256e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012570:	83 ec 0c             	sub    esp,0xc
c0012573:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001257a:	ff d0                	call   eax
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	e9 9c fe ff ff       	jmp    c0012420 <ACPI::open(int, int, void*)+0x188>
c0012584:	83 ec 0c             	sub    esp,0xc
c0012587:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001258e:	50                   	push   eax
c001258f:	e8 78 f1 00 00       	call   c002170c <LinkedList<Device>::~LinkedList()>
c0012594:	83 c4 10             	add    esp,0x10
c0012597:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c001259d:	83 ec 08             	sub    esp,0x8
c00125a0:	6a 01                	push   0x1
c00125a2:	68 c9 3d 02 c0       	push   0xc0023dc9
c00125a7:	e8 6e 4f 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c00125ac:	83 c4 10             	add    esp,0x10
c00125af:	83 ec 08             	sub    esp,0x8
c00125b2:	53                   	push   ebx
c00125b3:	50                   	push   eax
c00125b4:	e8 92 51 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c00125b9:	83 c4 10             	add    esp,0x10
c00125bc:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c00125c2:	83 ec 08             	sub    esp,0x8
c00125c5:	6a 01                	push   0x1
c00125c7:	68 e6 3d 02 c0       	push   0xc0023de6
c00125cc:	e8 49 4f 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c00125d1:	83 c4 10             	add    esp,0x10
c00125d4:	83 ec 08             	sub    esp,0x8
c00125d7:	53                   	push   ebx
c00125d8:	50                   	push   eax
c00125d9:	e8 6d 51 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c00125de:	83 c4 10             	add    esp,0x10
c00125e1:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00125e6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00125ec:	83 e0 04             	and    eax,0x4
c00125ef:	84 c0                	test   al,al
c00125f1:	0f 84 15 01 00 00    	je     c001270c <ACPI::open(int, int, void*)+0x474>
c00125f7:	83 ec 0c             	sub    esp,0xc
c00125fa:	68 03 3e 02 c0       	push   0xc0023e03
c00125ff:	e8 19 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012604:	83 c4 10             	add    esp,0x10
c0012607:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012612:	83 ec 0c             	sub    esp,0xc
c0012615:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001261c:	e8 a2 73 ff ff       	call   c00099c3 <malloc>
c0012621:	83 c4 10             	add    esp,0x10
c0012624:	89 c3                	mov    ebx,eax
c0012626:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001262b:	83 ec 04             	sub    esp,0x4
c001262e:	50                   	push   eax
c001262f:	68 20 3e 02 c0       	push   0xc0023e20
c0012634:	53                   	push   ebx
c0012635:	e8 9c a9 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012644:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001264c:	74 1a                	je     c0012668 <ACPI::open(int, int, void*)+0x3d0>
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012658:	e8 4b ac ff ff       	call   c000d2a8 <File::exists()>
c001265d:	83 c4 10             	add    esp,0x10
c0012660:	84 c0                	test   al,al
c0012662:	74 04                	je     c0012668 <ACPI::open(int, int, void*)+0x3d0>
c0012664:	b0 01                	mov    al,0x1
c0012666:	eb 04                	jmp    c001266c <ACPI::open(int, int, void*)+0x3d4>
c0012668:	b0 00                	mov    al,0x0
c001266a:	66 90                	xchg   ax,ax
c001266c:	84 c0                	test   al,al
c001266e:	74 28                	je     c0012698 <ACPI::open(int, int, void*)+0x400>
c0012670:	83 ec 08             	sub    esp,0x8
c0012673:	6a 01                	push   0x1
c0012675:	68 20 3e 02 c0       	push   0xc0023e20
c001267a:	e8 9b 4e 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c001267f:	83 c4 10             	add    esp,0x10
c0012682:	83 ec 08             	sub    esp,0x8
c0012685:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001268c:	50                   	push   eax
c001268d:	e8 b9 50 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	8d 76 00             	lea    esi,[esi+0x0]
c0012698:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126a0:	74 2a                	je     c00126cc <ACPI::open(int, int, void*)+0x434>
c00126a2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126aa:	74 20                	je     c00126cc <ACPI::open(int, int, void*)+0x434>
c00126ac:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00126b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b5:	83 c0 08             	add    eax,0x8
c00126b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00126ba:	83 ec 0c             	sub    esp,0xc
c00126bd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126c4:	ff d0                	call   eax
c00126c6:	83 c4 10             	add    esp,0x10
c00126c9:	8d 76 00             	lea    esi,[esi+0x0]
c00126cc:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c00126d1:	83 ec 08             	sub    esp,0x8
c00126d4:	68 3d 3e 02 c0       	push   0xc0023e3d
c00126d9:	50                   	push   eax
c00126da:	e8 cd f1 ff ff       	call   c00118ac <findDataTable(unsigned char*, char*)>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00126e9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00126f1:	74 19                	je     c001270c <ACPI::open(int, int, void*)+0x474>
c00126f3:	83 ec 08             	sub    esp,0x8
c00126f6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00126fd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012704:	e8 2b fb ff ff       	call   c0012234 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012709:	83 c4 10             	add    esp,0x10
c001270c:	b8 00 00 00 00       	mov    eax,0x0
c0012711:	81 c4 70 01 00 00    	add    esp,0x170
c0012717:	5b                   	pop    ebx
c0012718:	5e                   	pop    esi
c0012719:	5f                   	pop    edi
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <CPU::close(int, int, void*)>:
c001271c:	31 c0                	xor    eax,eax
c001271e:	c3                   	ret    
c001271f:	90                   	nop

c0012720 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012720:	55                   	push   ebp
c0012721:	57                   	push   edi
c0012722:	56                   	push   esi
c0012723:	53                   	push   ebx
c0012724:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012728:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001272c:	89 ce                	mov    esi,ecx
c001272e:	89 d5                	mov    ebp,edx
c0012730:	80 f9 04             	cmp    cl,0x4
c0012733:	75 28                	jne    c001275d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012735:	8d 42 f9             	lea    eax,[edx-0x7]
c0012738:	3c 03                	cmp    al,0x3
c001273a:	0f 86 63 01 00 00    	jbe    c00128a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012740:	80 fa 03             	cmp    dl,0x3
c0012743:	0f 84 5a 01 00 00    	je     c00128a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012749:	8d 7a f2             	lea    edi,[edx-0xe]
c001274c:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012751:	89 fb                	mov    ebx,edi
c0012753:	80 fb 01             	cmp    bl,0x1
c0012756:	77 4e                	ja     c00127a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012758:	e9 52 01 00 00       	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001275d:	80 f9 05             	cmp    cl,0x5
c0012760:	75 4d                	jne    c00127af <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012762:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012767:	80 fa 03             	cmp    dl,0x3
c001276a:	0f 86 3f 01 00 00    	jbe    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012770:	8d 7a fa             	lea    edi,[edx-0x6]
c0012773:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012778:	89 fb                	mov    ebx,edi
c001277a:	80 fb 01             	cmp    bl,0x1
c001277d:	0f 86 2c 01 00 00    	jbe    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012783:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012788:	80 fa 08             	cmp    dl,0x8
c001278b:	0f 84 1e 01 00 00    	je     c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012791:	89 d7                	mov    edi,edx
c0012793:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012798:	83 e7 fb             	and    edi,0xfffffffb
c001279b:	89 fb                	mov    ebx,edi
c001279d:	80 fb 09             	cmp    bl,0x9
c00127a0:	0f 84 09 01 00 00    	je     c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127a6:	31 c0                	xor    eax,eax
c00127a8:	89 eb                	mov    ebx,ebp
c00127aa:	0f b6 fb             	movzx  edi,bl
c00127ad:	eb 30                	jmp    c00127df <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00127af:	31 c0                	xor    eax,eax
c00127b1:	80 f9 06             	cmp    cl,0x6
c00127b4:	75 f2                	jne    c00127a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127b6:	80 fa 0a             	cmp    dl,0xa
c00127b9:	77 ed                	ja     c00127a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127bb:	bf de 05 00 00       	mov    edi,0x5de
c00127c0:	0f a3 d7             	bt     edi,edx
c00127c3:	73 e3                	jae    c00127a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127c5:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c00127ca:	e9 e0 00 00 00       	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127cf:	39 c7                	cmp    edi,eax
c00127d1:	0f 84 d3 00 00 00    	je     c00128aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00127d7:	40                   	inc    eax
c00127d8:	3d d0 00 00 00       	cmp    eax,0xd0
c00127dd:	74 09                	je     c00127e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00127df:	89 f3                	mov    ebx,esi
c00127e1:	80 fb 0f             	cmp    bl,0xf
c00127e4:	75 f1                	jne    c00127d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00127e6:	eb e7                	jmp    c00127cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00127e8:	80 f9 10             	cmp    cl,0x10
c00127eb:	75 14                	jne    c0012801 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00127ed:	8d 42 fc             	lea    eax,[edx-0x4]
c00127f0:	83 e0 fb             	and    eax,0xfffffffb
c00127f3:	3c 02                	cmp    al,0x2
c00127f5:	76 34                	jbe    c001282b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00127f7:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c00127fc:	80 fa 02             	cmp    dl,0x2
c00127ff:	eb 24                	jmp    c0012825 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012801:	80 f9 11             	cmp    cl,0x11
c0012804:	75 13                	jne    c0012819 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012806:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c001280b:	80 fa 03             	cmp    dl,0x3
c001280e:	0f 85 9b 00 00 00    	jne    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012814:	e9 91 00 00 00       	jmp    c00128aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012819:	80 f9 12             	cmp    cl,0x12
c001281c:	75 14                	jne    c0012832 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001281e:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012823:	fe ca                	dec    dl
c0012825:	0f 85 84 00 00 00    	jne    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001282b:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012830:	eb 7d                	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012832:	80 f9 14             	cmp    cl,0x14
c0012835:	75 12                	jne    c0012849 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012837:	4a                   	dec    edx
c0012838:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c001283d:	80 fa 01             	cmp    dl,0x1
c0012840:	77 6d                	ja     c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012842:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c0012847:	eb 66                	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012849:	80 f9 15             	cmp    cl,0x15
c001284c:	75 31                	jne    c001287f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001284e:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c0012853:	80 fa 01             	cmp    dl,0x1
c0012856:	74 57                	je     c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012858:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c001285d:	80 fa 13             	cmp    dl,0x13
c0012860:	76 0c                	jbe    c001286e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012862:	80 fa 30             	cmp    dl,0x30
c0012865:	75 48                	jne    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012867:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c001286c:	eb 41                	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001286e:	b9 04 00 09 00       	mov    ecx,0x90004
c0012873:	0f a3 d1             	bt     ecx,edx
c0012876:	73 37                	jae    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012878:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c001287d:	eb 30                	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001287f:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012884:	80 f9 16             	cmp    cl,0x16
c0012887:	75 26                	jne    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012889:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c001288e:	84 d2                	test   dl,dl
c0012890:	74 1d                	je     c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012892:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012897:	80 fa 30             	cmp    dl,0x30
c001289a:	75 13                	jne    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001289c:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c00128a1:	eb 0c                	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128a3:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c00128a8:	eb 05                	jmp    c00128af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128aa:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c00128af:	5b                   	pop    ebx
c00128b0:	5e                   	pop    esi
c00128b1:	5f                   	pop    edi
c00128b2:	5d                   	pop    ebp
c00128b3:	c3                   	ret    

c00128b4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00128b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128bc:	80 f9 04             	cmp    cl,0x4
c00128bf:	75 6b                	jne    c001292c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00128c1:	b8 e0 5a 02 c0       	mov    eax,0xc0025ae0
c00128c6:	80 fa 01             	cmp    dl,0x1
c00128c9:	0f 86 92 02 00 00    	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128cf:	b8 f0 5a 02 c0       	mov    eax,0xc0025af0
c00128d4:	80 fa 02             	cmp    dl,0x2
c00128d7:	0f 84 84 02 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128dd:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c00128e2:	80 fa 03             	cmp    dl,0x3
c00128e5:	0f 84 76 02 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128eb:	b8 10 5b 02 c0       	mov    eax,0xc0025b10
c00128f0:	80 fa 04             	cmp    dl,0x4
c00128f3:	0f 84 68 02 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128f9:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c00128fe:	80 fa 05             	cmp    dl,0x5
c0012901:	0f 84 5a 02 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012907:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c001290c:	80 fa 07             	cmp    dl,0x7
c001290f:	0f 84 4c 02 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012915:	83 ea 08             	sub    edx,0x8
c0012918:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c001291d:	80 fa 01             	cmp    dl,0x1
c0012920:	0f 87 3b 02 00 00    	ja     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012926:	b8 30 5b 02 c0       	mov    eax,0xc0025b30
c001292b:	c3                   	ret    
c001292c:	80 f9 05             	cmp    cl,0x5
c001292f:	75 45                	jne    c0012976 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012931:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012934:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c0012939:	80 f9 02             	cmp    cl,0x2
c001293c:	0f 86 1f 02 00 00    	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012942:	80 fa 04             	cmp    dl,0x4
c0012945:	0f 84 f3 01 00 00    	je     c0012b3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001294b:	80 fa 07             	cmp    dl,0x7
c001294e:	0f 84 0d 02 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012954:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c0012959:	80 fa 08             	cmp    dl,0x8
c001295c:	0f 84 ff 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012962:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012967:	80 fa 09             	cmp    dl,0x9
c001296a:	0f 85 f1 01 00 00    	jne    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012970:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c0012975:	c3                   	ret    
c0012976:	80 f9 06             	cmp    cl,0x6
c0012979:	0f 85 85 01 00 00    	jne    c0012b04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001297f:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c0012984:	80 fa 01             	cmp    dl,0x1
c0012987:	0f 84 d4 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001298d:	8d 42 fb             	lea    eax,[edx-0x5]
c0012990:	3c 01                	cmp    al,0x1
c0012992:	0f 86 ac 01 00 00    	jbe    c0012b44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012998:	80 fa 03             	cmp    dl,0x3
c001299b:	0f 84 a3 01 00 00    	je     c0012b44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00129a1:	8d 4a f9             	lea    ecx,[edx-0x7]
c00129a4:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c00129a9:	80 f9 01             	cmp    cl,0x1
c00129ac:	0f 86 af 01 00 00    	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129b2:	80 fa 09             	cmp    dl,0x9
c00129b5:	0f 84 8f 01 00 00    	je     c0012b4a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00129bb:	8d 4a f6             	lea    ecx,[edx-0xa]
c00129be:	80 f9 01             	cmp    cl,0x1
c00129c1:	0f 86 9a 01 00 00    	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129c7:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c00129cc:	80 fa 0d             	cmp    dl,0xd
c00129cf:	0f 84 8c 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129d5:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c00129da:	80 fa 0e             	cmp    dl,0xe
c00129dd:	0f 84 7e 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e3:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c00129e8:	80 fa 0f             	cmp    dl,0xf
c00129eb:	0f 84 70 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f1:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c00129f6:	80 fa 15             	cmp    dl,0x15
c00129f9:	0f 84 62 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ff:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012a02:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012a07:	80 f9 01             	cmp    cl,0x1
c0012a0a:	0f 86 51 01 00 00    	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a10:	80 fa 1a             	cmp    dl,0x1a
c0012a13:	0f 84 37 01 00 00    	je     c0012b50 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012a19:	80 fa 1c             	cmp    dl,0x1c
c0012a1c:	0f 84 34 01 00 00    	je     c0012b56 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012a22:	80 fa 1d             	cmp    dl,0x1d
c0012a25:	0f 84 36 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a2b:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012a30:	80 fa 25             	cmp    dl,0x25
c0012a33:	0f 84 28 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a39:	8d 4a da             	lea    ecx,[edx-0x26]
c0012a3c:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012a41:	80 f9 01             	cmp    cl,0x1
c0012a44:	0f 86 17 01 00 00    	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a4a:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012a4f:	80 fa 2a             	cmp    dl,0x2a
c0012a52:	0f 84 09 01 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a58:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012a5d:	80 fa 2c             	cmp    dl,0x2c
c0012a60:	0f 84 fb 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a66:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012a6b:	80 fa 2d             	cmp    dl,0x2d
c0012a6e:	0f 84 ed 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a74:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012a79:	80 fa 2e             	cmp    dl,0x2e
c0012a7c:	0f 84 df 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a82:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012a87:	80 fa 2f             	cmp    dl,0x2f
c0012a8a:	0f 84 d1 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a90:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a93:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012a98:	80 f9 01             	cmp    cl,0x1
c0012a9b:	0f 86 c0 00 00 00    	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa1:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012aa6:	80 fa 37             	cmp    dl,0x37
c0012aa9:	0f 84 b2 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aaf:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012ab4:	80 fa 3a             	cmp    dl,0x3a
c0012ab7:	0f 84 a4 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012abd:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012ac2:	80 fa 3c             	cmp    dl,0x3c
c0012ac5:	0f 84 96 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012acb:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012ad0:	80 fa 3d             	cmp    dl,0x3d
c0012ad3:	0f 84 88 00 00 00    	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ad9:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012ade:	80 fa 3e             	cmp    dl,0x3e
c0012ae1:	74 7e                	je     c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ae3:	8d 42 bb             	lea    eax,[edx-0x45]
c0012ae6:	3c 01                	cmp    al,0x1
c0012ae8:	76 72                	jbe    c0012b5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012aea:	80 fa 3f             	cmp    dl,0x3f
c0012aed:	74 6d                	je     c0012b5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012aef:	80 fa 4a             	cmp    dl,0x4a
c0012af2:	74 0a                	je     c0012afe <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012af4:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012af9:	80 fa 4d             	cmp    dl,0x4d
c0012afc:	75 63                	jne    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012afe:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012b03:	c3                   	ret    
c0012b04:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012b09:	80 f9 0b             	cmp    cl,0xb
c0012b0c:	75 0a                	jne    c0012b18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b0e:	fe ca                	dec    dl
c0012b10:	75 4f                	jne    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b12:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012b17:	c3                   	ret    
c0012b18:	80 f9 0f             	cmp    cl,0xf
c0012b1b:	75 44                	jne    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b1d:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012b22:	80 fa 02             	cmp    dl,0x2
c0012b25:	76 3a                	jbe    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b27:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b2a:	3c 01                	cmp    al,0x1
c0012b2c:	76 0a                	jbe    c0012b38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012b2e:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012b33:	80 fa 06             	cmp    dl,0x6
c0012b36:	75 29                	jne    c0012b61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b38:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012b3d:	c3                   	ret    
c0012b3e:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c0012b43:	c3                   	ret    
c0012b44:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c0012b49:	c3                   	ret    
c0012b4a:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012b4f:	c3                   	ret    
c0012b50:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012b55:	c3                   	ret    
c0012b56:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012b5b:	c3                   	ret    
c0012b5c:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012b61:	c3                   	ret    

c0012b62 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012b62:	60                   	pusha  
c0012b63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b6f:	9c                   	pushf  
c0012b70:	fa                   	cli    
c0012b71:	0f 09                	wbinvd 
c0012b73:	0f 30                	wrmsr  
c0012b75:	9d                   	popf   
c0012b76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b7a:	89 02                	mov    DWORD PTR [edx],eax
c0012b7c:	61                   	popa   
c0012b7d:	c3                   	ret    

c0012b7e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012b7e:	60                   	pusha  
c0012b7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b83:	9c                   	pushf  
c0012b84:	fa                   	cli    
c0012b85:	0f 09                	wbinvd 
c0012b87:	31 c0                	xor    eax,eax
c0012b89:	31 d2                	xor    edx,edx
c0012b8b:	0f 32                	rdmsr  
c0012b8d:	9d                   	popf   
c0012b8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b92:	89 02                	mov    DWORD PTR [edx],eax
c0012b94:	61                   	popa   
c0012b95:	c3                   	ret    

c0012b96 <CPU::AMD_K6_writeback(int, int, int)>:
c0012b96:	56                   	push   esi
c0012b97:	53                   	push   ebx
c0012b98:	83 ec 10             	sub    esp,0x10
c0012b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b9f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012ba4:	75 5d                	jne    c0012c03 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012ba6:	83 f8 08             	cmp    eax,0x8
c0012ba9:	75 09                	jne    c0012bb4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012bab:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012bb0:	7e 13                	jle    c0012bc5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012bb2:	eb 30                	jmp    c0012be4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bb4:	83 f8 06             	cmp    eax,0x6
c0012bb7:	7c 4a                	jl     c0012c03 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bb9:	83 f8 07             	cmp    eax,0x7
c0012bbc:	7e 07                	jle    c0012bc5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012bbe:	83 f8 09             	cmp    eax,0x9
c0012bc1:	74 21                	je     c0012be4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bc3:	eb 3e                	jmp    c0012c03 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bc5:	89 e6                	mov    esi,esp
c0012bc7:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c0012bcd:	56                   	push   esi
c0012bce:	c1 eb 15             	shr    ebx,0x15
c0012bd1:	68 82 00 00 c0       	push   0xc0000082
c0012bd6:	83 e3 7e             	and    ebx,0x7e
c0012bd9:	e8 a0 ff ff ff       	call   c0012b7e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bde:	56                   	push   esi
c0012bdf:	6a 00                	push   0x0
c0012be1:	53                   	push   ebx
c0012be2:	eb 12                	jmp    c0012bf6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012be4:	89 e3                	mov    ebx,esp
c0012be6:	53                   	push   ebx
c0012be7:	68 82 00 00 c0       	push   0xc0000082
c0012bec:	e8 8d ff ff ff       	call   c0012b7e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bf1:	53                   	push   ebx
c0012bf2:	6a 00                	push   0x0
c0012bf4:	6a 00                	push   0x0
c0012bf6:	68 82 00 00 c0       	push   0xc0000082
c0012bfb:	e8 62 ff ff ff       	call   c0012b62 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012c00:	83 c4 18             	add    esp,0x18
c0012c03:	83 c4 10             	add    esp,0x10
c0012c06:	5b                   	pop    ebx
c0012c07:	5e                   	pop    esi
c0012c08:	c3                   	ret    
c0012c09:	90                   	nop

c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c0a:	55                   	push   ebp
c0012c0b:	57                   	push   edi
c0012c0c:	56                   	push   esi
c0012c0d:	53                   	push   ebx
c0012c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c12:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012c16:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012c1a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012c1e:	39 05 80 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d80,eax
c0012c24:	75 23                	jne    c0012c49 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c26:	a1 cc 6e 02 c0       	mov    eax,ds:0xc0026ecc
c0012c2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c2f:	89 06                	mov    DWORD PTR [esi],eax
c0012c31:	a1 c8 6e 02 c0       	mov    eax,ds:0xc0026ec8
c0012c36:	89 07                	mov    DWORD PTR [edi],eax
c0012c38:	a1 c4 6e 02 c0       	mov    eax,ds:0xc0026ec4
c0012c3d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012c40:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0012c45:	89 02                	mov    DWORD PTR [edx],eax
c0012c47:	eb 3f                	jmp    c0012c88 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012c49:	31 c9                	xor    ecx,ecx
c0012c4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c4f:	0f a2                	cpuid  
c0012c51:	89 06                	mov    DWORD PTR [esi],eax
c0012c53:	89 1f                	mov    DWORD PTR [edi],ebx
c0012c55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c59:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012c5c:	89 10                	mov    DWORD PTR [eax],edx
c0012c5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c62:	a3 80 5d 02 c0       	mov    ds:0xc0025d80,eax
c0012c67:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c69:	a3 cc 6e 02 c0       	mov    ds:0xc0026ecc,eax
c0012c6e:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c70:	a3 c8 6e 02 c0       	mov    ds:0xc0026ec8,eax
c0012c75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c78:	a3 c4 6e 02 c0       	mov    ds:0xc0026ec4,eax
c0012c7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c83:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c0012c88:	5b                   	pop    ebx
c0012c89:	5e                   	pop    esi
c0012c8a:	5f                   	pop    edi
c0012c8b:	5d                   	pop    ebp
c0012c8c:	c3                   	ret    
c0012c8d:	90                   	nop

c0012c8e <CPU::cpuidCheckEDX(unsigned int)>:
c0012c8e:	83 ec 10             	sub    esp,0x10
c0012c91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c95:	50                   	push   eax
c0012c96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9a:	50                   	push   eax
c0012c9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9f:	50                   	push   eax
c0012ca0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca4:	50                   	push   eax
c0012ca5:	6a 01                	push   0x1
c0012ca7:	e8 5e ff ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cb0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012cb4:	0f 95 c0             	setne  al
c0012cb7:	83 c4 24             	add    esp,0x24
c0012cba:	c3                   	ret    
c0012cbb:	90                   	nop

c0012cbc <CPU::cpuidCheckECX(unsigned int)>:
c0012cbc:	83 ec 10             	sub    esp,0x10
c0012cbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cc3:	50                   	push   eax
c0012cc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cc8:	50                   	push   eax
c0012cc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ccd:	50                   	push   eax
c0012cce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cd2:	50                   	push   eax
c0012cd3:	6a 01                	push   0x1
c0012cd5:	e8 30 ff ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cde:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012ce2:	0f 95 c0             	setne  al
c0012ce5:	83 c4 24             	add    esp,0x24
c0012ce8:	c3                   	ret    
c0012ce9:	90                   	nop

c0012cea <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012cea:	83 ec 10             	sub    esp,0x10
c0012ced:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf1:	50                   	push   eax
c0012cf2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf6:	50                   	push   eax
c0012cf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cfb:	50                   	push   eax
c0012cfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d00:	50                   	push   eax
c0012d01:	6a 07                	push   0x7
c0012d03:	e8 02 ff ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d0c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012d10:	0f 95 c0             	setne  al
c0012d13:	83 c4 24             	add    esp,0x24
c0012d16:	c3                   	ret    
c0012d17:	90                   	nop

c0012d18 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012d18:	83 ec 10             	sub    esp,0x10
c0012d1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d1f:	50                   	push   eax
c0012d20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d24:	50                   	push   eax
c0012d25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d29:	50                   	push   eax
c0012d2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d2e:	50                   	push   eax
c0012d2f:	6a 07                	push   0x7
c0012d31:	e8 d4 fe ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d3a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d3e:	0f 95 c0             	setne  al
c0012d41:	83 c4 24             	add    esp,0x24
c0012d44:	c3                   	ret    
c0012d45:	90                   	nop

c0012d46 <CPU::CPU()>:
c0012d46:	83 ec 0c             	sub    esp,0xc
c0012d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4d:	83 ec 08             	sub    esp,0x8
c0012d50:	68 c5 3f 02 c0       	push   0xc0023fc5
c0012d55:	50                   	push   eax
c0012d56:	e8 5b b3 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	ba e8 41 02 c0       	mov    edx,0xc00241e8
c0012d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d67:	89 10                	mov    DWORD PTR [eax],edx
c0012d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d6d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d7b:	05 78 01 00 00       	add    eax,0x178
c0012d80:	83 ec 0c             	sub    esp,0xc
c0012d83:	50                   	push   eax
c0012d84:	e8 d1 64 ff ff       	call   c000925a <GDT::GDT()>
c0012d89:	83 c4 10             	add    esp,0x10
c0012d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d90:	05 7c 09 00 00       	add    eax,0x97c
c0012d95:	83 ec 0c             	sub    esp,0xc
c0012d98:	50                   	push   eax
c0012d99:	e8 12 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da5:	05 7c 11 00 00       	add    eax,0x117c
c0012daa:	83 ec 0c             	sub    esp,0xc
c0012dad:	50                   	push   eax
c0012dae:	e8 29 82 ff ff       	call   c000afdc <TSS::TSS()>
c0012db3:	83 c4 10             	add    esp,0x10
c0012db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dba:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012dcf:	90                   	nop
c0012dd0:	83 c4 0c             	add    esp,0xc
c0012dd3:	c3                   	ret    

c0012dd4 <CPU::displayFeatures()>:
c0012dd4:	c3                   	ret    
c0012dd5:	90                   	nop

c0012dd6 <CPU::detectFeatures()>:
c0012dd6:	55                   	push   ebp
c0012dd7:	57                   	push   edi
c0012dd8:	56                   	push   esi
c0012dd9:	53                   	push   ebx
c0012dda:	83 ec 50             	sub    esp,0x50
c0012ddd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012de1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012deb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012df2:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012df8:	6a 0d                	push   0xd
c0012dfa:	6a 00                	push   0x0
c0012dfc:	55                   	push   ebp
c0012dfd:	e8 82 d8 fe ff       	call   c0000684 <memset>
c0012e02:	83 c4 10             	add    esp,0x10
c0012e05:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0012e0a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012e11:	0f 84 22 09 00 00    	je     c0013739 <CPU::detectFeatures()+0x963>
c0012e17:	83 ec 0c             	sub    esp,0xc
c0012e1a:	89 ef                	mov    edi,ebp
c0012e1c:	6a 10                	push   0x10
c0012e1e:	e8 6b fe ff ff       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0012e23:	83 e0 01             	and    eax,0x1
c0012e26:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e29:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e2f:	83 e0 fd             	and    eax,0xfffffffd
c0012e32:	09 d0                	or     eax,edx
c0012e34:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e3a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012e41:	e8 48 fe ff ff       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0012e46:	83 e0 01             	and    eax,0x1
c0012e49:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012e50:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e56:	83 e0 fb             	and    eax,0xfffffffb
c0012e59:	09 d0                	or     eax,edx
c0012e5b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e61:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012e68:	e8 21 fe ff ff       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0012e6d:	83 e0 01             	and    eax,0x1
c0012e70:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012e77:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e7d:	83 e0 f7             	and    eax,0xfffffff7
c0012e80:	09 d0                	or     eax,edx
c0012e82:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e88:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e8f:	e8 fa fd ff ff       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0012e94:	83 e0 01             	and    eax,0x1
c0012e97:	c1 e0 04             	shl    eax,0x4
c0012e9a:	88 c2                	mov    dl,al
c0012e9c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ea2:	83 e0 ef             	and    eax,0xffffffef
c0012ea5:	09 d0                	or     eax,edx
c0012ea7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ead:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012eb4:	e8 d5 fd ff ff       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0012eb9:	83 e0 01             	and    eax,0x1
c0012ebc:	c1 e0 05             	shl    eax,0x5
c0012ebf:	88 c2                	mov    dl,al
c0012ec1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ec7:	83 e0 df             	and    eax,0xffffffdf
c0012eca:	09 d0                	or     eax,edx
c0012ecc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ed2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012ed9:	e8 b0 fd ff ff       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0012ede:	83 e0 01             	and    eax,0x1
c0012ee1:	8d 14 00             	lea    edx,[eax+eax*1]
c0012ee4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012eea:	83 e0 fd             	and    eax,0xfffffffd
c0012eed:	09 d0                	or     eax,edx
c0012eef:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012ef5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012efc:	e8 8d fd ff ff       	call   c0012c8e <CPU::cpuidCheckEDX(unsigned int)>
c0012f01:	83 e0 01             	and    eax,0x1
c0012f04:	c1 e0 06             	shl    eax,0x6
c0012f07:	88 c2                	mov    dl,al
c0012f09:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f0f:	83 e0 bf             	and    eax,0xffffffbf
c0012f12:	09 d0                	or     eax,edx
c0012f14:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012f1a:	58                   	pop    eax
c0012f1b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f1f:	50                   	push   eax
c0012f20:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f24:	50                   	push   eax
c0012f25:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f29:	56                   	push   esi
c0012f2a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f2e:	50                   	push   eax
c0012f2f:	6a 00                	push   0x0
c0012f31:	e8 d4 fc ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012f36:	b8 04 00 00 00       	mov    eax,0x4
c0012f3b:	89 c1                	mov    ecx,eax
c0012f3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f3f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f45:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f49:	89 c1                	mov    ecx,eax
c0012f4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f4d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012f53:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012f57:	89 c1                	mov    ecx,eax
c0012f59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f5b:	83 c4 18             	add    esp,0x18
c0012f5e:	68 70 3e 02 c0       	push   0xc0023e70
c0012f63:	55                   	push   ebp
c0012f64:	e8 63 d8 fe ff       	call   c00007cc <strcmp>
c0012f69:	83 c4 10             	add    esp,0x10
c0012f6c:	85 c0                	test   eax,eax
c0012f6e:	75 0f                	jne    c0012f7f <CPU::detectFeatures()+0x1a9>
c0012f70:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012f7a:	e9 22 02 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c0012f7f:	50                   	push   eax
c0012f80:	50                   	push   eax
c0012f81:	68 7d 3e 02 c0       	push   0xc0023e7d
c0012f86:	55                   	push   ebp
c0012f87:	e8 40 d8 fe ff       	call   c00007cc <strcmp>
c0012f8c:	83 c4 10             	add    esp,0x10
c0012f8f:	85 c0                	test   eax,eax
c0012f91:	74 dd                	je     c0012f70 <CPU::detectFeatures()+0x19a>
c0012f93:	50                   	push   eax
c0012f94:	50                   	push   eax
c0012f95:	68 8a 3e 02 c0       	push   0xc0023e8a
c0012f9a:	55                   	push   ebp
c0012f9b:	e8 2c d8 fe ff       	call   c00007cc <strcmp>
c0012fa0:	83 c4 10             	add    esp,0x10
c0012fa3:	85 c0                	test   eax,eax
c0012fa5:	74 2a                	je     c0012fd1 <CPU::detectFeatures()+0x1fb>
c0012fa7:	50                   	push   eax
c0012fa8:	50                   	push   eax
c0012fa9:	68 97 3e 02 c0       	push   0xc0023e97
c0012fae:	55                   	push   ebp
c0012faf:	e8 18 d8 fe ff       	call   c00007cc <strcmp>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	85 c0                	test   eax,eax
c0012fb9:	74 16                	je     c0012fd1 <CPU::detectFeatures()+0x1fb>
c0012fbb:	50                   	push   eax
c0012fbc:	50                   	push   eax
c0012fbd:	68 a4 3e 02 c0       	push   0xc0023ea4
c0012fc2:	55                   	push   ebp
c0012fc3:	e8 04 d8 fe ff       	call   c00007cc <strcmp>
c0012fc8:	83 c4 10             	add    esp,0x10
c0012fcb:	85 c0                	test   eax,eax
c0012fcd:	74 48                	je     c0013017 <CPU::detectFeatures()+0x241>
c0012fcf:	eb 0f                	jmp    c0012fe0 <CPU::detectFeatures()+0x20a>
c0012fd1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012fdb:	e9 c1 01 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c0012fe0:	50                   	push   eax
c0012fe1:	50                   	push   eax
c0012fe2:	68 b1 3e 02 c0       	push   0xc0023eb1
c0012fe7:	55                   	push   ebp
c0012fe8:	e8 df d7 fe ff       	call   c00007cc <strcmp>
c0012fed:	83 c4 10             	add    esp,0x10
c0012ff0:	85 c0                	test   eax,eax
c0012ff2:	74 23                	je     c0013017 <CPU::detectFeatures()+0x241>
c0012ff4:	57                   	push   edi
c0012ff5:	57                   	push   edi
c0012ff6:	68 be 3e 02 c0       	push   0xc0023ebe
c0012ffb:	55                   	push   ebp
c0012ffc:	e8 cb d7 fe ff       	call   c00007cc <strcmp>
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	85 c0                	test   eax,eax
c0013006:	75 1e                	jne    c0013026 <CPU::detectFeatures()+0x250>
c0013008:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013012:	e9 8a 01 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c0013017:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013021:	e9 7b 01 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c0013026:	56                   	push   esi
c0013027:	56                   	push   esi
c0013028:	68 cb 3e 02 c0       	push   0xc0023ecb
c001302d:	55                   	push   ebp
c001302e:	e8 99 d7 fe ff       	call   c00007cc <strcmp>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	85 c0                	test   eax,eax
c0013038:	75 0f                	jne    c0013049 <CPU::detectFeatures()+0x273>
c001303a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013044:	e9 58 01 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c0013049:	51                   	push   ecx
c001304a:	51                   	push   ecx
c001304b:	68 8a 3e 02 c0       	push   0xc0023e8a
c0013050:	55                   	push   ebp
c0013051:	e8 76 d7 fe ff       	call   c00007cc <strcmp>
c0013056:	83 c4 10             	add    esp,0x10
c0013059:	85 c0                	test   eax,eax
c001305b:	75 0f                	jne    c001306c <CPU::detectFeatures()+0x296>
c001305d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013067:	e9 35 01 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c001306c:	52                   	push   edx
c001306d:	52                   	push   edx
c001306e:	68 d8 3e 02 c0       	push   0xc0023ed8
c0013073:	55                   	push   ebp
c0013074:	e8 53 d7 fe ff       	call   c00007cc <strcmp>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	85 c0                	test   eax,eax
c001307e:	75 0f                	jne    c001308f <CPU::detectFeatures()+0x2b9>
c0013080:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001308a:	e9 12 01 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c001308f:	50                   	push   eax
c0013090:	50                   	push   eax
c0013091:	68 e5 3e 02 c0       	push   0xc0023ee5
c0013096:	55                   	push   ebp
c0013097:	e8 30 d7 fe ff       	call   c00007cc <strcmp>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	85 c0                	test   eax,eax
c00130a1:	75 0f                	jne    c00130b2 <CPU::detectFeatures()+0x2dc>
c00130a3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00130ad:	e9 ef 00 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c00130b2:	50                   	push   eax
c00130b3:	50                   	push   eax
c00130b4:	68 f2 3e 02 c0       	push   0xc0023ef2
c00130b9:	55                   	push   ebp
c00130ba:	e8 0d d7 fe ff       	call   c00007cc <strcmp>
c00130bf:	83 c4 10             	add    esp,0x10
c00130c2:	85 c0                	test   eax,eax
c00130c4:	75 0f                	jne    c00130d5 <CPU::detectFeatures()+0x2ff>
c00130c6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00130d0:	e9 cc 00 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c00130d5:	50                   	push   eax
c00130d6:	50                   	push   eax
c00130d7:	68 ff 3e 02 c0       	push   0xc0023eff
c00130dc:	55                   	push   ebp
c00130dd:	e8 ea d6 fe ff       	call   c00007cc <strcmp>
c00130e2:	83 c4 10             	add    esp,0x10
c00130e5:	85 c0                	test   eax,eax
c00130e7:	75 0f                	jne    c00130f8 <CPU::detectFeatures()+0x322>
c00130e9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00130f3:	e9 a9 00 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c00130f8:	50                   	push   eax
c00130f9:	50                   	push   eax
c00130fa:	68 0c 3f 02 c0       	push   0xc0023f0c
c00130ff:	55                   	push   ebp
c0013100:	e8 c7 d6 fe ff       	call   c00007cc <strcmp>
c0013105:	83 c4 10             	add    esp,0x10
c0013108:	85 c0                	test   eax,eax
c001310a:	75 0f                	jne    c001311b <CPU::detectFeatures()+0x345>
c001310c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013116:	e9 86 00 00 00       	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c001311b:	50                   	push   eax
c001311c:	50                   	push   eax
c001311d:	68 19 3f 02 c0       	push   0xc0023f19
c0013122:	55                   	push   ebp
c0013123:	e8 a4 d6 fe ff       	call   c00007cc <strcmp>
c0013128:	83 c4 10             	add    esp,0x10
c001312b:	85 c0                	test   eax,eax
c001312d:	75 0c                	jne    c001313b <CPU::detectFeatures()+0x365>
c001312f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013139:	eb 66                	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c001313b:	50                   	push   eax
c001313c:	50                   	push   eax
c001313d:	68 26 3f 02 c0       	push   0xc0023f26
c0013142:	55                   	push   ebp
c0013143:	e8 84 d6 fe ff       	call   c00007cc <strcmp>
c0013148:	83 c4 10             	add    esp,0x10
c001314b:	85 c0                	test   eax,eax
c001314d:	75 0c                	jne    c001315b <CPU::detectFeatures()+0x385>
c001314f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013159:	eb 46                	jmp    c00131a1 <CPU::detectFeatures()+0x3cb>
c001315b:	57                   	push   edi
c001315c:	57                   	push   edi
c001315d:	68 33 3f 02 c0       	push   0xc0023f33
c0013162:	55                   	push   ebp
c0013163:	e8 64 d6 fe ff       	call   c00007cc <strcmp>
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	85 c0                	test   eax,eax
c001316d:	74 e0                	je     c001314f <CPU::detectFeatures()+0x379>
c001316f:	56                   	push   esi
c0013170:	56                   	push   esi
c0013171:	68 40 3f 02 c0       	push   0xc0023f40
c0013176:	55                   	push   ebp
c0013177:	e8 50 d6 fe ff       	call   c00007cc <strcmp>
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	85 c0                	test   eax,eax
c0013181:	74 cc                	je     c001314f <CPU::detectFeatures()+0x379>
c0013183:	51                   	push   ecx
c0013184:	51                   	push   ecx
c0013185:	68 4d 3f 02 c0       	push   0xc0023f4d
c001318a:	55                   	push   ebp
c001318b:	e8 3c d6 fe ff       	call   c00007cc <strcmp>
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	85 c0                	test   eax,eax
c0013195:	74 b8                	je     c001314f <CPU::detectFeatures()+0x379>
c0013197:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00131a1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00131a6:	0f 86 be 00 00 00    	jbe    c001326a <CPU::detectFeatures()+0x494>
c00131ac:	83 ec 0c             	sub    esp,0xc
c00131af:	68 80 00 00 00       	push   0x80
c00131b4:	e8 31 fb ff ff       	call   c0012cea <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131b9:	83 e0 01             	and    eax,0x1
c00131bc:	c1 e0 06             	shl    eax,0x6
c00131bf:	88 c2                	mov    dl,al
c00131c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00131c7:	83 e0 bf             	and    eax,0xffffffbf
c00131ca:	09 d0                	or     eax,edx
c00131cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00131d2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00131d9:	e8 0c fb ff ff       	call   c0012cea <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131de:	83 e0 01             	and    eax,0x1
c00131e1:	c1 e0 04             	shl    eax,0x4
c00131e4:	88 c2                	mov    dl,al
c00131e6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131ec:	83 e0 ef             	and    eax,0xffffffef
c00131ef:	09 d0                	or     eax,edx
c00131f1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131f7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00131fe:	e8 e7 fa ff ff       	call   c0012cea <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013203:	c1 e0 07             	shl    eax,0x7
c0013206:	88 c2                	mov    dl,al
c0013208:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001320e:	83 e0 7f             	and    eax,0x7f
c0013211:	09 d0                	or     eax,edx
c0013213:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013219:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013220:	e8 f3 fa ff ff       	call   c0012d18 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013225:	83 e0 01             	and    eax,0x1
c0013228:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001322f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013235:	83 e0 f7             	and    eax,0xfffffff7
c0013238:	09 d0                	or     eax,edx
c001323a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013240:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013247:	e8 cc fa ff ff       	call   c0012d18 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001324c:	83 c4 10             	add    esp,0x10
c001324f:	83 e0 01             	and    eax,0x1
c0013252:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013259:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001325f:	83 e0 fb             	and    eax,0xfffffffb
c0013262:	09 d0                	or     eax,edx
c0013264:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013271:	50                   	push   eax
c0013272:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013276:	50                   	push   eax
c0013277:	8d 74 24 28          	lea    esi,[esp+0x28]
c001327b:	56                   	push   esi
c001327c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013280:	50                   	push   eax
c0013281:	6a 01                	push   0x1
c0013283:	e8 82 f9 ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013288:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001328c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013292:	88 ca                	mov    dl,cl
c0013294:	83 e0 f0             	and    eax,0xfffffff0
c0013297:	83 e2 0f             	and    edx,0xf
c001329a:	09 d0                	or     eax,edx
c001329c:	88 ca                	mov    dl,cl
c001329e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00132a4:	c0 ea 04             	shr    dl,0x4
c00132a7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00132ab:	0f b6 c2             	movzx  eax,dl
c00132ae:	83 c4 20             	add    esp,0x20
c00132b1:	c1 e0 06             	shl    eax,0x6
c00132b4:	89 c7                	mov    edi,eax
c00132b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00132bc:	66 25 3f c0          	and    ax,0xc03f
c00132c0:	09 f8                	or     eax,edi
c00132c2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00132c9:	89 c8                	mov    eax,ecx
c00132cb:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00132d2:	c1 e8 08             	shr    eax,0x8
c00132d5:	83 e5 3f             	and    ebp,0x3f
c00132d8:	83 e0 0f             	and    eax,0xf
c00132db:	89 c7                	mov    edi,eax
c00132dd:	c1 e7 06             	shl    edi,0x6
c00132e0:	09 ef                	or     edi,ebp
c00132e2:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00132e9:	89 fa                	mov    edx,edi
c00132eb:	83 e5 c0             	and    ebp,0xffffffc0
c00132ee:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00132f4:	88 c2                	mov    dl,al
c00132f6:	c0 ea 02             	shr    dl,0x2
c00132f9:	89 d7                	mov    edi,edx
c00132fb:	09 ef                	or     edi,ebp
c00132fd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013303:	89 fa                	mov    edx,edi
c0013305:	83 e5 cf             	and    ebp,0xffffffcf
c0013308:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001330e:	89 cf                	mov    edi,ecx
c0013310:	c1 ef 0c             	shr    edi,0xc
c0013313:	83 e7 03             	and    edi,0x3
c0013316:	c1 e7 04             	shl    edi,0x4
c0013319:	09 ef                	or     edi,ebp
c001331b:	3c 06                	cmp    al,0x6
c001331d:	89 fa                	mov    edx,edi
c001331f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013325:	74 04                	je     c001332b <CPU::detectFeatures()+0x555>
c0013327:	3c 0f                	cmp    al,0xf
c0013329:	75 5c                	jne    c0013387 <CPU::detectFeatures()+0x5b1>
c001332b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001332f:	89 cf                	mov    edi,ecx
c0013331:	c1 ef 10             	shr    edi,0x10
c0013334:	c1 e7 04             	shl    edi,0x4
c0013337:	09 fa                	or     edx,edi
c0013339:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001333f:	0f b6 d2             	movzx  edx,dl
c0013342:	66 81 e7 3f c0       	and    di,0xc03f
c0013347:	c1 e2 06             	shl    edx,0x6
c001334a:	09 fa                	or     edx,edi
c001334c:	3c 0f                	cmp    al,0xf
c001334e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013355:	75 30                	jne    c0013387 <CPU::detectFeatures()+0x5b1>
c0013357:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001335d:	c1 e9 14             	shr    ecx,0x14
c0013360:	83 e0 3f             	and    eax,0x3f
c0013363:	83 c1 0f             	add    ecx,0xf
c0013366:	88 ca                	mov    dl,cl
c0013368:	c0 e9 02             	shr    cl,0x2
c001336b:	c1 e2 06             	shl    edx,0x6
c001336e:	09 d0                	or     eax,edx
c0013370:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013376:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001337c:	83 e0 c0             	and    eax,0xffffffc0
c001337f:	09 c1                	or     ecx,eax
c0013381:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013387:	83 ec 0c             	sub    esp,0xc
c001338a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013391:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013395:	50                   	push   eax
c0013396:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001339a:	55                   	push   ebp
c001339b:	56                   	push   esi
c001339c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00133a0:	57                   	push   edi
c00133a1:	68 00 00 00 80       	push   0x80000000
c00133a6:	e8 5f f8 ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133ab:	83 c4 20             	add    esp,0x20
c00133ae:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00133b6:	76 22                	jbe    c00133da <CPU::detectFeatures()+0x604>
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133bf:	50                   	push   eax
c00133c0:	55                   	push   ebp
c00133c1:	56                   	push   esi
c00133c2:	57                   	push   edi
c00133c3:	68 01 00 00 80       	push   0x80000001
c00133c8:	e8 3d f8 ff ff       	call   c0012c0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133cd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00133d7:	83 c4 20             	add    esp,0x20
c00133da:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00133e0:	83 f8 01             	cmp    eax,0x1
c00133e3:	75 6f                	jne    c0013454 <CPU::detectFeatures()+0x67e>
c00133e5:	51                   	push   ecx
c00133e6:	51                   	push   ecx
c00133e7:	68 59 3f 02 c0       	push   0xc0023f59
c00133ec:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133f0:	56                   	push   esi
c00133f1:	e8 4a d3 fe ff       	call   c0000740 <strcpy>
c00133f6:	5f                   	pop    edi
c00133f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133fd:	5d                   	pop    ebp
c00133fe:	66 c1 e8 06          	shr    ax,0x6
c0013402:	0f b6 c0             	movzx  eax,al
c0013405:	50                   	push   eax
c0013406:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001340c:	c1 e8 0e             	shr    eax,0xe
c001340f:	0f b6 c0             	movzx  eax,al
c0013412:	50                   	push   eax
c0013413:	e8 9c f4 ff ff       	call   c00128b4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013418:	5a                   	pop    edx
c0013419:	59                   	pop    ecx
c001341a:	50                   	push   eax
c001341b:	56                   	push   esi
c001341c:	e8 5f d4 fe ff       	call   c0000880 <strcat>
c0013421:	5f                   	pop    edi
c0013422:	5d                   	pop    ebp
c0013423:	56                   	push   esi
c0013424:	53                   	push   ebx
c0013425:	e8 7e ac ff ff       	call   c000e0a8 <Device::setName(char const*)>
c001342a:	58                   	pop    eax
c001342b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013431:	5a                   	pop    edx
c0013432:	68 60 3f 02 c0       	push   0xc0023f60
c0013437:	50                   	push   eax
c0013438:	e8 8f d3 fe ff       	call   c00007cc <strcmp>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	85 c0                	test   eax,eax
c0013442:	0f 85 71 03 00 00    	jne    c00137b9 <CPU::detectFeatures()+0x9e3>
c0013448:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001344f:	e9 65 03 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x9e3>
c0013454:	83 f8 02             	cmp    eax,0x2
c0013457:	0f 85 b5 00 00 00    	jne    c0013512 <CPU::detectFeatures()+0x73c>
c001345d:	57                   	push   edi
c001345e:	57                   	push   edi
c001345f:	68 72 3f 02 c0       	push   0xc0023f72
c0013464:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013468:	56                   	push   esi
c0013469:	e8 d2 d2 fe ff       	call   c0000740 <strcpy>
c001346e:	5d                   	pop    ebp
c001346f:	58                   	pop    eax
c0013470:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013476:	66 c1 e8 06          	shr    ax,0x6
c001347a:	0f b6 c0             	movzx  eax,al
c001347d:	50                   	push   eax
c001347e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013484:	c1 e8 0e             	shr    eax,0xe
c0013487:	0f b6 c0             	movzx  eax,al
c001348a:	50                   	push   eax
c001348b:	e8 90 f2 ff ff       	call   c0012720 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013490:	5a                   	pop    edx
c0013491:	59                   	pop    ecx
c0013492:	50                   	push   eax
c0013493:	56                   	push   esi
c0013494:	e8 e7 d3 fe ff       	call   c0000880 <strcat>
c0013499:	5f                   	pop    edi
c001349a:	5d                   	pop    ebp
c001349b:	56                   	push   esi
c001349c:	53                   	push   ebx
c001349d:	e8 06 ac ff ff       	call   c000e0a8 <Device::setName(char const*)>
c00134a2:	58                   	pop    eax
c00134a3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00134a9:	5a                   	pop    edx
c00134aa:	68 77 3f 02 c0       	push   0xc0023f77
c00134af:	50                   	push   eax
c00134b0:	e8 17 d3 fe ff       	call   c00007cc <strcmp>
c00134b5:	83 c4 10             	add    esp,0x10
c00134b8:	85 c0                	test   eax,eax
c00134ba:	75 20                	jne    c00134dc <CPU::detectFeatures()+0x706>
c00134bc:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c00134c2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00134c8:	a8 01                	test   al,0x1
c00134ca:	74 10                	je     c00134dc <CPU::detectFeatures()+0x706>
c00134cc:	83 e0 fe             	and    eax,0xfffffffe
c00134cf:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00134d5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00134dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134e2:	c1 e8 0e             	shr    eax,0xe
c00134e5:	3c 05                	cmp    al,0x5
c00134e7:	0f 85 cc 02 00 00    	jne    c00137b9 <CPU::detectFeatures()+0x9e3>
c00134ed:	56                   	push   esi
c00134ee:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00134f4:	83 e0 0f             	and    eax,0xf
c00134f7:	50                   	push   eax
c00134f8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134fe:	66 c1 e8 06          	shr    ax,0x6
c0013502:	0f b6 c0             	movzx  eax,al
c0013505:	50                   	push   eax
c0013506:	6a 05                	push   0x5
c0013508:	e8 89 f6 ff ff       	call   c0012b96 <CPU::AMD_K6_writeback(int, int, int)>
c001350d:	e9 1f 02 00 00       	jmp    c0013731 <CPU::detectFeatures()+0x95b>
c0013512:	8d 50 fd             	lea    edx,[eax-0x3]
c0013515:	83 fa 01             	cmp    edx,0x1
c0013518:	76 09                	jbe    c0013523 <CPU::detectFeatures()+0x74d>
c001351a:	83 f8 06             	cmp    eax,0x6
c001351d:	0f 85 91 01 00 00    	jne    c00136b4 <CPU::detectFeatures()+0x8de>
c0013523:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013529:	c1 ea 0e             	shr    edx,0xe
c001352c:	80 fa 05             	cmp    dl,0x5
c001352f:	75 7b                	jne    c00135ac <CPU::detectFeatures()+0x7d6>
c0013531:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013537:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001353c:	66 81 fa 00 01       	cmp    dx,0x100
c0013541:	75 0c                	jne    c001354f <CPU::detectFeatures()+0x779>
c0013543:	51                   	push   ecx
c0013544:	51                   	push   ecx
c0013545:	68 7e 3f 02 c0       	push   0xc0023f7e
c001354a:	e9 dc 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c001354f:	66 81 fa 00 02       	cmp    dx,0x200
c0013554:	75 0c                	jne    c0013562 <CPU::detectFeatures()+0x78c>
c0013556:	52                   	push   edx
c0013557:	52                   	push   edx
c0013558:	68 91 3f 02 c0       	push   0xc0023f91
c001355d:	e9 c9 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013562:	66 81 fa 40 02       	cmp    dx,0x240
c0013567:	75 0c                	jne    c0013575 <CPU::detectFeatures()+0x79f>
c0013569:	50                   	push   eax
c001356a:	50                   	push   eax
c001356b:	68 a3 3f 02 c0       	push   0xc0023fa3
c0013570:	e9 b6 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013575:	83 f8 06             	cmp    eax,0x6
c0013578:	75 0c                	jne    c0013586 <CPU::detectFeatures()+0x7b0>
c001357a:	50                   	push   eax
c001357b:	50                   	push   eax
c001357c:	68 b5 3f 02 c0       	push   0xc0023fb5
c0013581:	e9 a5 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013586:	83 f8 04             	cmp    eax,0x4
c0013589:	75 0c                	jne    c0013597 <CPU::detectFeatures()+0x7c1>
c001358b:	50                   	push   eax
c001358c:	50                   	push   eax
c001358d:	68 c1 3f 02 c0       	push   0xc0023fc1
c0013592:	e9 94 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013597:	83 f8 03             	cmp    eax,0x3
c001359a:	0f 85 19 02 00 00    	jne    c00137b9 <CPU::detectFeatures()+0x9e3>
c00135a0:	50                   	push   eax
c00135a1:	50                   	push   eax
c00135a2:	68 c9 3f 02 c0       	push   0xc0023fc9
c00135a7:	e9 7f 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c00135ac:	80 fa 06             	cmp    dl,0x6
c00135af:	0f 85 db 00 00 00    	jne    c0013690 <CPU::detectFeatures()+0x8ba>
c00135b5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00135bb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00135c0:	66 81 fa 80 01       	cmp    dx,0x180
c00135c5:	75 0c                	jne    c00135d3 <CPU::detectFeatures()+0x7fd>
c00135c7:	50                   	push   eax
c00135c8:	50                   	push   eax
c00135c9:	68 d4 3f 02 c0       	push   0xc0023fd4
c00135ce:	e9 58 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c00135d3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00135d9:	66 f7 c1 80 ff       	test   cx,0xff80
c00135de:	75 0c                	jne    c00135ec <CPU::detectFeatures()+0x816>
c00135e0:	50                   	push   eax
c00135e1:	50                   	push   eax
c00135e2:	68 e4 3f 02 c0       	push   0xc0023fe4
c00135e7:	e9 3f 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c00135ec:	66 81 fa 40 02       	cmp    dx,0x240
c00135f1:	75 0c                	jne    c00135ff <CPU::detectFeatures()+0x829>
c00135f3:	55                   	push   ebp
c00135f4:	55                   	push   ebp
c00135f5:	68 eb 3f 02 c0       	push   0xc0023feb
c00135fa:	e9 2c 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c00135ff:	66 81 fa 80 02       	cmp    dx,0x280
c0013604:	75 0c                	jne    c0013612 <CPU::detectFeatures()+0x83c>
c0013606:	57                   	push   edi
c0013607:	57                   	push   edi
c0013608:	68 f4 3f 02 c0       	push   0xc0023ff4
c001360d:	e9 19 01 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013612:	66 81 fa 40 03       	cmp    dx,0x340
c0013617:	74 ed                	je     c0013606 <CPU::detectFeatures()+0x830>
c0013619:	66 81 fa c0 03       	cmp    dx,0x3c0
c001361e:	75 0c                	jne    c001362c <CPU::detectFeatures()+0x856>
c0013620:	56                   	push   esi
c0013621:	56                   	push   esi
c0013622:	68 fb 3f 02 c0       	push   0xc0023ffb
c0013627:	e9 ff 00 00 00       	jmp    c001372b <CPU::detectFeatures()+0x955>
c001362c:	83 f8 06             	cmp    eax,0x6
c001362f:	0f 84 45 ff ff ff    	je     c001357a <CPU::detectFeatures()+0x7a4>
c0013635:	83 f8 04             	cmp    eax,0x4
c0013638:	0f 84 4d ff ff ff    	je     c001358b <CPU::detectFeatures()+0x7b5>
c001363e:	83 f8 03             	cmp    eax,0x3
c0013641:	0f 85 72 01 00 00    	jne    c00137b9 <CPU::detectFeatures()+0x9e3>
c0013647:	51                   	push   ecx
c0013648:	51                   	push   ecx
c0013649:	68 04 40 02 c0       	push   0xc0024004
c001364e:	53                   	push   ebx
c001364f:	e8 54 aa ff ff       	call   c000e0a8 <Device::setName(char const*)>
c0013654:	b1 c1                	mov    cl,0xc1
c0013656:	88 c8                	mov    al,cl
c0013658:	e6 22                	out    0x22,al
c001365a:	e4 23                	in     al,0x23
c001365c:	88 c2                	mov    dl,al
c001365e:	88 c8                	mov    al,cl
c0013660:	e6 22                	out    0x22,al
c0013662:	88 d0                	mov    al,dl
c0013664:	83 c8 10             	or     eax,0x10
c0013667:	e6 23                	out    0x23,al
c0013669:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013670:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013673:	89 d0                	mov    eax,edx
c0013675:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001367b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001367f:	40                   	inc    eax
c0013680:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013686:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001368b:	e9 a1 00 00 00       	jmp    c0013731 <CPU::detectFeatures()+0x95b>
c0013690:	83 f8 06             	cmp    eax,0x6
c0013693:	0f 84 e1 fe ff ff    	je     c001357a <CPU::detectFeatures()+0x7a4>
c0013699:	83 f8 04             	cmp    eax,0x4
c001369c:	0f 84 e9 fe ff ff    	je     c001358b <CPU::detectFeatures()+0x7b5>
c00136a2:	83 f8 03             	cmp    eax,0x3
c00136a5:	0f 85 0e 01 00 00    	jne    c00137b9 <CPU::detectFeatures()+0x9e3>
c00136ab:	52                   	push   edx
c00136ac:	52                   	push   edx
c00136ad:	68 0f 40 02 c0       	push   0xc002400f
c00136b2:	eb 77                	jmp    c001372b <CPU::detectFeatures()+0x955>
c00136b4:	83 f8 07             	cmp    eax,0x7
c00136b7:	75 09                	jne    c00136c2 <CPU::detectFeatures()+0x8ec>
c00136b9:	50                   	push   eax
c00136ba:	50                   	push   eax
c00136bb:	68 19 40 02 c0       	push   0xc0024019
c00136c0:	eb 69                	jmp    c001372b <CPU::detectFeatures()+0x955>
c00136c2:	83 f8 0a             	cmp    eax,0xa
c00136c5:	75 09                	jne    c00136d0 <CPU::detectFeatures()+0x8fa>
c00136c7:	50                   	push   eax
c00136c8:	50                   	push   eax
c00136c9:	68 24 40 02 c0       	push   0xc0024024
c00136ce:	eb 5b                	jmp    c001372b <CPU::detectFeatures()+0x955>
c00136d0:	83 f8 0b             	cmp    eax,0xb
c00136d3:	75 09                	jne    c00136de <CPU::detectFeatures()+0x908>
c00136d5:	50                   	push   eax
c00136d6:	50                   	push   eax
c00136d7:	68 2c 40 02 c0       	push   0xc002402c
c00136dc:	eb 4d                	jmp    c001372b <CPU::detectFeatures()+0x955>
c00136de:	83 f8 08             	cmp    eax,0x8
c00136e1:	75 09                	jne    c00136ec <CPU::detectFeatures()+0x916>
c00136e3:	50                   	push   eax
c00136e4:	50                   	push   eax
c00136e5:	68 35 40 02 c0       	push   0xc0024035
c00136ea:	eb 3f                	jmp    c001372b <CPU::detectFeatures()+0x955>
c00136ec:	83 f8 09             	cmp    eax,0x9
c00136ef:	75 09                	jne    c00136fa <CPU::detectFeatures()+0x924>
c00136f1:	50                   	push   eax
c00136f2:	50                   	push   eax
c00136f3:	68 3d 40 02 c0       	push   0xc002403d
c00136f8:	eb 31                	jmp    c001372b <CPU::detectFeatures()+0x955>
c00136fa:	83 f8 05             	cmp    eax,0x5
c00136fd:	75 09                	jne    c0013708 <CPU::detectFeatures()+0x932>
c00136ff:	50                   	push   eax
c0013700:	50                   	push   eax
c0013701:	68 45 40 02 c0       	push   0xc0024045
c0013706:	eb 23                	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013708:	83 f8 0c             	cmp    eax,0xc
c001370b:	75 09                	jne    c0013716 <CPU::detectFeatures()+0x940>
c001370d:	55                   	push   ebp
c001370e:	55                   	push   ebp
c001370f:	68 53 40 02 c0       	push   0xc0024053
c0013714:	eb 15                	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013716:	83 f8 0d             	cmp    eax,0xd
c0013719:	75 09                	jne    c0013724 <CPU::detectFeatures()+0x94e>
c001371b:	57                   	push   edi
c001371c:	57                   	push   edi
c001371d:	68 5e 40 02 c0       	push   0xc002405e
c0013722:	eb 07                	jmp    c001372b <CPU::detectFeatures()+0x955>
c0013724:	56                   	push   esi
c0013725:	56                   	push   esi
c0013726:	68 72 40 02 c0       	push   0xc0024072
c001372b:	53                   	push   ebx
c001372c:	e8 77 a9 ff ff       	call   c000e0a8 <Device::setName(char const*)>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	e9 80 00 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x9e3>
c0013739:	51                   	push   ecx
c001373a:	51                   	push   ecx
c001373b:	68 be 3e 02 c0       	push   0xc0023ebe
c0013740:	55                   	push   ebp
c0013741:	e8 fa cf fe ff       	call   c0000740 <strcpy>
c0013746:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013750:	e8 8e ca fe ff       	call   c00001e3 <is486>
c0013755:	83 c4 10             	add    esp,0x10
c0013758:	85 c0                	test   eax,eax
c001375a:	74 2b                	je     c0013787 <CPU::detectFeatures()+0x9b1>
c001375c:	52                   	push   edx
c001375d:	52                   	push   edx
c001375e:	68 7e 40 02 c0       	push   0xc002407e
c0013763:	53                   	push   ebx
c0013764:	e8 3f a9 ff ff       	call   c000e0a8 <Device::setName(char const*)>
c0013769:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013770:	0f 20 c0             	mov    eax,cr0
c0013773:	83 e0 14             	and    eax,0x14
c0013776:	83 c4 10             	add    esp,0x10
c0013779:	83 f8 04             	cmp    eax,0x4
c001377c:	75 1f                	jne    c001379d <CPU::detectFeatures()+0x9c7>
c001377e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013785:	eb 32                	jmp    c00137b9 <CPU::detectFeatures()+0x9e3>
c0013787:	50                   	push   eax
c0013788:	50                   	push   eax
c0013789:	68 89 40 02 c0       	push   0xc0024089
c001378e:	53                   	push   ebx
c001378f:	e8 14 a9 ff ff       	call   c000e0a8 <Device::setName(char const*)>
c0013794:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001379b:	eb d3                	jmp    c0013770 <CPU::detectFeatures()+0x99a>
c001379d:	e8 1c ca fe ff       	call   c00001be <hasLegacyFPU>
c00137a2:	83 e0 01             	and    eax,0x1
c00137a5:	8d 14 00             	lea    edx,[eax+eax*1]
c00137a8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00137ae:	83 e0 fd             	and    eax,0xfffffffd
c00137b1:	09 d0                	or     eax,edx
c00137b3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00137b9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00137c0:	83 c4 4c             	add    esp,0x4c
c00137c3:	5b                   	pop    ebx
c00137c4:	5e                   	pop    esi
c00137c5:	5f                   	pop    edi
c00137c6:	5d                   	pop    ebp
c00137c7:	c3                   	ret    

c00137c8 <CPU::setupSMEP()>:
c00137c8:	0f 20 e0             	mov    eax,cr4
c00137cb:	0d 00 00 10 00       	or     eax,0x100000
c00137d0:	0f 22 e0             	mov    cr4,eax
c00137d3:	c3                   	ret    

c00137d4 <CPU::setupUMIP()>:
c00137d4:	0f 20 e0             	mov    eax,cr4
c00137d7:	80 cc 08             	or     ah,0x8
c00137da:	0f 22 e0             	mov    cr4,eax
c00137dd:	c3                   	ret    

c00137de <CPU::setupTSC()>:
c00137de:	0f 20 e0             	mov    eax,cr4
c00137e1:	83 c8 04             	or     eax,0x4
c00137e4:	0f 22 e0             	mov    cr4,eax
c00137e7:	c3                   	ret    

c00137e8 <CPU::setupLargePages()>:
c00137e8:	0f 20 e0             	mov    eax,cr4
c00137eb:	83 c8 10             	or     eax,0x10
c00137ee:	0f 22 e0             	mov    cr4,eax
c00137f1:	c3                   	ret    

c00137f2 <CPU::setupPAT()>:
c00137f2:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00137f7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00137fe:	74 2c                	je     c001382c <CPU::setupPAT()+0x3a>
c0013800:	53                   	push   ebx
c0013801:	83 ec 10             	sub    esp,0x10
c0013804:	68 77 02 00 00       	push   0x277
c0013809:	50                   	push   eax
c001380a:	e8 15 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001380f:	83 e2 f8             	and    edx,0xfffffff8
c0013812:	83 ca 01             	or     edx,0x1
c0013815:	52                   	push   edx
c0013816:	50                   	push   eax
c0013817:	68 77 02 00 00       	push   0x277
c001381c:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c0013822:	e8 29 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013827:	83 c4 28             	add    esp,0x28
c001382a:	5b                   	pop    ebx
c001382b:	c3                   	ret    
c001382c:	c3                   	ret    
c001382d:	90                   	nop

c001382e <CPU::setupMTRR()>:
c001382e:	c3                   	ret    
c001382f:	90                   	nop

c0013830 <CPU::setupGlobalPages()>:
c0013830:	0f 20 e0             	mov    eax,cr4
c0013833:	0c 80                	or     al,0x80
c0013835:	0f 22 e0             	mov    cr4,eax
c0013838:	c3                   	ret    
c0013839:	90                   	nop

c001383a <CPU::allowUsermodeDataAccess()>:
c001383a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001383e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013845:	74 03                	je     c001384a <CPU::allowUsermodeDataAccess()+0x10>
c0013847:	0f 01 cb             	stac   
c001384a:	c3                   	ret    
c001384b:	90                   	nop

c001384c <CPU::prohibitUsermodeDataAccess()>:
c001384c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013850:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013857:	74 03                	je     c001385c <CPU::prohibitUsermodeDataAccess()+0x10>
c0013859:	0f 01 ca             	clac   
c001385c:	c3                   	ret    
c001385d:	90                   	nop

c001385e <CPU::setupSMAP()>:
c001385e:	0f 20 e0             	mov    eax,cr4
c0013861:	0d 00 00 20 00       	or     eax,0x200000
c0013866:	0f 22 e0             	mov    cr4,eax
c0013869:	eb e1                	jmp    c001384c <CPU::prohibitUsermodeDataAccess()>
c001386b:	90                   	nop

c001386c <CPU::setupFeatures()>:
c001386c:	83 ec 0c             	sub    esp,0xc
c001386f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013873:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001387a:	74 07                	je     c0013883 <CPU::setupFeatures()+0x17>
c001387c:	52                   	push   edx
c001387d:	e8 46 ff ff ff       	call   c00137c8 <CPU::setupSMEP()>
c0013882:	58                   	pop    eax
c0013883:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001388a:	74 07                	je     c0013893 <CPU::setupFeatures()+0x27>
c001388c:	52                   	push   edx
c001388d:	e8 cc ff ff ff       	call   c001385e <CPU::setupSMAP()>
c0013892:	58                   	pop    eax
c0013893:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001389a:	74 07                	je     c00138a3 <CPU::setupFeatures()+0x37>
c001389c:	52                   	push   edx
c001389d:	e8 32 ff ff ff       	call   c00137d4 <CPU::setupUMIP()>
c00138a2:	58                   	pop    eax
c00138a3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00138aa:	74 07                	je     c00138b3 <CPU::setupFeatures()+0x47>
c00138ac:	52                   	push   edx
c00138ad:	e8 2c ff ff ff       	call   c00137de <CPU::setupTSC()>
c00138b2:	58                   	pop    eax
c00138b3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00138ba:	74 07                	je     c00138c3 <CPU::setupFeatures()+0x57>
c00138bc:	52                   	push   edx
c00138bd:	e8 26 ff ff ff       	call   c00137e8 <CPU::setupLargePages()>
c00138c2:	59                   	pop    ecx
c00138c3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00138ca:	74 07                	je     c00138d3 <CPU::setupFeatures()+0x67>
c00138cc:	52                   	push   edx
c00138cd:	e8 5e ff ff ff       	call   c0013830 <CPU::setupGlobalPages()>
c00138d2:	58                   	pop    eax
c00138d3:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00138da:	74 0c                	je     c00138e8 <CPU::setupFeatures()+0x7c>
c00138dc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138e0:	83 c4 0c             	add    esp,0xc
c00138e3:	e9 0a ff ff ff       	jmp    c00137f2 <CPU::setupPAT()>
c00138e8:	83 c4 0c             	add    esp,0xc
c00138eb:	c3                   	ret    

c00138ec <CPU::open(int, int, void*)>:
c00138ec:	57                   	push   edi
c00138ed:	56                   	push   esi
c00138ee:	53                   	push   ebx
c00138ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138f7:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00138fd:	83 ec 0c             	sub    esp,0xc
c0013900:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013906:	68 94 40 02 c0       	push   0xc0024094
c001390b:	e8 0d 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013910:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013916:	89 04 24             	mov    DWORD PTR [esp],eax
c0013919:	e8 9e 59 ff ff       	call   c00092bc <GDT::setup()>
c001391e:	c7 04 24 a6 40 02 c0 	mov    DWORD PTR [esp],0xc00240a6
c0013925:	e8 f3 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001392a:	83 c4 0c             	add    esp,0xc
c001392d:	6a 00                	push   0x0
c001392f:	68 ef be ad de       	push   0xdeadbeef
c0013934:	57                   	push   edi
c0013935:	e8 e6 76 ff ff       	call   c000b020 <TSS::setup(unsigned long, unsigned long)>
c001393a:	c7 04 24 b8 40 02 c0 	mov    DWORD PTR [esp],0xc00240b8
c0013941:	e8 d7 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013946:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013949:	e8 b2 76 ff ff       	call   c000b000 <TSS::flush()>
c001394e:	c7 04 24 cc 40 02 c0 	mov    DWORD PTR [esp],0xc00240cc
c0013955:	e8 c3 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001395a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013960:	89 04 24             	mov    DWORD PTR [esp],eax
c0013963:	e8 be 5b ff ff       	call   c0009526 <IDT::setup()>
c0013968:	c7 04 24 de 40 02 c0 	mov    DWORD PTR [esp],0xc00240de
c001396f:	e8 a9 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013974:	b8 00 04 00 00       	mov    eax,0x400
c0013979:	0f 23 f8             	mov    db7,eax
c001397c:	c7 04 24 fc 40 02 c0 	mov    DWORD PTR [esp],0xc00240fc
c0013983:	e8 95 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013988:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013992:	e8 34 64 ff ff       	call   c0009dcb <Phys::allocatePage()>
c0013997:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001399d:	89 30                	mov    DWORD PTR [eax],esi
c001399f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00139a5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00139a8:	c7 04 24 1e 41 02 c0 	mov    DWORD PTR [esp],0xc002411e
c00139af:	e8 69 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139b4:	58                   	pop    eax
c00139b5:	5a                   	pop    edx
c00139b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00139bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00139c0:	e8 55 86 ff ff       	call   c000c01a <VAS::setCPUSpecific(unsigned long)>
c00139c5:	c7 04 24 46 41 02 c0 	mov    DWORD PTR [esp],0xc0024146
c00139cc:	e8 4c 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139d4:	e8 fd f3 ff ff       	call   c0012dd6 <CPU::detectFeatures()>
c00139d9:	c7 04 24 69 41 02 c0 	mov    DWORD PTR [esp],0xc0024169
c00139e0:	e8 38 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139e5:	e8 cc b8 ff ff       	call   c000f2b6 <setupInterruptController()>
c00139ea:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139f0:	c7 04 24 8d 41 02 c0 	mov    DWORD PTR [esp],0xc002418d
c00139f7:	e8 21 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139fc:	a1 e0 63 02 c0       	mov    eax,ds:0xc00263e0
c0013a01:	83 e0 10             	and    eax,0x10
c0013a04:	83 f8 01             	cmp    eax,0x1
c0013a07:	19 c0                	sbb    eax,eax
c0013a09:	83 e0 46             	and    eax,0x46
c0013a0c:	83 c0 1e             	add    eax,0x1e
c0013a0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a12:	e8 89 ce ff ff       	call   c00108a0 <setupTimer(int)>
c0013a17:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013a1d:	c7 04 24 a8 41 02 c0 	mov    DWORD PTR [esp],0xc00241a8
c0013a24:	e8 f4 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a2c:	e8 3b fe ff ff       	call   c001386c <CPU::setupFeatures()>
c0013a31:	c7 04 24 c3 41 02 c0 	mov    DWORD PTR [esp],0xc00241c3
c0013a38:	e8 e0 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	31 c0                	xor    eax,eax
c0013a42:	5b                   	pop    ebx
c0013a43:	5e                   	pop    esi
c0013a44:	5f                   	pop    edi
c0013a45:	c3                   	ret    

c0013a46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a46:	57                   	push   edi
c0013a47:	56                   	push   esi
c0013a48:	53                   	push   ebx
c0013a49:	51                   	push   ecx
c0013a4a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a4e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a51:	0f 02 c0             	lar    eax,ax
c0013a54:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a57:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a5b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a5e:	88 ca                	mov    dl,cl
c0013a60:	c0 ea 06             	shr    dl,0x6
c0013a63:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a67:	89 ca                	mov    edx,ecx
c0013a69:	66 c1 ea 03          	shr    dx,0x3
c0013a6d:	83 e2 07             	and    edx,0x7
c0013a70:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a75:	88 17                	mov    BYTE PTR [edi],dl
c0013a77:	0f 84 a6 01 00 00    	je     c0013c23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a7d:	83 e1 07             	and    ecx,0x7
c0013a80:	80 f9 04             	cmp    cl,0x4
c0013a83:	0f 84 98 00 00 00    	je     c0013b21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a89:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a8e:	0f 95 c0             	setne  al
c0013a91:	80 f9 05             	cmp    cl,0x5
c0013a94:	0f 95 c2             	setne  dl
c0013a97:	08 c2                	or     dl,al
c0013a99:	74 79                	je     c0013b14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013a9b:	84 c9                	test   cl,cl
c0013a9d:	75 05                	jne    c0013aa4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013a9f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013aa2:	eb 3c                	jmp    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aa4:	80 f9 01             	cmp    cl,0x1
c0013aa7:	75 05                	jne    c0013aae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013aa9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013aac:	eb 32                	jmp    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aae:	80 f9 02             	cmp    cl,0x2
c0013ab1:	75 05                	jne    c0013ab8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013ab3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013ab6:	eb 28                	jmp    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ab8:	31 c0                	xor    eax,eax
c0013aba:	80 f9 03             	cmp    cl,0x3
c0013abd:	75 05                	jne    c0013ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013abf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013ac2:	eb 1c                	jmp    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ac4:	80 f9 05             	cmp    cl,0x5
c0013ac7:	75 05                	jne    c0013ace <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013ac9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013acc:	eb 12                	jmp    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ace:	80 f9 06             	cmp    cl,0x6
c0013ad1:	75 05                	jne    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013ad3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ad6:	eb 08                	jmp    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ad8:	80 f9 07             	cmp    cl,0x7
c0013adb:	75 03                	jne    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013add:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013ae0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013ae5:	75 10                	jne    c0013af7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013ae7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013aeb:	b9 03 00 00 00       	mov    ecx,0x3
c0013af0:	01 d0                	add    eax,edx
c0013af2:	e9 37 01 00 00       	jmp    c0013c2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013af7:	b9 02 00 00 00       	mov    ecx,0x2
c0013afc:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013b01:	0f 85 27 01 00 00    	jne    c0013c2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b07:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b0a:	b9 06 00 00 00       	mov    ecx,0x6
c0013b0f:	e9 1a 01 00 00       	jmp    c0013c2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b14:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013b17:	b9 06 00 00 00       	mov    ecx,0x6
c0013b1c:	e9 0f 01 00 00       	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b21:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b24:	88 ca                	mov    dl,cl
c0013b26:	c0 ea 06             	shr    dl,0x6
c0013b29:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b2d:	89 ca                	mov    edx,ecx
c0013b2f:	66 c1 ea 03          	shr    dx,0x3
c0013b33:	83 e2 07             	and    edx,0x7
c0013b36:	80 e1 07             	and    cl,0x7
c0013b39:	75 05                	jne    c0013b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b3b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b3e:	eb 4c                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b40:	80 f9 01             	cmp    cl,0x1
c0013b43:	75 05                	jne    c0013b4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b45:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b48:	eb 42                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b4a:	80 f9 02             	cmp    cl,0x2
c0013b4d:	75 05                	jne    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b4f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b52:	eb 38                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b54:	80 f9 03             	cmp    cl,0x3
c0013b57:	75 05                	jne    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b59:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b5c:	eb 2e                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b5e:	80 f9 04             	cmp    cl,0x4
c0013b61:	75 12                	jne    c0013b75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b63:	f6 c4 60             	test   ah,0x60
c0013b66:	75 08                	jne    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b68:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b6b:	8d 78 14             	lea    edi,[eax+0x14]
c0013b6e:	eb 1c                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b70:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b73:	eb 17                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b75:	80 f9 05             	cmp    cl,0x5
c0013b78:	75 05                	jne    c0013b7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b7a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b7d:	eb 0d                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b7f:	80 f9 06             	cmp    cl,0x6
c0013b82:	75 05                	jne    c0013b89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b84:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b87:	eb 03                	jmp    c0013b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b89:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b8c:	84 d2                	test   dl,dl
c0013b8e:	75 05                	jne    c0013b95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b90:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b93:	eb 3c                	jmp    c0013bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b95:	80 fa 01             	cmp    dl,0x1
c0013b98:	75 05                	jne    c0013b9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013b9a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b9d:	eb 32                	jmp    c0013bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b9f:	80 fa 02             	cmp    dl,0x2
c0013ba2:	75 05                	jne    c0013ba9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013ba4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013ba7:	eb 28                	jmp    c0013bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ba9:	80 fa 03             	cmp    dl,0x3
c0013bac:	75 05                	jne    c0013bb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013bae:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013bb1:	eb 1e                	jmp    c0013bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bb3:	31 c0                	xor    eax,eax
c0013bb5:	80 fa 04             	cmp    dl,0x4
c0013bb8:	74 17                	je     c0013bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bba:	80 fa 05             	cmp    dl,0x5
c0013bbd:	75 05                	jne    c0013bc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013bbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013bc2:	eb 0d                	jmp    c0013bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bc4:	80 fa 06             	cmp    dl,0x6
c0013bc7:	75 05                	jne    c0013bce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013bc9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013bcc:	eb 03                	jmp    c0013bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013bd1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bd6:	0f 94 c2             	sete   dl
c0013bd9:	80 f9 05             	cmp    cl,0x5
c0013bdc:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013be0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013be5:	d3 e0                	shl    eax,cl
c0013be7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013beb:	74 0a                	je     c0013bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013bed:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bf0:	b9 07 00 00 00       	mov    ecx,0x7
c0013bf5:	eb 37                	jmp    c0013c2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bf7:	01 f8                	add    eax,edi
c0013bf9:	b9 03 00 00 00       	mov    ecx,0x3
c0013bfe:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c03:	74 2b                	je     c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c05:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c0a:	75 0d                	jne    c0013c19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c0c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013c10:	01 c8                	add    eax,ecx
c0013c12:	b9 04 00 00 00       	mov    ecx,0x4
c0013c17:	eb 17                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c19:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c1c:	b9 07 00 00 00       	mov    ecx,0x7
c0013c21:	eb 0d                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c23:	b9 02 00 00 00       	mov    ecx,0x2
c0013c28:	b2 01                	mov    dl,0x1
c0013c2a:	31 c0                	xor    eax,eax
c0013c2c:	eb 02                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c2e:	31 d2                	xor    edx,edx
c0013c30:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c34:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c3a:	88 11                	mov    BYTE PTR [ecx],dl
c0013c3c:	5a                   	pop    edx
c0013c3d:	5b                   	pop    ebx
c0013c3e:	5e                   	pop    esi
c0013c3f:	5f                   	pop    edi
c0013c40:	c3                   	ret    

c0013c41 <Krnl::smpEntry()>:
c0013c41:	eb fe                	jmp    c0013c41 <Krnl::smpEntry()>

c0013c43 <Krnl::startCPU(int)>:
c0013c43:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0013c48:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c4f:	0f 84 36 01 00 00    	je     c0013d8b <Krnl::startCPU(int)+0x148>
c0013c55:	53                   	push   ebx
c0013c56:	83 ec 10             	sub    esp,0x10
c0013c59:	fa                   	cli    
c0013c5a:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0013c60:	6a 1b                	push   0x1b
c0013c62:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c0013c68:	e8 b7 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c72:	89 c3                	mov    ebx,eax
c0013c74:	58                   	pop    eax
c0013c75:	5a                   	pop    edx
c0013c76:	53                   	push   ebx
c0013c77:	68 0c 42 02 c0       	push   0xc002420c
c0013c7c:	e8 ea 8d ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0013c81:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c99:	c1 e0 18             	shl    eax,0x18
c0013c9c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013ca2:	83 c4 10             	add    esp,0x10
c0013ca5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013cab:	09 c2                	or     edx,eax
c0013cad:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013cb3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013cb9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cbf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cc5:	80 cd c5             	or     ch,0xc5
c0013cc8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cce:	f3 90                	pause  
c0013cd0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cd2:	0f ba e1 0c          	bt     ecx,0xc
c0013cd6:	72 f6                	jb     c0013cce <Krnl::startCPU(int)+0x8b>
c0013cd8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cde:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013ce4:	09 c1                	or     ecx,eax
c0013ce6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013cec:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cf2:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cf8:	80 cd 85             	or     ch,0x85
c0013cfb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d01:	f3 90                	pause  
c0013d03:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d05:	0f ba e1 0c          	bt     ecx,0xc
c0013d09:	72 f6                	jb     c0013d01 <Krnl::startCPU(int)+0xbe>
c0013d0b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d15:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d1b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d21:	09 c1                	or     ecx,eax
c0013d23:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d29:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d2f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d35:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d3b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d41:	f3 90                	pause  
c0013d43:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d45:	0f ba e1 0c          	bt     ecx,0xc
c0013d49:	72 f6                	jb     c0013d41 <Krnl::startCPU(int)+0xfe>
c0013d4b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d55:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d5b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d61:	09 c8                	or     eax,ecx
c0013d63:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d69:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d6f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d74:	0d 02 06 00 00       	or     eax,0x602
c0013d79:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d7f:	f3 90                	pause  
c0013d81:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d83:	0f ba e0 0c          	bt     eax,0xc
c0013d87:	72 f6                	jb     c0013d7f <Krnl::startCPU(int)+0x13c>
c0013d89:	eb fe                	jmp    c0013d89 <Krnl::startCPU(int)+0x146>
c0013d8b:	c3                   	ret    

c0013d8c <Krnl::startCPUs()>:
c0013d8c:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0013d91:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d97:	88 c2                	mov    dl,al
c0013d99:	83 e2 0a             	and    edx,0xa
c0013d9c:	80 fa 0a             	cmp    dl,0xa
c0013d9f:	75 09                	jne    c0013daa <Krnl::startCPUs()+0x1e>
c0013da1:	a8 01                	test   al,0x1
c0013da3:	74 05                	je     c0013daa <Krnl::startCPUs()+0x1e>
c0013da5:	e9 f1 c3 fe ff       	jmp    c000019b <prepareTramp>
c0013daa:	c3                   	ret    
c0013dab:	90                   	nop

c0013dac <EnvVarContainer::getEnv(char const*)>:
c0013dac:	57                   	push   edi
c0013dad:	56                   	push   esi
c0013dae:	53                   	push   ebx
c0013daf:	31 db                	xor    ebx,ebx
c0013db1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013db5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013db7:	7e 2b                	jle    c0013de4 <EnvVarContainer::getEnv(char const*)+0x38>
c0013db9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013dc0:	50                   	push   eax
c0013dc1:	50                   	push   eax
c0013dc2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dc5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013dc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dcc:	e8 fb c9 fe ff       	call   c00007cc <strcmp>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	85 c0                	test   eax,eax
c0013dd6:	75 09                	jne    c0013de1 <EnvVarContainer::getEnv(char const*)+0x35>
c0013dd8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013ddb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013ddf:	eb 05                	jmp    c0013de6 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013de1:	43                   	inc    ebx
c0013de2:	eb d1                	jmp    c0013db5 <EnvVarContainer::getEnv(char const*)+0x9>
c0013de4:	31 c0                	xor    eax,eax
c0013de6:	5b                   	pop    ebx
c0013de7:	5e                   	pop    esi
c0013de8:	5f                   	pop    edi
c0013de9:	c3                   	ret    

c0013dea <EnvVarContainer::setEnv(char const*, char const*)>:
c0013dea:	55                   	push   ebp
c0013deb:	57                   	push   edi
c0013dec:	56                   	push   esi
c0013ded:	53                   	push   ebx
c0013dee:	83 ec 28             	sub    esp,0x28
c0013df1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013df5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013df9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013dfd:	56                   	push   esi
c0013dfe:	e8 9d c8 fe ff       	call   c00006a0 <strlen>
c0013e03:	40                   	inc    eax
c0013e04:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e07:	e8 b7 5b ff ff       	call   c00099c3 <malloc>
c0013e0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e13:	e8 88 c8 fe ff       	call   c00006a0 <strlen>
c0013e18:	40                   	inc    eax
c0013e19:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e1c:	e8 a2 5b ff ff       	call   c00099c3 <malloc>
c0013e21:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e28:	e8 73 c8 fe ff       	call   c00006a0 <strlen>
c0013e2d:	83 c4 0c             	add    esp,0xc
c0013e30:	40                   	inc    eax
c0013e31:	50                   	push   eax
c0013e32:	6a 00                	push   0x0
c0013e34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e38:	e8 47 c8 fe ff       	call   c0000684 <memset>
c0013e3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e40:	e8 5b c8 fe ff       	call   c00006a0 <strlen>
c0013e45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e49:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e51:	89 de                	mov    esi,ebx
c0013e53:	e8 48 c8 fe ff       	call   c00006a0 <strlen>
c0013e58:	83 c4 0c             	add    esp,0xc
c0013e5b:	40                   	inc    eax
c0013e5c:	50                   	push   eax
c0013e5d:	6a 00                	push   0x0
c0013e5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e63:	e8 1c c8 fe ff       	call   c0000684 <memset>
c0013e68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e6b:	e8 30 c8 fe ff       	call   c00006a0 <strlen>
c0013e70:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e74:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e79:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e7c:	40                   	inc    eax
c0013e7d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e80:	c1 e0 03             	shl    eax,0x3
c0013e83:	5a                   	pop    edx
c0013e84:	59                   	pop    ecx
c0013e85:	50                   	push   eax
c0013e86:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e89:	e8 21 5b ff ff       	call   c00099af <realloc>
c0013e8e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e92:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e95:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013e98:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013e9c:	b9 08 00 00 00       	mov    ecx,0x8
c0013ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ea3:	83 c4 2c             	add    esp,0x2c
c0013ea6:	5b                   	pop    ebx
c0013ea7:	5e                   	pop    esi
c0013ea8:	5f                   	pop    edi
c0013ea9:	5d                   	pop    ebp
c0013eaa:	c3                   	ret    
c0013eab:	90                   	nop

c0013eac <EnvVarContainer::deleteEnv(char const*)>:
c0013eac:	c3                   	ret    
c0013ead:	90                   	nop

c0013eae <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013eae:	55                   	push   ebp
c0013eaf:	57                   	push   edi
c0013eb0:	56                   	push   esi
c0013eb1:	53                   	push   ebx
c0013eb2:	81 ec 38 01 00 00    	sub    esp,0x138
c0013eb8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013ebf:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013ec6:	68 14 01 00 00       	push   0x114
c0013ecb:	e8 f3 5a ff ff       	call   c00099c3 <malloc>
c0013ed0:	83 c4 0c             	add    esp,0xc
c0013ed3:	89 c3                	mov    ebx,eax
c0013ed5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013ed8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013edf:	50                   	push   eax
c0013ee0:	e8 f1 90 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0013ee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ee8:	e8 bb 93 ff ff       	call   c000d2a8 <File::exists()>
c0013eed:	83 c4 10             	add    esp,0x10
c0013ef0:	84 c0                	test   al,al
c0013ef2:	75 31                	jne    c0013f25 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013ef4:	50                   	push   eax
c0013ef5:	50                   	push   eax
c0013ef6:	6a 12                	push   0x12
c0013ef8:	53                   	push   ebx
c0013ef9:	e8 3c 91 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0013efe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f00:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013f03:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f06:	e8 95 c7 fe ff       	call   c00006a0 <strlen>
c0013f0b:	5a                   	pop    edx
c0013f0c:	31 d2                	xor    edx,edx
c0013f0e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f12:	51                   	push   ecx
c0013f13:	56                   	push   esi
c0013f14:	52                   	push   edx
c0013f15:	50                   	push   eax
c0013f16:	53                   	push   ebx
c0013f17:	ff d7                	call   edi
c0013f19:	83 c4 14             	add    esp,0x14
c0013f1c:	53                   	push   ebx
c0013f1d:	e8 76 91 ff ff       	call   c000d098 <File::close()>
c0013f22:	83 c4 10             	add    esp,0x10
c0013f25:	56                   	push   esi
c0013f26:	31 f6                	xor    esi,esi
c0013f28:	68 00 01 00 00       	push   0x100
c0013f2d:	6a 00                	push   0x0
c0013f2f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f33:	50                   	push   eax
c0013f34:	e8 4b c7 fe ff       	call   c0000684 <memset>
c0013f39:	5f                   	pop    edi
c0013f3a:	58                   	pop    eax
c0013f3b:	6a 01                	push   0x1
c0013f3d:	53                   	push   ebx
c0013f3e:	e8 f7 90 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f4e:	83 ec 0c             	sub    esp,0xc
c0013f51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f53:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f57:	51                   	push   ecx
c0013f58:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f5c:	52                   	push   edx
c0013f5d:	6a 00                	push   0x0
c0013f5f:	6a 01                	push   0x1
c0013f61:	53                   	push   ebx
c0013f62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f65:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f69:	83 c4 20             	add    esp,0x20
c0013f6c:	3c 0d                	cmp    al,0xd
c0013f6e:	0f 84 09 01 00 00    	je     c001407d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f79:	0f 84 ef 00 00 00    	je     c001406e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f7f:	3c 0a                	cmp    al,0xa
c0013f81:	74 13                	je     c0013f96 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f88:	74 0c                	je     c0013f96 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f8a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f90:	0f 8e d8 00 00 00    	jle    c001406e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f9a:	83 ec 0c             	sub    esp,0xc
c0013f9d:	8d 78 01             	lea    edi,[eax+0x1]
c0013fa0:	57                   	push   edi
c0013fa1:	e8 1d 5a ff ff       	call   c00099c3 <malloc>
c0013fa6:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013faa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013fae:	8d 56 04             	lea    edx,[esi+0x4]
c0013fb1:	89 14 24             	mov    DWORD PTR [esp],edx
c0013fb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013fb8:	e8 06 5a ff ff       	call   c00099c3 <malloc>
c0013fbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013fc1:	83 c4 0c             	add    esp,0xc
c0013fc4:	57                   	push   edi
c0013fc5:	6a 00                	push   0x0
c0013fc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013fcb:	e8 b4 c6 fe ff       	call   c0000684 <memset>
c0013fd0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fd4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fd8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013fdc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fde:	83 c4 0c             	add    esp,0xc
c0013fe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fe5:	52                   	push   edx
c0013fe6:	6a 00                	push   0x0
c0013fe8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013fec:	e8 93 c6 fe ff       	call   c0000684 <memset>
c0013ff1:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013ff5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013ff9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ffc:	e8 9f c6 fe ff       	call   c00006a0 <strlen>
c0014001:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014005:	89 c1                	mov    ecx,eax
c0014007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014009:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001400c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001400f:	40                   	inc    eax
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014016:	85 d2                	test   edx,edx
c0014018:	75 0c                	jne    c0014026 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001401a:	83 ec 0c             	sub    esp,0xc
c001401d:	6a 08                	push   0x8
c001401f:	e8 9f 59 ff ff       	call   c00099c3 <malloc>
c0014024:	eb 0c                	jmp    c0014032 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014026:	c1 e0 03             	shl    eax,0x3
c0014029:	51                   	push   ecx
c001402a:	51                   	push   ecx
c001402b:	50                   	push   eax
c001402c:	52                   	push   edx
c001402d:	e8 7d 59 ff ff       	call   c00099af <realloc>
c0014032:	83 c4 10             	add    esp,0x10
c0014035:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014038:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001403b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001403e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014042:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014046:	b9 08 00 00 00       	mov    ecx,0x8
c001404b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001404d:	31 f6                	xor    esi,esi
c001404f:	50                   	push   eax
c0014050:	68 00 01 00 00       	push   0x100
c0014055:	6a 00                	push   0x0
c0014057:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001405b:	50                   	push   eax
c001405c:	e8 23 c6 fe ff       	call   c0000684 <memset>
c0014061:	83 c4 10             	add    esp,0x10
c0014064:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001406c:	eb 0f                	jmp    c001407d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001406e:	3c 3d                	cmp    al,0x3d
c0014070:	74 07                	je     c0014079 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014072:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014076:	46                   	inc    esi
c0014077:	eb 04                	jmp    c001407d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014079:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001407d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014082:	0f 85 c6 fe ff ff    	jne    c0013f4e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014088:	81 c4 2c 01 00 00    	add    esp,0x12c
c001408e:	5b                   	pop    ebx
c001408f:	5e                   	pop    esi
c0014090:	5f                   	pop    edi
c0014091:	5d                   	pop    ebp
c0014092:	c3                   	ret    
c0014093:	90                   	nop

c0014094 <EnvVarContainer::__loadSystem()>:
c0014094:	83 ec 10             	sub    esp,0x10
c0014097:	68 a0 5d 02 c0       	push   0xc0025da0
c001409c:	68 1d 42 02 c0       	push   0xc002421d
c00140a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a5:	e8 04 fe ff ff       	call   c0013eae <EnvVarContainer::loadFrom(char const*, char const*)>
c00140aa:	83 c4 1c             	add    esp,0x1c
c00140ad:	c3                   	ret    

c00140ae <EnvVarContainer::__loadUser()>:
c00140ae:	c3                   	ret    
c00140af:	90                   	nop

c00140b0 <EnvVarContainer::EnvVarContainer(Process*)>:
c00140b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00140c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140d0:	90                   	nop
c00140d1:	c3                   	ret    

c00140d2 <EnvVarContainer::~EnvVarContainer()>:
c00140d2:	83 ec 0c             	sub    esp,0xc
c00140d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140dc:	85 c0                	test   eax,eax
c00140de:	74 1d                	je     c00140fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00140e6:	85 c0                	test   eax,eax
c00140e8:	74 13                	je     c00140fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140f1:	83 ec 0c             	sub    esp,0xc
c00140f4:	50                   	push   eax
c00140f5:	e8 d9 58 ff ff       	call   c00099d3 <free>
c00140fa:	83 c4 10             	add    esp,0x10
c00140fd:	90                   	nop
c00140fe:	83 c4 0c             	add    esp,0xc
c0014101:	c3                   	ret    

c0014102 <Krnl::getEnv(Process*, char const*)>:
c0014102:	53                   	push   ebx
c0014103:	83 ec 08             	sub    esp,0x8
c0014106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001410a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001410e:	39 05 f0 78 02 c0    	cmp    DWORD PTR ds:0xc00278f0,eax
c0014114:	74 04                	je     c001411a <Krnl::getEnv(Process*, char const*)+0x18>
c0014116:	85 c0                	test   eax,eax
c0014118:	75 0b                	jne    c0014125 <Krnl::getEnv(Process*, char const*)+0x23>
c001411a:	a1 d4 6e 02 c0       	mov    eax,ds:0xc0026ed4
c001411f:	85 c0                	test   eax,eax
c0014121:	75 19                	jne    c001413c <Krnl::getEnv(Process*, char const*)+0x3a>
c0014123:	eb 27                	jmp    c001414c <Krnl::getEnv(Process*, char const*)+0x4a>
c0014125:	52                   	push   edx
c0014126:	52                   	push   edx
c0014127:	53                   	push   ebx
c0014128:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001412e:	e8 79 fc ff ff       	call   c0013dac <EnvVarContainer::getEnv(char const*)>
c0014133:	83 c4 10             	add    esp,0x10
c0014136:	85 c0                	test   eax,eax
c0014138:	75 28                	jne    c0014162 <Krnl::getEnv(Process*, char const*)+0x60>
c001413a:	eb de                	jmp    c001411a <Krnl::getEnv(Process*, char const*)+0x18>
c001413c:	52                   	push   edx
c001413d:	52                   	push   edx
c001413e:	53                   	push   ebx
c001413f:	50                   	push   eax
c0014140:	e8 67 fc ff ff       	call   c0013dac <EnvVarContainer::getEnv(char const*)>
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	85 c0                	test   eax,eax
c001414a:	75 16                	jne    c0014162 <Krnl::getEnv(Process*, char const*)+0x60>
c001414c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014150:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0014155:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014159:	83 c4 08             	add    esp,0x8
c001415c:	5b                   	pop    ebx
c001415d:	e9 4a fc ff ff       	jmp    c0013dac <EnvVarContainer::getEnv(char const*)>
c0014162:	83 c4 08             	add    esp,0x8
c0014165:	5b                   	pop    ebx
c0014166:	c3                   	ret    

c0014167 <Krnl::setEnvSystem(char const*, char const*)>:
c0014167:	83 ec 10             	sub    esp,0x10
c001416a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001416e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014172:	ff 35 d8 6e 02 c0    	push   DWORD PTR ds:0xc0026ed8
c0014178:	e8 6d fc ff ff       	call   c0013dea <EnvVarContainer::setEnv(char const*, char const*)>
c001417d:	83 c4 1c             	add    esp,0x1c
c0014180:	c3                   	ret    

c0014181 <Krnl::setEnvUser(char const*, char const*)>:
c0014181:	a1 d4 6e 02 c0       	mov    eax,ds:0xc0026ed4
c0014186:	85 c0                	test   eax,eax
c0014188:	74 15                	je     c001419f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001418a:	83 ec 10             	sub    esp,0x10
c001418d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014191:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014195:	50                   	push   eax
c0014196:	e8 4f fc ff ff       	call   c0013dea <EnvVarContainer::setEnv(char const*, char const*)>
c001419b:	83 c4 1c             	add    esp,0x1c
c001419e:	c3                   	ret    
c001419f:	c3                   	ret    

c00141a0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00141a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141a4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00141aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ae:	e9 37 fc ff ff       	jmp    c0013dea <EnvVarContainer::setEnv(char const*, char const*)>

c00141b3 <Krnl::deleteEnvSystem(char const*)>:
c00141b3:	c3                   	ret    

c00141b4 <Krnl::deleteEnvUser(char const*)>:
c00141b4:	c3                   	ret    

c00141b5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00141b5:	c3                   	ret    

c00141b6 <Krnl::newProcessEnv(Process*)>:
c00141b6:	83 ec 28             	sub    esp,0x28
c00141b9:	6a 0c                	push   0xc
c00141bb:	e8 03 58 ff ff       	call   c00099c3 <malloc>
c00141c0:	5a                   	pop    edx
c00141c1:	59                   	pop    ecx
c00141c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141c6:	50                   	push   eax
c00141c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141cb:	e8 e0 fe ff ff       	call   c00140b0 <EnvVarContainer::EnvVarContainer(Process*)>
c00141d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141d4:	83 c4 2c             	add    esp,0x2c
c00141d7:	c3                   	ret    

c00141d8 <Krnl::copyProcessEnv(Process*, Process*)>:
c00141d8:	57                   	push   edi
c00141d9:	56                   	push   esi
c00141da:	53                   	push   ebx
c00141db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141df:	83 ec 0c             	sub    esp,0xc
c00141e2:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00141e8:	6a 0c                	push   0xc
c00141ea:	e8 d4 57 ff ff       	call   c00099c3 <malloc>
c00141ef:	89 c3                	mov    ebx,eax
c00141f1:	58                   	pop    eax
c00141f2:	5a                   	pop    edx
c00141f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f7:	53                   	push   ebx
c00141f8:	e8 b3 fe ff ff       	call   c00140b0 <EnvVarContainer::EnvVarContainer(Process*)>
c00141fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00141ff:	89 03                	mov    DWORD PTR [ebx],eax
c0014201:	c1 e0 03             	shl    eax,0x3
c0014204:	89 04 24             	mov    DWORD PTR [esp],eax
c0014207:	e8 b7 57 ff ff       	call   c00099c3 <malloc>
c001420c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001420f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014211:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014214:	c1 e1 03             	shl    ecx,0x3
c0014217:	89 c7                	mov    edi,eax
c0014219:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	89 d8                	mov    eax,ebx
c0014220:	5b                   	pop    ebx
c0014221:	5e                   	pop    esi
c0014222:	5f                   	pop    edi
c0014223:	c3                   	ret    

c0014224 <Krnl::loadSystemEnv()>:
c0014224:	53                   	push   ebx
c0014225:	83 ec 14             	sub    esp,0x14
c0014228:	6a 0c                	push   0xc
c001422a:	e8 94 57 ff ff       	call   c00099c3 <malloc>
c001422f:	89 c3                	mov    ebx,eax
c0014231:	58                   	pop    eax
c0014232:	5a                   	pop    edx
c0014233:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014239:	53                   	push   ebx
c001423a:	e8 71 fe ff ff       	call   c00140b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001423f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014242:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0014248:	e8 47 fe ff ff       	call   c0014094 <EnvVarContainer::__loadSystem()>
c001424d:	83 c4 18             	add    esp,0x18
c0014250:	5b                   	pop    ebx
c0014251:	c3                   	ret    

c0014252 <Krnl::loadUserEnv()>:
c0014252:	53                   	push   ebx
c0014253:	83 ec 14             	sub    esp,0x14
c0014256:	6a 0c                	push   0xc
c0014258:	e8 66 57 ff ff       	call   c00099c3 <malloc>
c001425d:	89 c3                	mov    ebx,eax
c001425f:	58                   	pop    eax
c0014260:	5a                   	pop    edx
c0014261:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014267:	53                   	push   ebx
c0014268:	e8 43 fe ff ff       	call   c00140b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001426d:	89 1d d4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed4,ebx
c0014273:	83 c4 18             	add    esp,0x18
c0014276:	5b                   	pop    ebx
c0014277:	c3                   	ret    

c0014278 <Krnl::flushEnv()>:
c0014278:	c3                   	ret    

c0014279 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001427d:	8b 15 d4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ed4
c0014283:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014289:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c001428e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014290:	03 01                	add    eax,DWORD PTR [ecx]
c0014292:	85 d2                	test   edx,edx
c0014294:	74 02                	je     c0014298 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014296:	03 02                	add    eax,DWORD PTR [edx]
c0014298:	c3                   	ret    

c0014299 <Krnl::getProcessEnvPair(Process*, int)>:
c0014299:	57                   	push   edi
c001429a:	56                   	push   esi
c001429b:	8b 35 d4 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed4
c00142a1:	53                   	push   ebx
c00142a2:	85 f6                	test   esi,esi
c00142a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142ac:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00142b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00142b8:	75 16                	jne    c00142d0 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00142ba:	39 c2                	cmp    edx,eax
c00142bc:	7c 16                	jl     c00142d4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142be:	8b 0d d8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ed8
c00142c4:	8b 31                	mov    esi,DWORD PTR [ecx]
c00142c6:	01 c6                	add    esi,eax
c00142c8:	39 d6                	cmp    esi,edx
c00142ca:	7e 3c                	jle    c0014308 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142cc:	29 c2                	sub    edx,eax
c00142ce:	eb 04                	jmp    c00142d4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142d0:	39 c2                	cmp    edx,eax
c00142d2:	7d 05                	jge    c00142d9 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00142d4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00142d7:	eb 20                	jmp    c00142f9 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00142d9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00142db:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00142de:	39 d1                	cmp    ecx,edx
c00142e0:	7e 04                	jle    c00142e6 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00142e2:	29 c2                	sub    edx,eax
c00142e4:	eb 10                	jmp    c00142f6 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142e6:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c00142ec:	03 0e                	add    ecx,DWORD PTR [esi]
c00142ee:	39 d1                	cmp    ecx,edx
c00142f0:	7e 16                	jle    c0014308 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142f2:	29 c2                	sub    edx,eax
c00142f4:	29 fa                	sub    edx,edi
c00142f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142f9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00142fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00142fe:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014301:	89 03                	mov    DWORD PTR [ebx],eax
c0014303:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014306:	eb 1d                	jmp    c0014325 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014308:	83 ec 0c             	sub    esp,0xc
c001430b:	68 3f 42 02 c0       	push   0xc002423f
c0014310:	e8 18 00 00 00       	call   c001432d <Krnl::panic(char const*)>
c0014315:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001431b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014322:	83 c4 10             	add    esp,0x10
c0014325:	89 d8                	mov    eax,ebx
c0014327:	5b                   	pop    ebx
c0014328:	5e                   	pop    esi
c0014329:	5f                   	pop    edi
c001432a:	c2 04 00             	ret    0x4

c001432d <Krnl::panic(char const*)>:
c001432d:	55                   	push   ebp
c001432e:	89 e5                	mov    ebp,esp
c0014330:	53                   	push   ebx
c0014331:	83 ec 10             	sub    esp,0x10
c0014334:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014337:	fa                   	cli    
c0014338:	c6 05 e4 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ee4,0x1
c001433f:	53                   	push   ebx
c0014340:	e8 d8 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014345:	58                   	pop    eax
c0014346:	c6 05 a0 57 02 c0 00 	mov    BYTE PTR ds:0xc00257a0,0x0
c001434d:	5a                   	pop    edx
c001434e:	53                   	push   ebx
c001434f:	68 59 42 02 c0       	push   0xc0024259
c0014354:	e8 12 87 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0014359:	59                   	pop    ecx
c001435a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001435f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014365:	e8 5f 64 ff ff       	call   c000a7c9 <setActiveTerminal(VgaText*)>
c001436a:	83 c4 0c             	add    esp,0xc
c001436d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014372:	6a 01                	push   0x1
c0014374:	6a 0f                	push   0xf
c0014376:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001437c:	e8 a7 62 ff ff       	call   c000a628 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014381:	58                   	pop    eax
c0014382:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014387:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001438d:	e8 b8 67 ff ff       	call   c000ab4a <VgaText::clearScreen()>
c0014392:	58                   	pop    eax
c0014393:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014398:	5a                   	pop    edx
c0014399:	68 72 42 02 c0       	push   0xc0024272
c001439e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143a4:	e8 2d 69 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00143a9:	59                   	pop    ecx
c00143aa:	58                   	pop    eax
c00143ab:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143b0:	68 18 43 02 c0       	push   0xc0024318
c00143b5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143bb:	e8 16 69 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00143c0:	58                   	pop    eax
c00143c1:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143c6:	5a                   	pop    edx
c00143c7:	68 8e 42 02 c0       	push   0xc002428e
c00143cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143d2:	e8 ff 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00143d7:	59                   	pop    ecx
c00143d8:	58                   	pop    eax
c00143d9:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143de:	53                   	push   ebx
c00143df:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143e5:	e8 ec 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00143ea:	58                   	pop    eax
c00143eb:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143f0:	5a                   	pop    edx
c00143f1:	68 ae 42 02 c0       	push   0xc00242ae
c00143f6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143fc:	e8 d5 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c0014401:	a1 e0 6e 02 c0       	mov    eax,ds:0xc0026ee0
c0014406:	83 c4 10             	add    esp,0x10
c0014409:	85 c0                	test   eax,eax
c001440b:	74 02                	je     c001440f <Krnl::panic(char const*)+0xe2>
c001440d:	ff d0                	call   eax
c001440f:	83 ec 0c             	sub    esp,0xc
c0014412:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014415:	e8 af 30 00 00       	call   c00174c9 <Thr::getDriverNameFromAddress(unsigned long)>
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	89 c3                	mov    ebx,eax
c001441f:	85 c0                	test   eax,eax
c0014421:	0f 84 4e 02 00 00    	je     c0014675 <Krnl::panic(char const*)+0x348>
c0014427:	83 ec 08             	sub    esp,0x8
c001442a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001442f:	68 54 43 02 c0       	push   0xc0024354
c0014434:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001443a:	e8 97 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c001443f:	58                   	pop    eax
c0014440:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014445:	5a                   	pop    edx
c0014446:	68 8e 42 02 c0       	push   0xc002428e
c001444b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014451:	e8 80 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c0014456:	59                   	pop    ecx
c0014457:	58                   	pop    eax
c0014458:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001445d:	53                   	push   ebx
c001445e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014464:	e8 6d 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	83 ec 08             	sub    esp,0x8
c001446f:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014474:	68 ad 42 02 c0       	push   0xc00242ad
c0014479:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001447f:	e8 52 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c0014484:	58                   	pop    eax
c0014485:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001448a:	5a                   	pop    edx
c001448b:	68 ac 43 02 c0       	push   0xc00243ac
c0014490:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014496:	e8 3b 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c001449b:	59                   	pop    ecx
c001449c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00144a1:	5b                   	pop    ebx
c00144a2:	68 ec 43 02 c0       	push   0xc00243ec
c00144a7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144ad:	e8 24 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00144b2:	58                   	pop    eax
c00144b3:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00144b8:	5a                   	pop    edx
c00144b9:	68 99 42 02 c0       	push   0xc0024299
c00144be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144c4:	e8 0d 68 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00144c9:	59                   	pop    ecx
c00144ca:	5b                   	pop    ebx
c00144cb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144ce:	68 b1 42 02 c0       	push   0xc00242b1
c00144d3:	e8 93 85 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00144d8:	58                   	pop    eax
c00144d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144dc:	5a                   	pop    edx
c00144dd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144e0:	68 ba 42 02 c0       	push   0xc00242ba
c00144e5:	e8 81 85 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00144ea:	59                   	pop    ecx
c00144eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144ee:	5b                   	pop    ebx
c00144ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00144f1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144f4:	68 c3 42 02 c0       	push   0xc00242c3
c00144f9:	e8 6d 85 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00144fe:	58                   	pop    eax
c00144ff:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014504:	5a                   	pop    edx
c0014505:	68 30 44 02 c0       	push   0xc0024430
c001450a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014510:	e8 c1 67 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c0014515:	59                   	pop    ecx
c0014516:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001451b:	5b                   	pop    ebx
c001451c:	68 cc 42 02 c0       	push   0xc00242cc
c0014521:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014527:	e8 aa 67 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c001452c:	0f 20 c0             	mov    eax,cr0
c001452f:	5a                   	pop    edx
c0014530:	59                   	pop    ecx
c0014531:	50                   	push   eax
c0014532:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014537:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001453d:	e8 4e 67 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c0014542:	5b                   	pop    ebx
c0014543:	58                   	pop    eax
c0014544:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014549:	68 d6 42 02 c0       	push   0xc00242d6
c001454e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014554:	e8 7d 67 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c0014559:	0f 20 d0             	mov    eax,cr2
c001455c:	5a                   	pop    edx
c001455d:	59                   	pop    ecx
c001455e:	50                   	push   eax
c001455f:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014564:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001456a:	e8 21 67 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c001456f:	5b                   	pop    ebx
c0014570:	58                   	pop    eax
c0014571:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014576:	68 e0 42 02 c0       	push   0xc00242e0
c001457b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014581:	e8 50 67 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c0014586:	0f 20 d8             	mov    eax,cr3
c0014589:	5a                   	pop    edx
c001458a:	59                   	pop    ecx
c001458b:	50                   	push   eax
c001458c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014591:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014597:	e8 f4 66 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c001459c:	5b                   	pop    ebx
c001459d:	58                   	pop    eax
c001459e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145a3:	68 f3 42 02 c0       	push   0xc00242f3
c00145a8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145ae:	e8 23 67 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00145b3:	0f 20 e0             	mov    eax,cr4
c00145b6:	5a                   	pop    edx
c00145b7:	59                   	pop    ecx
c00145b8:	50                   	push   eax
c00145b9:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145c4:	e8 c7 66 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c00145c9:	5b                   	pop    ebx
c00145ca:	58                   	pop    eax
c00145cb:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145d0:	68 fd 42 02 c0       	push   0xc00242fd
c00145d5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145db:	e8 f6 66 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00145e0:	5a                   	pop    edx
c00145e1:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145e6:	59                   	pop    ecx
c00145e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145f0:	50                   	push   eax
c00145f1:	e8 9a 66 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c00145f6:	5b                   	pop    ebx
c00145f7:	58                   	pop    eax
c00145f8:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145fd:	68 14 43 02 c0       	push   0xc0024314
c0014602:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014608:	e8 c9 66 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c001460d:	5a                   	pop    edx
c001460e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014613:	59                   	pop    ecx
c0014614:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001461a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001461d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014620:	50                   	push   eax
c0014621:	e8 6a 66 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c0014626:	5b                   	pop    ebx
c0014627:	58                   	pop    eax
c0014628:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001462d:	68 14 43 02 c0       	push   0xc0024314
c0014632:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014638:	e8 99 66 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c001463d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014642:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014645:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001464b:	8b 12                	mov    edx,DWORD PTR [edx]
c001464d:	59                   	pop    ecx
c001464e:	5b                   	pop    ebx
c001464f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014652:	50                   	push   eax
c0014653:	e8 38 66 ff ff       	call   c000ac90 <VgaText::putx(unsigned int)>
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	b2 fe                	mov    dl,0xfe
c001465d:	e4 60                	in     al,0x60
c001465f:	3c 1c                	cmp    al,0x1c
c0014661:	74 04                	je     c0014667 <Krnl::panic(char const*)+0x33a>
c0014663:	3c 5a                	cmp    al,0x5a
c0014665:	75 f6                	jne    c001465d <Krnl::panic(char const*)+0x330>
c0014667:	e4 64                	in     al,0x64
c0014669:	a8 02                	test   al,0x2
c001466b:	75 fa                	jne    c0014667 <Krnl::panic(char const*)+0x33a>
c001466d:	88 d0                	mov    al,dl
c001466f:	e6 64                	out    0x64,al
c0014671:	fa                   	cli    
c0014672:	f4                   	hlt    
c0014673:	eb e8                	jmp    c001465d <Krnl::panic(char const*)+0x330>
c0014675:	50                   	push   eax
c0014676:	50                   	push   eax
c0014677:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001467c:	68 80 43 02 c0       	push   0xc0024380
c0014681:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014687:	e8 4a 66 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c001468c:	58                   	pop    eax
c001468d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014692:	5a                   	pop    edx
c0014693:	68 8e 42 02 c0       	push   0xc002428e
c0014698:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001469e:	e8 33 66 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00146a3:	59                   	pop    ecx
c00146a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a9:	5b                   	pop    ebx
c00146aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146ad:	83 c0 0c             	add    eax,0xc
c00146b0:	50                   	push   eax
c00146b1:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00146b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146bc:	e8 15 66 ff ff       	call   c000acd6 <VgaText::puts(char const*)>
c00146c1:	83 c4 10             	add    esp,0x10
c00146c4:	e9 a3 fd ff ff       	jmp    c001446c <Krnl::panic(char const*)+0x13f>
c00146c9:	66 90                	xchg   ax,ax
c00146cb:	90                   	nop

c00146cc <Net::switchEndian16(unsigned short)>:
c00146cc:	83 ec 04             	sub    esp,0x4
c00146cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146d3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00146d7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146db:	c1 f8 08             	sar    eax,0x8
c00146de:	89 c2                	mov    edx,eax
c00146e0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146e4:	c1 e0 08             	shl    eax,0x8
c00146e7:	09 d0                	or     eax,edx
c00146e9:	83 c4 04             	add    esp,0x4
c00146ec:	c3                   	ret    
c00146ed:	8d 76 00             	lea    esi,[esi+0x0]

c00146f0 <Net::switchEndian32(unsigned int)>:
c00146f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146f4:	c1 e8 18             	shr    eax,0x18
c00146f7:	89 c2                	mov    edx,eax
c00146f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146fd:	c1 e0 08             	shl    eax,0x8
c0014700:	25 00 00 ff 00       	and    eax,0xff0000
c0014705:	09 c2                	or     edx,eax
c0014707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001470b:	c1 e8 08             	shr    eax,0x8
c001470e:	25 00 ff 00 00       	and    eax,0xff00
c0014713:	09 c2                	or     edx,eax
c0014715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014719:	c1 e0 18             	shl    eax,0x18
c001471c:	09 d0                	or     eax,edx
c001471e:	c3                   	ret    
c001471f:	90                   	nop

c0014720 <Net::crc32Calc(unsigned char*, int)>:
c0014720:	83 ec 10             	sub    esp,0x10
c0014723:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014728:	75 0a                	jne    c0014734 <Net::crc32Calc(unsigned char*, int)+0x14>
c001472a:	b8 00 00 00 00       	mov    eax,0x0
c001472f:	e9 8c 00 00 00       	jmp    c00147c0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014734:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014739:	7f 09                	jg     c0014744 <Net::crc32Calc(unsigned char*, int)+0x24>
c001473b:	b8 00 00 00 00       	mov    eax,0x0
c0014740:	eb 7e                	jmp    c00147c0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014742:	66 90                	xchg   ax,ax
c0014744:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001474c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014758:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001475c:	7d 5a                	jge    c00147b8 <Net::crc32Calc(unsigned char*, int)+0x98>
c001475e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014762:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014766:	01 d0                	add    eax,edx
c0014768:	8a 00                	mov    al,BYTE PTR [eax]
c001476a:	0f b6 c0             	movzx  eax,al
c001476d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014779:	8d 76 00             	lea    esi,[esi+0x0]
c001477c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014781:	7f 2d                	jg     c00147b0 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014787:	83 e0 01             	and    eax,0x1
c001478a:	74 10                	je     c001479c <Net::crc32Calc(unsigned char*, int)+0x7c>
c001478c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014790:	d1 e8                	shr    eax,1
c0014792:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014797:	eb 0b                	jmp    c00147a4 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014799:	8d 76 00             	lea    esi,[esi+0x0]
c001479c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147a0:	d1 e8                	shr    eax,1
c00147a2:	66 90                	xchg   ax,ax
c00147a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00147ac:	eb ce                	jmp    c001477c <Net::crc32Calc(unsigned char*, int)+0x5c>
c00147ae:	66 90                	xchg   ax,ax
c00147b0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147b4:	eb 9e                	jmp    c0014754 <Net::crc32Calc(unsigned char*, int)+0x34>
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147bc:	f7 d0                	not    eax
c00147be:	66 90                	xchg   ax,ax
c00147c0:	83 c4 10             	add    esp,0x10
c00147c3:	c3                   	ret    

c00147c4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00147c4:	57                   	push   edi
c00147c5:	56                   	push   esi
c00147c6:	53                   	push   ebx
c00147c7:	83 ec 60             	sub    esp,0x60
c00147ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147d1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00147d5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00147dd:	8d 76 00             	lea    esi,[esi+0x0]
c00147e0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147e5:	7f 1d                	jg     c0014804 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147e7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147ee:	8d 50 01             	lea    edx,[eax+0x1]
c00147f1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147f8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00147fb:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00147ff:	eb df                	jmp    c00147e0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014801:	8d 76 00             	lea    esi,[esi+0x0]
c0014804:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001480b:	8d 50 01             	lea    edx,[eax+0x1]
c001480e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014815:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014818:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001481f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014823:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014827:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001482b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014833:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001483b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001483f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014843:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014847:	89 c6                	mov    esi,eax
c0014849:	89 d7                	mov    edi,edx
c001484b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001484d:	89 c8                	mov    eax,ecx
c001484f:	89 fa                	mov    edx,edi
c0014851:	89 f3                	mov    ebx,esi
c0014853:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014857:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001485b:	89 04 24             	mov    DWORD PTR [esp],eax
c001485e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014866:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001486d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014871:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014875:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014879:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014881:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014885:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014889:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001488d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014891:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014895:	89 c6                	mov    esi,eax
c0014897:	89 d7                	mov    edi,edx
c0014899:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001489b:	89 c8                	mov    eax,ecx
c001489d:	89 fa                	mov    edx,edi
c001489f:	89 f3                	mov    ebx,esi
c00148a1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00148a5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00148a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148ad:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148b5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00148bc:	0f b7 c0             	movzx  eax,ax
c00148bf:	c1 f8 08             	sar    eax,0x8
c00148c2:	89 c1                	mov    ecx,eax
c00148c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148cb:	8d 50 01             	lea    edx,[eax+0x1]
c00148ce:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148d5:	88 ca                	mov    dl,cl
c00148d7:	88 10                	mov    BYTE PTR [eax],dl
c00148d9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00148e0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00148ea:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148f1:	88 10                	mov    BYTE PTR [eax],dl
c00148f3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148f7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00148fb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014902:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014906:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001490a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001490e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014912:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014916:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001491a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001491e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014922:	89 c6                	mov    esi,eax
c0014924:	89 d7                	mov    edi,edx
c0014926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014928:	89 c8                	mov    eax,ecx
c001492a:	89 fa                	mov    edx,edi
c001492c:	89 f3                	mov    ebx,esi
c001492e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014932:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001493a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001493e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014945:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001494c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014950:	50                   	push   eax
c0014951:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014955:	e8 c6 fd ff ff       	call   c0014720 <Net::crc32Calc(unsigned char*, int)>
c001495a:	83 c4 08             	add    esp,0x8
c001495d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014961:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014965:	c1 e8 18             	shr    eax,0x18
c0014968:	89 c1                	mov    ecx,eax
c001496a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014971:	8d 50 01             	lea    edx,[eax+0x1]
c0014974:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001497b:	88 ca                	mov    dl,cl
c001497d:	88 10                	mov    BYTE PTR [eax],dl
c001497f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014983:	c1 e8 10             	shr    eax,0x10
c0014986:	89 c1                	mov    ecx,eax
c0014988:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001498f:	8d 50 01             	lea    edx,[eax+0x1]
c0014992:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014999:	88 ca                	mov    dl,cl
c001499b:	88 10                	mov    BYTE PTR [eax],dl
c001499d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149a1:	c1 e8 08             	shr    eax,0x8
c00149a4:	89 c1                	mov    ecx,eax
c00149a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149ad:	8d 50 01             	lea    edx,[eax+0x1]
c00149b0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149b7:	88 ca                	mov    dl,cl
c00149b9:	88 10                	mov    BYTE PTR [eax],dl
c00149bb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149c2:	8d 50 01             	lea    edx,[eax+0x1]
c00149c5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149cc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00149d0:	88 10                	mov    BYTE PTR [eax],dl
c00149d2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149d6:	83 c4 60             	add    esp,0x60
c00149d9:	5b                   	pop    ebx
c00149da:	5e                   	pop    esi
c00149db:	5f                   	pop    edi
c00149dc:	c3                   	ret    
c00149dd:	8d 76 00             	lea    esi,[esi+0x0]

c00149e0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00149e0:	57                   	push   edi
c00149e1:	56                   	push   esi
c00149e2:	53                   	push   ebx
c00149e3:	83 ec 70             	sub    esp,0x70
c00149e6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149ed:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149f1:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00149f9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a00:	83 c0 0e             	add    eax,0xe
c0014a03:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a07:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a12:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014a1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a2a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a2e:	89 c6                	mov    esi,eax
c0014a30:	89 d7                	mov    edi,edx
c0014a32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a34:	89 c8                	mov    eax,ecx
c0014a36:	89 fa                	mov    edx,edi
c0014a38:	89 f3                	mov    ebx,esi
c0014a3a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a3e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a46:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a4e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a55:	83 c0 08             	add    eax,0x8
c0014a58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a5c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a67:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a73:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a77:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a7b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a7f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a83:	89 c6                	mov    esi,eax
c0014a85:	89 d7                	mov    edi,edx
c0014a87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a89:	89 c8                	mov    eax,ecx
c0014a8b:	89 fa                	mov    edx,edi
c0014a8d:	89 f3                	mov    ebx,esi
c0014a8f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a97:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a9b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014aa3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014aaa:	8d 50 01             	lea    edx,[eax+0x1]
c0014aad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ab4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab6:	0f b6 c0             	movzx  eax,al
c0014ab9:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014abe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ac5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014acf:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad1:	0f b6 c0             	movzx  eax,al
c0014ad4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014ad9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014ade:	c1 e0 08             	shl    eax,0x8
c0014ae1:	89 c2                	mov    edx,eax
c0014ae3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014ae7:	09 d0                	or     eax,edx
c0014ae9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014af0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014af4:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014afc:	75 46                	jne    c0014b44 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014afe:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b05:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b08:	66 3d dc 05          	cmp    ax,0x5dc
c0014b0c:	77 16                	ja     c0014b24 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b0e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b15:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b18:	0f b7 c0             	movzx  eax,ax
c0014b1b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014b22:	eb 20                	jmp    c0014b44 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b24:	83 ec 0c             	sub    esp,0xc
c0014b27:	68 58 44 02 c0       	push   0xc0024458
c0014b2c:	e8 3a 7f ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0014b31:	83 c4 10             	add    esp,0x10
c0014b34:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b3b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b3f:	e9 18 01 00 00       	jmp    c0014c5c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b44:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b4b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b52:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b54:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b58:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b7b:	89 c6                	mov    esi,eax
c0014b7d:	89 d7                	mov    edi,edx
c0014b7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b81:	89 c8                	mov    eax,ecx
c0014b83:	89 fa                	mov    edx,edi
c0014b85:	89 f3                	mov    ebx,esi
c0014b87:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b92:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b99:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014ba0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ba7:	8d 50 01             	lea    edx,[eax+0x1]
c0014baa:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bb1:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb3:	0f b6 c0             	movzx  eax,al
c0014bb6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bc1:	8d 50 01             	lea    edx,[eax+0x1]
c0014bc4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bcb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bcd:	0f b6 c0             	movzx  eax,al
c0014bd0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014bd4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0014bde:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014be5:	8a 00                	mov    al,BYTE PTR [eax]
c0014be7:	0f b6 c0             	movzx  eax,al
c0014bea:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014bee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bf5:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bff:	8a 00                	mov    al,BYTE PTR [eax]
c0014c01:	0f b6 c0             	movzx  eax,al
c0014c04:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c08:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c0c:	c1 e0 18             	shl    eax,0x18
c0014c0f:	89 c2                	mov    edx,eax
c0014c11:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014c15:	c1 e0 10             	shl    eax,0x10
c0014c18:	09 c2                	or     edx,eax
c0014c1a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014c1e:	c1 e0 08             	shl    eax,0x8
c0014c21:	09 d0                	or     eax,edx
c0014c23:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c27:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c2b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c32:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c36:	83 e8 04             	sub    eax,0x4
c0014c39:	83 ec 08             	sub    esp,0x8
c0014c3c:	50                   	push   eax
c0014c3d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c41:	e8 da fa ff ff       	call   c0014720 <Net::crc32Calc(unsigned char*, int)>
c0014c46:	83 c4 10             	add    esp,0x10
c0014c49:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c4d:	0f 94 c2             	sete   dl
c0014c50:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c57:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c5a:	90                   	nop
c0014c5b:	90                   	nop
c0014c5c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c63:	83 c4 70             	add    esp,0x70
c0014c66:	5b                   	pop    ebx
c0014c67:	5e                   	pop    esi
c0014c68:	5f                   	pop    edi
c0014c69:	c2 04 00             	ret    0x4

c0014c6c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c6c:	55                   	push   ebp
c0014c6d:	57                   	push   edi
c0014c6e:	56                   	push   esi
c0014c6f:	53                   	push   ebx
c0014c70:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c76:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c7d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c7f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c82:	80 fb 40             	cmp    bl,0x40
c0014c85:	75 1b                	jne    c0014ca2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c87:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c89:	84 d2                	test   dl,dl
c0014c8b:	0f 84 f1 00 00 00    	je     c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c91:	8d 46 01             	lea    eax,[esi+0x1]
c0014c94:	80 fa 3a             	cmp    dl,0x3a
c0014c97:	74 04                	je     c0014c9d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c99:	89 c6                	mov    esi,eax
c0014c9b:	eb ea                	jmp    c0014c87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014c9d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014ca0:	89 c6                	mov    esi,eax
c0014ca2:	50                   	push   eax
c0014ca3:	6a 40                	push   0x40
c0014ca5:	6a 00                	push   0x0
c0014ca7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014cab:	50                   	push   eax
c0014cac:	e8 d3 b9 fe ff       	call   c0000684 <memset>
c0014cb1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014cb8:	31 c0                	xor    eax,eax
c0014cba:	83 c4 10             	add    esp,0x10
c0014cbd:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014cbf:	84 c9                	test   cl,cl
c0014cc1:	0f 84 bb 00 00 00    	je     c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cc7:	3d c7 00 00 00       	cmp    eax,0xc7
c0014ccc:	0f 8f b0 00 00 00    	jg     c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cd2:	80 f9 0a             	cmp    cl,0xa
c0014cd5:	0f 85 98 00 00 00    	jne    c0014d73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cdb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014ce0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014ce4:	a8 df                	test   al,0xdf
c0014ce6:	0f 94 c1             	sete   cl
c0014ce9:	3c 23                	cmp    al,0x23
c0014ceb:	0f 94 c2             	sete   dl
c0014cee:	08 d1                	or     cl,dl
c0014cf0:	75 4a                	jne    c0014d3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cf2:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cf5:	80 fa 01             	cmp    dl,0x1
c0014cf8:	76 42                	jbe    c0014d3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cfa:	3c 5b                	cmp    al,0x5b
c0014cfc:	75 42                	jne    c0014d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014cfe:	80 fb 40             	cmp    bl,0x40
c0014d01:	75 39                	jne    c0014d3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d03:	83 ec 0c             	sub    esp,0xc
c0014d06:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d0a:	52                   	push   edx
c0014d0b:	e8 90 b9 fe ff       	call   c00006a0 <strlen>
c0014d10:	83 c4 10             	add    esp,0x10
c0014d13:	83 f8 3f             	cmp    eax,0x3f
c0014d16:	77 6a                	ja     c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d18:	50                   	push   eax
c0014d19:	50                   	push   eax
c0014d1a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d1e:	52                   	push   edx
c0014d1f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d23:	52                   	push   edx
c0014d24:	e8 17 ba fe ff       	call   c0000740 <strcpy>
c0014d29:	58                   	pop    eax
c0014d2a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d2e:	52                   	push   edx
c0014d2f:	e8 6c b9 fe ff       	call   c00006a0 <strlen>
c0014d34:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d39:	83 c4 10             	add    esp,0x10
c0014d3c:	31 d2                	xor    edx,edx
c0014d3e:	eb 3a                	jmp    c0014d7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d40:	80 fb 40             	cmp    bl,0x40
c0014d43:	74 06                	je     c0014d4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d45:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d49:	eb 20                	jmp    c0014d6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d4b:	50                   	push   eax
c0014d4c:	50                   	push   eax
c0014d4d:	55                   	push   ebp
c0014d4e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d52:	50                   	push   eax
c0014d53:	e8 74 ba fe ff       	call   c00007cc <strcmp>
c0014d58:	83 c4 10             	add    esp,0x10
c0014d5b:	85 c0                	test   eax,eax
c0014d5d:	75 dd                	jne    c0014d3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d5f:	eb e4                	jmp    c0014d45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d61:	8d 50 01             	lea    edx,[eax+0x1]
c0014d64:	80 f9 3d             	cmp    cl,0x3d
c0014d67:	74 1d                	je     c0014d86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d69:	89 d0                	mov    eax,edx
c0014d6b:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d6d:	84 c9                	test   cl,cl
c0014d6f:	75 f0                	jne    c0014d61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d71:	eb 0f                	jmp    c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d73:	8d 50 01             	lea    edx,[eax+0x1]
c0014d76:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d7a:	47                   	inc    edi
c0014d7b:	89 d0                	mov    eax,edx
c0014d7d:	e9 3b ff ff ff       	jmp    c0014cbd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d82:	31 c0                	xor    eax,eax
c0014d84:	eb 33                	jmp    c0014db9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d8a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d8d:	50                   	push   eax
c0014d8e:	50                   	push   eax
c0014d8f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d93:	50                   	push   eax
c0014d94:	56                   	push   esi
c0014d95:	e8 32 ba fe ff       	call   c00007cc <strcmp>
c0014d9a:	83 c4 10             	add    esp,0x10
c0014d9d:	85 c0                	test   eax,eax
c0014d9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014da3:	75 97                	jne    c0014d3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014da5:	51                   	push   ecx
c0014da6:	51                   	push   ecx
c0014da7:	52                   	push   edx
c0014da8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014daf:	e8 8c b9 fe ff       	call   c0000740 <strcpy>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	b0 01                	mov    al,0x1
c0014db9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014dbf:	5b                   	pop    ebx
c0014dc0:	5e                   	pop    esi
c0014dc1:	5f                   	pop    edi
c0014dc2:	5d                   	pop    ebp
c0014dc3:	c3                   	ret    

c0014dc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014dc4:	57                   	push   edi
c0014dc5:	56                   	push   esi
c0014dc6:	53                   	push   ebx
c0014dc7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014dcd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014dd4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014ddb:	53                   	push   ebx
c0014ddc:	e8 bf b8 fe ff       	call   c00006a0 <strlen>
c0014de1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014de4:	89 c7                	mov    edi,eax
c0014de6:	e8 b5 b8 fe ff       	call   c00006a0 <strlen>
c0014deb:	83 c4 10             	add    esp,0x10
c0014dee:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014df2:	3d ff 00 00 00       	cmp    eax,0xff
c0014df7:	0f 87 d3 00 00 00    	ja     c0014ed0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014dfd:	57                   	push   edi
c0014dfe:	57                   	push   edi
c0014dff:	56                   	push   esi
c0014e00:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014e04:	56                   	push   esi
c0014e05:	e8 36 b9 fe ff       	call   c0000740 <strcpy>
c0014e0a:	58                   	pop    eax
c0014e0b:	5a                   	pop    edx
c0014e0c:	68 fa 47 02 c0       	push   0xc00247fa
c0014e11:	56                   	push   esi
c0014e12:	e8 69 ba fe ff       	call   c0000880 <strcat>
c0014e17:	59                   	pop    ecx
c0014e18:	5f                   	pop    edi
c0014e19:	53                   	push   ebx
c0014e1a:	56                   	push   esi
c0014e1b:	e8 60 ba fe ff       	call   c0000880 <strcat>
c0014e20:	58                   	pop    eax
c0014e21:	5a                   	pop    edx
c0014e22:	68 a4 44 02 c0       	push   0xc00244a4
c0014e27:	56                   	push   esi
c0014e28:	e8 53 ba fe ff       	call   c0000880 <strcat>
c0014e2d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e34:	e8 8a 4b ff ff       	call   c00099c3 <malloc>
c0014e39:	83 c4 0c             	add    esp,0xc
c0014e3c:	89 c3                	mov    ebx,eax
c0014e3e:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014e44:	56                   	push   esi
c0014e45:	50                   	push   eax
c0014e46:	e8 8b 81 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	85 db                	test   ebx,ebx
c0014e50:	74 7e                	je     c0014ed0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e52:	51                   	push   ecx
c0014e53:	51                   	push   ecx
c0014e54:	6a 01                	push   0x1
c0014e56:	53                   	push   ebx
c0014e57:	e8 de 81 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	85 c0                	test   eax,eax
c0014e61:	74 08                	je     c0014e6b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e63:	83 ec 0c             	sub    esp,0xc
c0014e66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e68:	53                   	push   ebx
c0014e69:	eb 5f                	jmp    c0014eca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e6b:	52                   	push   edx
c0014e6c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e70:	50                   	push   eax
c0014e71:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e75:	50                   	push   eax
c0014e76:	53                   	push   ebx
c0014e77:	e8 6a 84 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c0014e7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	89 c1                	mov    ecx,eax
c0014e85:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e89:	74 31                	je     c0014ebc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e8b:	83 ec 0c             	sub    esp,0xc
c0014e8e:	50                   	push   eax
c0014e8f:	e8 2f 4b ff ff       	call   c00099c3 <malloc>
c0014e94:	89 c6                	mov    esi,eax
c0014e96:	58                   	pop    eax
c0014e97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014e9d:	52                   	push   edx
c0014e9e:	56                   	push   esi
c0014e9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014ea3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014ea7:	53                   	push   ebx
c0014ea8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eab:	83 c4 20             	add    esp,0x20
c0014eae:	85 c0                	test   eax,eax
c0014eb0:	75 0a                	jne    c0014ebc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014eb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014eb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014eba:	74 18                	je     c0014ed4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014ebc:	83 ec 0c             	sub    esp,0xc
c0014ebf:	53                   	push   ebx
c0014ec0:	e8 d3 81 ff ff       	call   c000d098 <File::close()>
c0014ec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ec7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ecd:	83 c4 10             	add    esp,0x10
c0014ed0:	31 c0                	xor    eax,eax
c0014ed2:	eb 3b                	jmp    c0014f0f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014ed4:	83 ec 0c             	sub    esp,0xc
c0014ed7:	53                   	push   ebx
c0014ed8:	e8 bb 81 ff ff       	call   c000d098 <File::close()>
c0014edd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014edf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ee2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ee5:	83 c4 0c             	add    esp,0xc
c0014ee8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014eef:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ef6:	56                   	push   esi
c0014ef7:	e8 70 fd ff ff       	call   c0014c6c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014efc:	89 34 24             	mov    DWORD PTR [esp],esi
c0014eff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f03:	e8 cb 4a ff ff       	call   c00099d3 <free>
c0014f08:	83 c4 10             	add    esp,0x10
c0014f0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f0f:	81 c4 20 01 00 00    	add    esp,0x120
c0014f15:	5b                   	pop    ebx
c0014f16:	5e                   	pop    esi
c0014f17:	5f                   	pop    edi
c0014f18:	c3                   	ret    

c0014f19 <Reg::getLine(char*, char*, char*)>:
c0014f19:	57                   	push   edi
c0014f1a:	56                   	push   esi
c0014f1b:	53                   	push   ebx
c0014f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f28:	57                   	push   edi
c0014f29:	56                   	push   esi
c0014f2a:	53                   	push   ebx
c0014f2b:	68 a9 44 02 c0       	push   0xc00244a9
c0014f30:	e8 8f fe ff ff       	call   c0014dc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f35:	83 c4 10             	add    esp,0x10
c0014f38:	84 c0                	test   al,al
c0014f3a:	75 10                	jne    c0014f4c <Reg::getLine(char*, char*, char*)+0x33>
c0014f3c:	57                   	push   edi
c0014f3d:	56                   	push   esi
c0014f3e:	53                   	push   ebx
c0014f3f:	68 ce 44 02 c0       	push   0xc00244ce
c0014f44:	e8 7b fe ff ff       	call   c0014dc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	5b                   	pop    ebx
c0014f4d:	5e                   	pop    esi
c0014f4e:	5f                   	pop    edi
c0014f4f:	c3                   	ret    

c0014f50 <Reg::readInt(char*, char*, int*)>:
c0014f50:	55                   	push   ebp
c0014f51:	57                   	push   edi
c0014f52:	56                   	push   esi
c0014f53:	53                   	push   ebx
c0014f54:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f5a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f5e:	57                   	push   edi
c0014f5f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f66:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f6d:	e8 a7 ff ff ff       	call   c0014f19 <Reg::getLine(char*, char*, char*)>
c0014f72:	83 c4 10             	add    esp,0x10
c0014f75:	84 c0                	test   al,al
c0014f77:	0f 84 b3 00 00 00    	je     c0015030 <Reg::readInt(char*, char*, int*)+0xe0>
c0014f7d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f81:	80 fa 2b             	cmp    dl,0x2b
c0014f84:	74 0c                	je     c0014f92 <Reg::readInt(char*, char*, int*)+0x42>
c0014f86:	80 fa 2d             	cmp    dl,0x2d
c0014f89:	75 0e                	jne    c0014f99 <Reg::readInt(char*, char*, int*)+0x49>
c0014f8b:	ba 01 00 00 00       	mov    edx,0x1
c0014f90:	eb 0b                	jmp    c0014f9d <Reg::readInt(char*, char*, int*)+0x4d>
c0014f92:	ba 01 00 00 00       	mov    edx,0x1
c0014f97:	eb 02                	jmp    c0014f9b <Reg::readInt(char*, char*, int*)+0x4b>
c0014f99:	31 d2                	xor    edx,edx
c0014f9b:	31 c0                	xor    eax,eax
c0014f9d:	be 0a 00 00 00       	mov    esi,0xa
c0014fa2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014fa7:	75 20                	jne    c0014fc9 <Reg::readInt(char*, char*, int*)+0x79>
c0014fa9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014fad:	80 f9 78             	cmp    cl,0x78
c0014fb0:	75 0a                	jne    c0014fbc <Reg::readInt(char*, char*, int*)+0x6c>
c0014fb2:	83 c2 02             	add    edx,0x2
c0014fb5:	be 10 00 00 00       	mov    esi,0x10
c0014fba:	eb 0d                	jmp    c0014fc9 <Reg::readInt(char*, char*, int*)+0x79>
c0014fbc:	80 f9 62             	cmp    cl,0x62
c0014fbf:	75 08                	jne    c0014fc9 <Reg::readInt(char*, char*, int*)+0x79>
c0014fc1:	83 c2 02             	add    edx,0x2
c0014fc4:	be 02 00 00 00       	mov    esi,0x2
c0014fc9:	01 d7                	add    edi,edx
c0014fcb:	31 d2                	xor    edx,edx
c0014fcd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fcf:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014fd3:	80 fb 0d             	cmp    bl,0xd
c0014fd6:	0f 94 c3             	sete   bl
c0014fd9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fde:	0f 94 c1             	sete   cl
c0014fe1:	08 cb                	or     bl,cl
c0014fe3:	75 3a                	jne    c001501f <Reg::readInt(char*, char*, int*)+0xcf>
c0014fe5:	0f af d6             	imul   edx,esi
c0014fe8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fed:	83 fe 10             	cmp    esi,0x10
c0014ff0:	75 26                	jne    c0015018 <Reg::readInt(char*, char*, int*)+0xc8>
c0014ff2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014ff6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014ff9:	89 e9                	mov    ecx,ebp
c0014ffb:	80 f9 05             	cmp    cl,0x5
c0014ffe:	77 06                	ja     c0015006 <Reg::readInt(char*, char*, int*)+0xb6>
c0015000:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015004:	eb 16                	jmp    c001501c <Reg::readInt(char*, char*, int*)+0xcc>
c0015006:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001500a:	83 e9 61             	sub    ecx,0x61
c001500d:	80 f9 05             	cmp    cl,0x5
c0015010:	77 06                	ja     c0015018 <Reg::readInt(char*, char*, int*)+0xc8>
c0015012:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015016:	eb 04                	jmp    c001501c <Reg::readInt(char*, char*, int*)+0xcc>
c0015018:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001501c:	47                   	inc    edi
c001501d:	eb ae                	jmp    c0014fcd <Reg::readInt(char*, char*, int*)+0x7d>
c001501f:	84 c0                	test   al,al
c0015021:	74 02                	je     c0015025 <Reg::readInt(char*, char*, int*)+0xd5>
c0015023:	f7 da                	neg    edx
c0015025:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001502c:	89 10                	mov    DWORD PTR [eax],edx
c001502e:	88 d8                	mov    al,bl
c0015030:	81 c4 ec 00 00 00    	add    esp,0xec
c0015036:	5b                   	pop    ebx
c0015037:	5e                   	pop    esi
c0015038:	5f                   	pop    edi
c0015039:	5d                   	pop    ebp
c001503a:	c3                   	ret    

c001503b <Reg::readString(char*, char*, char*, int)>:
c001503b:	57                   	push   edi
c001503c:	56                   	push   esi
c001503d:	53                   	push   ebx
c001503e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015044:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001504b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001504f:	57                   	push   edi
c0015050:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015057:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001505e:	e8 b6 fe ff ff       	call   c0014f19 <Reg::getLine(char*, char*, char*)>
c0015063:	83 c4 10             	add    esp,0x10
c0015066:	89 c6                	mov    esi,eax
c0015068:	84 c0                	test   al,al
c001506a:	74 44                	je     c00150b0 <Reg::readString(char*, char*, char*, int)+0x75>
c001506c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015073:	31 c0                	xor    eax,eax
c0015075:	4a                   	dec    edx
c0015076:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015079:	84 c9                	test   cl,cl
c001507b:	74 0f                	je     c001508c <Reg::readString(char*, char*, char*, int)+0x51>
c001507d:	39 c2                	cmp    edx,eax
c001507f:	7e 0b                	jle    c001508c <Reg::readString(char*, char*, char*, int)+0x51>
c0015081:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015084:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015089:	40                   	inc    eax
c001508a:	eb ea                	jmp    c0015076 <Reg::readString(char*, char*, char*, int)+0x3b>
c001508c:	83 ec 0c             	sub    esp,0xc
c001508f:	53                   	push   ebx
c0015090:	e8 0b b6 fe ff       	call   c00006a0 <strlen>
c0015095:	83 c4 10             	add    esp,0x10
c0015098:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001509d:	75 11                	jne    c00150b0 <Reg::readString(char*, char*, char*, int)+0x75>
c001509f:	83 ec 0c             	sub    esp,0xc
c00150a2:	53                   	push   ebx
c00150a3:	e8 f8 b5 fe ff       	call   c00006a0 <strlen>
c00150a8:	83 c4 10             	add    esp,0x10
c00150ab:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00150b0:	81 c4 d0 00 00 00    	add    esp,0xd0
c00150b6:	89 f0                	mov    eax,esi
c00150b8:	5b                   	pop    ebx
c00150b9:	5e                   	pop    esi
c00150ba:	5f                   	pop    edi
c00150bb:	c3                   	ret    

c00150bc <Reg::readBool(char*, char*, bool*)>:
c00150bc:	83 ec 20             	sub    esp,0x20
c00150bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150c3:	50                   	push   eax
c00150c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150cc:	e8 7f fe ff ff       	call   c0014f50 <Reg::readInt(char*, char*, int*)>
c00150d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150d6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150da:	0f 95 02             	setne  BYTE PTR [edx]
c00150dd:	83 c4 2c             	add    esp,0x2c
c00150e0:	c3                   	ret    

c00150e1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150e1:	53                   	push   ebx
c00150e2:	83 ec 1c             	sub    esp,0x1c
c00150e5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150e9:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150ed:	50                   	push   eax
c00150ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150f6:	e8 c1 ff ff ff       	call   c00150bc <Reg::readBool(char*, char*, bool*)>
c00150fb:	83 c4 10             	add    esp,0x10
c00150fe:	84 c0                	test   al,al
c0015100:	74 04                	je     c0015106 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015102:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015106:	88 d8                	mov    al,bl
c0015108:	83 c4 18             	add    esp,0x18
c001510b:	5b                   	pop    ebx
c001510c:	c3                   	ret    

c001510d <Reg::readIntWithDefault(char*, char*, int)>:
c001510d:	53                   	push   ebx
c001510e:	83 ec 1c             	sub    esp,0x1c
c0015111:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015115:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015119:	50                   	push   eax
c001511a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001511e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015122:	e8 29 fe ff ff       	call   c0014f50 <Reg::readInt(char*, char*, int*)>
c0015127:	83 c4 10             	add    esp,0x10
c001512a:	84 c0                	test   al,al
c001512c:	74 04                	je     c0015132 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001512e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015132:	89 d8                	mov    eax,ebx
c0015134:	83 c4 18             	add    esp,0x18
c0015137:	5b                   	pop    ebx
c0015138:	c3                   	ret    

c0015139 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015139:	57                   	push   edi
c001513a:	56                   	push   esi
c001513b:	56                   	push   esi
c001513c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015140:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015144:	56                   	push   esi
c0015145:	57                   	push   edi
c0015146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001514a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001514e:	e8 e8 fe ff ff       	call   c001503b <Reg::readString(char*, char*, char*, int)>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	84 c0                	test   al,al
c0015158:	75 1a                	jne    c0015174 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001515a:	51                   	push   ecx
c001515b:	56                   	push   esi
c001515c:	6a 00                	push   0x0
c001515e:	57                   	push   edi
c001515f:	e8 20 b5 fe ff       	call   c0000684 <memset>
c0015164:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015167:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001516b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015174:	89 f8                	mov    eax,edi
c0015176:	5a                   	pop    edx
c0015177:	5e                   	pop    esi
c0015178:	5f                   	pop    edi
c0015179:	c3                   	ret    

c001517a <Sys::eject(regs*)>:
c001517a:	83 ec 0c             	sub    esp,0xc
c001517d:	83 ca ff             	or     edx,0xffffffff
c0015180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015184:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015187:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001518c:	83 e9 41             	sub    ecx,0x41
c001518f:	83 f9 19             	cmp    ecx,0x19
c0015192:	77 18                	ja     c00151ac <Sys::eject(regs*)+0x32>
c0015194:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c001519b:	85 c9                	test   ecx,ecx
c001519d:	74 0d                	je     c00151ac <Sys::eject(regs*)+0x32>
c001519f:	83 ec 0c             	sub    esp,0xc
c00151a2:	51                   	push   ecx
c00151a3:	e8 76 af ff ff       	call   c001011e <LogicalDisk::eject()>
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	99                   	cdq    
c00151ac:	83 c4 0c             	add    esp,0xc
c00151af:	c3                   	ret    

c00151b0 <Sys::exit(regs*)>:
c00151b0:	83 ec 18             	sub    esp,0x18
c00151b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151ba:	e8 59 36 00 00       	call   c0018818 <terminateTask(int)>
c00151bf:	83 c8 ff             	or     eax,0xffffffff
c00151c2:	83 c4 1c             	add    esp,0x1c
c00151c5:	89 c2                	mov    edx,eax
c00151c7:	c3                   	ret    

c00151c8 <Sys::getCwd(regs*)>:
c00151c8:	83 ec 10             	sub    esp,0x10
c00151cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151cf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00151d2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151da:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151dd:	e8 f6 7b ff ff       	call   c000cdd8 <Fs::getcwd(Process*, char*, int)>
c00151e2:	83 c4 1c             	add    esp,0x1c
c00151e5:	99                   	cdq    
c00151e6:	c3                   	ret    

c00151e7 <Sys::getPID(regs*)>:
c00151e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f1:	99                   	cdq    
c00151f2:	c3                   	ret    

c00151f3 <Sys::getRAMData(regs*)>:
c00151f3:	8b 0d 14 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026414
c00151f9:	69 05 10 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026410,0xc8
c0015203:	99                   	cdq    
c0015204:	f7 f9                	idiv   ecx
c0015206:	c1 e0 18             	shl    eax,0x18
c0015209:	09 c8                	or     eax,ecx
c001520b:	99                   	cdq    
c001520c:	c3                   	ret    

c001520d <Sys::getVGAPtr(regs*)>:
c001520d:	55                   	push   ebp
c001520e:	57                   	push   edi
c001520f:	56                   	push   esi
c0015210:	53                   	push   ebx
c0015211:	83 ec 18             	sub    esp,0x18
c0015214:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015218:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001521b:	e8 fc 30 00 00       	call   c001831c <Thr::processFromPID(int)>
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	89 c1                	mov    ecx,eax
c0015225:	b8 01 00 00 00       	mov    eax,0x1
c001522a:	85 c9                	test   ecx,ecx
c001522c:	74 59                	je     c0015287 <Sys::getVGAPtr(regs*)+0x7a>
c001522e:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015234:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015238:	74 0c                	je     c0015246 <Sys::getVGAPtr(regs*)+0x39>
c001523a:	83 ec 0c             	sub    esp,0xc
c001523d:	53                   	push   ebx
c001523e:	e8 86 55 ff ff       	call   c000a7c9 <setActiveTerminal(VgaText*)>
c0015243:	83 c4 10             	add    esp,0x10
c0015246:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015249:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001524c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015251:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015253:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015256:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015259:	81 c3 82 00 00 00    	add    ebx,0x82
c001525f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015265:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015268:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001526b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015271:	50                   	push   eax
c0015272:	50                   	push   eax
c0015273:	53                   	push   ebx
c0015274:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015277:	05 a8 0f 00 00       	add    eax,0xfa8
c001527c:	50                   	push   eax
c001527d:	e8 be b4 fe ff       	call   c0000740 <strcpy>
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	31 c0                	xor    eax,eax
c0015287:	83 c4 0c             	add    esp,0xc
c001528a:	31 d2                	xor    edx,edx
c001528c:	5b                   	pop    ebx
c001528d:	5e                   	pop    esi
c001528e:	5f                   	pop    edi
c001528f:	5d                   	pop    ebp
c0015290:	c3                   	ret    

c0015291 <Sys::loadDLL(regs*)>:
c0015291:	56                   	push   esi
c0015292:	53                   	push   ebx
c0015293:	31 d2                	xor    edx,edx
c0015295:	51                   	push   ecx
c0015296:	b8 01 00 00 00       	mov    eax,0x1
c001529b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001529f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00152a3:	0f 84 8c 00 00 00    	je     c0015335 <Sys::loadDLL(regs*)+0xa4>
c00152a9:	83 ec 0c             	sub    esp,0xc
c00152ac:	68 14 01 00 00       	push   0x114
c00152b1:	e8 0d 47 ff ff       	call   c00099c3 <malloc>
c00152b6:	83 c4 0c             	add    esp,0xc
c00152b9:	89 c3                	mov    ebx,eax
c00152bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00152c3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152c6:	53                   	push   ebx
c00152c7:	e8 0a 7d ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	31 d2                	xor    edx,edx
c00152d1:	b8 02 00 00 00       	mov    eax,0x2
c00152d6:	85 db                	test   ebx,ebx
c00152d8:	74 5b                	je     c0015335 <Sys::loadDLL(regs*)+0xa4>
c00152da:	83 ec 0c             	sub    esp,0xc
c00152dd:	53                   	push   ebx
c00152de:	e8 c5 7f ff ff       	call   c000d2a8 <File::exists()>
c00152e3:	83 c4 10             	add    esp,0x10
c00152e6:	84 c0                	test   al,al
c00152e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152ea:	75 11                	jne    c00152fd <Sys::loadDLL(regs*)+0x6c>
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	53                   	push   ebx
c00152f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	b8 03 00 00 00       	mov    eax,0x3
c00152fb:	eb 36                	jmp    c0015333 <Sys::loadDLL(regs*)+0xa2>
c00152fd:	83 ec 0c             	sub    esp,0xc
c0015300:	53                   	push   ebx
c0015301:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015304:	58                   	pop    eax
c0015305:	5a                   	pop    edx
c0015306:	6a 00                	push   0x0
c0015308:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001530b:	e8 0a 22 00 00       	call   c001751a <Thr::loadDLL(char const*, bool)>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	89 c1                	mov    ecx,eax
c0015315:	31 d2                	xor    edx,edx
c0015317:	b8 04 00 00 00       	mov    eax,0x4
c001531c:	85 c9                	test   ecx,ecx
c001531e:	74 15                	je     c0015335 <Sys::loadDLL(regs*)+0xa4>
c0015320:	53                   	push   ebx
c0015321:	53                   	push   ebx
c0015322:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c0015328:	51                   	push   ecx
c0015329:	e8 1d 24 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	31 c0                	xor    eax,eax
c0015333:	31 d2                	xor    edx,edx
c0015335:	59                   	pop    ecx
c0015336:	5b                   	pop    ebx
c0015337:	5e                   	pop    esi
c0015338:	c3                   	ret    

c0015339 <Sys::read(regs*)>:
c0015339:	57                   	push   edi
c001533a:	56                   	push   esi
c001533b:	53                   	push   ebx
c001533c:	83 ec 10             	sub    esp,0x10
c001533f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015343:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015346:	83 f8 02             	cmp    eax,0x2
c0015349:	77 10                	ja     c001535b <Sys::read(regs*)+0x22>
c001534b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015350:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015353:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015359:	eb 0e                	jmp    c0015369 <Sys::read(regs*)+0x30>
c001535b:	83 ec 0c             	sub    esp,0xc
c001535e:	50                   	push   eax
c001535f:	e8 df 61 ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	89 c1                	mov    ecx,eax
c0015369:	83 c8 ff             	or     eax,0xffffffff
c001536c:	85 c9                	test   ecx,ecx
c001536e:	89 c2                	mov    edx,eax
c0015370:	74 28                	je     c001539a <Sys::read(regs*)+0x61>
c0015372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001537a:	31 ff                	xor    edi,edi
c001537c:	83 ec 0c             	sub    esp,0xc
c001537f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015381:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015385:	52                   	push   edx
c0015386:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015389:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001538c:	57                   	push   edi
c001538d:	56                   	push   esi
c001538e:	51                   	push   ecx
c001538f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015392:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015396:	83 c4 20             	add    esp,0x20
c0015399:	99                   	cdq    
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	5b                   	pop    ebx
c001539e:	5e                   	pop    esi
c001539f:	5f                   	pop    edi
c00153a0:	c3                   	ret    

c00153a1 <Sys::sbrk(regs*)>:
c00153a1:	56                   	push   esi
c00153a2:	53                   	push   ebx
c00153a3:	50                   	push   eax
c00153a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153b0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00153b3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00153b9:	85 db                	test   ebx,ebx
c00153bb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00153be:	74 02                	je     c00153c2 <Sys::sbrk(regs*)+0x21>
c00153c0:	79 06                	jns    c00153c8 <Sys::sbrk(regs*)+0x27>
c00153c2:	89 f0                	mov    eax,esi
c00153c4:	31 d2                	xor    edx,edx
c00153c6:	eb 2a                	jmp    c00153f2 <Sys::sbrk(regs*)+0x51>
c00153c8:	83 c8 ff             	or     eax,0xffffffff
c00153cb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153d1:	89 c2                	mov    edx,eax
c00153d3:	77 1d                	ja     c00153f2 <Sys::sbrk(regs*)+0x51>
c00153d5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153db:	50                   	push   eax
c00153dc:	c1 ea 0c             	shr    edx,0xc
c00153df:	68 07 0c 00 00       	push   0xc07
c00153e4:	52                   	push   edx
c00153e5:	51                   	push   ecx
c00153e6:	e8 57 6a ff ff       	call   c000be42 <VAS::allocatePages(int, int)>
c00153eb:	89 f0                	mov    eax,esi
c00153ed:	31 d2                	xor    edx,edx
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	59                   	pop    ecx
c00153f3:	5b                   	pop    ebx
c00153f4:	5e                   	pop    esi
c00153f5:	c3                   	ret    

c00153f6 <Sys::setCwd(regs*)>:
c00153f6:	83 ec 14             	sub    esp,0x14
c00153f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153fd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015405:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015408:	e8 3a 7f ff ff       	call   c000d347 <Fs::setcwd(Process*, char*)>
c001540d:	83 c4 1c             	add    esp,0x1c
c0015410:	99                   	cdq    
c0015411:	c3                   	ret    

c0015412 <Sys::setTime(regs*)>:
c0015412:	55                   	push   ebp
c0015413:	31 c9                	xor    ecx,ecx
c0015415:	57                   	push   edi
c0015416:	bd 0c 00 00 00       	mov    ebp,0xc
c001541b:	56                   	push   esi
c001541c:	53                   	push   ebx
c001541d:	31 db                	xor    ebx,ebx
c001541f:	83 ec 10             	sub    esp,0x10
c0015422:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015426:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015429:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001542c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001542f:	89 c2                	mov    edx,eax
c0015431:	66 81 ef 6c 07       	sub    di,0x76c
c0015436:	83 e2 1f             	and    edx,0x1f
c0015439:	c1 e7 10             	shl    edi,0x10
c001543c:	42                   	inc    edx
c001543d:	c1 e8 05             	shr    eax,0x5
c0015440:	88 d1                	mov    cl,dl
c0015442:	31 d2                	xor    edx,edx
c0015444:	f7 f5                	div    ebp
c0015446:	89 dd                	mov    ebp,ebx
c0015448:	88 d5                	mov    ch,dl
c001544a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015450:	0f b7 c1             	movzx  eax,cx
c0015453:	31 d2                	xor    edx,edx
c0015455:	09 f8                	or     eax,edi
c0015457:	bf 3c 00 00 00       	mov    edi,0x3c
c001545c:	89 c1                	mov    ecx,eax
c001545e:	89 f0                	mov    eax,esi
c0015460:	f7 f7                	div    edi
c0015462:	c1 e2 10             	shl    edx,0x10
c0015465:	09 d5                	or     ebp,edx
c0015467:	31 d2                	xor    edx,edx
c0015469:	89 eb                	mov    ebx,ebp
c001546b:	f7 f7                	div    edi
c001546d:	bf 10 0e 00 00       	mov    edi,0xe10
c0015472:	88 d7                	mov    bh,dl
c0015474:	89 f0                	mov    eax,esi
c0015476:	31 d2                	xor    edx,edx
c0015478:	f7 f7                	div    edi
c001547a:	bf 18 00 00 00       	mov    edi,0x18
c001547f:	31 d2                	xor    edx,edx
c0015481:	f7 f7                	div    edi
c0015483:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0015488:	88 d3                	mov    bl,dl
c001548a:	53                   	push   ebx
c001548b:	51                   	push   ecx
c001548c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015492:	e8 fb 86 ff ff       	call   c000db92 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015497:	83 c4 1c             	add    esp,0x1c
c001549a:	83 f0 01             	xor    eax,0x1
c001549d:	5b                   	pop    ebx
c001549e:	0f b6 c0             	movzx  eax,al
c00154a1:	5e                   	pop    esi
c00154a2:	31 d2                	xor    edx,edx
c00154a4:	5f                   	pop    edi
c00154a5:	5d                   	pop    ebp
c00154a6:	c3                   	ret    

c00154a7 <Sys::timezone(regs*)>:
c00154a7:	53                   	push   ebx
c00154a8:	83 ec 08             	sub    esp,0x8
c00154ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154af:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00154b3:	75 17                	jne    c00154cc <Sys::timezone(regs*)+0x25>
c00154b5:	83 ec 0c             	sub    esp,0xc
c00154b8:	68 e9 44 02 c0       	push   0xc00244e9
c00154bd:	e8 a9 75 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00154c2:	83 c8 ff             	or     eax,0xffffffff
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	89 c2                	mov    edx,eax
c00154ca:	eb 20                	jmp    c00154ec <Sys::timezone(regs*)+0x45>
c00154cc:	83 ec 0c             	sub    esp,0xc
c00154cf:	68 fe 44 02 c0       	push   0xc00244fe
c00154d4:	e8 92 75 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00154d9:	58                   	pop    eax
c00154da:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154dd:	e8 12 84 ff ff       	call   c000d8f4 <User::loadClockSettings(int)>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	b8 01 00 00 00       	mov    eax,0x1
c00154ea:	31 d2                	xor    edx,edx
c00154ec:	83 c4 08             	add    esp,0x8
c00154ef:	5b                   	pop    ebx
c00154f0:	c3                   	ret    

c00154f1 <Sys::write(regs*)>:
c00154f1:	57                   	push   edi
c00154f2:	56                   	push   esi
c00154f3:	53                   	push   ebx
c00154f4:	83 ec 10             	sub    esp,0x10
c00154f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00154fe:	83 f8 02             	cmp    eax,0x2
c0015501:	77 10                	ja     c0015513 <Sys::write(regs*)+0x22>
c0015503:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015508:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001550b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015511:	eb 0e                	jmp    c0015521 <Sys::write(regs*)+0x30>
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	50                   	push   eax
c0015517:	e8 27 60 ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	89 c1                	mov    ecx,eax
c0015521:	83 c8 ff             	or     eax,0xffffffff
c0015524:	85 c9                	test   ecx,ecx
c0015526:	89 c2                	mov    edx,eax
c0015528:	74 28                	je     c0015552 <Sys::write(regs*)+0x61>
c001552a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015532:	31 ff                	xor    edi,edi
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015539:	8d 54 24 18          	lea    edx,[esp+0x18]
c001553d:	52                   	push   edx
c001553e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015541:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015544:	57                   	push   edi
c0015545:	56                   	push   esi
c0015546:	51                   	push   ecx
c0015547:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001554a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001554e:	83 c4 20             	add    esp,0x20
c0015551:	99                   	cdq    
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	5b                   	pop    ebx
c0015556:	5e                   	pop    esi
c0015557:	5f                   	pop    edi
c0015558:	c3                   	ret    

c0015559 <Sys::wsbe(regs*)>:
c0015559:	57                   	push   edi
c001555a:	b9 0b 00 00 00       	mov    ecx,0xb
c001555f:	56                   	push   esi
c0015560:	be 3d 45 02 c0       	mov    esi,0xc002453d
c0015565:	53                   	push   ebx
c0015566:	83 ec 30             	sub    esp,0x30
c0015569:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001556d:	fc                   	cld    
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015573:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001557c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001557f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015585:	8b 06                	mov    eax,DWORD PTR [esi]
c0015587:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001558a:	57                   	push   edi
c001558b:	e8 10 b1 fe ff       	call   c00006a0 <strlen>
c0015590:	5a                   	pop    edx
c0015591:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015595:	52                   	push   edx
c0015596:	31 d2                	xor    edx,edx
c0015598:	57                   	push   edi
c0015599:	52                   	push   edx
c001559a:	50                   	push   eax
c001559b:	56                   	push   esi
c001559c:	ff d3                	call   ebx
c001559e:	83 c4 14             	add    esp,0x14
c00155a1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155a5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00155a8:	e8 6b 32 00 00       	call   c0018818 <terminateTask(int)>
c00155ad:	83 c4 40             	add    esp,0x40
c00155b0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00155b5:	5b                   	pop    ebx
c00155b6:	31 d2                	xor    edx,edx
c00155b8:	5e                   	pop    esi
c00155b9:	5f                   	pop    edi
c00155ba:	c3                   	ret    

c00155bb <Sys::yield(regs*)>:
c00155bb:	83 ec 0c             	sub    esp,0xc
c00155be:	fa                   	cli    
c00155bf:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00155c5:	e8 36 29 00 00       	call   c0017f00 <schedule()>
c00155ca:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00155cf:	48                   	dec    eax
c00155d0:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00155d5:	75 01                	jne    c00155d8 <Sys::yield(regs*)+0x1d>
c00155d7:	fb                   	sti    
c00155d8:	8b 15 2c 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a2c
c00155de:	83 c4 0c             	add    esp,0xc
c00155e1:	89 d0                	mov    eax,edx
c00155e3:	c1 ea 11             	shr    edx,0x11
c00155e6:	c1 e0 07             	shl    eax,0x7
c00155e9:	25 80 30 0f 00       	and    eax,0xf3080
c00155ee:	31 d0                	xor    eax,edx
c00155f0:	31 d2                	xor    edx,edx
c00155f2:	c3                   	ret    

c00155f3 <sysCallSeekDir(regs*)>:
c00155f3:	31 c0                	xor    eax,eax
c00155f5:	31 d2                	xor    edx,edx
c00155f7:	c3                   	ret    

c00155f8 <sysCallTellDir(regs*)>:
c00155f8:	31 c0                	xor    eax,eax
c00155fa:	31 d2                	xor    edx,edx
c00155fc:	c3                   	ret    

c00155fd <sysCallVerify(regs*)>:
c00155fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015601:	31 d2                	xor    edx,edx
c0015603:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015606:	c3                   	ret    

c0015607 <sysCallGetArgc(regs*)>:
c0015607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001560c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001560f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015615:	99                   	cdq    
c0015616:	c3                   	ret    

c0015617 <sysFormatDisk(regs*)>:
c0015617:	56                   	push   esi
c0015618:	53                   	push   ebx
c0015619:	53                   	push   ebx
c001561a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001561e:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c0015624:	eb 25                	jmp    c001564b <sysFormatDisk(regs*)+0x34>
c0015626:	83 ec 0c             	sub    esp,0xc
c0015629:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001562c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001562e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015631:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015634:	50                   	push   eax
c0015635:	ff 34 85 c0 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd9640]
c001563c:	53                   	push   ebx
c001563d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015640:	83 c4 20             	add    esp,0x20
c0015643:	83 f8 08             	cmp    eax,0x8
c0015646:	75 12                	jne    c001565a <sysFormatDisk(regs*)+0x43>
c0015648:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001564b:	85 db                	test   ebx,ebx
c001564d:	75 d7                	jne    c0015626 <sysFormatDisk(regs*)+0xf>
c001564f:	59                   	pop    ecx
c0015650:	b8 03 00 00 00       	mov    eax,0x3
c0015655:	31 d2                	xor    edx,edx
c0015657:	5b                   	pop    ebx
c0015658:	5e                   	pop    esi
c0015659:	c3                   	ret    
c001565a:	85 c0                	test   eax,eax
c001565c:	74 1b                	je     c0015679 <sysFormatDisk(regs*)+0x62>
c001565e:	83 f8 09             	cmp    eax,0x9
c0015661:	74 0b                	je     c001566e <sysFormatDisk(regs*)+0x57>
c0015663:	59                   	pop    ecx
c0015664:	b8 02 00 00 00       	mov    eax,0x2
c0015669:	31 d2                	xor    edx,edx
c001566b:	5b                   	pop    ebx
c001566c:	5e                   	pop    esi
c001566d:	c3                   	ret    
c001566e:	59                   	pop    ecx
c001566f:	b8 01 00 00 00       	mov    eax,0x1
c0015674:	31 d2                	xor    edx,edx
c0015676:	5b                   	pop    ebx
c0015677:	5e                   	pop    esi
c0015678:	c3                   	ret    
c0015679:	59                   	pop    ecx
c001567a:	31 c0                	xor    eax,eax
c001567c:	31 d2                	xor    edx,edx
c001567e:	5b                   	pop    ebx
c001567f:	5e                   	pop    esi
c0015680:	c3                   	ret    

c0015681 <sysSetDiskVolumeLabel(regs*)>:
c0015681:	56                   	push   esi
c0015682:	53                   	push   ebx
c0015683:	53                   	push   ebx
c0015684:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015688:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001568b:	83 f8 19             	cmp    eax,0x19
c001568e:	77 2d                	ja     c00156bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015690:	8b 0c 85 c0 69 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9640]
c0015697:	85 c9                	test   ecx,ecx
c0015699:	74 22                	je     c00156bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c001569b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001569e:	85 db                	test   ebx,ebx
c00156a0:	74 1b                	je     c00156bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156a2:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00156a8:	85 d2                	test   edx,edx
c00156aa:	74 11                	je     c00156bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156ac:	8b 32                	mov    esi,DWORD PTR [edx]
c00156ae:	53                   	push   ebx
c00156af:	50                   	push   eax
c00156b0:	51                   	push   ecx
c00156b1:	52                   	push   edx
c00156b2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00156b5:	83 c4 10             	add    esp,0x10
c00156b8:	99                   	cdq    
c00156b9:	59                   	pop    ecx
c00156ba:	5b                   	pop    ebx
c00156bb:	5e                   	pop    esi
c00156bc:	c3                   	ret    
c00156bd:	59                   	pop    ecx
c00156be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156c8:	5b                   	pop    ebx
c00156c9:	5e                   	pop    esi
c00156ca:	c3                   	ret    

c00156cb <sysGetDiskVolumeLabel(regs*)>:
c00156cb:	57                   	push   edi
c00156cc:	56                   	push   esi
c00156cd:	53                   	push   ebx
c00156ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156d2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00156d5:	83 fa 19             	cmp    edx,0x19
c00156d8:	77 38                	ja     c0015712 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156da:	8b 0c 95 c0 69 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9640]
c00156e1:	85 c9                	test   ecx,ecx
c00156e3:	74 2d                	je     c0015712 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156e5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156e8:	85 db                	test   ebx,ebx
c00156ea:	74 26                	je     c0015712 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156ec:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156ef:	85 f6                	test   esi,esi
c00156f1:	74 1f                	je     c0015712 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156f3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00156f9:	85 c0                	test   eax,eax
c00156fb:	74 15                	je     c0015712 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156fd:	83 ec 0c             	sub    esp,0xc
c0015700:	8b 38                	mov    edi,DWORD PTR [eax]
c0015702:	56                   	push   esi
c0015703:	53                   	push   ebx
c0015704:	52                   	push   edx
c0015705:	51                   	push   ecx
c0015706:	50                   	push   eax
c0015707:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001570a:	83 c4 20             	add    esp,0x20
c001570d:	99                   	cdq    
c001570e:	5b                   	pop    ebx
c001570f:	5e                   	pop    esi
c0015710:	5f                   	pop    edi
c0015711:	c3                   	ret    
c0015712:	5b                   	pop    ebx
c0015713:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015718:	ba ff ff ff ff       	mov    edx,0xffffffff
c001571d:	5e                   	pop    esi
c001571e:	5f                   	pop    edi
c001571f:	c3                   	ret    

c0015720 <sysShutdown(regs*)>:
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015727:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001572a:	85 c0                	test   eax,eax
c001572c:	74 18                	je     c0015746 <sysShutdown(regs*)+0x26>
c001572e:	83 f8 01             	cmp    eax,0x1
c0015731:	74 38                	je     c001576b <sysShutdown(regs*)+0x4b>
c0015733:	83 f8 02             	cmp    eax,0x2
c0015736:	74 24                	je     c001575c <sysShutdown(regs*)+0x3c>
c0015738:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001573d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015742:	83 c4 0c             	add    esp,0xc
c0015745:	c3                   	ret    
c0015746:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001574b:	8b 10                	mov    edx,DWORD PTR [eax]
c001574d:	6a 00                	push   0x0
c001574f:	6a 00                	push   0x0
c0015751:	6a 00                	push   0x0
c0015753:	50                   	push   eax
c0015754:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015757:	83 c4 10             	add    esp,0x10
c001575a:	eb dc                	jmp    c0015738 <sysShutdown(regs*)+0x18>
c001575c:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0015761:	8b 10                	mov    edx,DWORD PTR [eax]
c0015763:	6a 00                	push   0x0
c0015765:	6a 00                	push   0x0
c0015767:	6a 01                	push   0x1
c0015769:	eb e8                	jmp    c0015753 <sysShutdown(regs*)+0x33>
c001576b:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c0015770:	85 c0                	test   eax,eax
c0015772:	74 02                	je     c0015776 <sysShutdown(regs*)+0x56>
c0015774:	ff d0                	call   eax
c0015776:	31 c0                	xor    eax,eax
c0015778:	31 d2                	xor    edx,edx
c001577a:	83 c4 0c             	add    esp,0xc
c001577d:	c3                   	ret    

c001577e <sysCallRealpath(regs*)>:
c001577e:	83 ec 0c             	sub    esp,0xc
c0015781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015785:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015788:	85 d2                	test   edx,edx
c001578a:	74 07                	je     c0015793 <sysCallRealpath(regs*)+0x15>
c001578c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001578f:	85 c0                	test   eax,eax
c0015791:	75 0b                	jne    c001579e <sysCallRealpath(regs*)+0x20>
c0015793:	b8 01 00 00 00       	mov    eax,0x1
c0015798:	31 d2                	xor    edx,edx
c001579a:	83 c4 0c             	add    esp,0xc
c001579d:	c3                   	ret    
c001579e:	51                   	push   ecx
c001579f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157a5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00157a8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00157ae:	51                   	push   ecx
c00157af:	52                   	push   edx
c00157b0:	50                   	push   eax
c00157b1:	e8 76 76 ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	31 c0                	xor    eax,eax
c00157bb:	31 d2                	xor    edx,edx
c00157bd:	83 c4 0c             	add    esp,0xc
c00157c0:	c3                   	ret    

c00157c1 <sysCallReadDir(regs*)>:
c00157c1:	53                   	push   ebx
c00157c2:	83 ec 18             	sub    esp,0x18
c00157c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157c9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00157cc:	83 f8 02             	cmp    eax,0x2
c00157cf:	76 60                	jbe    c0015831 <sysCallReadDir(regs*)+0x70>
c00157d1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00157d8:	77 48                	ja     c0015822 <sysCallReadDir(regs*)+0x61>
c00157da:	83 ec 0c             	sub    esp,0xc
c00157dd:	50                   	push   eax
c00157de:	e8 60 5d ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	85 c0                	test   eax,eax
c00157e8:	74 38                	je     c0015822 <sysCallReadDir(regs*)+0x61>
c00157ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157f2:	83 ec 0c             	sub    esp,0xc
c00157f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00157f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157fb:	51                   	push   ecx
c00157fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157ff:	6a 00                	push   0x0
c0015801:	68 10 01 00 00       	push   0x110
c0015806:	50                   	push   eax
c0015807:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001580a:	83 c4 20             	add    esp,0x20
c001580d:	85 c0                	test   eax,eax
c001580f:	74 29                	je     c001583a <sysCallReadDir(regs*)+0x79>
c0015811:	83 f8 07             	cmp    eax,0x7
c0015814:	74 1b                	je     c0015831 <sysCallReadDir(regs*)+0x70>
c0015816:	b8 02 00 00 00       	mov    eax,0x2
c001581b:	31 d2                	xor    edx,edx
c001581d:	83 c4 18             	add    esp,0x18
c0015820:	5b                   	pop    ebx
c0015821:	c3                   	ret    
c0015822:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015827:	ba ff ff ff ff       	mov    edx,0xffffffff
c001582c:	83 c4 18             	add    esp,0x18
c001582f:	5b                   	pop    ebx
c0015830:	c3                   	ret    
c0015831:	b8 01 00 00 00       	mov    eax,0x1
c0015836:	31 d2                	xor    edx,edx
c0015838:	eb e3                	jmp    c001581d <sysCallReadDir(regs*)+0x5c>
c001583a:	31 c0                	xor    eax,eax
c001583c:	31 d2                	xor    edx,edx
c001583e:	eb dd                	jmp    c001581d <sysCallReadDir(regs*)+0x5c>

c0015840 <sysCallIsATTY(regs*)>:
c0015840:	83 ec 0c             	sub    esp,0xc
c0015843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015847:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001584a:	83 f8 02             	cmp    eax,0x2
c001584d:	76 07                	jbe    c0015856 <sysCallIsATTY(regs*)+0x16>
c001584f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015854:	75 26                	jne    c001587c <sysCallIsATTY(regs*)+0x3c>
c0015856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001585b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001585e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015864:	85 c0                	test   eax,eax
c0015866:	74 24                	je     c001588c <sysCallIsATTY(regs*)+0x4c>
c0015868:	83 ec 0c             	sub    esp,0xc
c001586b:	8b 10                	mov    edx,DWORD PTR [eax]
c001586d:	50                   	push   eax
c001586e:	ff 12                	call   DWORD PTR [edx]
c0015870:	31 d2                	xor    edx,edx
c0015872:	0f b6 c0             	movzx  eax,al
c0015875:	83 c4 10             	add    esp,0x10
c0015878:	83 c4 0c             	add    esp,0xc
c001587b:	c3                   	ret    
c001587c:	83 ec 0c             	sub    esp,0xc
c001587f:	50                   	push   eax
c0015880:	e8 be 5c ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	85 c0                	test   eax,eax
c001588a:	75 dc                	jne    c0015868 <sysCallIsATTY(regs*)+0x28>
c001588c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015891:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015896:	83 c4 0c             	add    esp,0xc
c0015899:	c3                   	ret    

c001589a <sysCallSeek(regs*)>:
c001589a:	53                   	push   ebx
c001589b:	83 ec 08             	sub    esp,0x8
c001589e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158a5:	8d 50 fd             	lea    edx,[eax-0x3]
c00158a8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00158ae:	77 32                	ja     c00158e2 <sysCallSeek(regs*)+0x48>
c00158b0:	83 ec 0c             	sub    esp,0xc
c00158b3:	50                   	push   eax
c00158b4:	e8 8a 5c ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c00158b9:	83 c4 0c             	add    esp,0xc
c00158bc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00158bf:	31 db                	xor    ebx,ebx
c00158c1:	53                   	push   ebx
c00158c2:	51                   	push   ecx
c00158c3:	50                   	push   eax
c00158c4:	e8 2f 78 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	85 c0                	test   eax,eax
c00158ce:	0f 95 c0             	setne  al
c00158d1:	31 d2                	xor    edx,edx
c00158d3:	0f b6 c0             	movzx  eax,al
c00158d6:	f7 d8                	neg    eax
c00158d8:	83 d2 00             	adc    edx,0x0
c00158db:	83 c4 08             	add    esp,0x8
c00158de:	f7 da                	neg    edx
c00158e0:	5b                   	pop    ebx
c00158e1:	c3                   	ret    
c00158e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158ec:	83 c4 08             	add    esp,0x8
c00158ef:	5b                   	pop    ebx
c00158f0:	c3                   	ret    

c00158f1 <sysCallTell(regs*)>:
c00158f1:	53                   	push   ebx
c00158f2:	83 ec 08             	sub    esp,0x8
c00158f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158fc:	83 f8 02             	cmp    eax,0x2
c00158ff:	76 4d                	jbe    c001594e <sysCallTell(regs*)+0x5d>
c0015901:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015906:	76 19                	jbe    c0015921 <sysCallTell(regs*)+0x30>
c0015908:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001590b:	31 d2                	xor    edx,edx
c001590d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015913:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001591a:	31 c0                	xor    eax,eax
c001591c:	83 c4 08             	add    esp,0x8
c001591f:	5b                   	pop    ebx
c0015920:	c3                   	ret    
c0015921:	83 ec 0c             	sub    esp,0xc
c0015924:	50                   	push   eax
c0015925:	e8 19 5c ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c001592a:	5a                   	pop    edx
c001592b:	59                   	pop    ecx
c001592c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001592f:	50                   	push   eax
c0015930:	e8 19 78 ff ff       	call   c000d14e <File::tell(unsigned long long*)>
c0015935:	83 c4 10             	add    esp,0x10
c0015938:	85 c0                	test   eax,eax
c001593a:	0f 95 c0             	setne  al
c001593d:	31 d2                	xor    edx,edx
c001593f:	0f b6 c0             	movzx  eax,al
c0015942:	f7 d8                	neg    eax
c0015944:	83 d2 00             	adc    edx,0x0
c0015947:	83 c4 08             	add    esp,0x8
c001594a:	f7 da                	neg    edx
c001594c:	5b                   	pop    ebx
c001594d:	c3                   	ret    
c001594e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015953:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015958:	83 c4 08             	add    esp,0x8
c001595b:	5b                   	pop    ebx
c001595c:	c3                   	ret    

c001595d <sysCallSize(regs*)>:
c001595d:	53                   	push   ebx
c001595e:	83 ec 18             	sub    esp,0x18
c0015961:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015965:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015968:	83 f8 02             	cmp    eax,0x2
c001596b:	76 53                	jbe    c00159c0 <sysCallSize(regs*)+0x63>
c001596d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015972:	76 19                	jbe    c001598d <sysCallSize(regs*)+0x30>
c0015974:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015977:	31 d2                	xor    edx,edx
c0015979:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001597f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015986:	31 c0                	xor    eax,eax
c0015988:	83 c4 18             	add    esp,0x18
c001598b:	5b                   	pop    ebx
c001598c:	c3                   	ret    
c001598d:	83 ec 0c             	sub    esp,0xc
c0015990:	50                   	push   eax
c0015991:	e8 ad 5b ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c0015996:	83 c4 0c             	add    esp,0xc
c0015999:	8d 54 24 13          	lea    edx,[esp+0x13]
c001599d:	52                   	push   edx
c001599e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159a1:	50                   	push   eax
c00159a2:	e8 3f 79 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	85 c0                	test   eax,eax
c00159ac:	0f 95 c0             	setne  al
c00159af:	31 d2                	xor    edx,edx
c00159b1:	0f b6 c0             	movzx  eax,al
c00159b4:	f7 d8                	neg    eax
c00159b6:	83 d2 00             	adc    edx,0x0
c00159b9:	83 c4 18             	add    esp,0x18
c00159bc:	f7 da                	neg    edx
c00159be:	5b                   	pop    ebx
c00159bf:	c3                   	ret    
c00159c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159ca:	83 c4 18             	add    esp,0x18
c00159cd:	5b                   	pop    ebx
c00159ce:	c3                   	ret    

c00159cf <sysCallSizeFromFilename(regs*)>:
c00159cf:	57                   	push   edi
c00159d0:	56                   	push   esi
c00159d1:	53                   	push   ebx
c00159d2:	83 ec 20             	sub    esp,0x20
c00159d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159d9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00159dc:	83 fb 02             	cmp    ebx,0x2
c00159df:	0f 86 88 00 00 00    	jbe    c0015a6d <sysCallSizeFromFilename(regs*)+0x9e>
c00159e5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159eb:	76 1b                	jbe    c0015a08 <sysCallSizeFromFilename(regs*)+0x39>
c00159ed:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159f0:	31 d2                	xor    edx,edx
c00159f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159ff:	83 c4 20             	add    esp,0x20
c0015a02:	31 c0                	xor    eax,eax
c0015a04:	5b                   	pop    ebx
c0015a05:	5e                   	pop    esi
c0015a06:	5f                   	pop    edi
c0015a07:	c3                   	ret    
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	68 14 01 00 00       	push   0x114
c0015a10:	e8 ae 3f ff ff       	call   c00099c3 <malloc>
c0015a15:	83 c4 0c             	add    esp,0xc
c0015a18:	89 c7                	mov    edi,eax
c0015a1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a1f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a22:	53                   	push   ebx
c0015a23:	57                   	push   edi
c0015a24:	e8 ad 75 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0015a29:	83 c4 0c             	add    esp,0xc
c0015a2c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a30:	50                   	push   eax
c0015a31:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a34:	57                   	push   edi
c0015a35:	e8 ac 78 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	85 ff                	test   edi,edi
c0015a3f:	74 14                	je     c0015a55 <sysCallSizeFromFilename(regs*)+0x86>
c0015a41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a45:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a47:	83 ec 0c             	sub    esp,0xc
c0015a4a:	57                   	push   edi
c0015a4b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a55:	85 c0                	test   eax,eax
c0015a57:	0f 95 c0             	setne  al
c0015a5a:	31 d2                	xor    edx,edx
c0015a5c:	0f b6 c0             	movzx  eax,al
c0015a5f:	f7 d8                	neg    eax
c0015a61:	83 d2 00             	adc    edx,0x0
c0015a64:	83 c4 20             	add    esp,0x20
c0015a67:	f7 da                	neg    edx
c0015a69:	5b                   	pop    ebx
c0015a6a:	5e                   	pop    esi
c0015a6b:	5f                   	pop    edi
c0015a6c:	c3                   	ret    
c0015a6d:	83 c4 20             	add    esp,0x20
c0015a70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a75:	5b                   	pop    ebx
c0015a76:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a7b:	5e                   	pop    esi
c0015a7c:	5f                   	pop    edi
c0015a7d:	c3                   	ret    

c0015a7e <sysCallClose(regs*)>:
c0015a7e:	53                   	push   ebx
c0015a7f:	83 ec 08             	sub    esp,0x8
c0015a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a89:	83 f8 02             	cmp    eax,0x2
c0015a8c:	76 41                	jbe    c0015acf <sysCallClose(regs*)+0x51>
c0015a8e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a94:	83 fa 01             	cmp    edx,0x1
c0015a97:	76 2d                	jbe    c0015ac6 <sysCallClose(regs*)+0x48>
c0015a99:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a9e:	77 2f                	ja     c0015acf <sysCallClose(regs*)+0x51>
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	50                   	push   eax
c0015aa4:	e8 9a 5a ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c0015aa9:	89 c3                	mov    ebx,eax
c0015aab:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aae:	e8 e5 75 ff ff       	call   c000d098 <File::close()>
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	85 db                	test   ebx,ebx
c0015ab8:	74 0c                	je     c0015ac6 <sysCallClose(regs*)+0x48>
c0015aba:	83 ec 0c             	sub    esp,0xc
c0015abd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015abf:	53                   	push   ebx
c0015ac0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ac3:	83 c4 10             	add    esp,0x10
c0015ac6:	31 c0                	xor    eax,eax
c0015ac8:	31 d2                	xor    edx,edx
c0015aca:	83 c4 08             	add    esp,0x8
c0015acd:	5b                   	pop    ebx
c0015ace:	c3                   	ret    
c0015acf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ad4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ad9:	83 c4 08             	add    esp,0x8
c0015adc:	5b                   	pop    ebx
c0015add:	c3                   	ret    

c0015ade <sysCallOpenDir(regs*)>:
c0015ade:	56                   	push   esi
c0015adf:	53                   	push   ebx
c0015ae0:	53                   	push   ebx
c0015ae1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ae5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015ae8:	85 f6                	test   esi,esi
c0015aea:	74 59                	je     c0015b45 <sysCallOpenDir(regs*)+0x67>
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	68 14 01 00 00       	push   0x114
c0015af4:	e8 ca 3e ff ff       	call   c00099c3 <malloc>
c0015af9:	83 c4 0c             	add    esp,0xc
c0015afc:	89 c6                	mov    esi,eax
c0015afe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b03:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b06:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b09:	56                   	push   esi
c0015b0a:	e8 73 79 ff ff       	call   c000d482 <Directory::Directory(char const*, Process*)>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	85 f6                	test   esi,esi
c0015b14:	74 2f                	je     c0015b45 <sysCallOpenDir(regs*)+0x67>
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	56                   	push   esi
c0015b1a:	e8 c7 79 ff ff       	call   c000d4e6 <Directory::open()>
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	85 c0                	test   eax,eax
c0015b24:	75 1f                	jne    c0015b45 <sysCallOpenDir(regs*)+0x67>
c0015b26:	83 ec 0c             	sub    esp,0xc
c0015b29:	56                   	push   esi
c0015b2a:	e8 1f 57 ff ff       	call   c000b24e <UnixFile::getFileDescriptor()>
c0015b2f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	89 02                	mov    DWORD PTR [edx],eax
c0015b37:	c1 f8 1f             	sar    eax,0x1f
c0015b3a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b3d:	31 c0                	xor    eax,eax
c0015b3f:	59                   	pop    ecx
c0015b40:	31 d2                	xor    edx,edx
c0015b42:	5b                   	pop    ebx
c0015b43:	5e                   	pop    esi
c0015b44:	c3                   	ret    
c0015b45:	59                   	pop    ecx
c0015b46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b50:	5b                   	pop    ebx
c0015b51:	5e                   	pop    esi
c0015b52:	c3                   	ret    

c0015b53 <sysCallCloseDir(regs*)>:
c0015b53:	53                   	push   ebx
c0015b54:	83 ec 08             	sub    esp,0x8
c0015b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b5e:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b61:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b67:	77 2f                	ja     c0015b98 <sysCallCloseDir(regs*)+0x45>
c0015b69:	83 ec 0c             	sub    esp,0xc
c0015b6c:	50                   	push   eax
c0015b6d:	e8 d1 59 ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c0015b72:	89 c3                	mov    ebx,eax
c0015b74:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b77:	e8 c6 79 ff ff       	call   c000d542 <Directory::close()>
c0015b7c:	83 c4 10             	add    esp,0x10
c0015b7f:	85 db                	test   ebx,ebx
c0015b81:	74 0c                	je     c0015b8f <sysCallCloseDir(regs*)+0x3c>
c0015b83:	83 ec 0c             	sub    esp,0xc
c0015b86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b88:	53                   	push   ebx
c0015b89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	31 c0                	xor    eax,eax
c0015b91:	31 d2                	xor    edx,edx
c0015b93:	83 c4 08             	add    esp,0x8
c0015b96:	5b                   	pop    ebx
c0015b97:	c3                   	ret    
c0015b98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ba2:	83 c4 08             	add    esp,0x8
c0015ba5:	5b                   	pop    ebx
c0015ba6:	c3                   	ret    

c0015ba7 <sysCallMakeDir(regs*)>:
c0015ba7:	56                   	push   esi
c0015ba8:	53                   	push   ebx
c0015ba9:	83 ec 10             	sub    esp,0x10
c0015bac:	68 14 01 00 00       	push   0x114
c0015bb1:	e8 0d 3e ff ff       	call   c00099c3 <malloc>
c0015bb6:	83 c4 0c             	add    esp,0xc
c0015bb9:	89 c3                	mov    ebx,eax
c0015bbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015bc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bc7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015bca:	53                   	push   ebx
c0015bcb:	e8 b2 78 ff ff       	call   c000d482 <Directory::Directory(char const*, Process*)>
c0015bd0:	83 c4 10             	add    esp,0x10
c0015bd3:	85 db                	test   ebx,ebx
c0015bd5:	74 32                	je     c0015c09 <sysCallMakeDir(regs*)+0x62>
c0015bd7:	83 ec 0c             	sub    esp,0xc
c0015bda:	53                   	push   ebx
c0015bdb:	e8 e6 7a ff ff       	call   c000d6c6 <Directory::create()>
c0015be0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015be3:	89 c6                	mov    esi,eax
c0015be5:	e8 58 79 ff ff       	call   c000d542 <Directory::close()>
c0015bea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bf2:	83 c4 10             	add    esp,0x10
c0015bf5:	31 c0                	xor    eax,eax
c0015bf7:	59                   	pop    ecx
c0015bf8:	85 f6                	test   esi,esi
c0015bfa:	5b                   	pop    ebx
c0015bfb:	0f 95 c0             	setne  al
c0015bfe:	5e                   	pop    esi
c0015bff:	31 d2                	xor    edx,edx
c0015c01:	f7 d8                	neg    eax
c0015c03:	83 d2 00             	adc    edx,0x0
c0015c06:	f7 da                	neg    edx
c0015c08:	c3                   	ret    
c0015c09:	59                   	pop    ecx
c0015c0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c14:	5b                   	pop    ebx
c0015c15:	5e                   	pop    esi
c0015c16:	c3                   	ret    

c0015c17 <sysCallWait(regs*)>:
c0015c17:	83 ec 10             	sub    esp,0x10
c0015c1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c1e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c21:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c24:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c27:	e8 fc 24 00 00       	call   c0018128 <waitTask(int, int*, int)>
c0015c2c:	83 c4 1c             	add    esp,0x1c
c0015c2f:	99                   	cdq    
c0015c30:	c3                   	ret    

c0015c31 <sysCallNotImpl(regs*)>:
c0015c31:	83 ec 18             	sub    esp,0x18
c0015c34:	68 69 45 02 c0       	push   0xc0024569
c0015c39:	e8 ef e6 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0015c3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c48:	83 c4 1c             	add    esp,0x1c
c0015c4b:	c3                   	ret    

c0015c4c <sysPanic(regs*)>:
c0015c4c:	83 ec 18             	sub    esp,0x18
c0015c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c53:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c56:	e8 d2 e6 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0015c5b:	b8 01 00 00 00       	mov    eax,0x1
c0015c60:	31 d2                	xor    edx,edx
c0015c62:	83 c4 1c             	add    esp,0x1c
c0015c65:	c3                   	ret    

c0015c66 <sysCallRmdir(regs*)>:
c0015c66:	56                   	push   esi
c0015c67:	53                   	push   ebx
c0015c68:	83 ec 20             	sub    esp,0x20
c0015c6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c6f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c72:	68 14 01 00 00       	push   0x114
c0015c77:	e8 47 3d ff ff       	call   c00099c3 <malloc>
c0015c7c:	83 c4 0c             	add    esp,0xc
c0015c7f:	89 c3                	mov    ebx,eax
c0015c81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c86:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c89:	56                   	push   esi
c0015c8a:	53                   	push   ebx
c0015c8b:	e8 46 73 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0015c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c93:	e8 1a 75 ff ff       	call   c000d1b2 <File::unlink()>
c0015c98:	83 c4 10             	add    esp,0x10
c0015c9b:	85 db                	test   ebx,ebx
c0015c9d:	74 14                	je     c0015cb3 <sysCallRmdir(regs*)+0x4d>
c0015c9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ca3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ca5:	83 ec 0c             	sub    esp,0xc
c0015ca8:	53                   	push   ebx
c0015ca9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cac:	83 c4 10             	add    esp,0x10
c0015caf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cb3:	85 c0                	test   eax,eax
c0015cb5:	0f 95 c0             	setne  al
c0015cb8:	31 d2                	xor    edx,edx
c0015cba:	0f b6 c0             	movzx  eax,al
c0015cbd:	f7 d8                	neg    eax
c0015cbf:	83 d2 00             	adc    edx,0x0
c0015cc2:	83 c4 14             	add    esp,0x14
c0015cc5:	f7 da                	neg    edx
c0015cc7:	5b                   	pop    ebx
c0015cc8:	5e                   	pop    esi
c0015cc9:	c3                   	ret    

c0015cca <sysCallUnlink(regs*)>:
c0015cca:	56                   	push   esi
c0015ccb:	53                   	push   ebx
c0015ccc:	83 ec 20             	sub    esp,0x20
c0015ccf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cd3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cd6:	68 14 01 00 00       	push   0x114
c0015cdb:	e8 e3 3c ff ff       	call   c00099c3 <malloc>
c0015ce0:	83 c4 0c             	add    esp,0xc
c0015ce3:	89 c3                	mov    ebx,eax
c0015ce5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cea:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ced:	56                   	push   esi
c0015cee:	53                   	push   ebx
c0015cef:	e8 e2 72 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0015cf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cf7:	e8 b6 74 ff ff       	call   c000d1b2 <File::unlink()>
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	85 db                	test   ebx,ebx
c0015d01:	74 14                	je     c0015d17 <sysCallUnlink(regs*)+0x4d>
c0015d03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d07:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d09:	83 ec 0c             	sub    esp,0xc
c0015d0c:	53                   	push   ebx
c0015d0d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d10:	83 c4 10             	add    esp,0x10
c0015d13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d17:	85 c0                	test   eax,eax
c0015d19:	0f 95 c0             	setne  al
c0015d1c:	31 d2                	xor    edx,edx
c0015d1e:	0f b6 c0             	movzx  eax,al
c0015d21:	f7 d8                	neg    eax
c0015d23:	83 d2 00             	adc    edx,0x0
c0015d26:	83 c4 14             	add    esp,0x14
c0015d29:	f7 da                	neg    edx
c0015d2b:	5b                   	pop    ebx
c0015d2c:	5e                   	pop    esi
c0015d2d:	c3                   	ret    

c0015d2e <sysCallGetArgv(regs*)>:
c0015d2e:	83 ec 0c             	sub    esp,0xc
c0015d31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d35:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d38:	85 c0                	test   eax,eax
c0015d3a:	78 2b                	js     c0015d67 <sysCallGetArgv(regs*)+0x39>
c0015d3c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d42:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d45:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d4b:	7d 1a                	jge    c0015d67 <sysCallGetArgv(regs*)+0x39>
c0015d4d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015d54:	85 c0                	test   eax,eax
c0015d56:	74 17                	je     c0015d6f <sysCallGetArgv(regs*)+0x41>
c0015d58:	83 ec 08             	sub    esp,0x8
c0015d5b:	50                   	push   eax
c0015d5c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d5f:	e8 dc a9 fe ff       	call   c0000740 <strcpy>
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	31 c0                	xor    eax,eax
c0015d69:	31 d2                	xor    edx,edx
c0015d6b:	83 c4 0c             	add    esp,0xc
c0015d6e:	c3                   	ret    
c0015d6f:	b8 01 00 00 00       	mov    eax,0x1
c0015d74:	31 d2                	xor    edx,edx
c0015d76:	83 c4 0c             	add    esp,0xc
c0015d79:	c3                   	ret    

c0015d7a <sysCallTTYName(regs*)>:
c0015d7a:	56                   	push   esi
c0015d7b:	53                   	push   ebx
c0015d7c:	53                   	push   ebx
c0015d7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d81:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d84:	85 c0                	test   eax,eax
c0015d86:	74 5f                	je     c0015de7 <sysCallTTYName(regs*)+0x6d>
c0015d88:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d8b:	83 f8 02             	cmp    eax,0x2
c0015d8e:	77 3e                	ja     c0015dce <sysCallTTYName(regs*)+0x54>
c0015d90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d98:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015d9e:	85 db                	test   ebx,ebx
c0015da0:	74 45                	je     c0015de7 <sysCallTTYName(regs*)+0x6d>
c0015da2:	83 ec 0c             	sub    esp,0xc
c0015da5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015da7:	53                   	push   ebx
c0015da8:	ff 10                	call   DWORD PTR [eax]
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	84 c0                	test   al,al
c0015daf:	74 41                	je     c0015df2 <sysCallTTYName(regs*)+0x78>
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	81 c3 82 00 00 00    	add    ebx,0x82
c0015dba:	53                   	push   ebx
c0015dbb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015dbe:	e8 7d a9 fe ff       	call   c0000740 <strcpy>
c0015dc3:	83 c4 10             	add    esp,0x10
c0015dc6:	31 c0                	xor    eax,eax
c0015dc8:	59                   	pop    ecx
c0015dc9:	31 d2                	xor    edx,edx
c0015dcb:	5b                   	pop    ebx
c0015dcc:	5e                   	pop    esi
c0015dcd:	c3                   	ret    
c0015dce:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015dd3:	74 bb                	je     c0015d90 <sysCallTTYName(regs*)+0x16>
c0015dd5:	83 ec 0c             	sub    esp,0xc
c0015dd8:	50                   	push   eax
c0015dd9:	e8 65 57 ff ff       	call   c000b543 <getFromFileDescriptor(int)>
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	89 c3                	mov    ebx,eax
c0015de3:	85 db                	test   ebx,ebx
c0015de5:	75 bb                	jne    c0015da2 <sysCallTTYName(regs*)+0x28>
c0015de7:	59                   	pop    ecx
c0015de8:	b8 01 00 00 00       	mov    eax,0x1
c0015ded:	31 d2                	xor    edx,edx
c0015def:	5b                   	pop    ebx
c0015df0:	5e                   	pop    esi
c0015df1:	c3                   	ret    
c0015df2:	59                   	pop    ecx
c0015df3:	b8 02 00 00 00       	mov    eax,0x2
c0015df8:	31 d2                	xor    edx,edx
c0015dfa:	5b                   	pop    ebx
c0015dfb:	5e                   	pop    esi
c0015dfc:	c3                   	ret    

c0015dfd <sysCallUSleep(regs*)>:
c0015dfd:	83 ec 1c             	sub    esp,0x1c
c0015e00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e04:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e07:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e0a:	6a 00                	push   0x0
c0015e0c:	6a 64                	push   0x64
c0015e0e:	52                   	push   edx
c0015e0f:	50                   	push   eax
c0015e10:	e8 1f b1 00 00       	call   c0020f34 <__udivdi3>
c0015e15:	83 c4 14             	add    esp,0x14
c0015e18:	50                   	push   eax
c0015e19:	e8 da 23 00 00       	call   c00181f8 <milliTenthSleep(unsigned int)>
c0015e1e:	31 c0                	xor    eax,eax
c0015e20:	31 d2                	xor    edx,edx
c0015e22:	83 c4 1c             	add    esp,0x1c
c0015e25:	c3                   	ret    

c0015e26 <sysCallSpawn(regs*)>:
c0015e26:	56                   	push   esi
c0015e27:	53                   	push   ebx
c0015e28:	50                   	push   eax
c0015e29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e2d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e30:	85 c0                	test   eax,eax
c0015e32:	75 08                	jne    c0015e3c <sysCallSpawn(regs*)+0x16>
c0015e34:	59                   	pop    ecx
c0015e35:	31 c0                	xor    eax,eax
c0015e37:	31 d2                	xor    edx,edx
c0015e39:	5b                   	pop    ebx
c0015e3a:	5e                   	pop    esi
c0015e3b:	c3                   	ret    
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	68 1f 07 00 00       	push   0x71f
c0015e44:	e8 7a 3b ff ff       	call   c00099c3 <malloc>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	89 c6                	mov    esi,eax
c0015e4e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e51:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e54:	85 c0                	test   eax,eax
c0015e56:	75 32                	jne    c0015e8a <sysCallSpawn(regs*)+0x64>
c0015e58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e60:	52                   	push   edx
c0015e61:	50                   	push   eax
c0015e62:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e65:	56                   	push   esi
c0015e66:	e8 85 1a 00 00       	call   c00178f0 <Process::Process(char const*, Process*, char**)>
c0015e6b:	83 c4 10             	add    esp,0x10
c0015e6e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015e75:	75 bd                	jne    c0015e34 <sysCallSpawn(regs*)+0xe>
c0015e77:	83 ec 0c             	sub    esp,0xc
c0015e7a:	56                   	push   esi
c0015e7b:	e8 5c 1f 00 00       	call   c0017ddc <Process::createUserThread()>
c0015e80:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e82:	83 c4 10             	add    esp,0x10
c0015e85:	99                   	cdq    
c0015e86:	59                   	pop    ecx
c0015e87:	5b                   	pop    ebx
c0015e88:	5e                   	pop    esi
c0015e89:	c3                   	ret    
c0015e8a:	31 c0                	xor    eax,eax
c0015e8c:	eb d2                	jmp    c0015e60 <sysCallSpawn(regs*)+0x3a>

c0015e8e <sysCallGetEnv(regs*)>:
c0015e8e:	57                   	push   edi
c0015e8f:	56                   	push   esi
c0015e90:	53                   	push   ebx
c0015e91:	83 ec 1c             	sub    esp,0x1c
c0015e94:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e9d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015ea0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015ea3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ea6:	e8 ce e3 ff ff       	call   c0014279 <Krnl::getProcessTotalEnvCount(Process*)>
c0015eab:	83 c4 10             	add    esp,0x10
c0015eae:	39 c7                	cmp    edi,eax
c0015eb0:	7c 14                	jl     c0015ec6 <sysCallGetEnv(regs*)+0x38>
c0015eb2:	85 f6                	test   esi,esi
c0015eb4:	75 0b                	jne    c0015ec1 <sysCallGetEnv(regs*)+0x33>
c0015eb6:	83 c4 10             	add    esp,0x10
c0015eb9:	31 c0                	xor    eax,eax
c0015ebb:	5b                   	pop    ebx
c0015ebc:	31 d2                	xor    edx,edx
c0015ebe:	5e                   	pop    esi
c0015ebf:	5f                   	pop    edi
c0015ec0:	c3                   	ret    
c0015ec1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ec4:	eb f0                	jmp    c0015eb6 <sysCallGetEnv(regs*)+0x28>
c0015ec6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015eca:	52                   	push   edx
c0015ecb:	57                   	push   edi
c0015ecc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ed2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015ed5:	50                   	push   eax
c0015ed6:	e8 be e3 ff ff       	call   c0014299 <Krnl::getProcessEnvPair(Process*, int)>
c0015edb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015ede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ee2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015ee6:	83 c4 0c             	add    esp,0xc
c0015ee9:	85 c9                	test   ecx,ecx
c0015eeb:	75 23                	jne    c0015f10 <sysCallGetEnv(regs*)+0x82>
c0015eed:	83 ec 0c             	sub    esp,0xc
c0015ef0:	50                   	push   eax
c0015ef1:	e8 aa a7 fe ff       	call   c00006a0 <strlen>
c0015ef6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ef9:	89 c3                	mov    ebx,eax
c0015efb:	e8 a0 a7 fe ff       	call   c00006a0 <strlen>
c0015f00:	83 c4 10             	add    esp,0x10
c0015f03:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015f07:	83 c4 10             	add    esp,0x10
c0015f0a:	31 d2                	xor    edx,edx
c0015f0c:	5b                   	pop    ebx
c0015f0d:	5e                   	pop    esi
c0015f0e:	5f                   	pop    edi
c0015f0f:	c3                   	ret    
c0015f10:	83 ec 08             	sub    esp,0x8
c0015f13:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f16:	50                   	push   eax
c0015f17:	56                   	push   esi
c0015f18:	e8 23 a8 fe ff       	call   c0000740 <strcpy>
c0015f1d:	58                   	pop    eax
c0015f1e:	5a                   	pop    edx
c0015f1f:	68 83 45 02 c0       	push   0xc0024583
c0015f24:	56                   	push   esi
c0015f25:	e8 56 a9 fe ff       	call   c0000880 <strcat>
c0015f2a:	59                   	pop    ecx
c0015f2b:	5b                   	pop    ebx
c0015f2c:	57                   	push   edi
c0015f2d:	56                   	push   esi
c0015f2e:	e8 4d a9 fe ff       	call   c0000880 <strcat>
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	e9 7b ff ff ff       	jmp    c0015eb6 <sysCallGetEnv(regs*)+0x28>

c0015f3b <sysAppSettings(regs*)>:
c0015f3b:	57                   	push   edi
c0015f3c:	56                   	push   esi
c0015f3d:	56                   	push   esi
c0015f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f42:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f45:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f4b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f50:	66 3d c0 09          	cmp    ax,0x9c0
c0015f54:	75 2e                	jne    c0015f84 <sysAppSettings(regs*)+0x49>
c0015f56:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f5c:	83 e0 1f             	and    eax,0x1f
c0015f5f:	3c 01                	cmp    al,0x1
c0015f61:	74 2c                	je     c0015f8f <sysAppSettings(regs*)+0x54>
c0015f63:	3c 07                	cmp    al,0x7
c0015f65:	0f 84 b3 00 00 00    	je     c001601e <sysAppSettings(regs*)+0xe3>
c0015f6b:	84 c0                	test   al,al
c0015f6d:	0f 84 d2 00 00 00    	je     c0016045 <sysAppSettings(regs*)+0x10a>
c0015f73:	3c 08                	cmp    al,0x8
c0015f75:	74 63                	je     c0015fda <sysAppSettings(regs*)+0x9f>
c0015f77:	59                   	pop    ecx
c0015f78:	0f b6 c0             	movzx  eax,al
c0015f7b:	5e                   	pop    esi
c0015f7c:	05 e8 03 00 00       	add    eax,0x3e8
c0015f81:	5f                   	pop    edi
c0015f82:	99                   	cdq    
c0015f83:	c3                   	ret    
c0015f84:	b8 01 00 00 00       	mov    eax,0x1
c0015f89:	59                   	pop    ecx
c0015f8a:	31 d2                	xor    edx,edx
c0015f8c:	5e                   	pop    esi
c0015f8d:	5f                   	pop    edi
c0015f8e:	c3                   	ret    
c0015f8f:	50                   	push   eax
c0015f90:	68 00 01 00 00       	push   0x100
c0015f95:	6a 00                	push   0x0
c0015f97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f9f:	83 c0 0c             	add    eax,0xc
c0015fa2:	50                   	push   eax
c0015fa3:	e8 dc a6 fe ff       	call   c0000684 <memset>
c0015fa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fad:	b9 ff 00 00 00       	mov    ecx,0xff
c0015fb2:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015fb5:	83 c7 0c             	add    edi,0xc
c0015fb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fbf:	5a                   	pop    edx
c0015fc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fc3:	59                   	pop    ecx
c0015fc4:	8d 50 0c             	lea    edx,[eax+0xc]
c0015fc7:	52                   	push   edx
c0015fc8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fce:	e8 95 46 ff ff       	call   c000a668 <VgaText::setTitle(char*)>
c0015fd3:	83 c4 10             	add    esp,0x10
c0015fd6:	31 c0                	xor    eax,eax
c0015fd8:	eb af                	jmp    c0015f89 <sysAppSettings(regs*)+0x4e>
c0015fda:	83 ec 08             	sub    esp,0x8
c0015fdd:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fe3:	83 e0 0f             	and    eax,0xf
c0015fe6:	50                   	push   eax
c0015fe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015ff5:	e8 5e 46 ff ff       	call   c000a658 <VgaText::setTitleColour(VgaColour)>
c0015ffa:	5f                   	pop    edi
c0015ffb:	58                   	pop    eax
c0015ffc:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016002:	c1 e8 04             	shr    eax,0x4
c0016005:	83 e0 0f             	and    eax,0xf
c0016008:	50                   	push   eax
c0016009:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001600e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016011:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016017:	e8 2c 46 ff ff       	call   c000a648 <VgaText::setTitleTextColour(VgaColour)>
c001601c:	eb b5                	jmp    c0015fd3 <sysAppSettings(regs*)+0x98>
c001601e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016023:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016026:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001602c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016032:	c0 e8 06             	shr    al,0x6
c0016035:	83 e0 01             	and    eax,0x1
c0016038:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001603e:	31 c0                	xor    eax,eax
c0016040:	e9 44 ff ff ff       	jmp    c0015f89 <sysAppSettings(regs*)+0x4e>
c0016045:	b8 02 00 00 00       	mov    eax,0x2
c001604a:	e9 3a ff ff ff       	jmp    c0015f89 <sysAppSettings(regs*)+0x4e>

c001604f <sysSetFatAttrib(regs*)>:
c001604f:	57                   	push   edi
c0016050:	56                   	push   esi
c0016051:	53                   	push   ebx
c0016052:	83 ec 1c             	sub    esp,0x1c
c0016055:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016059:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001605c:	68 14 01 00 00       	push   0x114
c0016061:	e8 5d 39 ff ff       	call   c00099c3 <malloc>
c0016066:	83 c4 0c             	add    esp,0xc
c0016069:	89 c3                	mov    ebx,eax
c001606b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016070:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016073:	57                   	push   edi
c0016074:	53                   	push   ebx
c0016075:	e8 5c 6f ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001607a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001607d:	83 c4 0c             	add    esp,0xc
c0016080:	0f b6 d4             	movzx  edx,ah
c0016083:	0f b6 c0             	movzx  eax,al
c0016086:	52                   	push   edx
c0016087:	50                   	push   eax
c0016088:	53                   	push   ebx
c0016089:	e8 be 71 ff ff       	call   c000d24c <File::chfatattr(unsigned char, unsigned char)>
c001608e:	83 c4 10             	add    esp,0x10
c0016091:	85 db                	test   ebx,ebx
c0016093:	74 14                	je     c00160a9 <sysSetFatAttrib(regs*)+0x5a>
c0016095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016099:	8b 13                	mov    edx,DWORD PTR [ebx]
c001609b:	83 ec 0c             	sub    esp,0xc
c001609e:	53                   	push   ebx
c001609f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00160a2:	83 c4 10             	add    esp,0x10
c00160a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a9:	85 c0                	test   eax,eax
c00160ab:	0f 95 c0             	setne  al
c00160ae:	31 d2                	xor    edx,edx
c00160b0:	0f b6 c0             	movzx  eax,al
c00160b3:	f7 d8                	neg    eax
c00160b5:	83 d2 00             	adc    edx,0x0
c00160b8:	83 c4 10             	add    esp,0x10
c00160bb:	f7 da                	neg    edx
c00160bd:	5b                   	pop    ebx
c00160be:	5e                   	pop    esi
c00160bf:	5f                   	pop    edi
c00160c0:	c3                   	ret    

c00160c1 <sysPipe(regs*)>:
c00160c1:	57                   	push   edi
c00160c2:	56                   	push   esi
c00160c3:	53                   	push   ebx
c00160c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c8:	83 ec 0c             	sub    esp,0xc
c00160cb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00160ce:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00160d1:	6a 20                	push   0x20
c00160d3:	e8 eb 38 ff ff       	call   c00099c3 <malloc>
c00160d8:	89 c3                	mov    ebx,eax
c00160da:	58                   	pop    eax
c00160db:	5a                   	pop    edx
c00160dc:	68 00 50 00 00       	push   0x5000
c00160e1:	53                   	push   ebx
c00160e2:	e8 f9 42 ff ff       	call   c000a3e0 <Pipe::Pipe(int)>
c00160e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160ea:	e8 5f 51 ff ff       	call   c000b24e <UnixFile::getFileDescriptor()>
c00160ef:	89 07                	mov    DWORD PTR [edi],eax
c00160f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160f4:	e8 55 51 ff ff       	call   c000b24e <UnixFile::getFileDescriptor()>
c00160f9:	83 c4 10             	add    esp,0x10
c00160fc:	89 06                	mov    DWORD PTR [esi],eax
c00160fe:	31 d2                	xor    edx,edx
c0016100:	5b                   	pop    ebx
c0016101:	31 c0                	xor    eax,eax
c0016103:	5e                   	pop    esi
c0016104:	5f                   	pop    edi
c0016105:	c3                   	ret    

c0016106 <sysGetUnixTime(regs*)>:
c0016106:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001610b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016111:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016115:	e9 b0 78 ff ff       	jmp    c000d9ca <Clock::timeInSecondsLocal()>

c001611a <string_ends_with(char const*, char const*)>:
c001611a:	57                   	push   edi
c001611b:	56                   	push   esi
c001611c:	53                   	push   ebx
c001611d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016121:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016125:	83 ec 0c             	sub    esp,0xc
c0016128:	53                   	push   ebx
c0016129:	e8 72 a5 fe ff       	call   c00006a0 <strlen>
c001612e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016131:	89 c6                	mov    esi,eax
c0016133:	e8 68 a5 fe ff       	call   c00006a0 <strlen>
c0016138:	83 c4 10             	add    esp,0x10
c001613b:	39 c6                	cmp    esi,eax
c001613d:	7d 06                	jge    c0016145 <string_ends_with(char const*, char const*)+0x2b>
c001613f:	5b                   	pop    ebx
c0016140:	31 c0                	xor    eax,eax
c0016142:	5e                   	pop    esi
c0016143:	5f                   	pop    edi
c0016144:	c3                   	ret    
c0016145:	83 ec 08             	sub    esp,0x8
c0016148:	29 c6                	sub    esi,eax
c001614a:	57                   	push   edi
c001614b:	01 f3                	add    ebx,esi
c001614d:	53                   	push   ebx
c001614e:	e8 79 a6 fe ff       	call   c00007cc <strcmp>
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	85 c0                	test   eax,eax
c0016158:	5b                   	pop    ebx
c0016159:	0f 94 c0             	sete   al
c001615c:	5e                   	pop    esi
c001615d:	0f b6 c0             	movzx  eax,al
c0016160:	5f                   	pop    edi
c0016161:	c3                   	ret    

c0016162 <sysCallOpen(regs*)>:
c0016162:	56                   	push   esi
c0016163:	53                   	push   ebx
c0016164:	81 ec 04 01 00 00    	sub    esp,0x104
c001616a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016171:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016174:	85 c9                	test   ecx,ecx
c0016176:	0f 84 ad 01 00 00    	je     c0016329 <sysCallOpen(regs*)+0x1c7>
c001617c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001617f:	85 c0                	test   eax,eax
c0016181:	0f 84 a2 01 00 00    	je     c0016329 <sysCallOpen(regs*)+0x1c7>
c0016187:	52                   	push   edx
c0016188:	68 85 45 02 c0       	push   0xc0024585
c001618d:	50                   	push   eax
c001618e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016192:	56                   	push   esi
c0016193:	e8 94 6c ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c0016198:	89 34 24             	mov    DWORD PTR [esp],esi
c001619b:	e8 00 a5 fe ff       	call   c00006a0 <strlen>
c00161a0:	83 c4 10             	add    esp,0x10
c00161a3:	48                   	dec    eax
c00161a4:	74 1d                	je     c00161c3 <sysCallOpen(regs*)+0x61>
c00161a6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00161a9:	eb 0f                	jmp    c00161ba <sysCallOpen(regs*)+0x58>
c00161ab:	80 fa 3a             	cmp    dl,0x3a
c00161ae:	74 0f                	je     c00161bf <sysCallOpen(regs*)+0x5d>
c00161b0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00161b4:	48                   	dec    eax
c00161b5:	74 0c                	je     c00161c3 <sysCallOpen(regs*)+0x61>
c00161b7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00161ba:	80 fa 2e             	cmp    dl,0x2e
c00161bd:	75 ec                	jne    c00161ab <sysCallOpen(regs*)+0x49>
c00161bf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00161c3:	83 ec 08             	sub    esp,0x8
c00161c6:	68 89 45 02 c0       	push   0xc0024589
c00161cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161ce:	e8 47 ff ff ff       	call   c001611a <string_ends_with(char const*, char const*)>
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	85 c0                	test   eax,eax
c00161d8:	74 1d                	je     c00161f7 <sysCallOpen(regs*)+0x95>
c00161da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161dd:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00161e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161ea:	81 c4 04 01 00 00    	add    esp,0x104
c00161f0:	31 c0                	xor    eax,eax
c00161f2:	31 d2                	xor    edx,edx
c00161f4:	5b                   	pop    ebx
c00161f5:	5e                   	pop    esi
c00161f6:	c3                   	ret    
c00161f7:	83 ec 08             	sub    esp,0x8
c00161fa:	68 8e 45 02 c0       	push   0xc002458e
c00161ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016202:	e8 13 ff ff ff       	call   c001611a <string_ends_with(char const*, char const*)>
c0016207:	83 c4 10             	add    esp,0x10
c001620a:	85 c0                	test   eax,eax
c001620c:	75 cc                	jne    c00161da <sysCallOpen(regs*)+0x78>
c001620e:	83 ec 08             	sub    esp,0x8
c0016211:	68 8a 45 02 c0       	push   0xc002458a
c0016216:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016219:	e8 ae a5 fe ff       	call   c00007cc <strcmp>
c001621e:	83 c4 10             	add    esp,0x10
c0016221:	85 c0                	test   eax,eax
c0016223:	74 b5                	je     c00161da <sysCallOpen(regs*)+0x78>
c0016225:	83 ec 08             	sub    esp,0x8
c0016228:	68 89 45 02 c0       	push   0xc0024589
c001622d:	56                   	push   esi
c001622e:	e8 e7 fe ff ff       	call   c001611a <string_ends_with(char const*, char const*)>
c0016233:	83 c4 10             	add    esp,0x10
c0016236:	85 c0                	test   eax,eax
c0016238:	75 a0                	jne    c00161da <sysCallOpen(regs*)+0x78>
c001623a:	83 ec 08             	sub    esp,0x8
c001623d:	68 93 45 02 c0       	push   0xc0024593
c0016242:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016245:	e8 d0 fe ff ff       	call   c001611a <string_ends_with(char const*, char const*)>
c001624a:	83 c4 10             	add    esp,0x10
c001624d:	85 c0                	test   eax,eax
c001624f:	0f 85 e7 00 00 00    	jne    c001633c <sysCallOpen(regs*)+0x1da>
c0016255:	83 ec 08             	sub    esp,0x8
c0016258:	68 98 45 02 c0       	push   0xc0024598
c001625d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016260:	e8 b5 fe ff ff       	call   c001611a <string_ends_with(char const*, char const*)>
c0016265:	83 c4 10             	add    esp,0x10
c0016268:	85 c0                	test   eax,eax
c001626a:	0f 85 cc 00 00 00    	jne    c001633c <sysCallOpen(regs*)+0x1da>
c0016270:	83 ec 08             	sub    esp,0x8
c0016273:	68 94 45 02 c0       	push   0xc0024594
c0016278:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001627b:	e8 4c a5 fe ff       	call   c00007cc <strcmp>
c0016280:	83 c4 10             	add    esp,0x10
c0016283:	85 c0                	test   eax,eax
c0016285:	0f 84 b1 00 00 00    	je     c001633c <sysCallOpen(regs*)+0x1da>
c001628b:	83 ec 08             	sub    esp,0x8
c001628e:	68 93 45 02 c0       	push   0xc0024593
c0016293:	56                   	push   esi
c0016294:	e8 81 fe ff ff       	call   c001611a <string_ends_with(char const*, char const*)>
c0016299:	83 c4 10             	add    esp,0x10
c001629c:	85 c0                	test   eax,eax
c001629e:	0f 85 98 00 00 00    	jne    c001633c <sysCallOpen(regs*)+0x1da>
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	68 14 01 00 00       	push   0x114
c00162ac:	e8 12 37 ff ff       	call   c00099c3 <malloc>
c00162b1:	83 c4 0c             	add    esp,0xc
c00162b4:	89 c6                	mov    esi,eax
c00162b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162bb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162c1:	56                   	push   esi
c00162c2:	e8 0f 6d ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c00162c7:	83 c4 10             	add    esp,0x10
c00162ca:	85 f6                	test   esi,esi
c00162cc:	74 5b                	je     c0016329 <sysCallOpen(regs*)+0x1c7>
c00162ce:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162d1:	0f b6 c2             	movzx  eax,dl
c00162d4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162d7:	89 d0                	mov    eax,edx
c00162d9:	83 e0 01             	and    eax,0x1
c00162dc:	f6 c2 02             	test   dl,0x2
c00162df:	74 03                	je     c00162e4 <sysCallOpen(regs*)+0x182>
c00162e1:	83 c8 02             	or     eax,0x2
c00162e4:	f6 c2 04             	test   dl,0x4
c00162e7:	74 03                	je     c00162ec <sysCallOpen(regs*)+0x18a>
c00162e9:	83 c8 04             	or     eax,0x4
c00162ec:	f6 c2 08             	test   dl,0x8
c00162ef:	74 03                	je     c00162f4 <sysCallOpen(regs*)+0x192>
c00162f1:	83 c8 0a             	or     eax,0xa
c00162f4:	83 e2 10             	and    edx,0x10
c00162f7:	74 03                	je     c00162fc <sysCallOpen(regs*)+0x19a>
c00162f9:	83 c8 12             	or     eax,0x12
c00162fc:	83 ec 08             	sub    esp,0x8
c00162ff:	50                   	push   eax
c0016300:	56                   	push   esi
c0016301:	e8 34 6d ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	85 c0                	test   eax,eax
c001630b:	75 1c                	jne    c0016329 <sysCallOpen(regs*)+0x1c7>
c001630d:	83 ec 0c             	sub    esp,0xc
c0016310:	56                   	push   esi
c0016311:	e8 38 4f ff ff       	call   c000b24e <UnixFile::getFileDescriptor()>
c0016316:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016319:	83 c4 10             	add    esp,0x10
c001631c:	89 02                	mov    DWORD PTR [edx],eax
c001631e:	c1 f8 1f             	sar    eax,0x1f
c0016321:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016324:	e9 c1 fe ff ff       	jmp    c00161ea <sysCallOpen(regs*)+0x88>
c0016329:	81 c4 04 01 00 00    	add    esp,0x104
c001632f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016334:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016339:	5b                   	pop    ebx
c001633a:	5e                   	pop    esi
c001633b:	c3                   	ret    
c001633c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001633f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016345:	e9 99 fe ff ff       	jmp    c00161e3 <sysCallOpen(regs*)+0x81>

c001634a <Sys::loadSyscalls()>:
c001634a:	c7 05 00 6f 02 c0 bb 55 01 c0 	mov    DWORD PTR ds:0xc0026f00,0xc00155bb
c0016354:	c7 05 04 6f 02 c0 b0 51 01 c0 	mov    DWORD PTR ds:0xc0026f04,0xc00151b0
c001635e:	c7 05 08 6f 02 c0 a1 53 01 c0 	mov    DWORD PTR ds:0xc0026f08,0xc00153a1
c0016368:	c7 05 0c 6f 02 c0 f1 54 01 c0 	mov    DWORD PTR ds:0xc0026f0c,0xc00154f1
c0016372:	c7 05 10 6f 02 c0 39 53 01 c0 	mov    DWORD PTR ds:0xc0026f10,0xc0015339
c001637c:	c7 05 14 6f 02 c0 e7 51 01 c0 	mov    DWORD PTR ds:0xc0026f14,0xc00151e7
c0016386:	c7 05 18 6f 02 c0 c8 51 01 c0 	mov    DWORD PTR ds:0xc0026f18,0xc00151c8
c0016390:	c7 05 1c 6f 02 c0 f6 53 01 c0 	mov    DWORD PTR ds:0xc0026f1c,0xc00153f6
c001639a:	c7 05 24 6f 02 c0 7e 5a 01 c0 	mov    DWORD PTR ds:0xc0026f24,0xc0015a7e
c00163a4:	c7 05 20 6f 02 c0 62 61 01 c0 	mov    DWORD PTR ds:0xc0026f20,0xc0016162
c00163ae:	c7 05 28 6f 02 c0 de 5a 01 c0 	mov    DWORD PTR ds:0xc0026f28,0xc0015ade
c00163b8:	c7 05 2c 6f 02 c0 c1 57 01 c0 	mov    DWORD PTR ds:0xc0026f2c,0xc00157c1
c00163c2:	c7 05 30 6f 02 c0 f3 55 01 c0 	mov    DWORD PTR ds:0xc0026f30,0xc00155f3
c00163cc:	c7 05 34 6f 02 c0 f8 55 01 c0 	mov    DWORD PTR ds:0xc0026f34,0xc00155f8
c00163d6:	c7 05 38 6f 02 c0 a7 5b 01 c0 	mov    DWORD PTR ds:0xc0026f38,0xc0015ba7
c00163e0:	c7 05 3c 6f 02 c0 53 5b 01 c0 	mov    DWORD PTR ds:0xc0026f3c,0xc0015b53
c00163ea:	c7 05 40 6f 02 c0 9a 58 01 c0 	mov    DWORD PTR ds:0xc0026f40,0xc001589a
c00163f4:	c7 05 44 6f 02 c0 f1 58 01 c0 	mov    DWORD PTR ds:0xc0026f44,0xc00158f1
c00163fe:	c7 05 48 6f 02 c0 5d 59 01 c0 	mov    DWORD PTR ds:0xc0026f48,0xc001595d
c0016408:	c7 05 4c 6f 02 c0 fd 55 01 c0 	mov    DWORD PTR ds:0xc0026f4c,0xc00155fd
c0016412:	c7 05 50 6f 02 c0 17 5c 01 c0 	mov    DWORD PTR ds:0xc0026f50,0xc0015c17
c001641c:	c7 05 54 6f 02 c0 31 5c 01 c0 	mov    DWORD PTR ds:0xc0026f54,0xc0015c31
c0016426:	c7 05 58 6f 02 c0 31 5c 01 c0 	mov    DWORD PTR ds:0xc0026f58,0xc0015c31
c0016430:	c7 05 5c 6f 02 c0 66 5c 01 c0 	mov    DWORD PTR ds:0xc0026f5c,0xc0015c66
c001643a:	c7 05 60 6f 02 c0 ca 5c 01 c0 	mov    DWORD PTR ds:0xc0026f60,0xc0015cca
c0016444:	c7 05 64 6f 02 c0 07 56 01 c0 	mov    DWORD PTR ds:0xc0026f64,0xc0015607
c001644e:	c7 05 68 6f 02 c0 2e 5d 01 c0 	mov    DWORD PTR ds:0xc0026f68,0xc0015d2e
c0016458:	c7 05 6c 6f 02 c0 7e 57 01 c0 	mov    DWORD PTR ds:0xc0026f6c,0xc001577e
c0016462:	c7 05 70 6f 02 c0 7a 5d 01 c0 	mov    DWORD PTR ds:0xc0026f70,0xc0015d7a
c001646c:	c7 05 74 6f 02 c0 40 58 01 c0 	mov    DWORD PTR ds:0xc0026f74,0xc0015840
c0016476:	c7 05 78 6f 02 c0 fd 5d 01 c0 	mov    DWORD PTR ds:0xc0026f78,0xc0015dfd
c0016480:	c7 05 7c 6f 02 c0 cf 59 01 c0 	mov    DWORD PTR ds:0xc0026f7c,0xc00159cf
c001648a:	c7 05 80 6f 02 c0 26 5e 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc0015e26
c0016494:	c7 05 84 6f 02 c0 8e 5e 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc0015e8e
c001649e:	c7 05 88 6f 02 c0 3b 5f 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc0015f3b
c00164a8:	c7 05 8c 6f 02 c0 17 56 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc0015617
c00164b2:	c7 05 90 6f 02 c0 81 56 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc0015681
c00164bc:	c7 05 94 6f 02 c0 cb 56 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc00156cb
c00164c6:	c7 05 98 6f 02 c0 4f 60 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc001604f
c00164d0:	c7 05 9c 6f 02 c0 4c 5c 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc0015c4c
c00164da:	c7 05 a0 6f 02 c0 20 57 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc0015720
c00164e4:	c7 05 a4 6f 02 c0 c1 60 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc00160c1
c00164ee:	c7 05 a8 6f 02 c0 06 61 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc0016106
c00164f8:	c7 05 ac 6f 02 c0 91 52 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc0015291
c0016502:	c7 05 b0 6f 02 c0 12 54 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc0015412
c001650c:	c7 05 b4 6f 02 c0 a7 54 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc00154a7
c0016516:	c7 05 b8 6f 02 c0 7a 51 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc001517a
c0016520:	c7 05 bc 6f 02 c0 59 55 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015559
c001652a:	c7 05 c0 6f 02 c0 f3 51 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc00151f3
c0016534:	c7 05 c4 6f 02 c0 0d 52 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc001520d
c001653e:	c3                   	ret    

c001653f <Sys::systemCall(regs*, void*)>:
c001653f:	53                   	push   ebx
c0016540:	83 ec 08             	sub    esp,0x8
c0016543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016547:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001654a:	83 f8 7f             	cmp    eax,0x7f
c001654d:	77 16                	ja     c0016565 <Sys::systemCall(regs*, void*)+0x26>
c001654f:	8b 14 85 00 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9100]
c0016556:	85 d2                	test   edx,edx
c0016558:	74 0b                	je     c0016565 <Sys::systemCall(regs*, void*)+0x26>
c001655a:	83 ec 0c             	sub    esp,0xc
c001655d:	53                   	push   ebx
c001655e:	ff d2                	call   edx
c0016560:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016563:	eb 0d                	jmp    c0016572 <Sys::systemCall(regs*, void*)+0x33>
c0016565:	52                   	push   edx
c0016566:	52                   	push   edx
c0016567:	50                   	push   eax
c0016568:	68 9d 45 02 c0       	push   0xc002459d
c001656d:	e8 f9 64 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001657a:	31 d2                	xor    edx,edx
c001657c:	83 c4 08             	add    esp,0x8
c001657f:	5b                   	pop    ebx
c0016580:	c3                   	ret    

c0016581 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016581:	55                   	push   ebp
c0016582:	57                   	push   edi
c0016583:	56                   	push   esi
c0016584:	53                   	push   ebx
c0016585:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001658b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016592:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016599:	85 c0                	test   eax,eax
c001659b:	0f 95 c1             	setne  cl
c001659e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00165a6:	0f 94 c2             	sete   dl
c00165a9:	84 d1                	test   cl,dl
c00165ab:	74 23                	je     c00165d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165ad:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00165b3:	74 1b                	je     c00165d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00165bb:	89 da                	mov    edx,ebx
c00165bd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00165c3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00165c9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00165d0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00165d7:	05 ff 0f 00 00       	add    eax,0xfff
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165e3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165e9:	c1 e8 0c             	shr    eax,0xc
c00165ec:	89 fe                	mov    esi,edi
c00165ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165f2:	c1 ee 0c             	shr    esi,0xc
c00165f5:	6a 01                	push   0x1
c00165f7:	e8 9d 50 ff ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c00165fc:	89 c5                	mov    ebp,eax
c00165fe:	58                   	pop    eax
c00165ff:	5a                   	pop    edx
c0016600:	56                   	push   esi
c0016601:	68 b1 45 02 c0       	push   0xc00245b1
c0016606:	e8 60 64 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001660b:	59                   	pop    ecx
c001660c:	58                   	pop    eax
c001660d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016611:	68 c3 45 02 c0       	push   0xc00245c3
c0016616:	e8 50 64 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001661b:	83 c4 10             	add    esp,0x10
c001661e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016624:	0f 86 31 01 00 00    	jbe    c001675b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001662a:	c1 e6 0c             	shl    esi,0xc
c001662d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016630:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016633:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016637:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001663e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016641:	01 df                	add    edi,ebx
c0016643:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016646:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001664a:	0f 84 08 01 00 00    	je     c0016758 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016650:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016656:	76 05                	jbe    c001665d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016658:	bf 00 10 00 00       	mov    edi,0x1000
c001665d:	83 ec 0c             	sub    esp,0xc
c0016660:	31 d2                	xor    edx,edx
c0016662:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016669:	8b 08                	mov    ecx,DWORD PTR [eax]
c001666b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001666f:	50                   	push   eax
c0016670:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016674:	56                   	push   esi
c0016675:	52                   	push   edx
c0016676:	57                   	push   edi
c0016677:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001667e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016681:	83 c4 20             	add    esp,0x20
c0016684:	85 c0                	test   eax,eax
c0016686:	74 0a                	je     c0016692 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016688:	53                   	push   ebx
c0016689:	53                   	push   ebx
c001668a:	50                   	push   eax
c001668b:	68 d5 45 02 c0       	push   0xc00245d5
c0016690:	eb 0f                	jmp    c00166a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016692:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016696:	74 20                	je     c00166b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016698:	51                   	push   ecx
c0016699:	51                   	push   ecx
c001669a:	6a 00                	push   0x0
c001669c:	68 00 46 02 c0       	push   0xc0024600
c00166a1:	e8 c5 63 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00166a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00166a9:	e8 1b 53 ff ff       	call   c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>
c00166ae:	83 c4 10             	add    esp,0x10
c00166b1:	31 c0                	xor    eax,eax
c00166b3:	e9 68 01 00 00       	jmp    c0016820 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00166b8:	fa                   	cli    
c00166b9:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00166bf:	e8 07 37 ff ff       	call   c0009dcb <Phys::allocatePage()>
c00166c4:	6a 07                	push   0x7
c00166c6:	89 c7                	mov    edi,eax
c00166c8:	55                   	push   ebp
c00166c9:	50                   	push   eax
c00166ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166d2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166d8:	e8 63 56 ff ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00166dd:	83 c4 0c             	add    esp,0xc
c00166e0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166ed:	6a 00                	push   0x0
c00166ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166fd:	e8 98 54 ff ff       	call   c000bb9a <VAS::mapOtherVASIn(bool, VAS*)>
c0016702:	58                   	pop    eax
c0016703:	5a                   	pop    edx
c0016704:	68 07 0c 00 00       	push   0xc07
c0016709:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001670d:	57                   	push   edi
c001670e:	89 ef                	mov    edi,ebp
c0016710:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016717:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001671d:	6a 00                	push   0x0
c001671f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016724:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016727:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001672d:	e8 ca 59 ff ff       	call   c000c0fc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016732:	b9 00 10 00 00       	mov    ecx,0x1000
c0016737:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016739:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001673e:	83 c4 20             	add    esp,0x20
c0016741:	48                   	dec    eax
c0016742:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0016747:	85 c0                	test   eax,eax
c0016749:	75 01                	jne    c001674c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001674b:	fb                   	sti    
c001674c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016753:	e9 df fe ff ff       	jmp    c0016637 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016758:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001675b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016763:	0f 86 a9 00 00 00    	jbe    c0016812 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016769:	fa                   	cli    
c001676a:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0016770:	51                   	push   ecx
c0016771:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016778:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001677e:	6a 00                	push   0x0
c0016780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016785:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016788:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001678e:	e8 07 54 ff ff       	call   c000bb9a <VAS::mapOtherVASIn(bool, VAS*)>
c0016793:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016797:	c1 e6 0c             	shl    esi,0xc
c001679a:	01 de                	add    esi,ebx
c001679c:	83 c4 10             	add    esp,0x10
c001679f:	39 de                	cmp    esi,ebx
c00167a1:	74 61                	je     c0016804 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00167a3:	e8 23 36 ff ff       	call   c0009dcb <Phys::allocatePage()>
c00167a8:	6a 07                	push   0x7
c00167aa:	89 c7                	mov    edi,eax
c00167ac:	55                   	push   ebp
c00167ad:	50                   	push   eax
c00167ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167b6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167bc:	e8 7f 55 ff ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00167c1:	58                   	pop    eax
c00167c2:	5a                   	pop    edx
c00167c3:	68 07 0c 00 00       	push   0xc07
c00167c8:	53                   	push   ebx
c00167c9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167cf:	57                   	push   edi
c00167d0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167dd:	6a 00                	push   0x0
c00167df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167ed:	e8 0a 59 ff ff       	call   c000c0fc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167f2:	83 c4 1c             	add    esp,0x1c
c00167f5:	68 00 10 00 00       	push   0x1000
c00167fa:	6a 00                	push   0x0
c00167fc:	55                   	push   ebp
c00167fd:	e8 82 9e fe ff       	call   c0000684 <memset>
c0016802:	eb 98                	jmp    c001679c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016804:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0016809:	48                   	dec    eax
c001680a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001680f:	75 01                	jne    c0016812 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016811:	fb                   	sti    
c0016812:	83 ec 0c             	sub    esp,0xc
c0016815:	55                   	push   ebp
c0016816:	e8 ae 51 ff ff       	call   c000b9c9 <Virt::freeKernelVirtualPages(unsigned long)>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	b0 01                	mov    al,0x1
c0016820:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016826:	5b                   	pop    ebx
c0016827:	5e                   	pop    esi
c0016828:	5f                   	pop    edi
c0016829:	5d                   	pop    ebp
c001682a:	c3                   	ret    

c001682b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001682b:	55                   	push   ebp
c001682c:	57                   	push   edi
c001682d:	56                   	push   esi
c001682e:	53                   	push   ebx
c001682f:	83 ec 48             	sub    esp,0x48
c0016832:	68 14 01 00 00       	push   0x114
c0016837:	e8 87 31 ff ff       	call   c00099c3 <malloc>
c001683c:	83 c4 0c             	add    esp,0xc
c001683f:	89 c6                	mov    esi,eax
c0016841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016845:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016849:	50                   	push   eax
c001684a:	e8 87 67 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001684f:	58                   	pop    eax
c0016850:	5a                   	pop    edx
c0016851:	6a 01                	push   0x1
c0016853:	56                   	push   esi
c0016854:	e8 e1 67 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	85 c0                	test   eax,eax
c001685e:	0f 85 47 01 00 00    	jne    c00169ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016864:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	6a 34                	push   0x34
c0016871:	e8 4d 31 ff ff       	call   c00099c3 <malloc>
c0016876:	89 c3                	mov    ebx,eax
c0016878:	58                   	pop    eax
c0016879:	8b 06                	mov    eax,DWORD PTR [esi]
c001687b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001687f:	57                   	push   edi
c0016880:	53                   	push   ebx
c0016881:	6a 00                	push   0x0
c0016883:	6a 34                	push   0x34
c0016885:	56                   	push   esi
c0016886:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016889:	83 c4 20             	add    esp,0x20
c001688c:	85 c0                	test   eax,eax
c001688e:	0f 85 17 01 00 00    	jne    c00169ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016894:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001689a:	0f 85 0b 01 00 00    	jne    c00169ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168a3:	85 c0                	test   eax,eax
c00168a5:	0f 84 00 01 00 00    	je     c00169ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168ab:	31 d2                	xor    edx,edx
c00168ad:	55                   	push   ebp
c00168ae:	52                   	push   edx
c00168af:	50                   	push   eax
c00168b0:	56                   	push   esi
c00168b1:	e8 42 68 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c00168b6:	83 c4 10             	add    esp,0x10
c00168b9:	85 c0                	test   eax,eax
c00168bb:	0f 85 ea 00 00 00    	jne    c00169ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168c1:	83 ec 0c             	sub    esp,0xc
c00168c4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00168c7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168cf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168d3:	0f af c2             	imul   eax,edx
c00168d6:	50                   	push   eax
c00168d7:	e8 e7 30 ff ff       	call   c00099c3 <malloc>
c00168dc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00168e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168e9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168ed:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168f1:	0f af c2             	imul   eax,edx
c00168f4:	99                   	cdq    
c00168f5:	52                   	push   edx
c00168f6:	50                   	push   eax
c00168f7:	56                   	push   esi
c00168f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168fb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00168fe:	83 c4 20             	add    esp,0x20
c0016901:	85 c0                	test   eax,eax
c0016903:	0f 84 a2 00 00 00    	je     c00169ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016909:	31 d2                	xor    edx,edx
c001690b:	51                   	push   ecx
c001690c:	52                   	push   edx
c001690d:	50                   	push   eax
c001690e:	56                   	push   esi
c001690f:	e8 e4 67 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016914:	83 c4 10             	add    esp,0x10
c0016917:	85 c0                	test   eax,eax
c0016919:	0f 85 8c 00 00 00    	jne    c00169ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001691f:	83 ec 0c             	sub    esp,0xc
c0016922:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016926:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001692a:	31 ed                	xor    ebp,ebp
c001692c:	0f af c2             	imul   eax,edx
c001692f:	50                   	push   eax
c0016930:	e8 8e 30 ff ff       	call   c00099c3 <malloc>
c0016935:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016937:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001693b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001693e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016942:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016946:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001694a:	0f af c2             	imul   eax,edx
c001694d:	99                   	cdq    
c001694e:	52                   	push   edx
c001694f:	50                   	push   eax
c0016950:	56                   	push   esi
c0016951:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016954:	83 c4 20             	add    esp,0x20
c0016957:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001695f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016963:	0f 86 80 00 00 00    	jbe    c00169e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016969:	0f b7 fd             	movzx  edi,bp
c001696c:	c1 e7 05             	shl    edi,0x5
c001696f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016973:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016976:	75 6b                	jne    c00169e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016978:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001697b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001697f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016982:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016986:	52                   	push   edx
c0016987:	31 d2                	xor    edx,edx
c0016989:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001698c:	52                   	push   edx
c001698d:	50                   	push   eax
c001698e:	56                   	push   esi
c001698f:	e8 64 67 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016994:	83 c4 10             	add    esp,0x10
c0016997:	85 c0                	test   eax,eax
c0016999:	74 17                	je     c00169b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001699b:	83 ec 0c             	sub    esp,0xc
c001699e:	68 2c 46 02 c0       	push   0xc002462c
c00169a3:	e8 c3 60 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00169a8:	83 c4 10             	add    esp,0x10
c00169ab:	31 c0                	xor    eax,eax
c00169ad:	e9 87 00 00 00       	jmp    c0016a39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00169b2:	83 ec 0c             	sub    esp,0xc
c00169b5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00169b8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00169bb:	50                   	push   eax
c00169bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00169c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169c4:	56                   	push   esi
c00169c5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00169c9:	e8 b3 fb ff ff       	call   c0016581 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00169ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169d2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00169d6:	83 c4 20             	add    esp,0x20
c00169d9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00169dd:	73 04                	jae    c00169e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169e3:	45                   	inc    ebp
c00169e4:	e9 76 ff ff ff       	jmp    c001695f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169e9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169f5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00169fb:	83 ec 0c             	sub    esp,0xc
c00169fe:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016a04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a09:	05 00 10 00 00       	add    eax,0x1000
c0016a0e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a15:	e8 b9 2f ff ff       	call   c00099d3 <free>
c0016a1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a1d:	e8 b1 2f ff ff       	call   c00099d3 <free>
c0016a22:	58                   	pop    eax
c0016a23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a27:	e8 a7 2f ff ff       	call   c00099d3 <free>
c0016a2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a2f:	e8 64 66 ff ff       	call   c000d098 <File::close()>
c0016a34:	83 c4 10             	add    esp,0x10
c0016a37:	b0 01                	mov    al,0x1
c0016a39:	83 c4 3c             	add    esp,0x3c
c0016a3c:	5b                   	pop    ebx
c0016a3d:	5e                   	pop    esi
c0016a3e:	5f                   	pop    edi
c0016a3f:	5d                   	pop    ebp
c0016a40:	c3                   	ret    

c0016a41 <Thr::runtimeReferenceHelper()>:
c0016a41:	83 ec 18             	sub    esp,0x18
c0016a44:	68 34 46 02 c0       	push   0xc0024634
c0016a49:	e8 1d 60 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0016a4e:	fa                   	cli    
c0016a4f:	83 c4 10             	add    esp,0x10
c0016a52:	eb fe                	jmp    c0016a52 <Thr::runtimeReferenceHelper()+0x11>

c0016a54 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a54:	57                   	push   edi
c0016a55:	56                   	push   esi
c0016a56:	53                   	push   ebx
c0016a57:	31 db                	xor    ebx,ebx
c0016a59:	39 1d a0 78 02 c0    	cmp    DWORD PTR ds:0xc00278a0,ebx
c0016a5f:	7e 3c                	jle    c0016a9d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a61:	8b 34 9d 20 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd87e0]
c0016a68:	31 ff                	xor    edi,edi
c0016a6a:	39 3c 9d 20 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd88e0],edi
c0016a71:	7e 27                	jle    c0016a9a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a73:	50                   	push   eax
c0016a74:	50                   	push   eax
c0016a75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a79:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a7b:	03 04 9d a0 77 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8860]
c0016a82:	50                   	push   eax
c0016a83:	e8 44 9d fe ff       	call   c00007cc <strcmp>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	85 c0                	test   eax,eax
c0016a8d:	75 05                	jne    c0016a94 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a8f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a92:	eb 0b                	jmp    c0016a9f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a94:	83 c6 10             	add    esi,0x10
c0016a97:	47                   	inc    edi
c0016a98:	eb d0                	jmp    c0016a6a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a9a:	43                   	inc    ebx
c0016a9b:	eb bc                	jmp    c0016a59 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a9d:	31 c0                	xor    eax,eax
c0016a9f:	5b                   	pop    ebx
c0016aa0:	5e                   	pop    esi
c0016aa1:	5f                   	pop    edi
c0016aa2:	c3                   	ret    

c0016aa3 <Thr::loadKernelSymbolTable(char const*)>:
c0016aa3:	55                   	push   ebp
c0016aa4:	57                   	push   edi
c0016aa5:	56                   	push   esi
c0016aa6:	53                   	push   ebx
c0016aa7:	83 ec 68             	sub    esp,0x68
c0016aaa:	8b 35 f0 78 02 c0    	mov    esi,DWORD PTR ds:0xc00278f0
c0016ab0:	68 14 01 00 00       	push   0x114
c0016ab5:	e8 09 2f ff ff       	call   c00099c3 <malloc>
c0016aba:	83 c4 0c             	add    esp,0xc
c0016abd:	89 c3                	mov    ebx,eax
c0016abf:	56                   	push   esi
c0016ac0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016ac4:	50                   	push   eax
c0016ac5:	e8 0c 65 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0016aca:	5e                   	pop    esi
c0016acb:	5f                   	pop    edi
c0016acc:	6a 01                	push   0x1
c0016ace:	53                   	push   ebx
c0016acf:	e8 66 65 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0016ad4:	83 c4 10             	add    esp,0x10
c0016ad7:	85 c0                	test   eax,eax
c0016ad9:	74 0a                	je     c0016ae5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016adb:	83 ec 0c             	sub    esp,0xc
c0016ade:	68 56 46 02 c0       	push   0xc0024656
c0016ae3:	eb 34                	jmp    c0016b19 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016ae5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016aed:	83 ec 0c             	sub    esp,0xc
c0016af0:	6a 34                	push   0x34
c0016af2:	e8 cc 2e ff ff       	call   c00099c3 <malloc>
c0016af7:	59                   	pop    ecx
c0016af8:	89 c7                	mov    edi,eax
c0016afa:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016afe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b00:	56                   	push   esi
c0016b01:	57                   	push   edi
c0016b02:	6a 00                	push   0x0
c0016b04:	6a 34                	push   0x34
c0016b06:	53                   	push   ebx
c0016b07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b0a:	83 c4 20             	add    esp,0x20
c0016b0d:	85 c0                	test   eax,eax
c0016b0f:	74 17                	je     c0016b28 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016b11:	83 ec 0c             	sub    esp,0xc
c0016b14:	68 6d 46 02 c0       	push   0xc002466d
c0016b19:	e8 0f d8 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0016b1e:	83 c4 10             	add    esp,0x10
c0016b21:	31 c0                	xor    eax,eax
c0016b23:	e9 31 02 00 00       	jmp    c0016d59 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b28:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b2e:	75 e1                	jne    c0016b11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b30:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b33:	85 c0                	test   eax,eax
c0016b35:	74 da                	je     c0016b11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b37:	52                   	push   edx
c0016b38:	31 d2                	xor    edx,edx
c0016b3a:	52                   	push   edx
c0016b3b:	50                   	push   eax
c0016b3c:	53                   	push   ebx
c0016b3d:	e8 b6 65 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016b42:	83 c4 10             	add    esp,0x10
c0016b45:	85 c0                	test   eax,eax
c0016b47:	75 c8                	jne    c0016b11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b49:	83 ec 0c             	sub    esp,0xc
c0016b4c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b50:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b54:	31 ed                	xor    ebp,ebp
c0016b56:	0f af c2             	imul   eax,edx
c0016b59:	50                   	push   eax
c0016b5a:	e8 64 2e ff ff       	call   c00099c3 <malloc>
c0016b5f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b65:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b6c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b70:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b74:	0f af c2             	imul   eax,edx
c0016b77:	99                   	cdq    
c0016b78:	52                   	push   edx
c0016b79:	50                   	push   eax
c0016b7a:	53                   	push   ebx
c0016b7b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b7e:	83 c4 20             	add    esp,0x20
c0016b81:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b89:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ba1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016ba5:	0f 86 aa 00 00 00    	jbe    c0016c55 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016bab:	0f b7 f5             	movzx  esi,bp
c0016bae:	6b f6 28             	imul   esi,esi,0x28
c0016bb1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016bb5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016bb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bbc:	50                   	push   eax
c0016bbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bc1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016bc5:	8b 16                	mov    edx,DWORD PTR [esi]
c0016bc7:	6b c0 28             	imul   eax,eax,0x28
c0016bca:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016bce:	89 d0                	mov    eax,edx
c0016bd0:	31 d2                	xor    edx,edx
c0016bd2:	52                   	push   edx
c0016bd3:	50                   	push   eax
c0016bd4:	53                   	push   ebx
c0016bd5:	e8 1e 65 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016bda:	83 c4 0c             	add    esp,0xc
c0016bdd:	6a 20                	push   0x20
c0016bdf:	6a 00                	push   0x0
c0016be1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016be5:	52                   	push   edx
c0016be6:	e8 99 9a fe ff       	call   c0000684 <memset>
c0016beb:	58                   	pop    eax
c0016bec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bee:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bf2:	51                   	push   ecx
c0016bf3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bf7:	52                   	push   edx
c0016bf8:	6a 00                	push   0x0
c0016bfa:	6a 1f                	push   0x1f
c0016bfc:	53                   	push   ebx
c0016bfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c00:	83 c4 18             	add    esp,0x18
c0016c03:	68 84 46 02 c0       	push   0xc0024684
c0016c08:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c0c:	52                   	push   edx
c0016c0d:	e8 ba 9b fe ff       	call   c00007cc <strcmp>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	85 c0                	test   eax,eax
c0016c17:	75 0f                	jne    c0016c28 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c19:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c28:	50                   	push   eax
c0016c29:	50                   	push   eax
c0016c2a:	68 8c 46 02 c0       	push   0xc002468c
c0016c2f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c33:	50                   	push   eax
c0016c34:	e8 93 9b fe ff       	call   c00007cc <strcmp>
c0016c39:	83 c4 10             	add    esp,0x10
c0016c3c:	85 c0                	test   eax,eax
c0016c3e:	75 0f                	jne    c0016c4f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c40:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c4f:	45                   	inc    ebp
c0016c50:	e9 4c ff ff ff       	jmp    c0016ba1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c5a:	75 10                	jne    c0016c6c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	68 94 46 02 c0       	push   0xc0024694
c0016c64:	e8 c4 d6 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0016c69:	83 c4 10             	add    esp,0x10
c0016c6c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c71:	75 10                	jne    c0016c83 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c73:	83 ec 0c             	sub    esp,0xc
c0016c76:	68 94 46 02 c0       	push   0xc0024694
c0016c7b:	e8 ad d6 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0016c80:	83 c4 10             	add    esp,0x10
c0016c83:	31 d2                	xor    edx,edx
c0016c85:	50                   	push   eax
c0016c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8a:	52                   	push   edx
c0016c8b:	50                   	push   eax
c0016c8c:	53                   	push   ebx
c0016c8d:	e8 66 64 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016c92:	5a                   	pop    edx
c0016c93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c97:	e8 27 2d ff ff       	call   c00099c3 <malloc>
c0016c9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ca0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ca4:	31 c9                	xor    ecx,ecx
c0016ca6:	5e                   	pop    esi
c0016ca7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ca9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016cad:	55                   	push   ebp
c0016cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb2:	51                   	push   ecx
c0016cb3:	52                   	push   edx
c0016cb4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cb8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016cbc:	53                   	push   ebx
c0016cbd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cc0:	83 c4 14             	add    esp,0x14
c0016cc3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016cc7:	e8 f7 2c ff ff       	call   c00099c3 <malloc>
c0016ccc:	89 c6                	mov    esi,eax
c0016cce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cd0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cd3:	56                   	push   esi
c0016cd4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016cd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cdc:	51                   	push   ecx
c0016cdd:	52                   	push   edx
c0016cde:	53                   	push   ebx
c0016cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ce2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ce6:	8b 15 a0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278a0
c0016cec:	83 c4 1c             	add    esp,0x1c
c0016cef:	c1 e8 04             	shr    eax,0x4
c0016cf2:	89 04 95 20 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd88e0],eax
c0016cf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cfd:	31 d2                	xor    edx,edx
c0016cff:	52                   	push   edx
c0016d00:	50                   	push   eax
c0016d01:	53                   	push   ebx
c0016d02:	e8 f1 63 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016d07:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d09:	31 d2                	xor    edx,edx
c0016d0b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d0e:	56                   	push   esi
c0016d0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d13:	52                   	push   edx
c0016d14:	50                   	push   eax
c0016d15:	53                   	push   ebx
c0016d16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d19:	83 c4 14             	add    esp,0x14
c0016d1c:	53                   	push   ebx
c0016d1d:	e8 76 63 ff ff       	call   c000d098 <File::close()>
c0016d22:	5d                   	pop    ebp
c0016d23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d27:	e8 a7 2c ff ff       	call   c00099d3 <free>
c0016d2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d2f:	e8 9f 2c ff ff       	call   c00099d3 <free>
c0016d34:	a1 a0 78 02 c0       	mov    eax,ds:0xc00278a0
c0016d39:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d3d:	8d 50 01             	lea    edx,[eax+0x1]
c0016d40:	89 0c 85 20 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87e0],ecx
c0016d47:	89 34 85 a0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8860],esi
c0016d4e:	89 15 a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,edx
c0016d54:	83 c4 10             	add    esp,0x10
c0016d57:	b0 01                	mov    al,0x1
c0016d59:	83 c4 5c             	add    esp,0x5c
c0016d5c:	5b                   	pop    ebx
c0016d5d:	5e                   	pop    esi
c0016d5e:	5f                   	pop    edi
c0016d5f:	5d                   	pop    ebp
c0016d60:	c3                   	ret    

c0016d61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d61:	55                   	push   ebp
c0016d62:	57                   	push   edi
c0016d63:	56                   	push   esi
c0016d64:	53                   	push   ebx
c0016d65:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d6b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d72:	8b 1d f0 78 02 c0    	mov    ebx,DWORD PTR ds:0xc00278f0
c0016d78:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d7c:	68 14 01 00 00       	push   0x114
c0016d81:	e8 3d 2c ff ff       	call   c00099c3 <malloc>
c0016d86:	83 c4 0c             	add    esp,0xc
c0016d89:	89 c5                	mov    ebp,eax
c0016d8b:	53                   	push   ebx
c0016d8c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d93:	50                   	push   eax
c0016d94:	e8 3d 62 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0016d99:	5e                   	pop    esi
c0016d9a:	5f                   	pop    edi
c0016d9b:	6a 01                	push   0x1
c0016d9d:	55                   	push   ebp
c0016d9e:	e8 97 62 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	85 c0                	test   eax,eax
c0016da8:	0f 85 a7 06 00 00    	jne    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dae:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	6a 34                	push   0x34
c0016dbb:	e8 03 2c ff ff       	call   c00099c3 <malloc>
c0016dc0:	5b                   	pop    ebx
c0016dc1:	89 c7                	mov    edi,eax
c0016dc3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016dc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dca:	53                   	push   ebx
c0016dcb:	57                   	push   edi
c0016dcc:	6a 00                	push   0x0
c0016dce:	6a 34                	push   0x34
c0016dd0:	55                   	push   ebp
c0016dd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dd4:	83 c4 20             	add    esp,0x20
c0016dd7:	85 c0                	test   eax,eax
c0016dd9:	0f 85 76 06 00 00    	jne    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ddf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016de5:	0f 85 6a 06 00 00    	jne    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016deb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016dee:	85 c0                	test   eax,eax
c0016df0:	0f 84 5f 06 00 00    	je     c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016df6:	31 d2                	xor    edx,edx
c0016df8:	51                   	push   ecx
c0016df9:	52                   	push   edx
c0016dfa:	50                   	push   eax
c0016dfb:	55                   	push   ebp
c0016dfc:	e8 f7 62 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	85 c0                	test   eax,eax
c0016e06:	0f 85 49 06 00 00    	jne    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e0c:	83 ec 0c             	sub    esp,0xc
c0016e0f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016e12:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e16:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e1a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e1e:	0f af c2             	imul   eax,edx
c0016e21:	50                   	push   eax
c0016e22:	e8 9c 2b ff ff       	call   c00099c3 <malloc>
c0016e27:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e35:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e39:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e3d:	0f af c2             	imul   eax,edx
c0016e40:	99                   	cdq    
c0016e41:	52                   	push   edx
c0016e42:	50                   	push   eax
c0016e43:	55                   	push   ebp
c0016e44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e47:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e4a:	83 c4 20             	add    esp,0x20
c0016e4d:	85 c0                	test   eax,eax
c0016e4f:	0f 84 00 06 00 00    	je     c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e55:	52                   	push   edx
c0016e56:	31 d2                	xor    edx,edx
c0016e58:	52                   	push   edx
c0016e59:	50                   	push   eax
c0016e5a:	55                   	push   ebp
c0016e5b:	e8 98 62 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016e60:	83 c4 10             	add    esp,0x10
c0016e63:	85 c0                	test   eax,eax
c0016e65:	0f 85 ea 05 00 00    	jne    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e6b:	83 ec 0c             	sub    esp,0xc
c0016e6e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e72:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e76:	31 f6                	xor    esi,esi
c0016e78:	0f af c2             	imul   eax,edx
c0016e7b:	50                   	push   eax
c0016e7c:	e8 42 2b ff ff       	call   c00099c3 <malloc>
c0016e81:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e8b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e8f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e93:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e97:	0f af c2             	imul   eax,edx
c0016e9a:	99                   	cdq    
c0016e9b:	52                   	push   edx
c0016e9c:	50                   	push   eax
c0016e9d:	55                   	push   ebp
c0016e9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ea1:	83 c4 20             	add    esp,0x20
c0016ea4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016ea8:	0f 86 8a 00 00 00    	jbe    c0016f38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016eae:	0f b7 de             	movzx  ebx,si
c0016eb1:	c1 e3 05             	shl    ebx,0x5
c0016eb4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016eb8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016ebb:	75 75                	jne    c0016f32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016ebd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ec0:	31 d2                	xor    edx,edx
c0016ec2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ec6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ecd:	50                   	push   eax
c0016ece:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016ed1:	52                   	push   edx
c0016ed2:	50                   	push   eax
c0016ed3:	55                   	push   ebp
c0016ed4:	e8 1f 62 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016ed9:	83 c4 10             	add    esp,0x10
c0016edc:	85 c0                	test   eax,eax
c0016ede:	0f 85 71 05 00 00    	jne    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ee4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016eeb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016eee:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016ef2:	31 d2                	xor    edx,edx
c0016ef4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016ef8:	83 ec 0c             	sub    esp,0xc
c0016efb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016eff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f06:	50                   	push   eax
c0016f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f0f:	52                   	push   edx
c0016f10:	50                   	push   eax
c0016f11:	55                   	push   ebp
c0016f12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f15:	83 c4 1c             	add    esp,0x1c
c0016f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f1b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f1e:	50                   	push   eax
c0016f1f:	6a 00                	push   0x0
c0016f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f25:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f29:	50                   	push   eax
c0016f2a:	e8 55 97 fe ff       	call   c0000684 <memset>
c0016f2f:	83 c4 10             	add    esp,0x10
c0016f32:	46                   	inc    esi
c0016f33:	e9 6c ff ff ff       	jmp    c0016ea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f38:	53                   	push   ebx
c0016f39:	31 db                	xor    ebx,ebx
c0016f3b:	68 00 01 00 00       	push   0x100
c0016f40:	6a 00                	push   0x0
c0016f42:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f46:	50                   	push   eax
c0016f47:	e8 38 97 fe ff       	call   c0000684 <memset>
c0016f4c:	83 c4 0c             	add    esp,0xc
c0016f4f:	68 00 01 00 00       	push   0x100
c0016f54:	6a 00                	push   0x0
c0016f56:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f5d:	50                   	push   eax
c0016f5e:	e8 21 97 fe ff       	call   c0000684 <memset>
c0016f63:	83 c4 10             	add    esp,0x10
c0016f66:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f6e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f76:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f7e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f86:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f8e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f92:	0f 86 30 01 00 00    	jbe    c00170c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f98:	0f b7 f3             	movzx  esi,bx
c0016f9b:	6b f6 28             	imul   esi,esi,0x28
c0016f9e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016fa2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016fa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fa9:	52                   	push   edx
c0016faa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fae:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016fb2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fb4:	6b d2 28             	imul   edx,edx,0x28
c0016fb7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016fbb:	31 d2                	xor    edx,edx
c0016fbd:	52                   	push   edx
c0016fbe:	50                   	push   eax
c0016fbf:	55                   	push   ebp
c0016fc0:	e8 33 61 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016fc5:	83 c4 0c             	add    esp,0xc
c0016fc8:	6a 20                	push   0x20
c0016fca:	6a 00                	push   0x0
c0016fcc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fd3:	51                   	push   ecx
c0016fd4:	e8 ab 96 fe ff       	call   c0000684 <memset>
c0016fd9:	59                   	pop    ecx
c0016fda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fdd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016fe1:	52                   	push   edx
c0016fe2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016fe9:	51                   	push   ecx
c0016fea:	6a 00                	push   0x0
c0016fec:	6a 1f                	push   0x1f
c0016fee:	55                   	push   ebp
c0016fef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ff2:	83 c4 1c             	add    esp,0x1c
c0016ff5:	6a 09                	push   0x9
c0016ff7:	68 ae 46 02 c0       	push   0xc00246ae
c0016ffc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017003:	51                   	push   ecx
c0017004:	e8 77 95 fe ff       	call   c0000580 <memcmp>
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	85 c0                	test   eax,eax
c001700e:	75 21                	jne    c0017031 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017014:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017018:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001701c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017020:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017023:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001702a:	89 d0                	mov    eax,edx
c001702c:	40                   	inc    eax
c001702d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017031:	50                   	push   eax
c0017032:	6a 09                	push   0x9
c0017034:	68 b8 46 02 c0       	push   0xc00246b8
c0017039:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017040:	50                   	push   eax
c0017041:	e8 3a 95 fe ff       	call   c0000580 <memcmp>
c0017046:	83 c4 10             	add    esp,0x10
c0017049:	85 c0                	test   eax,eax
c001704b:	75 21                	jne    c001706e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001704d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017055:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017059:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001705d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017060:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017067:	89 d0                	mov    eax,edx
c0017069:	40                   	inc    eax
c001706a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001706e:	50                   	push   eax
c001706f:	50                   	push   eax
c0017070:	68 84 46 02 c0       	push   0xc0024684
c0017075:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001707c:	50                   	push   eax
c001707d:	e8 4a 97 fe ff       	call   c00007cc <strcmp>
c0017082:	83 c4 10             	add    esp,0x10
c0017085:	85 c0                	test   eax,eax
c0017087:	75 0f                	jne    c0017098 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017089:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001708c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017098:	50                   	push   eax
c0017099:	50                   	push   eax
c001709a:	68 8c 46 02 c0       	push   0xc002468c
c001709f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170a6:	50                   	push   eax
c00170a7:	e8 20 97 fe ff       	call   c00007cc <strcmp>
c00170ac:	83 c4 10             	add    esp,0x10
c00170af:	85 c0                	test   eax,eax
c00170b1:	75 0f                	jne    c00170c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00170b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170c2:	43                   	inc    ebx
c00170c3:	e9 c6 fe ff ff       	jmp    c0016f8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00170c8:	31 d2                	xor    edx,edx
c00170ca:	50                   	push   eax
c00170cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170cf:	52                   	push   edx
c00170d0:	50                   	push   eax
c00170d1:	55                   	push   ebp
c00170d2:	e8 21 60 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c00170d7:	58                   	pop    eax
c00170d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170dc:	e8 e2 28 ff ff       	call   c00099c3 <malloc>
c00170e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170e8:	31 d2                	xor    edx,edx
c00170ea:	58                   	pop    eax
c00170eb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170ef:	53                   	push   ebx
c00170f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170f8:	52                   	push   edx
c00170f9:	50                   	push   eax
c00170fa:	55                   	push   ebp
c00170fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170fe:	83 c4 14             	add    esp,0x14
c0017101:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017105:	e8 b9 28 ff ff       	call   c00099c3 <malloc>
c001710a:	31 d2                	xor    edx,edx
c001710c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017110:	83 c4 0c             	add    esp,0xc
c0017113:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017117:	52                   	push   edx
c0017118:	50                   	push   eax
c0017119:	55                   	push   ebp
c001711a:	e8 d9 5f ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c001711f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017122:	31 d2                	xor    edx,edx
c0017124:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017127:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001712b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001712f:	52                   	push   edx
c0017130:	50                   	push   eax
c0017131:	55                   	push   ebp
c0017132:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017135:	83 c4 20             	add    esp,0x20
c0017138:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017140:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017144:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017148:	0f 84 0b 03 00 00    	je     c0017459 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001714e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017155:	31 d2                	xor    edx,edx
c0017157:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001715b:	c1 e8 03             	shr    eax,0x3
c001715e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017162:	51                   	push   ecx
c0017163:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017167:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001716b:	52                   	push   edx
c001716c:	50                   	push   eax
c001716d:	55                   	push   ebp
c001716e:	e8 85 5f ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0017173:	5b                   	pop    ebx
c0017174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017178:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001717f:	e8 3f 28 ff ff       	call   c00099c3 <malloc>
c0017184:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017187:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001718b:	31 d2                	xor    edx,edx
c001718d:	5e                   	pop    esi
c001718e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017192:	50                   	push   eax
c0017193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001719b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00171a2:	52                   	push   edx
c00171a3:	50                   	push   eax
c00171a4:	55                   	push   ebp
c00171a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171a8:	83 c4 20             	add    esp,0x20
c00171ab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00171b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00171b7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00171bb:	0f 8d 7c 02 00 00    	jge    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00171c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171c9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00171ce:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00171d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171d9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00171dd:	89 d8                	mov    eax,ebx
c00171df:	c1 e8 08             	shr    eax,0x8
c00171e2:	89 c6                	mov    esi,eax
c00171e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171e8:	c1 e6 04             	shl    esi,0x4
c00171eb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171ef:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171f2:	85 d2                	test   edx,edx
c00171f4:	0f 85 bf 00 00 00    	jne    c00172b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171fa:	83 ec 0c             	sub    esp,0xc
c00171fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017201:	03 06                	add    eax,DWORD PTR [esi]
c0017203:	50                   	push   eax
c0017204:	e8 4b f8 ff ff       	call   c0016a54 <Thr::getAddressOfKernelSymbol(char const*)>
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	89 c2                	mov    edx,eax
c001720e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017213:	85 c0                	test   eax,eax
c0017215:	0f 85 9e 00 00 00    	jne    c00172b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001721b:	83 ec 0c             	sub    esp,0xc
c001721e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017222:	03 06                	add    eax,DWORD PTR [esi]
c0017224:	50                   	push   eax
c0017225:	e8 e6 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001722a:	83 c4 10             	add    esp,0x10
c001722d:	89 c2                	mov    edx,eax
c001722f:	85 c0                	test   eax,eax
c0017231:	0f 85 82 00 00 00    	jne    c00172b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017237:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001723b:	50                   	push   eax
c001723c:	50                   	push   eax
c001723d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017241:	03 06                	add    eax,DWORD PTR [esi]
c0017243:	50                   	push   eax
c0017244:	68 c2 46 02 c0       	push   0xc00246c2
c0017249:	e8 1d 58 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001724e:	58                   	pop    eax
c001724f:	5a                   	pop    edx
c0017250:	68 dc 46 02 c0       	push   0xc00246dc
c0017255:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001725c:	50                   	push   eax
c001725d:	e8 de 94 fe ff       	call   c0000740 <strcpy>
c0017262:	59                   	pop    ecx
c0017263:	58                   	pop    eax
c0017264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017268:	03 06                	add    eax,DWORD PTR [esi]
c001726a:	50                   	push   eax
c001726b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017272:	50                   	push   eax
c0017273:	e8 08 96 fe ff       	call   c0000880 <strcat>
c0017278:	58                   	pop    eax
c0017279:	5a                   	pop    edx
c001727a:	68 72 47 02 c0       	push   0xc0024772
c001727f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017286:	50                   	push   eax
c0017287:	e8 f4 95 fe ff       	call   c0000880 <strcat>
c001728c:	83 c4 10             	add    esp,0x10
c001728f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017294:	0f 84 5d 01 00 00    	je     c00173f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001729a:	83 ec 0c             	sub    esp,0xc
c001729d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172a4:	50                   	push   eax
c00172a5:	e8 83 d0 ff ff       	call   c001432d <Krnl::panic(char const*)>
c00172aa:	83 c4 10             	add    esp,0x10
c00172ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00172b1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172b5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00172b9:	80 fb 01             	cmp    bl,0x1
c00172bc:	0f 85 88 00 00 00    	jne    c001734a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00172c2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00172c9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00172cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00172d1:	01 ce                	add    esi,ecx
c00172d3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00172d9:	0f 94 c0             	sete   al
c00172dc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00172e2:	0f 94 c3             	sete   bl
c00172e5:	09 c3                	or     ebx,eax
c00172e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00172e9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172ee:	74 41                	je     c0017331 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172f0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172f3:	84 db                	test   bl,bl
c00172f5:	75 15                	jne    c001730c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172fb:	66 83 f8 0c          	cmp    ax,0xc
c00172ff:	76 05                	jbe    c0017306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017301:	b8 0c 00 00 00       	mov    eax,0xc
c0017306:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001730a:	76 37                	jbe    c0017343 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001730c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017310:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017315:	0f 84 dc 00 00 00    	je     c00173f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001731b:	83 ec 0c             	sub    esp,0xc
c001731e:	68 f3 46 02 c0       	push   0xc00246f3
c0017323:	e8 05 d0 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0017328:	83 c4 10             	add    esp,0x10
c001732b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001732f:	eb 12                	jmp    c0017343 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017331:	01 c1                	add    ecx,eax
c0017333:	84 db                	test   bl,bl
c0017335:	75 0c                	jne    c0017343 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017337:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001733b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001733f:	77 02                	ja     c0017343 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017341:	01 d1                	add    ecx,edx
c0017343:	89 0e                	mov    DWORD PTR [esi],ecx
c0017345:	e9 ea 00 00 00       	jmp    c0017434 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001734a:	80 fb 02             	cmp    bl,0x2
c001734d:	75 7c                	jne    c00173cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001734f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017356:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001735a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001735e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017364:	74 20                	je     c0017386 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017366:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001736c:	74 18                	je     c0017386 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001736e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017372:	b9 0a 00 00 00       	mov    ecx,0xa
c0017377:	66 83 f8 0e          	cmp    ax,0xe
c001737b:	77 03                	ja     c0017380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001737d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017380:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017384:	76 1f                	jbe    c00173a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017386:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001738a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001738f:	74 66                	je     c00173f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017391:	83 ec 0c             	sub    esp,0xc
c0017394:	68 0f 47 02 c0       	push   0xc002470f
c0017399:	e8 8f cf ff ff       	call   c001432d <Krnl::panic(char const*)>
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00173a7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00173ac:	74 13                	je     c00173c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00173ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173b2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00173b9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00173bd:	01 c8                	add    eax,ecx
c00173bf:	eb 04                	jmp    c00173c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00173c1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00173c5:	01 c2                	add    edx,eax
c00173c7:	89 16                	mov    DWORD PTR [esi],edx
c00173c9:	eb 69                	jmp    c0017434 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173cb:	0f b6 db             	movzx  ebx,bl
c00173ce:	50                   	push   eax
c00173cf:	50                   	push   eax
c00173d0:	53                   	push   ebx
c00173d1:	68 2b 47 02 c0       	push   0xc002472b
c00173d6:	e8 90 56 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00173db:	83 c4 10             	add    esp,0x10
c00173de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173e3:	74 12                	je     c00173f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173e5:	83 ec 0c             	sub    esp,0xc
c00173e8:	68 36 47 02 c0       	push   0xc0024736
c00173ed:	e8 3b cf ff ff       	call   c001432d <Krnl::panic(char const*)>
c00173f2:	83 c4 10             	add    esp,0x10
c00173f5:	eb 3d                	jmp    c0017434 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173f7:	83 ec 0c             	sub    esp,0xc
c00173fa:	55                   	push   ebp
c00173fb:	e8 98 5c ff ff       	call   c000d098 <File::close()>
c0017400:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017403:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017406:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017409:	59                   	pop    ecx
c001740a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001740e:	e8 c0 25 ff ff       	call   c00099d3 <free>
c0017413:	5b                   	pop    ebx
c0017414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017418:	e8 b6 25 ff ff       	call   c00099d3 <free>
c001741d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017420:	e8 ae 25 ff ff       	call   c00099d3 <free>
c0017425:	5e                   	pop    esi
c0017426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001742a:	e8 a4 25 ff ff       	call   c00099d3 <free>
c001742f:	83 c4 10             	add    esp,0x10
c0017432:	eb 21                	jmp    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017434:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017438:	e9 76 fd ff ff       	jmp    c00171b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001743d:	83 ec 0c             	sub    esp,0xc
c0017440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017444:	e8 8a 25 ff ff       	call   c00099d3 <free>
c0017449:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	e9 eb fc ff ff       	jmp    c0017140 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017455:	31 c0                	xor    eax,eax
c0017457:	eb 33                	jmp    c001748c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017459:	83 ec 0c             	sub    esp,0xc
c001745c:	55                   	push   ebp
c001745d:	e8 36 5c ff ff       	call   c000d098 <File::close()>
c0017462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017465:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017468:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001746b:	58                   	pop    eax
c001746c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017470:	e8 5e 25 ff ff       	call   c00099d3 <free>
c0017475:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017478:	e8 56 25 ff ff       	call   c00099d3 <free>
c001747d:	5a                   	pop    edx
c001747e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017482:	e8 4c 25 ff ff       	call   c00099d3 <free>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	b0 01                	mov    al,0x1
c001748c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017492:	5b                   	pop    ebx
c0017493:	5e                   	pop    esi
c0017494:	5f                   	pop    edi
c0017495:	5d                   	pop    ebp
c0017496:	c3                   	ret    

c0017497 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017497:	56                   	push   esi
c0017498:	31 d2                	xor    edx,edx
c001749a:	53                   	push   ebx
c001749b:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c00174a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174a5:	39 d3                	cmp    ebx,edx
c00174a7:	7e 1b                	jle    c00174c4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00174a9:	8b 04 95 20 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8ce0]
c00174b0:	39 c8                	cmp    eax,ecx
c00174b2:	77 0d                	ja     c00174c1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00174b4:	8b 34 95 20 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8ee0]
c00174bb:	01 c6                	add    esi,eax
c00174bd:	39 ce                	cmp    esi,ecx
c00174bf:	77 05                	ja     c00174c6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00174c1:	42                   	inc    edx
c00174c2:	eb e1                	jmp    c00174a5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00174c4:	31 c0                	xor    eax,eax
c00174c6:	5b                   	pop    ebx
c00174c7:	5e                   	pop    esi
c00174c8:	c3                   	ret    

c00174c9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00174c9:	53                   	push   ebx
c00174ca:	31 c0                	xor    eax,eax
c00174cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174d0:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c00174d6:	39 c3                	cmp    ebx,eax
c00174d8:	7e 22                	jle    c00174fc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00174da:	8b 14 85 20 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8ce0]
c00174e1:	39 ca                	cmp    edx,ecx
c00174e3:	77 14                	ja     c00174f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174e5:	03 14 85 20 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8ee0]
c00174ec:	39 ca                	cmp    edx,ecx
c00174ee:	76 09                	jbe    c00174f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174f0:	8b 04 85 20 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ae0]
c00174f7:	eb 05                	jmp    c00174fe <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174f9:	40                   	inc    eax
c00174fa:	eb da                	jmp    c00174d6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174fc:	31 c0                	xor    eax,eax
c00174fe:	5b                   	pop    ebx
c00174ff:	c3                   	ret    

c0017500 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017500:	53                   	push   ebx
c0017501:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017505:	53                   	push   ebx
c0017506:	e8 8c ff ff ff       	call   c0017497 <Thr::getDriverBaseFromAddress(unsigned long)>
c001750b:	5a                   	pop    edx
c001750c:	31 d2                	xor    edx,edx
c001750e:	85 c0                	test   eax,eax
c0017510:	74 04                	je     c0017516 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017512:	89 da                	mov    edx,ebx
c0017514:	29 c2                	sub    edx,eax
c0017516:	89 d0                	mov    eax,edx
c0017518:	5b                   	pop    ebx
c0017519:	c3                   	ret    

c001751a <Thr::loadDLL(char const*, bool)>:
c001751a:	55                   	push   ebp
c001751b:	57                   	push   edi
c001751c:	56                   	push   esi
c001751d:	53                   	push   ebx
c001751e:	81 ec 34 01 00 00    	sub    esp,0x134
c0017524:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001752b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017532:	56                   	push   esi
c0017533:	68 4e 47 02 c0       	push   0xc002474e
c0017538:	e8 2e 55 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001753d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017544:	e8 7a 24 ff ff       	call   c00099c3 <malloc>
c0017549:	83 c4 0c             	add    esp,0xc
c001754c:	89 c3                	mov    ebx,eax
c001754e:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0017554:	56                   	push   esi
c0017555:	50                   	push   eax
c0017556:	e8 7b 5a ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	85 db                	test   ebx,ebx
c0017560:	75 3c                	jne    c001759e <Thr::loadDLL(char const*, bool)+0x84>
c0017562:	89 f8                	mov    eax,edi
c0017564:	84 c0                	test   al,al
c0017566:	0f 84 d2 01 00 00    	je     c001773e <Thr::loadDLL(char const*, bool)+0x224>
c001756c:	55                   	push   ebp
c001756d:	55                   	push   ebp
c001756e:	68 5f 47 02 c0       	push   0xc002475f
c0017573:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017577:	55                   	push   ebp
c0017578:	e8 c3 91 fe ff       	call   c0000740 <strcpy>
c001757d:	58                   	pop    eax
c001757e:	5a                   	pop    edx
c001757f:	56                   	push   esi
c0017580:	55                   	push   ebp
c0017581:	e8 fa 92 fe ff       	call   c0000880 <strcat>
c0017586:	59                   	pop    ecx
c0017587:	58                   	pop    eax
c0017588:	68 72 47 02 c0       	push   0xc0024772
c001758d:	55                   	push   ebp
c001758e:	e8 ed 92 fe ff       	call   c0000880 <strcat>
c0017593:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017596:	e8 92 cd ff ff       	call   c001432d <Krnl::panic(char const*)>
c001759b:	83 c4 10             	add    esp,0x10
c001759e:	51                   	push   ecx
c001759f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00175a3:	50                   	push   eax
c00175a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175a8:	50                   	push   eax
c00175a9:	53                   	push   ebx
c00175aa:	e8 37 5d ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c00175af:	83 c4 10             	add    esp,0x10
c00175b2:	85 db                	test   ebx,ebx
c00175b4:	74 0c                	je     c00175c2 <Thr::loadDLL(char const*, bool)+0xa8>
c00175b6:	83 ec 0c             	sub    esp,0xc
c00175b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175bb:	53                   	push   ebx
c00175bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175bf:	83 c4 10             	add    esp,0x10
c00175c2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00175c7:	75 0a                	jne    c00175d3 <Thr::loadDLL(char const*, bool)+0xb9>
c00175c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175cd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00175d1:	75 3c                	jne    c001760f <Thr::loadDLL(char const*, bool)+0xf5>
c00175d3:	89 f8                	mov    eax,edi
c00175d5:	84 c0                	test   al,al
c00175d7:	0f 84 49 01 00 00    	je     c0017726 <Thr::loadDLL(char const*, bool)+0x20c>
c00175dd:	51                   	push   ecx
c00175de:	51                   	push   ecx
c00175df:	68 5f 47 02 c0       	push   0xc002475f
c00175e4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175e8:	53                   	push   ebx
c00175e9:	e8 52 91 fe ff       	call   c0000740 <strcpy>
c00175ee:	5d                   	pop    ebp
c00175ef:	58                   	pop    eax
c00175f0:	56                   	push   esi
c00175f1:	53                   	push   ebx
c00175f2:	e8 89 92 fe ff       	call   c0000880 <strcat>
c00175f7:	58                   	pop    eax
c00175f8:	5a                   	pop    edx
c00175f9:	68 72 47 02 c0       	push   0xc0024772
c00175fe:	53                   	push   ebx
c00175ff:	e8 7c 92 fe ff       	call   c0000880 <strcat>
c0017604:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017607:	e8 21 cd ff ff       	call   c001432d <Krnl::panic(char const*)>
c001760c:	83 c4 10             	add    esp,0x10
c001760f:	52                   	push   edx
c0017610:	6a 03                	push   0x3
c0017612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017616:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001761a:	05 ff 0f 00 00       	add    eax,0xfff
c001761f:	83 d2 00             	adc    edx,0x0
c0017622:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017626:	50                   	push   eax
c0017627:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c001762d:	e8 10 48 ff ff       	call   c000be42 <VAS::allocatePages(int, int)>
c0017632:	59                   	pop    ecx
c0017633:	89 c3                	mov    ebx,eax
c0017635:	5d                   	pop    ebp
c0017636:	50                   	push   eax
c0017637:	68 e3 28 02 c0       	push   0xc00228e3
c001763c:	e8 2a 54 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0017641:	89 34 24             	mov    DWORD PTR [esp],esi
c0017644:	e8 57 90 fe ff       	call   c00006a0 <strlen>
c0017649:	8b 2d 00 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027100
c001764f:	40                   	inc    eax
c0017650:	89 04 24             	mov    DWORD PTR [esp],eax
c0017653:	e8 6b 23 ff ff       	call   c00099c3 <malloc>
c0017658:	89 04 ad 20 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8ae0],eax
c001765f:	58                   	pop    eax
c0017660:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0017665:	5a                   	pop    edx
c0017666:	56                   	push   esi
c0017667:	ff 34 85 20 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ae0]
c001766e:	e8 cd 90 fe ff       	call   c0000740 <strcpy>
c0017673:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0017678:	8d 50 01             	lea    edx,[eax+0x1]
c001767b:	89 1c 85 20 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ce0],ebx
c0017682:	89 15 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,edx
c0017688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001768c:	83 c4 0c             	add    esp,0xc
c001768f:	89 14 85 20 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ee0],edx
c0017696:	6a 01                	push   0x1
c0017698:	53                   	push   ebx
c0017699:	56                   	push   esi
c001769a:	e8 c2 f6 ff ff       	call   c0016d61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001769f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00176ab:	0f 85 89 00 00 00    	jne    c001773a <Thr::loadDLL(char const*, bool)+0x220>
c00176b1:	89 f8                	mov    eax,edi
c00176b3:	84 c0                	test   al,al
c00176b5:	74 73                	je     c001772a <Thr::loadDLL(char const*, bool)+0x210>
c00176b7:	83 ec 0c             	sub    esp,0xc
c00176ba:	68 74 47 02 c0       	push   0xc0024774
c00176bf:	e8 69 cc ff ff       	call   c001432d <Krnl::panic(char const*)>
c00176c4:	83 c4 10             	add    esp,0x10
c00176c7:	eb 61                	jmp    c001772a <Thr::loadDLL(char const*, bool)+0x210>
c00176c9:	50                   	push   eax
c00176ca:	50                   	push   eax
c00176cb:	89 e8                	mov    eax,ebp
c00176cd:	c1 e0 0c             	shl    eax,0xc
c00176d0:	01 d8                	add    eax,ebx
c00176d2:	50                   	push   eax
c00176d3:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c00176d9:	e8 cc 42 ff ff       	call   c000b9aa <VAS::getPageTableEntry(unsigned long)>
c00176de:	83 c4 10             	add    esp,0x10
c00176e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00176e3:	a8 60                	test   al,0x60
c00176e5:	75 11                	jne    c00176f8 <Thr::loadDLL(char const*, bool)+0x1de>
c00176e7:	83 ec 0c             	sub    esp,0xc
c00176ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176ef:	50                   	push   eax
c00176f0:	e8 65 26 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c00176f5:	83 c4 10             	add    esp,0x10
c00176f8:	45                   	inc    ebp
c00176f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017701:	05 ff 0f 00 00       	add    eax,0xfff
c0017706:	bf 00 00 00 00       	mov    edi,0x0
c001770b:	83 d2 00             	adc    edx,0x0
c001770e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017712:	c1 ea 0c             	shr    edx,0xc
c0017715:	39 c5                	cmp    ebp,eax
c0017717:	89 d1                	mov    ecx,edx
c0017719:	89 f8                	mov    eax,edi
c001771b:	19 c8                	sbb    eax,ecx
c001771d:	72 aa                	jb     c00176c9 <Thr::loadDLL(char const*, bool)+0x1af>
c001771f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017724:	75 18                	jne    c001773e <Thr::loadDLL(char const*, bool)+0x224>
c0017726:	31 db                	xor    ebx,ebx
c0017728:	eb 14                	jmp    c001773e <Thr::loadDLL(char const*, bool)+0x224>
c001772a:	83 ec 0c             	sub    esp,0xc
c001772d:	68 93 47 02 c0       	push   0xc0024793
c0017732:	e8 f6 cb ff ff       	call   c001432d <Krnl::panic(char const*)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	31 ed                	xor    ebp,ebp
c001773c:	eb bb                	jmp    c00176f9 <Thr::loadDLL(char const*, bool)+0x1df>
c001773e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017744:	89 d8                	mov    eax,ebx
c0017746:	5b                   	pop    ebx
c0017747:	5e                   	pop    esi
c0017748:	5f                   	pop    edi
c0017749:	5d                   	pop    ebp
c001774a:	c3                   	ret    

c001774b <Thr::executeDLL(unsigned long, void*)>:
c001774b:	56                   	push   esi
c001774c:	53                   	push   ebx
c001774d:	52                   	push   edx
c001774e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017752:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017756:	85 db                	test   ebx,ebx
c0017758:	75 10                	jne    c001776a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	68 af 47 02 c0       	push   0xc00247af
c0017762:	e8 c6 cb ff ff       	call   c001432d <Krnl::panic(char const*)>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	50                   	push   eax
c001776b:	50                   	push   eax
c001776c:	53                   	push   ebx
c001776d:	68 d9 47 02 c0       	push   0xc00247d9
c0017772:	e8 f4 52 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0017777:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001777b:	89 d8                	mov    eax,ebx
c001777d:	83 c4 14             	add    esp,0x14
c0017780:	5b                   	pop    ebx
c0017781:	5e                   	pop    esi
c0017782:	ff e0                	jmp    eax

c0017784 <userModeEntryPoint(void*)>:
c0017784:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0017789:	48                   	dec    eax
c001778a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001778f:	75 03                	jne    c0017794 <userModeEntryPoint(void*)+0x10>
c0017791:	fb                   	sti    
c0017792:	66 90                	xchg   ax,ax
c0017794:	fb                   	sti    
c0017795:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001779a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001779d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00177a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177a7:	e9 b3 8a fe ff       	jmp    c000025f <goToUsermode>

c00177ac <changeTSS>:
c00177ac:	83 ec 14             	sub    esp,0x14
c00177af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177b4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177b7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00177bc:	c1 e2 15             	shl    edx,0x15
c00177bf:	29 d0                	sub    eax,edx
c00177c1:	50                   	push   eax
c00177c2:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00177c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177cd:	05 7c 11 00 00       	add    eax,0x117c
c00177d2:	50                   	push   eax
c00177d3:	e8 14 38 ff ff       	call   c000afec <TSS::setESP(unsigned long)>
c00177d8:	83 c4 1c             	add    esp,0x1c
c00177db:	c3                   	ret    

c00177dc <switchToThread(ThreadControlBlock*)>:
c00177dc:	57                   	push   edi
c00177dd:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00177e2:	56                   	push   esi
c00177e3:	85 c0                	test   eax,eax
c00177e5:	53                   	push   ebx
c00177e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177ea:	0f 85 90 00 00 00    	jne    c0017880 <switchToThread(ThreadControlBlock*)+0xa4>
c00177f0:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00177f3:	3c ff                	cmp    al,0xff
c00177f5:	0f 84 81 00 00 00    	je     c001787c <switchToThread(ThreadControlBlock*)+0xa0>
c00177fb:	0f b6 d0             	movzx  edx,al
c00177fe:	b8 00 04 00 00       	mov    eax,0x400
c0017803:	29 d0                	sub    eax,edx
c0017805:	d1 f8                	sar    eax,1
c0017807:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001780a:	66 90                	xchg   ax,ax
c001780c:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001780f:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0017814:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001781a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017821:	74 4d                	je     c0017870 <switchToThread(ThreadControlBlock*)+0x94>
c0017823:	0f 31                	rdtsc  
c0017825:	a3 08 79 02 c0       	mov    ds:0xc0027908,eax
c001782a:	89 c6                	mov    esi,eax
c001782c:	89 d7                	mov    edi,edx
c001782e:	2b 35 f8 78 02 c0    	sub    esi,DWORD PTR ds:0xc00278f8
c0017834:	89 15 0c 79 02 c0    	mov    DWORD PTR ds:0xc002790c,edx
c001783a:	1b 3d fc 78 02 c0    	sbb    edi,DWORD PTR ds:0xc00278fc
c0017840:	89 35 00 79 02 c0    	mov    DWORD PTR ds:0xc0027900,esi
c0017846:	a3 f8 78 02 c0       	mov    ds:0xc00278f8,eax
c001784b:	89 3d 04 79 02 c0    	mov    DWORD PTR ds:0xc0027904,edi
c0017851:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017857:	89 15 fc 78 02 c0    	mov    DWORD PTR ds:0xc00278fc,edx
c001785d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017860:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017863:	01 c6                	add    esi,eax
c0017865:	11 d7                	adc    edi,edx
c0017867:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001786a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001786d:	8d 76 00             	lea    esi,[esi+0x0]
c0017870:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017874:	5b                   	pop    ebx
c0017875:	5e                   	pop    esi
c0017876:	5f                   	pop    edi
c0017877:	e9 1b 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c001787c:	31 c0                	xor    eax,eax
c001787e:	eb 8c                	jmp    c001780c <switchToThread(ThreadControlBlock*)+0x30>
c0017880:	5b                   	pop    ebx
c0017881:	c7 05 c0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x1
c001788b:	5e                   	pop    esi
c001788c:	5f                   	pop    edi
c001788d:	c3                   	ret    
c001788e:	66 90                	xchg   ax,ax

c0017890 <Process::addArgs(char**)>:
c0017890:	57                   	push   edi
c0017891:	56                   	push   esi
c0017892:	53                   	push   ebx
c0017893:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017897:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001789b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00178a5:	85 ff                	test   edi,edi
c00178a7:	74 43                	je     c00178ec <Process::addArgs(char**)+0x5c>
c00178a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00178ab:	85 c0                	test   eax,eax
c00178ad:	74 3d                	je     c00178ec <Process::addArgs(char**)+0x5c>
c00178af:	31 db                	xor    ebx,ebx
c00178b1:	8d 76 00             	lea    esi,[esi+0x0]
c00178b4:	83 ec 0c             	sub    esp,0xc
c00178b7:	50                   	push   eax
c00178b8:	e8 e3 8d fe ff       	call   c00006a0 <strlen>
c00178bd:	40                   	inc    eax
c00178be:	89 04 24             	mov    DWORD PTR [esp],eax
c00178c1:	e8 fd 20 ff ff       	call   c00099c3 <malloc>
c00178c6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00178cd:	5a                   	pop    edx
c00178ce:	59                   	pop    ecx
c00178cf:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00178d2:	43                   	inc    ebx
c00178d3:	50                   	push   eax
c00178d4:	e8 67 8e fe ff       	call   c0000740 <strcpy>
c00178d9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178e5:	85 c0                	test   eax,eax
c00178e7:	75 cb                	jne    c00178b4 <Process::addArgs(char**)+0x24>
c00178e9:	8d 76 00             	lea    esi,[esi+0x0]
c00178ec:	5b                   	pop    ebx
c00178ed:	5e                   	pop    esi
c00178ee:	5f                   	pop    edi
c00178ef:	c3                   	ret    

c00178f0 <Process::Process(char const*, Process*, char**)>:
c00178f0:	56                   	push   esi
c00178f1:	53                   	push   ebx
c00178f2:	83 ec 14             	sub    esp,0x14
c00178f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f9:	05 0c 02 00 00       	add    eax,0x20c
c00178fe:	bb 07 00 00 00       	mov    ebx,0x7
c0017903:	89 c6                	mov    esi,eax
c0017905:	8d 76 00             	lea    esi,[esi+0x0]
c0017908:	85 db                	test   ebx,ebx
c001790a:	78 14                	js     c0017920 <Process::Process(char const*, Process*, char**)+0x30>
c001790c:	83 ec 0c             	sub    esp,0xc
c001790f:	56                   	push   esi
c0017910:	e8 2b 9f 00 00       	call   c0021840 <ThreadControlBlock::ThreadControlBlock()>
c0017915:	83 c4 10             	add    esp,0x10
c0017918:	83 c6 5f             	add    esi,0x5f
c001791b:	4b                   	dec    ebx
c001791c:	eb ea                	jmp    c0017908 <Process::Process(char const*, Process*, char**)+0x18>
c001791e:	66 90                	xchg   ax,ax
c0017920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017924:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001792b:	83 ec 0c             	sub    esp,0xc
c001792e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017932:	e8 7f c8 ff ff       	call   c00141b6 <Krnl::newProcessEnv(Process*)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	89 c2                	mov    edx,eax
c001793c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017940:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017953:	a1 f0 5d 02 c0       	mov    eax,ds:0xc0025df0
c0017958:	8d 50 01             	lea    edx,[eax+0x1]
c001795b:	89 15 f0 5d 02 c0    	mov    DWORD PTR ds:0xc0025df0,edx
c0017961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017965:	89 02                	mov    DWORD PTR [edx],eax
c0017967:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001796f:	83 ec 0c             	sub    esp,0xc
c0017972:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017976:	e8 48 20 ff ff       	call   c00099c3 <malloc>
c001797b:	83 c4 10             	add    esp,0x10
c001797e:	89 c3                	mov    ebx,eax
c0017980:	83 ec 08             	sub    esp,0x8
c0017983:	6a 00                	push   0x0
c0017985:	53                   	push   ebx
c0017986:	e8 5f 48 ff ff       	call   c000c1ea <VAS::VAS(bool)>
c001798b:	83 c4 10             	add    esp,0x10
c001798e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017992:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00179a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ae:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00179b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179be:	85 c0                	test   eax,eax
c00179c0:	74 42                	je     c0017a04 <Process::Process(char const*, Process*, char**)+0x114>
c00179c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179cc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00179d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00179dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179e6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f0:	05 0c 01 00 00       	add    eax,0x10c
c00179f5:	83 ec 08             	sub    esp,0x8
c00179f8:	52                   	push   edx
c00179f9:	50                   	push   eax
c00179fa:	e8 41 8d fe ff       	call   c0000740 <strcpy>
c00179ff:	83 c4 10             	add    esp,0x10
c0017a02:	eb 64                	jmp    c0017a68 <Process::Process(char const*, Process*, char**)+0x178>
c0017a04:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a13:	e8 ab 1f ff ff       	call   c00099c3 <malloc>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	89 c3                	mov    ebx,eax
c0017a1d:	83 ec 08             	sub    esp,0x8
c0017a20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a24:	53                   	push   ebx
c0017a25:	e8 d2 32 ff ff       	call   c000acfc <VgaText::VgaText(char const*)>
c0017a2a:	83 c4 10             	add    esp,0x10
c0017a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a31:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a41:	83 ec 0c             	sub    esp,0xc
c0017a44:	50                   	push   eax
c0017a45:	e8 71 2a ff ff       	call   c000a4bb <addToTerminalCycle(VgaText*)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a51:	05 0c 01 00 00       	add    eax,0x10c
c0017a56:	83 ec 08             	sub    esp,0x8
c0017a59:	68 f8 47 02 c0       	push   0xc00247f8
c0017a5e:	50                   	push   eax
c0017a5f:	e8 dc 8c fe ff       	call   c0000740 <strcpy>
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	90                   	nop
c0017a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6c:	83 c0 0c             	add    eax,0xc
c0017a6f:	83 ec 08             	sub    esp,0x8
c0017a72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a76:	50                   	push   eax
c0017a77:	e8 c4 8c fe ff       	call   c0000740 <strcpy>
c0017a7c:	83 c4 10             	add    esp,0x10
c0017a7f:	83 ec 08             	sub    esp,0x8
c0017a82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a8a:	e8 01 fe ff ff       	call   c0017890 <Process::addArgs(char**)>
c0017a8f:	83 c4 10             	add    esp,0x10
c0017a92:	83 ec 08             	sub    esp,0x8
c0017a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a9d:	e8 89 ed ff ff       	call   c001682b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017aa9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017aad:	83 f0 01             	xor    eax,0x1
c0017ab0:	88 c2                	mov    dl,al
c0017ab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017abc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017ac1:	83 ec 08             	sub    esp,0x8
c0017ac4:	50                   	push   eax
c0017ac5:	68 50 48 02 c0       	push   0xc0024850
c0017aca:	e8 9c 4f ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	90                   	nop
c0017ad3:	83 c4 14             	add    esp,0x14
c0017ad6:	5b                   	pop    ebx
c0017ad7:	5e                   	pop    esi
c0017ad8:	c3                   	ret    
c0017ad9:	90                   	nop
c0017ada:	66 90                	xchg   ax,ax

c0017adc <Process::Process(bool, char const*, Process*, char**)>:
c0017adc:	56                   	push   esi
c0017add:	53                   	push   ebx
c0017ade:	83 ec 24             	sub    esp,0x24
c0017ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ae9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aed:	05 0c 02 00 00       	add    eax,0x20c
c0017af2:	bb 07 00 00 00       	mov    ebx,0x7
c0017af7:	89 c6                	mov    esi,eax
c0017af9:	8d 76 00             	lea    esi,[esi+0x0]
c0017afc:	85 db                	test   ebx,ebx
c0017afe:	78 14                	js     c0017b14 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017b00:	83 ec 0c             	sub    esp,0xc
c0017b03:	56                   	push   esi
c0017b04:	e8 37 9d 00 00       	call   c0021840 <ThreadControlBlock::ThreadControlBlock()>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	83 c6 5f             	add    esi,0x5f
c0017b0f:	4b                   	dec    ebx
c0017b10:	eb ea                	jmp    c0017afc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017b12:	66 90                	xchg   ax,ax
c0017b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017b1f:	83 ec 0c             	sub    esp,0xc
c0017b22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b26:	e8 8b c6 ff ff       	call   c00141b6 <Krnl::newProcessEnv(Process*)>
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	89 c2                	mov    edx,eax
c0017b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b34:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b3e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b47:	a1 f0 5d 02 c0       	mov    eax,ds:0xc0025df0
c0017b4c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b4f:	89 15 f0 5d 02 c0    	mov    DWORD PTR ds:0xc0025df0,edx
c0017b55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b59:	89 02                	mov    DWORD PTR [edx],eax
c0017b5b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b63:	83 ec 0c             	sub    esp,0xc
c0017b66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b6a:	e8 54 1e ff ff       	call   c00099c3 <malloc>
c0017b6f:	83 c4 10             	add    esp,0x10
c0017b72:	89 c3                	mov    ebx,eax
c0017b74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b79:	83 ec 08             	sub    esp,0x8
c0017b7c:	50                   	push   eax
c0017b7d:	53                   	push   ebx
c0017b7e:	e8 67 46 ff ff       	call   c000c1ea <VAS::VAS(bool)>
c0017b83:	83 c4 10             	add    esp,0x10
c0017b86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017b90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b94:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017b9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017ba6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bb6:	85 c0                	test   eax,eax
c0017bb8:	74 42                	je     c0017bfc <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017bba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bbe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bc4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017bca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bce:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017bd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bde:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be8:	05 0c 01 00 00       	add    eax,0x10c
c0017bed:	83 ec 08             	sub    esp,0x8
c0017bf0:	52                   	push   edx
c0017bf1:	50                   	push   eax
c0017bf2:	e8 49 8b fe ff       	call   c0000740 <strcpy>
c0017bf7:	83 c4 10             	add    esp,0x10
c0017bfa:	eb 64                	jmp    c0017c60 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017bfc:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c0b:	e8 b3 1d ff ff       	call   c00099c3 <malloc>
c0017c10:	83 c4 10             	add    esp,0x10
c0017c13:	89 c3                	mov    ebx,eax
c0017c15:	83 ec 08             	sub    esp,0x8
c0017c18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c1c:	53                   	push   ebx
c0017c1d:	e8 da 30 ff ff       	call   c000acfc <VgaText::VgaText(char const*)>
c0017c22:	83 c4 10             	add    esp,0x10
c0017c25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c29:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017c2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c39:	83 ec 0c             	sub    esp,0xc
c0017c3c:	50                   	push   eax
c0017c3d:	e8 79 28 ff ff       	call   c000a4bb <addToTerminalCycle(VgaText*)>
c0017c42:	83 c4 10             	add    esp,0x10
c0017c45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c49:	05 0c 01 00 00       	add    eax,0x10c
c0017c4e:	83 ec 08             	sub    esp,0x8
c0017c51:	68 f8 47 02 c0       	push   0xc00247f8
c0017c56:	50                   	push   eax
c0017c57:	e8 e4 8a fe ff       	call   c0000740 <strcpy>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	90                   	nop
c0017c60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c64:	83 c0 0c             	add    eax,0xc
c0017c67:	83 ec 08             	sub    esp,0x8
c0017c6a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c6e:	50                   	push   eax
c0017c6f:	e8 cc 8a fe ff       	call   c0000740 <strcpy>
c0017c74:	83 c4 10             	add    esp,0x10
c0017c77:	83 ec 08             	sub    esp,0x8
c0017c7a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c82:	e8 09 fc ff ff       	call   c0017890 <Process::addArgs(char**)>
c0017c87:	83 c4 10             	add    esp,0x10
c0017c8a:	90                   	nop
c0017c8b:	83 c4 24             	add    esp,0x24
c0017c8e:	5b                   	pop    ebx
c0017c8f:	5e                   	pop    esi
c0017c90:	c3                   	ret    
c0017c91:	8d 76 00             	lea    esi,[esi+0x0]

c0017c94 <taskStartupFunction>:
c0017c94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c99:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017c9c:	c3                   	ret    
c0017c9d:	90                   	nop
c0017c9e:	66 90                	xchg   ax,ax

c0017ca0 <Semaphore::Semaphore(int)>:
c0017ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ca8:	89 10                	mov    DWORD PTR [eax],edx
c0017caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cae:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017ccb:	90                   	nop
c0017ccc:	c3                   	ret    
c0017ccd:	90                   	nop
c0017cce:	66 90                	xchg   ax,ax

c0017cd0 <Mutex::Mutex()>:
c0017cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd4:	6a 01                	push   0x1
c0017cd6:	50                   	push   eax
c0017cd7:	e8 c4 ff ff ff       	call   c0017ca0 <Semaphore::Semaphore(int)>
c0017cdc:	83 c4 08             	add    esp,0x8
c0017cdf:	90                   	nop
c0017ce0:	c3                   	ret    
c0017ce1:	90                   	nop
c0017ce2:	66 90                	xchg   ax,ax

c0017ce4 <Process::createThread(void (*)(void*), void*, int)>:
c0017ce4:	57                   	push   edi
c0017ce5:	31 c9                	xor    ecx,ecx
c0017ce7:	56                   	push   esi
c0017ce8:	53                   	push   ebx
c0017ce9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ced:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017cf4:	89 f2                	mov    edx,esi
c0017cf6:	66 90                	xchg   ax,ax
c0017cf8:	0f b7 c2             	movzx  eax,dx
c0017cfb:	83 e2 01             	and    edx,0x1
c0017cfe:	74 14                	je     c0017d14 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017d00:	d1 f8                	sar    eax,1
c0017d02:	41                   	inc    ecx
c0017d03:	89 c2                	mov    edx,eax
c0017d05:	83 f9 10             	cmp    ecx,0x10
c0017d08:	75 ee                	jne    c0017cf8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d0a:	31 db                	xor    ebx,ebx
c0017d0c:	89 d8                	mov    eax,ebx
c0017d0e:	5b                   	pop    ebx
c0017d0f:	5e                   	pop    esi
c0017d10:	5f                   	pop    edi
c0017d11:	c3                   	ret    
c0017d12:	66 90                	xchg   ax,ax
c0017d14:	b8 01 00 00 00       	mov    eax,0x1
c0017d19:	d3 e0                	shl    eax,cl
c0017d1b:	09 c6                	or     esi,eax
c0017d1d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d20:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d27:	01 c0                	add    eax,eax
c0017d29:	01 c8                	add    eax,ecx
c0017d2b:	8d 04 80             	lea    eax,[eax+eax*4]
c0017d2e:	01 d8                	add    eax,ebx
c0017d30:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d37:	75 0b                	jne    c0017d44 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d39:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d43:	90                   	nop
c0017d44:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d4a:	83 ec 08             	sub    esp,0x8
c0017d4d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017d50:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d53:	01 c0                	add    eax,eax
c0017d55:	01 c8                	add    eax,ecx
c0017d57:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017d5a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017d5d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d63:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017d69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d6d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017d73:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017d79:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017d80:	89 ca                	mov    edx,ecx
c0017d82:	f7 da                	neg    edx
c0017d84:	c1 e2 15             	shl    edx,0x15
c0017d87:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d8d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d93:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d97:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017da1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017da7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dab:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017db1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017dbb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017dc5:	53                   	push   ebx
c0017dc6:	68 e4 78 02 c0       	push   0xc00278e4
c0017dcb:	e8 10 98 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	89 d8                	mov    eax,ebx
c0017dd5:	5b                   	pop    ebx
c0017dd6:	5e                   	pop    esi
c0017dd7:	5f                   	pop    edi
c0017dd8:	c3                   	ret    
c0017dd9:	90                   	nop
c0017dda:	66 90                	xchg   ax,ax

c0017ddc <Process::createUserThread()>:
c0017ddc:	83 ec 0c             	sub    esp,0xc
c0017ddf:	68 80 00 00 00       	push   0x80
c0017de4:	6a 00                	push   0x0
c0017de6:	68 84 77 01 c0       	push   0xc0017784
c0017deb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017def:	e8 f0 fe ff ff       	call   c0017ce4 <Process::createThread(void (*)(void*), void*, int)>
c0017df4:	83 c4 1c             	add    esp,0x1c
c0017df7:	c3                   	ret    

c0017df8 <setupMultitasking(void (*)())>:
c0017df8:	56                   	push   esi
c0017df9:	53                   	push   ebx
c0017dfa:	51                   	push   ecx
c0017dfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dff:	eb 13                	jmp    c0017e14 <setupMultitasking(void (*)())+0x1c>
c0017e01:	8d 76 00             	lea    esi,[esi+0x0]
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	68 e4 78 02 c0       	push   0xc00278e4
c0017e0c:	e8 17 97 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	68 e4 78 02 c0       	push   0xc00278e4
c0017e1c:	e8 e3 96 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e21:	83 c4 10             	add    esp,0x10
c0017e24:	84 c0                	test   al,al
c0017e26:	74 dc                	je     c0017e04 <setupMultitasking(void (*)())+0xc>
c0017e28:	83 ec 0c             	sub    esp,0xc
c0017e2b:	68 1f 07 00 00       	push   0x71f
c0017e30:	e8 8e 1b ff ff       	call   c00099c3 <malloc>
c0017e35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e3c:	89 c3                	mov    ebx,eax
c0017e3e:	6a 00                	push   0x0
c0017e40:	68 fc 47 02 c0       	push   0xc00247fc
c0017e45:	6a 01                	push   0x1
c0017e47:	50                   	push   eax
c0017e48:	e8 8f fc ff ff       	call   c0017adc <Process::Process(bool, char const*, Process*, char**)>
c0017e4d:	83 c4 14             	add    esp,0x14
c0017e50:	89 1d f0 78 02 c0    	mov    DWORD PTR ds:0xc00278f0,ebx
c0017e56:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017e5c:	e8 68 29 ff ff       	call   c000a7c9 <setActiveTerminal(VgaText*)>
c0017e61:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017e69:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017e73:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017e79:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e7c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017e86:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e8c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017e92:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e9c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017ea6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017eb0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017eb6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017ec0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017ec6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ed0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ed6:	58                   	pop    eax
c0017ed7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017edd:	5a                   	pop    edx
c0017ede:	68 f8 47 02 c0       	push   0xc00247f8
c0017ee3:	50                   	push   eax
c0017ee4:	e8 57 88 fe ff       	call   c0000740 <strcpy>
c0017ee9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017ef0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ef4:	83 c4 14             	add    esp,0x14
c0017ef7:	5b                   	pop    ebx
c0017ef8:	5e                   	pop    esi
c0017ef9:	e9 8b 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017efe:	66 90                	xchg   ax,ax

c0017f00 <schedule()>:
c0017f00:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0017f05:	85 c0                	test   eax,eax
c0017f07:	74 0b                	je     c0017f14 <schedule()+0x14>
c0017f09:	c7 05 c0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x1
c0017f13:	c3                   	ret    
c0017f14:	53                   	push   ebx
c0017f15:	83 ec 14             	sub    esp,0x14
c0017f18:	68 e4 78 02 c0       	push   0xc00278e4
c0017f1d:	e8 e2 95 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f22:	83 c4 10             	add    esp,0x10
c0017f25:	84 c0                	test   al,al
c0017f27:	75 3b                	jne    c0017f64 <schedule()+0x64>
c0017f29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f2e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f31:	4a                   	dec    edx
c0017f32:	74 38                	je     c0017f6c <schedule()+0x6c>
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	68 e4 78 02 c0       	push   0xc00278e4
c0017f3c:	e8 df 95 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f41:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c0017f48:	89 c3                	mov    ebx,eax
c0017f4a:	e8 d9 95 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f4f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f59:	e8 7e f8 ff ff       	call   c00177dc <switchToThread(ThreadControlBlock*)>
c0017f5e:	83 c4 10             	add    esp,0x10
c0017f61:	8d 76 00             	lea    esi,[esi+0x0]
c0017f64:	83 c4 08             	add    esp,0x8
c0017f67:	5b                   	pop    ebx
c0017f68:	c3                   	ret    
c0017f69:	8d 76 00             	lea    esi,[esi+0x0]
c0017f6c:	83 ec 08             	sub    esp,0x8
c0017f6f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f76:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f7c:	68 e4 78 02 c0       	push   0xc00278e4
c0017f81:	e8 5a 96 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f86:	83 c4 10             	add    esp,0x10
c0017f89:	eb a9                	jmp    c0017f34 <schedule()+0x34>
c0017f8b:	90                   	nop

c0017f8c <Semaphore::tryAcquire()>:
c0017f8c:	53                   	push   ebx
c0017f8d:	83 ec 08             	sub    esp,0x8
c0017f90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f94:	fa                   	cli    
c0017f95:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0017f9a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f9d:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c0017fa3:	8b 15 c4 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278c4
c0017fa9:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017fac:	89 1d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ebx
c0017fb2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017fb5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017fb7:	7c 33                	jl     c0017fec <Semaphore::tryAcquire()+0x60>
c0017fb9:	89 15 c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,edx
c0017fbf:	85 d2                	test   edx,edx
c0017fc1:	75 0d                	jne    c0017fd0 <Semaphore::tryAcquire()+0x44>
c0017fc3:	8b 15 c0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278c0
c0017fc9:	85 d2                	test   edx,edx
c0017fcb:	75 6b                	jne    c0018038 <Semaphore::tryAcquire()+0xac>
c0017fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd0:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0017fd5:	85 c0                	test   eax,eax
c0017fd7:	74 0b                	je     c0017fe4 <Semaphore::tryAcquire()+0x58>
c0017fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fdc:	31 c0                	xor    eax,eax
c0017fde:	83 c4 08             	add    esp,0x8
c0017fe1:	5b                   	pop    ebx
c0017fe2:	c3                   	ret    
c0017fe3:	90                   	nop
c0017fe4:	fb                   	sti    
c0017fe5:	83 c4 08             	add    esp,0x8
c0017fe8:	5b                   	pop    ebx
c0017fe9:	c3                   	ret    
c0017fea:	66 90                	xchg   ax,ax
c0017fec:	43                   	inc    ebx
c0017fed:	89 15 c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,edx
c0017ff3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017ff6:	85 d2                	test   edx,edx
c0017ff8:	75 22                	jne    c001801c <Semaphore::tryAcquire()+0x90>
c0017ffa:	8b 0d c0 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278c0
c0018000:	85 c9                	test   ecx,ecx
c0018002:	74 18                	je     c001801c <Semaphore::tryAcquire()+0x90>
c0018004:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c001800e:	e8 ed fe ff ff       	call   c0017f00 <schedule()>
c0018013:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018018:	48                   	dec    eax
c0018019:	8d 76 00             	lea    esi,[esi+0x0]
c001801c:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018021:	85 c0                	test   eax,eax
c0018023:	75 0b                	jne    c0018030 <Semaphore::tryAcquire()+0xa4>
c0018025:	fb                   	sti    
c0018026:	b0 01                	mov    al,0x1
c0018028:	83 c4 08             	add    esp,0x8
c001802b:	5b                   	pop    ebx
c001802c:	c3                   	ret    
c001802d:	8d 76 00             	lea    esi,[esi+0x0]
c0018030:	b0 01                	mov    al,0x1
c0018032:	83 c4 08             	add    esp,0x8
c0018035:	5b                   	pop    ebx
c0018036:	c3                   	ret    
c0018037:	90                   	nop
c0018038:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c0018042:	e8 b9 fe ff ff       	call   c0017f00 <schedule()>
c0018047:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001804c:	48                   	dec    eax
c001804d:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018052:	85 c0                	test   eax,eax
c0018054:	75 86                	jne    c0017fdc <Semaphore::tryAcquire()+0x50>
c0018056:	eb 8c                	jmp    c0017fe4 <Semaphore::tryAcquire()+0x58>

c0018058 <Semaphore::assertLocked(char const*)>:
c0018058:	83 ec 0c             	sub    esp,0xc
c001805b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001805f:	fa                   	cli    
c0018060:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018066:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c001806b:	8d 48 01             	lea    ecx,[eax+0x1]
c001806e:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c0018074:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018076:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018079:	7c 29                	jl     c00180a4 <Semaphore::assertLocked(char const*)+0x4c>
c001807b:	90                   	nop
c001807c:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018081:	85 c0                	test   eax,eax
c0018083:	75 0b                	jne    c0018090 <Semaphore::assertLocked(char const*)+0x38>
c0018085:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c001808a:	85 c0                	test   eax,eax
c001808c:	75 2e                	jne    c00180bc <Semaphore::assertLocked(char const*)+0x64>
c001808e:	66 90                	xchg   ax,ax
c0018090:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018095:	48                   	dec    eax
c0018096:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001809b:	75 03                	jne    c00180a0 <Semaphore::assertLocked(char const*)+0x48>
c001809d:	fb                   	sti    
c001809e:	66 90                	xchg   ax,ax
c00180a0:	83 c4 0c             	add    esp,0xc
c00180a3:	c3                   	ret    
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180ab:	e8 7d c2 ff ff       	call   c001432d <Krnl::panic(char const*)>
c00180b0:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00180b5:	83 c4 10             	add    esp,0x10
c00180b8:	48                   	dec    eax
c00180b9:	eb c1                	jmp    c001807c <Semaphore::assertLocked(char const*)+0x24>
c00180bb:	90                   	nop
c00180bc:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00180c6:	e8 35 fe ff ff       	call   c0017f00 <schedule()>
c00180cb:	eb c3                	jmp    c0018090 <Semaphore::assertLocked(char const*)+0x38>
c00180cd:	8d 76 00             	lea    esi,[esi+0x0]

c00180d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00180d0:	83 ec 0c             	sub    esp,0xc
c00180d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180df:	e8 1c fe ff ff       	call   c0017f00 <schedule()>
c00180e4:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00180e9:	48                   	dec    eax
c00180ea:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00180ef:	75 03                	jne    c00180f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180f1:	fb                   	sti    
c00180f2:	66 90                	xchg   ax,ax
c00180f4:	83 c4 0c             	add    esp,0xc
c00180f7:	c3                   	ret    

c00180f8 <blockTask(TaskState)>:
c00180f8:	83 ec 0c             	sub    esp,0xc
c00180fb:	fa                   	cli    
c00180fc:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018102:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018106:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001810b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001810e:	e8 ed fd ff ff       	call   c0017f00 <schedule()>
c0018113:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018118:	48                   	dec    eax
c0018119:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001811e:	75 04                	jne    c0018124 <blockTask(TaskState)+0x2c>
c0018120:	fb                   	sti    
c0018121:	8d 76 00             	lea    esi,[esi+0x0]
c0018124:	83 c4 0c             	add    esp,0xc
c0018127:	c3                   	ret    

c0018128 <waitTask(int, int*, int)>:
c0018128:	83 ec 18             	sub    esp,0x18
c001812b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018130:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018134:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018137:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001813b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018140:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018143:	6a 07                	push   0x7
c0018145:	e8 ae ff ff ff       	call   c00180f8 <blockTask(TaskState)>
c001814a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001814f:	83 c4 10             	add    esp,0x10
c0018152:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018155:	85 d2                	test   edx,edx
c0018157:	74 0b                	je     c0018164 <waitTask(int, int*, int)+0x3c>
c0018159:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001815c:	89 02                	mov    DWORD PTR [edx],eax
c001815e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018163:	90                   	nop
c0018164:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018167:	83 c4 0c             	add    esp,0xc
c001816a:	c3                   	ret    
c001816b:	90                   	nop

c001816c <milliTenthSleepUntil(unsigned int)>:
c001816c:	83 ec 0c             	sub    esp,0xc
c001816f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018173:	39 05 2c 6a 02 c0    	cmp    DWORD PTR ds:0xc0026a2c,eax
c0018179:	76 05                	jbe    c0018180 <milliTenthSleepUntil(unsigned int)+0x14>
c001817b:	90                   	nop
c001817c:	83 c4 0c             	add    esp,0xc
c001817f:	c3                   	ret    
c0018180:	fa                   	cli    
c0018181:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018187:	83 ec 08             	sub    esp,0x8
c001818a:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018190:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018196:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018199:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001819f:	68 d8 78 02 c0       	push   0xc00278d8
c00181a4:	e8 37 94 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00181a9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00181b0:	e8 43 ff ff ff       	call   c00180f8 <blockTask(TaskState)>
c00181b5:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00181ba:	83 c4 10             	add    esp,0x10
c00181bd:	48                   	dec    eax
c00181be:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00181c3:	85 c0                	test   eax,eax
c00181c5:	75 09                	jne    c00181d0 <milliTenthSleepUntil(unsigned int)+0x64>
c00181c7:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c00181cc:	85 c0                	test   eax,eax
c00181ce:	75 14                	jne    c00181e4 <milliTenthSleepUntil(unsigned int)+0x78>
c00181d0:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00181d5:	48                   	dec    eax
c00181d6:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00181db:	75 9f                	jne    c001817c <milliTenthSleepUntil(unsigned int)+0x10>
c00181dd:	fb                   	sti    
c00181de:	83 c4 0c             	add    esp,0xc
c00181e1:	c3                   	ret    
c00181e2:	66 90                	xchg   ax,ax
c00181e4:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00181ee:	e8 0d fd ff ff       	call   c0017f00 <schedule()>
c00181f3:	eb db                	jmp    c00181d0 <milliTenthSleepUntil(unsigned int)+0x64>
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]

c00181f8 <milliTenthSleep(unsigned int)>:
c00181f8:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c00181fd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018201:	e9 66 ff ff ff       	jmp    c001816c <milliTenthSleepUntil(unsigned int)>
c0018206:	66 90                	xchg   ax,ax

c0018208 <sleep(unsigned int)>:
c0018208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001820c:	8d 04 80             	lea    eax,[eax+eax*4]
c001820f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018212:	8d 04 80             	lea    eax,[eax+eax*4]
c0018215:	8d 04 80             	lea    eax,[eax+eax*4]
c0018218:	c1 e0 04             	shl    eax,0x4
c001821b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001821f:	eb d7                	jmp    c00181f8 <milliTenthSleep(unsigned int)>
c0018221:	90                   	nop
c0018222:	66 90                	xchg   ax,ax

c0018224 <Semaphore::acquire()>:
c0018224:	83 ec 0c             	sub    esp,0xc
c0018227:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001822b:	fa                   	cli    
c001822c:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018231:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018237:	8d 48 01             	lea    ecx,[eax+0x1]
c001823a:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c0018240:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018243:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018245:	7d 2d                	jge    c0018274 <Semaphore::acquire()+0x50>
c0018247:	41                   	inc    ecx
c0018248:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001824b:	90                   	nop
c001824c:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018251:	85 c0                	test   eax,eax
c0018253:	75 0b                	jne    c0018260 <Semaphore::acquire()+0x3c>
c0018255:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c001825a:	85 c0                	test   eax,eax
c001825c:	75 62                	jne    c00182c0 <Semaphore::acquire()+0x9c>
c001825e:	66 90                	xchg   ax,ax
c0018260:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018265:	48                   	dec    eax
c0018266:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001826b:	75 03                	jne    c0018270 <Semaphore::acquire()+0x4c>
c001826d:	fb                   	sti    
c001826e:	66 90                	xchg   ax,ax
c0018270:	83 c4 0c             	add    esp,0xc
c0018273:	c3                   	ret    
c0018274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018279:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018280:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018283:	85 c9                	test   ecx,ecx
c0018285:	74 4d                	je     c00182d4 <Semaphore::acquire()+0xb0>
c0018287:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001828a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018290:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018293:	90                   	nop
c0018294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018299:	83 ec 0c             	sub    esp,0xc
c001829c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001829f:	68 78 48 02 c0       	push   0xc0024878
c00182a4:	e8 c2 47 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00182a9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00182b0:	e8 43 fe ff ff       	call   c00180f8 <blockTask(TaskState)>
c00182b5:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00182ba:	83 c4 10             	add    esp,0x10
c00182bd:	48                   	dec    eax
c00182be:	eb 8c                	jmp    c001824c <Semaphore::acquire()+0x28>
c00182c0:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00182ca:	e8 31 fc ff ff       	call   c0017f00 <schedule()>
c00182cf:	eb 8f                	jmp    c0018260 <Semaphore::acquire()+0x3c>
c00182d1:	8d 76 00             	lea    esi,[esi+0x0]
c00182d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00182dc:	eb b6                	jmp    c0018294 <Semaphore::acquire()+0x70>
c00182de:	66 90                	xchg   ax,ax

c00182e0 <taskReturned>:
c00182e0:	83 ec 18             	sub    esp,0x18
c00182e3:	68 98 48 02 c0       	push   0xc0024898
c00182e8:	e8 40 c0 ff ff       	call   c001432d <Krnl::panic(char const*)>
c00182ed:	83 c4 10             	add    esp,0x10
c00182f0:	83 ec 0c             	sub    esp,0xc
c00182f3:	6a 02                	push   0x2
c00182f5:	e8 fe fd ff ff       	call   c00180f8 <blockTask(TaskState)>
c00182fa:	fa                   	cli    
c00182fb:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018301:	e8 fa fb ff ff       	call   c0017f00 <schedule()>
c0018306:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	48                   	dec    eax
c001830f:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018314:	85 c0                	test   eax,eax
c0018316:	75 d8                	jne    c00182f0 <taskReturned+0x10>
c0018318:	fb                   	sti    
c0018319:	eb d5                	jmp    c00182f0 <taskReturned+0x10>
c001831b:	90                   	nop

c001831c <Thr::processFromPID(int)>:
c001831c:	57                   	push   edi
c001831d:	56                   	push   esi
c001831e:	53                   	push   ebx
c001831f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018323:	fa                   	cli    
c0018324:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001832a:	83 ec 0c             	sub    esp,0xc
c001832d:	68 e4 78 02 c0       	push   0xc00278e4
c0018332:	e8 e9 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	89 c7                	mov    edi,eax
c001833c:	eb 16                	jmp    c0018354 <Thr::processFromPID(int)+0x38>
c001833e:	66 90                	xchg   ax,ax
c0018340:	83 ec 0c             	sub    esp,0xc
c0018343:	68 e4 78 02 c0       	push   0xc00278e4
c0018348:	e8 d3 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001834d:	83 c4 10             	add    esp,0x10
c0018350:	39 f8                	cmp    eax,edi
c0018352:	74 4c                	je     c00183a0 <Thr::processFromPID(int)+0x84>
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	68 e4 78 02 c0       	push   0xc00278e4
c001835c:	e8 bf 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018361:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c0018368:	89 c3                	mov    ebx,eax
c001836a:	e8 b9 91 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001836f:	58                   	pop    eax
c0018370:	5a                   	pop    edx
c0018371:	53                   	push   ebx
c0018372:	68 e4 78 02 c0       	push   0xc00278e4
c0018377:	e8 64 92 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001837c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	39 30                	cmp    DWORD PTR [eax],esi
c0018384:	75 ba                	jne    c0018340 <Thr::processFromPID(int)+0x24>
c0018386:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001838b:	48                   	dec    eax
c001838c:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018391:	74 09                	je     c001839c <Thr::processFromPID(int)+0x80>
c0018393:	90                   	nop
c0018394:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018397:	5b                   	pop    ebx
c0018398:	5e                   	pop    esi
c0018399:	5f                   	pop    edi
c001839a:	c3                   	ret    
c001839b:	90                   	nop
c001839c:	fb                   	sti    
c001839d:	eb f5                	jmp    c0018394 <Thr::processFromPID(int)+0x78>
c001839f:	90                   	nop
c00183a0:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00183a5:	48                   	dec    eax
c00183a6:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00183ab:	75 07                	jne    c00183b4 <Thr::processFromPID(int)+0x98>
c00183ad:	fb                   	sti    
c00183ae:	5b                   	pop    ebx
c00183af:	5e                   	pop    esi
c00183b0:	5f                   	pop    edi
c00183b1:	c3                   	ret    
c00183b2:	66 90                	xchg   ax,ax
c00183b4:	5b                   	pop    ebx
c00183b5:	31 c0                	xor    eax,eax
c00183b7:	5e                   	pop    esi
c00183b8:	5f                   	pop    edi
c00183b9:	c3                   	ret    
c00183ba:	66 90                	xchg   ax,ax

c00183bc <unblockTask(ThreadControlBlock*)>:
c00183bc:	53                   	push   ebx
c00183bd:	83 ec 08             	sub    esp,0x8
c00183c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183c4:	fa                   	cli    
c00183c5:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00183cb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183ce:	85 c0                	test   eax,eax
c00183d0:	74 66                	je     c0018438 <unblockTask(ThreadControlBlock*)+0x7c>
c00183d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183d5:	48                   	dec    eax
c00183d6:	74 38                	je     c0018410 <unblockTask(ThreadControlBlock*)+0x54>
c00183d8:	83 ec 0c             	sub    esp,0xc
c00183db:	68 e4 78 02 c0       	push   0xc00278e4
c00183e0:	e8 3b 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	85 c0                	test   eax,eax
c00183ea:	75 1c                	jne    c0018408 <unblockTask(ThreadControlBlock*)+0x4c>
c00183ec:	eb 5e                	jmp    c001844c <unblockTask(ThreadControlBlock*)+0x90>
c00183ee:	66 90                	xchg   ax,ax
c00183f0:	83 ec 08             	sub    esp,0x8
c00183f3:	50                   	push   eax
c00183f4:	68 e4 78 02 c0       	push   0xc00278e4
c00183f9:	e8 d2 94 00 00       	call   c00218d0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	85 c0                	test   eax,eax
c0018403:	74 47                	je     c001844c <unblockTask(ThreadControlBlock*)+0x90>
c0018405:	8d 76 00             	lea    esi,[esi+0x0]
c0018408:	39 c3                	cmp    ebx,eax
c001840a:	75 e4                	jne    c00183f0 <unblockTask(ThreadControlBlock*)+0x34>
c001840c:	eb 12                	jmp    c0018420 <unblockTask(ThreadControlBlock*)+0x64>
c001840e:	66 90                	xchg   ax,ax
c0018410:	83 ec 0c             	sub    esp,0xc
c0018413:	68 1a 48 02 c0       	push   0xc002481a
c0018418:	e8 4e 46 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001841d:	83 c4 10             	add    esp,0x10
c0018420:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018425:	48                   	dec    eax
c0018426:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001842b:	75 03                	jne    c0018430 <unblockTask(ThreadControlBlock*)+0x74>
c001842d:	fb                   	sti    
c001842e:	66 90                	xchg   ax,ax
c0018430:	83 c4 08             	add    esp,0x8
c0018433:	5b                   	pop    ebx
c0018434:	c3                   	ret    
c0018435:	8d 76 00             	lea    esi,[esi+0x0]
c0018438:	83 ec 0c             	sub    esp,0xc
c001843b:	68 03 48 02 c0       	push   0xc0024803
c0018440:	e8 26 46 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	eb d6                	jmp    c0018420 <unblockTask(ThreadControlBlock*)+0x64>
c001844a:	66 90                	xchg   ax,ax
c001844c:	83 ec 08             	sub    esp,0x8
c001844f:	53                   	push   ebx
c0018450:	68 e4 78 02 c0       	push   0xc00278e4
c0018455:	e8 86 91 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001845a:	83 c4 10             	add    esp,0x10
c001845d:	eb c1                	jmp    c0018420 <unblockTask(ThreadControlBlock*)+0x64>
c001845f:	90                   	nop

c0018460 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018460:	55                   	push   ebp
c0018461:	57                   	push   edi
c0018462:	56                   	push   esi
c0018463:	53                   	push   ebx
c0018464:	83 ec 1c             	sub    esp,0x1c
c0018467:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001846b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001846e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018474:	85 ff                	test   edi,edi
c0018476:	7e 24                	jle    c001849c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018478:	31 f6                	xor    esi,esi
c001847a:	66 90                	xchg   ax,ax
c001847c:	83 ec 0c             	sub    esp,0xc
c001847f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018486:	46                   	inc    esi
c0018487:	e8 47 15 ff ff       	call   c00099d3 <free>
c001848c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018498:	7f e2                	jg     c001847c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001849a:	66 90                	xchg   ax,ax
c001849c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00184a6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184ab:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00184ae:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00184b1:	d3 c0                	rol    eax,cl
c00184b3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00184ba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184bd:	89 f7                	mov    edi,esi
c00184bf:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00184c7:	0f 85 73 01 00 00    	jne    c0018640 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00184cd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00184d3:	85 ed                	test   ebp,ebp
c00184d5:	74 1d                	je     c00184f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00184d7:	83 ec 0c             	sub    esp,0xc
c00184da:	55                   	push   ebp
c00184db:	e8 f2 bb ff ff       	call   c00140d2 <EnvVarContainer::~EnvVarContainer()>
c00184e0:	59                   	pop    ecx
c00184e1:	5e                   	pop    esi
c00184e2:	6a 0c                	push   0xc
c00184e4:	55                   	push   ebp
c00184e5:	e8 a0 44 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00184ea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184ed:	83 c4 10             	add    esp,0x10
c00184f0:	89 f7                	mov    edi,esi
c00184f2:	66 90                	xchg   ax,ax
c00184f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184fa:	85 c0                	test   eax,eax
c00184fc:	0f 84 b2 00 00 00    	je     c00185b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018502:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018505:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018509:	31 c9                	xor    ecx,ecx
c001850b:	eb 17                	jmp    c0018524 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001850d:	8d 76 00             	lea    esi,[esi+0x0]
c0018510:	41                   	inc    ecx
c0018511:	83 f9 10             	cmp    ecx,0x10
c0018514:	0f 84 9a 00 00 00    	je     c00185b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001851a:	66 90                	xchg   ax,ax
c001851c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018522:	66 90                	xchg   ax,ax
c0018524:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001852b:	d3 fa                	sar    edx,cl
c001852d:	83 e2 01             	and    edx,0x1
c0018530:	74 de                	je     c0018510 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018532:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018535:	01 d2                	add    edx,edx
c0018537:	01 ca                	add    edx,ecx
c0018539:	8d 14 92             	lea    edx,[edx+edx*4]
c001853c:	01 d0                	add    eax,edx
c001853e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018544:	83 fd 07             	cmp    ebp,0x7
c0018547:	75 c7                	jne    c0018510 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018549:	05 40 02 00 00       	add    eax,0x240
c001854e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018551:	83 fd ff             	cmp    ebp,0xffffffff
c0018554:	0f 8c ee 00 00 00    	jl     c0018648 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001855a:	0f 84 ac 01 00 00    	je     c001870c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018560:	85 ed                	test   ebp,ebp
c0018562:	0f 84 90 01 00 00    	je     c00186f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018568:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001856a:	75 a4                	jne    c0018510 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001856c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018572:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018576:	01 d0                	add    eax,edx
c0018578:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001857c:	83 ec 0c             	sub    esp,0xc
c001857f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018585:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018588:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001858e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018595:	50                   	push   eax
c0018596:	e8 21 fe ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00185a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185a5:	89 f7                	mov    edi,esi
c00185a7:	41                   	inc    ecx
c00185a8:	83 f9 10             	cmp    ecx,0x10
c00185ab:	0f 85 6b ff ff ff    	jne    c001851c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00185b1:	8d 76 00             	lea    esi,[esi+0x0]
c00185b4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00185ba:	85 c0                	test   eax,eax
c00185bc:	74 62                	je     c0018620 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185be:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00185c4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00185ca:	74 54                	je     c0018620 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185cc:	83 ec 0c             	sub    esp,0xc
c00185cf:	68 e4 78 02 c0       	push   0xc00278e4
c00185d4:	e8 47 8f 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185d9:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00185e0:	89 c7                	mov    edi,eax
c00185e2:	e8 1d 8f 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185e7:	83 c4 10             	add    esp,0x10
c00185ea:	84 c0                	test   al,al
c00185ec:	0f 84 ce 00 00 00    	je     c00186c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00185f2:	66 90                	xchg   ax,ax
c00185f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185f7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00185fd:	85 d2                	test   edx,edx
c00185ff:	74 0f                	je     c0018610 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018601:	83 ec 0c             	sub    esp,0xc
c0018604:	8b 02                	mov    eax,DWORD PTR [edx]
c0018606:	52                   	push   edx
c0018607:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001860a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001861a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001861d:	8d 76 00             	lea    esi,[esi+0x0]
c0018620:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018626:	85 db                	test   ebx,ebx
c0018628:	74 16                	je     c0018640 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001862a:	83 ec 0c             	sub    esp,0xc
c001862d:	53                   	push   ebx
c001862e:	e8 91 35 ff ff       	call   c000bbc4 <VAS::~VAS()>
c0018633:	58                   	pop    eax
c0018634:	5a                   	pop    edx
c0018635:	6a 14                	push   0x14
c0018637:	53                   	push   ebx
c0018638:	e8 4d 43 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001863d:	83 c4 10             	add    esp,0x10
c0018640:	83 c4 1c             	add    esp,0x1c
c0018643:	5b                   	pop    ebx
c0018644:	5e                   	pop    esi
c0018645:	5f                   	pop    edi
c0018646:	5d                   	pop    ebp
c0018647:	c3                   	ret    
c0018648:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001864c:	83 ec 0c             	sub    esp,0xc
c001864f:	68 cc 48 02 c0       	push   0xc00248cc
c0018654:	e8 d4 bc ff ff       	call   c001432d <Krnl::panic(char const*)>
c0018659:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001865c:	83 c4 10             	add    esp,0x10
c001865f:	89 f7                	mov    edi,esi
c0018661:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018665:	e9 a6 fe ff ff       	jmp    c0018510 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001866a:	66 90                	xchg   ax,ax
c001866c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018672:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018678:	75 1e                	jne    c0018698 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001867a:	83 ec 0c             	sub    esp,0xc
c001867d:	68 34 49 02 c0       	push   0xc0024934
c0018682:	e8 e4 43 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0018687:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001868e:	e8 65 fa ff ff       	call   c00180f8 <blockTask(TaskState)>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	66 90                	xchg   ax,ax
c0018698:	83 ec 08             	sub    esp,0x8
c001869b:	56                   	push   esi
c001869c:	68 e4 78 02 c0       	push   0xc00278e4
c00186a1:	e8 3a 8f 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186a6:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00186ad:	e8 6e 8e 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186b2:	83 c4 10             	add    esp,0x10
c00186b5:	39 f8                	cmp    eax,edi
c00186b7:	0f 84 37 ff ff ff    	je     c00185f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	83 ec 0c             	sub    esp,0xc
c00186c3:	68 e4 78 02 c0       	push   0xc00278e4
c00186c8:	e8 53 8e 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186cd:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00186d4:	89 c6                	mov    esi,eax
c00186d6:	e8 4d 8e 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	39 f3                	cmp    ebx,esi
c00186e0:	74 b6                	je     c0018698 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186e2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00186e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186e8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00186ee:	75 a8                	jne    c0018698 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186f0:	e9 77 ff ff ff       	jmp    c001866c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00186f5:	8d 76 00             	lea    esi,[esi+0x0]
c00186f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186fc:	83 ec 0c             	sub    esp,0xc
c00186ff:	68 00 49 02 c0       	push   0xc0024900
c0018704:	e9 4b ff ff ff       	jmp    c0018654 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018709:	8d 76 00             	lea    esi,[esi+0x0]
c001870c:	8b 36                	mov    esi,DWORD PTR [esi]
c001870e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018712:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018715:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018718:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001871e:	01 d7                	add    edi,edx
c0018720:	89 f8                	mov    eax,edi
c0018722:	e9 51 fe ff ff       	jmp    c0018578 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018727:	90                   	nop

c0018728 <cleanerTaskFunction(void*)>:
c0018728:	53                   	push   ebx
c0018729:	83 ec 08             	sub    esp,0x8
c001872c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018731:	48                   	dec    eax
c0018732:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018737:	75 03                	jne    c001873c <cleanerTaskFunction(void*)+0x14>
c0018739:	fb                   	sti    
c001873a:	66 90                	xchg   ax,ax
c001873c:	fa                   	cli    
c001873d:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018742:	80 3d ac 78 02 c0 00 	cmp    BYTE PTR ds:0xc00278ac,0x0
c0018749:	8d 50 01             	lea    edx,[eax+0x1]
c001874c:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c0018752:	0f 84 ac 00 00 00    	je     c0018804 <cleanerTaskFunction(void*)+0xdc>
c0018758:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001875d:	85 c0                	test   eax,eax
c001875f:	75 03                	jne    c0018764 <cleanerTaskFunction(void*)+0x3c>
c0018761:	fb                   	sti    
c0018762:	66 90                	xchg   ax,ax
c0018764:	c6 05 ac 78 02 c0 00 	mov    BYTE PTR ds:0xc00278ac,0x0
c001876b:	fa                   	cli    
c001876c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018772:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018778:	fa                   	cli    
c0018779:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001877f:	eb 2b                	jmp    c00187ac <cleanerTaskFunction(void*)+0x84>
c0018781:	8d 76 00             	lea    esi,[esi+0x0]
c0018784:	83 ec 0c             	sub    esp,0xc
c0018787:	68 cc 78 02 c0       	push   0xc00278cc
c001878c:	e8 8f 8d 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018791:	c7 04 24 cc 78 02 c0 	mov    DWORD PTR [esp],0xc00278cc
c0018798:	89 c3                	mov    ebx,eax
c001879a:	e8 89 8d 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001879f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187a2:	e8 b9 fc ff ff       	call   c0018460 <cleanupTerminatedTask(ThreadControlBlock*)>
c00187a7:	83 c4 10             	add    esp,0x10
c00187aa:	66 90                	xchg   ax,ax
c00187ac:	83 ec 0c             	sub    esp,0xc
c00187af:	68 cc 78 02 c0       	push   0xc00278cc
c00187b4:	e8 4b 8d 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187b9:	83 c4 10             	add    esp,0x10
c00187bc:	84 c0                	test   al,al
c00187be:	74 c4                	je     c0018784 <cleanerTaskFunction(void*)+0x5c>
c00187c0:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00187c5:	48                   	dec    eax
c00187c6:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00187cb:	75 03                	jne    c00187d0 <cleanerTaskFunction(void*)+0xa8>
c00187cd:	fb                   	sti    
c00187ce:	66 90                	xchg   ax,ax
c00187d0:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00187d5:	48                   	dec    eax
c00187d6:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00187db:	0f 85 4b ff ff ff    	jne    c001872c <cleanerTaskFunction(void*)+0x4>
c00187e1:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c00187e6:	85 c0                	test   eax,eax
c00187e8:	0f 84 3e ff ff ff    	je     c001872c <cleanerTaskFunction(void*)+0x4>
c00187ee:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00187f8:	e8 03 f7 ff ff       	call   c0017f00 <schedule()>
c00187fd:	e9 2a ff ff ff       	jmp    c001872c <cleanerTaskFunction(void*)+0x4>
c0018802:	66 90                	xchg   ax,ax
c0018804:	83 ec 0c             	sub    esp,0xc
c0018807:	6a 02                	push   0x2
c0018809:	e8 c2 f8 ff ff       	call   c00180d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001880e:	83 c4 10             	add    esp,0x10
c0018811:	e9 4e ff ff ff       	jmp    c0018764 <cleanerTaskFunction(void*)+0x3c>
c0018816:	66 90                	xchg   ax,ax

c0018818 <terminateTask(int)>:
c0018818:	83 ec 14             	sub    esp,0x14
c001881b:	fa                   	cli    
c001881c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018822:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018828:	fa                   	cli    
c0018829:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001882f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018838:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001883b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018840:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018843:	50                   	push   eax
c0018844:	68 cc 78 02 c0       	push   0xc00278cc
c0018849:	e8 92 8d 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001884e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018853:	83 c4 10             	add    esp,0x10
c0018856:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001885d:	a1 a8 78 02 c0       	mov    eax,ds:0xc00278a8
c0018862:	85 c0                	test   eax,eax
c0018864:	74 5e                	je     c00188c4 <terminateTask(int)+0xac>
c0018866:	83 ec 0c             	sub    esp,0xc
c0018869:	c6 05 ac 78 02 c0 01 	mov    BYTE PTR ds:0xc00278ac,0x1
c0018870:	50                   	push   eax
c0018871:	e8 46 fb ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c0018876:	83 c4 10             	add    esp,0x10
c0018879:	8d 76 00             	lea    esi,[esi+0x0]
c001887c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018881:	48                   	dec    eax
c0018882:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018887:	75 03                	jne    c001888c <terminateTask(int)+0x74>
c0018889:	fb                   	sti    
c001888a:	66 90                	xchg   ax,ax
c001888c:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018891:	48                   	dec    eax
c0018892:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018897:	75 0b                	jne    c00188a4 <terminateTask(int)+0x8c>
c0018899:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c00188a0:	75 36                	jne    c00188d8 <terminateTask(int)+0xc0>
c00188a2:	66 90                	xchg   ax,ax
c00188a4:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00188a9:	48                   	dec    eax
c00188aa:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00188af:	75 03                	jne    c00188b4 <terminateTask(int)+0x9c>
c00188b1:	fb                   	sti    
c00188b2:	66 90                	xchg   ax,ax
c00188b4:	fa                   	cli    
c00188b5:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00188bb:	90                   	nop
c00188bc:	e8 3f f6 ff ff       	call   c0017f00 <schedule()>
c00188c1:	eb e1                	jmp    c00188a4 <terminateTask(int)+0x8c>
c00188c3:	90                   	nop
c00188c4:	83 ec 0c             	sub    esp,0xc
c00188c7:	68 31 48 02 c0       	push   0xc0024831
c00188cc:	e8 9a 41 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00188d1:	83 c4 10             	add    esp,0x10
c00188d4:	eb a6                	jmp    c001887c <terminateTask(int)+0x64>
c00188d6:	66 90                	xchg   ax,ax
c00188d8:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00188e2:	eb d8                	jmp    c00188bc <terminateTask(int)+0xa4>

c00188e4 <Thr::terminateFromIRQ(int)>:
c00188e4:	83 ec 18             	sub    esp,0x18
c00188e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188eb:	e8 28 ff ff ff       	call   c0018818 <terminateTask(int)>

c00188f0 <Semaphore::release()>:
c00188f0:	83 ec 0c             	sub    esp,0xc
c00188f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188f7:	fa                   	cli    
c00188f8:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00188fd:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018903:	8d 48 01             	lea    ecx,[eax+0x1]
c0018906:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c001890c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001890f:	85 c9                	test   ecx,ecx
c0018911:	74 41                	je     c0018954 <Semaphore::release()+0x64>
c0018913:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018916:	83 ec 0c             	sub    esp,0xc
c0018919:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001891c:	51                   	push   ecx
c001891d:	e8 9a fa ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c0018922:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018927:	83 c4 10             	add    esp,0x10
c001892a:	48                   	dec    eax
c001892b:	90                   	nop
c001892c:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018931:	85 c0                	test   eax,eax
c0018933:	75 0b                	jne    c0018940 <Semaphore::release()+0x50>
c0018935:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c001893a:	85 c0                	test   eax,eax
c001893c:	75 1e                	jne    c001895c <Semaphore::release()+0x6c>
c001893e:	66 90                	xchg   ax,ax
c0018940:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018945:	48                   	dec    eax
c0018946:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001894b:	75 03                	jne    c0018950 <Semaphore::release()+0x60>
c001894d:	fb                   	sti    
c001894e:	66 90                	xchg   ax,ax
c0018950:	83 c4 0c             	add    esp,0xc
c0018953:	c3                   	ret    
c0018954:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018957:	eb d3                	jmp    c001892c <Semaphore::release()+0x3c>
c0018959:	8d 76 00             	lea    esi,[esi+0x0]
c001895c:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c0018966:	e8 95 f5 ff ff       	call   c0017f00 <schedule()>
c001896b:	eb d3                	jmp    c0018940 <Semaphore::release()+0x50>
c001896d:	8d 76 00             	lea    esi,[esi+0x0]

c0018970 <__static_initialization_and_destruction_0(int, int)>:
c0018970:	83 ec 0c             	sub    esp,0xc
c0018973:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018978:	0f 85 8e 00 00 00    	jne    c0018a0c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001897e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018986:	0f 85 80 00 00 00    	jne    c0018a0c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001898c:	83 ec 0c             	sub    esp,0xc
c001898f:	68 e4 78 02 c0       	push   0xc00278e4
c0018994:	e8 f3 8e 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018999:	83 c4 10             	add    esp,0x10
c001899c:	83 ec 04             	sub    esp,0x4
c001899f:	68 28 56 02 c0       	push   0xc0025628
c00189a4:	68 e4 78 02 c0       	push   0xc00278e4
c00189a9:	68 3c 18 02 c0       	push   0xc002183c
c00189ae:	e8 51 3f ff ff       	call   c000c904 <__cxa_atexit>
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	83 ec 0c             	sub    esp,0xc
c00189b9:	68 d8 78 02 c0       	push   0xc00278d8
c00189be:	e8 c9 8e 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189c3:	83 c4 10             	add    esp,0x10
c00189c6:	83 ec 04             	sub    esp,0x4
c00189c9:	68 28 56 02 c0       	push   0xc0025628
c00189ce:	68 d8 78 02 c0       	push   0xc00278d8
c00189d3:	68 3c 18 02 c0       	push   0xc002183c
c00189d8:	e8 27 3f ff ff       	call   c000c904 <__cxa_atexit>
c00189dd:	83 c4 10             	add    esp,0x10
c00189e0:	83 ec 0c             	sub    esp,0xc
c00189e3:	68 cc 78 02 c0       	push   0xc00278cc
c00189e8:	e8 9f 8e 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189ed:	83 c4 10             	add    esp,0x10
c00189f0:	83 ec 04             	sub    esp,0x4
c00189f3:	68 28 56 02 c0       	push   0xc0025628
c00189f8:	68 cc 78 02 c0       	push   0xc00278cc
c00189fd:	68 3c 18 02 c0       	push   0xc002183c
c0018a02:	e8 fd 3e ff ff       	call   c000c904 <__cxa_atexit>
c0018a07:	83 c4 10             	add    esp,0x10
c0018a0a:	66 90                	xchg   ax,ax
c0018a0c:	90                   	nop
c0018a0d:	83 c4 0c             	add    esp,0xc
c0018a10:	c3                   	ret    
c0018a11:	8d 76 00             	lea    esi,[esi+0x0]

c0018a14 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a14:	83 ec 0c             	sub    esp,0xc
c0018a17:	83 ec 08             	sub    esp,0x8
c0018a1a:	68 ff ff 00 00       	push   0xffff
c0018a1f:	6a 01                	push   0x1
c0018a21:	e8 4a ff ff ff       	call   c0018970 <__static_initialization_and_destruction_0(int, int)>
c0018a26:	83 c4 10             	add    esp,0x10
c0018a29:	83 c4 0c             	add    esp,0xc
c0018a2c:	c3                   	ret    

c0018a2d <Vm::inbv(unsigned short)>:
c0018a2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a31:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a36:	75 06                	jne    c0018a3e <Vm::inbv(unsigned short)+0x11>
c0018a38:	a0 2c 79 02 c0       	mov    al,ds:0xc002792c
c0018a3d:	c3                   	ret    
c0018a3e:	ec                   	in     al,dx
c0018a3f:	c3                   	ret    

c0018a40 <Vm::outbv(unsigned short, unsigned char)>:
c0018a40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a48:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a4d:	75 25                	jne    c0018a74 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a4f:	8b 0d 2c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002792c
c0018a55:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a58:	88 81 40 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd86c0],al
c0018a5e:	89 15 2c 79 02 c0    	mov    DWORD PTR ds:0xc002792c,edx
c0018a64:	83 fa 20             	cmp    edx,0x20
c0018a67:	75 0c                	jne    c0018a75 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a69:	c7 05 2c 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x1f
c0018a73:	c3                   	ret    
c0018a74:	ee                   	out    dx,al
c0018a75:	c3                   	ret    

c0018a76 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a80:	c1 e0 04             	shl    eax,0x4
c0018a83:	01 d0                	add    eax,edx
c0018a85:	c3                   	ret    

c0018a86 <Vm::getSegment(unsigned int)>:
c0018a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a8a:	c1 e8 10             	shr    eax,0x10
c0018a8d:	c3                   	ret    

c0018a8e <Vm::getOffset(unsigned int)>:
c0018a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a92:	c3                   	ret    

c0018a93 <Vm::mainloop2()>:
c0018a93:	83 ec 18             	sub    esp,0x18
c0018a96:	fa                   	cli    
c0018a97:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018a9d:	6a 02                	push   0x2
c0018a9f:	c6 05 25 79 02 c0 01 	mov    BYTE PTR ds:0xc0027925,0x1
c0018aa6:	e8 25 f6 ff ff       	call   c00180d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018ab4:	52                   	push   edx
c0018ab5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018ab9:	52                   	push   edx
c0018aba:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018abe:	52                   	push   edx
c0018abf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018ac3:	50                   	push   eax
c0018ac4:	e8 66 77 fe ff       	call   c000022f <goToVM86>
c0018ac9:	83 c4 2c             	add    esp,0x2c
c0018acc:	c3                   	ret    

c0018acd <Vm::mainVm8086Loop(void*)>:
c0018acd:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018ad2:	48                   	dec    eax
c0018ad3:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018ad8:	75 01                	jne    c0018adb <Vm::mainVm8086Loop(void*)+0xe>
c0018ada:	fb                   	sti    
c0018adb:	eb b6                	jmp    c0018a93 <Vm::mainloop2()>

c0018add <Vm::mainloop3(unsigned long)>:
c0018add:	83 ec 18             	sub    esp,0x18
c0018ae0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ae4:	fa                   	cli    
c0018ae5:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018aeb:	6a 02                	push   0x2
c0018aed:	c6 05 24 79 02 c0 01 	mov    BYTE PTR ds:0xc0027924,0x1
c0018af4:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c0018af9:	e8 d2 f5 ff ff       	call   c00180d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018afe:	83 c4 1c             	add    esp,0x1c
c0018b01:	eb 90                	jmp    c0018a93 <Vm::mainloop2()>

c0018b03 <Vm::initialise8086()>:
c0018b03:	83 ec 0c             	sub    esp,0xc
c0018b06:	68 80 00 00 00       	push   0x80
c0018b0b:	6a 00                	push   0x0
c0018b0d:	68 cd 8a 01 c0       	push   0xc0018acd
c0018b12:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0018b18:	e8 c7 f1 ff ff       	call   c0017ce4 <Process::createThread(void (*)(void*), void*, int)>
c0018b1d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b24:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018b29:	68 00 01 00 00       	push   0x100
c0018b2e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0018b33:	6a 00                	push   0x0
c0018b35:	6a 00                	push   0x0
c0018b37:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b3d:	e8 f4 34 ff ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b42:	83 c4 2c             	add    esp,0x2c
c0018b45:	c3                   	ret    

c0018b46 <Vm::finish8086()>:
c0018b46:	53                   	push   ebx
c0018b47:	83 ec 08             	sub    esp,0x8
c0018b4a:	fa                   	cli    
c0018b4b:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018b51:	80 3d 24 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027924,0x0
c0018b58:	75 15                	jne    c0018b6f <Vm::finish8086()+0x29>
c0018b5a:	e8 a1 f3 ff ff       	call   c0017f00 <schedule()>
c0018b5f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018b64:	48                   	dec    eax
c0018b65:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018b6a:	75 de                	jne    c0018b4a <Vm::finish8086()+0x4>
c0018b6c:	fb                   	sti    
c0018b6d:	eb db                	jmp    c0018b4a <Vm::finish8086()+0x4>
c0018b6f:	83 ec 0c             	sub    esp,0xc
c0018b72:	8b 1d 20 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027920
c0018b78:	ff 35 28 79 02 c0    	push   DWORD PTR ds:0xc0027928
c0018b7e:	c6 05 24 79 02 c0 00 	mov    BYTE PTR ds:0xc0027924,0x0
c0018b85:	e8 32 f8 ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c0018b8a:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018b8f:	83 c4 10             	add    esp,0x10
c0018b92:	8d 50 ff             	lea    edx,[eax-0x1]
c0018b95:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c0018b9b:	85 d2                	test   edx,edx
c0018b9d:	75 01                	jne    c0018ba0 <Vm::finish8086()+0x5a>
c0018b9f:	fb                   	sti    
c0018ba0:	89 d8                	mov    eax,ebx
c0018ba2:	83 c4 08             	add    esp,0x8
c0018ba5:	5b                   	pop    ebx
c0018ba6:	c3                   	ret    

c0018ba7 <Vm::getOutput8086(unsigned char*)>:
c0018ba7:	57                   	push   edi
c0018ba8:	8b 0d 2c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002792c
c0018bae:	56                   	push   esi
c0018baf:	be 40 79 02 c0       	mov    esi,0xc0027940
c0018bb4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018bb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bba:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c0018bbf:	5e                   	pop    esi
c0018bc0:	c7 05 2c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x0
c0018bca:	5f                   	pop    edi
c0018bcb:	c3                   	ret    

c0018bcc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018bcc:	55                   	push   ebp
c0018bcd:	57                   	push   edi
c0018bce:	56                   	push   esi
c0018bcf:	53                   	push   ebx
c0018bd0:	83 ec 2c             	sub    esp,0x2c
c0018bd3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018bd7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018bdb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018bdf:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018be3:	fa                   	cli    
c0018be4:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018bea:	0f b6 35 25 79 02 c0 	movzx  esi,BYTE PTR ds:0xc0027925
c0018bf1:	89 f0                	mov    eax,esi
c0018bf3:	84 c0                	test   al,al
c0018bf5:	75 1d                	jne    c0018c14 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018bf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bfb:	e8 00 f3 ff ff       	call   c0017f00 <schedule()>
c0018c00:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018c05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c09:	48                   	dec    eax
c0018c0a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018c0f:	75 d2                	jne    c0018be3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c11:	fb                   	sti    
c0018c12:	eb cf                	jmp    c0018be3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c14:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018c19:	c7 05 2c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x0
c0018c23:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c27:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c2b:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018c2f:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c33:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c37:	50                   	push   eax
c0018c38:	6a 20                	push   0x20
c0018c3a:	6a 00                	push   0x0
c0018c3c:	68 40 79 02 c0       	push   0xc0027940
c0018c41:	e8 3e 7a fe ff       	call   c0000684 <memset>
c0018c46:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c4d:	e8 71 0d ff ff       	call   c00099c3 <malloc>
c0018c52:	83 c4 0c             	add    esp,0xc
c0018c55:	89 c3                	mov    ebx,eax
c0018c57:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0018c5d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c61:	50                   	push   eax
c0018c62:	e8 6f 43 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0018c67:	83 c4 10             	add    esp,0x10
c0018c6a:	85 db                	test   ebx,ebx
c0018c6c:	75 0a                	jne    c0018c78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c6e:	83 ec 0c             	sub    esp,0xc
c0018c71:	68 5c 49 02 c0       	push   0xc002495c
c0018c76:	eb 3e                	jmp    c0018cb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c78:	50                   	push   eax
c0018c79:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c7d:	50                   	push   eax
c0018c7e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c82:	50                   	push   eax
c0018c83:	53                   	push   ebx
c0018c84:	e8 5d 46 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c0018c89:	83 c4 10             	add    esp,0x10
c0018c8c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018c91:	74 0a                	je     c0018c9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018c93:	83 ec 0c             	sub    esp,0xc
c0018c96:	68 70 49 02 c0       	push   0xc0024970
c0018c9b:	eb 19                	jmp    c0018cb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c9d:	51                   	push   ecx
c0018c9e:	51                   	push   ecx
c0018c9f:	6a 01                	push   0x1
c0018ca1:	53                   	push   ebx
c0018ca2:	e8 93 43 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0018ca7:	83 c4 10             	add    esp,0x10
c0018caa:	85 c0                	test   eax,eax
c0018cac:	74 24                	je     c0018cd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018cae:	83 ec 0c             	sub    esp,0xc
c0018cb1:	68 89 49 02 c0       	push   0xc0024989
c0018cb6:	e8 72 b6 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0018cbb:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018cc0:	83 c4 10             	add    esp,0x10
c0018cc3:	48                   	dec    eax
c0018cc4:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018cc9:	85 c0                	test   eax,eax
c0018ccb:	75 01                	jne    c0018cce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018ccd:	fb                   	sti    
c0018cce:	31 f6                	xor    esi,esi
c0018cd0:	eb 58                	jmp    c0018d2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018cd2:	0f b7 ed             	movzx  ebp,bp
c0018cd5:	50                   	push   eax
c0018cd6:	0f b7 ff             	movzx  edi,di
c0018cd9:	50                   	push   eax
c0018cda:	55                   	push   ebp
c0018cdb:	57                   	push   edi
c0018cdc:	e8 95 fd ff ff       	call   c0018a76 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ce1:	5a                   	pop    edx
c0018ce2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ce4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018ce8:	51                   	push   ecx
c0018ce9:	50                   	push   eax
c0018cea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cf2:	53                   	push   ebx
c0018cf3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cf6:	83 c4 14             	add    esp,0x14
c0018cf9:	53                   	push   ebx
c0018cfa:	e8 99 43 ff ff       	call   c000d098 <File::close()>
c0018cff:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018d04:	83 c4 10             	add    esp,0x10
c0018d07:	48                   	dec    eax
c0018d08:	c6 05 25 79 02 c0 00 	mov    BYTE PTR ds:0xc0027925,0x0
c0018d0f:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018d14:	85 c0                	test   eax,eax
c0018d16:	75 01                	jne    c0018d19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d18:	fb                   	sti    
c0018d19:	83 ec 0c             	sub    esp,0xc
c0018d1c:	ff 35 28 79 02 c0    	push   DWORD PTR ds:0xc0027928
c0018d22:	e8 95 f6 ff ff       	call   c00183bc <unblockTask(ThreadControlBlock*)>
c0018d27:	83 c4 10             	add    esp,0x10
c0018d2a:	83 c4 2c             	add    esp,0x2c
c0018d2d:	89 f0                	mov    eax,esi
c0018d2f:	5b                   	pop    ebx
c0018d30:	5e                   	pop    esi
c0018d31:	5f                   	pop    edi
c0018d32:	5d                   	pop    ebp
c0018d33:	c3                   	ret    

c0018d34 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d34:	57                   	push   edi
c0018d35:	56                   	push   esi
c0018d36:	53                   	push   ebx
c0018d37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d43:	83 e8 06             	sub    eax,0x6
c0018d46:	0f b7 c0             	movzx  eax,ax
c0018d49:	50                   	push   eax
c0018d4a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d4f:	50                   	push   eax
c0018d50:	e8 21 fd ff ff       	call   c0018a76 <Vm::realToLinear(unsigned short, unsigned short)>
c0018d55:	5a                   	pop    edx
c0018d56:	5e                   	pop    esi
c0018d57:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d5a:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d5d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d63:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d66:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d69:	83 c2 02             	add    edx,0x2
c0018d6c:	66 89 10             	mov    WORD PTR [eax],dx
c0018d6f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d72:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d76:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d79:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d7d:	89 d6                	mov    esi,edx
c0018d7f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018d85:	66 81 e6 ff fd       	and    si,0xfdff
c0018d8a:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018d8e:	74 07                	je     c0018d97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018d90:	89 d6                	mov    esi,edx
c0018d92:	66 81 ce 00 02       	or     si,0x200
c0018d97:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018da0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018da4:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018dac:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018daf:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018db7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018dba:	5b                   	pop    ebx
c0018dbb:	5e                   	pop    esi
c0018dbc:	5f                   	pop    edi
c0018dbd:	c3                   	ret    

c0018dbe <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018dbe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dc3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dc8:	c1 e0 04             	shl    eax,0x4
c0018dcb:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018dce:	c3                   	ret    

c0018dcf <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018dcf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dd4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dd9:	c1 e0 04             	shl    eax,0x4
c0018ddc:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018de0:	c3                   	ret    

c0018de1 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018de1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018de6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018deb:	c1 e0 04             	shl    eax,0x4
c0018dee:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018df1:	c3                   	ret    

c0018df2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018df2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018df7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dfc:	c1 e0 04             	shl    eax,0x4
c0018dff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e03:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e06:	c3                   	ret    

c0018e07 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e11:	c1 e0 04             	shl    eax,0x4
c0018e14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e18:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e1c:	c3                   	ret    

c0018e1d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e1d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e22:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e27:	c1 e0 04             	shl    eax,0x4
c0018e2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e2e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e31:	c3                   	ret    

c0018e32 <Vm::faultHandler(regs*)>:
c0018e32:	55                   	push   ebp
c0018e33:	57                   	push   edi
c0018e34:	56                   	push   esi
c0018e35:	53                   	push   ebx
c0018e36:	83 ec 1c             	sub    esp,0x1c
c0018e39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e40:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e44:	0f b7 f8             	movzx  edi,ax
c0018e47:	52                   	push   edx
c0018e48:	0f b7 c0             	movzx  eax,ax
c0018e4b:	50                   	push   eax
c0018e4c:	e8 25 fc ff ff       	call   c0018a76 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e51:	5a                   	pop    edx
c0018e52:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e55:	59                   	pop    ecx
c0018e56:	89 c1                	mov    ecx,eax
c0018e58:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e5f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e68:	0f b7 c5             	movzx  eax,bp
c0018e6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e6f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e77:	e8 fa fb ff ff       	call   c0018a76 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e7c:	5e                   	pop    esi
c0018e7d:	be 06 00 00 00       	mov    esi,0x6
c0018e82:	5a                   	pop    edx
c0018e83:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018e88:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018e8d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018e90:	80 fa 9d             	cmp    dl,0x9d
c0018e93:	0f 84 2c 02 00 00    	je     c00190c5 <Vm::faultHandler(regs*)+0x293>
c0018e99:	0f 87 91 00 00 00    	ja     c0018f30 <Vm::faultHandler(regs*)+0xfe>
c0018e9f:	80 fa 66             	cmp    dl,0x66
c0018ea2:	0f 84 98 01 00 00    	je     c0019040 <Vm::faultHandler(regs*)+0x20e>
c0018ea8:	77 47                	ja     c0018ef1 <Vm::faultHandler(regs*)+0xbf>
c0018eaa:	80 fa 36             	cmp    dl,0x36
c0018ead:	0f 84 80 01 00 00    	je     c0019033 <Vm::faultHandler(regs*)+0x201>
c0018eb3:	77 1a                	ja     c0018ecf <Vm::faultHandler(regs*)+0x9d>
c0018eb5:	80 fa 26             	cmp    dl,0x26
c0018eb8:	0f 84 4e 01 00 00    	je     c001900c <Vm::faultHandler(regs*)+0x1da>
c0018ebe:	80 fa 2e             	cmp    dl,0x2e
c0018ec1:	0f 85 e2 05 00 00    	jne    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0018ec7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018eca:	31 f6                	xor    esi,esi
c0018ecc:	41                   	inc    ecx
c0018ecd:	eb be                	jmp    c0018e8d <Vm::faultHandler(regs*)+0x5b>
c0018ecf:	80 fa 64             	cmp    dl,0x64
c0018ed2:	0f 84 41 01 00 00    	je     c0019019 <Vm::faultHandler(regs*)+0x1e7>
c0018ed8:	0f 87 48 01 00 00    	ja     c0019026 <Vm::faultHandler(regs*)+0x1f4>
c0018ede:	80 fa 3e             	cmp    dl,0x3e
c0018ee1:	0f 85 c2 05 00 00    	jne    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0018ee7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018eea:	be 01 00 00 00       	mov    esi,0x1
c0018eef:	eb db                	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c0018ef1:	80 fa 6d             	cmp    dl,0x6d
c0018ef4:	0f 84 ec 02 00 00    	je     c00191e6 <Vm::faultHandler(regs*)+0x3b4>
c0018efa:	77 17                	ja     c0018f13 <Vm::faultHandler(regs*)+0xe1>
c0018efc:	80 fa 67             	cmp    dl,0x67
c0018eff:	0f 84 48 01 00 00    	je     c001904d <Vm::faultHandler(regs*)+0x21b>
c0018f05:	80 fa 6c             	cmp    dl,0x6c
c0018f08:	0f 84 69 02 00 00    	je     c0019177 <Vm::faultHandler(regs*)+0x345>
c0018f0e:	e9 96 05 00 00       	jmp    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0018f13:	80 fa 6f             	cmp    dl,0x6f
c0018f16:	0f 84 f4 03 00 00    	je     c0019310 <Vm::faultHandler(regs*)+0x4de>
c0018f1c:	0f 82 59 03 00 00    	jb     c001927b <Vm::faultHandler(regs*)+0x449>
c0018f22:	80 fa 9c             	cmp    dl,0x9c
c0018f25:	0f 84 2f 01 00 00    	je     c001905a <Vm::faultHandler(regs*)+0x228>
c0018f2b:	e9 79 05 00 00       	jmp    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0018f30:	80 fa ec             	cmp    dl,0xec
c0018f33:	0f 84 14 05 00 00    	je     c001944d <Vm::faultHandler(regs*)+0x61b>
c0018f39:	77 7b                	ja     c0018fb6 <Vm::faultHandler(regs*)+0x184>
c0018f3b:	80 fa e4             	cmp    dl,0xe4
c0018f3e:	0f 84 93 04 00 00    	je     c00193d7 <Vm::faultHandler(regs*)+0x5a5>
c0018f44:	77 53                	ja     c0018f99 <Vm::faultHandler(regs*)+0x167>
c0018f46:	80 fa cd             	cmp    dl,0xcd
c0018f49:	0f 84 d9 01 00 00    	je     c0019128 <Vm::faultHandler(regs*)+0x2f6>
c0018f4f:	80 fa cf             	cmp    dl,0xcf
c0018f52:	0f 85 51 05 00 00    	jne    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0018f58:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f5b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f5e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f62:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f65:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f69:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f6f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f72:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f7c:	66 c1 e8 09          	shr    ax,0x9
c0018f80:	83 e0 01             	and    eax,0x1
c0018f83:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f86:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f89:	83 c0 06             	add    eax,0x6
c0018f8c:	25 ff ff 00 00       	and    eax,0xffff
c0018f91:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f94:	e9 0c 05 00 00       	jmp    c00194a5 <Vm::faultHandler(regs*)+0x673>
c0018f99:	80 fa e6             	cmp    dl,0xe6
c0018f9c:	0f 84 7f 04 00 00    	je     c0019421 <Vm::faultHandler(regs*)+0x5ef>
c0018fa2:	0f 82 4b 04 00 00    	jb     c00193f3 <Vm::faultHandler(regs*)+0x5c1>
c0018fa8:	80 fa e7             	cmp    dl,0xe7
c0018fab:	0f 84 87 04 00 00    	je     c0019438 <Vm::faultHandler(regs*)+0x606>
c0018fb1:	e9 f3 04 00 00       	jmp    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0018fb6:	80 fa ef             	cmp    dl,0xef
c0018fb9:	0f 84 d1 04 00 00    	je     c0019490 <Vm::faultHandler(regs*)+0x65e>
c0018fbf:	77 28                	ja     c0018fe9 <Vm::faultHandler(regs*)+0x1b7>
c0018fc1:	80 fa ed             	cmp    dl,0xed
c0018fc4:	0f 84 9f 04 00 00    	je     c0019469 <Vm::faultHandler(regs*)+0x637>
c0018fca:	80 fa ee             	cmp    dl,0xee
c0018fcd:	0f 85 d6 04 00 00    	jne    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0018fd3:	50                   	push   eax
c0018fd4:	50                   	push   eax
c0018fd5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018fd9:	50                   	push   eax
c0018fda:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fde:	50                   	push   eax
c0018fdf:	e8 5c fa ff ff       	call   c0018a40 <Vm::outbv(unsigned short, unsigned char)>
c0018fe4:	e9 9f 04 00 00       	jmp    c0019488 <Vm::faultHandler(regs*)+0x656>
c0018fe9:	80 fa fa             	cmp    dl,0xfa
c0018fec:	0f 84 69 01 00 00    	je     c001915b <Vm::faultHandler(regs*)+0x329>
c0018ff2:	80 fa fb             	cmp    dl,0xfb
c0018ff5:	0f 84 6e 01 00 00    	je     c0019169 <Vm::faultHandler(regs*)+0x337>
c0018ffb:	80 fa f3             	cmp    dl,0xf3
c0018ffe:	0f 85 a5 04 00 00    	jne    c00194a9 <Vm::faultHandler(regs*)+0x677>
c0019004:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019007:	e9 c0 fe ff ff       	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c001900c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001900f:	be 02 00 00 00       	mov    esi,0x2
c0019014:	e9 b3 fe ff ff       	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c0019019:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001901c:	be 03 00 00 00       	mov    esi,0x3
c0019021:	e9 a6 fe ff ff       	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c0019026:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019029:	be 04 00 00 00       	mov    esi,0x4
c001902e:	e9 99 fe ff ff       	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c0019033:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019036:	be 05 00 00 00       	mov    esi,0x5
c001903b:	e9 8c fe ff ff       	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c0019040:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019043:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019048:	e9 7f fe ff ff       	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c001904d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019050:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019055:	e9 72 fe ff ff       	jmp    c0018ecc <Vm::faultHandler(regs*)+0x9a>
c001905a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001905d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019061:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019066:	74 30                	je     c0019098 <Vm::faultHandler(regs*)+0x266>
c0019068:	83 e9 04             	sub    ecx,0x4
c001906b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019071:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019077:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001907a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001907d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019083:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019087:	0f 84 15 04 00 00    	je     c00194a2 <Vm::faultHandler(regs*)+0x670>
c001908d:	80 ce 02             	or     dh,0x2
c0019090:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019093:	e9 0a 04 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c0019098:	83 e9 02             	sub    ecx,0x2
c001909b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190a1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190a4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190a8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190ae:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00190b2:	74 05                	je     c00190b9 <Vm::faultHandler(regs*)+0x287>
c00190b4:	80 ce 02             	or     dh,0x2
c00190b7:	eb 03                	jmp    c00190bc <Vm::faultHandler(regs*)+0x28a>
c00190b9:	80 e6 fd             	and    dh,0xfd
c00190bc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190c0:	e9 dd 03 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c00190c5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190ca:	74 2a                	je     c00190f6 <Vm::faultHandler(regs*)+0x2c4>
c00190cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00190ce:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190d4:	81 ca 00 02 02 00    	or     edx,0x20200
c00190da:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00190df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190e5:	c1 e8 09             	shr    eax,0x9
c00190e8:	83 e0 01             	and    eax,0x1
c00190eb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190ee:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190f1:	83 c0 04             	add    eax,0x4
c00190f4:	eb 25                	jmp    c001911b <Vm::faultHandler(regs*)+0x2e9>
c00190f6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00190f9:	81 ca 00 02 02 00    	or     edx,0x20200
c00190ff:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019102:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019105:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001910b:	66 c1 e8 09          	shr    ax,0x9
c001910f:	83 e0 01             	and    eax,0x1
c0019112:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019115:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019118:	83 c0 02             	add    eax,0x2
c001911b:	25 ff ff 00 00       	and    eax,0xffff
c0019120:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019123:	e9 7a 03 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c0019128:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001912c:	3c ee                	cmp    al,0xee
c001912e:	75 10                	jne    c0019140 <Vm::faultHandler(regs*)+0x30e>
c0019130:	83 ec 0c             	sub    esp,0xc
c0019133:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019136:	e8 a2 f9 ff ff       	call   c0018add <Vm::mainloop3(unsigned long)>
c001913b:	e9 4b 03 00 00       	jmp    c001948b <Vm::faultHandler(regs*)+0x659>
c0019140:	83 ec 0c             	sub    esp,0xc
c0019143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001914b:	51                   	push   ecx
c001914c:	50                   	push   eax
c001914d:	53                   	push   ebx
c001914e:	e8 e1 fb ff ff       	call   c0018d34 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019153:	83 c4 20             	add    esp,0x20
c0019156:	e9 4a 03 00 00       	jmp    c00194a5 <Vm::faultHandler(regs*)+0x673>
c001915b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019160:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019164:	e9 39 03 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c0019169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001916e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019172:	e9 2b 03 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c0019177:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001917a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001917f:	74 2b                	je     c00191ac <Vm::faultHandler(regs*)+0x37a>
c0019181:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019188:	76 22                	jbe    c00191ac <Vm::faultHandler(regs*)+0x37a>
c001918a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001918e:	50                   	push   eax
c001918f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019193:	50                   	push   eax
c0019194:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019198:	50                   	push   eax
c0019199:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001919d:	50                   	push   eax
c001919e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191a2:	50                   	push   eax
c00191a3:	6a 6c                	push   0x6c
c00191a5:	6a 6c                	push   0x6c
c00191a7:	e9 b9 01 00 00       	jmp    c0019365 <Vm::faultHandler(regs*)+0x533>
c00191ac:	83 ec 0c             	sub    esp,0xc
c00191af:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191b3:	0f b7 f6             	movzx  esi,si
c00191b6:	50                   	push   eax
c00191b7:	e8 71 f8 ff ff       	call   c0018a2d <Vm::inbv(unsigned short)>
c00191bc:	83 c4 0c             	add    esp,0xc
c00191bf:	0f b6 c0             	movzx  eax,al
c00191c2:	50                   	push   eax
c00191c3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00191c7:	50                   	push   eax
c00191c8:	56                   	push   esi
c00191c9:	e8 24 fc ff ff       	call   c0018df2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00191ce:	83 c4 10             	add    esp,0x10
c00191d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191d4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191d8:	74 03                	je     c00191dd <Vm::faultHandler(regs*)+0x3ab>
c00191da:	48                   	dec    eax
c00191db:	eb 01                	jmp    c00191de <Vm::faultHandler(regs*)+0x3ac>
c00191dd:	40                   	inc    eax
c00191de:	0f b7 c0             	movzx  eax,ax
c00191e1:	e9 8d 00 00 00       	jmp    c0019273 <Vm::faultHandler(regs*)+0x441>
c00191e6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191ec:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191f1:	74 29                	je     c001921c <Vm::faultHandler(regs*)+0x3ea>
c00191f3:	3d ff ff 00 00       	cmp    eax,0xffff
c00191f8:	76 22                	jbe    c001921c <Vm::faultHandler(regs*)+0x3ea>
c00191fa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191fe:	50                   	push   eax
c00191ff:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019203:	50                   	push   eax
c0019204:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019208:	50                   	push   eax
c0019209:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001920d:	50                   	push   eax
c001920e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019212:	50                   	push   eax
c0019213:	6a 6d                	push   0x6d
c0019215:	6a 6d                	push   0x6d
c0019217:	e9 49 01 00 00       	jmp    c0019365 <Vm::faultHandler(regs*)+0x533>
c001921c:	0f b7 c8             	movzx  ecx,ax
c001921f:	0f b7 f6             	movzx  esi,si
c0019222:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019225:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001922a:	74 20                	je     c001924c <Vm::faultHandler(regs*)+0x41a>
c001922c:	ed                   	in     eax,dx
c001922d:	55                   	push   ebp
c001922e:	50                   	push   eax
c001922f:	51                   	push   ecx
c0019230:	56                   	push   esi
c0019231:	e8 e7 fb ff ff       	call   c0018e1d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001923c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019240:	74 05                	je     c0019247 <Vm::faultHandler(regs*)+0x415>
c0019242:	83 e8 04             	sub    eax,0x4
c0019245:	eb 27                	jmp    c001926e <Vm::faultHandler(regs*)+0x43c>
c0019247:	83 c0 04             	add    eax,0x4
c001924a:	eb 22                	jmp    c001926e <Vm::faultHandler(regs*)+0x43c>
c001924c:	66 ed                	in     ax,dx
c001924e:	0f b7 c0             	movzx  eax,ax
c0019251:	57                   	push   edi
c0019252:	50                   	push   eax
c0019253:	51                   	push   ecx
c0019254:	56                   	push   esi
c0019255:	e8 ad fb ff ff       	call   c0018e07 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001925a:	83 c4 10             	add    esp,0x10
c001925d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019260:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019264:	74 05                	je     c001926b <Vm::faultHandler(regs*)+0x439>
c0019266:	83 e8 02             	sub    eax,0x2
c0019269:	eb 03                	jmp    c001926e <Vm::faultHandler(regs*)+0x43c>
c001926b:	83 c0 02             	add    eax,0x2
c001926e:	25 ff ff 00 00       	and    eax,0xffff
c0019273:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019276:	e9 27 02 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c001927b:	8d 46 ff             	lea    eax,[esi-0x1]
c001927e:	3c 05                	cmp    al,0x5
c0019280:	77 24                	ja     c00192a6 <Vm::faultHandler(regs*)+0x474>
c0019282:	0f b6 c0             	movzx  eax,al
c0019285:	ff 24 85 fc 49 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb604]
c001928c:	0f b7 fd             	movzx  edi,bp
c001928f:	eb 15                	jmp    c00192a6 <Vm::faultHandler(regs*)+0x474>
c0019291:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019295:	eb 0f                	jmp    c00192a6 <Vm::faultHandler(regs*)+0x474>
c0019297:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001929b:	eb 09                	jmp    c00192a6 <Vm::faultHandler(regs*)+0x474>
c001929d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00192a1:	eb 03                	jmp    c00192a6 <Vm::faultHandler(regs*)+0x474>
c00192a3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00192a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192a9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00192ae:	74 29                	je     c00192d9 <Vm::faultHandler(regs*)+0x4a7>
c00192b0:	3d ff ff 00 00       	cmp    eax,0xffff
c00192b5:	76 22                	jbe    c00192d9 <Vm::faultHandler(regs*)+0x4a7>
c00192b7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00192bb:	50                   	push   eax
c00192bc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00192c0:	50                   	push   eax
c00192c1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00192c5:	50                   	push   eax
c00192c6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00192ca:	50                   	push   eax
c00192cb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00192cf:	50                   	push   eax
c00192d0:	6a 6e                	push   0x6e
c00192d2:	6a 6e                	push   0x6e
c00192d4:	e9 8c 00 00 00       	jmp    c0019365 <Vm::faultHandler(regs*)+0x533>
c00192d9:	0f b7 c0             	movzx  eax,ax
c00192dc:	52                   	push   edx
c00192dd:	52                   	push   edx
c00192de:	50                   	push   eax
c00192df:	57                   	push   edi
c00192e0:	e8 d9 fa ff ff       	call   c0018dbe <Vm::readByteFromReal(unsigned short, unsigned short)>
c00192e5:	59                   	pop    ecx
c00192e6:	0f b6 c0             	movzx  eax,al
c00192e9:	5e                   	pop    esi
c00192ea:	50                   	push   eax
c00192eb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192ef:	50                   	push   eax
c00192f0:	e8 4b f7 ff ff       	call   c0018a40 <Vm::outbv(unsigned short, unsigned char)>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192fb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192ff:	74 03                	je     c0019304 <Vm::faultHandler(regs*)+0x4d2>
c0019301:	48                   	dec    eax
c0019302:	eb 01                	jmp    c0019305 <Vm::faultHandler(regs*)+0x4d3>
c0019304:	40                   	inc    eax
c0019305:	0f b7 c0             	movzx  eax,ax
c0019308:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001930b:	e9 92 01 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c0019310:	8d 46 ff             	lea    eax,[esi-0x1]
c0019313:	3c 05                	cmp    al,0x5
c0019315:	77 1f                	ja     c0019336 <Vm::faultHandler(regs*)+0x504>
c0019317:	0f b6 c0             	movzx  eax,al
c001931a:	ff 24 85 14 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb5ec]
c0019321:	89 ef                	mov    edi,ebp
c0019323:	eb 11                	jmp    c0019336 <Vm::faultHandler(regs*)+0x504>
c0019325:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019328:	eb 0c                	jmp    c0019336 <Vm::faultHandler(regs*)+0x504>
c001932a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001932d:	eb 07                	jmp    c0019336 <Vm::faultHandler(regs*)+0x504>
c001932f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019332:	eb 02                	jmp    c0019336 <Vm::faultHandler(regs*)+0x504>
c0019334:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019336:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019339:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001933e:	74 37                	je     c0019377 <Vm::faultHandler(regs*)+0x545>
c0019340:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019346:	76 2f                	jbe    c0019377 <Vm::faultHandler(regs*)+0x545>
c0019348:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001934c:	50                   	push   eax
c001934d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019351:	50                   	push   eax
c0019352:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019356:	50                   	push   eax
c0019357:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001935b:	50                   	push   eax
c001935c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019360:	50                   	push   eax
c0019361:	6a 6f                	push   0x6f
c0019363:	6a 6f                	push   0x6f
c0019365:	68 a2 49 02 c0       	push   0xc00249a2
c001936a:	e8 fc 36 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001936f:	83 c4 20             	add    esp,0x20
c0019372:	e9 86 01 00 00       	jmp    c00194fd <Vm::faultHandler(regs*)+0x6cb>
c0019377:	0f b7 d7             	movzx  edx,di
c001937a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001937d:	0f b7 c6             	movzx  eax,si
c0019380:	81 e1 00 04 00 00    	and    ecx,0x400
c0019386:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019389:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001938e:	74 1d                	je     c00193ad <Vm::faultHandler(regs*)+0x57b>
c0019390:	55                   	push   ebp
c0019391:	55                   	push   ebp
c0019392:	50                   	push   eax
c0019393:	52                   	push   edx
c0019394:	e8 48 fa ff ff       	call   c0018de1 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	89 fa                	mov    edx,edi
c001939e:	ef                   	out    dx,eax
c001939f:	85 c9                	test   ecx,ecx
c00193a1:	74 05                	je     c00193a8 <Vm::faultHandler(regs*)+0x576>
c00193a3:	83 ee 04             	sub    esi,0x4
c00193a6:	eb 21                	jmp    c00193c9 <Vm::faultHandler(regs*)+0x597>
c00193a8:	83 c6 04             	add    esi,0x4
c00193ab:	eb 1c                	jmp    c00193c9 <Vm::faultHandler(regs*)+0x597>
c00193ad:	55                   	push   ebp
c00193ae:	55                   	push   ebp
c00193af:	50                   	push   eax
c00193b0:	52                   	push   edx
c00193b1:	e8 19 fa ff ff       	call   c0018dcf <Vm::readWordFromReal(unsigned short, unsigned short)>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	89 fa                	mov    edx,edi
c00193bb:	66 ef                	out    dx,ax
c00193bd:	85 c9                	test   ecx,ecx
c00193bf:	74 05                	je     c00193c6 <Vm::faultHandler(regs*)+0x594>
c00193c1:	83 ee 02             	sub    esi,0x2
c00193c4:	eb 03                	jmp    c00193c9 <Vm::faultHandler(regs*)+0x597>
c00193c6:	83 c6 02             	add    esi,0x2
c00193c9:	81 e6 ff ff 00 00    	and    esi,0xffff
c00193cf:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00193d2:	e9 cb 00 00 00       	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c00193d7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00193de:	83 ec 0c             	sub    esp,0xc
c00193e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193e5:	50                   	push   eax
c00193e6:	e8 42 f6 ff ff       	call   c0018a2d <Vm::inbv(unsigned short)>
c00193eb:	0f b6 c0             	movzx  eax,al
c00193ee:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00193f1:	eb 3f                	jmp    c0019432 <Vm::faultHandler(regs*)+0x600>
c00193f3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193f8:	74 07                	je     c0019401 <Vm::faultHandler(regs*)+0x5cf>
c00193fa:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193fe:	ed                   	in     eax,dx
c00193ff:	eb 14                	jmp    c0019415 <Vm::faultHandler(regs*)+0x5e3>
c0019401:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019404:	66 31 f6             	xor    si,si
c0019407:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001940a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001940e:	66 ed                	in     ax,dx
c0019410:	0f b7 c0             	movzx  eax,ax
c0019413:	09 f0                	or     eax,esi
c0019415:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019418:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001941c:	e9 84 00 00 00       	jmp    c00194a5 <Vm::faultHandler(regs*)+0x673>
c0019421:	52                   	push   edx
c0019422:	52                   	push   edx
c0019423:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019427:	50                   	push   eax
c0019428:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001942c:	50                   	push   eax
c001942d:	e8 0e f6 ff ff       	call   c0018a40 <Vm::outbv(unsigned short, unsigned char)>
c0019432:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019436:	eb 53                	jmp    c001948b <Vm::faultHandler(regs*)+0x659>
c0019438:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001943b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001943f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019444:	74 03                	je     c0019449 <Vm::faultHandler(regs*)+0x617>
c0019446:	ef                   	out    dx,eax
c0019447:	eb cf                	jmp    c0019418 <Vm::faultHandler(regs*)+0x5e6>
c0019449:	66 ef                	out    dx,ax
c001944b:	eb cb                	jmp    c0019418 <Vm::faultHandler(regs*)+0x5e6>
c001944d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019454:	83 ec 0c             	sub    esp,0xc
c0019457:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001945b:	50                   	push   eax
c001945c:	e8 cc f5 ff ff       	call   c0018a2d <Vm::inbv(unsigned short)>
c0019461:	0f b6 c0             	movzx  eax,al
c0019464:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019467:	eb 1f                	jmp    c0019488 <Vm::faultHandler(regs*)+0x656>
c0019469:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001946c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019471:	74 03                	je     c0019476 <Vm::faultHandler(regs*)+0x644>
c0019473:	ed                   	in     eax,dx
c0019474:	eb 0d                	jmp    c0019483 <Vm::faultHandler(regs*)+0x651>
c0019476:	66 ed                	in     ax,dx
c0019478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001947b:	0f b7 c0             	movzx  eax,ax
c001947e:	66 31 d2             	xor    dx,dx
c0019481:	09 d0                	or     eax,edx
c0019483:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019486:	eb 1a                	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c0019488:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001948b:	83 c4 10             	add    esp,0x10
c001948e:	eb 15                	jmp    c00194a5 <Vm::faultHandler(regs*)+0x673>
c0019490:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019493:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019496:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001949b:	74 03                	je     c00194a0 <Vm::faultHandler(regs*)+0x66e>
c001949d:	ef                   	out    dx,eax
c001949e:	eb 02                	jmp    c00194a2 <Vm::faultHandler(regs*)+0x670>
c00194a0:	66 ef                	out    dx,ax
c00194a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194a5:	b0 01                	mov    al,0x1
c00194a7:	eb 56                	jmp    c00194ff <Vm::faultHandler(regs*)+0x6cd>
c00194a9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00194ad:	50                   	push   eax
c00194ae:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00194b2:	50                   	push   eax
c00194b3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00194b7:	50                   	push   eax
c00194b8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00194bc:	50                   	push   eax
c00194bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194c1:	50                   	push   eax
c00194c2:	52                   	push   edx
c00194c3:	52                   	push   edx
c00194c4:	68 cf 49 02 c0       	push   0xc00249cf
c00194c9:	e8 9d 35 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00194ce:	83 c4 20             	add    esp,0x20
c00194d1:	83 ec 0c             	sub    esp,0xc
c00194d4:	6a 60                	push   0x60
c00194d6:	e8 52 f5 ff ff       	call   c0018a2d <Vm::inbv(unsigned short)>
c00194db:	83 c4 10             	add    esp,0x10
c00194de:	3c 1c                	cmp    al,0x1c
c00194e0:	74 04                	je     c00194e6 <Vm::faultHandler(regs*)+0x6b4>
c00194e2:	3c 5a                	cmp    al,0x5a
c00194e4:	75 eb                	jne    c00194d1 <Vm::faultHandler(regs*)+0x69f>
c00194e6:	3c 5a                	cmp    al,0x5a
c00194e8:	74 04                	je     c00194ee <Vm::faultHandler(regs*)+0x6bc>
c00194ea:	3c 1c                	cmp    al,0x1c
c00194ec:	75 0f                	jne    c00194fd <Vm::faultHandler(regs*)+0x6cb>
c00194ee:	83 ec 0c             	sub    esp,0xc
c00194f1:	6a 60                	push   0x60
c00194f3:	e8 35 f5 ff ff       	call   c0018a2d <Vm::inbv(unsigned short)>
c00194f8:	83 c4 10             	add    esp,0x10
c00194fb:	eb e9                	jmp    c00194e6 <Vm::faultHandler(regs*)+0x6b4>
c00194fd:	31 c0                	xor    eax,eax
c00194ff:	83 c4 1c             	add    esp,0x1c
c0019502:	5b                   	pop    ebx
c0019503:	5e                   	pop    esi
c0019504:	5f                   	pop    edi
c0019505:	5d                   	pop    ebp
c0019506:	c3                   	ret    
c0019507:	90                   	nop

c0019508 <Vm::fpuInternalTo32(unsigned long long)>:
c0019508:	57                   	push   edi
c0019509:	56                   	push   esi
c001950a:	53                   	push   ebx
c001950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001950f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019513:	89 d6                	mov    esi,edx
c0019515:	89 d7                	mov    edi,edx
c0019517:	89 c1                	mov    ecx,eax
c0019519:	c1 ef 14             	shr    edi,0x14
c001951c:	89 d3                	mov    ebx,edx
c001951e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019524:	31 d2                	xor    edx,edx
c0019526:	89 f8                	mov    eax,edi
c0019528:	81 e6 00 00 00 80    	and    esi,0x80000000
c001952e:	bf ff 00 00 00       	mov    edi,0xff
c0019533:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019538:	83 d2 ff             	adc    edx,0xffffffff
c001953b:	39 c7                	cmp    edi,eax
c001953d:	bf 00 00 00 00       	mov    edi,0x0
c0019542:	19 d7                	sbb    edi,edx
c0019544:	72 16                	jb     c001955c <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019546:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001954a:	c1 e0 17             	shl    eax,0x17
c001954d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019553:	09 f1                	or     ecx,esi
c0019555:	09 c1                	or     ecx,eax
c0019557:	89 cf                	mov    edi,ecx
c0019559:	eb 05                	jmp    c0019560 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001955b:	90                   	nop
c001955c:	31 ff                	xor    edi,edi
c001955e:	66 90                	xchg   ax,ax
c0019560:	89 f8                	mov    eax,edi
c0019562:	5b                   	pop    ebx
c0019563:	5e                   	pop    esi
c0019564:	5f                   	pop    edi
c0019565:	c3                   	ret    

c0019566 <Vm::fpuInternalTo64(unsigned long long)>:
c0019566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001956a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001956e:	c3                   	ret    

c001956f <Vm::fpu32ToInternal(unsigned int)>:
c001956f:	57                   	push   edi
c0019570:	31 ff                	xor    edi,edi
c0019572:	56                   	push   esi
c0019573:	53                   	push   ebx
c0019574:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019578:	89 cb                	mov    ebx,ecx
c001957a:	89 ce                	mov    esi,ecx
c001957c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019582:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019588:	c1 e9 17             	shr    ecx,0x17
c001958b:	89 f0                	mov    eax,esi
c001958d:	0f b6 d1             	movzx  edx,cl
c0019590:	81 c2 80 03 00 00    	add    edx,0x380
c0019596:	89 d1                	mov    ecx,edx
c0019598:	89 fa                	mov    edx,edi
c001959a:	c1 e1 14             	shl    ecx,0x14
c001959d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00195a1:	c1 e0 1d             	shl    eax,0x1d
c00195a4:	89 d7                	mov    edi,edx
c00195a6:	89 c6                	mov    esi,eax
c00195a8:	89 ca                	mov    edx,ecx
c00195aa:	89 f0                	mov    eax,esi
c00195ac:	09 fa                	or     edx,edi
c00195ae:	09 da                	or     edx,ebx
c00195b0:	5b                   	pop    ebx
c00195b1:	5e                   	pop    esi
c00195b2:	5f                   	pop    edi
c00195b3:	c3                   	ret    

c00195b4 <Vm::fpu64ToInternal(unsigned long long)>:
c00195b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195bc:	c3                   	ret    

c00195bd <Vm::fpuFloatToLong(unsigned long long)>:
c00195bd:	57                   	push   edi
c00195be:	31 c0                	xor    eax,eax
c00195c0:	56                   	push   esi
c00195c1:	31 d2                	xor    edx,edx
c00195c3:	53                   	push   ebx
c00195c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195cc:	89 d9                	mov    ecx,ebx
c00195ce:	c1 e9 14             	shr    ecx,0x14
c00195d1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00195d7:	89 cf                	mov    edi,ecx
c00195d9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00195df:	78 37                	js     c0019618 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195e1:	89 d9                	mov    ecx,ebx
c00195e3:	89 f0                	mov    eax,esi
c00195e5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00195eb:	81 c9 00 00 10 00    	or     ecx,0x100000
c00195f1:	89 ca                	mov    edx,ecx
c00195f3:	b9 34 00 00 00       	mov    ecx,0x34
c00195f8:	29 f9                	sub    ecx,edi
c00195fa:	0f ad d0             	shrd   eax,edx,cl
c00195fd:	d3 fa                	sar    edx,cl
c00195ff:	f6 c1 20             	test   cl,0x20
c0019602:	74 08                	je     c001960c <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019604:	89 d0                	mov    eax,edx
c0019606:	c1 fa 1f             	sar    edx,0x1f
c0019609:	8d 76 00             	lea    esi,[esi+0x0]
c001960c:	85 db                	test   ebx,ebx
c001960e:	79 08                	jns    c0019618 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019610:	f7 d8                	neg    eax
c0019612:	83 d2 00             	adc    edx,0x0
c0019615:	f7 da                	neg    edx
c0019617:	90                   	nop
c0019618:	5b                   	pop    ebx
c0019619:	5e                   	pop    esi
c001961a:	5f                   	pop    edi
c001961b:	c3                   	ret    

c001961c <Vm::fpuULongToFloat(unsigned long long)>:
c001961c:	57                   	push   edi
c001961d:	31 c9                	xor    ecx,ecx
c001961f:	56                   	push   esi
c0019620:	53                   	push   ebx
c0019621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019625:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019629:	8d 76 00             	lea    esi,[esi+0x0]
c001962c:	0f ba e7 14          	bt     edi,0x14
c0019630:	72 0a                	jb     c001963c <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019632:	01 f6                	add    esi,esi
c0019634:	11 ff                	adc    edi,edi
c0019636:	41                   	inc    ecx
c0019637:	eb f3                	jmp    c001962c <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019639:	8d 76 00             	lea    esi,[esi+0x0]
c001963c:	89 fa                	mov    edx,edi
c001963e:	89 f0                	mov    eax,esi
c0019640:	bb 33 04 00 00       	mov    ebx,0x433
c0019645:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001964b:	29 cb                	sub    ebx,ecx
c001964d:	89 d9                	mov    ecx,ebx
c001964f:	5b                   	pop    ebx
c0019650:	c1 e1 14             	shl    ecx,0x14
c0019653:	5e                   	pop    esi
c0019654:	09 ca                	or     edx,ecx
c0019656:	5f                   	pop    edi
c0019657:	c3                   	ret    

c0019658 <Vm::fpuLongToFloat(long long)>:
c0019658:	56                   	push   esi
c0019659:	31 c0                	xor    eax,eax
c001965b:	53                   	push   ebx
c001965c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019660:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019664:	39 c8                	cmp    eax,ecx
c0019666:	19 d8                	sbb    eax,ebx
c0019668:	7d 06                	jge    c0019670 <Vm::fpuLongToFloat(long long)+0x18>
c001966a:	31 f6                	xor    esi,esi
c001966c:	eb 0e                	jmp    c001967c <Vm::fpuLongToFloat(long long)+0x24>
c001966e:	66 90                	xchg   ax,ax
c0019670:	f7 d9                	neg    ecx
c0019672:	be 01 00 00 00       	mov    esi,0x1
c0019677:	83 d3 00             	adc    ebx,0x0
c001967a:	f7 db                	neg    ebx
c001967c:	31 c0                	xor    eax,eax
c001967e:	66 90                	xchg   ax,ax
c0019680:	0f ba e3 14          	bt     ebx,0x14
c0019684:	72 0a                	jb     c0019690 <Vm::fpuLongToFloat(long long)+0x38>
c0019686:	01 c9                	add    ecx,ecx
c0019688:	11 db                	adc    ebx,ebx
c001968a:	40                   	inc    eax
c001968b:	eb f3                	jmp    c0019680 <Vm::fpuLongToFloat(long long)+0x28>
c001968d:	8d 76 00             	lea    esi,[esi+0x0]
c0019690:	ba 33 04 00 00       	mov    edx,0x433
c0019695:	29 c2                	sub    edx,eax
c0019697:	89 c8                	mov    eax,ecx
c0019699:	c1 e2 14             	shl    edx,0x14
c001969c:	89 d9                	mov    ecx,ebx
c001969e:	89 f3                	mov    ebx,esi
c00196a0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00196a6:	09 ca                	or     edx,ecx
c00196a8:	84 db                	test   bl,bl
c00196aa:	74 08                	je     c00196b4 <Vm::fpuLongToFloat(long long)+0x5c>
c00196ac:	81 ca 00 00 00 80    	or     edx,0x80000000
c00196b2:	66 90                	xchg   ax,ax
c00196b4:	5b                   	pop    ebx
c00196b5:	5e                   	pop    esi
c00196b6:	c3                   	ret    

c00196b7 <Vm::fpuGet0()>:
c00196b7:	31 c0                	xor    eax,eax
c00196b9:	31 d2                	xor    edx,edx
c00196bb:	c3                   	ret    

c00196bc <Vm::fpuGet1()>:
c00196bc:	b8 01 00 00 00       	mov    eax,0x1
c00196c1:	31 d2                	xor    edx,edx
c00196c3:	c3                   	ret    

c00196c4 <Vm::fpuGetPi()>:
c00196c4:	b8 03 00 00 00       	mov    eax,0x3
c00196c9:	31 d2                	xor    edx,edx
c00196cb:	c3                   	ret    

c00196cc <Vm::fpuGetLog2E()>:
c00196cc:	83 ec 18             	sub    esp,0x18
c00196cf:	68 2c 4a 02 c0       	push   0xc0024a2c
c00196d4:	e8 54 ac ff ff       	call   c001432d <Krnl::panic(char const*)>
c00196d9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196de:	31 d2                	xor    edx,edx
c00196e0:	83 c4 1c             	add    esp,0x1c
c00196e3:	c3                   	ret    

c00196e4 <Vm::fpuGetLogE2()>:
c00196e4:	83 ec 18             	sub    esp,0x18
c00196e7:	68 38 4a 02 c0       	push   0xc0024a38
c00196ec:	e8 3c ac ff ff       	call   c001432d <Krnl::panic(char const*)>
c00196f1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196f6:	31 d2                	xor    edx,edx
c00196f8:	83 c4 1c             	add    esp,0x1c
c00196fb:	c3                   	ret    

c00196fc <Vm::fpuGetLog210()>:
c00196fc:	83 ec 18             	sub    esp,0x18
c00196ff:	68 44 4a 02 c0       	push   0xc0024a44
c0019704:	e8 24 ac ff ff       	call   c001432d <Krnl::panic(char const*)>
c0019709:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001970e:	31 d2                	xor    edx,edx
c0019710:	83 c4 1c             	add    esp,0x1c
c0019713:	c3                   	ret    

c0019714 <Vm::fpuGetLog102()>:
c0019714:	83 ec 18             	sub    esp,0x18
c0019717:	68 51 4a 02 c0       	push   0xc0024a51
c001971c:	e8 0c ac ff ff       	call   c001432d <Krnl::panic(char const*)>
c0019721:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019726:	31 d2                	xor    edx,edx
c0019728:	83 c4 1c             	add    esp,0x1c
c001972b:	c3                   	ret    

c001972c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001972c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019730:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019738:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001973c:	0f 92 c0             	setb   al
c001973f:	c3                   	ret    

c0019740 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019748:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001974c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019750:	09 c2                	or     edx,eax
c0019752:	0f 94 c0             	sete   al
c0019755:	c3                   	ret    

c0019756 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019756:	57                   	push   edi
c0019757:	56                   	push   esi
c0019758:	53                   	push   ebx
c0019759:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001975d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019761:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019765:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019769:	57                   	push   edi
c001976a:	56                   	push   esi
c001976b:	53                   	push   ebx
c001976c:	51                   	push   ecx
c001976d:	e8 ce ff ff ff       	call   c0019740 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019772:	83 c4 10             	add    esp,0x10
c0019775:	88 c2                	mov    dl,al
c0019777:	31 c0                	xor    eax,eax
c0019779:	84 d2                	test   dl,dl
c001977b:	75 0f                	jne    c001978c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001977d:	57                   	push   edi
c001977e:	56                   	push   esi
c001977f:	53                   	push   ebx
c0019780:	51                   	push   ecx
c0019781:	e8 a6 ff ff ff       	call   c001972c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019786:	83 c4 10             	add    esp,0x10
c0019789:	8d 76 00             	lea    esi,[esi+0x0]
c001978c:	83 e0 01             	and    eax,0x1
c001978f:	5b                   	pop    ebx
c0019790:	88 c1                	mov    cl,al
c0019792:	83 e2 01             	and    edx,0x1
c0019795:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c001979a:	c1 e2 06             	shl    edx,0x6
c001979d:	83 e0 ba             	and    eax,0xffffffba
c00197a0:	5e                   	pop    esi
c00197a1:	09 c8                	or     eax,ecx
c00197a3:	5f                   	pop    edi
c00197a4:	09 d0                	or     eax,edx
c00197a6:	a2 61 79 02 c0       	mov    ds:0xc0027961,al
c00197ab:	c3                   	ret    

c00197ac <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00197ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197b4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00197b8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00197bc:	c3                   	ret    

c00197bd <Vm::fpuAbs(unsigned long long)>:
c00197bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197c5:	c3                   	ret    

c00197c6 <Vm::fpuChs(unsigned long long)>:
c00197c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197ce:	f7 d8                	neg    eax
c00197d0:	83 d2 00             	adc    edx,0x0
c00197d3:	f7 da                	neg    edx
c00197d5:	c3                   	ret    

c00197d6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00197d6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00197da:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00197df:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00197e3:	eb c7                	jmp    c00197ac <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00197e5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00197e5:	53                   	push   ebx
c00197e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197f6:	0f af ca             	imul   ecx,edx
c00197f9:	0f af d8             	imul   ebx,eax
c00197fc:	f7 e2                	mul    edx
c00197fe:	01 d9                	add    ecx,ebx
c0019800:	5b                   	pop    ebx
c0019801:	01 ca                	add    edx,ecx
c0019803:	c3                   	ret    

c0019804 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019804:	83 ec 0c             	sub    esp,0xc
c0019807:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001980b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001980f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019817:	e8 18 77 00 00       	call   c0020f34 <__udivdi3>
c001981c:	83 c4 1c             	add    esp,0x1c
c001981f:	c3                   	ret    

c0019820 <Vm::fpuSquare(unsigned long long)>:
c0019820:	50                   	push   eax
c0019821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019829:	52                   	push   edx
c001982a:	50                   	push   eax
c001982b:	52                   	push   edx
c001982c:	50                   	push   eax
c001982d:	e8 b3 ff ff ff       	call   c00197e5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019832:	83 c4 14             	add    esp,0x14
c0019835:	c3                   	ret    

c0019836 <Vm::fpuGetReg(int)>:
c0019836:	83 ec 0c             	sub    esp,0xc
c0019839:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001983e:	76 10                	jbe    c0019850 <Vm::fpuGetReg(int)+0x1a>
c0019840:	83 ec 0c             	sub    esp,0xc
c0019843:	68 5e 4a 02 c0       	push   0xc0024a5e
c0019848:	e8 e0 aa ff ff       	call   c001432d <Krnl::panic(char const*)>
c001984d:	83 c4 10             	add    esp,0x10
c0019850:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c0019855:	b9 08 00 00 00       	mov    ecx,0x8
c001985a:	c0 e8 03             	shr    al,0x3
c001985d:	83 e0 07             	and    eax,0x7
c0019860:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019864:	99                   	cdq    
c0019865:	f7 f9                	idiv   ecx
c0019867:	8b 04 d5 64 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd869c]
c001986e:	8b 14 d5 68 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8698]
c0019875:	83 c4 0c             	add    esp,0xc
c0019878:	c3                   	ret    

c0019879 <Vm::fpuSetReg(int, unsigned long long)>:
c0019879:	57                   	push   edi
c001987a:	56                   	push   esi
c001987b:	52                   	push   edx
c001987c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019880:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019884:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019889:	76 11                	jbe    c001989c <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001988b:	83 ec 0c             	sub    esp,0xc
c001988e:	68 71 4a 02 c0       	push   0xc0024a71
c0019893:	e8 95 aa ff ff       	call   c001432d <Krnl::panic(char const*)>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	90                   	nop
c001989c:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c00198a1:	b9 08 00 00 00       	mov    ecx,0x8
c00198a6:	c0 e8 03             	shr    al,0x3
c00198a9:	83 e0 07             	and    eax,0x7
c00198ac:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198b0:	99                   	cdq    
c00198b1:	f7 f9                	idiv   ecx
c00198b3:	89 34 d5 64 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd869c],esi
c00198ba:	89 3c d5 68 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8698],edi
c00198c1:	58                   	pop    eax
c00198c2:	5e                   	pop    esi
c00198c3:	5f                   	pop    edi
c00198c4:	c3                   	ret    

c00198c5 <Vm::fpuPush(unsigned long long)>:
c00198c5:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c00198ca:	c0 e8 03             	shr    al,0x3
c00198cd:	83 e0 07             	and    eax,0x7
c00198d0:	83 c0 07             	add    eax,0x7
c00198d3:	88 c2                	mov    dl,al
c00198d5:	83 e0 07             	and    eax,0x7
c00198d8:	83 e2 07             	and    edx,0x7
c00198db:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00198e2:	8a 15 61 79 02 c0    	mov    dl,BYTE PTR ds:0xc0027961
c00198e8:	83 e2 c7             	and    edx,0xffffffc7
c00198eb:	09 ca                	or     edx,ecx
c00198ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198f1:	88 15 61 79 02 c0    	mov    BYTE PTR ds:0xc0027961,dl
c00198f7:	89 0c c5 68 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8698],ecx
c00198fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019902:	89 14 c5 64 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd869c],edx
c0019909:	a1 a4 79 02 c0       	mov    eax,ds:0xc00279a4
c001990e:	83 f8 08             	cmp    eax,0x8
c0019911:	75 09                	jne    c001991c <Vm::fpuPush(unsigned long long)+0x57>
c0019913:	80 0d 60 79 02 c0 40 	or     BYTE PTR ds:0xc0027960,0x40
c001991a:	c3                   	ret    
c001991b:	90                   	nop
c001991c:	40                   	inc    eax
c001991d:	a3 a4 79 02 c0       	mov    ds:0xc00279a4,eax
c0019922:	c3                   	ret    

c0019923 <Vm::fpuPop()>:
c0019923:	8a 0d 61 79 02 c0    	mov    cl,BYTE PTR ds:0xc0027961
c0019929:	53                   	push   ebx
c001992a:	c0 e9 03             	shr    cl,0x3
c001992d:	8a 1d 61 79 02 c0    	mov    bl,BYTE PTR ds:0xc0027961
c0019933:	83 e1 07             	and    ecx,0x7
c0019936:	83 e3 c7             	and    ebx,0xffffffc7
c0019939:	8b 04 cd 64 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd869c]
c0019940:	8b 14 cd 68 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8698]
c0019947:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001994e:	83 e1 38             	and    ecx,0x38
c0019951:	09 d9                	or     ecx,ebx
c0019953:	88 0d 61 79 02 c0    	mov    BYTE PTR ds:0xc0027961,cl
c0019959:	8b 0d a4 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279a4
c001995f:	85 c9                	test   ecx,ecx
c0019961:	74 09                	je     c001996c <Vm::fpuPop()+0x49>
c0019963:	49                   	dec    ecx
c0019964:	89 0d a4 79 02 c0    	mov    DWORD PTR ds:0xc00279a4,ecx
c001996a:	eb 08                	jmp    c0019974 <Vm::fpuPop()+0x51>
c001996c:	80 0d 60 79 02 c0 40 	or     BYTE PTR ds:0xc0027960,0x40
c0019973:	90                   	nop
c0019974:	5b                   	pop    ebx
c0019975:	c3                   	ret    

c0019976 <Vm::x87Handler(regs*)>:
c0019976:	55                   	push   ebp
c0019977:	57                   	push   edi
c0019978:	56                   	push   esi
c0019979:	53                   	push   ebx
c001997a:	83 ec 1c             	sub    esp,0x1c
c001997d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019981:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019989:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019991:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019995:	50                   	push   eax
c0019996:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001999a:	50                   	push   eax
c001999b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001999f:	50                   	push   eax
c00199a0:	53                   	push   ebx
c00199a1:	e8 a0 a0 ff ff       	call   c0013a46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00199a6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00199a9:	83 c4 10             	add    esp,0x10
c00199ac:	89 c6                	mov    esi,eax
c00199ae:	80 fa d9             	cmp    dl,0xd9
c00199b1:	0f 85 79 01 00 00    	jne    c0019b30 <Vm::x87Handler(regs*)+0x1ba>
c00199b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00199bb:	8d 50 20             	lea    edx,[eax+0x20]
c00199be:	80 fa 0e             	cmp    dl,0xe
c00199c1:	0f 87 a5 00 00 00    	ja     c0019a6c <Vm::x87Handler(regs*)+0xf6>
c00199c7:	0f b6 d2             	movzx  edx,dl
c00199ca:	ff 24 95 84 4a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb57c]
c00199d1:	8d 76 00             	lea    esi,[esi+0x0]
c00199d4:	e8 de fc ff ff       	call   c00196b7 <Vm::fpuGet0()>
c00199d9:	eb 09                	jmp    c00199e4 <Vm::x87Handler(regs*)+0x6e>
c00199db:	90                   	nop
c00199dc:	e8 db fc ff ff       	call   c00196bc <Vm::fpuGet1()>
c00199e1:	8d 76 00             	lea    esi,[esi+0x0]
c00199e4:	57                   	push   edi
c00199e5:	57                   	push   edi
c00199e6:	66 90                	xchg   ax,ax
c00199e8:	52                   	push   edx
c00199e9:	50                   	push   eax
c00199ea:	e8 d6 fe ff ff       	call   c00198c5 <Vm::fpuPush(unsigned long long)>
c00199ef:	90                   	nop
c00199f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199f4:	83 c4 10             	add    esp,0x10
c00199f7:	90                   	nop
c00199f8:	b0 01                	mov    al,0x1
c00199fa:	e9 89 0a 00 00       	jmp    c001a488 <Vm::x87Handler(regs*)+0xb12>
c00199ff:	90                   	nop
c0019a00:	83 ec 0c             	sub    esp,0xc
c0019a03:	6a 00                	push   0x0
c0019a05:	e8 2c fe ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019a0a:	59                   	pop    ecx
c0019a0b:	5e                   	pop    esi
c0019a0c:	52                   	push   edx
c0019a0d:	50                   	push   eax
c0019a0e:	e8 b3 fd ff ff       	call   c00197c6 <Vm::fpuChs(unsigned long long)>
c0019a13:	eb 17                	jmp    c0019a2c <Vm::x87Handler(regs*)+0xb6>
c0019a15:	8d 76 00             	lea    esi,[esi+0x0]
c0019a18:	83 ec 0c             	sub    esp,0xc
c0019a1b:	6a 00                	push   0x0
c0019a1d:	e8 14 fe ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019a22:	5f                   	pop    edi
c0019a23:	5d                   	pop    ebp
c0019a24:	52                   	push   edx
c0019a25:	50                   	push   eax
c0019a26:	e8 92 fd ff ff       	call   c00197bd <Vm::fpuAbs(unsigned long long)>
c0019a2b:	90                   	nop
c0019a2c:	83 c4 0c             	add    esp,0xc
c0019a2f:	90                   	nop
c0019a30:	52                   	push   edx
c0019a31:	50                   	push   eax
c0019a32:	66 90                	xchg   ax,ax
c0019a34:	6a 00                	push   0x0
c0019a36:	66 90                	xchg   ax,ax
c0019a38:	e8 3c fe ff ff       	call   c0019879 <Vm::fpuSetReg(int, unsigned long long)>
c0019a3d:	eb b1                	jmp    c00199f0 <Vm::x87Handler(regs*)+0x7a>
c0019a3f:	90                   	nop
c0019a40:	e8 b7 fc ff ff       	call   c00196fc <Vm::fpuGetLog210()>
c0019a45:	eb 9d                	jmp    c00199e4 <Vm::x87Handler(regs*)+0x6e>
c0019a47:	90                   	nop
c0019a48:	e8 7f fc ff ff       	call   c00196cc <Vm::fpuGetLog2E()>
c0019a4d:	eb 95                	jmp    c00199e4 <Vm::x87Handler(regs*)+0x6e>
c0019a4f:	90                   	nop
c0019a50:	e8 6f fc ff ff       	call   c00196c4 <Vm::fpuGetPi()>
c0019a55:	eb 8d                	jmp    c00199e4 <Vm::x87Handler(regs*)+0x6e>
c0019a57:	90                   	nop
c0019a58:	e8 b7 fc ff ff       	call   c0019714 <Vm::fpuGetLog102()>
c0019a5d:	eb 85                	jmp    c00199e4 <Vm::x87Handler(regs*)+0x6e>
c0019a5f:	90                   	nop
c0019a60:	e8 7f fc ff ff       	call   c00196e4 <Vm::fpuGetLogE2()>
c0019a65:	e9 7a ff ff ff       	jmp    c00199e4 <Vm::x87Handler(regs*)+0x6e>
c0019a6a:	66 90                	xchg   ax,ax
c0019a6c:	8d 50 40             	lea    edx,[eax+0x40]
c0019a6f:	80 fa 07             	cmp    dl,0x7
c0019a72:	77 18                	ja     c0019a8c <Vm::x87Handler(regs*)+0x116>
c0019a74:	83 ec 0c             	sub    esp,0xc
c0019a77:	2d c0 00 00 00       	sub    eax,0xc0
c0019a7c:	50                   	push   eax
c0019a7d:	e8 b4 fd ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019a82:	59                   	pop    ecx
c0019a83:	5e                   	pop    esi
c0019a84:	e9 5f ff ff ff       	jmp    c00199e8 <Vm::x87Handler(regs*)+0x72>
c0019a89:	8d 76 00             	lea    esi,[esi+0x0]
c0019a8c:	8d 50 38             	lea    edx,[eax+0x38]
c0019a8f:	80 fa 07             	cmp    dl,0x7
c0019a92:	77 3c                	ja     c0019ad0 <Vm::x87Handler(regs*)+0x15a>
c0019a94:	83 ec 0c             	sub    esp,0xc
c0019a97:	2d c8 00 00 00       	sub    eax,0xc8
c0019a9c:	50                   	push   eax
c0019a9d:	e8 94 fd ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019aa2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019aa9:	89 c6                	mov    esi,eax
c0019aab:	89 d7                	mov    edi,edx
c0019aad:	e8 84 fd ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019ab2:	83 c4 0c             	add    esp,0xc
c0019ab5:	52                   	push   edx
c0019ab6:	50                   	push   eax
c0019ab7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019abb:	2d c8 00 00 00       	sub    eax,0xc8
c0019ac0:	50                   	push   eax
c0019ac1:	e8 b3 fd ff ff       	call   c0019879 <Vm::fpuSetReg(int, unsigned long long)>
c0019ac6:	83 c4 0c             	add    esp,0xc
c0019ac9:	57                   	push   edi
c0019aca:	56                   	push   esi
c0019acb:	e9 64 ff ff ff       	jmp    c0019a34 <Vm::x87Handler(regs*)+0xbe>
c0019ad0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019ad4:	84 d2                	test   dl,dl
c0019ad6:	75 10                	jne    c0019ae8 <Vm::x87Handler(regs*)+0x172>
c0019ad8:	83 ec 0c             	sub    esp,0xc
c0019adb:	ff 36                	push   DWORD PTR [esi]
c0019add:	e8 8d fa ff ff       	call   c001956f <Vm::fpu32ToInternal(unsigned int)>
c0019ae2:	e9 c9 00 00 00       	jmp    c0019bb0 <Vm::x87Handler(regs*)+0x23a>
c0019ae7:	90                   	nop
c0019ae8:	80 fa 03             	cmp    dl,0x3
c0019aeb:	75 13                	jne    c0019b00 <Vm::x87Handler(regs*)+0x18a>
c0019aed:	e8 31 fe ff ff       	call   c0019923 <Vm::fpuPop()>
c0019af2:	55                   	push   ebp
c0019af3:	55                   	push   ebp
c0019af4:	52                   	push   edx
c0019af5:	50                   	push   eax
c0019af6:	e8 0d fa ff ff       	call   c0019508 <Vm::fpuInternalTo32(unsigned long long)>
c0019afb:	e9 90 00 00 00       	jmp    c0019b90 <Vm::x87Handler(regs*)+0x21a>
c0019b00:	80 fa 05             	cmp    dl,0x5
c0019b03:	75 0f                	jne    c0019b14 <Vm::x87Handler(regs*)+0x19e>
c0019b05:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b08:	66 a3 62 79 02 c0    	mov    ds:0xc0027962,ax
c0019b0e:	e9 ed 00 00 00       	jmp    c0019c00 <Vm::x87Handler(regs*)+0x28a>
c0019b13:	90                   	nop
c0019b14:	31 c0                	xor    eax,eax
c0019b16:	80 fa 07             	cmp    dl,0x7
c0019b19:	0f 85 69 09 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c0019b1f:	66 a1 62 79 02 c0    	mov    ax,ds:0xc0027962
c0019b25:	66 89 06             	mov    WORD PTR [esi],ax
c0019b28:	e9 d3 00 00 00       	jmp    c0019c00 <Vm::x87Handler(regs*)+0x28a>
c0019b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b30:	80 fa d8             	cmp    dl,0xd8
c0019b33:	0f 84 d3 00 00 00    	je     c0019c0c <Vm::x87Handler(regs*)+0x296>
c0019b39:	80 fa dc             	cmp    dl,0xdc
c0019b3c:	0f 84 2a 02 00 00    	je     c0019d6c <Vm::x87Handler(regs*)+0x3f6>
c0019b42:	80 fa de             	cmp    dl,0xde
c0019b45:	0f 84 f1 02 00 00    	je     c0019e3c <Vm::x87Handler(regs*)+0x4c6>
c0019b4b:	80 fa dd             	cmp    dl,0xdd
c0019b4e:	0f 84 94 04 00 00    	je     c0019fe8 <Vm::x87Handler(regs*)+0x672>
c0019b54:	80 fa da             	cmp    dl,0xda
c0019b57:	0f 84 5f 05 00 00    	je     c001a0bc <Vm::x87Handler(regs*)+0x746>
c0019b5d:	80 fa df             	cmp    dl,0xdf
c0019b60:	0f 84 aa 05 00 00    	je     c001a110 <Vm::x87Handler(regs*)+0x79a>
c0019b66:	31 c0                	xor    eax,eax
c0019b68:	80 fa db             	cmp    dl,0xdb
c0019b6b:	0f 85 17 09 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c0019b71:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b75:	80 fa 03             	cmp    dl,0x3
c0019b78:	0f 85 c2 06 00 00    	jne    c001a240 <Vm::x87Handler(regs*)+0x8ca>
c0019b7e:	e8 a0 fd ff ff       	call   c0019923 <Vm::fpuPop()>
c0019b83:	55                   	push   ebp
c0019b84:	55                   	push   ebp
c0019b85:	8d 76 00             	lea    esi,[esi+0x0]
c0019b88:	52                   	push   edx
c0019b89:	50                   	push   eax
c0019b8a:	e8 2e fa ff ff       	call   c00195bd <Vm::fpuFloatToLong(unsigned long long)>
c0019b8f:	90                   	nop
c0019b90:	83 c4 10             	add    esp,0x10
c0019b93:	89 06                	mov    DWORD PTR [esi],eax
c0019b95:	eb 69                	jmp    c0019c00 <Vm::x87Handler(regs*)+0x28a>
c0019b97:	90                   	nop
c0019b98:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b9c:	84 d2                	test   dl,dl
c0019b9e:	0f 85 2c 06 00 00    	jne    c001a1d0 <Vm::x87Handler(regs*)+0x85a>
c0019ba4:	57                   	push   edi
c0019ba5:	57                   	push   edi
c0019ba6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ba9:	ff 36                	push   DWORD PTR [esi]
c0019bab:	e8 04 fa ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c0019bb0:	5e                   	pop    esi
c0019bb1:	5f                   	pop    edi
c0019bb2:	52                   	push   edx
c0019bb3:	50                   	push   eax
c0019bb4:	e8 0c fd ff ff       	call   c00198c5 <Vm::fpuPush(unsigned long long)>
c0019bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bc0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bc3:	e9 2c fe ff ff       	jmp    c00199f4 <Vm::x87Handler(regs*)+0x7e>
c0019bc8:	80 fa 03             	cmp    dl,0x3
c0019bcb:	0f 85 2b 07 00 00    	jne    c001a2fc <Vm::x87Handler(regs*)+0x986>
c0019bd1:	57                   	push   edi
c0019bd2:	57                   	push   edi
c0019bd3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bd6:	ff 36                	push   DWORD PTR [esi]
c0019bd8:	e8 d7 f9 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c0019bdd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019be4:	89 c6                	mov    esi,eax
c0019be6:	89 d7                	mov    edi,edx
c0019be8:	e8 49 fc ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019bed:	57                   	push   edi
c0019bee:	56                   	push   esi
c0019bef:	52                   	push   edx
c0019bf0:	50                   	push   eax
c0019bf1:	e8 60 fb ff ff       	call   c0019756 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019bf6:	83 c4 20             	add    esp,0x20
c0019bf9:	e8 25 fd ff ff       	call   c0019923 <Vm::fpuPop()>
c0019bfe:	66 90                	xchg   ax,ax
c0019c00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c04:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c07:	e9 ec fd ff ff       	jmp    c00199f8 <Vm::x87Handler(regs*)+0x82>
c0019c0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c10:	8d 50 40             	lea    edx,[eax+0x40]
c0019c13:	80 fa 07             	cmp    dl,0x7
c0019c16:	77 2c                	ja     c0019c44 <Vm::x87Handler(regs*)+0x2ce>
c0019c18:	83 ec 0c             	sub    esp,0xc
c0019c1b:	2d c0 00 00 00       	sub    eax,0xc0
c0019c20:	50                   	push   eax
c0019c21:	e8 10 fc ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019c26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c2d:	89 c6                	mov    esi,eax
c0019c2f:	89 d7                	mov    edi,edx
c0019c31:	e8 00 fc ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019c36:	57                   	push   edi
c0019c37:	56                   	push   esi
c0019c38:	52                   	push   edx
c0019c39:	50                   	push   eax
c0019c3a:	e8 6d fb ff ff       	call   c00197ac <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c3f:	eb 33                	jmp    c0019c74 <Vm::x87Handler(regs*)+0x2fe>
c0019c41:	8d 76 00             	lea    esi,[esi+0x0]
c0019c44:	8d 50 38             	lea    edx,[eax+0x38]
c0019c47:	80 fa 07             	cmp    dl,0x7
c0019c4a:	77 30                	ja     c0019c7c <Vm::x87Handler(regs*)+0x306>
c0019c4c:	83 ec 0c             	sub    esp,0xc
c0019c4f:	2d c8 00 00 00       	sub    eax,0xc8
c0019c54:	50                   	push   eax
c0019c55:	e8 dc fb ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019c5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c61:	89 c6                	mov    esi,eax
c0019c63:	89 d7                	mov    edi,edx
c0019c65:	e8 cc fb ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019c6a:	57                   	push   edi
c0019c6b:	56                   	push   esi
c0019c6c:	52                   	push   edx
c0019c6d:	50                   	push   eax
c0019c6e:	e8 72 fb ff ff       	call   c00197e5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c73:	90                   	nop
c0019c74:	83 c4 1c             	add    esp,0x1c
c0019c77:	e9 b4 fd ff ff       	jmp    c0019a30 <Vm::x87Handler(regs*)+0xba>
c0019c7c:	8d 50 30             	lea    edx,[eax+0x30]
c0019c7f:	80 fa 07             	cmp    dl,0x7
c0019c82:	77 10                	ja     c0019c94 <Vm::x87Handler(regs*)+0x31e>
c0019c84:	83 ec 0c             	sub    esp,0xc
c0019c87:	2d d0 00 00 00       	sub    eax,0xd0
c0019c8c:	e9 c3 03 00 00       	jmp    c001a054 <Vm::x87Handler(regs*)+0x6de>
c0019c91:	8d 76 00             	lea    esi,[esi+0x0]
c0019c94:	8d 50 28             	lea    edx,[eax+0x28]
c0019c97:	80 fa 07             	cmp    dl,0x7
c0019c9a:	77 10                	ja     c0019cac <Vm::x87Handler(regs*)+0x336>
c0019c9c:	83 ec 0c             	sub    esp,0xc
c0019c9f:	2d d8 00 00 00       	sub    eax,0xd8
c0019ca4:	e9 e7 03 00 00       	jmp    c001a090 <Vm::x87Handler(regs*)+0x71a>
c0019ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cac:	8d 50 20             	lea    edx,[eax+0x20]
c0019caf:	80 fa 07             	cmp    dl,0x7
c0019cb2:	77 1c                	ja     c0019cd0 <Vm::x87Handler(regs*)+0x35a>
c0019cb4:	83 ec 0c             	sub    esp,0xc
c0019cb7:	2d e0 00 00 00       	sub    eax,0xe0
c0019cbc:	50                   	push   eax
c0019cbd:	e8 74 fb ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019cc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cc9:	89 c6                	mov    esi,eax
c0019ccb:	89 d7                	mov    edi,edx
c0019ccd:	eb 25                	jmp    c0019cf4 <Vm::x87Handler(regs*)+0x37e>
c0019ccf:	90                   	nop
c0019cd0:	8d 50 18             	lea    edx,[eax+0x18]
c0019cd3:	80 fa 07             	cmp    dl,0x7
c0019cd6:	77 30                	ja     c0019d08 <Vm::x87Handler(regs*)+0x392>
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	6a 00                	push   0x0
c0019cdd:	e8 54 fb ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019ce2:	89 c6                	mov    esi,eax
c0019ce4:	89 d7                	mov    edi,edx
c0019ce6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019cea:	2d e8 00 00 00       	sub    eax,0xe8
c0019cef:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cf2:	66 90                	xchg   ax,ax
c0019cf4:	e8 3d fb ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019cf9:	57                   	push   edi
c0019cfa:	56                   	push   esi
c0019cfb:	52                   	push   edx
c0019cfc:	50                   	push   eax
c0019cfd:	e8 d4 fa ff ff       	call   c00197d6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d02:	e9 6d ff ff ff       	jmp    c0019c74 <Vm::x87Handler(regs*)+0x2fe>
c0019d07:	90                   	nop
c0019d08:	8d 50 10             	lea    edx,[eax+0x10]
c0019d0b:	80 fa 07             	cmp    dl,0x7
c0019d0e:	77 1c                	ja     c0019d2c <Vm::x87Handler(regs*)+0x3b6>
c0019d10:	83 ec 0c             	sub    esp,0xc
c0019d13:	2d f0 00 00 00       	sub    eax,0xf0
c0019d18:	50                   	push   eax
c0019d19:	e8 18 fb ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019d1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d25:	89 c6                	mov    esi,eax
c0019d27:	89 d7                	mov    edi,edx
c0019d29:	eb 25                	jmp    c0019d50 <Vm::x87Handler(regs*)+0x3da>
c0019d2b:	90                   	nop
c0019d2c:	3c f7                	cmp    al,0xf7
c0019d2e:	0f 86 00 04 00 00    	jbe    c001a134 <Vm::x87Handler(regs*)+0x7be>
c0019d34:	83 ec 0c             	sub    esp,0xc
c0019d37:	6a 00                	push   0x0
c0019d39:	e8 f8 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019d3e:	89 c6                	mov    esi,eax
c0019d40:	89 d7                	mov    edi,edx
c0019d42:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d46:	2d f8 00 00 00       	sub    eax,0xf8
c0019d4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d4e:	66 90                	xchg   ax,ax
c0019d50:	e8 e1 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019d55:	57                   	push   edi
c0019d56:	56                   	push   esi
c0019d57:	52                   	push   edx
c0019d58:	50                   	push   eax
c0019d59:	e8 a6 fa ff ff       	call   c0019804 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d5e:	83 c4 1c             	add    esp,0x1c
c0019d61:	52                   	push   edx
c0019d62:	50                   	push   eax
c0019d63:	6a 00                	push   0x0
c0019d65:	e9 6a 02 00 00       	jmp    c0019fd4 <Vm::x87Handler(regs*)+0x65e>
c0019d6a:	66 90                	xchg   ax,ax
c0019d6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d70:	8d 50 40             	lea    edx,[eax+0x40]
c0019d73:	80 fa 07             	cmp    dl,0x7
c0019d76:	77 38                	ja     c0019db0 <Vm::x87Handler(regs*)+0x43a>
c0019d78:	83 ec 0c             	sub    esp,0xc
c0019d7b:	2d c0 00 00 00       	sub    eax,0xc0
c0019d80:	50                   	push   eax
c0019d81:	e8 b0 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019d86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d8d:	89 c6                	mov    esi,eax
c0019d8f:	89 d7                	mov    edi,edx
c0019d91:	e8 a0 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019d96:	57                   	push   edi
c0019d97:	56                   	push   esi
c0019d98:	52                   	push   edx
c0019d99:	50                   	push   eax
c0019d9a:	e8 0d fa ff ff       	call   c00197ac <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019d9f:	83 c4 1c             	add    esp,0x1c
c0019da2:	52                   	push   edx
c0019da3:	50                   	push   eax
c0019da4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019da8:	2d c0 00 00 00       	sub    eax,0xc0
c0019dad:	eb 41                	jmp    c0019df0 <Vm::x87Handler(regs*)+0x47a>
c0019daf:	90                   	nop
c0019db0:	8d 50 38             	lea    edx,[eax+0x38]
c0019db3:	80 fa 07             	cmp    dl,0x7
c0019db6:	77 40                	ja     c0019df8 <Vm::x87Handler(regs*)+0x482>
c0019db8:	83 ec 0c             	sub    esp,0xc
c0019dbb:	2d c8 00 00 00       	sub    eax,0xc8
c0019dc0:	50                   	push   eax
c0019dc1:	e8 70 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019dc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019dcd:	89 c6                	mov    esi,eax
c0019dcf:	89 d7                	mov    edi,edx
c0019dd1:	e8 60 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019dd6:	57                   	push   edi
c0019dd7:	56                   	push   esi
c0019dd8:	52                   	push   edx
c0019dd9:	50                   	push   eax
c0019dda:	e8 06 fa ff ff       	call   c00197e5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019ddf:	83 c4 1c             	add    esp,0x1c
c0019de2:	52                   	push   edx
c0019de3:	50                   	push   eax
c0019de4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019de8:	2d c8 00 00 00       	sub    eax,0xc8
c0019ded:	8d 76 00             	lea    esi,[esi+0x0]
c0019df0:	50                   	push   eax
c0019df1:	e9 42 fc ff ff       	jmp    c0019a38 <Vm::x87Handler(regs*)+0xc2>
c0019df6:	66 90                	xchg   ax,ax
c0019df8:	83 c0 18             	add    eax,0x18
c0019dfb:	3c 07                	cmp    al,0x7
c0019dfd:	0f 87 6d 04 00 00    	ja     c001a270 <Vm::x87Handler(regs*)+0x8fa>
c0019e03:	83 ec 0c             	sub    esp,0xc
c0019e06:	6a 00                	push   0x0
c0019e08:	e8 29 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019e0d:	89 c6                	mov    esi,eax
c0019e0f:	89 d7                	mov    edi,edx
c0019e11:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e15:	2d e8 00 00 00       	sub    eax,0xe8
c0019e1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e1d:	e8 14 fa ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019e22:	57                   	push   edi
c0019e23:	56                   	push   esi
c0019e24:	52                   	push   edx
c0019e25:	50                   	push   eax
c0019e26:	e8 ab f9 ff ff       	call   c00197d6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e2b:	83 c4 1c             	add    esp,0x1c
c0019e2e:	52                   	push   edx
c0019e2f:	50                   	push   eax
c0019e30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e34:	2d e8 00 00 00       	sub    eax,0xe8
c0019e39:	eb b5                	jmp    c0019df0 <Vm::x87Handler(regs*)+0x47a>
c0019e3b:	90                   	nop
c0019e3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e40:	8d 50 40             	lea    edx,[eax+0x40]
c0019e43:	80 fa 07             	cmp    dl,0x7
c0019e46:	77 3c                	ja     c0019e84 <Vm::x87Handler(regs*)+0x50e>
c0019e48:	83 ec 0c             	sub    esp,0xc
c0019e4b:	2d c0 00 00 00       	sub    eax,0xc0
c0019e50:	50                   	push   eax
c0019e51:	e8 e0 f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019e56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e5d:	89 c6                	mov    esi,eax
c0019e5f:	89 d7                	mov    edi,edx
c0019e61:	e8 d0 f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019e66:	57                   	push   edi
c0019e67:	56                   	push   esi
c0019e68:	52                   	push   edx
c0019e69:	50                   	push   eax
c0019e6a:	e8 3d f9 ff ff       	call   c00197ac <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e6f:	83 c4 1c             	add    esp,0x1c
c0019e72:	52                   	push   edx
c0019e73:	50                   	push   eax
c0019e74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e78:	2d c0 00 00 00       	sub    eax,0xc0
c0019e7d:	e9 b2 01 00 00       	jmp    c001a034 <Vm::x87Handler(regs*)+0x6be>
c0019e82:	66 90                	xchg   ax,ax
c0019e84:	8d 50 20             	lea    edx,[eax+0x20]
c0019e87:	80 fa 07             	cmp    dl,0x7
c0019e8a:	77 3c                	ja     c0019ec8 <Vm::x87Handler(regs*)+0x552>
c0019e8c:	83 ec 0c             	sub    esp,0xc
c0019e8f:	2d e0 00 00 00       	sub    eax,0xe0
c0019e94:	50                   	push   eax
c0019e95:	e8 9c f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019e9a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ea1:	89 c6                	mov    esi,eax
c0019ea3:	89 d7                	mov    edi,edx
c0019ea5:	e8 8c f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019eaa:	57                   	push   edi
c0019eab:	56                   	push   esi
c0019eac:	52                   	push   edx
c0019ead:	50                   	push   eax
c0019eae:	e8 23 f9 ff ff       	call   c00197d6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019eb3:	83 c4 1c             	add    esp,0x1c
c0019eb6:	52                   	push   edx
c0019eb7:	50                   	push   eax
c0019eb8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ebc:	2d e0 00 00 00       	sub    eax,0xe0
c0019ec1:	e9 6e 01 00 00       	jmp    c001a034 <Vm::x87Handler(regs*)+0x6be>
c0019ec6:	66 90                	xchg   ax,ax
c0019ec8:	8d 50 18             	lea    edx,[eax+0x18]
c0019ecb:	80 fa 07             	cmp    dl,0x7
c0019ece:	77 3c                	ja     c0019f0c <Vm::x87Handler(regs*)+0x596>
c0019ed0:	83 ec 0c             	sub    esp,0xc
c0019ed3:	6a 00                	push   0x0
c0019ed5:	e8 5c f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019eda:	89 c6                	mov    esi,eax
c0019edc:	89 d7                	mov    edi,edx
c0019ede:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ee2:	2d e8 00 00 00       	sub    eax,0xe8
c0019ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eea:	e8 47 f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019eef:	57                   	push   edi
c0019ef0:	56                   	push   esi
c0019ef1:	52                   	push   edx
c0019ef2:	50                   	push   eax
c0019ef3:	e8 de f8 ff ff       	call   c00197d6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ef8:	83 c4 1c             	add    esp,0x1c
c0019efb:	52                   	push   edx
c0019efc:	50                   	push   eax
c0019efd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f01:	2d e8 00 00 00       	sub    eax,0xe8
c0019f06:	e9 29 01 00 00       	jmp    c001a034 <Vm::x87Handler(regs*)+0x6be>
c0019f0b:	90                   	nop
c0019f0c:	8d 50 38             	lea    edx,[eax+0x38]
c0019f0f:	80 fa 07             	cmp    dl,0x7
c0019f12:	77 3c                	ja     c0019f50 <Vm::x87Handler(regs*)+0x5da>
c0019f14:	83 ec 0c             	sub    esp,0xc
c0019f17:	2d c8 00 00 00       	sub    eax,0xc8
c0019f1c:	50                   	push   eax
c0019f1d:	e8 14 f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019f22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f29:	89 c6                	mov    esi,eax
c0019f2b:	89 d7                	mov    edi,edx
c0019f2d:	e8 04 f9 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019f32:	57                   	push   edi
c0019f33:	56                   	push   esi
c0019f34:	52                   	push   edx
c0019f35:	50                   	push   eax
c0019f36:	e8 aa f8 ff ff       	call   c00197e5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f3b:	83 c4 1c             	add    esp,0x1c
c0019f3e:	52                   	push   edx
c0019f3f:	50                   	push   eax
c0019f40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f44:	2d c8 00 00 00       	sub    eax,0xc8
c0019f49:	e9 82 00 00 00       	jmp    c0019fd0 <Vm::x87Handler(regs*)+0x65a>
c0019f4e:	66 90                	xchg   ax,ax
c0019f50:	3c f7                	cmp    al,0xf7
c0019f52:	76 38                	jbe    c0019f8c <Vm::x87Handler(regs*)+0x616>
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	6a 00                	push   0x0
c0019f59:	e8 d8 f8 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019f5e:	89 c6                	mov    esi,eax
c0019f60:	89 d7                	mov    edi,edx
c0019f62:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f66:	2d f8 00 00 00       	sub    eax,0xf8
c0019f6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f6e:	e8 c3 f8 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019f73:	57                   	push   edi
c0019f74:	56                   	push   esi
c0019f75:	52                   	push   edx
c0019f76:	50                   	push   eax
c0019f77:	e8 88 f8 ff ff       	call   c0019804 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f7c:	83 c4 1c             	add    esp,0x1c
c0019f7f:	52                   	push   edx
c0019f80:	50                   	push   eax
c0019f81:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f85:	2d f8 00 00 00       	sub    eax,0xf8
c0019f8a:	eb 44                	jmp    c0019fd0 <Vm::x87Handler(regs*)+0x65a>
c0019f8c:	8d 50 10             	lea    edx,[eax+0x10]
c0019f8f:	80 fa 07             	cmp    dl,0x7
c0019f92:	0f 87 6c 01 00 00    	ja     c001a104 <Vm::x87Handler(regs*)+0x78e>
c0019f98:	83 ec 0c             	sub    esp,0xc
c0019f9b:	2d f0 00 00 00       	sub    eax,0xf0
c0019fa0:	50                   	push   eax
c0019fa1:	e8 90 f8 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019fa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fad:	89 c6                	mov    esi,eax
c0019faf:	89 d7                	mov    edi,edx
c0019fb1:	e8 80 f8 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019fb6:	57                   	push   edi
c0019fb7:	56                   	push   esi
c0019fb8:	52                   	push   edx
c0019fb9:	50                   	push   eax
c0019fba:	e8 45 f8 ff ff       	call   c0019804 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fbf:	83 c4 1c             	add    esp,0x1c
c0019fc2:	52                   	push   edx
c0019fc3:	50                   	push   eax
c0019fc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fc8:	2d f0 00 00 00       	sub    eax,0xf0
c0019fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd0:	50                   	push   eax
c0019fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd4:	e8 a0 f8 ff ff       	call   c0019879 <Vm::fpuSetReg(int, unsigned long long)>
c0019fd9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019fdd:	e8 41 f9 ff ff       	call   c0019923 <Vm::fpuPop()>
c0019fe2:	e9 0d fa ff ff       	jmp    c00199f4 <Vm::x87Handler(regs*)+0x7e>
c0019fe7:	90                   	nop
c0019fe8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fec:	8d 50 30             	lea    edx,[eax+0x30]
c0019fef:	80 fa 07             	cmp    dl,0x7
c0019ff2:	77 20                	ja     c001a014 <Vm::x87Handler(regs*)+0x69e>
c0019ff4:	83 ec 0c             	sub    esp,0xc
c0019ff7:	6a 00                	push   0x0
c0019ff9:	e8 38 f8 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c0019ffe:	83 c4 0c             	add    esp,0xc
c001a001:	52                   	push   edx
c001a002:	50                   	push   eax
c001a003:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a007:	2d d0 00 00 00       	sub    eax,0xd0
c001a00c:	e9 df fd ff ff       	jmp    c0019df0 <Vm::x87Handler(regs*)+0x47a>
c001a011:	8d 76 00             	lea    esi,[esi+0x0]
c001a014:	8d 50 28             	lea    edx,[eax+0x28]
c001a017:	80 fa 07             	cmp    dl,0x7
c001a01a:	77 28                	ja     c001a044 <Vm::x87Handler(regs*)+0x6ce>
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	6a 00                	push   0x0
c001a021:	e8 10 f8 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a026:	83 c4 0c             	add    esp,0xc
c001a029:	52                   	push   edx
c001a02a:	50                   	push   eax
c001a02b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a02f:	2d d8 00 00 00       	sub    eax,0xd8
c001a034:	50                   	push   eax
c001a035:	e8 3f f8 ff ff       	call   c0019879 <Vm::fpuSetReg(int, unsigned long long)>
c001a03a:	e8 e4 f8 ff ff       	call   c0019923 <Vm::fpuPop()>
c001a03f:	e9 ac f9 ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x7a>
c001a044:	8d 50 20             	lea    edx,[eax+0x20]
c001a047:	80 fa 07             	cmp    dl,0x7
c001a04a:	77 30                	ja     c001a07c <Vm::x87Handler(regs*)+0x706>
c001a04c:	83 ec 0c             	sub    esp,0xc
c001a04f:	2d e0 00 00 00       	sub    eax,0xe0
c001a054:	50                   	push   eax
c001a055:	e8 dc f7 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a05a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a061:	89 c6                	mov    esi,eax
c001a063:	89 d7                	mov    edi,edx
c001a065:	e8 cc f7 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a06a:	57                   	push   edi
c001a06b:	56                   	push   esi
c001a06c:	52                   	push   edx
c001a06d:	50                   	push   eax
c001a06e:	e8 e3 f6 ff ff       	call   c0019756 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a073:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a077:	e9 78 02 00 00       	jmp    c001a2f4 <Vm::x87Handler(regs*)+0x97e>
c001a07c:	8d 50 18             	lea    edx,[eax+0x18]
c001a07f:	80 fa 07             	cmp    dl,0x7
c001a082:	0f 87 10 fb ff ff    	ja     c0019b98 <Vm::x87Handler(regs*)+0x222>
c001a088:	83 ec 0c             	sub    esp,0xc
c001a08b:	2d e8 00 00 00       	sub    eax,0xe8
c001a090:	50                   	push   eax
c001a091:	e8 a0 f7 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a096:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a09d:	89 c6                	mov    esi,eax
c001a09f:	89 d7                	mov    edi,edx
c001a0a1:	e8 90 f7 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a0a6:	57                   	push   edi
c001a0a7:	56                   	push   esi
c001a0a8:	52                   	push   edx
c001a0a9:	50                   	push   eax
c001a0aa:	e8 a7 f6 ff ff       	call   c0019756 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0af:	83 c4 20             	add    esp,0x20
c001a0b2:	e8 6c f8 ff ff       	call   c0019923 <Vm::fpuPop()>
c001a0b7:	eb 6f                	jmp    c001a128 <Vm::x87Handler(regs*)+0x7b2>
c001a0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0bc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a0c0:	0f 85 22 01 00 00    	jne    c001a1e8 <Vm::x87Handler(regs*)+0x872>
c001a0c6:	66 90                	xchg   ax,ax
c001a0c8:	83 ec 0c             	sub    esp,0xc
c001a0cb:	6a 01                	push   0x1
c001a0cd:	e8 64 f7 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a0d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0d9:	89 c6                	mov    esi,eax
c001a0db:	89 d7                	mov    edi,edx
c001a0dd:	e8 54 f7 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a0e2:	57                   	push   edi
c001a0e3:	56                   	push   esi
c001a0e4:	52                   	push   edx
c001a0e5:	50                   	push   eax
c001a0e6:	e8 6b f6 ff ff       	call   c0019756 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0eb:	83 c4 20             	add    esp,0x20
c001a0ee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0f2:	e8 2c f8 ff ff       	call   c0019923 <Vm::fpuPop()>
c001a0f7:	e8 27 f8 ff ff       	call   c0019923 <Vm::fpuPop()>
c001a0fc:	e9 f7 f8 ff ff       	jmp    c00199f8 <Vm::x87Handler(regs*)+0x82>
c001a101:	8d 76 00             	lea    esi,[esi+0x0]
c001a104:	3c d9                	cmp    al,0xd9
c001a106:	0f 85 e8 02 00 00    	jne    c001a3f4 <Vm::x87Handler(regs*)+0xa7e>
c001a10c:	eb ba                	jmp    c001a0c8 <Vm::x87Handler(regs*)+0x752>
c001a10e:	66 90                	xchg   ax,ax
c001a110:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a114:	0f 85 2a 03 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xace>
c001a11a:	0f b7 05 60 79 02 c0 	movzx  eax,WORD PTR ds:0xc0027960
c001a121:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a125:	8d 76 00             	lea    esi,[esi+0x0]
c001a128:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a12c:	e9 c7 f8 ff ff       	jmp    c00199f8 <Vm::x87Handler(regs*)+0x82>
c001a131:	8d 76 00             	lea    esi,[esi+0x0]
c001a134:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a138:	84 d2                	test   dl,dl
c001a13a:	75 10                	jne    c001a14c <Vm::x87Handler(regs*)+0x7d6>
c001a13c:	83 ec 0c             	sub    esp,0xc
c001a13f:	ff 36                	push   DWORD PTR [esi]
c001a141:	e8 29 f4 ff ff       	call   c001956f <Vm::fpu32ToInternal(unsigned int)>
c001a146:	e9 39 01 00 00       	jmp    c001a284 <Vm::x87Handler(regs*)+0x90e>
c001a14b:	90                   	nop
c001a14c:	80 fa 01             	cmp    dl,0x1
c001a14f:	75 0f                	jne    c001a160 <Vm::x87Handler(regs*)+0x7ea>
c001a151:	83 ec 0c             	sub    esp,0xc
c001a154:	ff 36                	push   DWORD PTR [esi]
c001a156:	e8 14 f4 ff ff       	call   c001956f <Vm::fpu32ToInternal(unsigned int)>
c001a15b:	e9 b4 02 00 00       	jmp    c001a414 <Vm::x87Handler(regs*)+0xa9e>
c001a160:	80 fa 04             	cmp    dl,0x4
c001a163:	75 0f                	jne    c001a174 <Vm::x87Handler(regs*)+0x7fe>
c001a165:	83 ec 0c             	sub    esp,0xc
c001a168:	ff 36                	push   DWORD PTR [esi]
c001a16a:	e8 00 f4 ff ff       	call   c001956f <Vm::fpu32ToInternal(unsigned int)>
c001a16f:	e9 9c 01 00 00       	jmp    c001a310 <Vm::x87Handler(regs*)+0x99a>
c001a174:	80 fa 05             	cmp    dl,0x5
c001a177:	75 1b                	jne    c001a194 <Vm::x87Handler(regs*)+0x81e>
c001a179:	83 ec 0c             	sub    esp,0xc
c001a17c:	6a 00                	push   0x0
c001a17e:	e8 b3 f6 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a183:	89 c7                	mov    edi,eax
c001a185:	89 d5                	mov    ebp,edx
c001a187:	58                   	pop    eax
c001a188:	ff 36                	push   DWORD PTR [esi]
c001a18a:	e8 e0 f3 ff ff       	call   c001956f <Vm::fpu32ToInternal(unsigned int)>
c001a18f:	e9 bc 01 00 00       	jmp    c001a350 <Vm::x87Handler(regs*)+0x9da>
c001a194:	80 fa 06             	cmp    dl,0x6
c001a197:	75 0f                	jne    c001a1a8 <Vm::x87Handler(regs*)+0x832>
c001a199:	83 ec 0c             	sub    esp,0xc
c001a19c:	ff 36                	push   DWORD PTR [esi]
c001a19e:	e8 cc f3 ff ff       	call   c001956f <Vm::fpu32ToInternal(unsigned int)>
c001a1a3:	e9 cc 01 00 00       	jmp    c001a374 <Vm::x87Handler(regs*)+0x9fe>
c001a1a8:	31 c0                	xor    eax,eax
c001a1aa:	80 fa 07             	cmp    dl,0x7
c001a1ad:	0f 85 d5 02 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c001a1b3:	83 ec 0c             	sub    esp,0xc
c001a1b6:	6a 00                	push   0x0
c001a1b8:	e8 79 f6 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a1bd:	89 c7                	mov    edi,eax
c001a1bf:	89 d5                	mov    ebp,edx
c001a1c1:	58                   	pop    eax
c001a1c2:	ff 36                	push   DWORD PTR [esi]
c001a1c4:	e8 a6 f3 ff ff       	call   c001956f <Vm::fpu32ToInternal(unsigned int)>
c001a1c9:	e9 ee 01 00 00       	jmp    c001a3bc <Vm::x87Handler(regs*)+0xa46>
c001a1ce:	66 90                	xchg   ax,ax
c001a1d0:	80 fa 03             	cmp    dl,0x3
c001a1d3:	0f 85 f7 01 00 00    	jne    c001a3d0 <Vm::x87Handler(regs*)+0xa5a>
c001a1d9:	e8 45 f7 ff ff       	call   c0019923 <Vm::fpuPop()>
c001a1de:	51                   	push   ecx
c001a1df:	51                   	push   ecx
c001a1e0:	e9 03 02 00 00       	jmp    c001a3e8 <Vm::x87Handler(regs*)+0xa72>
c001a1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1e8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1ec:	80 fa 01             	cmp    dl,0x1
c001a1ef:	75 0b                	jne    c001a1fc <Vm::x87Handler(regs*)+0x886>
c001a1f1:	57                   	push   edi
c001a1f2:	57                   	push   edi
c001a1f3:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1f5:	e9 0e 02 00 00       	jmp    c001a408 <Vm::x87Handler(regs*)+0xa92>
c001a1fa:	66 90                	xchg   ax,ax
c001a1fc:	80 fa 04             	cmp    dl,0x4
c001a1ff:	75 13                	jne    c001a214 <Vm::x87Handler(regs*)+0x89e>
c001a201:	31 d2                	xor    edx,edx
c001a203:	51                   	push   ecx
c001a204:	51                   	push   ecx
c001a205:	8b 06                	mov    eax,DWORD PTR [esi]
c001a207:	52                   	push   edx
c001a208:	50                   	push   eax
c001a209:	e8 4a f4 ff ff       	call   c0019658 <Vm::fpuLongToFloat(long long)>
c001a20e:	e9 fd 00 00 00       	jmp    c001a310 <Vm::x87Handler(regs*)+0x99a>
c001a213:	90                   	nop
c001a214:	31 c0                	xor    eax,eax
c001a216:	80 fa 07             	cmp    dl,0x7
c001a219:	0f 85 69 02 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c001a21f:	83 ec 0c             	sub    esp,0xc
c001a222:	6a 00                	push   0x0
c001a224:	e8 0d f6 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a229:	89 c7                	mov    edi,eax
c001a22b:	89 d5                	mov    ebp,edx
c001a22d:	58                   	pop    eax
c001a22e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a230:	5a                   	pop    edx
c001a231:	31 d2                	xor    edx,edx
c001a233:	52                   	push   edx
c001a234:	50                   	push   eax
c001a235:	e8 1e f4 ff ff       	call   c0019658 <Vm::fpuLongToFloat(long long)>
c001a23a:	e9 7d 01 00 00       	jmp    c001a3bc <Vm::x87Handler(regs*)+0xa46>
c001a23f:	90                   	nop
c001a240:	84 d2                	test   dl,dl
c001a242:	75 10                	jne    c001a254 <Vm::x87Handler(regs*)+0x8de>
c001a244:	31 d2                	xor    edx,edx
c001a246:	55                   	push   ebp
c001a247:	55                   	push   ebp
c001a248:	8b 06                	mov    eax,DWORD PTR [esi]
c001a24a:	52                   	push   edx
c001a24b:	50                   	push   eax
c001a24c:	e9 03 02 00 00       	jmp    c001a454 <Vm::x87Handler(regs*)+0xade>
c001a251:	8d 76 00             	lea    esi,[esi+0x0]
c001a254:	31 c0                	xor    eax,eax
c001a256:	80 fa 02             	cmp    dl,0x2
c001a259:	0f 85 29 02 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c001a25f:	83 ec 0c             	sub    esp,0xc
c001a262:	6a 00                	push   0x0
c001a264:	e8 cd f5 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a269:	59                   	pop    ecx
c001a26a:	5f                   	pop    edi
c001a26b:	e9 18 f9 ff ff       	jmp    c0019b88 <Vm::x87Handler(regs*)+0x212>
c001a270:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a274:	84 d2                	test   dl,dl
c001a276:	75 2c                	jne    c001a2a4 <Vm::x87Handler(regs*)+0x92e>
c001a278:	50                   	push   eax
c001a279:	50                   	push   eax
c001a27a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a27d:	ff 36                	push   DWORD PTR [esi]
c001a27f:	e8 30 f3 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c001a284:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a28b:	89 c6                	mov    esi,eax
c001a28d:	89 d7                	mov    edi,edx
c001a28f:	e8 a2 f5 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a294:	57                   	push   edi
c001a295:	56                   	push   esi
c001a296:	52                   	push   edx
c001a297:	50                   	push   eax
c001a298:	e8 0f f5 ff ff       	call   c00197ac <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a29d:	e9 8e 01 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xaba>
c001a2a2:	66 90                	xchg   ax,ax
c001a2a4:	80 fa 01             	cmp    dl,0x1
c001a2a7:	75 13                	jne    c001a2bc <Vm::x87Handler(regs*)+0x946>
c001a2a9:	50                   	push   eax
c001a2aa:	50                   	push   eax
c001a2ab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2ae:	ff 36                	push   DWORD PTR [esi]
c001a2b0:	e8 ff f2 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c001a2b5:	e9 5a 01 00 00       	jmp    c001a414 <Vm::x87Handler(regs*)+0xa9e>
c001a2ba:	66 90                	xchg   ax,ax
c001a2bc:	80 fa 02             	cmp    dl,0x2
c001a2bf:	0f 85 03 f9 ff ff    	jne    c0019bc8 <Vm::x87Handler(regs*)+0x252>
c001a2c5:	55                   	push   ebp
c001a2c6:	55                   	push   ebp
c001a2c7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2ca:	ff 36                	push   DWORD PTR [esi]
c001a2cc:	e8 e3 f2 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c001a2d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2d8:	89 c6                	mov    esi,eax
c001a2da:	89 d7                	mov    edi,edx
c001a2dc:	e8 55 f5 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a2e1:	57                   	push   edi
c001a2e2:	56                   	push   esi
c001a2e3:	52                   	push   edx
c001a2e4:	50                   	push   eax
c001a2e5:	e8 6c f4 ff ff       	call   c0019756 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2ee:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f4:	83 c4 20             	add    esp,0x20
c001a2f7:	e9 fc f6 ff ff       	jmp    c00199f8 <Vm::x87Handler(regs*)+0x82>
c001a2fc:	80 fa 04             	cmp    dl,0x4
c001a2ff:	75 2f                	jne    c001a330 <Vm::x87Handler(regs*)+0x9ba>
c001a301:	51                   	push   ecx
c001a302:	51                   	push   ecx
c001a303:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a306:	ff 36                	push   DWORD PTR [esi]
c001a308:	e8 a7 f2 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c001a30d:	8d 76 00             	lea    esi,[esi+0x0]
c001a310:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a317:	89 c6                	mov    esi,eax
c001a319:	89 d7                	mov    edi,edx
c001a31b:	e8 16 f5 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a320:	57                   	push   edi
c001a321:	56                   	push   esi
c001a322:	52                   	push   edx
c001a323:	50                   	push   eax
c001a324:	e8 ad f4 ff ff       	call   c00197d6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a329:	e9 02 01 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xaba>
c001a32e:	66 90                	xchg   ax,ax
c001a330:	80 fa 05             	cmp    dl,0x5
c001a333:	75 2b                	jne    c001a360 <Vm::x87Handler(regs*)+0x9ea>
c001a335:	83 ec 0c             	sub    esp,0xc
c001a338:	6a 00                	push   0x0
c001a33a:	e8 f7 f4 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a33f:	89 c7                	mov    edi,eax
c001a341:	89 d5                	mov    ebp,edx
c001a343:	58                   	pop    eax
c001a344:	5a                   	pop    edx
c001a345:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a348:	ff 36                	push   DWORD PTR [esi]
c001a34a:	e8 65 f2 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c001a34f:	90                   	nop
c001a350:	83 c4 10             	add    esp,0x10
c001a353:	55                   	push   ebp
c001a354:	57                   	push   edi
c001a355:	52                   	push   edx
c001a356:	50                   	push   eax
c001a357:	e8 7a f4 ff ff       	call   c00197d6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a35c:	eb 6a                	jmp    c001a3c8 <Vm::x87Handler(regs*)+0xa52>
c001a35e:	66 90                	xchg   ax,ax
c001a360:	80 fa 06             	cmp    dl,0x6
c001a363:	75 2f                	jne    c001a394 <Vm::x87Handler(regs*)+0xa1e>
c001a365:	51                   	push   ecx
c001a366:	51                   	push   ecx
c001a367:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a36a:	ff 36                	push   DWORD PTR [esi]
c001a36c:	e8 43 f2 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c001a371:	8d 76 00             	lea    esi,[esi+0x0]
c001a374:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a37b:	89 c6                	mov    esi,eax
c001a37d:	89 d7                	mov    edi,edx
c001a37f:	e8 b2 f4 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a384:	57                   	push   edi
c001a385:	56                   	push   esi
c001a386:	52                   	push   edx
c001a387:	50                   	push   eax
c001a388:	e8 77 f4 ff ff       	call   c0019804 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a38d:	e9 9e 00 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xaba>
c001a392:	66 90                	xchg   ax,ax
c001a394:	31 c0                	xor    eax,eax
c001a396:	80 fa 07             	cmp    dl,0x7
c001a399:	0f 85 e9 00 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c001a39f:	83 ec 0c             	sub    esp,0xc
c001a3a2:	6a 00                	push   0x0
c001a3a4:	e8 8d f4 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a3a9:	89 c7                	mov    edi,eax
c001a3ab:	89 d5                	mov    ebp,edx
c001a3ad:	58                   	pop    eax
c001a3ae:	5a                   	pop    edx
c001a3af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3b2:	ff 36                	push   DWORD PTR [esi]
c001a3b4:	e8 fb f1 ff ff       	call   c00195b4 <Vm::fpu64ToInternal(unsigned long long)>
c001a3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3bc:	83 c4 10             	add    esp,0x10
c001a3bf:	55                   	push   ebp
c001a3c0:	57                   	push   edi
c001a3c1:	52                   	push   edx
c001a3c2:	50                   	push   eax
c001a3c3:	e8 3c f4 ff ff       	call   c0019804 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3c8:	83 c4 0c             	add    esp,0xc
c001a3cb:	eb 67                	jmp    c001a434 <Vm::x87Handler(regs*)+0xabe>
c001a3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d0:	31 c0                	xor    eax,eax
c001a3d2:	80 fa 02             	cmp    dl,0x2
c001a3d5:	0f 85 ad 00 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c001a3db:	83 ec 0c             	sub    esp,0xc
c001a3de:	6a 00                	push   0x0
c001a3e0:	e8 51 f4 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a3e5:	59                   	pop    ecx
c001a3e6:	5f                   	pop    edi
c001a3e7:	90                   	nop
c001a3e8:	52                   	push   edx
c001a3e9:	50                   	push   eax
c001a3ea:	e8 77 f1 ff ff       	call   c0019566 <Vm::fpuInternalTo64(unsigned long long)>
c001a3ef:	e9 84 00 00 00       	jmp    c001a478 <Vm::x87Handler(regs*)+0xb02>
c001a3f4:	31 c0                	xor    eax,eax
c001a3f6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a3fb:	0f 85 87 00 00 00    	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c001a401:	50                   	push   eax
c001a402:	50                   	push   eax
c001a403:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a406:	66 90                	xchg   ax,ax
c001a408:	31 d2                	xor    edx,edx
c001a40a:	52                   	push   edx
c001a40b:	50                   	push   eax
c001a40c:	e8 47 f2 ff ff       	call   c0019658 <Vm::fpuLongToFloat(long long)>
c001a411:	8d 76 00             	lea    esi,[esi+0x0]
c001a414:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a41b:	89 c6                	mov    esi,eax
c001a41d:	89 d7                	mov    edi,edx
c001a41f:	e8 12 f4 ff ff       	call   c0019836 <Vm::fpuGetReg(int)>
c001a424:	57                   	push   edi
c001a425:	56                   	push   esi
c001a426:	52                   	push   edx
c001a427:	50                   	push   eax
c001a428:	e8 b8 f3 ff ff       	call   c00197e5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a42d:	8d 76 00             	lea    esi,[esi+0x0]
c001a430:	83 c4 1c             	add    esp,0x1c
c001a433:	90                   	nop
c001a434:	52                   	push   edx
c001a435:	50                   	push   eax
c001a436:	6a 00                	push   0x0
c001a438:	e8 3c f4 ff ff       	call   c0019879 <Vm::fpuSetReg(int, unsigned long long)>
c001a43d:	e9 7a f7 ff ff       	jmp    c0019bbc <Vm::x87Handler(regs*)+0x246>
c001a442:	66 90                	xchg   ax,ax
c001a444:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a448:	80 fa 05             	cmp    dl,0x5
c001a44b:	75 13                	jne    c001a460 <Vm::x87Handler(regs*)+0xaea>
c001a44d:	55                   	push   ebp
c001a44e:	55                   	push   ebp
c001a44f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a452:	ff 36                	push   DWORD PTR [esi]
c001a454:	e8 c3 f1 ff ff       	call   c001961c <Vm::fpuULongToFloat(unsigned long long)>
c001a459:	e9 52 f7 ff ff       	jmp    c0019bb0 <Vm::x87Handler(regs*)+0x23a>
c001a45e:	66 90                	xchg   ax,ax
c001a460:	31 c0                	xor    eax,eax
c001a462:	80 fa 07             	cmp    dl,0x7
c001a465:	75 21                	jne    c001a488 <Vm::x87Handler(regs*)+0xb12>
c001a467:	e8 b7 f4 ff ff       	call   c0019923 <Vm::fpuPop()>
c001a46c:	51                   	push   ecx
c001a46d:	51                   	push   ecx
c001a46e:	52                   	push   edx
c001a46f:	50                   	push   eax
c001a470:	e8 48 f1 ff ff       	call   c00195bd <Vm::fpuFloatToLong(unsigned long long)>
c001a475:	8d 76 00             	lea    esi,[esi+0x0]
c001a478:	83 c4 10             	add    esp,0x10
c001a47b:	89 06                	mov    DWORD PTR [esi],eax
c001a47d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a480:	e9 7b f7 ff ff       	jmp    c0019c00 <Vm::x87Handler(regs*)+0x28a>
c001a485:	8d 76 00             	lea    esi,[esi+0x0]
c001a488:	83 c4 1c             	add    esp,0x1c
c001a48b:	5b                   	pop    ebx
c001a48c:	5e                   	pop    esi
c001a48d:	5f                   	pop    edi
c001a48e:	5d                   	pop    ebp
c001a48f:	c3                   	ret    

c001a490 <__static_initialization_and_destruction_0(int, int)>:
c001a490:	83 ec 0c             	sub    esp,0xc
c001a493:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a498:	75 1a                	jne    c001a4b4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a49a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a4a2:	75 10                	jne    c001a4b4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4a4:	83 ec 0c             	sub    esp,0xc
c001a4a7:	68 60 79 02 c0       	push   0xc0027960
c001a4ac:	e8 27 74 00 00       	call   c00218d8 <Vm::_FPUState::_FPUState()>
c001a4b1:	83 c4 10             	add    esp,0x10
c001a4b4:	90                   	nop
c001a4b5:	83 c4 0c             	add    esp,0xc
c001a4b8:	c3                   	ret    
c001a4b9:	8d 76 00             	lea    esi,[esi+0x0]

c001a4bc <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	83 ec 08             	sub    esp,0x8
c001a4c2:	68 ff ff 00 00       	push   0xffff
c001a4c7:	6a 01                	push   0x1
c001a4c9:	e8 c2 ff ff ff       	call   c001a490 <__static_initialization_and_destruction_0(int, int)>
c001a4ce:	83 c4 10             	add    esp,0x10
c001a4d1:	83 c4 0c             	add    esp,0xc
c001a4d4:	c3                   	ret    
c001a4d5:	66 90                	xchg   ax,ax
c001a4d7:	90                   	nop

c001a4d8 <FAT::getName()>:
c001a4d8:	b8 c0 4a 02 c0       	mov    eax,0xc0024ac0
c001a4dd:	c3                   	ret    
c001a4de:	66 90                	xchg   ax,ax

c001a4e0 <FAT::tell(void*, unsigned long long*)>:
c001a4e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4e5:	75 09                	jne    c001a4f0 <FAT::tell(void*, unsigned long long*)+0x10>
c001a4e7:	b8 04 00 00 00       	mov    eax,0x4
c001a4ec:	c3                   	ret    
c001a4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4f5:	75 09                	jne    c001a500 <FAT::tell(void*, unsigned long long*)+0x20>
c001a4f7:	b8 04 00 00 00       	mov    eax,0x4
c001a4fc:	c3                   	ret    
c001a4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a500:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a504:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a507:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a50a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a50e:	89 01                	mov    DWORD PTR [ecx],eax
c001a510:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a513:	b8 00 00 00 00       	mov    eax,0x0
c001a518:	c3                   	ret    
c001a519:	90                   	nop
c001a51a:	66 90                	xchg   ax,ax

c001a51c <FAT::stat(void*, unsigned long long*)>:
c001a51c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a521:	75 09                	jne    c001a52c <FAT::stat(void*, unsigned long long*)+0x10>
c001a523:	b8 04 00 00 00       	mov    eax,0x4
c001a528:	c3                   	ret    
c001a529:	8d 76 00             	lea    esi,[esi+0x0]
c001a52c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a531:	75 09                	jne    c001a53c <FAT::stat(void*, unsigned long long*)+0x20>
c001a533:	b8 04 00 00 00       	mov    eax,0x4
c001a538:	c3                   	ret    
c001a539:	8d 76 00             	lea    esi,[esi+0x0]
c001a53c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a540:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a543:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a546:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a54a:	89 01                	mov    DWORD PTR [ecx],eax
c001a54c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a54f:	b8 00 00 00 00       	mov    eax,0x0
c001a554:	c3                   	ret    
c001a555:	90                   	nop
c001a556:	66 90                	xchg   ax,ax

c001a558 <FAT::~FAT()>:
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	ba 0c 4b 02 c0       	mov    edx,0xc0024b0c
c001a560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a564:	89 10                	mov    DWORD PTR [eax],edx
c001a566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56a:	83 ec 0c             	sub    esp,0xc
c001a56d:	50                   	push   eax
c001a56e:	e8 33 28 ff ff       	call   c000cda6 <Filesystem::~Filesystem()>
c001a573:	83 c4 10             	add    esp,0x10
c001a576:	90                   	nop
c001a577:	83 c4 0c             	add    esp,0xc
c001a57a:	c3                   	ret    
c001a57b:	90                   	nop

c001a57c <FAT::~FAT()>:
c001a57c:	83 ec 0c             	sub    esp,0xc
c001a57f:	83 ec 0c             	sub    esp,0xc
c001a582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a586:	e8 cd ff ff ff       	call   c001a558 <FAT::~FAT()>
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	83 ec 08             	sub    esp,0x8
c001a591:	6a 08                	push   0x8
c001a593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a597:	e8 ee 23 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	83 c4 0c             	add    esp,0xc
c001a5a2:	c3                   	ret    
c001a5a3:	90                   	nop

c001a5a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a5a4:	83 ec 1c             	sub    esp,0x1c
c001a5a7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a5ae:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a5b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5b7:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a5be:	83 f8 ff             	cmp    eax,0xffffffff
c001a5c1:	75 35                	jne    c001a5f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a5c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5c7:	88 c2                	mov    dl,al
c001a5c9:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a5ce:	01 d0                	add    eax,edx
c001a5d0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5d4:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a5da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5de:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a5e5:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a5ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5ee:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a5f5:	eb 19                	jmp    c001a610 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a5f7:	90                   	nop
c001a5f8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5fc:	88 c2                	mov    dl,al
c001a5fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a602:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a609:	01 d0                	add    eax,edx
c001a60b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a60f:	90                   	nop
c001a610:	83 ec 04             	sub    esp,0x4
c001a613:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a617:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a61b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a61f:	50                   	push   eax
c001a620:	e8 0d c6 fe ff       	call   c0006c32 <f_getlabel>
c001a625:	83 c4 10             	add    esp,0x10
c001a628:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a62c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a631:	75 09                	jne    c001a63c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a633:	b8 00 00 00 00       	mov    eax,0x0
c001a638:	eb 0a                	jmp    c001a644 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a63a:	66 90                	xchg   ax,ax
c001a63c:	b8 01 00 00 00       	mov    eax,0x1
c001a641:	8d 76 00             	lea    esi,[esi+0x0]
c001a644:	83 c4 1c             	add    esp,0x1c
c001a647:	c3                   	ret    

c001a648 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a648:	57                   	push   edi
c001a649:	83 ec 58             	sub    esp,0x58
c001a64c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a654:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a658:	b9 0f 00 00 00       	mov    ecx,0xf
c001a65d:	b8 00 00 00 00       	mov    eax,0x0
c001a662:	fc                   	cld    
c001a663:	89 d7                	mov    edi,edx
c001a665:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a667:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a66b:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a672:	83 f8 ff             	cmp    eax,0xffffffff
c001a675:	75 35                	jne    c001a6ac <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a677:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a67b:	88 c2                	mov    dl,al
c001a67d:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a682:	01 d0                	add    eax,edx
c001a684:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a688:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a68e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a692:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a699:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a69e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a6a2:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a6a9:	eb 19                	jmp    c001a6c4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a6ab:	90                   	nop
c001a6ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6b0:	88 c2                	mov    dl,al
c001a6b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6b6:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a6bd:	01 d0                	add    eax,edx
c001a6bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6c3:	90                   	nop
c001a6c4:	83 ec 08             	sub    esp,0x8
c001a6c7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a6cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6cf:	50                   	push   eax
c001a6d0:	e8 ab 61 fe ff       	call   c0000880 <strcat>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	83 ec 0c             	sub    esp,0xc
c001a6db:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6df:	50                   	push   eax
c001a6e0:	e8 3b c7 fe ff       	call   c0006e20 <f_setlabel>
c001a6e5:	83 c4 10             	add    esp,0x10
c001a6e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6ec:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a6f1:	75 09                	jne    c001a6fc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a6f3:	b8 00 00 00 00       	mov    eax,0x0
c001a6f8:	eb 0a                	jmp    c001a704 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a6fa:	66 90                	xchg   ax,ax
c001a6fc:	b8 01 00 00 00       	mov    eax,0x1
c001a701:	8d 76 00             	lea    esi,[esi+0x0]
c001a704:	83 c4 58             	add    esp,0x58
c001a707:	5f                   	pop    edi
c001a708:	c3                   	ret    
c001a709:	90                   	nop
c001a70a:	66 90                	xchg   ax,ax

c001a70c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a70c:	83 ec 2c             	sub    esp,0x2c
c001a70f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a717:	83 ec 08             	sub    esp,0x8
c001a71a:	68 e4 4a 02 c0       	push   0xc0024ae4
c001a71f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a723:	e8 a4 60 fe ff       	call   c00007cc <strcmp>
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	85 c0                	test   eax,eax
c001a72d:	0f 94 c0             	sete   al
c001a730:	84 c0                	test   al,al
c001a732:	74 10                	je     c001a744 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a734:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a73c:	e9 b3 00 00 00       	jmp    c001a7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a741:	8d 76 00             	lea    esi,[esi+0x0]
c001a744:	83 ec 08             	sub    esp,0x8
c001a747:	68 d6 4a 02 c0       	push   0xc0024ad6
c001a74c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a750:	e8 77 60 fe ff       	call   c00007cc <strcmp>
c001a755:	83 c4 10             	add    esp,0x10
c001a758:	85 c0                	test   eax,eax
c001a75a:	0f 94 c0             	sete   al
c001a75d:	84 c0                	test   al,al
c001a75f:	74 0f                	je     c001a770 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a761:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a769:	e9 86 00 00 00       	jmp    c001a7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a76e:	66 90                	xchg   ax,ax
c001a770:	83 ec 08             	sub    esp,0x8
c001a773:	68 dc 4a 02 c0       	push   0xc0024adc
c001a778:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a77c:	e8 4b 60 fe ff       	call   c00007cc <strcmp>
c001a781:	83 c4 10             	add    esp,0x10
c001a784:	85 c0                	test   eax,eax
c001a786:	0f 94 c0             	sete   al
c001a789:	84 c0                	test   al,al
c001a78b:	74 0b                	je     c001a798 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a78d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a795:	eb 5d                	jmp    c001a7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a797:	90                   	nop
c001a798:	83 ec 08             	sub    esp,0x8
c001a79b:	68 4c 20 02 c0       	push   0xc002204c
c001a7a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7a4:	e8 23 60 fe ff       	call   c00007cc <strcmp>
c001a7a9:	83 c4 10             	add    esp,0x10
c001a7ac:	85 c0                	test   eax,eax
c001a7ae:	0f 94 c0             	sete   al
c001a7b1:	84 c0                	test   al,al
c001a7b3:	74 0b                	je     c001a7c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a7b5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a7bd:	eb 35                	jmp    c001a7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7bf:	90                   	nop
c001a7c0:	83 ec 08             	sub    esp,0x8
c001a7c3:	68 e2 4a 02 c0       	push   0xc0024ae2
c001a7c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7cc:	e8 fb 5f fe ff       	call   c00007cc <strcmp>
c001a7d1:	83 c4 10             	add    esp,0x10
c001a7d4:	85 c0                	test   eax,eax
c001a7d6:	0f 94 c0             	sete   al
c001a7d9:	84 c0                	test   al,al
c001a7db:	74 0b                	je     c001a7e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a7dd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a7e5:	eb 0d                	jmp    c001a7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7e7:	90                   	nop
c001a7e8:	b8 08 00 00 00       	mov    eax,0x8
c001a7ed:	e9 ea 00 00 00       	jmp    c001a8dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7f2:	66 90                	xchg   ax,ax
c001a7f4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a7fb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a800:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a804:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a80b:	83 f8 ff             	cmp    eax,0xffffffff
c001a80e:	75 34                	jne    c001a844 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a810:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a814:	88 c2                	mov    dl,al
c001a816:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a81b:	01 d0                	add    eax,edx
c001a81d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a821:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a827:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a82b:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a832:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a837:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a83b:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a842:	eb 18                	jmp    c001a85c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a844:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a848:	88 c2                	mov    dl,al
c001a84a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a84e:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a855:	01 d0                	add    eax,edx
c001a857:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a85b:	90                   	nop
c001a85c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a860:	88 04 24             	mov    BYTE PTR [esp],al
c001a863:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a86b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a873:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a878:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a880:	83 ec 0c             	sub    esp,0xc
c001a883:	68 00 20 00 00       	push   0x2000
c001a888:	e8 36 f1 fe ff       	call   c00099c3 <malloc>
c001a88d:	83 c4 10             	add    esp,0x10
c001a890:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a894:	68 00 20 00 00       	push   0x2000
c001a899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a89d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a8a1:	50                   	push   eax
c001a8a2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a8a6:	50                   	push   eax
c001a8a7:	e8 f5 cb fe ff       	call   c00074a1 <f_mkfs>
c001a8ac:	83 c4 10             	add    esp,0x10
c001a8af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8b8:	75 0a                	jne    c001a8c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a8ba:	b8 00 00 00 00       	mov    eax,0x0
c001a8bf:	eb 1b                	jmp    c001a8dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a8c9:	75 09                	jne    c001a8d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a8cb:	b8 09 00 00 00       	mov    eax,0x9
c001a8d0:	eb 0a                	jmp    c001a8dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8d2:	66 90                	xchg   ax,ax
c001a8d4:	b8 01 00 00 00       	mov    eax,0x1
c001a8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8dc:	83 c4 2c             	add    esp,0x2c
c001a8df:	c3                   	ret    

c001a8e0 <FAT::tryMount(LogicalDisk*, int)>:
c001a8e0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a8e6:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a8eb:	83 f8 14             	cmp    eax,0x14
c001a8ee:	75 18                	jne    c001a908 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	68 e8 4a 02 c0       	push   0xc0024ae8
c001a8f8:	e8 30 9a ff ff       	call   c001432d <Krnl::panic(char const*)>
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	b0 00                	mov    al,0x0
c001a902:	e9 e9 01 00 00       	jmp    c001aaf0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a907:	90                   	nop
c001a908:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a90f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a915:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a91b:	3d 00 02 00 00       	cmp    eax,0x200
c001a920:	74 0a                	je     c001a92c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a922:	b0 00                	mov    al,0x0
c001a924:	e9 c7 01 00 00       	jmp    c001aaf0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a929:	8d 76 00             	lea    esi,[esi+0x0]
c001a92c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a934:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a93b:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a942:	83 f8 ff             	cmp    eax,0xffffffff
c001a945:	74 09                	je     c001a950 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a947:	b0 01                	mov    al,0x1
c001a949:	e9 a2 01 00 00       	jmp    c001aaf0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a94e:	66 90                	xchg   ax,ax
c001a950:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a95a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a962:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a969:	88 c2                	mov    dl,al
c001a96b:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a970:	01 d0                	add    eax,edx
c001a972:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a979:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a97f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a986:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a98d:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a992:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a999:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a9a0:	83 ec 0c             	sub    esp,0xc
c001a9a3:	68 54 02 00 00       	push   0x254
c001a9a8:	e8 16 f0 fe ff       	call   c00099c3 <malloc>
c001a9ad:	83 c4 10             	add    esp,0x10
c001a9b0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a9b7:	83 ec 04             	sub    esp,0x4
c001a9ba:	6a 00                	push   0x0
c001a9bc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a9c3:	50                   	push   eax
c001a9c4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9cb:	e8 59 a4 fe ff       	call   c0004e29 <f_mount>
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9da:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a9e2:	74 1c                	je     c001aa00 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a9e4:	83 ec 0c             	sub    esp,0xc
c001a9e7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9ee:	e8 f0 ef fe ff       	call   c00099e3 <rfree>
c001a9f3:	83 c4 10             	add    esp,0x10
c001a9f6:	b0 00                	mov    al,0x0
c001a9f8:	e9 f3 00 00 00       	jmp    c001aaf0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001aa00:	83 ec 04             	sub    esp,0x4
c001aa03:	68 00 01 00 00       	push   0x100
c001aa08:	6a 00                	push   0x0
c001aa0a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa11:	50                   	push   eax
c001aa12:	e8 6d 5c fe ff       	call   c0000684 <memset>
c001aa17:	83 c4 10             	add    esp,0x10
c001aa1a:	83 ec 08             	sub    esp,0x8
c001aa1d:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa24:	50                   	push   eax
c001aa25:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa2c:	50                   	push   eax
c001aa2d:	e8 4e 5e fe ff       	call   c0000880 <strcat>
c001aa32:	83 c4 10             	add    esp,0x10
c001aa35:	83 ec 08             	sub    esp,0x8
c001aa38:	68 f6 4a 02 c0       	push   0xc0024af6
c001aa3d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa44:	50                   	push   eax
c001aa45:	e8 36 5e fe ff       	call   c0000880 <strcat>
c001aa4a:	83 c4 10             	add    esp,0x10
c001aa4d:	83 ec 04             	sub    esp,0x4
c001aa50:	6a 01                	push   0x1
c001aa52:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa59:	50                   	push   eax
c001aa5a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa5e:	50                   	push   eax
c001aa5f:	e8 27 a4 fe ff       	call   c0004e8b <f_open>
c001aa64:	83 c4 10             	add    esp,0x10
c001aa67:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa6e:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa75:	85 c0                	test   eax,eax
c001aa77:	74 0b                	je     c001aa84 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa79:	78 31                	js     c001aaac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa7b:	83 e8 04             	sub    eax,0x4
c001aa7e:	83 f8 01             	cmp    eax,0x1
c001aa81:	77 29                	ja     c001aaac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa83:	90                   	nop
c001aa84:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aa8c:	83 ec 0c             	sub    esp,0xc
c001aa8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa93:	50                   	push   eax
c001aa94:	e8 44 af fe ff       	call   c00059dd <f_close>
c001aa99:	83 c4 10             	add    esp,0x10
c001aa9c:	90                   	nop
c001aa9d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aaa5:	74 41                	je     c001aae8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aaa7:	eb 33                	jmp    c001aadc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aaa9:	8d 76 00             	lea    esi,[esi+0x0]
c001aaac:	83 ec 0c             	sub    esp,0xc
c001aaaf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aab6:	e8 28 ef fe ff       	call   c00099e3 <rfree>
c001aabb:	83 c4 10             	add    esp,0x10
c001aabe:	83 ec 04             	sub    esp,0x4
c001aac1:	6a 00                	push   0x0
c001aac3:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aaca:	50                   	push   eax
c001aacb:	6a 00                	push   0x0
c001aacd:	e8 57 a3 fe ff       	call   c0004e29 <f_mount>
c001aad2:	83 c4 10             	add    esp,0x10
c001aad5:	b0 00                	mov    al,0x0
c001aad7:	eb 17                	jmp    c001aaf0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aad9:	8d 76 00             	lea    esi,[esi+0x0]
c001aadc:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001aae1:	40                   	inc    eax
c001aae2:	a3 c0 79 02 c0       	mov    ds:0xc00279c0,eax
c001aae7:	90                   	nop
c001aae8:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aaef:	90                   	nop
c001aaf0:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aaf6:	c3                   	ret    
c001aaf7:	90                   	nop

c001aaf8 <FAT::allocateSwapfile(char const*, int)>:
c001aaf8:	55                   	push   ebp
c001aaf9:	57                   	push   edi
c001aafa:	56                   	push   esi
c001aafb:	53                   	push   ebx
c001aafc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab02:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab0d:	83 ec 0c             	sub    esp,0xc
c001ab10:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab17:	e8 a7 ee fe ff       	call   c00099c3 <malloc>
c001ab1c:	83 c4 10             	add    esp,0x10
c001ab1f:	89 c7                	mov    edi,eax
c001ab21:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001ab26:	83 ec 04             	sub    esp,0x4
c001ab29:	50                   	push   eax
c001ab2a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab31:	57                   	push   edi
c001ab32:	e8 9f 24 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab41:	83 ec 04             	sub    esp,0x4
c001ab44:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab48:	50                   	push   eax
c001ab49:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab4d:	50                   	push   eax
c001ab4e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab55:	e8 8c 27 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab64:	c1 e0 14             	shl    eax,0x14
c001ab67:	89 c7                	mov    edi,eax
c001ab69:	89 c5                	mov    ebp,eax
c001ab6b:	c1 fd 1f             	sar    ebp,0x1f
c001ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab76:	89 f9                	mov    ecx,edi
c001ab78:	31 c1                	xor    ecx,eax
c001ab7a:	89 cb                	mov    ebx,ecx
c001ab7c:	89 e9                	mov    ecx,ebp
c001ab7e:	31 d1                	xor    ecx,edx
c001ab80:	89 ce                	mov    esi,ecx
c001ab82:	89 f0                	mov    eax,esi
c001ab84:	09 d8                	or     eax,ebx
c001ab86:	0f 84 98 00 00 00    	je     c001ac24 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ab8c:	83 ec 0c             	sub    esp,0xc
c001ab8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab96:	e8 17 26 ff ff       	call   c000d1b2 <File::unlink()>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	83 ec 08             	sub    esp,0x8
c001aba1:	6a 12                	push   0x12
c001aba3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abaa:	e8 8b 24 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c001abaf:	83 c4 10             	add    esp,0x10
c001abb2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abb9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001abbf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001abc6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abcd:	c1 e0 14             	shl    eax,0x14
c001abd0:	99                   	cdq    
c001abd1:	6a 01                	push   0x1
c001abd3:	52                   	push   edx
c001abd4:	50                   	push   eax
c001abd5:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001abdc:	e8 ac c4 fe ff       	call   c000708d <f_expand>
c001abe1:	83 c4 10             	add    esp,0x10
c001abe4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001abed:	83 c0 10             	add    eax,0x10
c001abf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001abf2:	83 ec 0c             	sub    esp,0xc
c001abf5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abf9:	52                   	push   edx
c001abfa:	8d 54 24 30          	lea    edx,[esp+0x30]
c001abfe:	52                   	push   edx
c001abff:	6a 00                	push   0x0
c001ac01:	68 00 04 00 00       	push   0x400
c001ac06:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac0d:	ff d0                	call   eax
c001ac0f:	83 c4 20             	add    esp,0x20
c001ac12:	83 ec 0c             	sub    esp,0xc
c001ac15:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac1c:	e8 77 24 ff ff       	call   c000d098 <File::close()>
c001ac21:	83 c4 10             	add    esp,0x10
c001ac24:	83 ec 08             	sub    esp,0x8
c001ac27:	6a 01                	push   0x1
c001ac29:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac30:	e8 05 24 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac41:	83 c0 0c             	add    eax,0xc
c001ac44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac46:	83 ec 0c             	sub    esp,0xc
c001ac49:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac4d:	52                   	push   edx
c001ac4e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac52:	52                   	push   edx
c001ac53:	6a 00                	push   0x0
c001ac55:	6a 04                	push   0x4
c001ac57:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac5e:	ff d0                	call   eax
c001ac60:	83 c4 20             	add    esp,0x20
c001ac63:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac6a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac70:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac77:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac7e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ac84:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ac8b:	83 ec 0c             	sub    esp,0xc
c001ac8e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac95:	e8 fe 23 ff ff       	call   c000d098 <File::close()>
c001ac9a:	83 c4 10             	add    esp,0x10
c001ac9d:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001aca4:	ba 00 00 00 00       	mov    edx,0x0
c001aca9:	81 c4 3c 04 00 00    	add    esp,0x43c
c001acaf:	5b                   	pop    ebx
c001acb0:	5e                   	pop    esi
c001acb1:	5f                   	pop    edi
c001acb2:	5d                   	pop    ebp
c001acb3:	c3                   	ret    

c001acb4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001acb4:	57                   	push   edi
c001acb5:	56                   	push   esi
c001acb6:	53                   	push   ebx
c001acb7:	81 ec 50 02 00 00    	sub    esp,0x250
c001acbd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001acc5:	74 0d                	je     c001acd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001acc7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001accf:	75 0f                	jne    c001ace0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001acd1:	8d 76 00             	lea    esi,[esi+0x0]
c001acd4:	b8 04 00 00 00       	mov    eax,0x4
c001acd9:	e9 36 01 00 00       	jmp    c001ae14 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001acde:	66 90                	xchg   ax,ax
c001ace0:	83 ec 08             	sub    esp,0x8
c001ace3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001acea:	50                   	push   eax
c001aceb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001acf2:	e8 f0 b2 fe ff       	call   c0005fe7 <f_readdir>
c001acf7:	83 c4 10             	add    esp,0x10
c001acfa:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad01:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad08:	83 ec 0c             	sub    esp,0xc
c001ad0b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad12:	83 c0 1a             	add    eax,0x1a
c001ad15:	50                   	push   eax
c001ad16:	e8 85 59 fe ff       	call   c00006a0 <strlen>
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	ba 00 00 00 00       	mov    edx,0x0
c001ad23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad2b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad32:	0f b6 c0             	movzx  eax,al
c001ad35:	83 e0 10             	and    eax,0x10
c001ad38:	74 0a                	je     c001ad44 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad3a:	b8 02 00 00 00       	mov    eax,0x2
c001ad3f:	eb 0b                	jmp    c001ad4c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad41:	8d 76 00             	lea    esi,[esi+0x0]
c001ad44:	b8 01 00 00 00       	mov    eax,0x1
c001ad49:	8d 76 00             	lea    esi,[esi+0x0]
c001ad4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad50:	83 ec 08             	sub    esp,0x8
c001ad53:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad5a:	83 c0 1a             	add    eax,0x1a
c001ad5d:	50                   	push   eax
c001ad5e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad62:	83 c0 10             	add    eax,0x10
c001ad65:	50                   	push   eax
c001ad66:	e8 d5 59 fe ff       	call   c0000740 <strcpy>
c001ad6b:	83 c4 10             	add    esp,0x10
c001ad6e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad75:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad7c:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad80:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ad87:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ad8e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ad95:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ad9c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ada3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001adaa:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001adb1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001adb8:	89 c6                	mov    esi,eax
c001adba:	89 d7                	mov    edi,edx
c001adbc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adbe:	89 c8                	mov    eax,ecx
c001adc0:	89 fa                	mov    edx,edi
c001adc2:	89 f3                	mov    ebx,esi
c001adc4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001adcb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001add2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001add9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ade0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ade6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001aded:	84 c0                	test   al,al
c001adef:	75 07                	jne    c001adf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001adf1:	b8 07 00 00 00       	mov    eax,0x7
c001adf6:	eb 1c                	jmp    c001ae14 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001adf8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001adff:	85 c0                	test   eax,eax
c001ae01:	75 09                	jne    c001ae0c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ae03:	b8 00 00 00 00       	mov    eax,0x0
c001ae08:	eb 0a                	jmp    c001ae14 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae0a:	66 90                	xchg   ax,ax
c001ae0c:	b8 01 00 00 00       	mov    eax,0x1
c001ae11:	8d 76 00             	lea    esi,[esi+0x0]
c001ae14:	81 c4 50 02 00 00    	add    esp,0x250
c001ae1a:	5b                   	pop    ebx
c001ae1b:	5e                   	pop    esi
c001ae1c:	5f                   	pop    edi
c001ae1d:	c3                   	ret    
c001ae1e:	66 90                	xchg   ax,ax

c001ae20 <FAT::read(void*, unsigned long, void*, int*)>:
c001ae20:	83 ec 1c             	sub    esp,0x1c
c001ae23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae28:	74 0a                	je     c001ae34 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae2a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae2f:	75 0b                	jne    c001ae3c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae31:	8d 76 00             	lea    esi,[esi+0x0]
c001ae34:	b8 04 00 00 00       	mov    eax,0x4
c001ae39:	eb 41                	jmp    c001ae7c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae3b:	90                   	nop
c001ae3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae40:	50                   	push   eax
c001ae41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae4d:	e8 75 a4 fe ff       	call   c00052c7 <f_read>
c001ae52:	83 c4 10             	add    esp,0x10
c001ae55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae5d:	89 c2                	mov    edx,eax
c001ae5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae63:	89 10                	mov    DWORD PTR [eax],edx
c001ae65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae69:	85 c0                	test   eax,eax
c001ae6b:	75 07                	jne    c001ae74 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae6d:	b8 00 00 00 00       	mov    eax,0x0
c001ae72:	eb 08                	jmp    c001ae7c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae74:	b8 01 00 00 00       	mov    eax,0x1
c001ae79:	8d 76 00             	lea    esi,[esi+0x0]
c001ae7c:	83 c4 1c             	add    esp,0x1c
c001ae7f:	c3                   	ret    

c001ae80 <FAT::write(void*, unsigned long, void*, int*)>:
c001ae80:	83 ec 1c             	sub    esp,0x1c
c001ae83:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae88:	74 0a                	je     c001ae94 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ae8a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae8f:	75 0b                	jne    c001ae9c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ae91:	8d 76 00             	lea    esi,[esi+0x0]
c001ae94:	b8 04 00 00 00       	mov    eax,0x4
c001ae99:	eb 41                	jmp    c001aedc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae9b:	90                   	nop
c001ae9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aea0:	50                   	push   eax
c001aea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aea5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aea9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aead:	e8 95 a6 fe ff       	call   c0005547 <f_write>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aebd:	89 c2                	mov    edx,eax
c001aebf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aec3:	89 10                	mov    DWORD PTR [eax],edx
c001aec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aec9:	85 c0                	test   eax,eax
c001aecb:	75 07                	jne    c001aed4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001aecd:	b8 00 00 00 00       	mov    eax,0x0
c001aed2:	eb 08                	jmp    c001aedc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aed4:	b8 01 00 00 00       	mov    eax,0x1
c001aed9:	8d 76 00             	lea    esi,[esi+0x0]
c001aedc:	83 c4 1c             	add    esp,0x1c
c001aedf:	c3                   	ret    

c001aee0 <FAT::close(void*)>:
c001aee0:	83 ec 1c             	sub    esp,0x1c
c001aee3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aee8:	75 0a                	jne    c001aef4 <FAT::close(void*)+0x14>
c001aeea:	b8 04 00 00 00       	mov    eax,0x4
c001aeef:	eb 3f                	jmp    c001af30 <FAT::close(void*)+0x50>
c001aef1:	8d 76 00             	lea    esi,[esi+0x0]
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aefb:	e8 dd aa fe ff       	call   c00059dd <f_close>
c001af00:	83 c4 10             	add    esp,0x10
c001af03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af07:	83 ec 0c             	sub    esp,0xc
c001af0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af0e:	e8 c0 ea fe ff       	call   c00099d3 <free>
c001af13:	83 c4 10             	add    esp,0x10
c001af16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af1a:	85 c0                	test   eax,eax
c001af1c:	75 0a                	jne    c001af28 <FAT::close(void*)+0x48>
c001af1e:	b8 00 00 00 00       	mov    eax,0x0
c001af23:	eb 0b                	jmp    c001af30 <FAT::close(void*)+0x50>
c001af25:	8d 76 00             	lea    esi,[esi+0x0]
c001af28:	b8 01 00 00 00       	mov    eax,0x1
c001af2d:	8d 76 00             	lea    esi,[esi+0x0]
c001af30:	83 c4 1c             	add    esp,0x1c
c001af33:	c3                   	ret    

c001af34 <FAT::closeDir(void*)>:
c001af34:	83 ec 1c             	sub    esp,0x1c
c001af37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af3c:	75 0a                	jne    c001af48 <FAT::closeDir(void*)+0x14>
c001af3e:	b8 04 00 00 00       	mov    eax,0x4
c001af43:	eb 3f                	jmp    c001af84 <FAT::closeDir(void*)+0x50>
c001af45:	8d 76 00             	lea    esi,[esi+0x0]
c001af48:	83 ec 0c             	sub    esp,0xc
c001af4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af4f:	e8 71 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af5b:	83 ec 0c             	sub    esp,0xc
c001af5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af62:	e8 6c ea fe ff       	call   c00099d3 <free>
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af6e:	85 c0                	test   eax,eax
c001af70:	75 0a                	jne    c001af7c <FAT::closeDir(void*)+0x48>
c001af72:	b8 00 00 00 00       	mov    eax,0x0
c001af77:	eb 0b                	jmp    c001af84 <FAT::closeDir(void*)+0x50>
c001af79:	8d 76 00             	lea    esi,[esi+0x0]
c001af7c:	b8 01 00 00 00       	mov    eax,0x1
c001af81:	8d 76 00             	lea    esi,[esi+0x0]
c001af84:	83 c4 1c             	add    esp,0x1c
c001af87:	c3                   	ret    

c001af88 <FAT::seek(void*, unsigned long long)>:
c001af88:	83 ec 2c             	sub    esp,0x2c
c001af8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001afa0:	75 0a                	jne    c001afac <FAT::seek(void*, unsigned long long)+0x24>
c001afa2:	b8 04 00 00 00       	mov    eax,0x4
c001afa7:	eb 37                	jmp    c001afe0 <FAT::seek(void*, unsigned long long)+0x58>
c001afa9:	8d 76 00             	lea    esi,[esi+0x0]
c001afac:	83 ec 04             	sub    esp,0x4
c001afaf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afb7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001afbb:	e8 4c aa fe ff       	call   c0005a0c <f_lseek>
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afcb:	85 c0                	test   eax,eax
c001afcd:	75 09                	jne    c001afd8 <FAT::seek(void*, unsigned long long)+0x50>
c001afcf:	b8 00 00 00 00       	mov    eax,0x0
c001afd4:	eb 0a                	jmp    c001afe0 <FAT::seek(void*, unsigned long long)+0x58>
c001afd6:	66 90                	xchg   ax,ax
c001afd8:	b8 01 00 00 00       	mov    eax,0x1
c001afdd:	8d 76 00             	lea    esi,[esi+0x0]
c001afe0:	83 c4 2c             	add    esp,0x2c
c001afe3:	c3                   	ret    

c001afe4 <fatWrapperReadDisk>:
c001afe4:	83 ec 1c             	sub    esp,0x1c
c001afe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afeb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aff3:	89 04 24             	mov    DWORD PTR [esp],eax
c001aff6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001affa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001affe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b003:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b00a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b00e:	83 ec 0c             	sub    esp,0xc
c001b011:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b015:	52                   	push   edx
c001b016:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b01a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b01e:	50                   	push   eax
c001b01f:	e8 64 51 ff ff       	call   c0010188 <LogicalDisk::read(unsigned long long, int, void*)>
c001b024:	83 c4 20             	add    esp,0x20
c001b027:	83 c4 1c             	add    esp,0x1c
c001b02a:	c3                   	ret    
c001b02b:	90                   	nop

c001b02c <fatWrapperWriteDisk>:
c001b02c:	83 ec 1c             	sub    esp,0x1c
c001b02f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b033:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b03e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b042:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b046:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b04b:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b052:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b056:	83 ec 0c             	sub    esp,0xc
c001b059:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b05d:	52                   	push   edx
c001b05e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b066:	50                   	push   eax
c001b067:	e8 88 51 ff ff       	call   c00101f4 <LogicalDisk::write(unsigned long long, int, void*)>
c001b06c:	83 c4 20             	add    esp,0x20
c001b06f:	83 c4 1c             	add    esp,0x1c
c001b072:	c3                   	ret    
c001b073:	90                   	nop

c001b074 <fatWrapperIoctl>:
c001b074:	53                   	push   ebx
c001b075:	83 ec 28             	sub    esp,0x28
c001b078:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b07c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b080:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b084:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b088:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b08d:	75 31                	jne    c001b0c0 <fatWrapperIoctl+0x4c>
c001b08f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b093:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b097:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b09c:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b0a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0a9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0b3:	66 89 02             	mov    WORD PTR [edx],ax
c001b0b6:	b8 00 00 00 00       	mov    eax,0x0
c001b0bb:	e9 bc 00 00 00       	jmp    c001b17c <fatWrapperIoctl+0x108>
c001b0c0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b0c5:	75 6d                	jne    c001b134 <fatWrapperIoctl+0xc0>
c001b0c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0cf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0d4:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b0db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0e1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b0e7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b0ed:	89 c8                	mov    eax,ecx
c001b0ef:	89 da                	mov    edx,ebx
c001b0f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b0f5:	c1 e0 0a             	shl    eax,0xa
c001b0f8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b0fd:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c001b104:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b10a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b110:	89 cb                	mov    ebx,ecx
c001b112:	c1 fb 1f             	sar    ebx,0x1f
c001b115:	53                   	push   ebx
c001b116:	51                   	push   ecx
c001b117:	52                   	push   edx
c001b118:	50                   	push   eax
c001b119:	e8 16 5e 00 00       	call   c0020f34 <__udivdi3>
c001b11e:	83 c4 10             	add    esp,0x10
c001b121:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b125:	89 01                	mov    DWORD PTR [ecx],eax
c001b127:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b12a:	b8 00 00 00 00       	mov    eax,0x0
c001b12f:	eb 4b                	jmp    c001b17c <fatWrapperIoctl+0x108>
c001b131:	8d 76 00             	lea    esi,[esi+0x0]
c001b134:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b139:	75 09                	jne    c001b144 <fatWrapperIoctl+0xd0>
c001b13b:	b8 00 00 00 00       	mov    eax,0x0
c001b140:	eb 3a                	jmp    c001b17c <fatWrapperIoctl+0x108>
c001b142:	66 90                	xchg   ax,ax
c001b144:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b149:	75 19                	jne    c001b164 <fatWrapperIoctl+0xf0>
c001b14b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b14f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b157:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b15d:	b8 00 00 00 00       	mov    eax,0x0
c001b162:	eb 18                	jmp    c001b17c <fatWrapperIoctl+0x108>
c001b164:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b169:	75 09                	jne    c001b174 <fatWrapperIoctl+0x100>
c001b16b:	b8 00 00 00 00       	mov    eax,0x0
c001b170:	eb 0a                	jmp    c001b17c <fatWrapperIoctl+0x108>
c001b172:	66 90                	xchg   ax,ax
c001b174:	b8 04 00 00 00       	mov    eax,0x4
c001b179:	8d 76 00             	lea    esi,[esi+0x0]
c001b17c:	83 c4 28             	add    esp,0x28
c001b17f:	5b                   	pop    ebx
c001b180:	c3                   	ret    
c001b181:	90                   	nop
c001b182:	66 90                	xchg   ax,ax

c001b184 <FAT::FAT()>:
c001b184:	83 ec 1c             	sub    esp,0x1c
c001b187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b18b:	83 ec 0c             	sub    esp,0xc
c001b18e:	50                   	push   eax
c001b18f:	e8 ee 1b ff ff       	call   c000cd82 <Filesystem::Filesystem()>
c001b194:	83 c4 10             	add    esp,0x10
c001b197:	ba 0c 4b 02 c0       	mov    edx,0xc0024b0c
c001b19c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1a0:	89 10                	mov    DWORD PTR [eax],edx
c001b1a2:	c7 05 c0 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279c0,0x0
c001b1ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1b4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b1b9:	7f 15                	jg     c001b1d0 <FAT::FAT()+0x4c>
c001b1bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1bf:	c7 04 85 e0 79 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8620],0xffffffff
c001b1ca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1ce:	eb e4                	jmp    c001b1b4 <FAT::FAT()+0x30>
c001b1d0:	90                   	nop
c001b1d1:	83 c4 1c             	add    esp,0x1c
c001b1d4:	c3                   	ret    
c001b1d5:	90                   	nop
c001b1d6:	66 90                	xchg   ax,ax

c001b1d8 <FAT::fixFilepath(char*)>:
c001b1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1dc:	8a 00                	mov    al,BYTE PTR [eax]
c001b1de:	3c 40                	cmp    al,0x40
c001b1e0:	7e 2e                	jle    c001b210 <FAT::fixFilepath(char*)+0x38>
c001b1e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1e6:	8a 00                	mov    al,BYTE PTR [eax]
c001b1e8:	83 e8 41             	sub    eax,0x41
c001b1eb:	88 c2                	mov    dl,al
c001b1ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f1:	88 10                	mov    BYTE PTR [eax],dl
c001b1f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f7:	8a 00                	mov    al,BYTE PTR [eax]
c001b1f9:	0f be c0             	movsx  eax,al
c001b1fc:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001b203:	83 c0 30             	add    eax,0x30
c001b206:	88 c2                	mov    dl,al
c001b208:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b20c:	88 10                	mov    BYTE PTR [eax],dl
c001b20e:	66 90                	xchg   ax,ax
c001b210:	90                   	nop
c001b211:	c3                   	ret    
c001b212:	66 90                	xchg   ax,ax

c001b214 <FAT::open(char const*, void**, FileOpenMode)>:
c001b214:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b21a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b222:	74 0c                	je     c001b230 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b224:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b22c:	75 0e                	jne    c001b23c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b22e:	66 90                	xchg   ax,ax
c001b230:	b8 04 00 00 00       	mov    eax,0x4
c001b235:	e9 06 01 00 00       	jmp    c001b340 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b23a:	66 90                	xchg   ax,ax
c001b23c:	83 ec 08             	sub    esp,0x8
c001b23f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b246:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b24a:	50                   	push   eax
c001b24b:	e8 f0 54 fe ff       	call   c0000740 <strcpy>
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	83 ec 08             	sub    esp,0x8
c001b256:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b25a:	50                   	push   eax
c001b25b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b262:	e8 71 ff ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b267:	83 c4 10             	add    esp,0x10
c001b26a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b272:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b279:	83 e0 01             	and    eax,0x1
c001b27c:	74 0a                	je     c001b288 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b27e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b286:	66 90                	xchg   ax,ax
c001b288:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b28f:	83 e0 04             	and    eax,0x4
c001b292:	74 10                	je     c001b2a4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b294:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b29c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2ab:	83 e0 02             	and    eax,0x2
c001b2ae:	74 08                	je     c001b2b8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b2b0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2bf:	83 e0 08             	and    eax,0x8
c001b2c2:	74 08                	je     c001b2cc <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b2c4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b2cc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2d3:	83 e0 10             	and    eax,0x10
c001b2d6:	74 08                	je     c001b2e0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b2d8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b2e0:	83 ec 0c             	sub    esp,0xc
c001b2e3:	68 50 02 00 00       	push   0x250
c001b2e8:	e8 d6 e6 fe ff       	call   c00099c3 <malloc>
c001b2ed:	83 c4 10             	add    esp,0x10
c001b2f0:	89 c2                	mov    edx,eax
c001b2f2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2f9:	89 10                	mov    DWORD PTR [eax],edx
c001b2fb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b303:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b30a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b30c:	83 ec 04             	sub    esp,0x4
c001b30f:	52                   	push   edx
c001b310:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b314:	52                   	push   edx
c001b315:	50                   	push   eax
c001b316:	e8 70 9b fe ff       	call   c0004e8b <f_open>
c001b31b:	83 c4 10             	add    esp,0x10
c001b31e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b325:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b32d:	74 09                	je     c001b338 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b32f:	b8 01 00 00 00       	mov    eax,0x1
c001b334:	eb 0a                	jmp    c001b340 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b336:	66 90                	xchg   ax,ax
c001b338:	b8 00 00 00 00       	mov    eax,0x0
c001b33d:	8d 76 00             	lea    esi,[esi+0x0]
c001b340:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b346:	c3                   	ret    
c001b347:	90                   	nop

c001b348 <FAT::openDir(char const*, void**)>:
c001b348:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b34e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b356:	74 0c                	je     c001b364 <FAT::openDir(char const*, void**)+0x1c>
c001b358:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b360:	75 0e                	jne    c001b370 <FAT::openDir(char const*, void**)+0x28>
c001b362:	66 90                	xchg   ax,ax
c001b364:	b8 04 00 00 00       	mov    eax,0x4
c001b369:	e9 82 00 00 00       	jmp    c001b3f0 <FAT::openDir(char const*, void**)+0xa8>
c001b36e:	66 90                	xchg   ax,ax
c001b370:	83 ec 08             	sub    esp,0x8
c001b373:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b37a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b37e:	50                   	push   eax
c001b37f:	e8 bc 53 fe ff       	call   c0000740 <strcpy>
c001b384:	83 c4 10             	add    esp,0x10
c001b387:	83 ec 08             	sub    esp,0x8
c001b38a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b38e:	50                   	push   eax
c001b38f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b396:	e8 3d fe ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b39b:	83 c4 10             	add    esp,0x10
c001b39e:	83 ec 0c             	sub    esp,0xc
c001b3a1:	6a 4c                	push   0x4c
c001b3a3:	e8 1b e6 fe ff       	call   c00099c3 <malloc>
c001b3a8:	83 c4 10             	add    esp,0x10
c001b3ab:	89 c2                	mov    edx,eax
c001b3ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3b4:	89 10                	mov    DWORD PTR [eax],edx
c001b3b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3bf:	83 ec 08             	sub    esp,0x8
c001b3c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b3c6:	52                   	push   edx
c001b3c7:	50                   	push   eax
c001b3c8:	e8 f6 aa fe ff       	call   c0005ec3 <f_opendir>
c001b3cd:	83 c4 10             	add    esp,0x10
c001b3d0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3d7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b3df:	74 07                	je     c001b3e8 <FAT::openDir(char const*, void**)+0xa0>
c001b3e1:	b8 01 00 00 00       	mov    eax,0x1
c001b3e6:	eb 08                	jmp    c001b3f0 <FAT::openDir(char const*, void**)+0xa8>
c001b3e8:	b8 00 00 00 00       	mov    eax,0x0
c001b3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b3f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3f6:	c3                   	ret    
c001b3f7:	90                   	nop

c001b3f8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b3f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b3fe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b406:	75 0c                	jne    c001b414 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b408:	b8 04 00 00 00       	mov    eax,0x4
c001b40d:	e9 d2 00 00 00       	jmp    c001b4e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b412:	66 90                	xchg   ax,ax
c001b414:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b41c:	75 0a                	jne    c001b428 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b41e:	b8 04 00 00 00       	mov    eax,0x4
c001b423:	e9 bc 00 00 00       	jmp    c001b4e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b428:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b430:	75 0a                	jne    c001b43c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b432:	b8 04 00 00 00       	mov    eax,0x4
c001b437:	e9 a8 00 00 00       	jmp    c001b4e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b43c:	83 ec 08             	sub    esp,0x8
c001b43f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b446:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b44d:	50                   	push   eax
c001b44e:	e8 ed 52 fe ff       	call   c0000740 <strcpy>
c001b453:	83 c4 10             	add    esp,0x10
c001b456:	83 ec 08             	sub    esp,0x8
c001b459:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b460:	50                   	push   eax
c001b461:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b468:	e8 6b fd ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b46d:	83 c4 10             	add    esp,0x10
c001b470:	83 ec 08             	sub    esp,0x8
c001b473:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b477:	50                   	push   eax
c001b478:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b47f:	50                   	push   eax
c001b480:	e8 fd ab fe ff       	call   c0006082 <f_stat>
c001b485:	83 c4 10             	add    esp,0x10
c001b488:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b48f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b496:	85 c0                	test   eax,eax
c001b498:	74 0a                	je     c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b49a:	83 f8 04             	cmp    eax,0x4
c001b49d:	74 35                	je     c001b4d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b49f:	eb 3b                	jmp    c001b4dc <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4a8:	0f b6 c0             	movzx  eax,al
c001b4ab:	83 e0 10             	and    eax,0x10
c001b4ae:	0f 95 c2             	setne  dl
c001b4b1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b4b8:	88 10                	mov    BYTE PTR [eax],dl
c001b4ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b4bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b4c1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b4c8:	89 01                	mov    DWORD PTR [ecx],eax
c001b4ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4cd:	b8 00 00 00 00       	mov    eax,0x0
c001b4d2:	eb 10                	jmp    c001b4e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4d4:	b8 02 00 00 00       	mov    eax,0x2
c001b4d9:	eb 09                	jmp    c001b4e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4db:	90                   	nop
c001b4dc:	b8 01 00 00 00       	mov    eax,0x1
c001b4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4e4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4ea:	c3                   	ret    
c001b4eb:	90                   	nop

c001b4ec <FAT::unlink(char const*)>:
c001b4ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4fa:	75 08                	jne    c001b504 <FAT::unlink(char const*)+0x18>
c001b4fc:	b8 04 00 00 00       	mov    eax,0x4
c001b501:	eb 61                	jmp    c001b564 <FAT::unlink(char const*)+0x78>
c001b503:	90                   	nop
c001b504:	83 ec 08             	sub    esp,0x8
c001b507:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b50e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b512:	50                   	push   eax
c001b513:	e8 28 52 fe ff       	call   c0000740 <strcpy>
c001b518:	83 c4 10             	add    esp,0x10
c001b51b:	83 ec 08             	sub    esp,0x8
c001b51e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b522:	50                   	push   eax
c001b523:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b52a:	e8 a9 fc ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b52f:	83 c4 10             	add    esp,0x10
c001b532:	83 ec 0c             	sub    esp,0xc
c001b535:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b539:	50                   	push   eax
c001b53a:	e8 95 ae fe ff       	call   c00063d4 <f_unlink>
c001b53f:	83 c4 10             	add    esp,0x10
c001b542:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b549:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b550:	85 c0                	test   eax,eax
c001b552:	75 08                	jne    c001b55c <FAT::unlink(char const*)+0x70>
c001b554:	b8 00 00 00 00       	mov    eax,0x0
c001b559:	eb 09                	jmp    c001b564 <FAT::unlink(char const*)+0x78>
c001b55b:	90                   	nop
c001b55c:	b8 01 00 00 00       	mov    eax,0x1
c001b561:	8d 76 00             	lea    esi,[esi+0x0]
c001b564:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b56a:	c3                   	ret    
c001b56b:	90                   	nop

c001b56c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b56c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b572:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b579:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b580:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b584:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b588:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b590:	75 0a                	jne    c001b59c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b592:	b8 04 00 00 00       	mov    eax,0x4
c001b597:	e9 30 01 00 00       	jmp    c001b6cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b59c:	83 ec 08             	sub    esp,0x8
c001b59f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5a6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5aa:	50                   	push   eax
c001b5ab:	e8 90 51 fe ff       	call   c0000740 <strcpy>
c001b5b0:	83 c4 10             	add    esp,0x10
c001b5b3:	83 ec 08             	sub    esp,0x8
c001b5b6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b5ba:	50                   	push   eax
c001b5bb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5c2:	e8 11 fc ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b5c7:	83 c4 10             	add    esp,0x10
c001b5ca:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b5d2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b5da:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5df:	83 e0 01             	and    eax,0x1
c001b5e2:	74 08                	je     c001b5ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b5e4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b5ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5f1:	83 e0 02             	and    eax,0x2
c001b5f4:	74 0a                	je     c001b600 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b5f6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b5fe:	66 90                	xchg   ax,ax
c001b600:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b605:	83 e0 04             	and    eax,0x4
c001b608:	74 0a                	je     c001b614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b60a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b612:	66 90                	xchg   ax,ax
c001b614:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b619:	83 e0 08             	and    eax,0x8
c001b61c:	74 0a                	je     c001b628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b61e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b626:	66 90                	xchg   ax,ax
c001b628:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b62d:	83 e0 01             	and    eax,0x1
c001b630:	74 0a                	je     c001b63c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b632:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b63a:	66 90                	xchg   ax,ax
c001b63c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b641:	83 e0 02             	and    eax,0x2
c001b644:	74 0a                	je     c001b650 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b646:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b64e:	66 90                	xchg   ax,ax
c001b650:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b655:	83 e0 04             	and    eax,0x4
c001b658:	74 0a                	je     c001b664 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b65a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b662:	66 90                	xchg   ax,ax
c001b664:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b669:	83 e0 08             	and    eax,0x8
c001b66c:	74 0a                	je     c001b678 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b66e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b676:	66 90                	xchg   ax,ax
c001b678:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b67f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b686:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b68e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b696:	83 ec 04             	sub    esp,0x4
c001b699:	52                   	push   edx
c001b69a:	50                   	push   eax
c001b69b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b69f:	50                   	push   eax
c001b6a0:	e8 d1 b3 fe ff       	call   c0006a76 <f_chmod>
c001b6a5:	83 c4 10             	add    esp,0x10
c001b6a8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b6af:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b6b6:	85 c0                	test   eax,eax
c001b6b8:	75 0a                	jne    c001b6c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b6ba:	b8 00 00 00 00       	mov    eax,0x0
c001b6bf:	eb 0b                	jmp    c001b6cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6c4:	b8 01 00 00 00       	mov    eax,0x1
c001b6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6cc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6d2:	c3                   	ret    
c001b6d3:	90                   	nop

c001b6d4 <FAT::rename(char const*, char const*)>:
c001b6d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6da:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6e2:	74 0c                	je     c001b6f0 <FAT::rename(char const*, char const*)+0x1c>
c001b6e4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6ec:	75 0e                	jne    c001b6fc <FAT::rename(char const*, char const*)+0x28>
c001b6ee:	66 90                	xchg   ax,ax
c001b6f0:	b8 04 00 00 00       	mov    eax,0x4
c001b6f5:	e9 9e 00 00 00       	jmp    c001b798 <FAT::rename(char const*, char const*)+0xc4>
c001b6fa:	66 90                	xchg   ax,ax
c001b6fc:	83 ec 08             	sub    esp,0x8
c001b6ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b706:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b70d:	50                   	push   eax
c001b70e:	e8 2d 50 fe ff       	call   c0000740 <strcpy>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	83 ec 08             	sub    esp,0x8
c001b719:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b720:	50                   	push   eax
c001b721:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b728:	e8 ab fa ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b72d:	83 c4 10             	add    esp,0x10
c001b730:	83 ec 08             	sub    esp,0x8
c001b733:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b73a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b73e:	50                   	push   eax
c001b73f:	e8 fc 4f fe ff       	call   c0000740 <strcpy>
c001b744:	83 c4 10             	add    esp,0x10
c001b747:	83 ec 08             	sub    esp,0x8
c001b74a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b74e:	50                   	push   eax
c001b74f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b756:	e8 7d fa ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	83 ec 08             	sub    esp,0x8
c001b761:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b765:	50                   	push   eax
c001b766:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b76d:	50                   	push   eax
c001b76e:	e8 10 b0 fe ff       	call   c0006783 <f_rename>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b77d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b784:	85 c0                	test   eax,eax
c001b786:	75 08                	jne    c001b790 <FAT::rename(char const*, char const*)+0xbc>
c001b788:	b8 00 00 00 00       	mov    eax,0x0
c001b78d:	eb 09                	jmp    c001b798 <FAT::rename(char const*, char const*)+0xc4>
c001b78f:	90                   	nop
c001b790:	b8 01 00 00 00       	mov    eax,0x1
c001b795:	8d 76 00             	lea    esi,[esi+0x0]
c001b798:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b79e:	c3                   	ret    
c001b79f:	90                   	nop

c001b7a0 <FAT::mkdir(char const*)>:
c001b7a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b7ae:	75 08                	jne    c001b7b8 <FAT::mkdir(char const*)+0x18>
c001b7b0:	b8 04 00 00 00       	mov    eax,0x4
c001b7b5:	eb 61                	jmp    c001b818 <FAT::mkdir(char const*)+0x78>
c001b7b7:	90                   	nop
c001b7b8:	83 ec 08             	sub    esp,0x8
c001b7bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7c6:	50                   	push   eax
c001b7c7:	e8 74 4f fe ff       	call   c0000740 <strcpy>
c001b7cc:	83 c4 10             	add    esp,0x10
c001b7cf:	83 ec 08             	sub    esp,0x8
c001b7d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7d6:	50                   	push   eax
c001b7d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7de:	e8 f5 f9 ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	83 ec 0c             	sub    esp,0xc
c001b7e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7ed:	50                   	push   eax
c001b7ee:	e8 64 ad fe ff       	call   c0006557 <f_mkdir>
c001b7f3:	83 c4 10             	add    esp,0x10
c001b7f6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b7fd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b804:	85 c0                	test   eax,eax
c001b806:	75 08                	jne    c001b810 <FAT::mkdir(char const*)+0x70>
c001b808:	b8 00 00 00 00       	mov    eax,0x0
c001b80d:	eb 09                	jmp    c001b818 <FAT::mkdir(char const*)+0x78>
c001b80f:	90                   	nop
c001b810:	b8 01 00 00 00       	mov    eax,0x1
c001b815:	8d 76 00             	lea    esi,[esi+0x0]
c001b818:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b81e:	c3                   	ret    
c001b81f:	90                   	nop

c001b820 <FAT::exists(char const*)>:
c001b820:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b826:	83 ec 08             	sub    esp,0x8
c001b829:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b830:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b834:	50                   	push   eax
c001b835:	e8 06 4f fe ff       	call   c0000740 <strcpy>
c001b83a:	83 c4 10             	add    esp,0x10
c001b83d:	83 ec 08             	sub    esp,0x8
c001b840:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b844:	50                   	push   eax
c001b845:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b84c:	e8 87 f9 ff ff       	call   c001b1d8 <FAT::fixFilepath(char*)>
c001b851:	83 c4 10             	add    esp,0x10
c001b854:	83 ec 08             	sub    esp,0x8
c001b857:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b85e:	50                   	push   eax
c001b85f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b863:	50                   	push   eax
c001b864:	e8 19 a8 fe ff       	call   c0006082 <f_stat>
c001b869:	83 c4 10             	add    esp,0x10
c001b86c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b873:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b87a:	85 c0                	test   eax,eax
c001b87c:	75 06                	jne    c001b884 <FAT::exists(char const*)+0x64>
c001b87e:	b0 01                	mov    al,0x1
c001b880:	eb 06                	jmp    c001b888 <FAT::exists(char const*)+0x68>
c001b882:	66 90                	xchg   ax,ax
c001b884:	b0 00                	mov    al,0x0
c001b886:	66 90                	xchg   ax,ax
c001b888:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b88e:	c3                   	ret    
c001b88f:	90                   	nop

c001b890 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b890:	b8 08 00 00 00       	mov    eax,0x8
c001b895:	c3                   	ret    

c001b896 <ISO9660::seek(void*, unsigned long long)>:
c001b896:	53                   	push   ebx
c001b897:	b8 04 00 00 00       	mov    eax,0x4
c001b89c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8a8:	85 d2                	test   edx,edx
c001b8aa:	74 17                	je     c001b8c3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8ac:	89 c8                	mov    eax,ecx
c001b8ae:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b8b1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b8b4:	b8 01 00 00 00       	mov    eax,0x1
c001b8b9:	73 08                	jae    c001b8c3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8bb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b8be:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b8c1:	31 c0                	xor    eax,eax
c001b8c3:	5b                   	pop    ebx
c001b8c4:	c3                   	ret    
c001b8c5:	90                   	nop

c001b8c6 <ISO9660::tell(void*, unsigned long long*)>:
c001b8c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8ce:	85 d2                	test   edx,edx
c001b8d0:	74 12                	je     c001b8e4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8d2:	85 c0                	test   eax,eax
c001b8d4:	74 0e                	je     c001b8e4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8d6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b8d9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b8dc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8df:	89 10                	mov    DWORD PTR [eax],edx
c001b8e1:	31 c0                	xor    eax,eax
c001b8e3:	c3                   	ret    
c001b8e4:	b8 04 00 00 00       	mov    eax,0x4
c001b8e9:	c3                   	ret    

c001b8ea <ISO9660::getName()>:
c001b8ea:	b8 6c 4b 02 c0       	mov    eax,0xc0024b6c
c001b8ef:	c3                   	ret    

c001b8f0 <ISO9660::stat(void*, unsigned long long*)>:
c001b8f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f8:	85 d2                	test   edx,edx
c001b8fa:	74 12                	je     c001b90e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8fc:	85 c0                	test   eax,eax
c001b8fe:	74 0e                	je     c001b90e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b900:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b903:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b906:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b909:	89 10                	mov    DWORD PTR [eax],edx
c001b90b:	31 c0                	xor    eax,eax
c001b90d:	c3                   	ret    
c001b90e:	b8 04 00 00 00       	mov    eax,0x4
c001b913:	c3                   	ret    

c001b914 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b914:	b8 01 00 00 00       	mov    eax,0x1
c001b919:	c3                   	ret    

c001b91a <ISO9660::unlink(char const*)>:
c001b91a:	b8 01 00 00 00       	mov    eax,0x1
c001b91f:	c3                   	ret    

c001b920 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b920:	b8 01 00 00 00       	mov    eax,0x1
c001b925:	c3                   	ret    

c001b926 <ISO9660::rename(char const*, char const*)>:
c001b926:	b8 01 00 00 00       	mov    eax,0x1
c001b92b:	c3                   	ret    

c001b92c <ISO9660::mkdir(char const*)>:
c001b92c:	b8 01 00 00 00       	mov    eax,0x1
c001b931:	c3                   	ret    

c001b932 <ISO9660::close(void*)>:
c001b932:	83 ec 0c             	sub    esp,0xc
c001b935:	b8 04 00 00 00       	mov    eax,0x4
c001b93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b93e:	85 d2                	test   edx,edx
c001b940:	74 0e                	je     c001b950 <ISO9660::close(void*)+0x1e>
c001b942:	83 ec 0c             	sub    esp,0xc
c001b945:	52                   	push   edx
c001b946:	e8 88 e0 fe ff       	call   c00099d3 <free>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	31 c0                	xor    eax,eax
c001b950:	83 c4 0c             	add    esp,0xc
c001b953:	c3                   	ret    

c001b954 <ISO9660::closeDir(void*)>:
c001b954:	83 ec 0c             	sub    esp,0xc
c001b957:	b8 04 00 00 00       	mov    eax,0x4
c001b95c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b960:	85 d2                	test   edx,edx
c001b962:	74 0e                	je     c001b972 <ISO9660::closeDir(void*)+0x1e>
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	52                   	push   edx
c001b968:	e8 66 e0 fe ff       	call   c00099d3 <free>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	31 c0                	xor    eax,eax
c001b972:	83 c4 0c             	add    esp,0xc
c001b975:	c3                   	ret    

c001b976 <ISO9660::~ISO9660()>:
c001b976:	83 ec 0c             	sub    esp,0xc
c001b979:	ba 90 4b 02 c0       	mov    edx,0xc0024b90
c001b97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b982:	89 10                	mov    DWORD PTR [eax],edx
c001b984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	50                   	push   eax
c001b98c:	e8 15 14 ff ff       	call   c000cda6 <Filesystem::~Filesystem()>
c001b991:	83 c4 10             	add    esp,0x10
c001b994:	90                   	nop
c001b995:	83 c4 0c             	add    esp,0xc
c001b998:	c3                   	ret    
c001b999:	90                   	nop

c001b99a <ISO9660::~ISO9660()>:
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	83 ec 0c             	sub    esp,0xc
c001b9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a4:	e8 cd ff ff ff       	call   c001b976 <ISO9660::~ISO9660()>
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	83 ec 08             	sub    esp,0x8
c001b9af:	6a 08                	push   0x8
c001b9b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b5:	e8 d0 0f ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001b9ba:	83 c4 10             	add    esp,0x10
c001b9bd:	83 c4 0c             	add    esp,0xc
c001b9c0:	c3                   	ret    

c001b9c1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b9c1:	55                   	push   ebp
c001b9c2:	31 c9                	xor    ecx,ecx
c001b9c4:	57                   	push   edi
c001b9c5:	56                   	push   esi
c001b9c6:	53                   	push   ebx
c001b9c7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b9cb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b9cf:	89 eb                	mov    ebx,ebp
c001b9d1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b9d5:	39 ce                	cmp    esi,ecx
c001b9d7:	7e 17                	jle    c001b9f0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b9d9:	31 d2                	xor    edx,edx
c001b9db:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b9df:	7d 13                	jge    c001b9f4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b9e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9e5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b9e8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b9eb:	75 0d                	jne    c001b9fa <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b9ed:	42                   	inc    edx
c001b9ee:	eb eb                	jmp    c001b9db <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b9f0:	31 c0                	xor    eax,eax
c001b9f2:	eb 0a                	jmp    c001b9fe <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9f4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b9f8:	eb 04                	jmp    c001b9fe <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9fa:	41                   	inc    ecx
c001b9fb:	43                   	inc    ebx
c001b9fc:	eb d7                	jmp    c001b9d5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b9fe:	5b                   	pop    ebx
c001b9ff:	5e                   	pop    esi
c001ba00:	5f                   	pop    edi
c001ba01:	5d                   	pop    ebp
c001ba02:	c3                   	ret    

c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ba03:	57                   	push   edi
c001ba04:	56                   	push   esi
c001ba05:	53                   	push   ebx
c001ba06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba0e:	39 0d c0 7a 02 c0    	cmp    DWORD PTR ds:0xc0027ac0,ecx
c001ba14:	75 08                	jne    c001ba1e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba16:	38 05 f4 5d 02 c0    	cmp    BYTE PTR ds:0xc0025df4,al
c001ba1c:	74 2b                	je     c001ba49 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba1e:	83 ec 0c             	sub    esp,0xc
c001ba21:	a2 f4 5d 02 c0       	mov    ds:0xc0025df4,al
c001ba26:	68 e0 7a 02 c0       	push   0xc0027ae0
c001ba2b:	0f be c0             	movsx  eax,al
c001ba2e:	6a 01                	push   0x1
c001ba30:	89 0d c0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ac0,ecx
c001ba36:	31 db                	xor    ebx,ebx
c001ba38:	53                   	push   ebx
c001ba39:	51                   	push   ecx
c001ba3a:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c001ba41:	e8 42 47 ff ff       	call   c0010188 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba46:	83 c4 20             	add    esp,0x20
c001ba49:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba4d:	be e0 7a 02 c0       	mov    esi,0xc0027ae0
c001ba52:	b9 00 08 00 00       	mov    ecx,0x800
c001ba57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba59:	5b                   	pop    ebx
c001ba5a:	5e                   	pop    esi
c001ba5b:	5f                   	pop    edi
c001ba5c:	c3                   	ret    
c001ba5d:	90                   	nop

c001ba5e <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba5e:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba64:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba6b:	83 c0 41             	add    eax,0x41
c001ba6e:	0f be c0             	movsx  eax,al
c001ba71:	50                   	push   eax
c001ba72:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba76:	50                   	push   eax
c001ba77:	6a 10                	push   0x10
c001ba79:	e8 85 ff ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba7e:	83 c4 10             	add    esp,0x10
c001ba81:	31 c0                	xor    eax,eax
c001ba83:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ba88:	75 1d                	jne    c001baa7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba8a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ba8f:	75 16                	jne    c001baa7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba91:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ba96:	75 0f                	jne    c001baa7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba98:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ba9d:	75 08                	jne    c001baa7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba9f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001baa4:	0f 94 c0             	sete   al
c001baa7:	81 c4 0c 08 00 00    	add    esp,0x80c
c001baad:	c3                   	ret    

c001baae <ISO9660::read(void*, unsigned long, void*, int*)>:
c001baae:	55                   	push   ebp
c001baaf:	57                   	push   edi
c001bab0:	56                   	push   esi
c001bab1:	53                   	push   ebx
c001bab2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bab8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001babf:	85 ed                	test   ebp,ebp
c001bac1:	0f 84 da 01 00 00    	je     c001bca1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bac7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bacf:	0f 84 cc 01 00 00    	je     c001bca1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bad5:	b8 01 00 00 00       	mov    eax,0x1
c001bada:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bade:	0f 85 c2 01 00 00    	jne    c001bca6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bae4:	31 d2                	xor    edx,edx
c001bae6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001baed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001baf0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001baf3:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001baf6:	89 04 24             	mov    DWORD PTR [esp],eax
c001baf9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bafd:	01 c8                	add    eax,ecx
c001baff:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb02:	11 da                	adc    edx,ebx
c001bb04:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb08:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb0c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb10:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb14:	19 d7                	sbb    edi,edx
c001bb16:	72 11                	jb     c001bb29 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb18:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb27:	eb 0c                	jmp    c001bb35 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb29:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb31:	29 ce                	sub    esi,ecx
c001bb33:	19 df                	sbb    edi,ebx
c001bb35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb38:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb3b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb3f:	c1 e0 0b             	shl    eax,0xb
c001bb42:	01 c8                	add    eax,ecx
c001bb44:	11 da                	adc    edx,ebx
c001bb46:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb4d:	51                   	push   ecx
c001bb4e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb52:	50                   	push   eax
c001bb53:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb57:	53                   	push   ebx
c001bb58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb60:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb64:	50                   	push   eax
c001bb65:	e8 99 fe ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb6a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb6d:	b8 00 08 00 00       	mov    eax,0x800
c001bb72:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb78:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb7c:	29 d0                	sub    eax,edx
c001bb7e:	83 c4 10             	add    esp,0x10
c001bb81:	89 f9                	mov    ecx,edi
c001bb83:	39 c6                	cmp    esi,eax
c001bb85:	83 d9 00             	sbb    ecx,0x0
c001bb88:	7d 1b                	jge    c001bba5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bb8a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bb8f:	75 12                	jne    c001bba3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bb91:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb9e:	e9 fa 00 00 00       	jmp    c001bc9d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bba3:	89 f0                	mov    eax,esi
c001bba5:	01 d3                	add    ebx,edx
c001bba7:	31 d2                	xor    edx,edx
c001bba9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bbad:	39 c2                	cmp    edx,eax
c001bbaf:	7d 14                	jge    c001bbc5 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bbb1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bbb8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bbbc:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bbbf:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bbc2:	42                   	inc    edx
c001bbc3:	eb e8                	jmp    c001bbad <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bbc5:	89 c2                	mov    edx,eax
c001bbc7:	85 c0                	test   eax,eax
c001bbc9:	79 02                	jns    c001bbcd <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bbcb:	31 d2                	xor    edx,edx
c001bbcd:	01 c2                	add    edx,eax
c001bbcf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bbd2:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bbd9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bbdd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bbe1:	99                   	cdq    
c001bbe2:	01 c1                	add    ecx,eax
c001bbe4:	11 d3                	adc    ebx,edx
c001bbe6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bbea:	29 c6                	sub    esi,eax
c001bbec:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bbf0:	19 d7                	sbb    edi,edx
c001bbf2:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbf5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bbf9:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bbfe:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bc01:	b8 00 00 00 00       	mov    eax,0x0
c001bc06:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc0a:	7d 43                	jge    c001bc4f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc0c:	52                   	push   edx
c001bc0d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc11:	50                   	push   eax
c001bc12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc1e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc22:	50                   	push   eax
c001bc23:	e8 db fd ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc28:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc30:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc35:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc3d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc45:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	eb aa                	jmp    c001bbf9 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc53:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc56:	74 2a                	je     c001bc82 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc58:	50                   	push   eax
c001bc59:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc5d:	50                   	push   eax
c001bc5e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc62:	56                   	push   esi
c001bc63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc6b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc6f:	51                   	push   ecx
c001bc70:	e8 8e fd ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc75:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc7f:	83 c4 10             	add    esp,0x10
c001bc82:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc89:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc91:	89 18                	mov    DWORD PTR [eax],ebx
c001bc93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc97:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc9d:	31 c0                	xor    eax,eax
c001bc9f:	eb 05                	jmp    c001bca6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bca1:	b8 04 00 00 00       	mov    eax,0x4
c001bca6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bcac:	5b                   	pop    ebx
c001bcad:	5e                   	pop    esi
c001bcae:	5f                   	pop    edi
c001bcaf:	5d                   	pop    ebp
c001bcb0:	c3                   	ret    
c001bcb1:	90                   	nop

c001bcb2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bcb2:	55                   	push   ebp
c001bcb3:	57                   	push   edi
c001bcb4:	56                   	push   esi
c001bcb5:	53                   	push   ebx
c001bcb6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bcbc:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bcc3:	85 ed                	test   ebp,ebp
c001bcc5:	0f 84 51 02 00 00    	je     c001bf1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bccb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bcd3:	0f 84 43 02 00 00    	je     c001bf1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcdc:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bcdf:	75 0a                	jne    c001bceb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bce1:	b8 07 00 00 00       	mov    eax,0x7
c001bce6:	e9 36 02 00 00       	jmp    c001bf21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bceb:	50                   	push   eax
c001bcec:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcf0:	50                   	push   eax
c001bcf1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bcf8:	53                   	push   ebx
c001bcf9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bcfc:	c1 e0 0b             	shl    eax,0xb
c001bcff:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bd02:	c1 e8 0b             	shr    eax,0xb
c001bd05:	50                   	push   eax
c001bd06:	e8 f8 fc ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd0e:	83 c4 10             	add    esp,0x10
c001bd11:	89 c1                	mov    ecx,eax
c001bd13:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd16:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd1c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd1f:	84 db                	test   bl,bl
c001bd21:	0f 85 8b 00 00 00    	jne    c001bdb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd27:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd2d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd30:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd36:	29 c6                	sub    esi,eax
c001bd38:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd3c:	89 f3                	mov    ebx,esi
c001bd3e:	89 f1                	mov    ecx,esi
c001bd40:	c1 fb 1f             	sar    ebx,0x1f
c001bd43:	01 f0                	add    eax,esi
c001bd45:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd48:	11 da                	adc    edx,ebx
c001bd4a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd51:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd54:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd57:	89 d8                	mov    eax,ebx
c001bd59:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd5d:	ba 00 00 00 00       	mov    edx,0x0
c001bd62:	19 f8                	sbb    eax,edi
c001bd64:	b8 00 00 00 00       	mov    eax,0x0
c001bd69:	73 08                	jae    c001bd73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd6b:	89 f0                	mov    eax,esi
c001bd6d:	89 fa                	mov    edx,edi
c001bd6f:	29 c8                	sub    eax,ecx
c001bd71:	19 da                	sbb    edx,ebx
c001bd73:	89 d7                	mov    edi,edx
c001bd75:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd78:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd7b:	09 c7                	or     edi,eax
c001bd7d:	0f 84 5e ff ff ff    	je     c001bce1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd83:	57                   	push   edi
c001bd84:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd88:	50                   	push   eax
c001bd89:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd90:	53                   	push   ebx
c001bd91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd94:	c1 e0 0b             	shl    eax,0xb
c001bd97:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bd9b:	c1 e8 0b             	shr    eax,0xb
c001bd9e:	50                   	push   eax
c001bd9f:	e8 5f fc ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bda4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bda7:	83 c4 10             	add    esp,0x10
c001bdaa:	25 ff 07 00 00       	and    eax,0x7ff
c001bdaf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bdb2:	31 ff                	xor    edi,edi
c001bdb4:	56                   	push   esi
c001bdb5:	6a 28                	push   0x28
c001bdb7:	6a 00                	push   0x0
c001bdb9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdbd:	50                   	push   eax
c001bdbe:	e8 c1 48 fe ff       	call   c0000684 <memset>
c001bdc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdc6:	25 ff 07 00 00       	and    eax,0x7ff
c001bdcb:	89 c6                	mov    esi,eax
c001bdcd:	83 c6 21             	add    esi,0x21
c001bdd0:	83 d7 00             	adc    edi,0x0
c001bdd3:	83 c4 10             	add    esp,0x10
c001bdd6:	31 c9                	xor    ecx,ecx
c001bdd8:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bddf:	83 f9 28             	cmp    ecx,0x28
c001bde2:	88 04 24             	mov    BYTE PTR [esp],al
c001bde5:	0f 94 c2             	sete   dl
c001bde8:	88 d0                	mov    al,dl
c001bdea:	ba ff 07 00 00       	mov    edx,0x7ff
c001bdef:	39 f2                	cmp    edx,esi
c001bdf1:	ba 00 00 00 00       	mov    edx,0x0
c001bdf6:	19 fa                	sbb    edx,edi
c001bdf8:	0f 92 c2             	setb   dl
c001bdfb:	09 c2                	or     edx,eax
c001bdfd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001be01:	0f 94 c0             	sete   al
c001be04:	08 d0                	or     al,dl
c001be06:	75 16                	jne    c001be1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be08:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be0c:	74 10                	je     c001be1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be0e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be11:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be15:	41                   	inc    ecx
c001be16:	83 c6 01             	add    esi,0x1
c001be19:	83 d7 00             	adc    edi,0x0
c001be1c:	eb ba                	jmp    c001bdd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be1e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be25:	83 ec 0c             	sub    esp,0xc
c001be28:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be2c:	56                   	push   esi
c001be2d:	e8 6e 48 fe ff       	call   c00006a0 <strlen>
c001be32:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be39:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be3d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be48:	5a                   	pop    edx
c001be49:	25 ff 07 00 00       	and    eax,0x7ff
c001be4e:	59                   	pop    ecx
c001be4f:	01 f8                	add    eax,edi
c001be51:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be57:	83 e0 02             	and    eax,0x2
c001be5a:	3c 01                	cmp    al,0x1
c001be5c:	19 c0                	sbb    eax,eax
c001be5e:	83 c0 02             	add    eax,0x2
c001be61:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be65:	56                   	push   esi
c001be66:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be6a:	50                   	push   eax
c001be6b:	e8 d0 48 fe ff       	call   c0000740 <strcpy>
c001be70:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be74:	83 c4 10             	add    esp,0x10
c001be77:	84 c0                	test   al,al
c001be79:	75 21                	jne    c001be9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be7b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be83:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be8b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be93:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001be9a:	eb 28                	jmp    c001bec4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be9c:	fe c8                	dec    al
c001be9e:	75 24                	jne    c001bec4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bea0:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bea8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001beb0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001beb8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bebf:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bec4:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bec8:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001becf:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bed6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bed8:	0f b6 f3             	movzx  esi,bl
c001bedb:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bee2:	31 db                	xor    ebx,ebx
c001bee4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001beea:	89 df                	mov    edi,ebx
c001beec:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001beef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bef2:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bef5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bef8:	39 c6                	cmp    esi,eax
c001befa:	19 d7                	sbb    edi,edx
c001befc:	72 10                	jb     c001bf0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001befe:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf05:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf0c:	eb 0a                	jmp    c001bf18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf0e:	29 f0                	sub    eax,esi
c001bf10:	19 da                	sbb    edx,ebx
c001bf12:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf15:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf18:	31 c0                	xor    eax,eax
c001bf1a:	eb 05                	jmp    c001bf21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf1c:	b8 04 00 00 00       	mov    eax,0x4
c001bf21:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf27:	5b                   	pop    ebx
c001bf28:	5e                   	pop    esi
c001bf29:	5f                   	pop    edi
c001bf2a:	5d                   	pop    ebp
c001bf2b:	c3                   	ret    

c001bf2c <readRoot(unsigned int*, unsigned int*, char)>:
c001bf2c:	57                   	push   edi
c001bf2d:	56                   	push   esi
c001bf2e:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf34:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf3c:	50                   	push   eax
c001bf3d:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf41:	50                   	push   eax
c001bf42:	6a 10                	push   0x10
c001bf44:	e8 ba fa ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf49:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf50:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf54:	b9 22 00 00 00       	mov    ecx,0x22
c001bf59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf5b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf62:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf66:	89 10                	mov    DWORD PTR [eax],edx
c001bf68:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf73:	89 10                	mov    DWORD PTR [eax],edx
c001bf75:	81 c4 44 08 00 00    	add    esp,0x844
c001bf7b:	b0 01                	mov    al,0x1
c001bf7d:	5e                   	pop    esi
c001bf7e:	5f                   	pop    edi
c001bf7f:	c3                   	ret    

c001bf80 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf80:	55                   	push   ebp
c001bf81:	57                   	push   edi
c001bf82:	56                   	push   esi
c001bf83:	53                   	push   ebx
c001bf84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf8a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bf91:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bf98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf9c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bfa0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bfa4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bfa8:	75 03                	jne    c001bfad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfaa:	83 c3 02             	add    ebx,0x2
c001bfad:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bfb0:	75 03                	jne    c001bfb5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bfb2:	43                   	inc    ebx
c001bfb3:	eb f8                	jmp    c001bfad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfb5:	51                   	push   ecx
c001bfb6:	68 00 01 00 00       	push   0x100
c001bfbb:	6a 00                	push   0x0
c001bfbd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bfc1:	50                   	push   eax
c001bfc2:	e8 bd 46 fe ff       	call   c0000684 <memset>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	31 d2                	xor    edx,edx
c001bfcc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bfcf:	84 c0                	test   al,al
c001bfd1:	74 21                	je     c001bff4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bfd3:	3c 2f                	cmp    al,0x2f
c001bfd5:	75 0b                	jne    c001bfe2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bfd7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bfdb:	bd 01 00 00 00       	mov    ebp,0x1
c001bfe0:	eb 14                	jmp    c001bff6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bfe2:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bfe5:	80 f9 19             	cmp    cl,0x19
c001bfe8:	77 03                	ja     c001bfed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bfea:	83 e8 20             	sub    eax,0x20
c001bfed:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bff1:	42                   	inc    edx
c001bff2:	eb d8                	jmp    c001bfcc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bff4:	31 ed                	xor    ebp,ebp
c001bff6:	83 ec 0c             	sub    esp,0xc
c001bff9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c000:	e8 be d9 fe ff       	call   c00099c3 <malloc>
c001c005:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c00c:	89 c6                	mov    esi,eax
c001c00e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c014:	c1 ef 0b             	shr    edi,0xb
c001c017:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c01e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c022:	83 c4 10             	add    esp,0x10
c001c025:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c02a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c02e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c035:	74 28                	je     c001c05f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c037:	52                   	push   edx
c001c038:	57                   	push   edi
c001c039:	50                   	push   eax
c001c03a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c03e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c045:	e8 b9 f9 ff ff       	call   c001ba03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c04a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c04e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c055:	05 00 08 00 00       	add    eax,0x800
c001c05a:	83 c4 10             	add    esp,0x10
c001c05d:	eb cb                	jmp    c001c02a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c05f:	83 ec 0c             	sub    esp,0xc
c001c062:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c066:	57                   	push   edi
c001c067:	e8 34 46 fe ff       	call   c00006a0 <strlen>
c001c06c:	50                   	push   eax
c001c06d:	57                   	push   edi
c001c06e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c075:	56                   	push   esi
c001c076:	e8 46 f9 ff ff       	call   c001b9c1 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c07b:	83 c4 20             	add    esp,0x20
c001c07e:	85 c0                	test   eax,eax
c001c080:	75 13                	jne    c001c095 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c082:	83 ec 0c             	sub    esp,0xc
c001c085:	56                   	push   esi
c001c086:	e8 48 d9 fe ff       	call   c00099d3 <free>
c001c08b:	83 c4 10             	add    esp,0x10
c001c08e:	31 c0                	xor    eax,eax
c001c090:	e9 b3 00 00 00       	jmp    c001c148 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c095:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c099:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c09d:	c1 e7 08             	shl    edi,0x8
c001c0a0:	c1 e2 10             	shl    edx,0x10
c001c0a3:	09 d7                	or     edi,edx
c001c0a5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c0a9:	09 d7                	or     edi,edx
c001c0ab:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c0af:	c1 e2 18             	shl    edx,0x18
c001c0b2:	09 d7                	or     edi,edx
c001c0b4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c0b8:	89 d1                	mov    ecx,edx
c001c0ba:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c0be:	c1 e1 08             	shl    ecx,0x8
c001c0c1:	c1 e2 10             	shl    edx,0x10
c001c0c4:	09 ca                	or     edx,ecx
c001c0c6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c0ca:	09 ca                	or     edx,ecx
c001c0cc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c0d0:	c1 e1 18             	shl    ecx,0x18
c001c0d3:	09 ca                	or     edx,ecx
c001c0d5:	89 e9                	mov    ecx,ebp
c001c0d7:	84 c9                	test   cl,cl
c001c0d9:	74 3c                	je     c001c117 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c0db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	56                   	push   esi
c001c0e3:	e8 eb d8 fe ff       	call   c00099d3 <free>
c001c0e8:	83 c4 0c             	add    esp,0xc
c001c0eb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0f2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c0f7:	50                   	push   eax
c001c0f8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0ff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c106:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c10a:	52                   	push   edx
c001c10b:	57                   	push   edi
c001c10c:	53                   	push   ebx
c001c10d:	e8 6e fe ff ff       	call   c001bf80 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c112:	83 c4 20             	add    esp,0x20
c001c115:	eb 31                	jmp    c001c148 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c117:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c11a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c121:	d0 e8                	shr    al,1
c001c123:	89 3b                	mov    DWORD PTR [ebx],edi
c001c125:	83 e0 01             	and    eax,0x1
c001c128:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c12f:	83 ec 0c             	sub    esp,0xc
c001c132:	89 13                	mov    DWORD PTR [ebx],edx
c001c134:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c13b:	89 03                	mov    DWORD PTR [ebx],eax
c001c13d:	56                   	push   esi
c001c13e:	e8 90 d8 fe ff       	call   c00099d3 <free>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	b0 01                	mov    al,0x1
c001c148:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c14e:	5b                   	pop    ebx
c001c14f:	5e                   	pop    esi
c001c150:	5f                   	pop    edi
c001c151:	5d                   	pop    ebp
c001c152:	c3                   	ret    

c001c153 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c153:	55                   	push   ebp
c001c154:	57                   	push   edi
c001c155:	56                   	push   esi
c001c156:	53                   	push   ebx
c001c157:	83 ec 20             	sub    esp,0x20
c001c15a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c15e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c162:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c166:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c16e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c176:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c17b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c181:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c187:	57                   	push   edi
c001c188:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c18c:	50                   	push   eax
c001c18d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c191:	50                   	push   eax
c001c192:	e8 95 fd ff ff       	call   c001bf2c <readRoot(unsigned int*, unsigned int*, char)>
c001c197:	5a                   	pop    edx
c001c198:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c19c:	e8 ff 44 fe ff       	call   c00006a0 <strlen>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	83 f8 03             	cmp    eax,0x3
c001c1a7:	77 17                	ja     c001c1c0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c1a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1ad:	89 03                	mov    DWORD PTR [ebx],eax
c001c1af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1b3:	89 06                	mov    DWORD PTR [esi],eax
c001c1b5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c1bc:	b0 01                	mov    al,0x1
c001c1be:	eb 19                	jmp    c001c1d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c1c0:	50                   	push   eax
c001c1c1:	55                   	push   ebp
c001c1c2:	57                   	push   edi
c001c1c3:	56                   	push   esi
c001c1c4:	53                   	push   ebx
c001c1c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1d1:	e8 aa fd ff ff       	call   c001bf80 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1d6:	83 c4 20             	add    esp,0x20
c001c1d9:	83 c4 1c             	add    esp,0x1c
c001c1dc:	5b                   	pop    ebx
c001c1dd:	5e                   	pop    esi
c001c1de:	5f                   	pop    edi
c001c1df:	5d                   	pop    ebp
c001c1e0:	c3                   	ret    
c001c1e1:	90                   	nop

c001c1e2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c1e2:	57                   	push   edi
c001c1e3:	56                   	push   esi
c001c1e4:	53                   	push   ebx
c001c1e5:	83 ec 10             	sub    esp,0x10
c001c1e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1ec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1f0:	85 ff                	test   edi,edi
c001c1f2:	0f 84 8b 00 00 00    	je     c001c283 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1f8:	85 f6                	test   esi,esi
c001c1fa:	0f 84 83 00 00 00    	je     c001c283 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c200:	b8 03 00 00 00       	mov    eax,0x3
c001c205:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c20a:	75 7c                	jne    c001c288 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c20c:	83 ec 0c             	sub    esp,0xc
c001c20f:	6a 1c                	push   0x1c
c001c211:	e8 ad d7 fe ff       	call   c00099c3 <malloc>
c001c216:	89 07                	mov    DWORD PTR [edi],eax
c001c218:	89 c3                	mov    ebx,eax
c001c21a:	58                   	pop    eax
c001c21b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c21f:	50                   	push   eax
c001c220:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c223:	50                   	push   eax
c001c224:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c228:	50                   	push   eax
c001c229:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c22d:	50                   	push   eax
c001c22e:	56                   	push   esi
c001c22f:	e8 1f ff ff ff       	call   c001c153 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c234:	83 c4 20             	add    esp,0x20
c001c237:	84 c0                	test   al,al
c001c239:	74 07                	je     c001c242 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c23b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c240:	74 0b                	je     c001c24d <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c242:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c246:	b8 01 00 00 00       	mov    eax,0x1
c001c24b:	eb 3b                	jmp    c001c288 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c24d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c251:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c255:	89 03                	mov    DWORD PTR [ebx],eax
c001c257:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c25e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c262:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c269:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c270:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c273:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c27a:	8a 06                	mov    al,BYTE PTR [esi]
c001c27c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c27f:	31 c0                	xor    eax,eax
c001c281:	eb 05                	jmp    c001c288 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c283:	b8 04 00 00 00       	mov    eax,0x4
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	5b                   	pop    ebx
c001c28c:	5e                   	pop    esi
c001c28d:	5f                   	pop    edi
c001c28e:	c3                   	ret    
c001c28f:	90                   	nop

c001c290 <ISO9660::exists(char const*)>:
c001c290:	83 ec 28             	sub    esp,0x28
c001c293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c297:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c29b:	52                   	push   edx
c001c29c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c29f:	52                   	push   edx
c001c2a0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2a4:	52                   	push   edx
c001c2a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2a9:	52                   	push   edx
c001c2aa:	50                   	push   eax
c001c2ab:	e8 a3 fe ff ff       	call   c001c153 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2b0:	83 c4 3c             	add    esp,0x3c
c001c2b3:	c3                   	ret    

c001c2b4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c2b4:	56                   	push   esi
c001c2b5:	53                   	push   ebx
c001c2b6:	83 ec 14             	sub    esp,0x14
c001c2b9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c2bd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2c1:	85 db                	test   ebx,ebx
c001c2c3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c2c7:	0f 94 c2             	sete   dl
c001c2ca:	85 f6                	test   esi,esi
c001c2cc:	0f 94 c0             	sete   al
c001c2cf:	08 c2                	or     dl,al
c001c2d1:	75 68                	jne    c001c33b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2d3:	85 c9                	test   ecx,ecx
c001c2d5:	74 64                	je     c001c33b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2d7:	83 ec 0c             	sub    esp,0xc
c001c2da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2e1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2ee:	50                   	push   eax
c001c2ef:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c2f2:	50                   	push   eax
c001c2f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2f7:	50                   	push   eax
c001c2f8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2fc:	50                   	push   eax
c001c2fd:	51                   	push   ecx
c001c2fe:	e8 50 fe ff ff       	call   c001c153 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c303:	83 c4 20             	add    esp,0x20
c001c306:	ba 01 00 00 00       	mov    edx,0x1
c001c30b:	84 c0                	test   al,al
c001c30d:	74 31                	je     c001c340 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c30f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c313:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c31a:	89 03                	mov    DWORD PTR [ebx],eax
c001c31c:	ba 00 00 00 00       	mov    edx,0x0
c001c321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c325:	85 c0                	test   eax,eax
c001c327:	0f 95 06             	setne  BYTE PTR [esi]
c001c32a:	74 14                	je     c001c340 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c32c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c332:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c339:	eb 05                	jmp    c001c340 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c33b:	ba 04 00 00 00       	mov    edx,0x4
c001c340:	83 c4 14             	add    esp,0x14
c001c343:	89 d0                	mov    eax,edx
c001c345:	5b                   	pop    ebx
c001c346:	5e                   	pop    esi
c001c347:	c3                   	ret    

c001c348 <ISO9660::openDir(char const*, void**)>:
c001c348:	57                   	push   edi
c001c349:	56                   	push   esi
c001c34a:	53                   	push   ebx
c001c34b:	83 ec 10             	sub    esp,0x10
c001c34e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c352:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c356:	85 ff                	test   edi,edi
c001c358:	74 7b                	je     c001c3d5 <ISO9660::openDir(char const*, void**)+0x8d>
c001c35a:	85 f6                	test   esi,esi
c001c35c:	74 77                	je     c001c3d5 <ISO9660::openDir(char const*, void**)+0x8d>
c001c35e:	83 ec 0c             	sub    esp,0xc
c001c361:	6a 1c                	push   0x1c
c001c363:	e8 5b d6 fe ff       	call   c00099c3 <malloc>
c001c368:	89 07                	mov    DWORD PTR [edi],eax
c001c36a:	89 c3                	mov    ebx,eax
c001c36c:	58                   	pop    eax
c001c36d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c371:	50                   	push   eax
c001c372:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c375:	50                   	push   eax
c001c376:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c37a:	50                   	push   eax
c001c37b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c37f:	50                   	push   eax
c001c380:	56                   	push   esi
c001c381:	e8 cd fd ff ff       	call   c001c153 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c386:	83 c4 20             	add    esp,0x20
c001c389:	84 c0                	test   al,al
c001c38b:	74 07                	je     c001c394 <ISO9660::openDir(char const*, void**)+0x4c>
c001c38d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c392:	75 0b                	jne    c001c39f <ISO9660::openDir(char const*, void**)+0x57>
c001c394:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c398:	b8 01 00 00 00       	mov    eax,0x1
c001c39d:	eb 3b                	jmp    c001c3da <ISO9660::openDir(char const*, void**)+0x92>
c001c39f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3a3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c3a7:	89 03                	mov    DWORD PTR [ebx],eax
c001c3a9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c3b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c3bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c3c5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c3cc:	8a 06                	mov    al,BYTE PTR [esi]
c001c3ce:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c3d1:	31 c0                	xor    eax,eax
c001c3d3:	eb 05                	jmp    c001c3da <ISO9660::openDir(char const*, void**)+0x92>
c001c3d5:	b8 04 00 00 00       	mov    eax,0x4
c001c3da:	83 c4 10             	add    esp,0x10
c001c3dd:	5b                   	pop    ebx
c001c3de:	5e                   	pop    esi
c001c3df:	5f                   	pop    edi
c001c3e0:	c3                   	ret    
c001c3e1:	90                   	nop

c001c3e2 <ISO9660::ISO9660()>:
c001c3e2:	83 ec 0c             	sub    esp,0xc
c001c3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e9:	83 ec 0c             	sub    esp,0xc
c001c3ec:	50                   	push   eax
c001c3ed:	e8 90 09 ff ff       	call   c000cd82 <Filesystem::Filesystem()>
c001c3f2:	83 c4 10             	add    esp,0x10
c001c3f5:	ba 90 4b 02 c0       	mov    edx,0xc0024b90
c001c3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fe:	89 10                	mov    DWORD PTR [eax],edx
c001c400:	90                   	nop
c001c401:	83 c4 0c             	add    esp,0xc
c001c404:	c3                   	ret    
c001c405:	90                   	nop

c001c406 <SoundCard::beginPlayback()>:
c001c406:	c7 44 24 04 f0 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024bf0
c001c40e:	e9 1a 7f ff ff       	jmp    c001432d <Krnl::panic(char const*)>
c001c413:	90                   	nop

c001c414 <SoundCard::stopPlayback()>:
c001c414:	c7 44 24 04 24 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c24
c001c41c:	e9 0c 7f ff ff       	jmp    c001432d <Krnl::panic(char const*)>
c001c421:	90                   	nop

c001c422 <SoundCard::SoundCard(char const*)>:
c001c422:	83 ec 1c             	sub    esp,0x1c
c001c425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c429:	83 ec 08             	sub    esp,0x8
c001c42c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c430:	50                   	push   eax
c001c431:	e8 80 1c ff ff       	call   c000e0b6 <Device::Device(char const*)>
c001c436:	83 c4 10             	add    esp,0x10
c001c439:	ba 30 4d 02 c0       	mov    edx,0xc0024d30
c001c43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c442:	89 10                	mov    DWORD PTR [eax],edx
c001c444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c448:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c44f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c453:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c45d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c461:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c46f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c47d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c487:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c48f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c494:	7f 19                	jg     c001c4af <SoundCard::SoundCard(char const*)+0x8d>
c001c496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c49a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c49e:	83 c2 54             	add    edx,0x54
c001c4a1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c4a9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c4ad:	eb e0                	jmp    c001c48f <SoundCard::SoundCard(char const*)+0x6d>
c001c4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b3:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4ba:	90                   	nop
c001c4bb:	83 c4 1c             	add    esp,0x1c
c001c4be:	c3                   	ret    
c001c4bf:	90                   	nop

c001c4c0 <SoundCard::~SoundCard()>:
c001c4c0:	83 ec 0c             	sub    esp,0xc
c001c4c3:	ba 30 4d 02 c0       	mov    edx,0xc0024d30
c001c4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cc:	89 10                	mov    DWORD PTR [eax],edx
c001c4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d2:	83 ec 0c             	sub    esp,0xc
c001c4d5:	50                   	push   eax
c001c4d6:	e8 a5 18 ff ff       	call   c000dd80 <Device::~Device()>
c001c4db:	83 c4 10             	add    esp,0x10
c001c4de:	90                   	nop
c001c4df:	83 c4 0c             	add    esp,0xc
c001c4e2:	c3                   	ret    
c001c4e3:	90                   	nop

c001c4e4 <SoundCard::~SoundCard()>:
c001c4e4:	83 ec 0c             	sub    esp,0xc
c001c4e7:	83 ec 0c             	sub    esp,0xc
c001c4ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4ee:	e8 cd ff ff ff       	call   c001c4c0 <SoundCard::~SoundCard()>
c001c4f3:	83 c4 10             	add    esp,0x10
c001c4f6:	83 ec 08             	sub    esp,0x8
c001c4f9:	68 e8 01 00 00       	push   0x1e8
c001c4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c502:	e8 83 04 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001c507:	83 c4 10             	add    esp,0x10
c001c50a:	83 c4 0c             	add    esp,0xc
c001c50d:	c3                   	ret    

c001c50e <SoundCard::configureRates(int, int, int)>:
c001c50e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c512:	31 c0                	xor    eax,eax
c001c514:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c51b:	75 20                	jne    c001c53d <SoundCard::configureRates(int, int, int)+0x2f>
c001c51d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c521:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c52b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c535:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c53b:	b0 01                	mov    al,0x1
c001c53d:	c3                   	ret    

c001c53e <SoundCard::getSamples16(int, short*)>:
c001c53e:	55                   	push   ebp
c001c53f:	57                   	push   edi
c001c540:	31 ff                	xor    edi,edi
c001c542:	56                   	push   esi
c001c543:	53                   	push   ebx
c001c544:	83 ec 28             	sub    esp,0x28
c001c547:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c54b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c54f:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c553:	68 57 4c 02 c0       	push   0xc0024c57
c001c558:	e8 0e 05 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c55d:	83 c4 0c             	add    esp,0xc
c001c560:	53                   	push   ebx
c001c561:	6a 00                	push   0x0
c001c563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c567:	e8 18 41 fe ff       	call   c0000684 <memset>
c001c56c:	58                   	pop    eax
c001c56d:	5a                   	pop    edx
c001c56e:	53                   	push   ebx
c001c56f:	31 db                	xor    ebx,ebx
c001c571:	68 76 4c 02 c0       	push   0xc0024c76
c001c576:	e8 f0 04 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	52                   	push   edx
c001c57f:	52                   	push   edx
c001c580:	53                   	push   ebx
c001c581:	68 89 4c 02 c0       	push   0xc0024c89
c001c586:	e8 e0 04 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c58b:	59                   	pop    ecx
c001c58c:	58                   	pop    eax
c001c58d:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c594:	68 a1 4c 02 c0       	push   0xc0024ca1
c001c599:	e8 cd 04 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c59e:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c5a5:	83 c4 10             	add    esp,0x10
c001c5a8:	85 c0                	test   eax,eax
c001c5aa:	74 44                	je     c001c5f0 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5ac:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5b0:	75 3e                	jne    c001c5f0 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5b2:	50                   	push   eax
c001c5b3:	50                   	push   eax
c001c5b4:	53                   	push   ebx
c001c5b5:	68 b3 4c 02 c0       	push   0xc0024cb3
c001c5ba:	e8 ac 04 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c5bf:	56                   	push   esi
c001c5c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5c4:	55                   	push   ebp
c001c5c5:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5cc:	e8 6f 03 00 00       	call   c001c940 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c5d1:	83 c4 18             	add    esp,0x18
c001c5d4:	50                   	push   eax
c001c5d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5d9:	68 ca 4c 02 c0       	push   0xc0024cca
c001c5de:	e8 88 04 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5ea:	39 c7                	cmp    edi,eax
c001c5ec:	7d 02                	jge    c001c5f0 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5ee:	89 c7                	mov    edi,eax
c001c5f0:	43                   	inc    ebx
c001c5f1:	83 fb 20             	cmp    ebx,0x20
c001c5f4:	75 88                	jne    c001c57e <SoundCard::getSamples16(int, short*)+0x40>
c001c5f6:	83 c4 1c             	add    esp,0x1c
c001c5f9:	89 f8                	mov    eax,edi
c001c5fb:	5b                   	pop    ebx
c001c5fc:	5e                   	pop    esi
c001c5fd:	5f                   	pop    edi
c001c5fe:	5d                   	pop    ebp
c001c5ff:	c3                   	ret    

c001c600 <SoundCard::getSamples32(int, int*)>:
c001c600:	55                   	push   ebp
c001c601:	57                   	push   edi
c001c602:	31 ff                	xor    edi,edi
c001c604:	56                   	push   esi
c001c605:	31 f6                	xor    esi,esi
c001c607:	53                   	push   ebx
c001c608:	83 ec 10             	sub    esp,0x10
c001c60b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c60f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c613:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c617:	c1 e0 02             	shl    eax,0x2
c001c61a:	50                   	push   eax
c001c61b:	6a 00                	push   0x0
c001c61d:	55                   	push   ebp
c001c61e:	e8 61 40 fe ff       	call   c0000684 <memset>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c62d:	85 c0                	test   eax,eax
c001c62f:	74 1b                	je     c001c64c <SoundCard::getSamples32(int, int*)+0x4c>
c001c631:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c635:	75 15                	jne    c001c64c <SoundCard::getSamples32(int, int*)+0x4c>
c001c637:	53                   	push   ebx
c001c638:	55                   	push   ebp
c001c639:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c63d:	50                   	push   eax
c001c63e:	e8 f9 03 00 00       	call   c001ca3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c643:	83 c4 10             	add    esp,0x10
c001c646:	39 c6                	cmp    esi,eax
c001c648:	7d 02                	jge    c001c64c <SoundCard::getSamples32(int, int*)+0x4c>
c001c64a:	89 c6                	mov    esi,eax
c001c64c:	47                   	inc    edi
c001c64d:	83 ff 20             	cmp    edi,0x20
c001c650:	75 d4                	jne    c001c626 <SoundCard::getSamples32(int, int*)+0x26>
c001c652:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c658:	85 f6                	test   esi,esi
c001c65a:	75 0f                	jne    c001c66b <SoundCard::getSamples32(int, int*)+0x6b>
c001c65c:	84 c0                	test   al,al
c001c65e:	74 1b                	je     c001c67b <SoundCard::getSamples32(int, int*)+0x7b>
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c665:	53                   	push   ebx
c001c666:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c669:	eb 0d                	jmp    c001c678 <SoundCard::getSamples32(int, int*)+0x78>
c001c66b:	84 c0                	test   al,al
c001c66d:	75 0c                	jne    c001c67b <SoundCard::getSamples32(int, int*)+0x7b>
c001c66f:	83 ec 0c             	sub    esp,0xc
c001c672:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c674:	53                   	push   ebx
c001c675:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c678:	83 c4 10             	add    esp,0x10
c001c67b:	83 c4 0c             	add    esp,0xc
c001c67e:	89 f0                	mov    eax,esi
c001c680:	5b                   	pop    ebx
c001c681:	5e                   	pop    esi
c001c682:	5f                   	pop    edi
c001c683:	5d                   	pop    ebp
c001c684:	c3                   	ret    
c001c685:	90                   	nop

c001c686 <SoundCard::addChannel(SoundPort*)>:
c001c686:	56                   	push   esi
c001c687:	53                   	push   ebx
c001c688:	53                   	push   ebx
c001c689:	31 db                	xor    ebx,ebx
c001c68b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c68f:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c697:	74 27                	je     c001c6c0 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c699:	43                   	inc    ebx
c001c69a:	83 fb 20             	cmp    ebx,0x20
c001c69d:	75 f0                	jne    c001c68f <SoundCard::addChannel(SoundPort*)+0x9>
c001c69f:	83 ec 0c             	sub    esp,0xc
c001c6a2:	83 cb ff             	or     ebx,0xffffffff
c001c6a5:	68 ef 4c 02 c0       	push   0xc0024cef
c001c6aa:	e8 bc 03 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c6af:	c7 04 24 e8 4c 02 c0 	mov    DWORD PTR [esp],0xc0024ce8
c001c6b6:	e8 72 7c ff ff       	call   c001432d <Krnl::panic(char const*)>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	eb 1b                	jmp    c001c6db <SoundCard::addChannel(SoundPort*)+0x55>
c001c6c0:	51                   	push   ecx
c001c6c1:	51                   	push   ecx
c001c6c2:	53                   	push   ebx
c001c6c3:	68 07 4d 02 c0       	push   0xc0024d07
c001c6c8:	e8 9e 03 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c6cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6d1:	83 c4 10             	add    esp,0x10
c001c6d4:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c6db:	89 d8                	mov    eax,ebx
c001c6dd:	5a                   	pop    edx
c001c6de:	5b                   	pop    ebx
c001c6df:	5e                   	pop    esi
c001c6e0:	c3                   	ret    
c001c6e1:	90                   	nop

c001c6e2 <SoundCard::removeChannel(int)>:
c001c6e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c6ea:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c6f5:	c3                   	ret    
c001c6f6:	66 90                	xchg   ax,ax

c001c6f8 <SoundPort::SoundPort(int, int, int, int)>:
c001c6f8:	83 ec 0c             	sub    esp,0xc
c001c6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ff:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c712:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c716:	89 10                	mov    DWORD PTR [eax],edx
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c720:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c727:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c72b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c72e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c733:	75 13                	jne    c001c748 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c739:	8b 00                	mov    eax,DWORD PTR [eax]
c001c73b:	05 a0 0f 00 00       	add    eax,0xfa0
c001c740:	01 c0                	add    eax,eax
c001c742:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c746:	66 90                	xchg   ax,ax
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c750:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c757:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c762:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c765:	c1 e0 02             	shl    eax,0x2
c001c768:	83 ec 0c             	sub    esp,0xc
c001c76b:	50                   	push   eax
c001c76c:	e8 52 d2 fe ff       	call   c00099c3 <malloc>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	89 c2                	mov    edx,eax
c001c776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c77d:	90                   	nop
c001c77e:	83 c4 0c             	add    esp,0xc
c001c781:	c3                   	ret    
c001c782:	66 90                	xchg   ax,ax

c001c784 <SoundPort::~SoundPort()>:
c001c784:	83 ec 0c             	sub    esp,0xc
c001c787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c78e:	85 c0                	test   eax,eax
c001c790:	74 1e                	je     c001c7b0 <SoundPort::~SoundPort()+0x2c>
c001c792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c796:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c799:	83 ec 0c             	sub    esp,0xc
c001c79c:	50                   	push   eax
c001c79d:	e8 31 d2 fe ff       	call   c00099d3 <free>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c7b0:	90                   	nop
c001c7b1:	83 c4 0c             	add    esp,0xc
c001c7b4:	c3                   	ret    
c001c7b5:	90                   	nop
c001c7b6:	66 90                	xchg   ax,ax

c001c7b8 <SoundPort::unpause()>:
c001c7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7bc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c7c0:	c3                   	ret    
c001c7c1:	90                   	nop
c001c7c2:	66 90                	xchg   ax,ax

c001c7c4 <SoundPort::pause()>:
c001c7c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c7cc:	c3                   	ret    
c001c7cd:	90                   	nop
c001c7ce:	66 90                	xchg   ax,ax

c001c7d0 <SoundPort::getBufferUsed()>:
c001c7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c7d7:	c3                   	ret    

c001c7d8 <SoundPort::getBufferSize()>:
c001c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7df:	c3                   	ret    

c001c7e0 <SoundPort::buffer16(short*, int)>:
c001c7e0:	55                   	push   ebp
c001c7e1:	57                   	push   edi
c001c7e2:	56                   	push   esi
c001c7e3:	53                   	push   ebx
c001c7e4:	83 ec 1c             	sub    esp,0x1c
c001c7e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7eb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c7ef:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c7f2:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c7f5:	0f 84 85 00 00 00    	je     c001c880 <SoundPort::buffer16(short*, int)+0xa0>
c001c7fb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c7ff:	85 c9                	test   ecx,ecx
c001c801:	7e 7d                	jle    c001c880 <SoundPort::buffer16(short*, int)+0xa0>
c001c803:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c807:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c80a:	c1 e1 0f             	shl    ecx,0xf
c001c80d:	8d 70 01             	lea    esi,[eax+0x1]
c001c810:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c813:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c816:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c819:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c81c:	74 6e                	je     c001c88c <SoundPort::buffer16(short*, int)+0xac>
c001c81e:	31 f6                	xor    esi,esi
c001c820:	eb 22                	jmp    c001c844 <SoundPort::buffer16(short*, int)+0x64>
c001c822:	66 90                	xchg   ax,ax
c001c824:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c829:	8d 79 01             	lea    edi,[ecx+0x1]
c001c82c:	c1 e3 0f             	shl    ebx,0xf
c001c82f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c832:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c835:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c838:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c83b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c83e:	74 1c                	je     c001c85c <SoundPort::buffer16(short*, int)+0x7c>
c001c840:	89 c6                	mov    esi,eax
c001c842:	66 90                	xchg   ax,ax
c001c844:	8d 46 01             	lea    eax,[esi+0x1]
c001c847:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c84b:	75 d7                	jne    c001c824 <SoundPort::buffer16(short*, int)+0x44>
c001c84d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c851:	83 c4 1c             	add    esp,0x1c
c001c854:	5b                   	pop    ebx
c001c855:	5e                   	pop    esi
c001c856:	5f                   	pop    edi
c001c857:	5d                   	pop    ebp
c001c858:	c3                   	ret    
c001c859:	8d 76 00             	lea    esi,[esi+0x0]
c001c85c:	8d 46 02             	lea    eax,[esi+0x2]
c001c85f:	90                   	nop
c001c860:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	68 5c 4d 02 c0       	push   0xc0024d5c
c001c86c:	e8 fa 01 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c871:	83 c4 10             	add    esp,0x10
c001c874:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c878:	83 c4 1c             	add    esp,0x1c
c001c87b:	5b                   	pop    ebx
c001c87c:	5e                   	pop    esi
c001c87d:	5f                   	pop    edi
c001c87e:	5d                   	pop    ebp
c001c87f:	c3                   	ret    
c001c880:	83 c4 1c             	add    esp,0x1c
c001c883:	31 c0                	xor    eax,eax
c001c885:	5b                   	pop    ebx
c001c886:	5e                   	pop    esi
c001c887:	5f                   	pop    edi
c001c888:	5d                   	pop    ebp
c001c889:	c3                   	ret    
c001c88a:	66 90                	xchg   ax,ax
c001c88c:	b8 01 00 00 00       	mov    eax,0x1
c001c891:	eb cd                	jmp    c001c860 <SoundPort::buffer16(short*, int)+0x80>
c001c893:	90                   	nop

c001c894 <SoundPort::buffer32(int*, int)>:
c001c894:	55                   	push   ebp
c001c895:	57                   	push   edi
c001c896:	56                   	push   esi
c001c897:	53                   	push   ebx
c001c898:	83 ec 1c             	sub    esp,0x1c
c001c89b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c89f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8a3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ae:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8b1:	74 79                	je     c001c92c <SoundPort::buffer32(int*, int)+0x98>
c001c8b3:	85 c0                	test   eax,eax
c001c8b5:	7e 75                	jle    c001c92c <SoundPort::buffer32(int*, int)+0x98>
c001c8b7:	8d 71 01             	lea    esi,[ecx+0x1]
c001c8ba:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c8bd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c8c0:	8b 37                	mov    esi,DWORD PTR [edi]
c001c8c2:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c8c5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8c8:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8cb:	74 6b                	je     c001c938 <SoundPort::buffer32(int*, int)+0xa4>
c001c8cd:	31 f6                	xor    esi,esi
c001c8cf:	eb 1f                	jmp    c001c8f0 <SoundPort::buffer32(int*, int)+0x5c>
c001c8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c8d7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c8da:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c8dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c8e0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c8e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8ea:	74 1c                	je     c001c908 <SoundPort::buffer32(int*, int)+0x74>
c001c8ec:	89 de                	mov    esi,ebx
c001c8ee:	66 90                	xchg   ax,ax
c001c8f0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c8f3:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c8f7:	75 db                	jne    c001c8d4 <SoundPort::buffer32(int*, int)+0x40>
c001c8f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8fd:	83 c4 1c             	add    esp,0x1c
c001c900:	5b                   	pop    ebx
c001c901:	5e                   	pop    esi
c001c902:	5f                   	pop    edi
c001c903:	5d                   	pop    ebp
c001c904:	c3                   	ret    
c001c905:	8d 76 00             	lea    esi,[esi+0x0]
c001c908:	8d 46 02             	lea    eax,[esi+0x2]
c001c90b:	90                   	nop
c001c90c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c910:	83 ec 0c             	sub    esp,0xc
c001c913:	68 77 4d 02 c0       	push   0xc0024d77
c001c918:	e8 4e 01 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c91d:	83 c4 10             	add    esp,0x10
c001c920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c924:	83 c4 1c             	add    esp,0x1c
c001c927:	5b                   	pop    ebx
c001c928:	5e                   	pop    esi
c001c929:	5f                   	pop    edi
c001c92a:	5d                   	pop    ebp
c001c92b:	c3                   	ret    
c001c92c:	83 c4 1c             	add    esp,0x1c
c001c92f:	31 c0                	xor    eax,eax
c001c931:	5b                   	pop    ebx
c001c932:	5e                   	pop    esi
c001c933:	5f                   	pop    edi
c001c934:	5d                   	pop    ebp
c001c935:	c3                   	ret    
c001c936:	66 90                	xchg   ax,ax
c001c938:	b8 01 00 00 00       	mov    eax,0x1
c001c93d:	eb cd                	jmp    c001c90c <SoundPort::buffer32(int*, int)+0x78>
c001c93f:	90                   	nop

c001c940 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c940:	57                   	push   edi
c001c941:	56                   	push   esi
c001c942:	53                   	push   ebx
c001c943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c947:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c94b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c951:	39 03                	cmp    DWORD PTR [ebx],eax
c001c953:	74 13                	je     c001c968 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c955:	83 ec 0c             	sub    esp,0xc
c001c958:	68 cc 4d 02 c0       	push   0xc0024dcc
c001c95d:	e8 cb 79 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001c962:	83 c4 10             	add    esp,0x10
c001c965:	8d 76 00             	lea    esi,[esi+0x0]
c001c968:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c96e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c971:	74 11                	je     c001c984 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c973:	83 ec 0c             	sub    esp,0xc
c001c976:	68 92 4d 02 c0       	push   0xc0024d92
c001c97b:	e8 ad 79 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	90                   	nop
c001c984:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c98a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c98d:	74 11                	je     c001c9a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c98f:	83 ec 0c             	sub    esp,0xc
c001c992:	68 92 4d 02 c0       	push   0xc0024d92
c001c997:	e8 91 79 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001c99c:	83 c4 10             	add    esp,0x10
c001c99f:	90                   	nop
c001c9a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9a3:	89 c6                	mov    esi,eax
c001c9a5:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c9a9:	7e 05                	jle    c001c9b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c9ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c9af:	90                   	nop
c001c9b0:	85 f6                	test   esi,esi
c001c9b2:	7e 30                	jle    c001c9e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c9b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9b8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c9bb:	31 c9                	xor    ecx,ecx
c001c9bd:	01 d7                	add    edi,edx
c001c9bf:	90                   	nop
c001c9c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9c3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c9c6:	85 c0                	test   eax,eax
c001c9c8:	79 06                	jns    c001c9d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c9ca:	05 ff 7f 00 00       	add    eax,0x7fff
c001c9cf:	90                   	nop
c001c9d0:	c1 f8 0f             	sar    eax,0xf
c001c9d3:	83 c1 04             	add    ecx,0x4
c001c9d6:	66 01 02             	add    WORD PTR [edx],ax
c001c9d9:	83 c2 02             	add    edx,0x2
c001c9dc:	39 d7                	cmp    edi,edx
c001c9de:	75 e0                	jne    c001c9c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c9e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9e3:	90                   	nop
c001c9e4:	56                   	push   esi
c001c9e5:	89 c2                	mov    edx,eax
c001c9e7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c9ee:	29 f2                	sub    edx,esi
c001c9f0:	52                   	push   edx
c001c9f1:	50                   	push   eax
c001c9f2:	68 ec 4d 02 c0       	push   0xc0024dec
c001c9f7:	e8 6f 00 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c9fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9ff:	50                   	push   eax
c001ca00:	01 f8                	add    eax,edi
c001ca02:	50                   	push   eax
c001ca03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca06:	29 f0                	sub    eax,esi
c001ca08:	c1 e0 02             	shl    eax,0x2
c001ca0b:	50                   	push   eax
c001ca0c:	68 1c 4e 02 c0       	push   0xc0024e1c
c001ca11:	e8 55 00 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001ca16:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca19:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca1c:	83 c4 1c             	add    esp,0x1c
c001ca1f:	01 d7                	add    edi,edx
c001ca21:	29 f0                	sub    eax,esi
c001ca23:	c1 e0 02             	shl    eax,0x2
c001ca26:	50                   	push   eax
c001ca27:	57                   	push   edi
c001ca28:	52                   	push   edx
c001ca29:	e8 8e 3b fe ff       	call   c00005bc <memmove>
c001ca2e:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ca31:	83 c4 10             	add    esp,0x10
c001ca34:	89 f0                	mov    eax,esi
c001ca36:	5b                   	pop    ebx
c001ca37:	5e                   	pop    esi
c001ca38:	5f                   	pop    edi
c001ca39:	c3                   	ret    
c001ca3a:	66 90                	xchg   ax,ax

c001ca3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ca3c:	57                   	push   edi
c001ca3d:	56                   	push   esi
c001ca3e:	53                   	push   ebx
c001ca3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca4b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ca51:	39 06                	cmp    DWORD PTR [esi],eax
c001ca53:	74 13                	je     c001ca68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ca55:	83 ec 0c             	sub    esp,0xc
c001ca58:	68 40 4e 02 c0       	push   0xc0024e40
c001ca5d:	e8 cb 78 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001ca62:	83 c4 10             	add    esp,0x10
c001ca65:	8d 76 00             	lea    esi,[esi+0x0]
c001ca68:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ca6e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ca71:	74 11                	je     c001ca84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ca73:	83 ec 0c             	sub    esp,0xc
c001ca76:	68 ae 4d 02 c0       	push   0xc0024dae
c001ca7b:	e8 ad 78 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001ca80:	83 c4 10             	add    esp,0x10
c001ca83:	90                   	nop
c001ca84:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ca8a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ca8d:	74 11                	je     c001caa0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ca8f:	83 ec 0c             	sub    esp,0xc
c001ca92:	68 ae 4d 02 c0       	push   0xc0024dae
c001ca97:	e8 91 78 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001ca9c:	83 c4 10             	add    esp,0x10
c001ca9f:	90                   	nop
c001caa0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001caa3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001caa7:	7e 07                	jle    c001cab0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001caa9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001caad:	8d 76 00             	lea    esi,[esi+0x0]
c001cab0:	85 ff                	test   edi,edi
c001cab2:	7e 1c                	jle    c001cad0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cab4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cabb:	31 c0                	xor    eax,eax
c001cabd:	8d 76 00             	lea    esi,[esi+0x0]
c001cac0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cac3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cac6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cac9:	83 c0 04             	add    eax,0x4
c001cacc:	39 c1                	cmp    ecx,eax
c001cace:	75 f0                	jne    c001cac0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cad0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cad3:	50                   	push   eax
c001cad4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cad7:	29 f8                	sub    eax,edi
c001cad9:	c1 e0 02             	shl    eax,0x2
c001cadc:	50                   	push   eax
c001cadd:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cae0:	50                   	push   eax
c001cae1:	52                   	push   edx
c001cae2:	e8 d5 3a fe ff       	call   c00005bc <memmove>
c001cae7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001caea:	83 c4 10             	add    esp,0x10
c001caed:	89 f8                	mov    eax,edi
c001caef:	5b                   	pop    ebx
c001caf0:	5e                   	pop    esi
c001caf1:	5f                   	pop    edi
c001caf2:	c3                   	ret    
c001caf3:	90                   	nop

c001caf4 <PCI::open(int, int, void*)>:
c001caf4:	83 ec 18             	sub    esp,0x18
c001caf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cafb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001caff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb05:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb07:	50                   	push   eax
c001cb08:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb0b:	31 c0                	xor    eax,eax
c001cb0d:	83 c4 1c             	add    esp,0x1c
c001cb10:	c3                   	ret    
c001cb11:	90                   	nop

c001cb12 <PCI::close(int, int, void*)>:
c001cb12:	31 c0                	xor    eax,eax
c001cb14:	c3                   	ret    
c001cb15:	90                   	nop

c001cb16 <PCI::PCI()>:
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb1d:	83 ec 08             	sub    esp,0x8
c001cb20:	68 5f 4e 02 c0       	push   0xc0024e5f
c001cb25:	50                   	push   eax
c001cb26:	e8 ed 0b ff ff       	call   c000d718 <Bus::Bus(char const*)>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	ba 48 4f 02 c0       	mov    edx,0xc0024f48
c001cb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb37:	89 10                	mov    DWORD PTR [eax],edx
c001cb39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4b:	a3 e0 82 02 c0       	mov    ds:0xc00282e0,eax
c001cb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb5a:	0f b6 d0             	movzx  edx,al
c001cb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb61:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb72:	0f b6 d0             	movzx  edx,al
c001cb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb79:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb82:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb88:	8d 50 01             	lea    edx,[eax+0x1]
c001cb8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb8f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cb95:	0f b6 d0             	movzx  edx,al
c001cb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cba0:	83 c9 c0             	or     ecx,0xffffffc0
c001cba3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cba7:	90                   	nop
c001cba8:	83 c4 0c             	add    esp,0xc
c001cbab:	c3                   	ret    

c001cbac <PCI::readBAR8(unsigned int, int)>:
c001cbac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbb4:	f6 c2 01             	test   dl,0x1
c001cbb7:	74 07                	je     c001cbc0 <PCI::readBAR8(unsigned int, int)+0x14>
c001cbb9:	83 e2 fc             	and    edx,0xfffffffc
c001cbbc:	01 c2                	add    edx,eax
c001cbbe:	ec                   	in     al,dx
c001cbbf:	c3                   	ret    
c001cbc0:	83 e2 f0             	and    edx,0xfffffff0
c001cbc3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cbc6:	c3                   	ret    
c001cbc7:	90                   	nop

c001cbc8 <PCI::readBAR16(unsigned int, int)>:
c001cbc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd0:	f6 c2 01             	test   dl,0x1
c001cbd3:	74 08                	je     c001cbdd <PCI::readBAR16(unsigned int, int)+0x15>
c001cbd5:	83 e2 fc             	and    edx,0xfffffffc
c001cbd8:	01 c2                	add    edx,eax
c001cbda:	66 ed                	in     ax,dx
c001cbdc:	c3                   	ret    
c001cbdd:	83 e2 f0             	and    edx,0xfffffff0
c001cbe0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cbe4:	c3                   	ret    
c001cbe5:	90                   	nop

c001cbe6 <PCI::readBAR32(unsigned int, int)>:
c001cbe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbee:	f6 c2 01             	test   dl,0x1
c001cbf1:	74 07                	je     c001cbfa <PCI::readBAR32(unsigned int, int)+0x14>
c001cbf3:	83 e2 fc             	and    edx,0xfffffffc
c001cbf6:	01 c2                	add    edx,eax
c001cbf8:	ed                   	in     eax,dx
c001cbf9:	c3                   	ret    
c001cbfa:	83 e2 f0             	and    edx,0xfffffff0
c001cbfd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cc00:	c3                   	ret    
c001cc01:	90                   	nop

c001cc02 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cc02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc0e:	f6 c2 01             	test   dl,0x1
c001cc11:	74 07                	je     c001cc1a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc13:	83 e2 fc             	and    edx,0xfffffffc
c001cc16:	01 ca                	add    edx,ecx
c001cc18:	ee                   	out    dx,al
c001cc19:	c3                   	ret    
c001cc1a:	83 e2 f0             	and    edx,0xfffffff0
c001cc1d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc20:	c3                   	ret    
c001cc21:	90                   	nop

c001cc22 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc2e:	f6 c2 01             	test   dl,0x1
c001cc31:	74 08                	je     c001cc3b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cc33:	83 e2 fc             	and    edx,0xfffffffc
c001cc36:	01 ca                	add    edx,ecx
c001cc38:	66 ef                	out    dx,ax
c001cc3a:	c3                   	ret    
c001cc3b:	83 e2 f0             	and    edx,0xfffffff0
c001cc3e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cc42:	c3                   	ret    
c001cc43:	90                   	nop

c001cc44 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc50:	f6 c2 01             	test   dl,0x1
c001cc53:	74 07                	je     c001cc5c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cc55:	83 e2 fc             	and    edx,0xfffffffc
c001cc58:	01 ca                	add    edx,ecx
c001cc5a:	ef                   	out    dx,eax
c001cc5b:	c3                   	ret    
c001cc5c:	83 e2 f0             	and    edx,0xfffffff0
c001cc5f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cc62:	c3                   	ret    
c001cc63:	90                   	nop

c001cc64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc64:	55                   	push   ebp
c001cc65:	57                   	push   edi
c001cc66:	56                   	push   esi
c001cc67:	53                   	push   ebx
c001cc68:	83 ec 0c             	sub    esp,0xc
c001cc6b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc6f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cc73:	89 f0                	mov    eax,esi
c001cc75:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cc79:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc7d:	3c 07                	cmp    al,0x7
c001cc7f:	76 10                	jbe    c001cc91 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cc81:	83 ec 0c             	sub    esp,0xc
c001cc84:	68 67 4e 02 c0       	push   0xc0024e67
c001cc89:	e8 9f 76 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001cc8e:	83 c4 10             	add    esp,0x10
c001cc91:	80 fb 0f             	cmp    bl,0xf
c001cc94:	76 10                	jbe    c001cca6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cc96:	83 ec 0c             	sub    esp,0xc
c001cc99:	68 97 4e 02 c0       	push   0xc0024e97
c001cc9e:	e8 8a 76 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	8d 04 36             	lea    eax,[esi+esi*1]
c001cca9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ccae:	83 c8 f0             	or     eax,0xfffffff0
c001ccb1:	ee                   	out    dx,al
c001ccb2:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ccb7:	89 e8                	mov    eax,ebp
c001ccb9:	ee                   	out    dx,al
c001ccba:	83 c4 0c             	add    esp,0xc
c001ccbd:	89 d8                	mov    eax,ebx
c001ccbf:	66 81 e7 fc 00       	and    di,0xfc
c001ccc4:	5b                   	pop    ebx
c001ccc5:	c1 e0 08             	shl    eax,0x8
c001ccc8:	5e                   	pop    esi
c001ccc9:	09 f8                	or     eax,edi
c001cccb:	5f                   	pop    edi
c001cccc:	66 0d 00 c0          	or     ax,0xc000
c001ccd0:	5d                   	pop    ebp
c001ccd1:	c3                   	ret    

c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccd2:	57                   	push   edi
c001ccd3:	56                   	push   esi
c001ccd4:	53                   	push   ebx
c001ccd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccdd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cce3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cce7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cceb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccef:	83 ff 01             	cmp    edi,0x1
c001ccf2:	75 3e                	jne    c001cd32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ccf4:	89 de                	mov    esi,ebx
c001ccf6:	0f b6 c0             	movzx  eax,al
c001ccf9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ccff:	c1 e0 10             	shl    eax,0x10
c001cd02:	0f b6 c9             	movzx  ecx,cl
c001cd05:	09 f0                	or     eax,esi
c001cd07:	c1 e1 08             	shl    ecx,0x8
c001cd0a:	0f b6 d2             	movzx  edx,dl
c001cd0d:	09 c8                	or     eax,ecx
c001cd0f:	c1 e2 0b             	shl    edx,0xb
c001cd12:	09 d0                	or     eax,edx
c001cd14:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd19:	0d 00 00 00 80       	or     eax,0x80000000
c001cd1e:	ef                   	out    dx,eax
c001cd1f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd24:	ed                   	in     eax,dx
c001cd25:	83 e3 02             	and    ebx,0x2
c001cd28:	0f b6 cb             	movzx  ecx,bl
c001cd2b:	c1 e1 03             	shl    ecx,0x3
c001cd2e:	d3 e8                	shr    eax,cl
c001cd30:	eb 43                	jmp    c001cd75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd32:	83 ff 02             	cmp    edi,0x2
c001cd35:	75 2c                	jne    c001cd63 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cd37:	83 ec 0c             	sub    esp,0xc
c001cd3a:	0f b6 c9             	movzx  ecx,cl
c001cd3d:	0f b6 d2             	movzx  edx,dl
c001cd40:	0f b6 fb             	movzx  edi,bl
c001cd43:	0f b6 c0             	movzx  eax,al
c001cd46:	57                   	push   edi
c001cd47:	51                   	push   ecx
c001cd48:	52                   	push   edx
c001cd49:	50                   	push   eax
c001cd4a:	56                   	push   esi
c001cd4b:	e8 14 ff ff ff       	call   c001cc64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd50:	89 c2                	mov    edx,eax
c001cd52:	ed                   	in     eax,dx
c001cd53:	83 e3 02             	and    ebx,0x2
c001cd56:	83 c4 20             	add    esp,0x20
c001cd59:	0f b6 cb             	movzx  ecx,bl
c001cd5c:	c1 e1 03             	shl    ecx,0x3
c001cd5f:	d3 e8                	shr    eax,cl
c001cd61:	eb 12                	jmp    c001cd75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd63:	83 ec 0c             	sub    esp,0xc
c001cd66:	68 c7 4e 02 c0       	push   0xc0024ec7
c001cd6b:	e8 bd 75 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	31 c0                	xor    eax,eax
c001cd75:	5b                   	pop    ebx
c001cd76:	5e                   	pop    esi
c001cd77:	5f                   	pop    edi
c001cd78:	c3                   	ret    
c001cd79:	90                   	nop

c001cd7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cd7a:	83 ec 18             	sub    esp,0x18
c001cd7d:	6a 00                	push   0x0
c001cd7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd84:	50                   	push   eax
c001cd85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd8a:	50                   	push   eax
c001cd8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd90:	50                   	push   eax
c001cd91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd95:	e8 38 ff ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd9a:	83 c4 2c             	add    esp,0x2c
c001cd9d:	c3                   	ret    

c001cd9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cd9e:	83 ec 18             	sub    esp,0x18
c001cda1:	6a 0e                	push   0xe
c001cda3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda8:	50                   	push   eax
c001cda9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdae:	50                   	push   eax
c001cdaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdb4:	50                   	push   eax
c001cdb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdb9:	e8 14 ff ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdbe:	83 c4 2c             	add    esp,0x2c
c001cdc1:	0f b6 c0             	movzx  eax,al
c001cdc4:	c3                   	ret    
c001cdc5:	90                   	nop

c001cdc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cdc6:	55                   	push   ebp
c001cdc7:	57                   	push   edi
c001cdc8:	56                   	push   esi
c001cdc9:	53                   	push   ebx
c001cdca:	83 ec 18             	sub    esp,0x18
c001cdcd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cdd2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cdd7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cddc:	6a 0a                	push   0xa
c001cdde:	56                   	push   esi
c001cddf:	55                   	push   ebp
c001cde0:	57                   	push   edi
c001cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cde5:	e8 e8 fe ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdea:	83 c4 14             	add    esp,0x14
c001cded:	89 c3                	mov    ebx,eax
c001cdef:	6a 0a                	push   0xa
c001cdf1:	0f b6 db             	movzx  ebx,bl
c001cdf4:	56                   	push   esi
c001cdf5:	55                   	push   ebp
c001cdf6:	57                   	push   edi
c001cdf7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdfb:	e8 d2 fe ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce00:	83 c4 2c             	add    esp,0x2c
c001ce03:	25 00 ff 00 00       	and    eax,0xff00
c001ce08:	09 d8                	or     eax,ebx
c001ce0a:	5b                   	pop    ebx
c001ce0b:	5e                   	pop    esi
c001ce0c:	5f                   	pop    edi
c001ce0d:	5d                   	pop    ebp
c001ce0e:	c3                   	ret    
c001ce0f:	90                   	nop

c001ce10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce10:	83 ec 18             	sub    esp,0x18
c001ce13:	6a 08                	push   0x8
c001ce15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce1a:	50                   	push   eax
c001ce1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce20:	50                   	push   eax
c001ce21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce26:	50                   	push   eax
c001ce27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce2b:	e8 a2 fe ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce30:	83 c4 2c             	add    esp,0x2c
c001ce33:	0f b6 c4             	movzx  eax,ah
c001ce36:	c3                   	ret    
c001ce37:	90                   	nop

c001ce38 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ce38:	83 ec 18             	sub    esp,0x18
c001ce3b:	6a 08                	push   0x8
c001ce3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce42:	50                   	push   eax
c001ce43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce48:	50                   	push   eax
c001ce49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce4e:	50                   	push   eax
c001ce4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce53:	e8 7a fe ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce58:	83 c4 2c             	add    esp,0x2c
c001ce5b:	c3                   	ret    

c001ce5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ce5c:	83 ec 18             	sub    esp,0x18
c001ce5f:	6a 3c                	push   0x3c
c001ce61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce66:	50                   	push   eax
c001ce67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce6c:	50                   	push   eax
c001ce6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce72:	50                   	push   eax
c001ce73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce77:	e8 56 fe ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce7c:	83 c4 2c             	add    esp,0x2c
c001ce7f:	c3                   	ret    

c001ce80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ce80:	83 ec 18             	sub    esp,0x18
c001ce83:	6a 18                	push   0x18
c001ce85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce8a:	50                   	push   eax
c001ce8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce90:	50                   	push   eax
c001ce91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce96:	50                   	push   eax
c001ce97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce9b:	e8 32 fe ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cea0:	83 c4 2c             	add    esp,0x2c
c001cea3:	0f b6 c4             	movzx  eax,ah
c001cea6:	c3                   	ret    
c001cea7:	90                   	nop

c001cea8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cea8:	55                   	push   ebp
c001cea9:	57                   	push   edi
c001ceaa:	56                   	push   esi
c001ceab:	53                   	push   ebx
c001ceac:	83 ec 28             	sub    esp,0x28
c001ceaf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ceb3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ceb8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cebd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cec2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cec9:	8d 43 12             	lea    eax,[ebx+0x12]
c001cecc:	83 c3 10             	add    ebx,0x10
c001cecf:	0f b6 c0             	movzx  eax,al
c001ced2:	0f b6 db             	movzx  ebx,bl
c001ced5:	50                   	push   eax
c001ced6:	51                   	push   ecx
c001ced7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cedb:	57                   	push   edi
c001cedc:	55                   	push   ebp
c001cedd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cee1:	e8 ec fd ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cee6:	83 c4 14             	add    esp,0x14
c001cee9:	89 c6                	mov    esi,eax
c001ceeb:	53                   	push   ebx
c001ceec:	c1 e6 10             	shl    esi,0x10
c001ceef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cef3:	51                   	push   ecx
c001cef4:	57                   	push   edi
c001cef5:	55                   	push   ebp
c001cef6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cefa:	e8 d3 fd ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ceff:	83 c4 3c             	add    esp,0x3c
c001cf02:	0f b7 c0             	movzx  eax,ax
c001cf05:	5b                   	pop    ebx
c001cf06:	09 f0                	or     eax,esi
c001cf08:	5e                   	pop    esi
c001cf09:	5f                   	pop    edi
c001cf0a:	5d                   	pop    ebp
c001cf0b:	c3                   	ret    

c001cf0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf0c:	55                   	push   ebp
c001cf0d:	57                   	push   edi
c001cf0e:	56                   	push   esi
c001cf0f:	53                   	push   ebx
c001cf10:	83 ec 0c             	sub    esp,0xc
c001cf13:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf17:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf1b:	89 f5                	mov    ebp,esi
c001cf1d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf33:	83 f9 01             	cmp    ecx,0x1
c001cf36:	75 5d                	jne    c001cf95 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cf38:	0f b6 c8             	movzx  ecx,al
c001cf3b:	0f b6 d2             	movzx  edx,dl
c001cf3e:	c1 e1 10             	shl    ecx,0x10
c001cf41:	c1 e2 0b             	shl    edx,0xb
c001cf44:	89 f0                	mov    eax,esi
c001cf46:	25 fc 00 00 00       	and    eax,0xfc
c001cf4b:	09 c1                	or     ecx,eax
c001cf4d:	89 e8                	mov    eax,ebp
c001cf4f:	0f b6 c0             	movzx  eax,al
c001cf52:	c1 e0 08             	shl    eax,0x8
c001cf55:	09 c1                	or     ecx,eax
c001cf57:	09 d1                	or     ecx,edx
c001cf59:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf5e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cf64:	89 c8                	mov    eax,ecx
c001cf66:	ef                   	out    dx,eax
c001cf67:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf6c:	ed                   	in     eax,dx
c001cf6d:	0f b7 db             	movzx  ebx,bx
c001cf70:	83 e6 02             	and    esi,0x2
c001cf73:	74 0a                	je     c001cf7f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cf75:	0f b7 d0             	movzx  edx,ax
c001cf78:	c1 e3 10             	shl    ebx,0x10
c001cf7b:	09 d3                	or     ebx,edx
c001cf7d:	eb 05                	jmp    c001cf84 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cf7f:	66 31 c0             	xor    ax,ax
c001cf82:	09 c3                	or     ebx,eax
c001cf84:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf89:	89 c8                	mov    eax,ecx
c001cf8b:	ef                   	out    dx,eax
c001cf8c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf91:	89 d8                	mov    eax,ebx
c001cf93:	eb 41                	jmp    c001cfd6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf95:	83 f9 02             	cmp    ecx,0x2
c001cf98:	75 45                	jne    c001cfdf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cf9a:	83 ec 0c             	sub    esp,0xc
c001cf9d:	0f b6 d2             	movzx  edx,dl
c001cfa0:	89 f1                	mov    ecx,esi
c001cfa2:	0f b6 c0             	movzx  eax,al
c001cfa5:	0f b6 f1             	movzx  esi,cl
c001cfa8:	89 e9                	mov    ecx,ebp
c001cfaa:	56                   	push   esi
c001cfab:	0f b6 c9             	movzx  ecx,cl
c001cfae:	51                   	push   ecx
c001cfaf:	52                   	push   edx
c001cfb0:	50                   	push   eax
c001cfb1:	57                   	push   edi
c001cfb2:	e8 ad fc ff ff       	call   c001cc64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cfb7:	89 c2                	mov    edx,eax
c001cfb9:	ed                   	in     eax,dx
c001cfba:	83 c4 20             	add    esp,0x20
c001cfbd:	0f b7 db             	movzx  ebx,bx
c001cfc0:	f6 c2 02             	test   dl,0x2
c001cfc3:	74 0c                	je     c001cfd1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cfc5:	0f b7 c8             	movzx  ecx,ax
c001cfc8:	89 d8                	mov    eax,ebx
c001cfca:	c1 e0 10             	shl    eax,0x10
c001cfcd:	09 c8                	or     eax,ecx
c001cfcf:	eb 05                	jmp    c001cfd6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfd1:	66 31 c0             	xor    ax,ax
c001cfd4:	09 d8                	or     eax,ebx
c001cfd6:	ef                   	out    dx,eax
c001cfd7:	83 c4 0c             	add    esp,0xc
c001cfda:	5b                   	pop    ebx
c001cfdb:	5e                   	pop    esi
c001cfdc:	5f                   	pop    edi
c001cfdd:	5d                   	pop    ebp
c001cfde:	c3                   	ret    
c001cfdf:	c7 44 24 20 c7 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024ec7
c001cfe7:	83 c4 0c             	add    esp,0xc
c001cfea:	5b                   	pop    ebx
c001cfeb:	5e                   	pop    esi
c001cfec:	5f                   	pop    edi
c001cfed:	5d                   	pop    ebp
c001cfee:	e9 3a 73 ff ff       	jmp    c001432d <Krnl::panic(char const*)>
c001cff3:	90                   	nop

c001cff4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cff4:	55                   	push   ebp
c001cff5:	57                   	push   edi
c001cff6:	56                   	push   esi
c001cff7:	53                   	push   ebx
c001cff8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cffe:	80 3d ec 82 02 c0 00 	cmp    BYTE PTR ds:0xc00282ec,0x0
c001d005:	0f 85 84 00 00 00    	jne    c001d08f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d00b:	83 ec 0c             	sub    esp,0xc
c001d00e:	68 14 01 00 00       	push   0x114
c001d013:	e8 ab c9 fe ff       	call   c00099c3 <malloc>
c001d018:	83 c4 0c             	add    esp,0xc
c001d01b:	89 c3                	mov    ebx,eax
c001d01d:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c001d023:	68 cd 4e 02 c0       	push   0xc0024ecd
c001d028:	50                   	push   eax
c001d029:	e8 a8 ff fe ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001d02e:	5a                   	pop    edx
c001d02f:	59                   	pop    ecx
c001d030:	6a 01                	push   0x1
c001d032:	53                   	push   ebx
c001d033:	e8 02 00 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c001d038:	83 c4 0c             	add    esp,0xc
c001d03b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d03f:	50                   	push   eax
c001d040:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d044:	50                   	push   eax
c001d045:	53                   	push   ebx
c001d046:	e8 9b 02 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c001d04b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d04f:	40                   	inc    eax
c001d050:	89 04 24             	mov    DWORD PTR [esp],eax
c001d053:	e8 6b c9 fe ff       	call   c00099c3 <malloc>
c001d058:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d05c:	a3 e8 82 02 c0       	mov    ds:0xc00282e8,eax
c001d061:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d065:	5e                   	pop    esi
c001d066:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d068:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d06c:	51                   	push   ecx
c001d06d:	50                   	push   eax
c001d06e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d072:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d076:	53                   	push   ebx
c001d077:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d07a:	83 c4 14             	add    esp,0x14
c001d07d:	53                   	push   ebx
c001d07e:	e8 15 00 ff ff       	call   c000d098 <File::close()>
c001d083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d087:	83 c4 10             	add    esp,0x10
c001d08a:	a3 e4 82 02 c0       	mov    ds:0xc00282e4,eax
c001d08f:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c001d094:	8b 15 e8 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282e8
c001d09a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d09d:	31 ff                	xor    edi,edi
c001d09f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d0a7:	31 f6                	xor    esi,esi
c001d0a9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d0ae:	31 db                	xor    ebx,ebx
c001d0b0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d0b8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d0bd:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d0c4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d0c8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d0cf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d0d3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d0d6:	0f 8e 6b 01 00 00    	jle    c001d247 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d0dc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d0df:	d4 40                	aam    0x40
c001d0e1:	d5 39                	aad    0x39
c001d0e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0e7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d0eb:	d4 40                	aam    0x40
c001d0ed:	d5 39                	aad    0x39
c001d0ef:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d0f3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d0f7:	d4 40                	aam    0x40
c001d0f9:	d5 39                	aad    0x39
c001d0fb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d0ff:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d103:	d4 40                	aam    0x40
c001d105:	d5 39                	aad    0x39
c001d107:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d10b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d10f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d113:	3c 56                	cmp    al,0x56
c001d115:	74 45                	je     c001d15c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d117:	d4 40                	aam    0x40
c001d119:	d5 39                	aad    0x39
c001d11b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d11e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d122:	0f b6 c9             	movzx  ecx,cl
c001d125:	c1 e1 04             	shl    ecx,0x4
c001d128:	d4 40                	aam    0x40
c001d12a:	d5 39                	aad    0x39
c001d12c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d12f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d133:	0f b6 db             	movzx  ebx,bl
c001d136:	09 cb                	or     ebx,ecx
c001d138:	c1 e3 04             	shl    ebx,0x4
c001d13b:	d4 40                	aam    0x40
c001d13d:	d5 39                	aad    0x39
c001d13f:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d142:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d146:	0f b6 c9             	movzx  ecx,cl
c001d149:	09 cb                	or     ebx,ecx
c001d14b:	c1 e3 04             	shl    ebx,0x4
c001d14e:	89 d9                	mov    ecx,ebx
c001d150:	d4 40                	aam    0x40
c001d152:	d5 39                	aad    0x39
c001d154:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d157:	0f b6 db             	movzx  ebx,bl
c001d15a:	09 cb                	or     ebx,ecx
c001d15c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d160:	80 f9 44             	cmp    cl,0x44
c001d163:	74 47                	je     c001d1ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d165:	88 c8                	mov    al,cl
c001d167:	d4 40                	aam    0x40
c001d169:	d5 39                	aad    0x39
c001d16b:	83 e8 30             	sub    eax,0x30
c001d16e:	0f b6 e8             	movzx  ebp,al
c001d171:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d175:	c1 e5 04             	shl    ebp,0x4
c001d178:	d4 40                	aam    0x40
c001d17a:	d5 39                	aad    0x39
c001d17c:	83 e8 30             	sub    eax,0x30
c001d17f:	0f b6 f0             	movzx  esi,al
c001d182:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d186:	09 ee                	or     esi,ebp
c001d188:	c1 e6 04             	shl    esi,0x4
c001d18b:	d4 40                	aam    0x40
c001d18d:	d5 39                	aad    0x39
c001d18f:	83 e8 30             	sub    eax,0x30
c001d192:	0f b6 e8             	movzx  ebp,al
c001d195:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d199:	09 ee                	or     esi,ebp
c001d19b:	c1 e6 04             	shl    esi,0x4
c001d19e:	89 f5                	mov    ebp,esi
c001d1a0:	d4 40                	aam    0x40
c001d1a2:	d5 39                	aad    0x39
c001d1a4:	83 e8 30             	sub    eax,0x30
c001d1a7:	0f b6 f0             	movzx  esi,al
c001d1aa:	09 ee                	or     esi,ebp
c001d1ac:	83 c7 10             	add    edi,0x10
c001d1af:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d1b3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d1b6:	3c 0a                	cmp    al,0xa
c001d1b8:	74 09                	je     c001d1c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d1ba:	45                   	inc    ebp
c001d1bb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d1be:	75 16                	jne    c001d1d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d1c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d1c3:	3c 0a                	cmp    al,0xa
c001d1c5:	0f 94 c0             	sete   al
c001d1c8:	0f b6 c0             	movzx  eax,al
c001d1cb:	01 c7                	add    edi,eax
c001d1cd:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d1d2:	75 0c                	jne    c001d1e0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d1d4:	eb 15                	jmp    c001d1eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d1d6:	47                   	inc    edi
c001d1d7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d1da:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d1de:	eb d3                	jmp    c001d1b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d1e0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d1e5:	0f 85 e8 fe ff ff    	jne    c001d0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1eb:	80 f9 44             	cmp    cl,0x44
c001d1ee:	74 0b                	je     c001d1fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d1f0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d1f5:	0f 85 d8 fe ff ff    	jne    c001d0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1fb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d1ff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d203:	c1 e1 04             	shl    ecx,0x4
c001d206:	83 e8 30             	sub    eax,0x30
c001d209:	09 c8                	or     eax,ecx
c001d20b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d20f:	0f 85 be fe ff ff    	jne    c001d0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d215:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d219:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d21d:	c1 e1 04             	shl    ecx,0x4
c001d220:	83 e8 30             	sub    eax,0x30
c001d223:	09 c8                	or     eax,ecx
c001d225:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d229:	0f 85 a4 fe ff ff    	jne    c001d0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d22f:	50                   	push   eax
c001d230:	50                   	push   eax
c001d231:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d235:	50                   	push   eax
c001d236:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d23d:	e8 fe 34 fe ff       	call   c0000740 <strcpy>
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	eb 15                	jmp    c001d25c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d247:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d24e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d259:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d25c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d263:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d269:	5b                   	pop    ebx
c001d26a:	5e                   	pop    esi
c001d26b:	5f                   	pop    edi
c001d26c:	5d                   	pop    ebp
c001d26d:	c3                   	ret    

c001d26e <PCI::checkBus(unsigned char)>:
c001d26e:	56                   	push   esi
c001d26f:	53                   	push   ebx
c001d270:	31 db                	xor    ebx,ebx
c001d272:	51                   	push   ecx
c001d273:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d278:	52                   	push   edx
c001d279:	53                   	push   ebx
c001d27a:	43                   	inc    ebx
c001d27b:	56                   	push   esi
c001d27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d280:	e8 37 03 00 00       	call   c001d5bc <PCI::checkDevice(unsigned char, unsigned char)>
c001d285:	83 c4 10             	add    esp,0x10
c001d288:	83 fb 20             	cmp    ebx,0x20
c001d28b:	75 eb                	jne    c001d278 <PCI::checkBus(unsigned char)+0xa>
c001d28d:	58                   	pop    eax
c001d28e:	5b                   	pop    ebx
c001d28f:	5e                   	pop    esi
c001d290:	c3                   	ret    
c001d291:	90                   	nop

c001d292 <PCI::foundDevice(PCIDeviceInfo)>:
c001d292:	55                   	push   ebp
c001d293:	57                   	push   edi
c001d294:	56                   	push   esi
c001d295:	53                   	push   ebx
c001d296:	83 ec 1c             	sub    esp,0x1c
c001d299:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d29d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d2a3:	0f 84 52 01 00 00    	je     c001d3fb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2a9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d2ad:	66 81 f9 06 04       	cmp    cx,0x406
c001d2b2:	75 2c                	jne    c001d2e0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d2b4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d2b9:	50                   	push   eax
c001d2ba:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d2bf:	50                   	push   eax
c001d2c0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d2c5:	50                   	push   eax
c001d2c6:	56                   	push   esi
c001d2c7:	e8 b4 fb ff ff       	call   c001ce80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d2cc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d2d0:	0f b6 c0             	movzx  eax,al
c001d2d3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2d7:	83 c4 2c             	add    esp,0x2c
c001d2da:	5b                   	pop    ebx
c001d2db:	5e                   	pop    esi
c001d2dc:	5f                   	pop    edi
c001d2dd:	5d                   	pop    ebp
c001d2de:	eb 8e                	jmp    c001d26e <PCI::checkBus(unsigned char)>
c001d2e0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2e4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d2ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d2ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2f2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d2f6:	88 d3                	mov    bl,dl
c001d2f8:	85 c0                	test   eax,eax
c001d2fa:	74 33                	je     c001d32f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d2fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2ff:	85 d2                	test   edx,edx
c001d301:	74 28                	je     c001d32b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d303:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d309:	31 ef                	xor    edi,ebp
c001d30b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d311:	75 18                	jne    c001d32b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d313:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d317:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d31d:	75 0c                	jne    c001d32b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d31f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d325:	0f 84 d0 00 00 00    	je     c001d3fb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d32b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d32d:	eb c9                	jmp    c001d2f8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d32f:	66 81 f9 01 06       	cmp    cx,0x601
c001d334:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d338:	75 19                	jne    c001d353 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d33a:	83 ec 0c             	sub    esp,0xc
c001d33d:	68 64 01 00 00       	push   0x164
c001d342:	e8 7c c6 fe ff       	call   c00099c3 <malloc>
c001d347:	89 c5                	mov    ebp,eax
c001d349:	89 04 24             	mov    DWORD PTR [esp],eax
c001d34c:	e8 7b 0e 00 00       	call   c001e1cc <SATABus::SATABus()>
c001d351:	eb 1e                	jmp    c001d371 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d353:	66 81 f9 01 01       	cmp    cx,0x101
c001d358:	75 60                	jne    c001d3ba <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d35a:	83 ec 0c             	sub    esp,0xc
c001d35d:	68 70 02 00 00       	push   0x270
c001d362:	e8 5c c6 fe ff       	call   c00099c3 <malloc>
c001d367:	89 c5                	mov    ebp,eax
c001d369:	89 04 24             	mov    DWORD PTR [esp],eax
c001d36c:	e8 0f 03 00 00       	call   c001d680 <IDE::IDE()>
c001d371:	58                   	pop    eax
c001d372:	5a                   	pop    edx
c001d373:	55                   	push   ebp
c001d374:	56                   	push   esi
c001d375:	e8 38 0b ff ff       	call   c000deb2 <Device::addChild(Device*)>
c001d37a:	83 ec 1c             	sub    esp,0x1c
c001d37d:	b9 09 00 00 00       	mov    ecx,0x9
c001d382:	fc                   	cld    
c001d383:	89 e7                	mov    edi,esp
c001d385:	89 de                	mov    esi,ebx
c001d387:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d389:	55                   	push   ebp
c001d38a:	e8 35 0a ff ff       	call   c000ddc4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d38f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d392:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d396:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d39e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d3a6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d3ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d3b1:	83 c4 4c             	add    esp,0x4c
c001d3b4:	5b                   	pop    ebx
c001d3b5:	5e                   	pop    esi
c001d3b6:	5f                   	pop    edi
c001d3b7:	5d                   	pop    ebp
c001d3b8:	ff e0                	jmp    eax
c001d3ba:	83 ec 0c             	sub    esp,0xc
c001d3bd:	68 58 01 00 00       	push   0x158
c001d3c2:	e8 fc c5 fe ff       	call   c00099c3 <malloc>
c001d3c7:	89 c5                	mov    ebp,eax
c001d3c9:	58                   	pop    eax
c001d3ca:	5a                   	pop    edx
c001d3cb:	68 e6 4e 02 c0       	push   0xc0024ee6
c001d3d0:	55                   	push   ebp
c001d3d1:	e8 e6 0d ff ff       	call   c000e1bc <DriverlessDevice::DriverlessDevice(char const*)>
c001d3d6:	59                   	pop    ecx
c001d3d7:	5f                   	pop    edi
c001d3d8:	55                   	push   ebp
c001d3d9:	56                   	push   esi
c001d3da:	e8 d3 0a ff ff       	call   c000deb2 <Device::addChild(Device*)>
c001d3df:	b9 09 00 00 00       	mov    ecx,0x9
c001d3e4:	fc                   	cld    
c001d3e5:	89 df                	mov    edi,ebx
c001d3e7:	89 de                	mov    esi,ebx
c001d3e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3eb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d3ef:	83 c4 2c             	add    esp,0x2c
c001d3f2:	5b                   	pop    ebx
c001d3f3:	5e                   	pop    esi
c001d3f4:	5f                   	pop    edi
c001d3f5:	5d                   	pop    ebp
c001d3f6:	e9 c9 09 ff ff       	jmp    c000ddc4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d3fb:	83 c4 1c             	add    esp,0x1c
c001d3fe:	5b                   	pop    ebx
c001d3ff:	5e                   	pop    esi
c001d400:	5f                   	pop    edi
c001d401:	5d                   	pop    ebp
c001d402:	c3                   	ret    
c001d403:	90                   	nop

c001d404 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d404:	55                   	push   ebp
c001d405:	57                   	push   edi
c001d406:	56                   	push   esi
c001d407:	53                   	push   ebx
c001d408:	83 ec 68             	sub    esp,0x68
c001d40b:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d40f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d41a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d421:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d426:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d42a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d431:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d436:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d43a:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d43f:	6a 0c                	push   0xc
c001d441:	57                   	push   edi
c001d442:	53                   	push   ebx
c001d443:	56                   	push   esi
c001d444:	55                   	push   ebp
c001d445:	e8 88 f8 ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d44a:	83 c4 20             	add    esp,0x20
c001d44d:	57                   	push   edi
c001d44e:	53                   	push   ebx
c001d44f:	56                   	push   esi
c001d450:	55                   	push   ebp
c001d451:	e8 70 f9 ff ff       	call   c001cdc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d456:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d45b:	57                   	push   edi
c001d45c:	53                   	push   ebx
c001d45d:	56                   	push   esi
c001d45e:	55                   	push   ebp
c001d45f:	e8 f8 f9 ff ff       	call   c001ce5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d464:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d468:	83 c4 14             	add    esp,0x14
c001d46b:	6a 3c                	push   0x3c
c001d46d:	57                   	push   edi
c001d46e:	53                   	push   ebx
c001d46f:	56                   	push   esi
c001d470:	55                   	push   ebp
c001d471:	e8 5c f8 ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d476:	0f b6 c4             	movzx  eax,ah
c001d479:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d47d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d481:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d485:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001d48a:	83 c4 20             	add    esp,0x20
c001d48d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d493:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d49a:	74 7c                	je     c001d518 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d49c:	31 c0                	xor    eax,eax
c001d49e:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c001d4a4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4aa:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d4b0:	7e 66                	jle    c001d518 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4b2:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d4b5:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d4bc:	39 cb                	cmp    ebx,ecx
c001d4be:	75 55                	jne    c001d515 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4c0:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d4c7:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d4cb:	75 48                	jne    c001d515 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4d1:	83 ec 0c             	sub    esp,0xc
c001d4d4:	68 00 4f 02 c0       	push   0xc0024f00
c001d4d9:	e8 8d f5 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001d4de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4e2:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c001d4e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4ec:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4f2:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d4fa:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d4fe:	52                   	push   edx
c001d4ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d503:	53                   	push   ebx
c001d504:	68 25 4f 02 c0       	push   0xc0024f25
c001d509:	e8 5d f5 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001d50e:	83 c4 20             	add    esp,0x20
c001d511:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d515:	40                   	inc    eax
c001d516:	eb 86                	jmp    c001d49e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d518:	31 d2                	xor    edx,edx
c001d51a:	83 ec 0c             	sub    esp,0xc
c001d51d:	57                   	push   edi
c001d51e:	53                   	push   ebx
c001d51f:	56                   	push   esi
c001d520:	52                   	push   edx
c001d521:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d525:	55                   	push   ebp
c001d526:	e8 7d f9 ff ff       	call   c001cea8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d52b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d52f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d533:	42                   	inc    edx
c001d534:	83 c4 20             	add    esp,0x20
c001d537:	83 fa 06             	cmp    edx,0x6
c001d53a:	75 de                	jne    c001d51a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d53c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d541:	83 ec 0c             	sub    esp,0xc
c001d544:	86 e0                	xchg   al,ah
c001d546:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d54b:	6a 02                	push   0x2
c001d54d:	57                   	push   edi
c001d54e:	53                   	push   ebx
c001d54f:	56                   	push   esi
c001d550:	55                   	push   ebp
c001d551:	e8 7c f7 ff ff       	call   c001ccd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d556:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d55b:	83 c4 20             	add    esp,0x20
c001d55e:	57                   	push   edi
c001d55f:	53                   	push   ebx
c001d560:	56                   	push   esi
c001d561:	55                   	push   ebp
c001d562:	e8 a9 f8 ff ff       	call   c001ce10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d567:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d56b:	57                   	push   edi
c001d56c:	53                   	push   ebx
c001d56d:	56                   	push   esi
c001d56e:	55                   	push   ebp
c001d56f:	e8 06 f8 ff ff       	call   c001cd7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d574:	b9 09 00 00 00       	mov    ecx,0x9
c001d579:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d57e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d582:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d586:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d58a:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d58e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d592:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d596:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d59a:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d59e:	83 ec 0c             	sub    esp,0xc
c001d5a1:	fc                   	cld    
c001d5a2:	89 e7                	mov    edi,esp
c001d5a4:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d5a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5aa:	55                   	push   ebp
c001d5ab:	e8 e2 fc ff ff       	call   c001d292 <PCI::foundDevice(PCIDeviceInfo)>
c001d5b0:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d5b6:	5b                   	pop    ebx
c001d5b7:	5e                   	pop    esi
c001d5b8:	5f                   	pop    edi
c001d5b9:	5d                   	pop    ebp
c001d5ba:	c3                   	ret    
c001d5bb:	90                   	nop

c001d5bc <PCI::checkDevice(unsigned char, unsigned char)>:
c001d5bc:	55                   	push   ebp
c001d5bd:	57                   	push   edi
c001d5be:	56                   	push   esi
c001d5bf:	53                   	push   ebx
c001d5c0:	83 ec 0c             	sub    esp,0xc
c001d5c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d5c7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d5cc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d5d1:	6a 00                	push   0x0
c001d5d3:	56                   	push   esi
c001d5d4:	57                   	push   edi
c001d5d5:	55                   	push   ebp
c001d5d6:	e8 9f f7 ff ff       	call   c001cd7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5db:	6a 00                	push   0x0
c001d5dd:	56                   	push   esi
c001d5de:	57                   	push   edi
c001d5df:	55                   	push   ebp
c001d5e0:	e8 1f fe ff ff       	call   c001d404 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5e5:	83 c4 20             	add    esp,0x20
c001d5e8:	6a 00                	push   0x0
c001d5ea:	56                   	push   esi
c001d5eb:	57                   	push   edi
c001d5ec:	55                   	push   ebp
c001d5ed:	e8 ac f7 ff ff       	call   c001cd9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	84 c0                	test   al,al
c001d5f7:	79 27                	jns    c001d620 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d5f9:	bb 01 00 00 00       	mov    ebx,0x1
c001d5fe:	53                   	push   ebx
c001d5ff:	56                   	push   esi
c001d600:	57                   	push   edi
c001d601:	55                   	push   ebp
c001d602:	e8 73 f7 ff ff       	call   c001cd7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	66 40                	inc    ax
c001d60c:	74 0c                	je     c001d61a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d60e:	53                   	push   ebx
c001d60f:	56                   	push   esi
c001d610:	57                   	push   edi
c001d611:	55                   	push   ebp
c001d612:	e8 ed fd ff ff       	call   c001d404 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d617:	83 c4 10             	add    esp,0x10
c001d61a:	43                   	inc    ebx
c001d61b:	83 fb 08             	cmp    ebx,0x8
c001d61e:	75 de                	jne    c001d5fe <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d620:	83 c4 0c             	add    esp,0xc
c001d623:	5b                   	pop    ebx
c001d624:	5e                   	pop    esi
c001d625:	5f                   	pop    edi
c001d626:	5d                   	pop    ebp
c001d627:	c3                   	ret    

c001d628 <PCI::detect()>:
c001d628:	56                   	push   esi
c001d629:	53                   	push   ebx
c001d62a:	53                   	push   ebx
c001d62b:	31 db                	xor    ebx,ebx
c001d62d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d631:	6a 00                	push   0x0
c001d633:	6a 00                	push   0x0
c001d635:	6a 00                	push   0x0
c001d637:	56                   	push   esi
c001d638:	e8 61 f7 ff ff       	call   c001cd9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d63d:	83 c4 10             	add    esp,0x10
c001d640:	a8 80                	test   al,0x80
c001d642:	75 21                	jne    c001d665 <PCI::detect()+0x3d>
c001d644:	51                   	push   ecx
c001d645:	51                   	push   ecx
c001d646:	6a 00                	push   0x0
c001d648:	56                   	push   esi
c001d649:	e8 20 fc ff ff       	call   c001d26e <PCI::checkBus(unsigned char)>
c001d64e:	83 c4 10             	add    esp,0x10
c001d651:	eb 24                	jmp    c001d677 <PCI::detect()+0x4f>
c001d653:	52                   	push   edx
c001d654:	52                   	push   edx
c001d655:	53                   	push   ebx
c001d656:	43                   	inc    ebx
c001d657:	56                   	push   esi
c001d658:	e8 11 fc ff ff       	call   c001d26e <PCI::checkBus(unsigned char)>
c001d65d:	83 c4 10             	add    esp,0x10
c001d660:	83 fb 08             	cmp    ebx,0x8
c001d663:	74 12                	je     c001d677 <PCI::detect()+0x4f>
c001d665:	53                   	push   ebx
c001d666:	6a 00                	push   0x0
c001d668:	6a 00                	push   0x0
c001d66a:	56                   	push   esi
c001d66b:	e8 0a f7 ff ff       	call   c001cd7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d670:	83 c4 10             	add    esp,0x10
c001d673:	66 40                	inc    ax
c001d675:	74 dc                	je     c001d653 <PCI::detect()+0x2b>
c001d677:	58                   	pop    eax
c001d678:	5b                   	pop    ebx
c001d679:	5e                   	pop    esi
c001d67a:	c3                   	ret    
c001d67b:	90                   	nop

c001d67c <IDE::close(int, int, void*)>:
c001d67c:	83 c8 ff             	or     eax,0xffffffff
c001d67f:	c3                   	ret    

c001d680 <IDE::IDE()>:
c001d680:	83 ec 0c             	sub    esp,0xc
c001d683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d687:	83 ec 08             	sub    esp,0x8
c001d68a:	68 6c 4f 02 c0       	push   0xc0024f6c
c001d68f:	50                   	push   eax
c001d690:	e8 cb 0b ff ff       	call   c000e260 <HardDiskController::HardDiskController(char const*)>
c001d695:	83 c4 10             	add    esp,0x10
c001d698:	ba fc 4f 02 c0       	mov    edx,0xc0024ffc
c001d69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a1:	89 10                	mov    DWORD PTR [eax],edx
c001d6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d6ae:	90                   	nop
c001d6af:	83 c4 0c             	add    esp,0xc
c001d6b2:	c3                   	ret    
c001d6b3:	90                   	nop

c001d6b4 <IDE::prepareInterrupt(unsigned char)>:
c001d6b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6bd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d6c5:	c3                   	ret    

c001d6c6 <selectDrive(unsigned char, unsigned char)>:
c001d6c6:	c3                   	ret    
c001d6c7:	90                   	nop

c001d6c8 <IDE::getBase(unsigned char)>:
c001d6c8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d6cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6d1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d6d9:	c3                   	ret    

c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d6da:	55                   	push   ebp
c001d6db:	57                   	push   edi
c001d6dc:	56                   	push   esi
c001d6dd:	53                   	push   ebx
c001d6de:	83 ec 1c             	sub    esp,0x1c
c001d6e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d6e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6e9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d6ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6f4:	80 f9 03             	cmp    cl,0x3
c001d6f7:	77 51                	ja     c001d74a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d6f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6fd:	0f b6 f2             	movzx  esi,dl
c001d700:	0f b6 db             	movzx  ebx,bl
c001d703:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d706:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d70a:	83 ca 80             	or     edx,0xffffff80
c001d70d:	0f b6 d2             	movzx  edx,dl
c001d710:	52                   	push   edx
c001d711:	6a 0c                	push   0xc
c001d713:	56                   	push   esi
c001d714:	57                   	push   edi
c001d715:	e8 c0 ff ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d71a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d71f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d723:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d727:	ee                   	out    dx,al
c001d728:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d72d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d731:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d735:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d739:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d741:	83 c4 2c             	add    esp,0x2c
c001d744:	5b                   	pop    ebx
c001d745:	5e                   	pop    esi
c001d746:	5f                   	pop    edi
c001d747:	5d                   	pop    ebp
c001d748:	eb 90                	jmp    c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d74a:	80 fb 07             	cmp    bl,0x7
c001d74d:	77 12                	ja     c001d761 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d74f:	0f b6 d2             	movzx  edx,dl
c001d752:	0f b6 db             	movzx  ebx,bl
c001d755:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d75d:	89 da                	mov    edx,ebx
c001d75f:	eb 2f                	jmp    c001d790 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d761:	80 fb 0d             	cmp    bl,0xd
c001d764:	77 13                	ja     c001d779 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d766:	0f b6 d2             	movzx  edx,dl
c001d769:	0f b6 db             	movzx  ebx,bl
c001d76c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d773:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d777:	eb 17                	jmp    c001d790 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d779:	80 fb 15             	cmp    bl,0x15
c001d77c:	77 13                	ja     c001d791 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d77e:	0f b6 d2             	movzx  edx,dl
c001d781:	0f b6 db             	movzx  ebx,bl
c001d784:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d78c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d790:	ee                   	out    dx,al
c001d791:	83 c4 1c             	add    esp,0x1c
c001d794:	5b                   	pop    ebx
c001d795:	5e                   	pop    esi
c001d796:	5f                   	pop    edi
c001d797:	5d                   	pop    ebp
c001d798:	c3                   	ret    
c001d799:	90                   	nop

c001d79a <IDE::read(unsigned char, unsigned char)>:
c001d79a:	55                   	push   ebp
c001d79b:	57                   	push   edi
c001d79c:	56                   	push   esi
c001d79d:	53                   	push   ebx
c001d79e:	83 ec 1c             	sub    esp,0x1c
c001d7a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d7a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d7a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d7ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d7b0:	3c 03                	cmp    al,0x3
c001d7b2:	77 43                	ja     c001d7f7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001d7b4:	0f b6 f2             	movzx  esi,dl
c001d7b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d7ba:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d7be:	83 c8 80             	or     eax,0xffffff80
c001d7c1:	0f b6 c0             	movzx  eax,al
c001d7c4:	50                   	push   eax
c001d7c5:	6a 0c                	push   0xc
c001d7c7:	56                   	push   esi
c001d7c8:	57                   	push   edi
c001d7c9:	e8 0c ff ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ce:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d7d3:	0f b6 c3             	movzx  eax,bl
c001d7d6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d7da:	ec                   	in     al,dx
c001d7db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d7df:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d7e4:	52                   	push   edx
c001d7e5:	6a 0c                	push   0xc
c001d7e7:	56                   	push   esi
c001d7e8:	57                   	push   edi
c001d7e9:	e8 ec fe ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ee:	83 c4 20             	add    esp,0x20
c001d7f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d7f5:	eb 49                	jmp    c001d840 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7f7:	80 fb 07             	cmp    bl,0x7
c001d7fa:	77 12                	ja     c001d80e <IDE::read(unsigned char, unsigned char)+0x74>
c001d7fc:	0f b6 d2             	movzx  edx,dl
c001d7ff:	0f b6 c3             	movzx  eax,bl
c001d802:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d80a:	89 c2                	mov    edx,eax
c001d80c:	eb 31                	jmp    c001d83f <IDE::read(unsigned char, unsigned char)+0xa5>
c001d80e:	80 fb 0d             	cmp    bl,0xd
c001d811:	77 13                	ja     c001d826 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d813:	0f b6 d2             	movzx  edx,dl
c001d816:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d81d:	0f b6 d3             	movzx  edx,bl
c001d820:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d824:	eb 19                	jmp    c001d83f <IDE::read(unsigned char, unsigned char)+0xa5>
c001d826:	31 c0                	xor    eax,eax
c001d828:	80 fb 15             	cmp    bl,0x15
c001d82b:	77 13                	ja     c001d840 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d82d:	0f b6 d2             	movzx  edx,dl
c001d830:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d838:	0f b6 d3             	movzx  edx,bl
c001d83b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d83f:	ec                   	in     al,dx
c001d840:	83 c4 1c             	add    esp,0x1c
c001d843:	5b                   	pop    ebx
c001d844:	5e                   	pop    esi
c001d845:	5f                   	pop    edi
c001d846:	5d                   	pop    ebp
c001d847:	c3                   	ret    

c001d848 <IDE::waitInterrupt(unsigned char)>:
c001d848:	55                   	push   ebp
c001d849:	57                   	push   edi
c001d84a:	56                   	push   esi
c001d84b:	53                   	push   ebx
c001d84c:	31 db                	xor    ebx,ebx
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d855:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d85a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d862:	89 e8                	mov    eax,ebp
c001d864:	84 c0                	test   al,al
c001d866:	75 30                	jne    c001d898 <IDE::waitInterrupt(unsigned char)+0x50>
c001d868:	50                   	push   eax
c001d869:	6a 0c                	push   0xc
c001d86b:	56                   	push   esi
c001d86c:	57                   	push   edi
c001d86d:	e8 28 ff ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001d872:	83 c4 10             	add    esp,0x10
c001d875:	a8 01                	test   al,0x1
c001d877:	75 27                	jne    c001d8a0 <IDE::waitInterrupt(unsigned char)+0x58>
c001d879:	f6 c3 04             	test   bl,0x4
c001d87c:	75 12                	jne    c001d890 <IDE::waitInterrupt(unsigned char)+0x48>
c001d87e:	83 fb 32             	cmp    ebx,0x32
c001d881:	7e 0d                	jle    c001d890 <IDE::waitInterrupt(unsigned char)+0x48>
c001d883:	83 ec 0c             	sub    esp,0xc
c001d886:	6a 64                	push   0x64
c001d888:	e8 6b a9 ff ff       	call   c00181f8 <milliTenthSleep(unsigned int)>
c001d88d:	83 c4 10             	add    esp,0x10
c001d890:	83 fb 3c             	cmp    ebx,0x3c
c001d893:	74 0b                	je     c001d8a0 <IDE::waitInterrupt(unsigned char)+0x58>
c001d895:	43                   	inc    ebx
c001d896:	eb c2                	jmp    c001d85a <IDE::waitInterrupt(unsigned char)+0x12>
c001d898:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d8a0:	83 c4 0c             	add    esp,0xc
c001d8a3:	89 e8                	mov    eax,ebp
c001d8a5:	5b                   	pop    ebx
c001d8a6:	5e                   	pop    esi
c001d8a7:	5f                   	pop    edi
c001d8a8:	5d                   	pop    ebp
c001d8a9:	c3                   	ret    

c001d8aa <ideChannel0IRQHandler(regs*, void*)>:
c001d8aa:	83 ec 10             	sub    esp,0x10
c001d8ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8b1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d8b8:	6a 07                	push   0x7
c001d8ba:	6a 00                	push   0x0
c001d8bc:	50                   	push   eax
c001d8bd:	e8 d8 fe ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001d8c2:	83 c4 1c             	add    esp,0x1c
c001d8c5:	c3                   	ret    

c001d8c6 <ideChannel1IRQHandler(regs*, void*)>:
c001d8c6:	83 ec 10             	sub    esp,0x10
c001d8c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8cd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d8d4:	6a 07                	push   0x7
c001d8d6:	6a 01                	push   0x1
c001d8d8:	50                   	push   eax
c001d8d9:	e8 bc fe ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001d8de:	83 c4 1c             	add    esp,0x1c
c001d8e1:	c3                   	ret    

c001d8e2 <IDE::enableIRQs(unsigned char, bool)>:
c001d8e2:	57                   	push   edi
c001d8e3:	56                   	push   esi
c001d8e4:	be 04 00 00 00       	mov    esi,0x4
c001d8e9:	53                   	push   ebx
c001d8ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d8ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8f3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d8f8:	0f 94 c0             	sete   al
c001d8fb:	d1 e0                	shl    eax,1
c001d8fd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d904:	0f b6 c0             	movzx  eax,al
c001d907:	50                   	push   eax
c001d908:	6a 0c                	push   0xc
c001d90a:	57                   	push   edi
c001d90b:	53                   	push   ebx
c001d90c:	e8 c9 fd ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d911:	83 c4 10             	add    esp,0x10
c001d914:	50                   	push   eax
c001d915:	6a 0c                	push   0xc
c001d917:	57                   	push   edi
c001d918:	53                   	push   ebx
c001d919:	e8 7c fe ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001d91e:	83 c4 10             	add    esp,0x10
c001d921:	4e                   	dec    esi
c001d922:	75 f0                	jne    c001d914 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d924:	5b                   	pop    ebx
c001d925:	5e                   	pop    esi
c001d926:	5f                   	pop    edi
c001d927:	c3                   	ret    

c001d928 <IDE::open(int, int, void*)>:
c001d928:	55                   	push   ebp
c001d929:	57                   	push   edi
c001d92a:	56                   	push   esi
c001d92b:	53                   	push   ebx
c001d92c:	83 ec 1c             	sub    esp,0x1c
c001d92f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d933:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d93c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d945:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d94c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d953:	0f 85 b0 02 00 00    	jne    c001dc09 <IDE::open(int, int, void*)+0x2e1>
c001d959:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d95f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d963:	83 e0 7f             	and    eax,0x7f
c001d966:	3c 05                	cmp    al,0x5
c001d968:	74 04                	je     c001d96e <IDE::open(int, int, void*)+0x46>
c001d96a:	3c 0f                	cmp    al,0xf
c001d96c:	75 32                	jne    c001d9a0 <IDE::open(int, int, void*)+0x78>
c001d96e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d974:	83 e0 fc             	and    eax,0xfffffffc
c001d977:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d97e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d984:	83 e0 fc             	and    eax,0xfffffffc
c001d987:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d98e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d994:	83 e0 fc             	and    eax,0xfffffffc
c001d997:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d99e:	eb 14                	jmp    c001d9b4 <IDE::open(int, int, void*)+0x8c>
c001d9a0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d9aa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d9b4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d9bb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d9c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9c6:	89 c6                	mov    esi,eax
c001d9c8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d9cd:	c1 e6 10             	shl    esi,0x10
c001d9d0:	89 e8                	mov    eax,ebp
c001d9d2:	89 fa                	mov    edx,edi
c001d9d4:	c1 e0 0b             	shl    eax,0xb
c001d9d7:	09 f0                	or     eax,esi
c001d9d9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d9e0:	c1 e6 08             	shl    esi,0x8
c001d9e3:	09 c6                	or     esi,eax
c001d9e5:	89 f0                	mov    eax,esi
c001d9e7:	0d 08 00 00 80       	or     eax,0x80000008
c001d9ec:	ef                   	out    dx,eax
c001d9ed:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d9f2:	89 ca                	mov    edx,ecx
c001d9f4:	ed                   	in     eax,dx
c001d9f5:	c1 e8 10             	shr    eax,0x10
c001d9f8:	3d ff ff 00 00       	cmp    eax,0xffff
c001d9fd:	0f 84 f5 00 00 00    	je     c001daf8 <IDE::open(int, int, void*)+0x1d0>
c001da03:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da09:	89 fa                	mov    edx,edi
c001da0b:	89 f0                	mov    eax,esi
c001da0d:	ef                   	out    dx,eax
c001da0e:	b0 fe                	mov    al,0xfe
c001da10:	89 ca                	mov    edx,ecx
c001da12:	ee                   	out    dx,al
c001da13:	89 f0                	mov    eax,esi
c001da15:	89 fa                	mov    edx,edi
c001da17:	ef                   	out    dx,eax
c001da18:	89 ca                	mov    edx,ecx
c001da1a:	ed                   	in     eax,dx
c001da1b:	3c fe                	cmp    al,0xfe
c001da1d:	0f 85 a9 00 00 00    	jne    c001dacc <IDE::open(int, int, void*)+0x1a4>
c001da23:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c001da29:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001da30:	74 33                	je     c001da65 <IDE::open(int, int, void*)+0x13d>
c001da32:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001da38:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001da3c:	40                   	inc    eax
c001da3d:	83 ec 0c             	sub    esp,0xc
c001da40:	0f b6 c0             	movzx  eax,al
c001da43:	50                   	push   eax
c001da44:	55                   	push   ebp
c001da45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da49:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001da4f:	51                   	push   ecx
c001da50:	e8 0f 44 ff ff       	call   c0011e64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001da55:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001da5a:	83 c4 1c             	add    esp,0x1c
c001da5d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001da63:	eb 0a                	jmp    c001da6f <IDE::open(int, int, void*)+0x147>
c001da65:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001da6f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da76:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da7d:	c1 e1 10             	shl    ecx,0x10
c001da80:	c1 e0 08             	shl    eax,0x8
c001da83:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da88:	09 c1                	or     ecx,eax
c001da8a:	89 fa                	mov    edx,edi
c001da8c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da93:	c1 e0 0b             	shl    eax,0xb
c001da96:	09 c1                	or     ecx,eax
c001da98:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001da9e:	89 c8                	mov    eax,ecx
c001daa0:	ef                   	out    dx,eax
c001daa1:	be fc 0c 00 00       	mov    esi,0xcfc
c001daa6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001daac:	89 f2                	mov    edx,esi
c001daae:	ee                   	out    dx,al
c001daaf:	89 c8                	mov    eax,ecx
c001dab1:	89 fa                	mov    edx,edi
c001dab3:	ef                   	out    dx,eax
c001dab4:	89 f2                	mov    edx,esi
c001dab6:	ed                   	in     eax,dx
c001dab7:	0f b6 c0             	movzx  eax,al
c001daba:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001dac0:	74 46                	je     c001db08 <IDE::open(int, int, void*)+0x1e0>
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	68 84 4f 02 c0       	push   0xc0024f84
c001daca:	eb 34                	jmp    c001db00 <IDE::open(int, int, void*)+0x1d8>
c001dacc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001dad5:	75 17                	jne    c001daee <IDE::open(int, int, void*)+0x1c6>
c001dad7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001dadc:	74 07                	je     c001dae5 <IDE::open(int, int, void*)+0x1bd>
c001dade:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001dae3:	75 09                	jne    c001daee <IDE::open(int, int, void*)+0x1c6>
c001dae5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001daec:	eb 1a                	jmp    c001db08 <IDE::open(int, int, void*)+0x1e0>
c001daee:	83 ec 0c             	sub    esp,0xc
c001daf1:	68 8c 4f 02 c0       	push   0xc0024f8c
c001daf6:	eb 08                	jmp    c001db00 <IDE::open(int, int, void*)+0x1d8>
c001daf8:	83 ec 0c             	sub    esp,0xc
c001dafb:	68 bd 4f 02 c0       	push   0xc0024fbd
c001db00:	e8 28 68 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001db05:	83 c4 10             	add    esp,0x10
c001db08:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db0f:	79 1a                	jns    c001db2b <IDE::open(int, int, void*)+0x203>
c001db11:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db17:	83 e0 fc             	and    eax,0xfffffffc
c001db1a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db21:	83 c0 08             	add    eax,0x8
c001db24:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db2b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001db31:	89 c2                	mov    edx,eax
c001db33:	83 e2 0f             	and    edx,0xf
c001db36:	66 83 fa 08          	cmp    dx,0x8
c001db3a:	75 0a                	jne    c001db46 <IDE::open(int, int, void*)+0x21e>
c001db3c:	83 e8 02             	sub    eax,0x2
c001db3f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db46:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001db4c:	89 c2                	mov    edx,eax
c001db4e:	83 e2 0f             	and    edx,0xf
c001db51:	66 83 fa 08          	cmp    dx,0x8
c001db55:	75 0a                	jne    c001db61 <IDE::open(int, int, void*)+0x239>
c001db57:	83 e8 02             	sub    eax,0x2
c001db5a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001db61:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001db68:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001db6f:	89 d0                	mov    eax,edx
c001db71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db74:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db78:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db7c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001db7f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db84:	0f b6 c9             	movzx  ecx,cl
c001db87:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db8e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db91:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db95:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001db99:	8d 50 02             	lea    edx,[eax+0x2]
c001db9c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dba1:	0f b6 d2             	movzx  edx,dl
c001dba4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dbaa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbad:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbb1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dbb5:	8d 48 03             	lea    ecx,[eax+0x3]
c001dbb8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbbd:	0f b6 c9             	movzx  ecx,cl
c001dbc0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dbc6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbc9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbcd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dbd1:	8d 50 04             	lea    edx,[eax+0x4]
c001dbd4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dbda:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbdf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dbe6:	66 85 f6             	test   si,si
c001dbe9:	74 5b                	je     c001dc46 <IDE::open(int, int, void*)+0x31e>
c001dbeb:	0f b6 d2             	movzx  edx,dl
c001dbee:	83 c0 05             	add    eax,0x5
c001dbf1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbf4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbf8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dbfc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dc02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc07:	eb 3d                	jmp    c001dc46 <IDE::open(int, int, void*)+0x31e>
c001dc09:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc0f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc16:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc1d:	66 05 06 02          	add    ax,0x206
c001dc21:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc28:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dc2f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dc36:	66 05 06 02          	add    ax,0x206
c001dc3a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc41:	e9 e5 fe ff ff       	jmp    c001db2b <IDE::open(int, int, void*)+0x203>
c001dc46:	50                   	push   eax
c001dc47:	50                   	push   eax
c001dc48:	6a 00                	push   0x0
c001dc4a:	53                   	push   ebx
c001dc4b:	e8 64 fa ff ff       	call   c001d6b4 <IDE::prepareInterrupt(unsigned char)>
c001dc50:	5a                   	pop    edx
c001dc51:	59                   	pop    ecx
c001dc52:	6a 01                	push   0x1
c001dc54:	53                   	push   ebx
c001dc55:	e8 5a fa ff ff       	call   c001d6b4 <IDE::prepareInterrupt(unsigned char)>
c001dc5a:	83 c4 0c             	add    esp,0xc
c001dc5d:	6a 00                	push   0x0
c001dc5f:	6a 00                	push   0x0
c001dc61:	53                   	push   ebx
c001dc62:	e8 7b fc ff ff       	call   c001d8e2 <IDE::enableIRQs(unsigned char, bool)>
c001dc67:	83 c4 0c             	add    esp,0xc
c001dc6a:	6a 00                	push   0x0
c001dc6c:	6a 01                	push   0x1
c001dc6e:	53                   	push   ebx
c001dc6f:	e8 6e fc ff ff       	call   c001d8e2 <IDE::enableIRQs(unsigned char, bool)>
c001dc74:	83 c4 10             	add    esp,0x10
c001dc77:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc7e:	74 34                	je     c001dcb4 <IDE::open(int, int, void*)+0x38c>
c001dc80:	83 ec 0c             	sub    esp,0xc
c001dc83:	53                   	push   ebx
c001dc84:	6a 01                	push   0x1
c001dc86:	68 aa d8 01 c0       	push   0xc001d8aa
c001dc8b:	6a 0e                	push   0xe
c001dc8d:	53                   	push   ebx
c001dc8e:	e8 97 01 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc93:	83 c4 14             	add    esp,0x14
c001dc96:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dc9c:	53                   	push   ebx
c001dc9d:	6a 01                	push   0x1
c001dc9f:	68 c6 d8 01 c0       	push   0xc001d8c6
c001dca4:	6a 0f                	push   0xf
c001dca6:	53                   	push   ebx
c001dca7:	e8 7e 01 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcac:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dcb2:	eb 38                	jmp    c001dcec <IDE::open(int, int, void*)+0x3c4>
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dcc1:	53                   	push   ebx
c001dcc2:	6a 00                	push   0x0
c001dcc4:	68 aa d8 01 c0       	push   0xc001d8aa
c001dcc9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dccf:	53                   	push   ebx
c001dcd0:	e8 55 01 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcd5:	83 c4 14             	add    esp,0x14
c001dcd8:	53                   	push   ebx
c001dcd9:	6a 00                	push   0x0
c001dcdb:	68 c6 d8 01 c0       	push   0xc001d8c6
c001dce0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dce6:	53                   	push   ebx
c001dce7:	e8 3e 01 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dcee:	83 c4 20             	add    esp,0x20
c001dcf1:	83 ec 0c             	sub    esp,0xc
c001dcf4:	53                   	push   ebx
c001dcf5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dcf8:	83 c4 0c             	add    esp,0xc
c001dcfb:	6a 07                	push   0x7
c001dcfd:	6a 00                	push   0x0
c001dcff:	53                   	push   ebx
c001dd00:	e8 95 fa ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001dd05:	83 c4 0c             	add    esp,0xc
c001dd08:	6a 07                	push   0x7
c001dd0a:	6a 01                	push   0x1
c001dd0c:	53                   	push   ebx
c001dd0d:	e8 88 fa ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001dd12:	83 c4 0c             	add    esp,0xc
c001dd15:	6a 01                	push   0x1
c001dd17:	6a 00                	push   0x0
c001dd19:	53                   	push   ebx
c001dd1a:	e8 c3 fb ff ff       	call   c001d8e2 <IDE::enableIRQs(unsigned char, bool)>
c001dd1f:	83 c4 0c             	add    esp,0xc
c001dd22:	6a 01                	push   0x1
c001dd24:	6a 01                	push   0x1
c001dd26:	53                   	push   ebx
c001dd27:	e8 b6 fb ff ff       	call   c001d8e2 <IDE::enableIRQs(unsigned char, bool)>
c001dd2c:	83 c4 2c             	add    esp,0x2c
c001dd2f:	31 c0                	xor    eax,eax
c001dd31:	5b                   	pop    ebx
c001dd32:	5e                   	pop    esi
c001dd33:	5f                   	pop    edi
c001dd34:	5d                   	pop    ebp
c001dd35:	c3                   	ret    

c001dd36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd36:	55                   	push   ebp
c001dd37:	57                   	push   edi
c001dd38:	56                   	push   esi
c001dd39:	53                   	push   ebx
c001dd3a:	83 ec 1c             	sub    esp,0x1c
c001dd3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd45:	8d 50 f8             	lea    edx,[eax-0x8]
c001dd48:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd4c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dd50:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd54:	80 fa 03             	cmp    dl,0x3
c001dd57:	77 5d                	ja     c001ddb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dd59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd61:	0f b6 db             	movzx  ebx,bl
c001dd64:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dd67:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dd6b:	83 ca 80             	or     edx,0xffffff80
c001dd6e:	0f b6 d2             	movzx  edx,dl
c001dd71:	52                   	push   edx
c001dd72:	6a 0c                	push   0xc
c001dd74:	53                   	push   ebx
c001dd75:	56                   	push   esi
c001dd76:	e8 5f f9 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd7b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dd80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd88:	0f b6 c0             	movzx  eax,al
c001dd8b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dd8f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd91:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd96:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dd9a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dd9e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dda2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ddaa:	83 c4 2c             	add    esp,0x2c
c001ddad:	5b                   	pop    ebx
c001ddae:	5e                   	pop    esi
c001ddaf:	5f                   	pop    edi
c001ddb0:	5d                   	pop    ebp
c001ddb1:	e9 24 f9 ff ff       	jmp    c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddb6:	3c 07                	cmp    al,0x7
c001ddb8:	77 10                	ja     c001ddca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ddba:	0f b6 db             	movzx  ebx,bl
c001ddbd:	0f b6 d0             	movzx  edx,al
c001ddc0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ddc8:	eb 2d                	jmp    c001ddf7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ddca:	3c 0d                	cmp    al,0xd
c001ddcc:	77 13                	ja     c001dde1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ddce:	0f b6 db             	movzx  ebx,bl
c001ddd1:	0f b6 c0             	movzx  eax,al
c001ddd4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001dddb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dddf:	eb 16                	jmp    c001ddf7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dde1:	3c 15                	cmp    al,0x15
c001dde3:	77 14                	ja     c001ddf9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dde5:	0f b6 db             	movzx  ebx,bl
c001dde8:	0f b6 c0             	movzx  eax,al
c001ddeb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ddf3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ddf7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ddf9:	83 c4 1c             	add    esp,0x1c
c001ddfc:	5b                   	pop    ebx
c001ddfd:	5e                   	pop    esi
c001ddfe:	5f                   	pop    edi
c001ddff:	5d                   	pop    ebp
c001de00:	c3                   	ret    
c001de01:	90                   	nop

c001de02 <IDE::detect()>:
c001de02:	55                   	push   ebp
c001de03:	57                   	push   edi
c001de04:	56                   	push   esi
c001de05:	53                   	push   ebx
c001de06:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de0c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de13:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de1a:	0f 85 97 02 00 00    	jne    c001e0b7 <IDE::detect()+0x2b5>
c001de20:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de27:	31 f6                	xor    esi,esi
c001de29:	31 ed                	xor    ebp,ebp
c001de2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de33:	89 e8                	mov    eax,ebp
c001de35:	c1 e0 06             	shl    eax,0x6
c001de38:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de40:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de48:	c1 e0 04             	shl    eax,0x4
c001de4b:	83 c8 a0             	or     eax,0xffffffa0
c001de4e:	0f b6 c0             	movzx  eax,al
c001de51:	50                   	push   eax
c001de52:	6a 06                	push   0x6
c001de54:	56                   	push   esi
c001de55:	53                   	push   ebx
c001de56:	e8 7f f8 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de5b:	83 c4 0c             	add    esp,0xc
c001de5e:	6a 0c                	push   0xc
c001de60:	56                   	push   esi
c001de61:	53                   	push   ebx
c001de62:	e8 33 f9 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001de67:	83 c4 0c             	add    esp,0xc
c001de6a:	6a 0c                	push   0xc
c001de6c:	56                   	push   esi
c001de6d:	53                   	push   ebx
c001de6e:	e8 27 f9 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001de73:	83 c4 0c             	add    esp,0xc
c001de76:	6a 0c                	push   0xc
c001de78:	56                   	push   esi
c001de79:	53                   	push   ebx
c001de7a:	e8 1b f9 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001de7f:	83 c4 0c             	add    esp,0xc
c001de82:	6a 0c                	push   0xc
c001de84:	56                   	push   esi
c001de85:	53                   	push   ebx
c001de86:	e8 0f f9 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001de8b:	68 ec 00 00 00       	push   0xec
c001de90:	6a 07                	push   0x7
c001de92:	56                   	push   esi
c001de93:	53                   	push   ebx
c001de94:	e8 41 f8 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de99:	83 c4 1c             	add    esp,0x1c
c001de9c:	6a 0c                	push   0xc
c001de9e:	56                   	push   esi
c001de9f:	53                   	push   ebx
c001dea0:	e8 f5 f8 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001dea5:	83 c4 0c             	add    esp,0xc
c001dea8:	6a 0c                	push   0xc
c001deaa:	56                   	push   esi
c001deab:	53                   	push   ebx
c001deac:	e8 e9 f8 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001deb1:	83 c4 0c             	add    esp,0xc
c001deb4:	6a 0c                	push   0xc
c001deb6:	56                   	push   esi
c001deb7:	53                   	push   ebx
c001deb8:	e8 dd f8 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001debd:	83 c4 0c             	add    esp,0xc
c001dec0:	6a 0c                	push   0xc
c001dec2:	56                   	push   esi
c001dec3:	53                   	push   ebx
c001dec4:	e8 d1 f8 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001dec9:	83 c4 0c             	add    esp,0xc
c001decc:	6a 0c                	push   0xc
c001dece:	56                   	push   esi
c001decf:	53                   	push   ebx
c001ded0:	e8 c5 f8 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001ded5:	83 c4 10             	add    esp,0x10
c001ded8:	84 c0                	test   al,al
c001deda:	0f 84 5f 01 00 00    	je     c001e03f <IDE::detect()+0x23d>
c001dee0:	31 ff                	xor    edi,edi
c001dee2:	50                   	push   eax
c001dee3:	6a 0c                	push   0xc
c001dee5:	56                   	push   esi
c001dee6:	53                   	push   ebx
c001dee7:	e8 ae f8 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	a8 01                	test   al,0x1
c001def1:	0f 85 69 01 00 00    	jne    c001e060 <IDE::detect()+0x25e>
c001def7:	84 c0                	test   al,al
c001def9:	78 04                	js     c001deff <IDE::detect()+0xfd>
c001defb:	a8 08                	test   al,0x8
c001defd:	75 23                	jne    c001df22 <IDE::detect()+0x120>
c001deff:	47                   	inc    edi
c001df00:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df06:	7e da                	jle    c001dee2 <IDE::detect()+0xe0>
c001df08:	83 ec 0c             	sub    esp,0xc
c001df0b:	6a 32                	push   0x32
c001df0d:	e8 e6 a2 ff ff       	call   c00181f8 <milliTenthSleep(unsigned int)>
c001df12:	83 c4 10             	add    esp,0x10
c001df15:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df1b:	75 c5                	jne    c001dee2 <IDE::detect()+0xe0>
c001df1d:	e9 3e 01 00 00       	jmp    c001e060 <IDE::detect()+0x25e>
c001df22:	31 c9                	xor    ecx,ecx
c001df24:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df28:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001df2c:	83 ec 0c             	sub    esp,0xc
c001df2f:	68 80 00 00 00       	push   0x80
c001df34:	57                   	push   edi
c001df35:	6a 00                	push   0x0
c001df37:	56                   	push   esi
c001df38:	53                   	push   ebx
c001df39:	e8 f8 fd ff ff       	call   c001dd36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df3e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001df43:	89 e8                	mov    eax,ebp
c001df45:	89 d1                	mov    ecx,edx
c001df47:	c1 e0 06             	shl    eax,0x6
c001df4a:	01 d8                	add    eax,ebx
c001df4c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001df53:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001df5a:	89 f2                	mov    edx,esi
c001df5c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001df62:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001df66:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001df6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df70:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001df77:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001df7f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001df86:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001df8e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001df94:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001df9b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001dfa1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001dfa5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dfa9:	83 c4 20             	add    esp,0x20
c001dfac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001dfaf:	83 c0 02             	add    eax,0x2
c001dfb2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001dfb8:	83 c7 02             	add    edi,0x2
c001dfbb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001dfbe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001dfc4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001dfc8:	75 e2                	jne    c001dfac <IDE::detect()+0x1aa>
c001dfca:	89 e8                	mov    eax,ebp
c001dfcc:	c1 e0 06             	shl    eax,0x6
c001dfcf:	01 d8                	add    eax,ebx
c001dfd1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001dfd7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001dfde:	66 c1 ea 09          	shr    dx,0x9
c001dfe2:	83 e2 01             	and    edx,0x1
c001dfe5:	84 c9                	test   cl,cl
c001dfe7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001dfed:	75 22                	jne    c001e011 <IDE::detect()+0x20f>
c001dfef:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001dff6:	74 46                	je     c001e03e <IDE::detect()+0x23c>
c001dff8:	83 ec 0c             	sub    esp,0xc
c001dffb:	68 7c 01 00 00       	push   0x17c
c001e000:	e8 be b9 fe ff       	call   c00099c3 <malloc>
c001e005:	89 c7                	mov    edi,eax
c001e007:	89 04 24             	mov    DWORD PTR [esp],eax
c001e00a:	e8 13 05 00 00       	call   c001e522 <ATA::ATA()>
c001e00f:	eb 17                	jmp    c001e028 <IDE::detect()+0x226>
c001e011:	83 ec 0c             	sub    esp,0xc
c001e014:	68 80 01 00 00       	push   0x180
c001e019:	e8 a5 b9 fe ff       	call   c00099c3 <malloc>
c001e01e:	89 c7                	mov    edi,eax
c001e020:	89 04 24             	mov    DWORD PTR [esp],eax
c001e023:	e8 82 0b 00 00       	call   c001ebaa <ATAPI::ATAPI()>
c001e028:	5a                   	pop    edx
c001e029:	59                   	pop    ecx
c001e02a:	57                   	push   edi
c001e02b:	53                   	push   ebx
c001e02c:	e8 81 fe fe ff       	call   c000deb2 <Device::addChild(Device*)>
c001e031:	8b 07                	mov    eax,DWORD PTR [edi]
c001e033:	53                   	push   ebx
c001e034:	55                   	push   ebp
c001e035:	6a 00                	push   0x0
c001e037:	57                   	push   edi
c001e038:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e03b:	83 c4 20             	add    esp,0x20
c001e03e:	45                   	inc    ebp
c001e03f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e044:	74 0d                	je     c001e053 <IDE::detect()+0x251>
c001e046:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e04e:	e9 e0 fd ff ff       	jmp    c001de33 <IDE::detect()+0x31>
c001e053:	4e                   	dec    esi
c001e054:	74 61                	je     c001e0b7 <IDE::detect()+0x2b5>
c001e056:	be 01 00 00 00       	mov    esi,0x1
c001e05b:	e9 cb fd ff ff       	jmp    c001de2b <IDE::detect()+0x29>
c001e060:	50                   	push   eax
c001e061:	6a 04                	push   0x4
c001e063:	56                   	push   esi
c001e064:	53                   	push   ebx
c001e065:	e8 30 f7 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001e06a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e06e:	83 c4 0c             	add    esp,0xc
c001e071:	6a 05                	push   0x5
c001e073:	56                   	push   esi
c001e074:	53                   	push   ebx
c001e075:	e8 20 f7 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001e07a:	83 c4 10             	add    esp,0x10
c001e07d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e081:	80 fa 14             	cmp    dl,0x14
c001e084:	75 04                	jne    c001e08a <IDE::detect()+0x288>
c001e086:	3c eb                	cmp    al,0xeb
c001e088:	eb 07                	jmp    c001e091 <IDE::detect()+0x28f>
c001e08a:	3c 96                	cmp    al,0x96
c001e08c:	75 b1                	jne    c001e03f <IDE::detect()+0x23d>
c001e08e:	80 fa 69             	cmp    dl,0x69
c001e091:	75 ac                	jne    c001e03f <IDE::detect()+0x23d>
c001e093:	68 a1 00 00 00       	push   0xa1
c001e098:	6a 07                	push   0x7
c001e09a:	56                   	push   esi
c001e09b:	53                   	push   ebx
c001e09c:	e8 39 f6 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0a1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e0a8:	e8 4b a1 ff ff       	call   c00181f8 <milliTenthSleep(unsigned int)>
c001e0ad:	83 c4 10             	add    esp,0x10
c001e0b0:	b1 01                	mov    cl,0x1
c001e0b2:	e9 6d fe ff ff       	jmp    c001df24 <IDE::detect()+0x122>
c001e0b7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e0bd:	5b                   	pop    ebx
c001e0be:	5e                   	pop    esi
c001e0bf:	5f                   	pop    edi
c001e0c0:	5d                   	pop    ebp
c001e0c1:	c3                   	ret    

c001e0c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e0c2:	55                   	push   ebp
c001e0c3:	57                   	push   edi
c001e0c4:	56                   	push   esi
c001e0c5:	53                   	push   ebx
c001e0c6:	83 ec 1c             	sub    esp,0x1c
c001e0c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e0d1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0d5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e0d9:	88 c3                	mov    bl,al
c001e0db:	84 c0                	test   al,al
c001e0dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0e1:	0f 84 81 00 00 00    	je     c001e168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0e7:	83 ec 0c             	sub    esp,0xc
c001e0ea:	68 e7 4f 02 c0       	push   0xc0024fe7
c001e0ef:	e8 77 e9 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e0f4:	83 c4 10             	add    esp,0x10
c001e0f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0fb:	3c 01                	cmp    al,0x1
c001e0fd:	74 63                	je     c001e162 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e0ff:	3c 02                	cmp    al,0x2
c001e101:	75 53                	jne    c001e156 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e103:	d1 e6                	shl    esi,1
c001e105:	09 ee                	or     esi,ebp
c001e107:	50                   	push   eax
c001e108:	89 f0                	mov    eax,esi
c001e10a:	6a 01                	push   0x1
c001e10c:	0f b6 f0             	movzx  esi,al
c001e10f:	c1 e6 06             	shl    esi,0x6
c001e112:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e11a:	50                   	push   eax
c001e11b:	57                   	push   edi
c001e11c:	e8 79 f6 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001e121:	83 c4 10             	add    esp,0x10
c001e124:	a8 01                	test   al,0x1
c001e126:	74 02                	je     c001e12a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e128:	b3 07                	mov    bl,0x7
c001e12a:	a8 02                	test   al,0x2
c001e12c:	74 02                	je     c001e130 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e12e:	b3 03                	mov    bl,0x3
c001e130:	a8 04                	test   al,0x4
c001e132:	74 02                	je     c001e136 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e134:	b3 14                	mov    bl,0x14
c001e136:	a8 08                	test   al,0x8
c001e138:	74 02                	je     c001e13c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e13a:	b3 03                	mov    bl,0x3
c001e13c:	a8 10                	test   al,0x10
c001e13e:	74 02                	je     c001e142 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e140:	b3 15                	mov    bl,0x15
c001e142:	a8 20                	test   al,0x20
c001e144:	74 02                	je     c001e148 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e146:	b3 03                	mov    bl,0x3
c001e148:	a8 40                	test   al,0x40
c001e14a:	74 02                	je     c001e14e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e14c:	b3 16                	mov    bl,0x16
c001e14e:	84 c0                	test   al,al
c001e150:	79 16                	jns    c001e168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e152:	b3 0d                	mov    bl,0xd
c001e154:	eb 12                	jmp    c001e168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e156:	3c 03                	cmp    al,0x3
c001e158:	74 0c                	je     c001e166 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e15a:	3c 04                	cmp    al,0x4
c001e15c:	75 0a                	jne    c001e168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15e:	b3 08                	mov    bl,0x8
c001e160:	eb 06                	jmp    c001e168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e162:	b3 13                	mov    bl,0x13
c001e164:	eb 02                	jmp    c001e168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e166:	b3 17                	mov    bl,0x17
c001e168:	83 c4 1c             	add    esp,0x1c
c001e16b:	88 d8                	mov    al,bl
c001e16d:	5b                   	pop    ebx
c001e16e:	5e                   	pop    esi
c001e16f:	5f                   	pop    edi
c001e170:	5d                   	pop    ebp
c001e171:	c3                   	ret    

c001e172 <IDE::polling(unsigned char, unsigned int)>:
c001e172:	57                   	push   edi
c001e173:	56                   	push   esi
c001e174:	53                   	push   ebx
c001e175:	bb 04 00 00 00       	mov    ebx,0x4
c001e17a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e17e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e183:	52                   	push   edx
c001e184:	6a 0c                	push   0xc
c001e186:	56                   	push   esi
c001e187:	57                   	push   edi
c001e188:	e8 0d f6 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	4b                   	dec    ebx
c001e191:	75 f0                	jne    c001e183 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e193:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e198:	50                   	push   eax
c001e199:	6a 0c                	push   0xc
c001e19b:	56                   	push   esi
c001e19c:	57                   	push   edi
c001e19d:	e8 f8 f5 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	a8 01                	test   al,0x1
c001e1a7:	75 17                	jne    c001e1c0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1a9:	a8 20                	test   al,0x20
c001e1ab:	75 0f                	jne    c001e1bc <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e1ad:	4b                   	dec    ebx
c001e1ae:	74 10                	je     c001e1c0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1b0:	84 c0                	test   al,al
c001e1b2:	78 e4                	js     c001e198 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1b4:	a8 08                	test   al,0x8
c001e1b6:	74 e0                	je     c001e198 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1b8:	31 c0                	xor    eax,eax
c001e1ba:	eb 06                	jmp    c001e1c2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1bc:	b0 01                	mov    al,0x1
c001e1be:	eb 02                	jmp    c001e1c2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1c0:	b0 02                	mov    al,0x2
c001e1c2:	5b                   	pop    ebx
c001e1c3:	5e                   	pop    esi
c001e1c4:	5f                   	pop    edi
c001e1c5:	c3                   	ret    

c001e1c6 <SATABus::close(int, int, void*)>:
c001e1c6:	31 c0                	xor    eax,eax
c001e1c8:	c3                   	ret    
c001e1c9:	90                   	nop

c001e1ca <SATABus::detect()>:
c001e1ca:	c3                   	ret    
c001e1cb:	90                   	nop

c001e1cc <SATABus::SATABus()>:
c001e1cc:	83 ec 0c             	sub    esp,0xc
c001e1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d3:	83 ec 08             	sub    esp,0x8
c001e1d6:	68 20 50 02 c0       	push   0xc0025020
c001e1db:	50                   	push   eax
c001e1dc:	e8 7f 00 ff ff       	call   c000e260 <HardDiskController::HardDiskController(char const*)>
c001e1e1:	83 c4 10             	add    esp,0x10
c001e1e4:	ba 74 50 02 c0       	mov    edx,0xc0025074
c001e1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ed:	89 10                	mov    DWORD PTR [eax],edx
c001e1ef:	83 ec 0c             	sub    esp,0xc
c001e1f2:	6a 50                	push   0x50
c001e1f4:	e8 e0 bc fe ff       	call   c0009ed9 <Phys::allocateContiguousPages(int)>
c001e1f9:	83 c4 10             	add    esp,0x10
c001e1fc:	89 c2                	mov    edx,eax
c001e1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e202:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e208:	83 ec 0c             	sub    esp,0xc
c001e20b:	6a 50                	push   0x50
c001e20d:	e8 87 d4 fe ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c001e212:	83 c4 10             	add    esp,0x10
c001e215:	89 c2                	mov    edx,eax
c001e217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e221:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c001e226:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e22a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e234:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e23a:	83 ec 0c             	sub    esp,0xc
c001e23d:	6a 03                	push   0x3
c001e23f:	6a 50                	push   0x50
c001e241:	51                   	push   ecx
c001e242:	52                   	push   edx
c001e243:	50                   	push   eax
c001e244:	e8 ed dd fe ff       	call   c000c036 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e249:	83 c4 20             	add    esp,0x20
c001e24c:	90                   	nop
c001e24d:	83 c4 0c             	add    esp,0xc
c001e250:	c3                   	ret    
c001e251:	90                   	nop

c001e252 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e252:	83 ec 0c             	sub    esp,0xc
c001e255:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e259:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e25c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e25f:	09 c2                	or     edx,eax
c001e261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e265:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e26b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e26d:	31 c0                	xor    eax,eax
c001e26f:	c1 e9 08             	shr    ecx,0x8
c001e272:	83 e1 0f             	and    ecx,0xf
c001e275:	39 c8                	cmp    eax,ecx
c001e277:	74 0a                	je     c001e283 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e279:	f6 c2 01             	test   dl,0x1
c001e27c:	74 18                	je     c001e296 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e27e:	d1 ea                	shr    edx,1
c001e280:	40                   	inc    eax
c001e281:	eb f2                	jmp    c001e275 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e283:	83 ec 0c             	sub    esp,0xc
c001e286:	68 44 50 02 c0       	push   0xc0025044
c001e28b:	e8 9d 60 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001e290:	83 c4 10             	add    esp,0x10
c001e293:	83 c8 ff             	or     eax,0xffffffff
c001e296:	83 c4 0c             	add    esp,0xc
c001e299:	c3                   	ret    

c001e29a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e29a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e29e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e2a1:	89 c2                	mov    edx,eax
c001e2a3:	c1 ea 08             	shr    edx,0x8
c001e2a6:	83 e2 0f             	and    edx,0xf
c001e2a9:	fe ca                	dec    dl
c001e2ab:	75 31                	jne    c001e2de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2ad:	83 e0 0f             	and    eax,0xf
c001e2b0:	3c 03                	cmp    al,0x3
c001e2b2:	75 2a                	jne    c001e2de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2b4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e2b7:	b8 02 00 00 00       	mov    eax,0x2
c001e2bc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e2c2:	74 1c                	je     c001e2e0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2c4:	b8 04 00 00 00       	mov    eax,0x4
c001e2c9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e2cf:	74 0f                	je     c001e2e0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2d1:	31 c0                	xor    eax,eax
c001e2d3:	83 fa 03             	cmp    edx,0x3
c001e2d6:	0f 94 c0             	sete   al
c001e2d9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e2dd:	c3                   	ret    
c001e2de:	31 c0                	xor    eax,eax
c001e2e0:	c3                   	ret    
c001e2e1:	90                   	nop

c001e2e2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e2e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2e9:	0f ba e2 0f          	bt     edx,0xf
c001e2ed:	72 f7                	jb     c001e2e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e2ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2f2:	83 ca 10             	or     edx,0x10
c001e2f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2fb:	83 ca 01             	or     edx,0x1
c001e2fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e301:	c3                   	ret    

c001e302 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e302:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e306:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e309:	83 e2 fe             	and    edx,0xfffffffe
c001e30c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e30f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e312:	83 e2 ef             	and    edx,0xffffffef
c001e315:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e318:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e31b:	0f ba e2 0e          	bt     edx,0xe
c001e31f:	72 f7                	jb     c001e318 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e321:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e324:	0f ba e2 0f          	bt     edx,0xf
c001e328:	72 ee                	jb     c001e318 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e32a:	c3                   	ret    
c001e32b:	90                   	nop

c001e32c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e32c:	55                   	push   ebp
c001e32d:	57                   	push   edi
c001e32e:	56                   	push   esi
c001e32f:	53                   	push   ebx
c001e330:	83 ec 1c             	sub    esp,0x1c
c001e333:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e337:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e33b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e33f:	53                   	push   ebx
c001e340:	89 fd                	mov    ebp,edi
c001e342:	56                   	push   esi
c001e343:	c1 e5 0a             	shl    ebp,0xa
c001e346:	e8 b7 ff ff ff       	call   c001e302 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e34b:	83 ec 0c             	sub    esp,0xc
c001e34e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e354:	01 e8                	add    eax,ebp
c001e356:	89 03                	mov    DWORD PTR [ebx],eax
c001e358:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e35a:	68 00 04 00 00       	push   0x400
c001e35f:	6a 00                	push   0x0
c001e361:	50                   	push   eax
c001e362:	e8 1d 23 fe ff       	call   c0000684 <memset>
c001e367:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e36d:	89 fa                	mov    edx,edi
c001e36f:	01 e8                	add    eax,ebp
c001e371:	c1 e7 0d             	shl    edi,0xd
c001e374:	89 03                	mov    DWORD PTR [ebx],eax
c001e376:	c1 e2 08             	shl    edx,0x8
c001e379:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e380:	81 c2 00 80 00 00    	add    edx,0x8000
c001e386:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e38a:	89 d0                	mov    eax,edx
c001e38c:	83 c4 1c             	add    esp,0x1c
c001e38f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e395:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e398:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e39b:	68 00 01 00 00       	push   0x100
c001e3a0:	6a 00                	push   0x0
c001e3a2:	50                   	push   eax
c001e3a3:	e8 dc 22 fe ff       	call   c0000684 <memset>
c001e3a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3ac:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e3b2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e3b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3bc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e3bf:	83 c4 10             	add    esp,0x10
c001e3c2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e3c9:	31 ff                	xor    edi,edi
c001e3cb:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e3d1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e3d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3db:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e3e1:	83 c5 20             	add    ebp,0x20
c001e3e4:	01 f8                	add    eax,edi
c001e3e6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e3e9:	52                   	push   edx
c001e3ea:	68 00 01 00 00       	push   0x100
c001e3ef:	6a 00                	push   0x0
c001e3f1:	50                   	push   eax
c001e3f2:	e8 8d 22 fe ff       	call   c0000684 <memset>
c001e3f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3fb:	83 c4 10             	add    esp,0x10
c001e3fe:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e404:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e40b:	01 f8                	add    eax,edi
c001e40d:	81 c7 00 01 00 00    	add    edi,0x100
c001e413:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e416:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e41c:	75 b3                	jne    c001e3d1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e41e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e422:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e426:	83 c4 1c             	add    esp,0x1c
c001e429:	5b                   	pop    ebx
c001e42a:	5e                   	pop    esi
c001e42b:	5f                   	pop    edi
c001e42c:	5d                   	pop    ebp
c001e42d:	e9 b0 fe ff ff       	jmp    c001e2e2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e432 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e432:	55                   	push   ebp
c001e433:	57                   	push   edi
c001e434:	56                   	push   esi
c001e435:	53                   	push   ebx
c001e436:	31 db                	xor    ebx,ebx
c001e438:	83 ec 0c             	sub    esp,0xc
c001e43b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e43f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e443:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e446:	f7 c7 01 00 00 00    	test   edi,0x1
c001e44c:	74 7a                	je     c001e4c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e44e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e452:	89 d8                	mov    eax,ebx
c001e454:	c1 e0 07             	shl    eax,0x7
c001e457:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e45e:	55                   	push   ebp
c001e45f:	56                   	push   esi
c001e460:	e8 35 fe ff ff       	call   c001e29a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e465:	5a                   	pop    edx
c001e466:	83 f8 01             	cmp    eax,0x1
c001e469:	59                   	pop    ecx
c001e46a:	75 21                	jne    c001e48d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e46c:	50                   	push   eax
c001e46d:	53                   	push   ebx
c001e46e:	55                   	push   ebp
c001e46f:	56                   	push   esi
c001e470:	e8 b7 fe ff ff       	call   c001e32c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e475:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e47c:	e8 42 b5 fe ff       	call   c00099c3 <malloc>
c001e481:	89 c5                	mov    ebp,eax
c001e483:	89 04 24             	mov    DWORD PTR [esp],eax
c001e486:	e8 7f 0d 00 00       	call   c001f20a <SATA::SATA()>
c001e48b:	eb 24                	jmp    c001e4b1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e48d:	83 f8 04             	cmp    eax,0x4
c001e490:	75 36                	jne    c001e4c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e492:	51                   	push   ecx
c001e493:	53                   	push   ebx
c001e494:	55                   	push   ebp
c001e495:	56                   	push   esi
c001e496:	e8 91 fe ff ff       	call   c001e32c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e49b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e4a2:	e8 1c b5 fe ff       	call   c00099c3 <malloc>
c001e4a7:	89 c5                	mov    ebp,eax
c001e4a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4ac:	e8 cf 10 00 00       	call   c001f580 <SATAPI::SATAPI()>
c001e4b1:	58                   	pop    eax
c001e4b2:	5a                   	pop    edx
c001e4b3:	55                   	push   ebp
c001e4b4:	56                   	push   esi
c001e4b5:	e8 f8 f9 fe ff       	call   c000deb2 <Device::addChild(Device*)>
c001e4ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e4bd:	56                   	push   esi
c001e4be:	6a 00                	push   0x0
c001e4c0:	53                   	push   ebx
c001e4c1:	55                   	push   ebp
c001e4c2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e4c5:	83 c4 20             	add    esp,0x20
c001e4c8:	d1 ef                	shr    edi,1
c001e4ca:	43                   	inc    ebx
c001e4cb:	83 fb 20             	cmp    ebx,0x20
c001e4ce:	0f 85 72 ff ff ff    	jne    c001e446 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e4d4:	83 c4 0c             	add    esp,0xc
c001e4d7:	5b                   	pop    ebx
c001e4d8:	5e                   	pop    esi
c001e4d9:	5f                   	pop    edi
c001e4da:	5d                   	pop    ebp
c001e4db:	c3                   	ret    

c001e4dc <SATABus::open(int, int, void*)>:
c001e4dc:	83 ec 14             	sub    esp,0x14
c001e4df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e4e3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e4e9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e4ef:	52                   	push   edx
c001e4f0:	50                   	push   eax
c001e4f1:	e8 3c ff ff ff       	call   c001e432 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e4f6:	31 c0                	xor    eax,eax
c001e4f8:	83 c4 1c             	add    esp,0x1c
c001e4fb:	c3                   	ret    

c001e4fc <ATA::close(int, int, void*)>:
c001e4fc:	83 ec 0c             	sub    esp,0xc
c001e4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e503:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e509:	85 c0                	test   eax,eax
c001e50b:	74 0c                	je     c001e519 <ATA::close(int, int, void*)+0x1d>
c001e50d:	83 ec 0c             	sub    esp,0xc
c001e510:	8b 10                	mov    edx,DWORD PTR [eax]
c001e512:	50                   	push   eax
c001e513:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e516:	83 c4 10             	add    esp,0x10
c001e519:	31 c0                	xor    eax,eax
c001e51b:	83 c4 0c             	add    esp,0xc
c001e51e:	c3                   	ret    
c001e51f:	90                   	nop

c001e520 <ATA::powerSaving(PowerSavingLevel)>:
c001e520:	c3                   	ret    
c001e521:	90                   	nop

c001e522 <ATA::ATA()>:
c001e522:	83 ec 0c             	sub    esp,0xc
c001e525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e529:	83 ec 04             	sub    esp,0x4
c001e52c:	68 00 02 00 00       	push   0x200
c001e531:	68 69 51 02 c0       	push   0xc0025169
c001e536:	50                   	push   eax
c001e537:	e8 ae fd fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e53c:	83 c4 10             	add    esp,0x10
c001e53f:	ba ec 50 02 c0       	mov    edx,0xc00250ec
c001e544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e548:	89 10                	mov    DWORD PTR [eax],edx
c001e54a:	90                   	nop
c001e54b:	83 c4 0c             	add    esp,0xc
c001e54e:	c3                   	ret    
c001e54f:	90                   	nop

c001e550 <ATA::flush(bool)>:
c001e550:	53                   	push   ebx
c001e551:	83 ec 08             	sub    esp,0x8
c001e554:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e559:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e55d:	19 c0                	sbb    eax,eax
c001e55f:	83 e0 fd             	and    eax,0xfffffffd
c001e562:	05 ea 00 00 00       	add    eax,0xea
c001e567:	50                   	push   eax
c001e568:	6a 07                	push   0x7
c001e56a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e571:	50                   	push   eax
c001e572:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e578:	e8 5d f1 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e57d:	83 c4 0c             	add    esp,0xc
c001e580:	6a 00                	push   0x0
c001e582:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e589:	50                   	push   eax
c001e58a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e590:	e8 dd fb ff ff       	call   c001e172 <IDE::polling(unsigned char, unsigned int)>
c001e595:	83 c4 18             	add    esp,0x18
c001e598:	5b                   	pop    ebx
c001e599:	c3                   	ret    

c001e59a <ATA::readyForCommand()>:
c001e59a:	56                   	push   esi
c001e59b:	53                   	push   ebx
c001e59c:	53                   	push   ebx
c001e59d:	31 db                	xor    ebx,ebx
c001e59f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5a3:	51                   	push   ecx
c001e5a4:	6a 0c                	push   0xc
c001e5a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e5ad:	50                   	push   eax
c001e5ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e5b4:	e8 e1 f1 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	a8 88                	test   al,0x88
c001e5be:	74 1f                	je     c001e5df <ATA::readyForCommand()+0x45>
c001e5c0:	43                   	inc    ebx
c001e5c1:	83 fb 63             	cmp    ebx,0x63
c001e5c4:	7e dd                	jle    c001e5a3 <ATA::readyForCommand()+0x9>
c001e5c6:	83 ec 0c             	sub    esp,0xc
c001e5c9:	6a 0a                	push   0xa
c001e5cb:	e8 28 9c ff ff       	call   c00181f8 <milliTenthSleep(unsigned int)>
c001e5d0:	83 c4 10             	add    esp,0x10
c001e5d3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e5d9:	75 c8                	jne    c001e5a3 <ATA::readyForCommand()+0x9>
c001e5db:	31 c0                	xor    eax,eax
c001e5dd:	eb 02                	jmp    c001e5e1 <ATA::readyForCommand()+0x47>
c001e5df:	b0 01                	mov    al,0x1
c001e5e1:	5a                   	pop    edx
c001e5e2:	5b                   	pop    ebx
c001e5e3:	5e                   	pop    esi
c001e5e4:	c3                   	ret    
c001e5e5:	90                   	nop

c001e5e6 <ATA::access(unsigned long long, int, void*, bool)>:
c001e5e6:	55                   	push   ebp
c001e5e7:	57                   	push   edi
c001e5e8:	56                   	push   esi
c001e5e9:	53                   	push   ebx
c001e5ea:	83 ec 38             	sub    esp,0x38
c001e5ed:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e5f1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e5f5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e5f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e5fd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e601:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e605:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e609:	68 98 50 02 c0       	push   0xc0025098
c001e60e:	e8 58 e4 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e613:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e619:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e61d:	83 c4 10             	add    esp,0x10
c001e620:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e626:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e62a:	c1 e0 06             	shl    eax,0x6
c001e62d:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e635:	74 5d                	je     c001e694 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e637:	89 fa                	mov    edx,edi
c001e639:	89 f0                	mov    eax,esi
c001e63b:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e63f:	c1 ea 1c             	shr    edx,0x1c
c001e642:	89 d1                	mov    ecx,edx
c001e644:	09 c1                	or     ecx,eax
c001e646:	74 25                	je     c001e66d <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e648:	31 ed                	xor    ebp,ebp
c001e64a:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e651:	89 fa                	mov    edx,edi
c001e653:	89 f0                	mov    eax,esi
c001e655:	0f ad d0             	shrd   eax,edx,cl
c001e658:	d3 ea                	shr    edx,cl
c001e65a:	f6 c1 20             	test   cl,0x20
c001e65d:	74 02                	je     c001e661 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e65f:	89 d0                	mov    eax,edx
c001e661:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e665:	45                   	inc    ebp
c001e666:	83 fd 06             	cmp    ebp,0x6
c001e669:	75 df                	jne    c001e64a <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e66b:	eb 76                	jmp    c001e6e3 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e66d:	89 f0                	mov    eax,esi
c001e66f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e674:	89 fa                	mov    edx,edi
c001e676:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e67d:	0f ac d0 10          	shrd   eax,edx,0x10
c001e681:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e686:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e68a:	c1 ee 18             	shr    esi,0x18
c001e68d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e692:	eb 56                	jmp    c001e6ea <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e694:	6a 00                	push   0x0
c001e696:	6a 3f                	push   0x3f
c001e698:	57                   	push   edi
c001e699:	56                   	push   esi
c001e69a:	e8 95 29 00 00       	call   c0021034 <__umoddi3>
c001e69f:	83 c4 10             	add    esp,0x10
c001e6a2:	40                   	inc    eax
c001e6a3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e6a7:	6a 00                	push   0x0
c001e6a9:	68 f0 03 00 00       	push   0x3f0
c001e6ae:	57                   	push   edi
c001e6af:	56                   	push   esi
c001e6b0:	e8 7f 28 00 00       	call   c0020f34 <__udivdi3>
c001e6b5:	83 c4 10             	add    esp,0x10
c001e6b8:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e6bd:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6c9:	6a 00                	push   0x0
c001e6cb:	6a 3f                	push   0x3f
c001e6cd:	57                   	push   edi
c001e6ce:	56                   	push   esi
c001e6cf:	e8 60 28 00 00       	call   c0020f34 <__udivdi3>
c001e6d4:	83 c4 10             	add    esp,0x10
c001e6d7:	89 c6                	mov    esi,eax
c001e6d9:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e6de:	83 e6 0f             	and    esi,0xf
c001e6e1:	eb 07                	jmp    c001e6ea <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e6e3:	31 f6                	xor    esi,esi
c001e6e5:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e6ea:	bf 01 00 00 00       	mov    edi,0x1
c001e6ef:	50                   	push   eax
c001e6f0:	6a 00                	push   0x0
c001e6f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6f9:	50                   	push   eax
c001e6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e6fe:	e8 df f1 ff ff       	call   c001d8e2 <IDE::enableIRQs(unsigned char, bool)>
c001e703:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e706:	e8 8f fe ff ff       	call   c001e59a <ATA::readyForCommand()>
c001e70b:	83 c4 10             	add    esp,0x10
c001e70e:	84 c0                	test   al,al
c001e710:	0f 84 bc 02 00 00    	je     c001e9d2 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e716:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e71c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e722:	c1 e0 04             	shl    eax,0x4
c001e725:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e72c:	09 c6                	or     esi,eax
c001e72e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e733:	75 05                	jne    c001e73a <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e735:	83 ce a0             	or     esi,0xffffffa0
c001e738:	eb 03                	jmp    c001e73d <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e73a:	83 ce e0             	or     esi,0xffffffe0
c001e73d:	89 f0                	mov    eax,esi
c001e73f:	0f b6 f0             	movzx  esi,al
c001e742:	56                   	push   esi
c001e743:	6a 06                	push   0x6
c001e745:	51                   	push   ecx
c001e746:	52                   	push   edx
c001e747:	e8 8e ef ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e74c:	83 c4 10             	add    esp,0x10
c001e74f:	6a 00                	push   0x0
c001e751:	6a 01                	push   0x1
c001e753:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e75a:	50                   	push   eax
c001e75b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e761:	e8 74 ef ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e766:	83 c4 10             	add    esp,0x10
c001e769:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e76e:	75 6e                	jne    c001e7de <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e770:	6a 00                	push   0x0
c001e772:	6a 08                	push   0x8
c001e774:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e77b:	50                   	push   eax
c001e77c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e782:	e8 53 ef ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e787:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e78c:	50                   	push   eax
c001e78d:	6a 09                	push   0x9
c001e78f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e796:	50                   	push   eax
c001e797:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e79d:	e8 38 ef ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7a2:	83 c4 20             	add    esp,0x20
c001e7a5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7aa:	50                   	push   eax
c001e7ab:	6a 0a                	push   0xa
c001e7ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7b4:	50                   	push   eax
c001e7b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7bb:	e8 1a ef ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7c0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e7c5:	50                   	push   eax
c001e7c6:	6a 0b                	push   0xb
c001e7c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7cf:	50                   	push   eax
c001e7d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7d6:	e8 ff ee ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7db:	83 c4 20             	add    esp,0x20
c001e7de:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e7e3:	50                   	push   eax
c001e7e4:	6a 02                	push   0x2
c001e7e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ed:	50                   	push   eax
c001e7ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7f4:	e8 e1 ee ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e7fe:	50                   	push   eax
c001e7ff:	6a 03                	push   0x3
c001e801:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e808:	50                   	push   eax
c001e809:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e80f:	e8 c6 ee ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e814:	83 c4 20             	add    esp,0x20
c001e817:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e81c:	50                   	push   eax
c001e81d:	6a 04                	push   0x4
c001e81f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e826:	50                   	push   eax
c001e827:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e82d:	e8 a8 ee ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e832:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e837:	50                   	push   eax
c001e838:	6a 05                	push   0x5
c001e83a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e841:	50                   	push   eax
c001e842:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e848:	e8 8d ee ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e84d:	83 c4 20             	add    esp,0x20
c001e850:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e855:	0f 94 c0             	sete   al
c001e858:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e85d:	74 09                	je     c001e868 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e85f:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e866:	eb 07                	jmp    c001e86f <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e868:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e86f:	0f b6 c0             	movzx  eax,al
c001e872:	50                   	push   eax
c001e873:	6a 07                	push   0x7
c001e875:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e87c:	50                   	push   eax
c001e87d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e883:	e8 52 ee ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e888:	c7 04 24 a5 50 02 c0 	mov    DWORD PTR [esp],0xc00250a5
c001e88f:	e8 d7 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e894:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e898:	83 c4 10             	add    esp,0x10
c001e89b:	85 f6                	test   esi,esi
c001e89d:	0f 84 f7 00 00 00    	je     c001e99a <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e8a3:	83 ec 0c             	sub    esp,0xc
c001e8a6:	68 a8 50 02 c0       	push   0xc00250a8
c001e8ab:	e8 bb e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e8b0:	83 c4 0c             	add    esp,0xc
c001e8b3:	6a 01                	push   0x1
c001e8b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8bc:	50                   	push   eax
c001e8bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8c3:	e8 aa f8 ff ff       	call   c001e172 <IDE::polling(unsigned char, unsigned int)>
c001e8c8:	c7 04 24 ab 50 02 c0 	mov    DWORD PTR [esp],0xc00250ab
c001e8cf:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8d3:	e8 93 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e8d8:	83 c4 10             	add    esp,0x10
c001e8db:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e8df:	84 c0                	test   al,al
c001e8e1:	74 2b                	je     c001e90e <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e8e3:	0f b6 f8             	movzx  edi,al
c001e8e6:	57                   	push   edi
c001e8e7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e8ee:	50                   	push   eax
c001e8ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8f6:	50                   	push   eax
c001e8f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8fd:	e8 c0 f7 ff ff       	call   c001e0c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e902:	c7 04 24 ae 50 02 c0 	mov    DWORD PTR [esp],0xc00250ae
c001e909:	e9 bc 00 00 00       	jmp    c001e9ca <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e90e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e913:	74 50                	je     c001e965 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e915:	83 ec 0c             	sub    esp,0xc
c001e918:	31 ed                	xor    ebp,ebp
c001e91a:	68 b9 50 02 c0       	push   0xc00250b9
c001e91f:	e8 47 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e92b:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e92f:	50                   	push   eax
c001e930:	50                   	push   eax
c001e931:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e938:	50                   	push   eax
c001e939:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e93f:	e8 84 ed ff ff       	call   c001d6c8 <IDE::getBase(unsigned char)>
c001e944:	89 c2                	mov    edx,eax
c001e946:	89 f8                	mov    eax,edi
c001e948:	66 ef                	out    dx,ax
c001e94a:	45                   	inc    ebp
c001e94b:	83 c4 10             	add    esp,0x10
c001e94e:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e954:	75 d1                	jne    c001e927 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e956:	83 ec 0c             	sub    esp,0xc
c001e959:	68 bc 50 02 c0       	push   0xc00250bc
c001e95e:	e8 08 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e963:	eb 24                	jmp    c001e989 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e965:	51                   	push   ecx
c001e966:	51                   	push   ecx
c001e967:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e96e:	50                   	push   eax
c001e96f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e975:	e8 4e ed ff ff       	call   c001d6c8 <IDE::getBase(unsigned char)>
c001e97a:	b9 00 01 00 00       	mov    ecx,0x100
c001e97f:	89 c2                	mov    edx,eax
c001e981:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e985:	fc                   	cld    
c001e986:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e989:	83 c4 10             	add    esp,0x10
c001e98c:	4e                   	dec    esi
c001e98d:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e995:	e9 01 ff ff ff       	jmp    c001e89b <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e99a:	31 ff                	xor    edi,edi
c001e99c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e9a1:	74 2f                	je     c001e9d2 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e9a3:	83 ec 0c             	sub    esp,0xc
c001e9a6:	68 bf 50 02 c0       	push   0xc00250bf
c001e9ab:	e8 bb e0 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e9b0:	58                   	pop    eax
c001e9b1:	31 c0                	xor    eax,eax
c001e9b3:	5a                   	pop    edx
c001e9b4:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e9b9:	0f 94 c0             	sete   al
c001e9bc:	50                   	push   eax
c001e9bd:	53                   	push   ebx
c001e9be:	e8 8d fb ff ff       	call   c001e550 <ATA::flush(bool)>
c001e9c3:	c7 04 24 c2 50 02 c0 	mov    DWORD PTR [esp],0xc00250c2
c001e9ca:	e8 9c e0 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e9cf:	83 c4 10             	add    esp,0x10
c001e9d2:	83 c4 2c             	add    esp,0x2c
c001e9d5:	89 f8                	mov    eax,edi
c001e9d7:	5b                   	pop    ebx
c001e9d8:	5e                   	pop    esi
c001e9d9:	5f                   	pop    edi
c001e9da:	5d                   	pop    ebp
c001e9db:	c3                   	ret    

c001e9dc <ATA::read(unsigned long long, int, void*)>:
c001e9dc:	57                   	push   edi
c001e9dd:	b8 04 00 00 00       	mov    eax,0x4
c001e9e2:	56                   	push   esi
c001e9e3:	53                   	push   ebx
c001e9e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e9ec:	8d 7a ff             	lea    edi,[edx-0x1]
c001e9ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e9f7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e9fd:	77 25                	ja     c001ea24 <ATA::read(unsigned long long, int, void*)+0x48>
c001e9ff:	b8 06 00 00 00       	mov    eax,0x6
c001ea04:	85 f6                	test   esi,esi
c001ea06:	74 1c                	je     c001ea24 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea08:	50                   	push   eax
c001ea09:	50                   	push   eax
c001ea0a:	6a 00                	push   0x0
c001ea0c:	56                   	push   esi
c001ea0d:	52                   	push   edx
c001ea0e:	53                   	push   ebx
c001ea0f:	51                   	push   ecx
c001ea10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea14:	e8 cd fb ff ff       	call   c001e5e6 <ATA::access(unsigned long long, int, void*, bool)>
c001ea19:	83 c4 20             	add    esp,0x20
c001ea1c:	85 c0                	test   eax,eax
c001ea1e:	0f 95 c0             	setne  al
c001ea21:	0f b6 c0             	movzx  eax,al
c001ea24:	5b                   	pop    ebx
c001ea25:	5e                   	pop    esi
c001ea26:	5f                   	pop    edi
c001ea27:	c3                   	ret    

c001ea28 <ATA::write(unsigned long long, int, void*)>:
c001ea28:	55                   	push   ebp
c001ea29:	57                   	push   edi
c001ea2a:	56                   	push   esi
c001ea2b:	53                   	push   ebx
c001ea2c:	83 ec 18             	sub    esp,0x18
c001ea2f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea37:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ea3b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ea3f:	68 c5 50 02 c0       	push   0xc00250c5
c001ea44:	e8 22 e0 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001ea49:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ea4c:	83 c4 10             	add    esp,0x10
c001ea4f:	b8 04 00 00 00       	mov    eax,0x4
c001ea54:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ea5a:	77 25                	ja     c001ea81 <ATA::write(unsigned long long, int, void*)+0x59>
c001ea5c:	b8 06 00 00 00       	mov    eax,0x6
c001ea61:	85 f6                	test   esi,esi
c001ea63:	74 1c                	je     c001ea81 <ATA::write(unsigned long long, int, void*)+0x59>
c001ea65:	50                   	push   eax
c001ea66:	50                   	push   eax
c001ea67:	6a 01                	push   0x1
c001ea69:	56                   	push   esi
c001ea6a:	53                   	push   ebx
c001ea6b:	55                   	push   ebp
c001ea6c:	57                   	push   edi
c001ea6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea71:	e8 70 fb ff ff       	call   c001e5e6 <ATA::access(unsigned long long, int, void*, bool)>
c001ea76:	83 c4 20             	add    esp,0x20
c001ea79:	85 c0                	test   eax,eax
c001ea7b:	0f 95 c0             	setne  al
c001ea7e:	0f b6 c0             	movzx  eax,al
c001ea81:	83 c4 0c             	add    esp,0xc
c001ea84:	5b                   	pop    ebx
c001ea85:	5e                   	pop    esi
c001ea86:	5f                   	pop    edi
c001ea87:	5d                   	pop    ebp
c001ea88:	c3                   	ret    
c001ea89:	90                   	nop

c001ea8a <ATA::detectCHS()>:
c001ea8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea8e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea94:	c1 e0 06             	shl    eax,0x6
c001ea97:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ea9d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eaa7:	c7 44 24 04 d1 50 02 c0 	mov    DWORD PTR [esp+0x4],0xc00250d1
c001eaaf:	e9 79 58 ff ff       	jmp    c001432d <Krnl::panic(char const*)>

c001eab4 <ATA::open(int, int, void*)>:
c001eab4:	53                   	push   ebx
c001eab5:	83 ec 08             	sub    esp,0x8
c001eab8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eabc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eac0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eac4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eaca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ead0:	c1 e0 06             	shl    eax,0x6
c001ead3:	01 d0                	add    eax,edx
c001ead5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001eadc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eae2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eae9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eaf3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eaf9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eb00:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb07:	75 0c                	jne    c001eb15 <ATA::open(int, int, void*)+0x61>
c001eb09:	83 ec 0c             	sub    esp,0xc
c001eb0c:	53                   	push   ebx
c001eb0d:	e8 78 ff ff ff       	call   c001ea8a <ATA::detectCHS()>
c001eb12:	83 c4 10             	add    esp,0x10
c001eb15:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb1b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb21:	c1 e0 06             	shl    eax,0x6
c001eb24:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb2b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb35:	d1 e8                	shr    eax,1
c001eb37:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb3d:	6a 04                	push   0x4
c001eb3f:	6a 0c                	push   0xc
c001eb41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb48:	50                   	push   eax
c001eb49:	52                   	push   edx
c001eb4a:	e8 8b eb ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb4f:	90                   	nop
c001eb50:	90                   	nop
c001eb51:	6a 00                	push   0x0
c001eb53:	6a 0c                	push   0xc
c001eb55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb5c:	50                   	push   eax
c001eb5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb63:	e8 72 eb ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb68:	83 c4 14             	add    esp,0x14
c001eb6b:	53                   	push   ebx
c001eb6c:	e8 e1 f7 fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001eb71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb74:	e8 15 18 ff ff       	call   c001038e <createPartitionsForDisk(PhysicalDisk*)>
c001eb79:	31 c0                	xor    eax,eax
c001eb7b:	83 c4 18             	add    esp,0x18
c001eb7e:	5b                   	pop    ebx
c001eb7f:	c3                   	ret    

c001eb80 <ATAPI::write(unsigned long long, int, void*)>:
c001eb80:	b8 03 00 00 00       	mov    eax,0x3
c001eb85:	c3                   	ret    

c001eb86 <ATAPI::close(int, int, void*)>:
c001eb86:	83 ec 0c             	sub    esp,0xc
c001eb89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb93:	85 c0                	test   eax,eax
c001eb95:	74 0c                	je     c001eba3 <ATAPI::close(int, int, void*)+0x1d>
c001eb97:	83 ec 0c             	sub    esp,0xc
c001eb9a:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb9c:	50                   	push   eax
c001eb9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eba0:	83 c4 10             	add    esp,0x10
c001eba3:	31 c0                	xor    eax,eax
c001eba5:	83 c4 0c             	add    esp,0xc
c001eba8:	c3                   	ret    
c001eba9:	90                   	nop

c001ebaa <ATAPI::ATAPI()>:
c001ebaa:	83 ec 0c             	sub    esp,0xc
c001ebad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb1:	83 ec 04             	sub    esp,0x4
c001ebb4:	68 00 08 00 00       	push   0x800
c001ebb9:	68 09 52 02 c0       	push   0xc0025209
c001ebbe:	50                   	push   eax
c001ebbf:	e8 26 f7 fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ebc4:	83 c4 10             	add    esp,0x10
c001ebc7:	ba 24 51 02 c0       	mov    edx,0xc0025124
c001ebcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd0:	89 10                	mov    DWORD PTR [eax],edx
c001ebd2:	90                   	nop
c001ebd3:	83 c4 0c             	add    esp,0xc
c001ebd6:	c3                   	ret    
c001ebd7:	90                   	nop

c001ebd8 <ATAPI::readyForCommand()>:
c001ebd8:	56                   	push   esi
c001ebd9:	53                   	push   ebx
c001ebda:	53                   	push   ebx
c001ebdb:	31 db                	xor    ebx,ebx
c001ebdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ebe1:	51                   	push   ecx
c001ebe2:	6a 0c                	push   0xc
c001ebe4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ebeb:	50                   	push   eax
c001ebec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ebf2:	e8 a3 eb ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001ebf7:	83 c4 10             	add    esp,0x10
c001ebfa:	a8 88                	test   al,0x88
c001ebfc:	74 1f                	je     c001ec1d <ATAPI::readyForCommand()+0x45>
c001ebfe:	43                   	inc    ebx
c001ebff:	83 fb 63             	cmp    ebx,0x63
c001ec02:	7e dd                	jle    c001ebe1 <ATAPI::readyForCommand()+0x9>
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	6a 0a                	push   0xa
c001ec09:	e8 ea 95 ff ff       	call   c00181f8 <milliTenthSleep(unsigned int)>
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec17:	75 c8                	jne    c001ebe1 <ATAPI::readyForCommand()+0x9>
c001ec19:	31 c0                	xor    eax,eax
c001ec1b:	eb 02                	jmp    c001ec1f <ATAPI::readyForCommand()+0x47>
c001ec1d:	b0 01                	mov    al,0x1
c001ec1f:	5a                   	pop    edx
c001ec20:	5b                   	pop    ebx
c001ec21:	5e                   	pop    esi
c001ec22:	c3                   	ret    
c001ec23:	90                   	nop

c001ec24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec24:	55                   	push   ebp
c001ec25:	57                   	push   edi
c001ec26:	56                   	push   esi
c001ec27:	53                   	push   ebx
c001ec28:	83 ec 20             	sub    esp,0x20
c001ec2b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ec2f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ec33:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ec37:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec3b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ec3f:	6a 01                	push   0x1
c001ec41:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec48:	50                   	push   eax
c001ec49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec4f:	e8 8e ec ff ff       	call   c001d8e2 <IDE::enableIRQs(unsigned char, bool)>
c001ec54:	5e                   	pop    esi
c001ec55:	58                   	pop    eax
c001ec56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec5d:	50                   	push   eax
c001ec5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec64:	e8 4b ea ff ff       	call   c001d6b4 <IDE::prepareInterrupt(unsigned char)>
c001ec69:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec6c:	e8 67 ff ff ff       	call   c001ebd8 <ATAPI::readyForCommand()>
c001ec71:	83 c4 10             	add    esp,0x10
c001ec74:	84 c0                	test   al,al
c001ec76:	75 0a                	jne    c001ec82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ec78:	bb 01 00 00 00       	mov    ebx,0x1
c001ec7d:	e9 57 02 00 00       	jmp    c001eed9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ec82:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ec88:	c1 e0 04             	shl    eax,0x4
c001ec8b:	0f b6 c0             	movzx  eax,al
c001ec8e:	50                   	push   eax
c001ec8f:	6a 06                	push   0x6
c001ec91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec98:	50                   	push   eax
c001ec99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec9f:	e8 36 ea ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eca4:	6a 00                	push   0x0
c001eca6:	6a 01                	push   0x1
c001eca8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecaf:	50                   	push   eax
c001ecb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecb6:	e8 1f ea ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecbb:	83 c4 20             	add    esp,0x20
c001ecbe:	0f b6 c3             	movzx  eax,bl
c001ecc1:	0f b6 df             	movzx  ebx,bh
c001ecc4:	50                   	push   eax
c001ecc5:	6a 04                	push   0x4
c001ecc7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecce:	50                   	push   eax
c001eccf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecd5:	e8 00 ea ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecda:	53                   	push   ebx
c001ecdb:	6a 05                	push   0x5
c001ecdd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ece4:	50                   	push   eax
c001ece5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eceb:	e8 ea e9 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecf0:	83 c4 20             	add    esp,0x20
c001ecf3:	68 a0 00 00 00       	push   0xa0
c001ecf8:	6a 07                	push   0x7
c001ecfa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed01:	50                   	push   eax
c001ed02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed08:	e8 cd e9 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed0d:	83 c4 0c             	add    esp,0xc
c001ed10:	6a 01                	push   0x1
c001ed12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed19:	50                   	push   eax
c001ed1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed20:	e8 4d f4 ff ff       	call   c001e172 <IDE::polling(unsigned char, unsigned int)>
c001ed25:	83 c4 10             	add    esp,0x10
c001ed28:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ed2e:	84 c0                	test   al,al
c001ed30:	74 23                	je     c001ed55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ed32:	0f b6 d8             	movzx  ebx,al
c001ed35:	0f b6 d2             	movzx  edx,dl
c001ed38:	53                   	push   ebx
c001ed39:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ed40:	50                   	push   eax
c001ed41:	52                   	push   edx
c001ed42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed48:	e8 75 f3 ff ff       	call   c001e0c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ed4d:	83 c4 10             	add    esp,0x10
c001ed50:	e9 84 01 00 00       	jmp    c001eed9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed55:	0f b6 d2             	movzx  edx,dl
c001ed58:	53                   	push   ebx
c001ed59:	53                   	push   ebx
c001ed5a:	52                   	push   edx
c001ed5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed61:	e8 62 e9 ff ff       	call   c001d6c8 <IDE::getBase(unsigned char)>
c001ed66:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ed6a:	b9 06 00 00 00       	mov    ecx,0x6
c001ed6f:	89 c2                	mov    edx,eax
c001ed71:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ed74:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ed78:	83 c4 10             	add    esp,0x10
c001ed7b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed81:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed88:	85 db                	test   ebx,ebx
c001ed8a:	0f 84 ec 00 00 00    	je     c001ee7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ed90:	51                   	push   ecx
c001ed91:	51                   	push   ecx
c001ed92:	52                   	push   edx
c001ed93:	50                   	push   eax
c001ed94:	e8 af ea ff ff       	call   c001d848 <IDE::waitInterrupt(unsigned char)>
c001ed99:	83 c4 10             	add    esp,0x10
c001ed9c:	84 c0                	test   al,al
c001ed9e:	0f 84 d4 fe ff ff    	je     c001ec78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001eda4:	56                   	push   esi
c001eda5:	56                   	push   esi
c001eda6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edad:	50                   	push   eax
c001edae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edb4:	e8 fb e8 ff ff       	call   c001d6b4 <IDE::prepareInterrupt(unsigned char)>
c001edb9:	83 c4 0c             	add    esp,0xc
c001edbc:	6a 04                	push   0x4
c001edbe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edc5:	50                   	push   eax
c001edc6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edcc:	e8 c9 e9 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001edd1:	83 c4 0c             	add    esp,0xc
c001edd4:	89 c6                	mov    esi,eax
c001edd6:	6a 05                	push   0x5
c001edd8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eddf:	50                   	push   eax
c001ede0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ede6:	e8 af e9 ff ff       	call   c001d79a <IDE::read(unsigned char, unsigned char)>
c001edeb:	89 f1                	mov    ecx,esi
c001eded:	0f b6 c0             	movzx  eax,al
c001edf0:	0f b6 f1             	movzx  esi,cl
c001edf3:	c1 e0 08             	shl    eax,0x8
c001edf6:	09 c6                	or     esi,eax
c001edf8:	d1 fe                	sar    esi,1
c001edfa:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001edfe:	83 c4 10             	add    esp,0x10
c001ee01:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee06:	74 41                	je     c001ee49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee08:	31 c9                	xor    ecx,ecx
c001ee0a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee10:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee17:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee1b:	75 0a                	jne    c001ee27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee1d:	01 c9                	add    ecx,ecx
c001ee1f:	01 cd                	add    ebp,ecx
c001ee21:	4b                   	dec    ebx
c001ee22:	e9 54 ff ff ff       	jmp    c001ed7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee27:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ee2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee30:	51                   	push   ecx
c001ee31:	51                   	push   ecx
c001ee32:	52                   	push   edx
c001ee33:	50                   	push   eax
c001ee34:	e8 8f e8 ff ff       	call   c001d6c8 <IDE::getBase(unsigned char)>
c001ee39:	89 c2                	mov    edx,eax
c001ee3b:	89 f0                	mov    eax,esi
c001ee3d:	66 ef                	out    dx,ax
c001ee3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ee43:	83 c4 10             	add    esp,0x10
c001ee46:	41                   	inc    ecx
c001ee47:	eb c1                	jmp    c001ee0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ee49:	31 f6                	xor    esi,esi
c001ee4b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee51:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee58:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ee5c:	75 06                	jne    c001ee64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ee5e:	01 f6                	add    esi,esi
c001ee60:	01 f5                	add    ebp,esi
c001ee62:	eb bd                	jmp    c001ee21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ee64:	51                   	push   ecx
c001ee65:	51                   	push   ecx
c001ee66:	52                   	push   edx
c001ee67:	50                   	push   eax
c001ee68:	e8 5b e8 ff ff       	call   c001d6c8 <IDE::getBase(unsigned char)>
c001ee6d:	89 c2                	mov    edx,eax
c001ee6f:	66 ed                	in     ax,dx
c001ee71:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ee76:	83 c4 10             	add    esp,0x10
c001ee79:	46                   	inc    esi
c001ee7a:	eb cf                	jmp    c001ee4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ee7c:	51                   	push   ecx
c001ee7d:	51                   	push   ecx
c001ee7e:	52                   	push   edx
c001ee7f:	50                   	push   eax
c001ee80:	e8 c3 e9 ff ff       	call   c001d848 <IDE::waitInterrupt(unsigned char)>
c001ee85:	83 c4 10             	add    esp,0x10
c001ee88:	84 c0                	test   al,al
c001ee8a:	0f 84 e8 fd ff ff    	je     c001ec78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee90:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee95:	52                   	push   edx
c001ee96:	52                   	push   edx
c001ee97:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee9e:	50                   	push   eax
c001ee9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eea5:	e8 0a e8 ff ff       	call   c001d6b4 <IDE::prepareInterrupt(unsigned char)>
c001eeaa:	83 c4 10             	add    esp,0x10
c001eead:	50                   	push   eax
c001eeae:	50                   	push   eax
c001eeaf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eeb6:	50                   	push   eax
c001eeb7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eebd:	e8 06 e8 ff ff       	call   c001d6c8 <IDE::getBase(unsigned char)>
c001eec2:	8d 50 07             	lea    edx,[eax+0x7]
c001eec5:	ec                   	in     al,dx
c001eec6:	83 c4 10             	add    esp,0x10
c001eec9:	a8 88                	test   al,0x88
c001eecb:	74 0a                	je     c001eed7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001eecd:	4b                   	dec    ebx
c001eece:	75 dd                	jne    c001eead <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001eed0:	bb 02 00 00 00       	mov    ebx,0x2
c001eed5:	eb 02                	jmp    c001eed9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eed7:	31 db                	xor    ebx,ebx
c001eed9:	83 c4 1c             	add    esp,0x1c
c001eedc:	89 d8                	mov    eax,ebx
c001eede:	5b                   	pop    ebx
c001eedf:	5e                   	pop    esi
c001eee0:	5f                   	pop    edi
c001eee1:	5d                   	pop    ebp
c001eee2:	c3                   	ret    
c001eee3:	90                   	nop

c001eee4 <ATAPI::diskRemoved()>:
c001eee4:	83 ec 18             	sub    esp,0x18
c001eee7:	68 15 52 02 c0       	push   0xc0025215
c001eeec:	e8 7a db fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001eef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eef5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001eefc:	83 c4 1c             	add    esp,0x1c
c001eeff:	c3                   	ret    

c001ef00 <ATAPI::eject()>:
c001ef00:	57                   	push   edi
c001ef01:	b9 03 00 00 00       	mov    ecx,0x3
c001ef06:	53                   	push   ebx
c001ef07:	83 ec 14             	sub    esp,0x14
c001ef0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef0e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef12:	fc                   	cld    
c001ef13:	31 c0                	xor    eax,eax
c001ef15:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef17:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef1c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef21:	50                   	push   eax
c001ef22:	50                   	push   eax
c001ef23:	6a 00                	push   0x0
c001ef25:	6a 00                	push   0x0
c001ef27:	6a 00                	push   0x0
c001ef29:	6a 02                	push   0x2
c001ef2b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ef2f:	50                   	push   eax
c001ef30:	53                   	push   ebx
c001ef31:	e8 ee fc ff ff       	call   c001ec24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef36:	83 c4 14             	add    esp,0x14
c001ef39:	53                   	push   ebx
c001ef3a:	e8 a5 ff ff ff       	call   c001eee4 <ATAPI::diskRemoved()>
c001ef3f:	83 c4 24             	add    esp,0x24
c001ef42:	31 c0                	xor    eax,eax
c001ef44:	5b                   	pop    ebx
c001ef45:	5f                   	pop    edi
c001ef46:	c3                   	ret    
c001ef47:	90                   	nop

c001ef48 <ATAPI::diskInserted()>:
c001ef48:	53                   	push   ebx
c001ef49:	83 ec 14             	sub    esp,0x14
c001ef4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ef50:	68 2c 52 02 c0       	push   0xc002522c
c001ef55:	e8 11 db fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001ef5a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ef61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef64:	e8 e9 f3 fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001ef69:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ef6d:	83 c4 18             	add    esp,0x18
c001ef70:	5b                   	pop    ebx
c001ef71:	e9 18 14 ff ff       	jmp    c001038e <createPartitionsForDisk(PhysicalDisk*)>

c001ef76 <ATAPI::detectMedia()>:
c001ef76:	56                   	push   esi
c001ef77:	53                   	push   ebx
c001ef78:	83 ec 28             	sub    esp,0x28
c001ef7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef7f:	6a 0c                	push   0xc
c001ef81:	6a 00                	push   0x0
c001ef83:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ef87:	56                   	push   esi
c001ef88:	e8 f7 16 fe ff       	call   c0000684 <memset>
c001ef8d:	58                   	pop    eax
c001ef8e:	5a                   	pop    edx
c001ef8f:	6a 00                	push   0x0
c001ef91:	6a 00                	push   0x0
c001ef93:	6a 00                	push   0x0
c001ef95:	6a 00                	push   0x0
c001ef97:	56                   	push   esi
c001ef98:	53                   	push   ebx
c001ef99:	e8 86 fc ff ff       	call   c001ec24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef9e:	83 c4 1c             	add    esp,0x1c
c001efa1:	6a 0c                	push   0xc
c001efa3:	6a 00                	push   0x0
c001efa5:	56                   	push   esi
c001efa6:	e8 d9 16 fe ff       	call   c0000684 <memset>
c001efab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001efb0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001efb5:	59                   	pop    ecx
c001efb6:	58                   	pop    eax
c001efb7:	6a 01                	push   0x1
c001efb9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001efbd:	50                   	push   eax
c001efbe:	6a 00                	push   0x0
c001efc0:	6a 12                	push   0x12
c001efc2:	56                   	push   esi
c001efc3:	53                   	push   ebx
c001efc4:	e8 5b fc ff ff       	call   c001ec24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efc9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001efcd:	83 c4 20             	add    esp,0x20
c001efd0:	83 e0 7f             	and    eax,0x7f
c001efd3:	3c 70                	cmp    al,0x70
c001efd5:	74 15                	je     c001efec <ATAPI::detectMedia()+0x76>
c001efd7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001efde:	75 0c                	jne    c001efec <ATAPI::detectMedia()+0x76>
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	53                   	push   ebx
c001efe4:	e8 5f ff ff ff       	call   c001ef48 <ATAPI::diskInserted()>
c001efe9:	83 c4 10             	add    esp,0x10
c001efec:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eff0:	83 e0 0f             	and    eax,0xf
c001eff3:	3c 02                	cmp    al,0x2
c001eff5:	75 1b                	jne    c001f012 <ATAPI::detectMedia()+0x9c>
c001eff7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001effc:	75 2d                	jne    c001f02b <ATAPI::detectMedia()+0xb5>
c001effe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f005:	74 24                	je     c001f02b <ATAPI::detectMedia()+0xb5>
c001f007:	83 ec 0c             	sub    esp,0xc
c001f00a:	53                   	push   ebx
c001f00b:	e8 d4 fe ff ff       	call   c001eee4 <ATAPI::diskRemoved()>
c001f010:	eb 16                	jmp    c001f028 <ATAPI::detectMedia()+0xb2>
c001f012:	84 c0                	test   al,al
c001f014:	75 15                	jne    c001f02b <ATAPI::detectMedia()+0xb5>
c001f016:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f01d:	75 0c                	jne    c001f02b <ATAPI::detectMedia()+0xb5>
c001f01f:	83 ec 0c             	sub    esp,0xc
c001f022:	53                   	push   ebx
c001f023:	e8 20 ff ff ff       	call   c001ef48 <ATAPI::diskInserted()>
c001f028:	83 c4 10             	add    esp,0x10
c001f02b:	83 c4 24             	add    esp,0x24
c001f02e:	5b                   	pop    ebx
c001f02f:	5e                   	pop    esi
c001f030:	c3                   	ret    
c001f031:	90                   	nop

c001f032 <ATAPI::open(int, int, void*)>:
c001f032:	53                   	push   ebx
c001f033:	83 ec 08             	sub    esp,0x8
c001f036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f03a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f03e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f042:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f048:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f04e:	c1 e0 06             	shl    eax,0x6
c001f051:	01 d0                	add    eax,edx
c001f053:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f05a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f060:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f067:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f071:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f077:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f07e:	6a 04                	push   0x4
c001f080:	6a 0c                	push   0xc
c001f082:	51                   	push   ecx
c001f083:	52                   	push   edx
c001f084:	e8 51 e6 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f089:	90                   	nop
c001f08a:	90                   	nop
c001f08b:	6a 00                	push   0x0
c001f08d:	6a 0c                	push   0xc
c001f08f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f096:	50                   	push   eax
c001f097:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f09d:	e8 38 e6 ff ff       	call   c001d6da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0a2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f0a9:	83 c4 14             	add    esp,0x14
c001f0ac:	53                   	push   ebx
c001f0ad:	e8 c4 fe ff ff       	call   c001ef76 <ATAPI::detectMedia()>
c001f0b2:	31 c0                	xor    eax,eax
c001f0b4:	83 c4 18             	add    esp,0x18
c001f0b7:	5b                   	pop    ebx
c001f0b8:	c3                   	ret    
c001f0b9:	90                   	nop

c001f0ba <ATAPI::read(unsigned long long, int, void*)>:
c001f0ba:	55                   	push   ebp
c001f0bb:	57                   	push   edi
c001f0bc:	56                   	push   esi
c001f0bd:	53                   	push   ebx
c001f0be:	83 ec 1c             	sub    esp,0x1c
c001f0c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f0c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0c9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f0cd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f0d4:	74 41                	je     c001f117 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f0d6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f0da:	b9 03 00 00 00       	mov    ecx,0x3
c001f0df:	fc                   	cld    
c001f0e0:	31 c0                	xor    eax,eax
c001f0e2:	86 fb                	xchg   bl,bh
c001f0e4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f0e6:	c1 c3 10             	rol    ebx,0x10
c001f0e9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f0ee:	89 e8                	mov    eax,ebp
c001f0f0:	86 fb                	xchg   bl,bh
c001f0f2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f0f6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f0fa:	50                   	push   eax
c001f0fb:	50                   	push   eax
c001f0fc:	55                   	push   ebp
c001f0fd:	c1 e5 0b             	shl    ebp,0xb
c001f100:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f104:	6a 00                	push   0x0
c001f106:	55                   	push   ebp
c001f107:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f10b:	50                   	push   eax
c001f10c:	56                   	push   esi
c001f10d:	e8 12 fb ff ff       	call   c001ec24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f112:	83 c4 20             	add    esp,0x20
c001f115:	eb 1a                	jmp    c001f131 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f117:	83 ec 0c             	sub    esp,0xc
c001f11a:	56                   	push   esi
c001f11b:	e8 56 fe ff ff       	call   c001ef76 <ATAPI::detectMedia()>
c001f120:	83 c4 10             	add    esp,0x10
c001f123:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f12a:	75 aa                	jne    c001f0d6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f12c:	b8 02 00 00 00       	mov    eax,0x2
c001f131:	83 c4 1c             	add    esp,0x1c
c001f134:	5b                   	pop    ebx
c001f135:	5e                   	pop    esi
c001f136:	5f                   	pop    edi
c001f137:	5d                   	pop    ebp
c001f138:	c3                   	ret    
c001f139:	90                   	nop

c001f13a <SATA::close(int, int, void*)>:
c001f13a:	83 ec 0c             	sub    esp,0xc
c001f13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f141:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f147:	85 c0                	test   eax,eax
c001f149:	74 0c                	je     c001f157 <SATA::close(int, int, void*)+0x1d>
c001f14b:	83 ec 0c             	sub    esp,0xc
c001f14e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f150:	50                   	push   eax
c001f151:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f154:	83 c4 10             	add    esp,0x10
c001f157:	31 c0                	xor    eax,eax
c001f159:	83 c4 0c             	add    esp,0xc
c001f15c:	c3                   	ret    
c001f15d:	90                   	nop

c001f15e <SATA::powerSaving(PowerSavingLevel)>:
c001f15e:	c3                   	ret    
c001f15f:	90                   	nop

c001f160 <SATA::open(int, int, void*)>:
c001f160:	56                   	push   esi
c001f161:	53                   	push   ebx
c001f162:	50                   	push   eax
c001f163:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f167:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f16b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f175:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f17b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f185:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f189:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f193:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f199:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f1a0:	e8 26 ac fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f1a5:	89 c6                	mov    esi,eax
c001f1a7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f1ad:	81 c6 00 10 00 00    	add    esi,0x1000
c001f1b3:	e8 13 ac fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f1b8:	39 c6                	cmp    esi,eax
c001f1ba:	74 10                	je     c001f1cc <SATA::open(int, int, void*)+0x6c>
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	68 54 51 02 c0       	push   0xc0025154
c001f1c4:	e8 64 51 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001f1c9:	83 c4 10             	add    esp,0x10
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	6a 02                	push   0x2
c001f1d1:	e8 c3 c4 fe ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c001f1d6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f1dc:	6a 03                	push   0x3
c001f1de:	50                   	push   eax
c001f1df:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f1e5:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c001f1eb:	e8 50 cb fe ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f1f0:	83 c4 14             	add    esp,0x14
c001f1f3:	53                   	push   ebx
c001f1f4:	e8 59 f1 fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001f1f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1fc:	e8 8d 11 ff ff       	call   c001038e <createPartitionsForDisk(PhysicalDisk*)>
c001f201:	83 c4 14             	add    esp,0x14
c001f204:	31 c0                	xor    eax,eax
c001f206:	5b                   	pop    ebx
c001f207:	5e                   	pop    esi
c001f208:	c3                   	ret    
c001f209:	90                   	nop

c001f20a <SATA::SATA()>:
c001f20a:	83 ec 0c             	sub    esp,0xc
c001f20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f211:	83 ec 04             	sub    esp,0x4
c001f214:	68 00 02 00 00       	push   0x200
c001f219:	68 68 51 02 c0       	push   0xc0025168
c001f21e:	50                   	push   eax
c001f21f:	e8 c6 f0 fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f224:	83 c4 10             	add    esp,0x10
c001f227:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c001f22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f230:	89 10                	mov    DWORD PTR [eax],edx
c001f232:	90                   	nop
c001f233:	83 c4 0c             	add    esp,0xc
c001f236:	c3                   	ret    
c001f237:	90                   	nop

c001f238 <SATA::access(unsigned long long, int, void*, bool)>:
c001f238:	55                   	push   ebp
c001f239:	57                   	push   edi
c001f23a:	56                   	push   esi
c001f23b:	53                   	push   ebx
c001f23c:	83 ec 2c             	sub    esp,0x2c
c001f23f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f243:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f247:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f24b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f24f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f253:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f25c:	7e 10                	jle    c001f26e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f25e:	83 ec 0c             	sub    esp,0xc
c001f261:	68 78 51 02 c0       	push   0xc0025178
c001f266:	e8 c2 50 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001f26b:	83 c4 10             	add    esp,0x10
c001f26e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f274:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f27a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f280:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f284:	89 d0                	mov    eax,edx
c001f286:	c1 e0 07             	shl    eax,0x7
c001f289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f28d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f297:	51                   	push   ecx
c001f298:	8d 42 02             	lea    eax,[edx+0x2]
c001f29b:	51                   	push   ecx
c001f29c:	c1 e0 07             	shl    eax,0x7
c001f29f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f2a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2a7:	50                   	push   eax
c001f2a8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f2ae:	e8 9f ef ff ff       	call   c001e252 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f2b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f2b7:	83 c4 10             	add    esp,0x10
c001f2ba:	b8 01 00 00 00       	mov    eax,0x1
c001f2bf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f2c4:	0f 84 cb 01 00 00    	je     c001f495 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f2ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f2ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2d2:	c1 e0 09             	shl    eax,0x9
c001f2d5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f2da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f2de:	74 0e                	je     c001f2ee <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f2e0:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f2e6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f2ea:	89 c1                	mov    ecx,eax
c001f2ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2f2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f2f8:	8d 42 02             	lea    eax,[edx+0x2]
c001f2fb:	c1 e0 07             	shl    eax,0x7
c001f2fe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f302:	8b 00                	mov    eax,DWORD PTR [eax]
c001f304:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f30a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f310:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f314:	c1 e1 05             	shl    ecx,0x5
c001f317:	01 c8                	add    eax,ecx
c001f319:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f31d:	83 e1 01             	and    ecx,0x1
c001f320:	89 ce                	mov    esi,ecx
c001f322:	8a 08                	mov    cl,BYTE PTR [eax]
c001f324:	c1 e6 06             	shl    esi,0x6
c001f327:	83 e1 bf             	and    ecx,0xffffffbf
c001f32a:	09 f1                	or     ecx,esi
c001f32c:	88 08                	mov    BYTE PTR [eax],cl
c001f32e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f330:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f336:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f33c:	89 08                	mov    DWORD PTR [eax],ecx
c001f33e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f344:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f34a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f350:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f353:	50                   	push   eax
c001f354:	68 90 00 00 00       	push   0x90
c001f359:	6a 00                	push   0x0
c001f35b:	56                   	push   esi
c001f35c:	e8 23 13 fe ff       	call   c0000684 <memset>
c001f361:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f367:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f36b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f371:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f375:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f379:	83 c4 10             	add    esp,0x10
c001f37c:	48                   	dec    eax
c001f37d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f382:	89 c1                	mov    ecx,eax
c001f384:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f38a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f38f:	09 c8                	or     eax,ecx
c001f391:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f397:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f39a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f3a1:	66 25 00 7f          	and    ax,0x7f00
c001f3a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3a9:	66 0d 27 80          	or     ax,0x8027
c001f3ad:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f3b2:	66 89 06             	mov    WORD PTR [esi],ax
c001f3b5:	19 c0                	sbb    eax,eax
c001f3b7:	83 e0 f0             	and    eax,0xfffffff0
c001f3ba:	83 c0 35             	add    eax,0x35
c001f3bd:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f3c0:	89 e8                	mov    eax,ebp
c001f3c2:	c1 e8 10             	shr    eax,0x10
c001f3c5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f3c8:	89 e8                	mov    eax,ebp
c001f3ca:	c1 e8 18             	shr    eax,0x18
c001f3cd:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f3d0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f3d4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f3d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f3db:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f3de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f3e2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f3e6:	89 d6                	mov    esi,edx
c001f3e8:	31 c0                	xor    eax,eax
c001f3ea:	c1 e6 07             	shl    esi,0x7
c001f3ed:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f3f1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f3f7:	80 e1 88             	and    cl,0x88
c001f3fa:	74 0a                	je     c001f406 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f3fc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f401:	74 0a                	je     c001f40d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f403:	40                   	inc    eax
c001f404:	eb eb                	jmp    c001f3f1 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f406:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f40b:	75 0a                	jne    c001f417 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f40d:	83 ec 0c             	sub    esp,0xc
c001f410:	68 b1 51 02 c0       	push   0xc00251b1
c001f415:	eb 56                	jmp    c001f46d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f417:	b8 01 00 00 00       	mov    eax,0x1
c001f41c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f420:	c1 e2 07             	shl    edx,0x7
c001f423:	d3 e0                	shl    eax,cl
c001f425:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f429:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f42f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f435:	85 c8                	test   eax,ecx
c001f437:	74 20                	je     c001f459 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f439:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f43f:	0f ba e1 1e          	bt     ecx,0x1e
c001f443:	73 ea                	jae    c001f42f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f445:	83 ec 0c             	sub    esp,0xc
c001f448:	68 bf 51 02 c0       	push   0xc00251bf
c001f44d:	e8 db 4e ff ff       	call   c001432d <Krnl::panic(char const*)>
c001f452:	83 c4 10             	add    esp,0x10
c001f455:	31 c0                	xor    eax,eax
c001f457:	eb 3c                	jmp    c001f495 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f459:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f45f:	0f ba e0 1e          	bt     eax,0x1e
c001f463:	73 17                	jae    c001f47c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f465:	83 ec 0c             	sub    esp,0xc
c001f468:	68 bf 51 02 c0       	push   0xc00251bf
c001f46d:	e8 bb 4e ff ff       	call   c001432d <Krnl::panic(char const*)>
c001f472:	83 c4 10             	add    esp,0x10
c001f475:	b8 01 00 00 00       	mov    eax,0x1
c001f47a:	eb 19                	jmp    c001f495 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f47c:	31 c0                	xor    eax,eax
c001f47e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f483:	75 10                	jne    c001f495 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f485:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f48b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f48f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f493:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f495:	83 c4 2c             	add    esp,0x2c
c001f498:	5b                   	pop    ebx
c001f499:	5e                   	pop    esi
c001f49a:	5f                   	pop    edi
c001f49b:	5d                   	pop    ebp
c001f49c:	c3                   	ret    
c001f49d:	90                   	nop

c001f49e <SATA::read(unsigned long long, int, void*)>:
c001f49e:	57                   	push   edi
c001f49f:	b8 04 00 00 00       	mov    eax,0x4
c001f4a4:	56                   	push   esi
c001f4a5:	53                   	push   ebx
c001f4a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4ae:	8d 7a ff             	lea    edi,[edx-0x1]
c001f4b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f4b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f4b9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f4bf:	77 25                	ja     c001f4e6 <SATA::read(unsigned long long, int, void*)+0x48>
c001f4c1:	b8 06 00 00 00       	mov    eax,0x6
c001f4c6:	85 f6                	test   esi,esi
c001f4c8:	74 1c                	je     c001f4e6 <SATA::read(unsigned long long, int, void*)+0x48>
c001f4ca:	50                   	push   eax
c001f4cb:	50                   	push   eax
c001f4cc:	6a 00                	push   0x0
c001f4ce:	56                   	push   esi
c001f4cf:	52                   	push   edx
c001f4d0:	53                   	push   ebx
c001f4d1:	51                   	push   ecx
c001f4d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f4d6:	e8 5d fd ff ff       	call   c001f238 <SATA::access(unsigned long long, int, void*, bool)>
c001f4db:	83 c4 20             	add    esp,0x20
c001f4de:	85 c0                	test   eax,eax
c001f4e0:	0f 95 c0             	setne  al
c001f4e3:	0f b6 c0             	movzx  eax,al
c001f4e6:	5b                   	pop    ebx
c001f4e7:	5e                   	pop    esi
c001f4e8:	5f                   	pop    edi
c001f4e9:	c3                   	ret    

c001f4ea <SATA::write(unsigned long long, int, void*)>:
c001f4ea:	55                   	push   ebp
c001f4eb:	b8 04 00 00 00       	mov    eax,0x4
c001f4f0:	57                   	push   edi
c001f4f1:	56                   	push   esi
c001f4f2:	53                   	push   ebx
c001f4f3:	83 ec 0c             	sub    esp,0xc
c001f4f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f4fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f4fe:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f501:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f505:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f509:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f50f:	77 3d                	ja     c001f54e <SATA::write(unsigned long long, int, void*)+0x64>
c001f511:	b8 06 00 00 00       	mov    eax,0x6
c001f516:	85 ed                	test   ebp,ebp
c001f518:	74 34                	je     c001f54e <SATA::write(unsigned long long, int, void*)+0x64>
c001f51a:	c1 e3 09             	shl    ebx,0x9
c001f51d:	01 eb                	add    ebx,ebp
c001f51f:	89 d6                	mov    esi,edx
c001f521:	89 cf                	mov    edi,ecx
c001f523:	83 c6 01             	add    esi,0x1
c001f526:	83 d7 00             	adc    edi,0x0
c001f529:	50                   	push   eax
c001f52a:	50                   	push   eax
c001f52b:	6a 01                	push   0x1
c001f52d:	55                   	push   ebp
c001f52e:	81 c5 00 02 00 00    	add    ebp,0x200
c001f534:	6a 01                	push   0x1
c001f536:	51                   	push   ecx
c001f537:	52                   	push   edx
c001f538:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f53c:	e8 f7 fc ff ff       	call   c001f238 <SATA::access(unsigned long long, int, void*, bool)>
c001f541:	83 c4 20             	add    esp,0x20
c001f544:	89 f2                	mov    edx,esi
c001f546:	89 f9                	mov    ecx,edi
c001f548:	39 dd                	cmp    ebp,ebx
c001f54a:	75 d3                	jne    c001f51f <SATA::write(unsigned long long, int, void*)+0x35>
c001f54c:	31 c0                	xor    eax,eax
c001f54e:	83 c4 0c             	add    esp,0xc
c001f551:	5b                   	pop    ebx
c001f552:	5e                   	pop    esi
c001f553:	5f                   	pop    edi
c001f554:	5d                   	pop    ebp
c001f555:	c3                   	ret    

c001f556 <SATAPI::write(unsigned long long, int, void*)>:
c001f556:	b8 03 00 00 00       	mov    eax,0x3
c001f55b:	c3                   	ret    

c001f55c <SATAPI::close(int, int, void*)>:
c001f55c:	83 ec 0c             	sub    esp,0xc
c001f55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f563:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f569:	85 c0                	test   eax,eax
c001f56b:	74 0c                	je     c001f579 <SATAPI::close(int, int, void*)+0x1d>
c001f56d:	83 ec 0c             	sub    esp,0xc
c001f570:	8b 10                	mov    edx,DWORD PTR [eax]
c001f572:	50                   	push   eax
c001f573:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f576:	83 c4 10             	add    esp,0x10
c001f579:	31 c0                	xor    eax,eax
c001f57b:	83 c4 0c             	add    esp,0xc
c001f57e:	c3                   	ret    
c001f57f:	90                   	nop

c001f580 <SATAPI::SATAPI()>:
c001f580:	83 ec 0c             	sub    esp,0xc
c001f583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f587:	83 ec 04             	sub    esp,0x4
c001f58a:	68 00 08 00 00       	push   0x800
c001f58f:	68 08 52 02 c0       	push   0xc0025208
c001f594:	50                   	push   eax
c001f595:	e8 50 ed fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f59a:	83 c4 10             	add    esp,0x10
c001f59d:	ba b4 52 02 c0       	mov    edx,0xc00252b4
c001f5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a6:	89 10                	mov    DWORD PTR [eax],edx
c001f5a8:	90                   	nop
c001f5a9:	83 c4 0c             	add    esp,0xc
c001f5ac:	c3                   	ret    
c001f5ad:	90                   	nop

c001f5ae <SATAPI::diskRemoved()>:
c001f5ae:	83 ec 18             	sub    esp,0x18
c001f5b1:	68 14 52 02 c0       	push   0xc0025214
c001f5b6:	e8 b0 d4 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001f5bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5bf:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f5c6:	83 c4 1c             	add    esp,0x1c
c001f5c9:	c3                   	ret    

c001f5ca <SATAPI::diskInserted()>:
c001f5ca:	53                   	push   ebx
c001f5cb:	83 ec 14             	sub    esp,0x14
c001f5ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f5d2:	68 2b 52 02 c0       	push   0xc002522b
c001f5d7:	e8 8f d4 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001f5dc:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f5e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f5e6:	e8 67 ed fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001f5eb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f5ef:	83 c4 18             	add    esp,0x18
c001f5f2:	5b                   	pop    ebx
c001f5f3:	e9 96 0d ff ff       	jmp    c001038e <createPartitionsForDisk(PhysicalDisk*)>

c001f5f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f5f8:	55                   	push   ebp
c001f5f9:	57                   	push   edi
c001f5fa:	56                   	push   esi
c001f5fb:	53                   	push   ebx
c001f5fc:	83 ec 34             	sub    esp,0x34
c001f5ff:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f607:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f60b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f60f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f613:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f619:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f61f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f623:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f629:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f62d:	c1 e0 07             	shl    eax,0x7
c001f630:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f634:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f638:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f646:	8d 58 02             	lea    ebx,[eax+0x2]
c001f649:	c1 e3 07             	shl    ebx,0x7
c001f64c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f650:	53                   	push   ebx
c001f651:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f657:	e8 f6 eb ff ff       	call   c001e252 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f65c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	b8 01 00 00 00       	mov    eax,0x1
c001f668:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f66d:	0f 84 85 01 00 00    	je     c001f7f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f673:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f679:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f67b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f681:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f687:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f68b:	c1 e1 05             	shl    ecx,0x5
c001f68e:	01 c8                	add    eax,ecx
c001f690:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f692:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f698:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f69e:	89 08                	mov    DWORD PTR [eax],ecx
c001f6a0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6a6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f6ac:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f6b2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f6b5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f6b8:	50                   	push   eax
c001f6b9:	68 90 00 00 00       	push   0x90
c001f6be:	6a 00                	push   0x0
c001f6c0:	53                   	push   ebx
c001f6c1:	e8 be 0f fe ff       	call   c0000684 <memset>
c001f6c6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f6ca:	b9 0c 00 00 00       	mov    ecx,0xc
c001f6cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f6d1:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f6d7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f6db:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f6e1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f6e5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f6e9:	48                   	dec    eax
c001f6ea:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f6ef:	89 c1                	mov    ecx,eax
c001f6f1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f6f7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f6fc:	09 c8                	or     eax,ecx
c001f6fe:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f704:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f707:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f70e:	66 25 00 7f          	and    ax,0x7f00
c001f712:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f716:	66 0d 27 80          	or     ax,0x8027
c001f71a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f71e:	66 89 03             	mov    WORD PTR [ebx],ax
c001f721:	89 d0                	mov    eax,edx
c001f723:	c1 ea 18             	shr    edx,0x18
c001f726:	c1 e8 10             	shr    eax,0x10
c001f729:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f72c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f72f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f733:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f73a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f73d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f741:	83 c4 10             	add    esp,0x10
c001f744:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f748:	31 c0                	xor    eax,eax
c001f74a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f74e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f754:	80 e2 88             	and    dl,0x88
c001f757:	74 0a                	je     c001f763 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f759:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f75e:	74 0a                	je     c001f76a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f760:	40                   	inc    eax
c001f761:	eb eb                	jmp    c001f74e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f763:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f768:	75 0f                	jne    c001f779 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f76a:	83 ec 0c             	sub    esp,0xc
c001f76d:	68 b1 51 02 c0       	push   0xc00251b1
c001f772:	e8 b6 4b ff ff       	call   c001432d <Krnl::panic(char const*)>
c001f777:	eb 3f                	jmp    c001f7b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f779:	ba 01 00 00 00       	mov    edx,0x1
c001f77e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f786:	d3 e2                	shl    edx,cl
c001f788:	c1 e0 07             	shl    eax,0x7
c001f78b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f791:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f795:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f79b:	85 ca                	test   edx,ecx
c001f79d:	74 23                	je     c001f7c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f79f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f7a5:	0f ba e1 1e          	bt     ecx,0x1e
c001f7a9:	73 ea                	jae    c001f795 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f7ab:	83 ec 0c             	sub    esp,0xc
c001f7ae:	68 43 52 02 c0       	push   0xc0025243
c001f7b3:	e8 b3 d2 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001f7b8:	83 c4 10             	add    esp,0x10
c001f7bb:	b8 01 00 00 00       	mov    eax,0x1
c001f7c0:	eb 36                	jmp    c001f7f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f7c2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f7c8:	0f ba e0 1e          	bt     eax,0x1e
c001f7cc:	73 0a                	jae    c001f7d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f7ce:	83 ec 0c             	sub    esp,0xc
c001f7d1:	68 56 52 02 c0       	push   0xc0025256
c001f7d6:	eb db                	jmp    c001f7b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f7d8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f7dd:	74 17                	je     c001f7f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7df:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f7e4:	74 10                	je     c001f7f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7e6:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f7ec:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f7f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f7f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f7f6:	31 c0                	xor    eax,eax
c001f7f8:	83 c4 2c             	add    esp,0x2c
c001f7fb:	5b                   	pop    ebx
c001f7fc:	5e                   	pop    esi
c001f7fd:	5f                   	pop    edi
c001f7fe:	5d                   	pop    ebp
c001f7ff:	c3                   	ret    

c001f800 <SATAPI::eject()>:
c001f800:	57                   	push   edi
c001f801:	b9 03 00 00 00       	mov    ecx,0x3
c001f806:	53                   	push   ebx
c001f807:	83 ec 14             	sub    esp,0x14
c001f80a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f80e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f812:	fc                   	cld    
c001f813:	31 c0                	xor    eax,eax
c001f815:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f817:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f81c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f821:	50                   	push   eax
c001f822:	6a 00                	push   0x0
c001f824:	6a 00                	push   0x0
c001f826:	6a 00                	push   0x0
c001f828:	6a 00                	push   0x0
c001f82a:	6a 02                	push   0x2
c001f82c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f830:	50                   	push   eax
c001f831:	53                   	push   ebx
c001f832:	e8 c1 fd ff ff       	call   c001f5f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f837:	83 c4 14             	add    esp,0x14
c001f83a:	53                   	push   ebx
c001f83b:	e8 6e fd ff ff       	call   c001f5ae <SATAPI::diskRemoved()>
c001f840:	83 c4 24             	add    esp,0x24
c001f843:	31 c0                	xor    eax,eax
c001f845:	5b                   	pop    ebx
c001f846:	5f                   	pop    edi
c001f847:	c3                   	ret    

c001f848 <SATAPI::detectMedia()>:
c001f848:	56                   	push   esi
c001f849:	53                   	push   ebx
c001f84a:	83 ec 28             	sub    esp,0x28
c001f84d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f851:	6a 0c                	push   0xc
c001f853:	6a 00                	push   0x0
c001f855:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f859:	56                   	push   esi
c001f85a:	e8 25 0e fe ff       	call   c0000684 <memset>
c001f85f:	83 c4 0c             	add    esp,0xc
c001f862:	6a 00                	push   0x0
c001f864:	6a 00                	push   0x0
c001f866:	6a 00                	push   0x0
c001f868:	6a 00                	push   0x0
c001f86a:	6a 00                	push   0x0
c001f86c:	56                   	push   esi
c001f86d:	53                   	push   ebx
c001f86e:	e8 85 fd ff ff       	call   c001f5f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f873:	83 c4 1c             	add    esp,0x1c
c001f876:	6a 0c                	push   0xc
c001f878:	6a 00                	push   0x0
c001f87a:	56                   	push   esi
c001f87b:	e8 04 0e fe ff       	call   c0000684 <memset>
c001f880:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f885:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f88a:	83 c4 0c             	add    esp,0xc
c001f88d:	6a 01                	push   0x1
c001f88f:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f893:	50                   	push   eax
c001f894:	6a 00                	push   0x0
c001f896:	6a 00                	push   0x0
c001f898:	6a 12                	push   0x12
c001f89a:	56                   	push   esi
c001f89b:	53                   	push   ebx
c001f89c:	e8 57 fd ff ff       	call   c001f5f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8a1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f8a5:	83 c4 20             	add    esp,0x20
c001f8a8:	83 e0 7f             	and    eax,0x7f
c001f8ab:	3c 70                	cmp    al,0x70
c001f8ad:	74 15                	je     c001f8c4 <SATAPI::detectMedia()+0x7c>
c001f8af:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8b6:	75 0c                	jne    c001f8c4 <SATAPI::detectMedia()+0x7c>
c001f8b8:	83 ec 0c             	sub    esp,0xc
c001f8bb:	53                   	push   ebx
c001f8bc:	e8 09 fd ff ff       	call   c001f5ca <SATAPI::diskInserted()>
c001f8c1:	83 c4 10             	add    esp,0x10
c001f8c4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f8c8:	83 e0 0f             	and    eax,0xf
c001f8cb:	3c 02                	cmp    al,0x2
c001f8cd:	75 1b                	jne    c001f8ea <SATAPI::detectMedia()+0xa2>
c001f8cf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f8d4:	75 2d                	jne    c001f903 <SATAPI::detectMedia()+0xbb>
c001f8d6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8dd:	74 24                	je     c001f903 <SATAPI::detectMedia()+0xbb>
c001f8df:	83 ec 0c             	sub    esp,0xc
c001f8e2:	53                   	push   ebx
c001f8e3:	e8 c6 fc ff ff       	call   c001f5ae <SATAPI::diskRemoved()>
c001f8e8:	eb 16                	jmp    c001f900 <SATAPI::detectMedia()+0xb8>
c001f8ea:	84 c0                	test   al,al
c001f8ec:	75 15                	jne    c001f903 <SATAPI::detectMedia()+0xbb>
c001f8ee:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8f5:	75 0c                	jne    c001f903 <SATAPI::detectMedia()+0xbb>
c001f8f7:	83 ec 0c             	sub    esp,0xc
c001f8fa:	53                   	push   ebx
c001f8fb:	e8 ca fc ff ff       	call   c001f5ca <SATAPI::diskInserted()>
c001f900:	83 c4 10             	add    esp,0x10
c001f903:	83 c4 24             	add    esp,0x24
c001f906:	5b                   	pop    ebx
c001f907:	5e                   	pop    esi
c001f908:	c3                   	ret    
c001f909:	90                   	nop

c001f90a <SATAPI::open(int, int, void*)>:
c001f90a:	56                   	push   esi
c001f90b:	53                   	push   ebx
c001f90c:	50                   	push   eax
c001f90d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f911:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f915:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f91f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f925:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f92f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f933:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f93d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f943:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f94a:	e8 7c a4 fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f94f:	89 c6                	mov    esi,eax
c001f951:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f957:	81 c6 00 10 00 00    	add    esi,0x1000
c001f95d:	e8 69 a4 fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f962:	39 c6                	cmp    esi,eax
c001f964:	74 10                	je     c001f976 <SATAPI::open(int, int, void*)+0x6c>
c001f966:	83 ec 0c             	sub    esp,0xc
c001f969:	68 6b 52 02 c0       	push   0xc002526b
c001f96e:	e8 ba 49 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001f973:	83 c4 10             	add    esp,0x10
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	6a 02                	push   0x2
c001f97b:	e8 19 bd fe ff       	call   c000b699 <Virt::allocateKernelVirtualPages(int)>
c001f980:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f986:	6a 03                	push   0x3
c001f988:	50                   	push   eax
c001f989:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f98f:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c001f995:	e8 a6 c3 fe ff       	call   c000bd40 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f99a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f9a1:	83 c4 14             	add    esp,0x14
c001f9a4:	53                   	push   ebx
c001f9a5:	e8 9e fe ff ff       	call   c001f848 <SATAPI::detectMedia()>
c001f9aa:	83 c4 14             	add    esp,0x14
c001f9ad:	31 c0                	xor    eax,eax
c001f9af:	5b                   	pop    ebx
c001f9b0:	5e                   	pop    esi
c001f9b1:	c3                   	ret    

c001f9b2 <SATAPI::read(unsigned long long, int, void*)>:
c001f9b2:	55                   	push   ebp
c001f9b3:	57                   	push   edi
c001f9b4:	56                   	push   esi
c001f9b5:	53                   	push   ebx
c001f9b6:	83 ec 1c             	sub    esp,0x1c
c001f9b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f9bd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f9c5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9cc:	74 19                	je     c001f9e7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f9ce:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f9d3:	7e 2e                	jle    c001fa03 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9d5:	83 ec 0c             	sub    esp,0xc
c001f9d8:	68 81 52 02 c0       	push   0xc0025281
c001f9dd:	e8 4b 49 ff ff       	call   c001432d <Krnl::panic(char const*)>
c001f9e2:	83 c4 10             	add    esp,0x10
c001f9e5:	eb 1c                	jmp    c001fa03 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9e7:	83 ec 0c             	sub    esp,0xc
c001f9ea:	55                   	push   ebp
c001f9eb:	e8 58 fe ff ff       	call   c001f848 <SATAPI::detectMedia()>
c001f9f0:	83 c4 10             	add    esp,0x10
c001f9f3:	b8 02 00 00 00       	mov    eax,0x2
c001f9f8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9ff:	75 cd                	jne    c001f9ce <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001fa01:	eb 49                	jmp    c001fa4c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001fa03:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa07:	b9 03 00 00 00       	mov    ecx,0x3
c001fa0c:	fc                   	cld    
c001fa0d:	31 c0                	xor    eax,eax
c001fa0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa11:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa16:	89 d8                	mov    eax,ebx
c001fa18:	86 e0                	xchg   al,ah
c001fa1a:	c1 c0 10             	rol    eax,0x10
c001fa1d:	86 e0                	xchg   al,ah
c001fa1f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa23:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa27:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa2b:	50                   	push   eax
c001fa2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fa30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa34:	56                   	push   esi
c001fa35:	53                   	push   ebx
c001fa36:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fa3a:	c1 e0 0b             	shl    eax,0xb
c001fa3d:	50                   	push   eax
c001fa3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa42:	50                   	push   eax
c001fa43:	55                   	push   ebp
c001fa44:	e8 af fb ff ff       	call   c001f5f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa49:	83 c4 20             	add    esp,0x20
c001fa4c:	83 c4 1c             	add    esp,0x1c
c001fa4f:	5b                   	pop    ebx
c001fa50:	5e                   	pop    esi
c001fa51:	5f                   	pop    edi
c001fa52:	5d                   	pop    ebp
c001fa53:	c3                   	ret    

c001fa54 <AVX::open(int, int, void*)>:
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	e8 3c 11 00 00       	call   c0020b98 <avxInit>
c001fa5c:	b8 00 00 00 00       	mov    eax,0x0
c001fa61:	83 c4 0c             	add    esp,0xc
c001fa64:	c3                   	ret    
c001fa65:	90                   	nop
c001fa66:	66 90                	xchg   ax,ax

c001fa68 <AVX::close(int, int, void*)>:
c001fa68:	83 ec 0c             	sub    esp,0xc
c001fa6b:	e8 29 11 00 00       	call   c0020b99 <avxClose>
c001fa70:	b8 00 00 00 00       	mov    eax,0x0
c001fa75:	83 c4 0c             	add    esp,0xc
c001fa78:	c3                   	ret    
c001fa79:	90                   	nop
c001fa7a:	66 90                	xchg   ax,ax

c001fa7c <AVX::available()>:
c001fa7c:	83 ec 0c             	sub    esp,0xc
c001fa7f:	e8 0c 11 00 00       	call   c0020b90 <avxDetect>
c001fa84:	85 c0                	test   eax,eax
c001fa86:	0f 95 c0             	setne  al
c001fa89:	83 c4 0c             	add    esp,0xc
c001fa8c:	c3                   	ret    
c001fa8d:	90                   	nop
c001fa8e:	66 90                	xchg   ax,ax

c001fa90 <AVX::save(void*)>:
c001fa90:	83 ec 0c             	sub    esp,0xc
c001fa93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa97:	83 ec 0c             	sub    esp,0xc
c001fa9a:	50                   	push   eax
c001fa9b:	e8 f6 10 00 00       	call   c0020b96 <avxSave>
c001faa0:	83 c4 10             	add    esp,0x10
c001faa3:	90                   	nop
c001faa4:	83 c4 0c             	add    esp,0xc
c001faa7:	c3                   	ret    

c001faa8 <AVX::load(void*)>:
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faaf:	83 ec 0c             	sub    esp,0xc
c001fab2:	50                   	push   eax
c001fab3:	e8 df 10 00 00       	call   c0020b97 <avxLoad>
c001fab8:	83 c4 10             	add    esp,0x10
c001fabb:	90                   	nop
c001fabc:	83 c4 0c             	add    esp,0xc
c001fabf:	c3                   	ret    

c001fac0 <AVX::AVX()>:
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac7:	83 ec 08             	sub    esp,0x8
c001faca:	68 e4 52 02 c0       	push   0xc00252e4
c001facf:	50                   	push   eax
c001fad0:	e8 f3 e8 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	ba f4 52 02 c0       	mov    edx,0xc00252f4
c001fadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae1:	89 10                	mov    DWORD PTR [eax],edx
c001fae3:	90                   	nop
c001fae4:	83 c4 0c             	add    esp,0xc
c001fae7:	c3                   	ret    

c001fae8 <MMX::available()>:
c001fae8:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001faed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001faf3:	83 e0 20             	and    eax,0x20
c001faf6:	84 c0                	test   al,al
c001faf8:	0f 95 c0             	setne  al
c001fafb:	c3                   	ret    

c001fafc <MMX::open(int, int, void*)>:
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	e8 1e 11 00 00       	call   c0020c22 <x87Init>
c001fb04:	b8 00 00 00 00       	mov    eax,0x0
c001fb09:	83 c4 0c             	add    esp,0xc
c001fb0c:	c3                   	ret    
c001fb0d:	90                   	nop
c001fb0e:	66 90                	xchg   ax,ax

c001fb10 <MMX::close(int, int, void*)>:
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	e8 24 11 00 00       	call   c0020c3c <x87Close>
c001fb18:	b8 00 00 00 00       	mov    eax,0x0
c001fb1d:	83 c4 0c             	add    esp,0xc
c001fb20:	c3                   	ret    
c001fb21:	90                   	nop
c001fb22:	66 90                	xchg   ax,ax

c001fb24 <MMX::save(void*)>:
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb2b:	83 ec 0c             	sub    esp,0xc
c001fb2e:	50                   	push   eax
c001fb2f:	e8 dd 10 00 00       	call   c0020c11 <x87Save>
c001fb34:	83 c4 10             	add    esp,0x10
c001fb37:	90                   	nop
c001fb38:	83 c4 0c             	add    esp,0xc
c001fb3b:	c3                   	ret    

c001fb3c <MMX::load(void*)>:
c001fb3c:	83 ec 0c             	sub    esp,0xc
c001fb3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb43:	83 ec 0c             	sub    esp,0xc
c001fb46:	50                   	push   eax
c001fb47:	e8 ce 10 00 00       	call   c0020c1a <x87Load>
c001fb4c:	83 c4 10             	add    esp,0x10
c001fb4f:	90                   	nop
c001fb50:	83 c4 0c             	add    esp,0xc
c001fb53:	c3                   	ret    

c001fb54 <MMX::MMX()>:
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5b:	83 ec 08             	sub    esp,0x8
c001fb5e:	68 24 53 02 c0       	push   0xc0025324
c001fb63:	50                   	push   eax
c001fb64:	e8 5f e8 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001fb69:	83 c4 10             	add    esp,0x10
c001fb6c:	ba 34 53 02 c0       	mov    edx,0xc0025334
c001fb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb75:	89 10                	mov    DWORD PTR [eax],edx
c001fb77:	90                   	nop
c001fb78:	83 c4 0c             	add    esp,0xc
c001fb7b:	c3                   	ret    

c001fb7c <SSE::open(int, int, void*)>:
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	e8 50 10 00 00       	call   c0020bd4 <sseInit>
c001fb84:	b8 00 00 00 00       	mov    eax,0x0
c001fb89:	83 c4 0c             	add    esp,0xc
c001fb8c:	c3                   	ret    
c001fb8d:	90                   	nop
c001fb8e:	66 90                	xchg   ax,ax

c001fb90 <SSE::close(int, int, void*)>:
c001fb90:	83 ec 0c             	sub    esp,0xc
c001fb93:	e8 4c 10 00 00       	call   c0020be4 <sseClose>
c001fb98:	b8 00 00 00 00       	mov    eax,0x0
c001fb9d:	83 c4 0c             	add    esp,0xc
c001fba0:	c3                   	ret    
c001fba1:	90                   	nop
c001fba2:	66 90                	xchg   ax,ax

c001fba4 <SSE::available()>:
c001fba4:	83 ec 1c             	sub    esp,0x1c
c001fba7:	e8 04 10 00 00       	call   c0020bb0 <absolutelyNoChanceInHell>
c001fbac:	85 c0                	test   eax,eax
c001fbae:	0f 95 c0             	setne  al
c001fbb1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fbb9:	83 c4 1c             	add    esp,0x1c
c001fbbc:	c3                   	ret    
c001fbbd:	90                   	nop
c001fbbe:	66 90                	xchg   ax,ax

c001fbc0 <SSE::save(void*)>:
c001fbc0:	83 ec 0c             	sub    esp,0xc
c001fbc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbc7:	83 ec 0c             	sub    esp,0xc
c001fbca:	50                   	push   eax
c001fbcb:	e8 f8 0f 00 00       	call   c0020bc8 <sseSave>
c001fbd0:	83 c4 10             	add    esp,0x10
c001fbd3:	90                   	nop
c001fbd4:	83 c4 0c             	add    esp,0xc
c001fbd7:	c3                   	ret    

c001fbd8 <SSE::load(void*)>:
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbdf:	83 ec 0c             	sub    esp,0xc
c001fbe2:	50                   	push   eax
c001fbe3:	e8 e6 0f 00 00       	call   c0020bce <sseLoad>
c001fbe8:	83 c4 10             	add    esp,0x10
c001fbeb:	90                   	nop
c001fbec:	83 c4 0c             	add    esp,0xc
c001fbef:	c3                   	ret    

c001fbf0 <SSE::SSE()>:
c001fbf0:	83 ec 0c             	sub    esp,0xc
c001fbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf7:	83 ec 08             	sub    esp,0x8
c001fbfa:	68 64 53 02 c0       	push   0xc0025364
c001fbff:	50                   	push   eax
c001fc00:	e8 c3 e7 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001fc05:	83 c4 10             	add    esp,0x10
c001fc08:	ba 74 53 02 c0       	mov    edx,0xc0025374
c001fc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc11:	89 10                	mov    DWORD PTR [eax],edx
c001fc13:	90                   	nop
c001fc14:	83 c4 0c             	add    esp,0xc
c001fc17:	c3                   	ret    

c001fc18 <x87::open(int, int, void*)>:
c001fc18:	83 ec 0c             	sub    esp,0xc
c001fc1b:	e8 02 10 00 00       	call   c0020c22 <x87Init>
c001fc20:	b8 00 00 00 00       	mov    eax,0x0
c001fc25:	83 c4 0c             	add    esp,0xc
c001fc28:	c3                   	ret    
c001fc29:	90                   	nop
c001fc2a:	66 90                	xchg   ax,ax

c001fc2c <x87::close(int, int, void*)>:
c001fc2c:	83 ec 0c             	sub    esp,0xc
c001fc2f:	e8 08 10 00 00       	call   c0020c3c <x87Close>
c001fc34:	b8 00 00 00 00       	mov    eax,0x0
c001fc39:	83 c4 0c             	add    esp,0xc
c001fc3c:	c3                   	ret    
c001fc3d:	90                   	nop
c001fc3e:	66 90                	xchg   ax,ax

c001fc40 <x87::available()>:
c001fc40:	83 ec 0c             	sub    esp,0xc
c001fc43:	e8 ae 0f 00 00       	call   c0020bf6 <x87Detect>
c001fc48:	85 c0                	test   eax,eax
c001fc4a:	0f 95 c0             	setne  al
c001fc4d:	83 c4 0c             	add    esp,0xc
c001fc50:	c3                   	ret    
c001fc51:	90                   	nop
c001fc52:	66 90                	xchg   ax,ax

c001fc54 <x87::save(void*)>:
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc5b:	83 ec 0c             	sub    esp,0xc
c001fc5e:	50                   	push   eax
c001fc5f:	e8 ad 0f 00 00       	call   c0020c11 <x87Save>
c001fc64:	83 c4 10             	add    esp,0x10
c001fc67:	90                   	nop
c001fc68:	83 c4 0c             	add    esp,0xc
c001fc6b:	c3                   	ret    

c001fc6c <x87::load(void*)>:
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc73:	83 ec 0c             	sub    esp,0xc
c001fc76:	50                   	push   eax
c001fc77:	e8 9e 0f 00 00       	call   c0020c1a <x87Load>
c001fc7c:	83 c4 10             	add    esp,0x10
c001fc7f:	90                   	nop
c001fc80:	83 c4 0c             	add    esp,0xc
c001fc83:	c3                   	ret    

c001fc84 <x87::x87()>:
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8b:	83 ec 08             	sub    esp,0x8
c001fc8e:	68 a4 53 02 c0       	push   0xc00253a4
c001fc93:	50                   	push   eax
c001fc94:	e8 2f e7 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c001fca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca5:	89 10                	mov    DWORD PTR [eax],edx
c001fca7:	90                   	nop
c001fca8:	83 c4 0c             	add    esp,0xc
c001fcab:	c3                   	ret    

c001fcac <APIC::disable()>:
c001fcac:	90                   	nop
c001fcad:	c3                   	ret    

c001fcae <APIC::close(int, int, void*)>:
c001fcae:	55                   	push   ebp
c001fcaf:	89 e5                	mov    ebp,esp
c001fcb1:	83 ec 08             	sub    esp,0x8
c001fcb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fcb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb9:	83 c0 3c             	add    eax,0x3c
c001fcbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcc4:	ff d0                	call   eax
c001fcc6:	83 c4 10             	add    esp,0x10
c001fcc9:	b8 00 00 00 00       	mov    eax,0x0
c001fcce:	c9                   	leave  
c001fccf:	c3                   	ret    

c001fcd0 <IOAPIC::close(int, int, void*)>:
c001fcd0:	b8 00 00 00 00       	mov    eax,0x0
c001fcd5:	c3                   	ret    

c001fcd6 <APIC::io_wait()>:
c001fcd6:	eb 00                	jmp    c001fcd8 <APIC::io_wait()+0x2>
c001fcd8:	eb 00                	jmp    c001fcda <APIC::io_wait()+0x4>
c001fcda:	90                   	nop
c001fcdb:	c3                   	ret    

c001fcdc <APIC::getBase()>:
c001fcdc:	55                   	push   ebp
c001fcdd:	89 e5                	mov    ebp,esp
c001fcdf:	83 ec 18             	sub    esp,0x18
c001fce2:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001fce7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fced:	83 e0 08             	and    eax,0x8
c001fcf0:	84 c0                	test   al,al
c001fcf2:	75 07                	jne    c001fcfb <APIC::getBase()+0x1f>
c001fcf4:	b8 00 00 00 00       	mov    eax,0x0
c001fcf9:	eb 21                	jmp    c001fd1c <APIC::getBase()+0x40>
c001fcfb:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001fd00:	83 ec 08             	sub    esp,0x8
c001fd03:	6a 1b                	push   0x1b
c001fd05:	50                   	push   eax
c001fd06:	e8 19 92 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd11:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd14:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd17:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd1c:	c9                   	leave  
c001fd1d:	c3                   	ret    

c001fd1e <APIC::eoi(unsigned char)>:
c001fd1e:	55                   	push   ebp
c001fd1f:	89 e5                	mov    ebp,esp
c001fd21:	83 ec 28             	sub    esp,0x28
c001fd24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd2a:	83 ec 0c             	sub    esp,0xc
c001fd2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd30:	e8 a7 ff ff ff       	call   c001fcdc <APIC::getBase()>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	05 b0 00 00 00       	add    eax,0xb0
c001fd3d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fd40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fd43:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd49:	90                   	nop
c001fd4a:	c9                   	leave  
c001fd4b:	c3                   	ret    

c001fd4c <APIC::open(int, int, void*)>:
c001fd4c:	55                   	push   ebp
c001fd4d:	89 e5                	mov    ebp,esp
c001fd4f:	57                   	push   edi
c001fd50:	56                   	push   esi
c001fd51:	53                   	push   ebx
c001fd52:	83 ec 2c             	sub    esp,0x2c
c001fd55:	83 ec 0c             	sub    esp,0xc
c001fd58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd5b:	e8 7c ff ff ff       	call   c001fcdc <APIC::getBase()>
c001fd60:	83 c4 10             	add    esp,0x10
c001fd63:	89 c2                	mov    edx,eax
c001fd65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd68:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd6e:	0f b6 f8             	movzx  edi,al
c001fd71:	89 d0                	mov    eax,edx
c001fd73:	ba 00 00 00 00       	mov    edx,0x0
c001fd78:	89 c1                	mov    ecx,eax
c001fd7a:	80 e5 ff             	and    ch,0xff
c001fd7d:	89 cb                	mov    ebx,ecx
c001fd7f:	0f b6 f2             	movzx  esi,dl
c001fd82:	89 d8                	mov    eax,ebx
c001fd84:	89 f2                	mov    edx,esi
c001fd86:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd89:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd8c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd90:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd94:	83 e0 00             	and    eax,0x0
c001fd97:	09 d0                	or     eax,edx
c001fd99:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fd9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fda0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fda6:	8d 50 01             	lea    edx,[eax+0x1]
c001fda9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fdac:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fdb2:	0f b6 d0             	movzx  edx,al
c001fdb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdb8:	83 c2 08             	add    edx,0x8
c001fdbb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fdbf:	0f b6 c9             	movzx  ecx,cl
c001fdc2:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fdc8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdd2:	e8 05 ff ff ff       	call   c001fcdc <APIC::getBase()>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	05 f0 00 00 00       	add    eax,0xf0
c001fddf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fde2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fde5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fdea:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fdf1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fdf8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fdfb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fdfe:	89 10                	mov    DWORD PTR [eax],edx
c001fe00:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe07:	a1 70 6c 02 c0       	mov    eax,ds:0xc0026c70
c001fe0c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe0f:	7d 7c                	jge    c001fe8d <APIC::open(int, int, void*)+0x141>
c001fe11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe14:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe1b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe21:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe28:	c1 e8 08             	shr    eax,0x8
c001fe2b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fe2f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe32:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe39:	c1 e8 18             	shr    eax,0x18
c001fe3c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fe3f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fe43:	75 40                	jne    c001fe85 <APIC::open(int, int, void*)+0x139>
c001fe45:	83 ec 0c             	sub    esp,0xc
c001fe48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe4b:	e8 8c fe ff ff       	call   c001fcdc <APIC::getBase()>
c001fe50:	83 c4 10             	add    esp,0x10
c001fe53:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fe57:	75 07                	jne    c001fe60 <APIC::open(int, int, void*)+0x114>
c001fe59:	ba 60 03 00 00       	mov    edx,0x360
c001fe5e:	eb 05                	jmp    c001fe65 <APIC::open(int, int, void*)+0x119>
c001fe60:	ba 50 03 00 00       	mov    edx,0x350
c001fe65:	01 d0                	add    eax,edx
c001fe67:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fe6a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe6f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fe72:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fe79:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fe7d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe80:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fe83:	89 10                	mov    DWORD PTR [eax],edx
c001fe85:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fe88:	e9 7a ff ff ff       	jmp    c001fe07 <APIC::open(int, int, void*)+0xbb>
c001fe8d:	b8 00 00 00 00       	mov    eax,0x0
c001fe92:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fe95:	5b                   	pop    ebx
c001fe96:	5e                   	pop    esi
c001fe97:	5f                   	pop    edi
c001fe98:	5d                   	pop    ebp
c001fe99:	c3                   	ret    

c001fe9a <IOAPIC::IOAPIC()>:
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea1:	83 ec 08             	sub    esp,0x8
c001fea4:	68 e4 53 02 c0       	push   0xc00253e4
c001fea9:	50                   	push   eax
c001feaa:	e8 07 e2 fe ff       	call   c000e0b6 <Device::Device(char const*)>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	ba 0c 55 02 c0       	mov    edx,0xc002550c
c001feb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febb:	89 10                	mov    DWORD PTR [eax],edx
c001febd:	90                   	nop
c001febe:	83 c4 0c             	add    esp,0xc
c001fec1:	c3                   	ret    

c001fec2 <APIC::APIC()>:
c001fec2:	53                   	push   ebx
c001fec3:	83 ec 18             	sub    esp,0x18
c001fec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001feca:	83 ec 08             	sub    esp,0x8
c001fecd:	68 ec 53 02 c0       	push   0xc00253ec
c001fed2:	50                   	push   eax
c001fed3:	e8 56 e9 fe ff       	call   c000e82e <InterruptController::InterruptController(char const*)>
c001fed8:	83 c4 10             	add    esp,0x10
c001fedb:	ba c4 54 02 c0       	mov    edx,0xc00254c4
c001fee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fee4:	89 10                	mov    DWORD PTR [eax],edx
c001fee6:	a0 40 83 02 c0       	mov    al,ds:0xc0028340
c001feeb:	83 f0 01             	xor    eax,0x1
c001feee:	84 c0                	test   al,al
c001fef0:	0f 84 a1 00 00 00    	je     c001ff97 <APIC::APIC()+0xd5>
c001fef6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001fefb:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c001ff00:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff04:	0f 83 86 00 00 00    	jae    c001ff90 <APIC::APIC()+0xce>
c001ff0a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff12:	83 ec 0c             	sub    esp,0xc
c001ff15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff19:	e8 a5 9a fe ff       	call   c00099c3 <malloc>
c001ff1e:	83 c4 10             	add    esp,0x10
c001ff21:	89 c3                	mov    ebx,eax
c001ff23:	83 ec 0c             	sub    esp,0xc
c001ff26:	53                   	push   ebx
c001ff27:	e8 6e ff ff ff       	call   c001fe9a <IOAPIC::IOAPIC()>
c001ff2c:	83 c4 10             	add    esp,0x10
c001ff2f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ff33:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ff38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff3c:	89 14 85 20 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ce0],edx
c001ff43:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c001ff48:	40                   	inc    eax
c001ff49:	a3 00 83 02 c0       	mov    ds:0xc0028300,eax
c001ff4e:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001ff53:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ff59:	83 ec 08             	sub    esp,0x8
c001ff5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff60:	50                   	push   eax
c001ff61:	e8 4c df fe ff       	call   c000deb2 <Device::addChild(Device*)>
c001ff66:	83 c4 10             	add    esp,0x10
c001ff69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6f:	83 c0 08             	add    eax,0x8
c001ff72:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff74:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ff79:	6a 00                	push   0x0
c001ff7b:	6a 00                	push   0x0
c001ff7d:	52                   	push   edx
c001ff7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff82:	ff d0                	call   eax
c001ff84:	83 c4 10             	add    esp,0x10
c001ff87:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ff8b:	e9 6b ff ff ff       	jmp    c001fefb <APIC::APIC()+0x39>
c001ff90:	c6 05 40 83 02 c0 01 	mov    BYTE PTR ds:0xc0028340,0x1
c001ff97:	90                   	nop
c001ff98:	83 c4 18             	add    esp,0x18
c001ff9b:	5b                   	pop    ebx
c001ff9c:	c3                   	ret    
c001ff9d:	90                   	nop

c001ff9e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ff9e:	55                   	push   ebp
c001ff9f:	89 e5                	mov    ebp,esp
c001ffa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffa4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffaa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffad:	72 1d                	jb     c001ffcc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffb2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ffb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffbb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ffc1:	01 d0                	add    eax,edx
c001ffc3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffc6:	73 04                	jae    c001ffcc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffc8:	b0 01                	mov    al,0x1
c001ffca:	eb 02                	jmp    c001ffce <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ffcc:	b0 00                	mov    al,0x0
c001ffce:	5d                   	pop    ebp
c001ffcf:	c3                   	ret    

c001ffd0 <IOAPIC::read(int)>:
c001ffd0:	55                   	push   ebp
c001ffd1:	89 e5                	mov    ebp,esp
c001ffd3:	83 ec 10             	sub    esp,0x10
c001ffd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ffdf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ffe2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffe5:	0f b6 d0             	movzx  edx,al
c001ffe8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffeb:	89 10                	mov    DWORD PTR [eax],edx
c001ffed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fff0:	83 c0 10             	add    eax,0x10
c001fff3:	8b 00                	mov    eax,DWORD PTR [eax]
c001fff5:	c9                   	leave  
c001fff6:	c3                   	ret    
c001fff7:	90                   	nop

c001fff8 <IOAPIC::open(int, int, void*)>:
c001fff8:	55                   	push   ebp
c001fff9:	89 e5                	mov    ebp,esp
c001fffb:	57                   	push   edi
c001fffc:	56                   	push   esi
c001fffd:	53                   	push   ebx
c001fffe:	83 ec 0c             	sub    esp,0xc
c0020001:	83 ec 0c             	sub    esp,0xc
c0020004:	68 17 54 02 c0       	push   0xc0025417
c0020009:	e8 5d ca fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c002000e:	83 c4 10             	add    esp,0x10
c0020011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020014:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020017:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020020:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020026:	8b 14 85 60 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd92a0]
c002002d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020030:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020039:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002003f:	8b 14 85 e0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9220]
c0020046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020049:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002004f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020052:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002005b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020061:	0f b6 f8             	movzx  edi,al
c0020064:	89 d0                	mov    eax,edx
c0020066:	ba 00 00 00 00       	mov    edx,0x0
c002006b:	89 c1                	mov    ecx,eax
c002006d:	80 e5 ff             	and    ch,0xff
c0020070:	89 cb                	mov    ebx,ecx
c0020072:	0f b6 f2             	movzx  esi,dl
c0020075:	89 d8                	mov    eax,ebx
c0020077:	89 f2                	mov    edx,esi
c0020079:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002007c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002007f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020083:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020087:	83 e0 00             	and    eax,0x0
c002008a:	09 d0                	or     eax,edx
c002008c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020093:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020099:	8d 50 01             	lea    edx,[eax+0x1]
c002009c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002009f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00200a5:	0f b6 d0             	movzx  edx,al
c00200a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200ab:	83 c2 08             	add    edx,0x8
c00200ae:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00200b2:	0f b6 c9             	movzx  ecx,cl
c00200b5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00200bb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00200bf:	83 ec 08             	sub    esp,0x8
c00200c2:	6a 01                	push   0x1
c00200c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200c7:	e8 04 ff ff ff       	call   c001ffd0 <IOAPIC::read(int)>
c00200cc:	83 c4 10             	add    esp,0x10
c00200cf:	c1 f8 10             	sar    eax,0x10
c00200d2:	0f b6 c0             	movzx  eax,al
c00200d5:	8d 50 01             	lea    edx,[eax+0x1]
c00200d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200db:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00200e1:	b8 00 00 00 00       	mov    eax,0x0
c00200e6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00200e9:	5b                   	pop    ebx
c00200ea:	5e                   	pop    esi
c00200eb:	5f                   	pop    edi
c00200ec:	5d                   	pop    ebp
c00200ed:	c3                   	ret    

c00200ee <IOAPIC::write(int, int)>:
c00200ee:	55                   	push   ebp
c00200ef:	89 e5                	mov    ebp,esp
c00200f1:	83 ec 10             	sub    esp,0x10
c00200f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200f7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00200fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020100:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020103:	0f b6 d0             	movzx  edx,al
c0020106:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020109:	89 10                	mov    DWORD PTR [eax],edx
c002010b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002010e:	8d 50 10             	lea    edx,[eax+0x10]
c0020111:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020114:	89 02                	mov    DWORD PTR [edx],eax
c0020116:	90                   	nop
c0020117:	c9                   	leave  
c0020118:	c3                   	ret    
c0020119:	90                   	nop

c002011a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002011a:	55                   	push   ebp
c002011b:	89 e5                	mov    ebp,esp
c002011d:	53                   	push   ebx
c002011e:	83 ec 2c             	sub    esp,0x2c
c0020121:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020124:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020127:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002012a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002012d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020130:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020133:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020136:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020139:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002013c:	88 d8                	mov    al,bl
c002013e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020141:	88 c8                	mov    al,cl
c0020143:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020146:	88 d0                	mov    al,dl
c0020148:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002014b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002014f:	83 c0 08             	add    eax,0x8
c0020152:	01 c0                	add    eax,eax
c0020154:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020157:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002015b:	83 c0 08             	add    eax,0x8
c002015e:	01 c0                	add    eax,eax
c0020160:	40                   	inc    eax
c0020161:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020164:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020167:	50                   	push   eax
c0020168:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002016b:	e8 60 fe ff ff       	call   c001ffd0 <IOAPIC::read(int)>
c0020170:	83 c4 08             	add    esp,0x8
c0020173:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020176:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002017d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020180:	c1 e0 18             	shl    eax,0x18
c0020183:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020186:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020189:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002018c:	52                   	push   edx
c002018d:	50                   	push   eax
c002018e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020191:	e8 58 ff ff ff       	call   c00200ee <IOAPIC::write(int, int)>
c0020196:	83 c4 0c             	add    esp,0xc
c0020199:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002019c:	50                   	push   eax
c002019d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201a0:	e8 2b fe ff ff       	call   c001ffd0 <IOAPIC::read(int)>
c00201a5:	83 c4 08             	add    esp,0x8
c00201a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00201ab:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00201b2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00201b9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00201c0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201c4:	74 09                	je     c00201cf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00201c6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00201cd:	eb 07                	jmp    c00201d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00201cf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00201d6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00201da:	74 09                	je     c00201e5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00201dc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00201e3:	eb 07                	jmp    c00201ec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00201e5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00201ec:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00201f3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00201f7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00201fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00201fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020200:	52                   	push   edx
c0020201:	50                   	push   eax
c0020202:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020205:	e8 e4 fe ff ff       	call   c00200ee <IOAPIC::write(int, int)>
c002020a:	83 c4 0c             	add    esp,0xc
c002020d:	90                   	nop
c002020e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020211:	c9                   	leave  
c0020212:	c3                   	ret    
c0020213:	90                   	nop

c0020214 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0020214:	55                   	push   ebp
c0020215:	89 e5                	mov    ebp,esp
c0020217:	57                   	push   edi
c0020218:	56                   	push   esi
c0020219:	53                   	push   ebx
c002021a:	83 ec 2c             	sub    esp,0x2c
c002021d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020220:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020223:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020227:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002022b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002022f:	74 5a                	je     c002028b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020231:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0020235:	7f 44                	jg     c002027b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0020237:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002023a:	05 c0 5a 02 c0       	add    eax,0xc0025ac0
c002023f:	8a 00                	mov    al,BYTE PTR [eax]
c0020241:	0f b6 c0             	movzx  eax,al
c0020244:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0020247:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002024a:	66 8b 84 00 00 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9300]
c0020252:	0f b7 c0             	movzx  eax,ax
c0020255:	83 e0 02             	and    eax,0x2
c0020258:	85 c0                	test   eax,eax
c002025a:	74 04                	je     c0020260 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002025c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0020260:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020263:	66 8b 84 00 00 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9300]
c002026b:	0f b7 c0             	movzx  eax,ax
c002026e:	83 e0 08             	and    eax,0x8
c0020271:	85 c0                	test   eax,eax
c0020273:	74 16                	je     c002028b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020275:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020279:	eb 10                	jmp    c002028b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002027b:	83 ec 0c             	sub    esp,0xc
c002027e:	68 28 54 02 c0       	push   0xc0025428
c0020283:	e8 a5 40 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0020288:	83 c4 10             	add    esp,0x10
c002028b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002028f:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c0020294:	83 ec 08             	sub    esp,0x8
c0020297:	50                   	push   eax
c0020298:	68 60 54 02 c0       	push   0xc0025460
c002029d:	e8 c9 c7 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00202a2:	83 c4 10             	add    esp,0x10
c00202a5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00202ac:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c00202b1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00202b4:	7d 67                	jge    c002031d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00202b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202b9:	8b 04 85 20 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce0]
c00202c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202c3:	83 ec 08             	sub    esp,0x8
c00202c6:	52                   	push   edx
c00202c7:	50                   	push   eax
c00202c8:	e8 d1 fc ff ff       	call   c001ff9e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00202cd:	83 c4 10             	add    esp,0x10
c00202d0:	84 c0                	test   al,al
c00202d2:	74 44                	je     c0020318 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00202d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202d7:	8b 1c 85 20 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7ce0]
c00202de:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00202e2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00202e5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00202e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202ec:	83 c0 20             	add    eax,0x20
c00202ef:	0f b6 f0             	movzx  esi,al
c00202f2:	b8 00 00 00 00       	mov    eax,0x0
c00202f7:	99                   	cdq    
c00202f8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00202fb:	0f b6 c9             	movzx  ecx,cl
c00202fe:	83 ec 04             	sub    esp,0x4
c0020301:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020304:	57                   	push   edi
c0020305:	56                   	push   esi
c0020306:	52                   	push   edx
c0020307:	50                   	push   eax
c0020308:	51                   	push   ecx
c0020309:	53                   	push   ebx
c002030a:	e8 0b fe ff ff       	call   c002011a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002030f:	83 c4 20             	add    esp,0x20
c0020312:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0020316:	eb 05                	jmp    c002031d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020318:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002031b:	eb 8f                	jmp    c00202ac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002031d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020320:	83 f0 01             	xor    eax,0x1
c0020323:	84 c0                	test   al,al
c0020325:	74 10                	je     c0020337 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0020327:	83 ec 0c             	sub    esp,0xc
c002032a:	68 77 54 02 c0       	push   0xc0025477
c002032f:	e8 f9 3f ff ff       	call   c001432d <Krnl::panic(char const*)>
c0020334:	83 c4 10             	add    esp,0x10
c0020337:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002033b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0020342:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0020346:	7f 65                	jg     c00203ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002034b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002034e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020355:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020358:	01 ca                	add    edx,ecx
c002035a:	83 c2 54             	add    edx,0x54
c002035d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0020361:	85 c0                	test   eax,eax
c0020363:	75 43                	jne    c00203a8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0020365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020368:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002036b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020372:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020375:	01 ca                	add    edx,ecx
c0020377:	8d 4a 54             	lea    ecx,[edx+0x54]
c002037a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002037d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020384:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020387:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002038e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020391:	01 ca                	add    edx,ecx
c0020393:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020399:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002039c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00203a3:	83 e8 20             	sub    eax,0x20
c00203a6:	eb 1a                	jmp    c00203c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00203a8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00203ab:	eb 95                	jmp    c0020342 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00203ad:	83 ec 0c             	sub    esp,0xc
c00203b0:	68 84 54 02 c0       	push   0xc0025484
c00203b5:	e8 73 3f ff ff       	call   c001432d <Krnl::panic(char const*)>
c00203ba:	83 c4 10             	add    esp,0x10
c00203bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00203c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00203c5:	5b                   	pop    ebx
c00203c6:	5e                   	pop    esi
c00203c7:	5f                   	pop    edi
c00203c8:	5d                   	pop    ebp
c00203c9:	c3                   	ret    

c00203ca <PIC::disable()>:
c00203ca:	55                   	push   ebp
c00203cb:	89 e5                	mov    ebp,esp
c00203cd:	83 ec 10             	sub    esp,0x10
c00203d0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00203d6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00203da:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00203dd:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00203e1:	ee                   	out    dx,al
c00203e2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00203e8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00203ec:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00203ef:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00203f3:	ee                   	out    dx,al
c00203f4:	90                   	nop
c00203f5:	c9                   	leave  
c00203f6:	c3                   	ret    
c00203f7:	90                   	nop

c00203f8 <PIC::close(int, int, void*)>:
c00203f8:	55                   	push   ebp
c00203f9:	89 e5                	mov    ebp,esp
c00203fb:	83 ec 08             	sub    esp,0x8
c00203fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020401:	8b 00                	mov    eax,DWORD PTR [eax]
c0020403:	83 c0 3c             	add    eax,0x3c
c0020406:	8b 00                	mov    eax,DWORD PTR [eax]
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002040e:	ff d0                	call   eax
c0020410:	83 c4 10             	add    esp,0x10
c0020413:	b8 00 00 00 00       	mov    eax,0x0
c0020418:	c9                   	leave  
c0020419:	c3                   	ret    

c002041a <PIC::PIC()>:
c002041a:	83 ec 0c             	sub    esp,0xc
c002041d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020421:	83 ec 08             	sub    esp,0x8
c0020424:	68 30 55 02 c0       	push   0xc0025530
c0020429:	50                   	push   eax
c002042a:	e8 ff e3 fe ff       	call   c000e82e <InterruptController::InterruptController(char const*)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	ba 5c 55 02 c0       	mov    edx,0xc002555c
c0020437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043b:	89 10                	mov    DWORD PTR [eax],edx
c002043d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020441:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020447:	0f b6 d0             	movzx  edx,al
c002044a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0020455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020459:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002045f:	0f b6 d0             	movzx  edx,al
c0020462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020466:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002046b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020475:	8d 50 01             	lea    edx,[eax+0x1]
c0020478:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002047c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020482:	0f b6 d0             	movzx  edx,al
c0020485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020489:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002048d:	83 e1 3f             	and    ecx,0x3f
c0020490:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020498:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002049e:	0f b6 d0             	movzx  edx,al
c00204a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00204ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204b6:	0f b6 d0             	movzx  edx,al
c00204b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204cc:	8d 50 01             	lea    edx,[eax+0x1]
c00204cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204d9:	0f b6 d0             	movzx  edx,al
c00204dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204e4:	83 e1 3f             	and    ecx,0x3f
c00204e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204eb:	90                   	nop
c00204ec:	83 c4 0c             	add    esp,0xc
c00204ef:	c3                   	ret    

c00204f0 <PIC::ioWait()>:
c00204f0:	eb 00                	jmp    c00204f2 <PIC::ioWait()+0x2>
c00204f2:	eb 00                	jmp    c00204f4 <PIC::ioWait()+0x4>
c00204f4:	90                   	nop
c00204f5:	c3                   	ret    

c00204f6 <PIC::getIRQReg(int)>:
c00204f6:	55                   	push   ebp
c00204f7:	89 e5                	mov    ebp,esp
c00204f9:	83 ec 10             	sub    esp,0x10
c00204fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00204ff:	0f b6 c0             	movzx  eax,al
c0020502:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020508:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002050b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002050e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020512:	ee                   	out    dx,al
c0020513:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020516:	0f b6 c0             	movzx  eax,al
c0020519:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002051f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0020522:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020525:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020529:	ee                   	out    dx,al
c002052a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0020530:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0020534:	89 c2                	mov    edx,eax
c0020536:	ec                   	in     al,dx
c0020537:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002053a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002053d:	0f b6 c0             	movzx  eax,al
c0020540:	c1 e0 08             	shl    eax,0x8
c0020543:	89 c1                	mov    ecx,eax
c0020545:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002054b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002054f:	89 c2                	mov    edx,eax
c0020551:	ec                   	in     al,dx
c0020552:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0020555:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020558:	0f b6 c0             	movzx  eax,al
c002055b:	09 c8                	or     eax,ecx
c002055d:	c9                   	leave  
c002055e:	c3                   	ret    
c002055f:	90                   	nop

c0020560 <PIC::eoi(unsigned char)>:
c0020560:	55                   	push   ebp
c0020561:	89 e5                	mov    ebp,esp
c0020563:	83 ec 14             	sub    esp,0x14
c0020566:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020569:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002056c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0020570:	75 1e                	jne    c0020590 <PIC::eoi(unsigned char)+0x30>
c0020572:	6a 0b                	push   0xb
c0020574:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020577:	e8 7a ff ff ff       	call   c00204f6 <PIC::getIRQReg(int)>
c002057c:	83 c4 08             	add    esp,0x8
c002057f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0020583:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0020587:	25 80 00 00 00       	and    eax,0x80
c002058c:	85 c0                	test   eax,eax
c002058e:	74 5f                	je     c00205ef <PIC::eoi(unsigned char)+0x8f>
c0020590:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0020594:	75 2d                	jne    c00205c3 <PIC::eoi(unsigned char)+0x63>
c0020596:	6a 0b                	push   0xb
c0020598:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002059b:	e8 56 ff ff ff       	call   c00204f6 <PIC::getIRQReg(int)>
c00205a0:	83 c4 08             	add    esp,0x8
c00205a3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00205a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00205aa:	66 85 c0             	test   ax,ax
c00205ad:	78 14                	js     c00205c3 <PIC::eoi(unsigned char)+0x63>
c00205af:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00205b5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00205b9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00205bc:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00205c0:	ee                   	out    dx,al
c00205c1:	eb 2d                	jmp    c00205f0 <PIC::eoi(unsigned char)+0x90>
c00205c3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205c7:	76 12                	jbe    c00205db <PIC::eoi(unsigned char)+0x7b>
c00205c9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00205cf:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00205d3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00205d6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00205da:	ee                   	out    dx,al
c00205db:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00205e1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00205e5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00205e8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00205ec:	ee                   	out    dx,al
c00205ed:	eb 01                	jmp    c00205f0 <PIC::eoi(unsigned char)+0x90>
c00205ef:	90                   	nop
c00205f0:	c9                   	leave  
c00205f1:	c3                   	ret    

c00205f2 <PIC::remap()>:
c00205f2:	55                   	push   ebp
c00205f3:	89 e5                	mov    ebp,esp
c00205f5:	83 ec 48             	sub    esp,0x48
c00205f8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00205ff:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0020606:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002060c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002060f:	89 c2                	mov    edx,eax
c0020611:	ec                   	in     al,dx
c0020612:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0020615:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020618:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002061b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020621:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0020624:	89 c2                	mov    edx,eax
c0020626:	ec                   	in     al,dx
c0020627:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002062a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002062d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0020630:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0020636:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002063a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002063d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0020640:	ee                   	out    dx,al
c0020641:	83 ec 0c             	sub    esp,0xc
c0020644:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020647:	e8 a4 fe ff ff       	call   c00204f0 <PIC::ioWait()>
c002064c:	83 c4 10             	add    esp,0x10
c002064f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0020655:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020659:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002065c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002065f:	ee                   	out    dx,al
c0020660:	83 ec 0c             	sub    esp,0xc
c0020663:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020666:	e8 85 fe ff ff       	call   c00204f0 <PIC::ioWait()>
c002066b:	83 c4 10             	add    esp,0x10
c002066e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0020671:	0f b6 c0             	movzx  eax,al
c0020674:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002067a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002067d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0020680:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0020683:	ee                   	out    dx,al
c0020684:	83 ec 0c             	sub    esp,0xc
c0020687:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002068a:	e8 61 fe ff ff       	call   c00204f0 <PIC::ioWait()>
c002068f:	83 c4 10             	add    esp,0x10
c0020692:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020695:	0f b6 c0             	movzx  eax,al
c0020698:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002069e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00206a1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00206a4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00206a7:	ee                   	out    dx,al
c00206a8:	83 ec 0c             	sub    esp,0xc
c00206ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206ae:	e8 3d fe ff ff       	call   c00204f0 <PIC::ioWait()>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00206bc:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00206c0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00206c3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00206c6:	ee                   	out    dx,al
c00206c7:	83 ec 0c             	sub    esp,0xc
c00206ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206cd:	e8 1e fe ff ff       	call   c00204f0 <PIC::ioWait()>
c00206d2:	83 c4 10             	add    esp,0x10
c00206d5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00206db:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00206df:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00206e2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00206e5:	ee                   	out    dx,al
c00206e6:	83 ec 0c             	sub    esp,0xc
c00206e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206ec:	e8 ff fd ff ff       	call   c00204f0 <PIC::ioWait()>
c00206f1:	83 c4 10             	add    esp,0x10
c00206f4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00206fa:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00206fe:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020701:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0020704:	ee                   	out    dx,al
c0020705:	83 ec 0c             	sub    esp,0xc
c0020708:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002070b:	e8 e0 fd ff ff       	call   c00204f0 <PIC::ioWait()>
c0020710:	83 c4 10             	add    esp,0x10
c0020713:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020719:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002071d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020720:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020723:	ee                   	out    dx,al
c0020724:	83 ec 0c             	sub    esp,0xc
c0020727:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002072a:	e8 c1 fd ff ff       	call   c00204f0 <PIC::ioWait()>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0020736:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002073c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002073f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0020742:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020745:	ee                   	out    dx,al
c0020746:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002074a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0020750:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0020753:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0020756:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020759:	ee                   	out    dx,al
c002075a:	90                   	nop
c002075b:	c9                   	leave  
c002075c:	c3                   	ret    
c002075d:	90                   	nop

c002075e <PIC::open(int, int, void*)>:
c002075e:	55                   	push   ebp
c002075f:	89 e5                	mov    ebp,esp
c0020761:	83 ec 18             	sub    esp,0x18
c0020764:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002076a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002076e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020771:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020775:	ee                   	out    dx,al
c0020776:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002077c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0020780:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020783:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020787:	ee                   	out    dx,al
c0020788:	83 ec 0c             	sub    esp,0xc
c002078b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002078e:	e8 5f fe ff ff       	call   c00205f2 <PIC::remap()>
c0020793:	83 c4 10             	add    esp,0x10
c0020796:	b8 00 00 00 00       	mov    eax,0x0
c002079b:	c9                   	leave  
c002079c:	c3                   	ret    
c002079d:	66 90                	xchg   ax,ax
c002079f:	90                   	nop

c00207a0 <APICTimer::close(int, int, void*)>:
c00207a0:	b8 00 00 00 00       	mov    eax,0x0
c00207a5:	c3                   	ret    
c00207a6:	66 90                	xchg   ax,ax

c00207a8 <apicTimerHandler(regs*, void*)>:
c00207a8:	83 ec 0c             	sub    esp,0xc
c00207ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207af:	8b 08                	mov    ecx,DWORD PTR [eax]
c00207b1:	b8 10 27 00 00       	mov    eax,0x2710
c00207b6:	ba 00 00 00 00       	mov    edx,0x0
c00207bb:	f7 f1                	div    ecx
c00207bd:	83 ec 0c             	sub    esp,0xc
c00207c0:	50                   	push   eax
c00207c1:	e8 73 ff fe ff       	call   c0010739 <timerHandler(unsigned int)>
c00207c6:	83 c4 10             	add    esp,0x10
c00207c9:	90                   	nop
c00207ca:	83 c4 0c             	add    esp,0xc
c00207cd:	c3                   	ret    
c00207ce:	66 90                	xchg   ax,ax

c00207d0 <APICTimer::write(int)>:
c00207d0:	83 ec 1c             	sub    esp,0x1c
c00207d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00207db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00207e1:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00207e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207ec:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00207f2:	83 ec 0c             	sub    esp,0xc
c00207f5:	50                   	push   eax
c00207f6:	e8 e1 f4 ff ff       	call   c001fcdc <APIC::getBase()>
c00207fb:	83 c4 10             	add    esp,0x10
c00207fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020802:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0020807:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002080b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002080f:	05 e0 03 00 00       	add    eax,0x3e0
c0020814:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002081a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002081e:	05 80 03 00 00       	add    eax,0x380
c0020823:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0020829:	fb                   	sti    
c002082a:	66 90                	xchg   ax,ax
c002082c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020830:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0020836:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c002083b:	39 c2                	cmp    edx,eax
c002083d:	76 05                	jbe    c0020844 <APICTimer::write(int)+0x74>
c002083f:	eb eb                	jmp    c002082c <APICTimer::write(int)+0x5c>
c0020841:	8d 76 00             	lea    esi,[esi+0x0]
c0020844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020848:	05 20 03 00 00       	add    eax,0x320
c002084d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0020853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020857:	05 90 03 00 00       	add    eax,0x390
c002085c:	8b 00                	mov    eax,DWORD PTR [eax]
c002085e:	f7 d0                	not    eax
c0020860:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020864:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002086c:	ba 00 00 00 00       	mov    edx,0x0
c0020871:	f7 f1                	div    ecx
c0020873:	89 04 24             	mov    DWORD PTR [esp],eax
c0020876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002087a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020880:	0d 00 00 02 00       	or     eax,0x20000
c0020885:	89 c2                	mov    edx,eax
c0020887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002088b:	05 20 03 00 00       	add    eax,0x320
c0020890:	89 10                	mov    DWORD PTR [eax],edx
c0020892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020896:	05 e0 03 00 00       	add    eax,0x3e0
c002089b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00208a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208a5:	05 80 03 00 00       	add    eax,0x380
c00208aa:	89 c2                	mov    edx,eax
c00208ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00208af:	89 02                	mov    DWORD PTR [edx],eax
c00208b1:	90                   	nop
c00208b2:	83 c4 1c             	add    esp,0x1c
c00208b5:	c3                   	ret    
c00208b6:	66 90                	xchg   ax,ax

c00208b8 <APICTimer::open(int, int, void*)>:
c00208b8:	57                   	push   edi
c00208b9:	56                   	push   esi
c00208ba:	53                   	push   ebx
c00208bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00208c1:	83 c0 24             	add    eax,0x24
c00208c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00208c6:	83 ec 08             	sub    esp,0x8
c00208c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208d1:	ff d0                	call   eax
c00208d3:	83 c4 10             	add    esp,0x10
c00208d6:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00208db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00208e1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00208e7:	83 ec 0c             	sub    esp,0xc
c00208ea:	50                   	push   eax
c00208eb:	e8 ec f3 ff ff       	call   c001fcdc <APIC::getBase()>
c00208f0:	83 c4 10             	add    esp,0x10
c00208f3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00208f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208fd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020903:	0f b6 f8             	movzx  edi,al
c0020906:	89 d0                	mov    eax,edx
c0020908:	ba 00 00 00 00       	mov    edx,0x0
c002090d:	89 c1                	mov    ecx,eax
c002090f:	80 e5 ff             	and    ch,0xff
c0020912:	89 cb                	mov    ebx,ecx
c0020914:	0f b6 f2             	movzx  esi,dl
c0020917:	89 d8                	mov    eax,ebx
c0020919:	89 f2                	mov    edx,esi
c002091b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002091f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020922:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020926:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002092a:	83 e0 00             	and    eax,0x0
c002092d:	09 d0                	or     eax,edx
c002092f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020937:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002093d:	8d 50 01             	lea    edx,[eax+0x1]
c0020940:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020944:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002094a:	0f b6 d0             	movzx  edx,al
c002094d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020951:	83 c2 08             	add    edx,0x8
c0020954:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020958:	0f b6 c9             	movzx  ecx,cl
c002095b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0020961:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020969:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002096d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020977:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002097b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020981:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020985:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002098b:	83 ec 0c             	sub    esp,0xc
c002098e:	51                   	push   ecx
c002098f:	6a 01                	push   0x1
c0020991:	68 a8 07 02 c0       	push   0xc00207a8
c0020996:	52                   	push   edx
c0020997:	50                   	push   eax
c0020998:	e8 8d d4 fe ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002099d:	83 c4 20             	add    esp,0x20
c00209a0:	89 c2                	mov    edx,eax
c00209a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00209ac:	b8 00 00 00 00       	mov    eax,0x0
c00209b1:	5b                   	pop    ebx
c00209b2:	5e                   	pop    esi
c00209b3:	5f                   	pop    edi
c00209b4:	c3                   	ret    
c00209b5:	90                   	nop
c00209b6:	66 90                	xchg   ax,ax

c00209b8 <APICTimer::APICTimer()>:
c00209b8:	83 ec 0c             	sub    esp,0xc
c00209bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209bf:	83 ec 08             	sub    esp,0x8
c00209c2:	68 9c 55 02 c0       	push   0xc002559c
c00209c7:	50                   	push   eax
c00209c8:	e8 db fc fe ff       	call   c00106a8 <Timer::Timer(char const*)>
c00209cd:	83 c4 10             	add    esp,0x10
c00209d0:	ba b0 55 02 c0       	mov    edx,0xc00255b0
c00209d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d9:	89 10                	mov    DWORD PTR [eax],edx
c00209db:	90                   	nop
c00209dc:	83 c4 0c             	add    esp,0xc
c00209df:	c3                   	ret    

c00209e0 <PIT::write(int)>:
c00209e0:	83 ec 10             	sub    esp,0x10
c00209e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00209f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209f5:	a3 44 83 02 c0       	mov    ds:0xc0028344,eax
c00209fa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00209ff:	99                   	cdq    
c0020a00:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a08:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a0f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a14:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a18:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a1d:	ee                   	out    dx,al
c0020a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a22:	0f b6 c0             	movzx  eax,al
c0020a25:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020a2c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020a30:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020a34:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020a39:	ee                   	out    dx,al
c0020a3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a3e:	c1 f8 08             	sar    eax,0x8
c0020a41:	0f b6 c0             	movzx  eax,al
c0020a44:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020a4b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020a4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020a53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020a58:	ee                   	out    dx,al
c0020a59:	90                   	nop
c0020a5a:	83 c4 10             	add    esp,0x10
c0020a5d:	c3                   	ret    
c0020a5e:	66 90                	xchg   ax,ax

c0020a60 <pitHandler(regs*, void*)>:
c0020a60:	83 ec 0c             	sub    esp,0xc
c0020a63:	8b 0d 44 83 02 c0    	mov    ecx,DWORD PTR ds:0xc0028344
c0020a69:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020a6e:	99                   	cdq    
c0020a6f:	f7 f9                	idiv   ecx
c0020a71:	83 ec 0c             	sub    esp,0xc
c0020a74:	50                   	push   eax
c0020a75:	e8 bf fc fe ff       	call   c0010739 <timerHandler(unsigned int)>
c0020a7a:	83 c4 10             	add    esp,0x10
c0020a7d:	90                   	nop
c0020a7e:	83 c4 0c             	add    esp,0xc
c0020a81:	c3                   	ret    
c0020a82:	66 90                	xchg   ax,ax

c0020a84 <PIT::open(int, int, void*)>:
c0020a84:	83 ec 0c             	sub    esp,0xc
c0020a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a8d:	83 c0 24             	add    eax,0x24
c0020a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a92:	83 ec 08             	sub    esp,0x8
c0020a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a9d:	ff d0                	call   eax
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aa6:	83 ec 0c             	sub    esp,0xc
c0020aa9:	6a 00                	push   0x0
c0020aab:	6a 01                	push   0x1
c0020aad:	68 60 0a 02 c0       	push   0xc0020a60
c0020ab2:	6a 00                	push   0x0
c0020ab4:	50                   	push   eax
c0020ab5:	e8 70 d3 fe ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020aba:	83 c4 20             	add    esp,0x20
c0020abd:	89 c2                	mov    edx,eax
c0020abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020ac9:	b8 00 00 00 00       	mov    eax,0x0
c0020ace:	83 c4 0c             	add    esp,0xc
c0020ad1:	c3                   	ret    
c0020ad2:	66 90                	xchg   ax,ax

c0020ad4 <PIT::close(int, int, void*)>:
c0020ad4:	83 ec 0c             	sub    esp,0xc
c0020ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020adb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae9:	6a 01                	push   0x1
c0020aeb:	68 60 0a 02 c0       	push   0xc0020a60
c0020af0:	6a 00                	push   0x0
c0020af2:	50                   	push   eax
c0020af3:	e8 7c d3 fe ff       	call   c000de74 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020af8:	83 c4 10             	add    esp,0x10
c0020afb:	b8 00 00 00 00       	mov    eax,0x0
c0020b00:	83 c4 0c             	add    esp,0xc
c0020b03:	c3                   	ret    

c0020b04 <PIT::PIT()>:
c0020b04:	83 ec 0c             	sub    esp,0xc
c0020b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0b:	83 ec 08             	sub    esp,0x8
c0020b0e:	68 d8 55 02 c0       	push   0xc00255d8
c0020b13:	50                   	push   eax
c0020b14:	e8 8f fb fe ff       	call   c00106a8 <Timer::Timer(char const*)>
c0020b19:	83 c4 10             	add    esp,0x10
c0020b1c:	ba 00 56 02 c0       	mov    edx,0xc0025600
c0020b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b25:	89 10                	mov    DWORD PTR [eax],edx
c0020b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b31:	0f b6 d0             	movzx  edx,al
c0020b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b38:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b49:	0f b6 d0             	movzx  edx,al
c0020b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b50:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b5f:	8d 50 01             	lea    edx,[eax+0x1]
c0020b62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b66:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020b6c:	0f b6 d0             	movzx  edx,al
c0020b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b73:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020b77:	83 e1 3f             	and    ecx,0x3f
c0020b7a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020b7e:	90                   	nop
c0020b7f:	83 c4 0c             	add    esp,0xc
c0020b82:	c3                   	ret    
c0020b83:	66 90                	xchg   ax,ax
c0020b85:	66 90                	xchg   ax,ax
c0020b87:	66 90                	xchg   ax,ax
c0020b89:	66 90                	xchg   ax,ax
c0020b8b:	66 90                	xchg   ax,ax
c0020b8d:	66 90                	xchg   ax,ax
c0020b8f:	90                   	nop

c0020b90 <avxDetect>:
c0020b90:	b8 00 00 00 00       	mov    eax,0x0
c0020b95:	c3                   	ret    

c0020b96 <avxSave>:
c0020b96:	c3                   	ret    

c0020b97 <avxLoad>:
c0020b97:	c3                   	ret    

c0020b98 <avxInit>:
c0020b98:	c3                   	ret    

c0020b99 <avxClose>:
c0020b99:	c3                   	ret    

c0020b9a <wouldSheSayYes>:
c0020b9a:	c3                   	ret    
c0020b9b:	49                   	dec    ecx
c0020b9c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020ba0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020ba4:	75 20                	jne    c0020bc6 <sseDetect.noSSE+0x1>
c0020ba6:	4e                   	dec    esi
c0020ba7:	79 61                	jns    c0020c0a <x87Detect+0x14>
c0020ba9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020bae:	66 90                	xchg   ax,ax

c0020bb0 <absolutelyNoChanceInHell>:
c0020bb0:	b8 01 00 00 00       	mov    eax,0x1
c0020bb5:	0f a2                	cpuid  
c0020bb7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020bbd:	74 06                	je     c0020bc5 <sseDetect.noSSE>
c0020bbf:	b8 01 00 00 00       	mov    eax,0x1
c0020bc4:	c3                   	ret    

c0020bc5 <sseDetect.noSSE>:
c0020bc5:	31 c0                	xor    eax,eax
c0020bc7:	c3                   	ret    

c0020bc8 <sseSave>:
c0020bc8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020bcd:	c3                   	ret    

c0020bce <sseLoad>:
c0020bce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020bd3:	c3                   	ret    

c0020bd4 <sseInit>:
c0020bd4:	e8 49 00 00 00       	call   c0020c22 <x87Init>
c0020bd9:	0f 20 e0             	mov    eax,cr4
c0020bdc:	66 0d 00 06          	or     ax,0x600
c0020be0:	0f 22 e0             	mov    cr4,eax
c0020be3:	c3                   	ret    

c0020be4 <sseClose>:
c0020be4:	c3                   	ret    
c0020be5:	66 90                	xchg   ax,ax
c0020be7:	66 90                	xchg   ax,ax
c0020be9:	66 90                	xchg   ax,ax
c0020beb:	66 90                	xchg   ax,ax
c0020bed:	66 90                	xchg   ax,ax
c0020bef:	90                   	nop

c0020bf0 <value_37F>:
c0020bf0:	7f 03                	jg     c0020bf5 <value_37A+0x1>

c0020bf2 <value_37E>:
c0020bf2:	7e 03                	jle    c0020bf7 <x87Detect+0x1>

c0020bf4 <value_37A>:
c0020bf4:	7a 03                	jp     c0020bf9 <x87Detect+0x3>

c0020bf6 <x87Detect>:
c0020bf6:	b8 01 00 00 00       	mov    eax,0x1
c0020bfb:	0f a2                	cpuid  
c0020bfd:	f7 c2 01 00 00 00    	test   edx,0x1
c0020c03:	74 06                	je     c0020c0b <x87Detect.nox87>
c0020c05:	b8 01 00 00 00       	mov    eax,0x1
c0020c0a:	c3                   	ret    

c0020c0b <x87Detect.nox87>:
c0020c0b:	b8 00 00 00 00       	mov    eax,0x0
c0020c10:	c3                   	ret    

c0020c11 <x87Save>:
c0020c11:	55                   	push   ebp
c0020c12:	89 e5                	mov    ebp,esp
c0020c14:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c18:	c9                   	leave  
c0020c19:	c3                   	ret    

c0020c1a <x87Load>:
c0020c1a:	55                   	push   ebp
c0020c1b:	89 e5                	mov    ebp,esp
c0020c1d:	dd 65 08             	frstor [ebp+0x8]
c0020c20:	c9                   	leave  
c0020c21:	c3                   	ret    

c0020c22 <x87Init>:
c0020c22:	9b db e3             	finit  
c0020c25:	0f 20 c0             	mov    eax,cr0
c0020c28:	66 25 fb ff          	and    ax,0xfffb
c0020c2c:	66 0d 22 00          	or     ax,0x22
c0020c30:	0f 22 c0             	mov    cr0,eax
c0020c33:	0f 06                	clts   
c0020c35:	d9 2d f4 0b 02 c0    	fldcw  WORD PTR ds:0xc0020bf4
c0020c3b:	c3                   	ret    

c0020c3c <x87Close>:
c0020c3c:	c3                   	ret    
c0020c3d:	66 90                	xchg   ax,ax
c0020c3f:	90                   	nop

c0020c40 <__do_global_ctors_aux>:
c0020c40:	a1 dc 1d 02 c0       	mov    eax,ds:0xc0021ddc
c0020c45:	83 f8 ff             	cmp    eax,0xffffffff
c0020c48:	74 1a                	je     c0020c64 <__do_global_ctors_aux+0x24>
c0020c4a:	55                   	push   ebp
c0020c4b:	89 e5                	mov    ebp,esp
c0020c4d:	53                   	push   ebx
c0020c4e:	52                   	push   edx
c0020c4f:	bb dc 1d 02 c0       	mov    ebx,0xc0021ddc
c0020c54:	ff d0                	call   eax
c0020c56:	83 eb 04             	sub    ebx,0x4
c0020c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020c5b:	83 f8 ff             	cmp    eax,0xffffffff
c0020c5e:	75 f4                	jne    c0020c54 <__do_global_ctors_aux+0x14>
c0020c60:	58                   	pop    eax
c0020c61:	5b                   	pop    ebx
c0020c62:	5d                   	pop    ebp
c0020c63:	c3                   	ret    
c0020c64:	c3                   	ret    
c0020c65:	66 90                	xchg   ax,ax
c0020c67:	90                   	nop

c0020c68 <__divdi3>:
c0020c68:	55                   	push   ebp
c0020c69:	57                   	push   edi
c0020c6a:	56                   	push   esi
c0020c6b:	53                   	push   ebx
c0020c6c:	83 ec 1c             	sub    esp,0x1c
c0020c6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020c73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020c7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020c7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c86:	85 db                	test   ebx,ebx
c0020c88:	0f 88 8e 00 00 00    	js     c0020d1c <__divdi3+0xb4>
c0020c8e:	89 dd                	mov    ebp,ebx
c0020c90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020c98:	89 d3                	mov    ebx,edx
c0020c9a:	85 d2                	test   edx,edx
c0020c9c:	79 0d                	jns    c0020cab <__divdi3+0x43>
c0020c9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020ca2:	f7 d8                	neg    eax
c0020ca4:	83 d2 00             	adc    edx,0x0
c0020ca7:	f7 da                	neg    edx
c0020ca9:	89 d3                	mov    ebx,edx
c0020cab:	89 c7                	mov    edi,eax
c0020cad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020cb0:	85 db                	test   ebx,ebx
c0020cb2:	75 48                	jne    c0020cfc <__divdi3+0x94>
c0020cb4:	39 ef                	cmp    edi,ebp
c0020cb6:	76 24                	jbe    c0020cdc <__divdi3+0x74>
c0020cb8:	89 ea                	mov    edx,ebp
c0020cba:	f7 f7                	div    edi
c0020cbc:	89 c1                	mov    ecx,eax
c0020cbe:	31 f6                	xor    esi,esi
c0020cc0:	89 c8                	mov    eax,ecx
c0020cc2:	89 f2                	mov    edx,esi
c0020cc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020cc8:	85 c9                	test   ecx,ecx
c0020cca:	74 07                	je     c0020cd3 <__divdi3+0x6b>
c0020ccc:	f7 d8                	neg    eax
c0020cce:	83 d2 00             	adc    edx,0x0
c0020cd1:	f7 da                	neg    edx
c0020cd3:	83 c4 1c             	add    esp,0x1c
c0020cd6:	5b                   	pop    ebx
c0020cd7:	5e                   	pop    esi
c0020cd8:	5f                   	pop    edi
c0020cd9:	5d                   	pop    ebp
c0020cda:	c3                   	ret    
c0020cdb:	90                   	nop
c0020cdc:	85 ff                	test   edi,edi
c0020cde:	75 0b                	jne    c0020ceb <__divdi3+0x83>
c0020ce0:	b8 01 00 00 00       	mov    eax,0x1
c0020ce5:	31 d2                	xor    edx,edx
c0020ce7:	f7 f3                	div    ebx
c0020ce9:	89 c7                	mov    edi,eax
c0020ceb:	31 d2                	xor    edx,edx
c0020ced:	89 e8                	mov    eax,ebp
c0020cef:	f7 f7                	div    edi
c0020cf1:	89 c6                	mov    esi,eax
c0020cf3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020cf6:	f7 f7                	div    edi
c0020cf8:	89 c1                	mov    ecx,eax
c0020cfa:	eb c4                	jmp    c0020cc0 <__divdi3+0x58>
c0020cfc:	39 eb                	cmp    ebx,ebp
c0020cfe:	77 3c                	ja     c0020d3c <__divdi3+0xd4>
c0020d00:	0f bd f3             	bsr    esi,ebx
c0020d03:	83 f6 1f             	xor    esi,0x1f
c0020d06:	75 40                	jne    c0020d48 <__divdi3+0xe0>
c0020d08:	39 eb                	cmp    ebx,ebp
c0020d0a:	72 09                	jb     c0020d15 <__divdi3+0xad>
c0020d0c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d0f:	0f 87 97 00 00 00    	ja     c0020dac <__divdi3+0x144>
c0020d15:	b9 01 00 00 00       	mov    ecx,0x1
c0020d1a:	eb a4                	jmp    c0020cc0 <__divdi3+0x58>
c0020d1c:	f7 d9                	neg    ecx
c0020d1e:	83 d3 00             	adc    ebx,0x0
c0020d21:	f7 db                	neg    ebx
c0020d23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d2a:	89 dd                	mov    ebp,ebx
c0020d2c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020d34:	e9 5f ff ff ff       	jmp    c0020c98 <__divdi3+0x30>
c0020d39:	8d 76 00             	lea    esi,[esi+0x0]
c0020d3c:	31 f6                	xor    esi,esi
c0020d3e:	31 c9                	xor    ecx,ecx
c0020d40:	e9 7b ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020d45:	8d 76 00             	lea    esi,[esi+0x0]
c0020d48:	b8 20 00 00 00       	mov    eax,0x20
c0020d4d:	29 f0                	sub    eax,esi
c0020d4f:	89 f1                	mov    ecx,esi
c0020d51:	d3 e3                	shl    ebx,cl
c0020d53:	89 fa                	mov    edx,edi
c0020d55:	88 c1                	mov    cl,al
c0020d57:	d3 ea                	shr    edx,cl
c0020d59:	09 da                	or     edx,ebx
c0020d5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d5f:	89 f1                	mov    ecx,esi
c0020d61:	d3 e7                	shl    edi,cl
c0020d63:	89 eb                	mov    ebx,ebp
c0020d65:	88 c1                	mov    cl,al
c0020d67:	d3 eb                	shr    ebx,cl
c0020d69:	89 f1                	mov    ecx,esi
c0020d6b:	d3 e5                	shl    ebp,cl
c0020d6d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020d70:	88 c1                	mov    cl,al
c0020d72:	d3 ea                	shr    edx,cl
c0020d74:	09 d5                	or     ebp,edx
c0020d76:	89 e8                	mov    eax,ebp
c0020d78:	89 da                	mov    edx,ebx
c0020d7a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020d7e:	89 d3                	mov    ebx,edx
c0020d80:	89 c5                	mov    ebp,eax
c0020d82:	f7 e7                	mul    edi
c0020d84:	39 d3                	cmp    ebx,edx
c0020d86:	72 18                	jb     c0020da0 <__divdi3+0x138>
c0020d88:	74 0a                	je     c0020d94 <__divdi3+0x12c>
c0020d8a:	89 e9                	mov    ecx,ebp
c0020d8c:	31 f6                	xor    esi,esi
c0020d8e:	e9 2d ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020d93:	90                   	nop
c0020d94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020d97:	89 f1                	mov    ecx,esi
c0020d99:	d3 e7                	shl    edi,cl
c0020d9b:	39 c7                	cmp    edi,eax
c0020d9d:	73 eb                	jae    c0020d8a <__divdi3+0x122>
c0020d9f:	90                   	nop
c0020da0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020da3:	31 f6                	xor    esi,esi
c0020da5:	e9 16 ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020daa:	66 90                	xchg   ax,ax
c0020dac:	31 c9                	xor    ecx,ecx
c0020dae:	e9 0d ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020db3:	90                   	nop

c0020db4 <__moddi3>:
c0020db4:	55                   	push   ebp
c0020db5:	57                   	push   edi
c0020db6:	56                   	push   esi
c0020db7:	53                   	push   ebx
c0020db8:	83 ec 2c             	sub    esp,0x2c
c0020dbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020dbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020dc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020dc7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020dcb:	85 db                	test   ebx,ebx
c0020dcd:	0f 88 85 00 00 00    	js     c0020e58 <__moddi3+0xa4>
c0020dd3:	89 de                	mov    esi,ebx
c0020dd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020ddd:	89 d7                	mov    edi,edx
c0020ddf:	85 d2                	test   edx,edx
c0020de1:	79 09                	jns    c0020dec <__moddi3+0x38>
c0020de3:	f7 d8                	neg    eax
c0020de5:	83 d2 00             	adc    edx,0x0
c0020de8:	f7 da                	neg    edx
c0020dea:	89 d7                	mov    edi,edx
c0020dec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020df0:	89 cd                	mov    ebp,ecx
c0020df2:	85 ff                	test   edi,edi
c0020df4:	75 52                	jne    c0020e48 <__moddi3+0x94>
c0020df6:	89 c3                	mov    ebx,eax
c0020df8:	39 f0                	cmp    eax,esi
c0020dfa:	76 24                	jbe    c0020e20 <__moddi3+0x6c>
c0020dfc:	89 c8                	mov    eax,ecx
c0020dfe:	89 f2                	mov    edx,esi
c0020e00:	f7 f3                	div    ebx
c0020e02:	89 d6                	mov    esi,edx
c0020e04:	89 f0                	mov    eax,esi
c0020e06:	31 d2                	xor    edx,edx
c0020e08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e0c:	85 c9                	test   ecx,ecx
c0020e0e:	74 07                	je     c0020e17 <__moddi3+0x63>
c0020e10:	f7 d8                	neg    eax
c0020e12:	83 d2 00             	adc    edx,0x0
c0020e15:	f7 da                	neg    edx
c0020e17:	83 c4 2c             	add    esp,0x2c
c0020e1a:	5b                   	pop    ebx
c0020e1b:	5e                   	pop    esi
c0020e1c:	5f                   	pop    edi
c0020e1d:	5d                   	pop    ebp
c0020e1e:	c3                   	ret    
c0020e1f:	90                   	nop
c0020e20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e24:	85 db                	test   ebx,ebx
c0020e26:	75 0d                	jne    c0020e35 <__moddi3+0x81>
c0020e28:	b8 01 00 00 00       	mov    eax,0x1
c0020e2d:	31 d2                	xor    edx,edx
c0020e2f:	f7 f7                	div    edi
c0020e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e35:	89 f0                	mov    eax,esi
c0020e37:	31 d2                	xor    edx,edx
c0020e39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e3d:	f7 f7                	div    edi
c0020e3f:	89 e8                	mov    eax,ebp
c0020e41:	f7 f7                	div    edi
c0020e43:	89 d6                	mov    esi,edx
c0020e45:	eb bd                	jmp    c0020e04 <__moddi3+0x50>
c0020e47:	90                   	nop
c0020e48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e4c:	39 f7                	cmp    edi,esi
c0020e4e:	76 20                	jbe    c0020e70 <__moddi3+0xbc>
c0020e50:	89 c8                	mov    eax,ecx
c0020e52:	89 f2                	mov    edx,esi
c0020e54:	eb b2                	jmp    c0020e08 <__moddi3+0x54>
c0020e56:	66 90                	xchg   ax,ax
c0020e58:	f7 d9                	neg    ecx
c0020e5a:	83 d3 00             	adc    ebx,0x0
c0020e5d:	f7 db                	neg    ebx
c0020e5f:	89 de                	mov    esi,ebx
c0020e61:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020e69:	e9 6f ff ff ff       	jmp    c0020ddd <__moddi3+0x29>
c0020e6e:	66 90                	xchg   ax,ax
c0020e70:	0f bd c7             	bsr    eax,edi
c0020e73:	83 f0 1f             	xor    eax,0x1f
c0020e76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e7a:	75 24                	jne    c0020ea0 <__moddi3+0xec>
c0020e7c:	39 f7                	cmp    edi,esi
c0020e7e:	72 06                	jb     c0020e86 <__moddi3+0xd2>
c0020e80:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020e84:	77 0c                	ja     c0020e92 <__moddi3+0xde>
c0020e86:	89 e9                	mov    ecx,ebp
c0020e88:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020e8c:	19 fe                	sbb    esi,edi
c0020e8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e96:	89 f2                	mov    edx,esi
c0020e98:	e9 6b ff ff ff       	jmp    c0020e08 <__moddi3+0x54>
c0020e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0020ea0:	b8 20 00 00 00       	mov    eax,0x20
c0020ea5:	89 c2                	mov    edx,eax
c0020ea7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020eab:	29 da                	sub    edx,ebx
c0020ead:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020eb1:	88 d9                	mov    cl,bl
c0020eb3:	d3 e7                	shl    edi,cl
c0020eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eb9:	88 d1                	mov    cl,dl
c0020ebb:	d3 e8                	shr    eax,cl
c0020ebd:	09 c7                	or     edi,eax
c0020ebf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020ec3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020ec7:	89 d8                	mov    eax,ebx
c0020ec9:	88 d9                	mov    cl,bl
c0020ecb:	d3 e7                	shl    edi,cl
c0020ecd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020ed1:	89 f3                	mov    ebx,esi
c0020ed3:	88 d1                	mov    cl,dl
c0020ed5:	d3 eb                	shr    ebx,cl
c0020ed7:	89 c7                	mov    edi,eax
c0020ed9:	88 c1                	mov    cl,al
c0020edb:	d3 e6                	shl    esi,cl
c0020edd:	89 e8                	mov    eax,ebp
c0020edf:	88 d1                	mov    cl,dl
c0020ee1:	d3 e8                	shr    eax,cl
c0020ee3:	09 f0                	or     eax,esi
c0020ee5:	89 f9                	mov    ecx,edi
c0020ee7:	d3 e5                	shl    ebp,cl
c0020ee9:	89 da                	mov    edx,ebx
c0020eeb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020eef:	89 d3                	mov    ebx,edx
c0020ef1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ef5:	89 c6                	mov    esi,eax
c0020ef7:	89 d1                	mov    ecx,edx
c0020ef9:	39 d3                	cmp    ebx,edx
c0020efb:	72 27                	jb     c0020f24 <__moddi3+0x170>
c0020efd:	74 21                	je     c0020f20 <__moddi3+0x16c>
c0020eff:	29 f5                	sub    ebp,esi
c0020f01:	19 cb                	sbb    ebx,ecx
c0020f03:	89 de                	mov    esi,ebx
c0020f05:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020f09:	d3 e6                	shl    esi,cl
c0020f0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020f0f:	89 f9                	mov    ecx,edi
c0020f11:	d3 ed                	shr    ebp,cl
c0020f13:	09 ee                	or     esi,ebp
c0020f15:	89 f0                	mov    eax,esi
c0020f17:	d3 eb                	shr    ebx,cl
c0020f19:	89 da                	mov    edx,ebx
c0020f1b:	e9 e8 fe ff ff       	jmp    c0020e08 <__moddi3+0x54>
c0020f20:	39 c5                	cmp    ebp,eax
c0020f22:	73 db                	jae    c0020eff <__moddi3+0x14b>
c0020f24:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f28:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f2c:	89 d1                	mov    ecx,edx
c0020f2e:	89 c6                	mov    esi,eax
c0020f30:	eb cd                	jmp    c0020eff <__moddi3+0x14b>
c0020f32:	66 90                	xchg   ax,ax

c0020f34 <__udivdi3>:
c0020f34:	55                   	push   ebp
c0020f35:	57                   	push   edi
c0020f36:	56                   	push   esi
c0020f37:	53                   	push   ebx
c0020f38:	83 ec 1c             	sub    esp,0x1c
c0020f3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020f3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020f43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020f47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020f4b:	85 d2                	test   edx,edx
c0020f4d:	75 41                	jne    c0020f90 <__udivdi3+0x5c>
c0020f4f:	39 f7                	cmp    edi,esi
c0020f51:	76 15                	jbe    c0020f68 <__udivdi3+0x34>
c0020f53:	89 e8                	mov    eax,ebp
c0020f55:	89 f2                	mov    edx,esi
c0020f57:	f7 f7                	div    edi
c0020f59:	31 db                	xor    ebx,ebx
c0020f5b:	89 da                	mov    edx,ebx
c0020f5d:	83 c4 1c             	add    esp,0x1c
c0020f60:	5b                   	pop    ebx
c0020f61:	5e                   	pop    esi
c0020f62:	5f                   	pop    edi
c0020f63:	5d                   	pop    ebp
c0020f64:	c3                   	ret    
c0020f65:	8d 76 00             	lea    esi,[esi+0x0]
c0020f68:	89 f9                	mov    ecx,edi
c0020f6a:	85 ff                	test   edi,edi
c0020f6c:	75 0b                	jne    c0020f79 <__udivdi3+0x45>
c0020f6e:	b8 01 00 00 00       	mov    eax,0x1
c0020f73:	31 d2                	xor    edx,edx
c0020f75:	f7 f7                	div    edi
c0020f77:	89 c1                	mov    ecx,eax
c0020f79:	31 d2                	xor    edx,edx
c0020f7b:	89 f0                	mov    eax,esi
c0020f7d:	f7 f1                	div    ecx
c0020f7f:	89 c3                	mov    ebx,eax
c0020f81:	89 e8                	mov    eax,ebp
c0020f83:	f7 f1                	div    ecx
c0020f85:	89 da                	mov    edx,ebx
c0020f87:	83 c4 1c             	add    esp,0x1c
c0020f8a:	5b                   	pop    ebx
c0020f8b:	5e                   	pop    esi
c0020f8c:	5f                   	pop    edi
c0020f8d:	5d                   	pop    ebp
c0020f8e:	c3                   	ret    
c0020f8f:	90                   	nop
c0020f90:	39 f2                	cmp    edx,esi
c0020f92:	77 1c                	ja     c0020fb0 <__udivdi3+0x7c>
c0020f94:	0f bd da             	bsr    ebx,edx
c0020f97:	83 f3 1f             	xor    ebx,0x1f
c0020f9a:	75 24                	jne    c0020fc0 <__udivdi3+0x8c>
c0020f9c:	39 f2                	cmp    edx,esi
c0020f9e:	72 08                	jb     c0020fa8 <__udivdi3+0x74>
c0020fa0:	39 ef                	cmp    edi,ebp
c0020fa2:	0f 87 84 00 00 00    	ja     c002102c <__udivdi3+0xf8>
c0020fa8:	b8 01 00 00 00       	mov    eax,0x1
c0020fad:	eb ac                	jmp    c0020f5b <__udivdi3+0x27>
c0020faf:	90                   	nop
c0020fb0:	31 db                	xor    ebx,ebx
c0020fb2:	31 c0                	xor    eax,eax
c0020fb4:	89 da                	mov    edx,ebx
c0020fb6:	83 c4 1c             	add    esp,0x1c
c0020fb9:	5b                   	pop    ebx
c0020fba:	5e                   	pop    esi
c0020fbb:	5f                   	pop    edi
c0020fbc:	5d                   	pop    ebp
c0020fbd:	c3                   	ret    
c0020fbe:	66 90                	xchg   ax,ax
c0020fc0:	b8 20 00 00 00       	mov    eax,0x20
c0020fc5:	29 d8                	sub    eax,ebx
c0020fc7:	88 d9                	mov    cl,bl
c0020fc9:	d3 e2                	shl    edx,cl
c0020fcb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020fcf:	89 fa                	mov    edx,edi
c0020fd1:	88 c1                	mov    cl,al
c0020fd3:	d3 ea                	shr    edx,cl
c0020fd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020fd9:	09 d1                	or     ecx,edx
c0020fdb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020fdf:	88 d9                	mov    cl,bl
c0020fe1:	d3 e7                	shl    edi,cl
c0020fe3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020fe7:	89 f7                	mov    edi,esi
c0020fe9:	88 c1                	mov    cl,al
c0020feb:	d3 ef                	shr    edi,cl
c0020fed:	88 d9                	mov    cl,bl
c0020fef:	d3 e6                	shl    esi,cl
c0020ff1:	89 ea                	mov    edx,ebp
c0020ff3:	88 c1                	mov    cl,al
c0020ff5:	d3 ea                	shr    edx,cl
c0020ff7:	09 d6                	or     esi,edx
c0020ff9:	89 f0                	mov    eax,esi
c0020ffb:	89 fa                	mov    edx,edi
c0020ffd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021001:	89 d7                	mov    edi,edx
c0021003:	89 c6                	mov    esi,eax
c0021005:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021009:	39 d7                	cmp    edi,edx
c002100b:	72 13                	jb     c0021020 <__udivdi3+0xec>
c002100d:	74 09                	je     c0021018 <__udivdi3+0xe4>
c002100f:	89 f0                	mov    eax,esi
c0021011:	31 db                	xor    ebx,ebx
c0021013:	e9 43 ff ff ff       	jmp    c0020f5b <__udivdi3+0x27>
c0021018:	88 d9                	mov    cl,bl
c002101a:	d3 e5                	shl    ebp,cl
c002101c:	39 c5                	cmp    ebp,eax
c002101e:	73 ef                	jae    c002100f <__udivdi3+0xdb>
c0021020:	8d 46 ff             	lea    eax,[esi-0x1]
c0021023:	31 db                	xor    ebx,ebx
c0021025:	e9 31 ff ff ff       	jmp    c0020f5b <__udivdi3+0x27>
c002102a:	66 90                	xchg   ax,ax
c002102c:	31 c0                	xor    eax,eax
c002102e:	e9 28 ff ff ff       	jmp    c0020f5b <__udivdi3+0x27>
c0021033:	90                   	nop

c0021034 <__umoddi3>:
c0021034:	55                   	push   ebp
c0021035:	57                   	push   edi
c0021036:	56                   	push   esi
c0021037:	53                   	push   ebx
c0021038:	83 ec 1c             	sub    esp,0x1c
c002103b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002103f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021043:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021047:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002104b:	89 da                	mov    edx,ebx
c002104d:	85 c0                	test   eax,eax
c002104f:	75 37                	jne    c0021088 <__umoddi3+0x54>
c0021051:	39 df                	cmp    edi,ebx
c0021053:	76 13                	jbe    c0021068 <__umoddi3+0x34>
c0021055:	89 f0                	mov    eax,esi
c0021057:	f7 f7                	div    edi
c0021059:	89 d0                	mov    eax,edx
c002105b:	31 d2                	xor    edx,edx
c002105d:	83 c4 1c             	add    esp,0x1c
c0021060:	5b                   	pop    ebx
c0021061:	5e                   	pop    esi
c0021062:	5f                   	pop    edi
c0021063:	5d                   	pop    ebp
c0021064:	c3                   	ret    
c0021065:	8d 76 00             	lea    esi,[esi+0x0]
c0021068:	89 fd                	mov    ebp,edi
c002106a:	85 ff                	test   edi,edi
c002106c:	75 0b                	jne    c0021079 <__umoddi3+0x45>
c002106e:	b8 01 00 00 00       	mov    eax,0x1
c0021073:	31 d2                	xor    edx,edx
c0021075:	f7 f7                	div    edi
c0021077:	89 c5                	mov    ebp,eax
c0021079:	89 d8                	mov    eax,ebx
c002107b:	31 d2                	xor    edx,edx
c002107d:	f7 f5                	div    ebp
c002107f:	89 f0                	mov    eax,esi
c0021081:	f7 f5                	div    ebp
c0021083:	89 d0                	mov    eax,edx
c0021085:	eb d4                	jmp    c002105b <__umoddi3+0x27>
c0021087:	90                   	nop
c0021088:	89 f1                	mov    ecx,esi
c002108a:	39 d8                	cmp    eax,ebx
c002108c:	76 0a                	jbe    c0021098 <__umoddi3+0x64>
c002108e:	89 f0                	mov    eax,esi
c0021090:	83 c4 1c             	add    esp,0x1c
c0021093:	5b                   	pop    ebx
c0021094:	5e                   	pop    esi
c0021095:	5f                   	pop    edi
c0021096:	5d                   	pop    ebp
c0021097:	c3                   	ret    
c0021098:	0f bd e8             	bsr    ebp,eax
c002109b:	83 f5 1f             	xor    ebp,0x1f
c002109e:	75 1c                	jne    c00210bc <__umoddi3+0x88>
c00210a0:	39 d8                	cmp    eax,ebx
c00210a2:	72 04                	jb     c00210a8 <__umoddi3+0x74>
c00210a4:	39 f7                	cmp    edi,esi
c00210a6:	77 08                	ja     c00210b0 <__umoddi3+0x7c>
c00210a8:	89 da                	mov    edx,ebx
c00210aa:	29 fe                	sub    esi,edi
c00210ac:	19 c2                	sbb    edx,eax
c00210ae:	89 f1                	mov    ecx,esi
c00210b0:	89 c8                	mov    eax,ecx
c00210b2:	83 c4 1c             	add    esp,0x1c
c00210b5:	5b                   	pop    ebx
c00210b6:	5e                   	pop    esi
c00210b7:	5f                   	pop    edi
c00210b8:	5d                   	pop    ebp
c00210b9:	c3                   	ret    
c00210ba:	66 90                	xchg   ax,ax
c00210bc:	ba 20 00 00 00       	mov    edx,0x20
c00210c1:	29 ea                	sub    edx,ebp
c00210c3:	89 e9                	mov    ecx,ebp
c00210c5:	d3 e0                	shl    eax,cl
c00210c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210cb:	89 f8                	mov    eax,edi
c00210cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210d1:	88 d1                	mov    cl,dl
c00210d3:	d3 e8                	shr    eax,cl
c00210d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00210d9:	09 c1                	or     ecx,eax
c00210db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00210df:	89 e9                	mov    ecx,ebp
c00210e1:	d3 e7                	shl    edi,cl
c00210e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00210e7:	89 d8                	mov    eax,ebx
c00210e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210ed:	88 d1                	mov    cl,dl
c00210ef:	d3 e8                	shr    eax,cl
c00210f1:	89 c7                	mov    edi,eax
c00210f3:	89 e9                	mov    ecx,ebp
c00210f5:	d3 e3                	shl    ebx,cl
c00210f7:	89 f0                	mov    eax,esi
c00210f9:	88 d1                	mov    cl,dl
c00210fb:	d3 e8                	shr    eax,cl
c00210fd:	09 d8                	or     eax,ebx
c00210ff:	89 e9                	mov    ecx,ebp
c0021101:	d3 e6                	shl    esi,cl
c0021103:	89 f3                	mov    ebx,esi
c0021105:	89 fa                	mov    edx,edi
c0021107:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002110b:	89 d1                	mov    ecx,edx
c002110d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021111:	89 c6                	mov    esi,eax
c0021113:	89 d7                	mov    edi,edx
c0021115:	39 d1                	cmp    ecx,edx
c0021117:	72 27                	jb     c0021140 <__umoddi3+0x10c>
c0021119:	74 21                	je     c002113c <__umoddi3+0x108>
c002111b:	89 ca                	mov    edx,ecx
c002111d:	29 f3                	sub    ebx,esi
c002111f:	19 fa                	sbb    edx,edi
c0021121:	89 d0                	mov    eax,edx
c0021123:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021127:	d3 e0                	shl    eax,cl
c0021129:	89 e9                	mov    ecx,ebp
c002112b:	d3 eb                	shr    ebx,cl
c002112d:	09 d8                	or     eax,ebx
c002112f:	d3 ea                	shr    edx,cl
c0021131:	83 c4 1c             	add    esp,0x1c
c0021134:	5b                   	pop    ebx
c0021135:	5e                   	pop    esi
c0021136:	5f                   	pop    edi
c0021137:	5d                   	pop    ebp
c0021138:	c3                   	ret    
c0021139:	8d 76 00             	lea    esi,[esi+0x0]
c002113c:	39 c3                	cmp    ebx,eax
c002113e:	73 db                	jae    c002111b <__umoddi3+0xe7>
c0021140:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021144:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021148:	89 d7                	mov    edi,edx
c002114a:	89 c6                	mov    esi,eax
c002114c:	eb cd                	jmp    c002111b <__umoddi3+0xe7>

Disassembly of section .init:

c002114e <_init>:
c002114e:	55                   	push   ebp
c002114f:	89 e5                	mov    ebp,esp
c0021151:	e8 c2 ef fd ff       	call   c0000118 <frame_dummy>
c0021156:	e8 e5 fa ff ff       	call   c0020c40 <__do_global_ctors_aux>
c002115b:	5d                   	pop    ebp
c002115c:	c3                   	ret    

Disassembly of section .fini:

c002115d <_fini>:
c002115d:	55                   	push   ebp
c002115e:	89 e5                	mov    ebp,esp
c0021160:	e8 43 ef fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021165:	5d                   	pop    ebp
c0021166:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021168 <Computer::~Computer()>:
c0021168:	83 ec 0c             	sub    esp,0xc
c002116b:	ba 94 27 02 c0       	mov    edx,0xc0022794
c0021170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021174:	89 10                	mov    DWORD PTR [eax],edx
c0021176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117a:	83 ec 0c             	sub    esp,0xc
c002117d:	50                   	push   eax
c002117e:	e8 fd cb fe ff       	call   c000dd80 <Device::~Device()>
c0021183:	83 c4 10             	add    esp,0x10
c0021186:	90                   	nop
c0021187:	83 c4 0c             	add    esp,0xc
c002118a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002118c <Computer::~Computer()>:
c002118c:	83 ec 0c             	sub    esp,0xc
c002118f:	83 ec 0c             	sub    esp,0xc
c0021192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021196:	e8 cd ff ff ff       	call   c0021168 <Computer::~Computer()>
c002119b:	83 c4 10             	add    esp,0x10
c002119e:	83 ec 08             	sub    esp,0x8
c00211a1:	68 ec 01 00 00       	push   0x1ec
c00211a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211aa:	e8 db b7 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00211af:	83 c4 10             	add    esp,0x10
c00211b2:	83 c4 0c             	add    esp,0xc
c00211b5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00211b6 <idleCommon()>:
c00211b6:	83 ec 0c             	sub    esp,0xc
c00211b9:	fa                   	cli    
c00211ba:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00211c0:	e8 3b 6d ff ff       	call   c0017f00 <schedule()>
c00211c5:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00211ca:	48                   	dec    eax
c00211cb:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00211d0:	75 01                	jne    c00211d3 <idleCommon()+0x1d>
c00211d2:	fb                   	sti    
c00211d3:	83 c4 0c             	add    esp,0xc
c00211d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00211d8 <LinkedList<UnixFile>::~LinkedList()>:
c00211d8:	90                   	nop
c00211d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00211da <LinkedList<UnixFile>::LinkedList()>:
c00211da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021208:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002120f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021213:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002121a:	90                   	nop
c002121b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002121c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021224:	75 10                	jne    c0021236 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021226:	83 ec 0c             	sub    esp,0xc
c0021229:	68 98 2a 02 c0       	push   0xc0022a98
c002122e:	e8 fa 30 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0021233:	83 c4 10             	add    esp,0x10
c0021236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123a:	8b 00                	mov    eax,DWORD PTR [eax]
c002123c:	85 c0                	test   eax,eax
c002123e:	74 34                	je     c0021274 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021247:	85 c0                	test   eax,eax
c0021249:	74 29                	je     c0021274 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002124b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021252:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021256:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002125d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021261:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002126b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021272:	eb 65                	jmp    c00212d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021278:	8b 00                	mov    eax,DWORD PTR [eax]
c002127a:	85 c0                	test   eax,eax
c002127c:	75 4b                	jne    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002127e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021282:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021285:	85 c0                	test   eax,eax
c0021287:	75 40                	jne    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021291:	89 10                	mov    DWORD PTR [eax],edx
c0021293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021297:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002129b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002129e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212b3:	85 c0                	test   eax,eax
c00212b5:	74 22                	je     c00212d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212b7:	83 ec 0c             	sub    esp,0xc
c00212ba:	68 ba 2a 02 c0       	push   0xc0022aba
c00212bf:	e8 69 30 ff ff       	call   c001432d <Krnl::panic(char const*)>
c00212c4:	83 c4 10             	add    esp,0x10
c00212c7:	eb 10                	jmp    c00212d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212c9:	83 ec 0c             	sub    esp,0xc
c00212cc:	68 c4 2a 02 c0       	push   0xc0022ac4
c00212d1:	e8 57 30 ff ff       	call   c001432d <Krnl::panic(char const*)>
c00212d6:	83 c4 10             	add    esp,0x10
c00212d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212e0:	8d 50 01             	lea    edx,[eax+0x1]
c00212e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212ea:	90                   	nop
c00212eb:	83 c4 0c             	add    esp,0xc
c00212ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00212f0 <LinkedList<UnixFile>::getFirstElement()>:
c00212f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00212f8 <LinkedList<UnixFile>::removeFirst()>:
c00212f8:	83 ec 0c             	sub    esp,0xc
c00212fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0021301:	85 c0                	test   eax,eax
c0021303:	75 12                	jne    c0021317 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021305:	83 ec 0c             	sub    esp,0xc
c0021308:	68 d0 2a 02 c0       	push   0xc0022ad0
c002130d:	e8 1b 30 ff ff       	call   c001432d <Krnl::panic(char const*)>
c0021312:	83 c4 10             	add    esp,0x10
c0021315:	eb 7e                	jmp    c0021395 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002131e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021321:	85 c0                	test   eax,eax
c0021323:	74 10                	je     c0021335 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021325:	83 ec 0c             	sub    esp,0xc
c0021328:	68 1b 2b 02 c0       	push   0xc0022b1b
c002132d:	e8 fb 2f ff ff       	call   c001432d <Krnl::panic(char const*)>
c0021332:	83 c4 10             	add    esp,0x10
c0021335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021339:	8b 00                	mov    eax,DWORD PTR [eax]
c002133b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002133e:	85 c0                	test   eax,eax
c0021340:	75 33                	jne    c0021375 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021346:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002134c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021350:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002135b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002135e:	83 f8 01             	cmp    eax,0x1
c0021361:	74 21                	je     c0021384 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021363:	83 ec 0c             	sub    esp,0xc
c0021366:	68 f4 2a 02 c0       	push   0xc0022af4
c002136b:	e8 bd 2f ff ff       	call   c001432d <Krnl::panic(char const*)>
c0021370:	83 c4 10             	add    esp,0x10
c0021373:	eb 0f                	jmp    c0021384 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021379:	8b 00                	mov    eax,DWORD PTR [eax]
c002137b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002137e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021382:	89 10                	mov    DWORD PTR [eax],edx
c0021384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021388:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002138b:	8d 50 ff             	lea    edx,[eax-0x1]
c002138e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021392:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021395:	83 c4 0c             	add    esp,0xc
c0021398:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002139a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002139a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002139e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213a1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00213a2 <DriverlessDevice::~DriverlessDevice()>:
c00213a2:	ba 7c 33 02 c0       	mov    edx,0xc002337c
c00213a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ab:	89 10                	mov    DWORD PTR [eax],edx
c00213ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b1:	50                   	push   eax
c00213b2:	e8 c9 c9 fe ff       	call   c000dd80 <Device::~Device()>
c00213b7:	83 c4 04             	add    esp,0x4
c00213ba:	90                   	nop
c00213bb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00213bc <DriverlessDevice::~DriverlessDevice()>:
c00213bc:	83 ec 0c             	sub    esp,0xc
c00213bf:	83 ec 0c             	sub    esp,0xc
c00213c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213c6:	e8 d7 ff ff ff       	call   c00213a2 <DriverlessDevice::~DriverlessDevice()>
c00213cb:	83 c4 10             	add    esp,0x10
c00213ce:	83 ec 08             	sub    esp,0x8
c00213d1:	68 58 01 00 00       	push   0x158
c00213d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213da:	e8 ab b5 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00213df:	83 c4 10             	add    esp,0x10
c00213e2:	83 c4 0c             	add    esp,0xc
c00213e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00213e6 <LinkedList<Device>::addElement(Device*)>:
c00213e6:	83 ec 0c             	sub    esp,0xc
c00213e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00213ee:	75 10                	jne    c0021400 <LinkedList<Device>::addElement(Device*)+0x1a>
c00213f0:	83 ec 0c             	sub    esp,0xc
c00213f3:	68 98 2a 02 c0       	push   0xc0022a98
c00213f8:	e8 30 2f ff ff       	call   c001432d <Krnl::panic(char const*)>
c00213fd:	83 c4 10             	add    esp,0x10
c0021400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021404:	8b 00                	mov    eax,DWORD PTR [eax]
c0021406:	85 c0                	test   eax,eax
c0021408:	74 3a                	je     c0021444 <LinkedList<Device>::addElement(Device*)+0x5e>
c002140a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021411:	85 c0                	test   eax,eax
c0021413:	74 2f                	je     c0021444 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021419:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002141c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021420:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002142e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021435:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021438:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021442:	eb 68                	jmp    c00214ac <LinkedList<Device>::addElement(Device*)+0xc6>
c0021444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021448:	8b 00                	mov    eax,DWORD PTR [eax]
c002144a:	85 c0                	test   eax,eax
c002144c:	75 4e                	jne    c002149c <LinkedList<Device>::addElement(Device*)+0xb6>
c002144e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021455:	85 c0                	test   eax,eax
c0021457:	75 43                	jne    c002149c <LinkedList<Device>::addElement(Device*)+0xb6>
c0021459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021461:	89 10                	mov    DWORD PTR [eax],edx
c0021463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021467:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002146b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002146e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021472:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021475:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002147f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021483:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021486:	85 c0                	test   eax,eax
c0021488:	74 22                	je     c00214ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002148a:	83 ec 0c             	sub    esp,0xc
c002148d:	68 ba 2a 02 c0       	push   0xc0022aba
c0021492:	e8 96 2e ff ff       	call   c001432d <Krnl::panic(char const*)>
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	eb 10                	jmp    c00214ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002149c:	83 ec 0c             	sub    esp,0xc
c002149f:	68 c4 2a 02 c0       	push   0xc0022ac4
c00214a4:	e8 84 2e ff ff       	call   c001432d <Krnl::panic(char const*)>
c00214a9:	83 c4 10             	add    esp,0x10
c00214ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214b3:	8d 50 01             	lea    edx,[eax+0x1]
c00214b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00214bd:	90                   	nop
c00214be:	83 c4 0c             	add    esp,0xc
c00214c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00214c2 <LinkedList<Device>::LinkedList()>:
c00214c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021502:	90                   	nop
c0021503:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021508:	8b 00                	mov    eax,DWORD PTR [eax]
c002150a:	85 c0                	test   eax,eax
c002150c:	75 0e                	jne    c002151c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002150e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021515:	85 c0                	test   eax,eax
c0021517:	75 03                	jne    c002151c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021519:	b0 01                	mov    al,0x1
c002151b:	c3                   	ret    
c002151c:	b0 00                	mov    al,0x0
c002151e:	90                   	nop
c002151f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021524:	8b 00                	mov    eax,DWORD PTR [eax]
c0021526:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021528:	83 ec 0c             	sub    esp,0xc
c002152b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021531:	85 c0                	test   eax,eax
c0021533:	75 17                	jne    c002154c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021535:	83 ec 0c             	sub    esp,0xc
c0021538:	68 d0 2a 02 c0       	push   0xc0022ad0
c002153d:	e8 eb 2d ff ff       	call   c001432d <Krnl::panic(char const*)>
c0021542:	83 c4 10             	add    esp,0x10
c0021545:	e9 92 00 00 00       	jmp    c00215dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002154a:	66 90                	xchg   ax,ax
c002154c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021553:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021556:	85 c0                	test   eax,eax
c0021558:	0f 95 c0             	setne  al
c002155b:	84 c0                	test   al,al
c002155d:	74 11                	je     c0021570 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002155f:	83 ec 0c             	sub    esp,0xc
c0021562:	68 1b 2b 02 c0       	push   0xc0022b1b
c0021567:	e8 c1 2d ff ff       	call   c001432d <Krnl::panic(char const*)>
c002156c:	83 c4 10             	add    esp,0x10
c002156f:	90                   	nop
c0021570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021574:	8b 00                	mov    eax,DWORD PTR [eax]
c0021576:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021579:	85 c0                	test   eax,eax
c002157b:	0f 94 c0             	sete   al
c002157e:	84 c0                	test   al,al
c0021580:	74 36                	je     c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021586:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002158c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021590:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002159e:	83 f8 01             	cmp    eax,0x1
c00215a1:	74 25                	je     c00215c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215a3:	83 ec 0c             	sub    esp,0xc
c00215a6:	68 f4 2a 02 c0       	push   0xc0022af4
c00215ab:	e8 7d 2d ff ff       	call   c001432d <Krnl::panic(char const*)>
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	eb 13                	jmp    c00215c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215b5:	8d 76 00             	lea    esi,[esi+0x0]
c00215b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00215be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00215c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c5:	89 10                	mov    DWORD PTR [eax],edx
c00215c7:	90                   	nop
c00215c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00215d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00215d9:	8d 76 00             	lea    esi,[esi+0x0]
c00215dc:	83 c4 0c             	add    esp,0xc
c00215df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00215e0:	83 ec 0c             	sub    esp,0xc
c00215e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00215e8:	75 12                	jne    c00215fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00215ea:	83 ec 0c             	sub    esp,0xc
c00215ed:	68 98 2a 02 c0       	push   0xc0022a98
c00215f2:	e8 36 2d ff ff       	call   c001432d <Krnl::panic(char const*)>
c00215f7:	83 c4 10             	add    esp,0x10
c00215fa:	66 90                	xchg   ax,ax
c00215fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021600:	8b 00                	mov    eax,DWORD PTR [eax]
c0021602:	85 c0                	test   eax,eax
c0021604:	74 36                	je     c002163c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002160d:	85 c0                	test   eax,eax
c002160f:	74 2b                	je     c002163c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021615:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021618:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002161c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002161f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021623:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021627:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002162a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021631:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021638:	eb 6a                	jmp    c00216a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002163a:	66 90                	xchg   ax,ax
c002163c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021640:	8b 00                	mov    eax,DWORD PTR [eax]
c0021642:	85 c0                	test   eax,eax
c0021644:	75 4e                	jne    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002164d:	85 c0                	test   eax,eax
c002164f:	75 43                	jne    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021655:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021659:	89 10                	mov    DWORD PTR [eax],edx
c002165b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002166a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002166d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021678:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002167b:	85 c0                	test   eax,eax
c002167d:	74 25                	je     c00216a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002167f:	83 ec 0c             	sub    esp,0xc
c0021682:	68 ba 2a 02 c0       	push   0xc0022aba
c0021687:	e8 a1 2c ff ff       	call   c001432d <Krnl::panic(char const*)>
c002168c:	83 c4 10             	add    esp,0x10
c002168f:	eb 13                	jmp    c00216a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021691:	8d 76 00             	lea    esi,[esi+0x0]
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	68 c4 2a 02 c0       	push   0xc0022ac4
c002169c:	e8 8c 2c ff ff       	call   c001432d <Krnl::panic(char const*)>
c00216a1:	83 c4 10             	add    esp,0x10
c00216a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216ab:	8d 50 01             	lea    edx,[eax+0x1]
c00216ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00216b5:	90                   	nop
c00216b6:	83 c4 0c             	add    esp,0xc
c00216b9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00216bc <ACPI::~ACPI()>:
c00216bc:	83 ec 0c             	sub    esp,0xc
c00216bf:	ba 4c 3e 02 c0       	mov    edx,0xc0023e4c
c00216c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c8:	89 10                	mov    DWORD PTR [eax],edx
c00216ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ce:	83 ec 0c             	sub    esp,0xc
c00216d1:	50                   	push   eax
c00216d2:	e8 a9 c6 fe ff       	call   c000dd80 <Device::~Device()>
c00216d7:	83 c4 10             	add    esp,0x10
c00216da:	90                   	nop
c00216db:	83 c4 0c             	add    esp,0xc
c00216de:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00216e0 <ACPI::~ACPI()>:
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	83 ec 0c             	sub    esp,0xc
c00216e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ea:	e8 cd ff ff ff       	call   c00216bc <ACPI::~ACPI()>
c00216ef:	83 c4 10             	add    esp,0x10
c00216f2:	83 ec 08             	sub    esp,0x8
c00216f5:	68 64 12 00 00       	push   0x1264
c00216fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216fe:	e8 87 b2 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021703:	83 c4 10             	add    esp,0x10
c0021706:	83 c4 0c             	add    esp,0xc
c0021709:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002170c <LinkedList<Device>::~LinkedList()>:
c002170c:	90                   	nop
c002170d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021710 <LinkedList<Device>::isEmpty()>:
c0021710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021714:	8b 00                	mov    eax,DWORD PTR [eax]
c0021716:	85 c0                	test   eax,eax
c0021718:	75 0e                	jne    c0021728 <LinkedList<Device>::isEmpty()+0x18>
c002171a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002171e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021721:	85 c0                	test   eax,eax
c0021723:	75 03                	jne    c0021728 <LinkedList<Device>::isEmpty()+0x18>
c0021725:	b0 01                	mov    al,0x1
c0021727:	c3                   	ret    
c0021728:	b0 00                	mov    al,0x0
c002172a:	90                   	nop
c002172b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002172c <LinkedList<Device>::getFirstElement()>:
c002172c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021730:	8b 00                	mov    eax,DWORD PTR [eax]
c0021732:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021734 <LinkedList<Device>::removeFirst()>:
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002173b:	8b 00                	mov    eax,DWORD PTR [eax]
c002173d:	85 c0                	test   eax,eax
c002173f:	75 17                	jne    c0021758 <LinkedList<Device>::removeFirst()+0x24>
c0021741:	83 ec 0c             	sub    esp,0xc
c0021744:	68 d0 2a 02 c0       	push   0xc0022ad0
c0021749:	e8 df 2b ff ff       	call   c001432d <Krnl::panic(char const*)>
c002174e:	83 c4 10             	add    esp,0x10
c0021751:	e9 92 00 00 00       	jmp    c00217e8 <LinkedList<Device>::removeFirst()+0xb4>
c0021756:	66 90                	xchg   ax,ax
c0021758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002175f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021765:	85 c0                	test   eax,eax
c0021767:	74 13                	je     c002177c <LinkedList<Device>::removeFirst()+0x48>
c0021769:	83 ec 0c             	sub    esp,0xc
c002176c:	68 1b 2b 02 c0       	push   0xc0022b1b
c0021771:	e8 b7 2b ff ff       	call   c001432d <Krnl::panic(char const*)>
c0021776:	83 c4 10             	add    esp,0x10
c0021779:	8d 76 00             	lea    esi,[esi+0x0]
c002177c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021780:	8b 00                	mov    eax,DWORD PTR [eax]
c0021782:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021788:	85 c0                	test   eax,eax
c002178a:	75 34                	jne    c00217c0 <LinkedList<Device>::removeFirst()+0x8c>
c002178c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021790:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00217a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217a8:	83 f8 01             	cmp    eax,0x1
c00217ab:	74 27                	je     c00217d4 <LinkedList<Device>::removeFirst()+0xa0>
c00217ad:	83 ec 0c             	sub    esp,0xc
c00217b0:	68 f4 2a 02 c0       	push   0xc0022af4
c00217b5:	e8 73 2b ff ff       	call   c001432d <Krnl::panic(char const*)>
c00217ba:	83 c4 10             	add    esp,0x10
c00217bd:	eb 15                	jmp    c00217d4 <LinkedList<Device>::removeFirst()+0xa0>
c00217bf:	90                   	nop
c00217c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00217c6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00217cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d0:	89 10                	mov    DWORD PTR [eax],edx
c00217d2:	66 90                	xchg   ax,ax
c00217d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217db:	8d 50 ff             	lea    edx,[eax-0x1]
c00217de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217e5:	8d 76 00             	lea    esi,[esi+0x0]
c00217e8:	83 c4 0c             	add    esp,0xc
c00217eb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00217ec <CPU::~CPU()>:
c00217ec:	83 ec 0c             	sub    esp,0xc
c00217ef:	ba e8 41 02 c0       	mov    edx,0xc00241e8
c00217f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f8:	89 10                	mov    DWORD PTR [eax],edx
c00217fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217fe:	83 ec 0c             	sub    esp,0xc
c0021801:	50                   	push   eax
c0021802:	e8 79 c5 fe ff       	call   c000dd80 <Device::~Device()>
c0021807:	83 c4 10             	add    esp,0x10
c002180a:	90                   	nop
c002180b:	83 c4 0c             	add    esp,0xc
c002180e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021810 <CPU::~CPU()>:
c0021810:	83 ec 0c             	sub    esp,0xc
c0021813:	83 ec 0c             	sub    esp,0xc
c0021816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002181a:	e8 cd ff ff ff       	call   c00217ec <CPU::~CPU()>
c002181f:	83 c4 10             	add    esp,0x10
c0021822:	83 ec 08             	sub    esp,0x8
c0021825:	68 98 11 00 00       	push   0x1198
c002182a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002182e:	e8 57 b1 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021833:	83 c4 10             	add    esp,0x10
c0021836:	83 c4 0c             	add    esp,0xc
c0021839:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002183c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002183c:	90                   	nop
c002183d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021840 <ThreadControlBlock::ThreadControlBlock()>:
c0021840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021844:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002184b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002185a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021865:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002186c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021870:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021877:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002187b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002187f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021883:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021887:	90                   	nop
c0021888:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002188c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021890:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002189a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218cc:	90                   	nop
c00218cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00218d0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00218d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218d7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00218d8 <Vm::_FPUState::_FPUState()>:
c00218d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218dc:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00218e3:	90                   	nop
c00218e4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00218e6 <PCI::~PCI()>:
c00218e6:	83 ec 0c             	sub    esp,0xc
c00218e9:	ba 48 4f 02 c0       	mov    edx,0xc0024f48
c00218ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f2:	89 10                	mov    DWORD PTR [eax],edx
c00218f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f8:	83 ec 0c             	sub    esp,0xc
c00218fb:	50                   	push   eax
c00218fc:	e8 4f be fe ff       	call   c000d750 <Bus::~Bus()>
c0021901:	83 c4 10             	add    esp,0x10
c0021904:	90                   	nop
c0021905:	83 c4 0c             	add    esp,0xc
c0021908:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002190a <PCI::~PCI()>:
c002190a:	83 ec 0c             	sub    esp,0xc
c002190d:	83 ec 0c             	sub    esp,0xc
c0021910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021914:	e8 cd ff ff ff       	call   c00218e6 <PCI::~PCI()>
c0021919:	83 c4 10             	add    esp,0x10
c002191c:	83 ec 08             	sub    esp,0x8
c002191f:	68 5c 01 00 00       	push   0x15c
c0021924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021928:	e8 5d b0 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c002192d:	83 c4 10             	add    esp,0x10
c0021930:	83 c4 0c             	add    esp,0xc
c0021933:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021934 <IDE::~IDE()>:
c0021934:	83 ec 0c             	sub    esp,0xc
c0021937:	ba fc 4f 02 c0       	mov    edx,0xc0024ffc
c002193c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021940:	89 10                	mov    DWORD PTR [eax],edx
c0021942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021946:	83 ec 0c             	sub    esp,0xc
c0021949:	50                   	push   eax
c002194a:	e8 49 c9 fe ff       	call   c000e298 <HardDiskController::~HardDiskController()>
c002194f:	83 c4 10             	add    esp,0x10
c0021952:	90                   	nop
c0021953:	83 c4 0c             	add    esp,0xc
c0021956:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021958 <IDE::~IDE()>:
c0021958:	83 ec 0c             	sub    esp,0xc
c002195b:	83 ec 0c             	sub    esp,0xc
c002195e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021962:	e8 cd ff ff ff       	call   c0021934 <IDE::~IDE()>
c0021967:	83 c4 10             	add    esp,0x10
c002196a:	83 ec 08             	sub    esp,0x8
c002196d:	68 70 02 00 00       	push   0x270
c0021972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021976:	e8 0f b0 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c002197b:	83 c4 10             	add    esp,0x10
c002197e:	83 c4 0c             	add    esp,0xc
c0021981:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021982 <SATABus::~SATABus()>:
c0021982:	83 ec 0c             	sub    esp,0xc
c0021985:	ba 74 50 02 c0       	mov    edx,0xc0025074
c002198a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198e:	89 10                	mov    DWORD PTR [eax],edx
c0021990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021994:	83 ec 0c             	sub    esp,0xc
c0021997:	50                   	push   eax
c0021998:	e8 fb c8 fe ff       	call   c000e298 <HardDiskController::~HardDiskController()>
c002199d:	83 c4 10             	add    esp,0x10
c00219a0:	90                   	nop
c00219a1:	83 c4 0c             	add    esp,0xc
c00219a4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00219a6 <SATABus::~SATABus()>:
c00219a6:	83 ec 0c             	sub    esp,0xc
c00219a9:	83 ec 0c             	sub    esp,0xc
c00219ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b0:	e8 cd ff ff ff       	call   c0021982 <SATABus::~SATABus()>
c00219b5:	83 c4 10             	add    esp,0x10
c00219b8:	83 ec 08             	sub    esp,0x8
c00219bb:	68 64 01 00 00       	push   0x164
c00219c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c4:	e8 c1 af fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00219c9:	83 c4 10             	add    esp,0x10
c00219cc:	83 c4 0c             	add    esp,0xc
c00219cf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00219d0 <ATA::~ATA()>:
c00219d0:	83 ec 0c             	sub    esp,0xc
c00219d3:	ba ec 50 02 c0       	mov    edx,0xc00250ec
c00219d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219dc:	89 10                	mov    DWORD PTR [eax],edx
c00219de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e2:	83 ec 0c             	sub    esp,0xc
c00219e5:	50                   	push   eax
c00219e6:	e8 8f c9 fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c00219eb:	83 c4 10             	add    esp,0x10
c00219ee:	90                   	nop
c00219ef:	83 c4 0c             	add    esp,0xc
c00219f2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00219f4 <ATA::~ATA()>:
c00219f4:	83 ec 0c             	sub    esp,0xc
c00219f7:	83 ec 0c             	sub    esp,0xc
c00219fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219fe:	e8 cd ff ff ff       	call   c00219d0 <ATA::~ATA()>
c0021a03:	83 c4 10             	add    esp,0x10
c0021a06:	83 ec 08             	sub    esp,0x8
c0021a09:	68 7c 01 00 00       	push   0x17c
c0021a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a12:	e8 73 af fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021a17:	83 c4 10             	add    esp,0x10
c0021a1a:	83 c4 0c             	add    esp,0xc
c0021a1d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a1e <ATAPI::~ATAPI()>:
c0021a1e:	83 ec 0c             	sub    esp,0xc
c0021a21:	ba 24 51 02 c0       	mov    edx,0xc0025124
c0021a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2a:	89 10                	mov    DWORD PTR [eax],edx
c0021a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a30:	83 ec 0c             	sub    esp,0xc
c0021a33:	50                   	push   eax
c0021a34:	e8 41 c9 fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c0021a39:	83 c4 10             	add    esp,0x10
c0021a3c:	90                   	nop
c0021a3d:	83 c4 0c             	add    esp,0xc
c0021a40:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021a42 <ATAPI::~ATAPI()>:
c0021a42:	83 ec 0c             	sub    esp,0xc
c0021a45:	83 ec 0c             	sub    esp,0xc
c0021a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a4c:	e8 cd ff ff ff       	call   c0021a1e <ATAPI::~ATAPI()>
c0021a51:	83 c4 10             	add    esp,0x10
c0021a54:	83 ec 08             	sub    esp,0x8
c0021a57:	68 80 01 00 00       	push   0x180
c0021a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a60:	e8 25 af fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021a65:	83 c4 10             	add    esp,0x10
c0021a68:	83 c4 0c             	add    esp,0xc
c0021a6b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021a6c <SATA::~SATA()>:
c0021a6c:	83 ec 0c             	sub    esp,0xc
c0021a6f:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c0021a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a78:	89 10                	mov    DWORD PTR [eax],edx
c0021a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7e:	83 ec 0c             	sub    esp,0xc
c0021a81:	50                   	push   eax
c0021a82:	e8 f3 c8 fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c0021a87:	83 c4 10             	add    esp,0x10
c0021a8a:	90                   	nop
c0021a8b:	83 c4 0c             	add    esp,0xc
c0021a8e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021a90 <SATA::~SATA()>:
c0021a90:	83 ec 0c             	sub    esp,0xc
c0021a93:	83 ec 0c             	sub    esp,0xc
c0021a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a9a:	e8 cd ff ff ff       	call   c0021a6c <SATA::~SATA()>
c0021a9f:	83 c4 10             	add    esp,0x10
c0021aa2:	83 ec 08             	sub    esp,0x8
c0021aa5:	68 7c 01 00 00       	push   0x17c
c0021aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aae:	e8 d7 ae fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021ab3:	83 c4 10             	add    esp,0x10
c0021ab6:	83 c4 0c             	add    esp,0xc
c0021ab9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021aba <SATAPI::~SATAPI()>:
c0021aba:	83 ec 0c             	sub    esp,0xc
c0021abd:	ba b4 52 02 c0       	mov    edx,0xc00252b4
c0021ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac6:	89 10                	mov    DWORD PTR [eax],edx
c0021ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021acc:	83 ec 0c             	sub    esp,0xc
c0021acf:	50                   	push   eax
c0021ad0:	e8 a5 c8 fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c0021ad5:	83 c4 10             	add    esp,0x10
c0021ad8:	90                   	nop
c0021ad9:	83 c4 0c             	add    esp,0xc
c0021adc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021ade <SATAPI::~SATAPI()>:
c0021ade:	83 ec 0c             	sub    esp,0xc
c0021ae1:	83 ec 0c             	sub    esp,0xc
c0021ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ae8:	e8 cd ff ff ff       	call   c0021aba <SATAPI::~SATAPI()>
c0021aed:	83 c4 10             	add    esp,0x10
c0021af0:	83 ec 08             	sub    esp,0x8
c0021af3:	68 80 01 00 00       	push   0x180
c0021af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021afc:	e8 89 ae fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021b01:	83 c4 10             	add    esp,0x10
c0021b04:	83 c4 0c             	add    esp,0xc
c0021b07:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021b08 <AVX::~AVX()>:
c0021b08:	83 ec 0c             	sub    esp,0xc
c0021b0b:	ba f4 52 02 c0       	mov    edx,0xc00252f4
c0021b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b14:	89 10                	mov    DWORD PTR [eax],edx
c0021b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1a:	83 ec 0c             	sub    esp,0xc
c0021b1d:	50                   	push   eax
c0021b1e:	e8 dd c8 fe ff       	call   c000e400 <FPU::~FPU()>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	90                   	nop
c0021b27:	83 c4 0c             	add    esp,0xc
c0021b2a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b2c <AVX::~AVX()>:
c0021b2c:	83 ec 0c             	sub    esp,0xc
c0021b2f:	83 ec 0c             	sub    esp,0xc
c0021b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b36:	e8 cd ff ff ff       	call   c0021b08 <AVX::~AVX()>
c0021b3b:	83 c4 10             	add    esp,0x10
c0021b3e:	83 ec 08             	sub    esp,0x8
c0021b41:	68 58 01 00 00       	push   0x158
c0021b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b4a:	e8 3b ae fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021b4f:	83 c4 10             	add    esp,0x10
c0021b52:	83 c4 0c             	add    esp,0xc
c0021b55:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021b58 <MMX::~MMX()>:
c0021b58:	83 ec 0c             	sub    esp,0xc
c0021b5b:	ba 34 53 02 c0       	mov    edx,0xc0025334
c0021b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b64:	89 10                	mov    DWORD PTR [eax],edx
c0021b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6a:	83 ec 0c             	sub    esp,0xc
c0021b6d:	50                   	push   eax
c0021b6e:	e8 8d c8 fe ff       	call   c000e400 <FPU::~FPU()>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	90                   	nop
c0021b77:	83 c4 0c             	add    esp,0xc
c0021b7a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021b7c <MMX::~MMX()>:
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b86:	e8 cd ff ff ff       	call   c0021b58 <MMX::~MMX()>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	83 ec 08             	sub    esp,0x8
c0021b91:	68 58 01 00 00       	push   0x158
c0021b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b9a:	e8 eb ad fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	83 c4 0c             	add    esp,0xc
c0021ba5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021ba8 <SSE::~SSE()>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	ba 74 53 02 c0       	mov    edx,0xc0025374
c0021bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb4:	89 10                	mov    DWORD PTR [eax],edx
c0021bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bba:	83 ec 0c             	sub    esp,0xc
c0021bbd:	50                   	push   eax
c0021bbe:	e8 3d c8 fe ff       	call   c000e400 <FPU::~FPU()>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	90                   	nop
c0021bc7:	83 c4 0c             	add    esp,0xc
c0021bca:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021bcc <SSE::~SSE()>:
c0021bcc:	83 ec 0c             	sub    esp,0xc
c0021bcf:	83 ec 0c             	sub    esp,0xc
c0021bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bd6:	e8 cd ff ff ff       	call   c0021ba8 <SSE::~SSE()>
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	83 ec 08             	sub    esp,0x8
c0021be1:	68 58 01 00 00       	push   0x158
c0021be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bea:	e8 9b ad fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	83 c4 0c             	add    esp,0xc
c0021bf5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021bf8 <x87::~x87()>:
c0021bf8:	83 ec 0c             	sub    esp,0xc
c0021bfb:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c0021c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c04:	89 10                	mov    DWORD PTR [eax],edx
c0021c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0a:	83 ec 0c             	sub    esp,0xc
c0021c0d:	50                   	push   eax
c0021c0e:	e8 ed c7 fe ff       	call   c000e400 <FPU::~FPU()>
c0021c13:	83 c4 10             	add    esp,0x10
c0021c16:	90                   	nop
c0021c17:	83 c4 0c             	add    esp,0xc
c0021c1a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c1c <x87::~x87()>:
c0021c1c:	83 ec 0c             	sub    esp,0xc
c0021c1f:	83 ec 0c             	sub    esp,0xc
c0021c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c26:	e8 cd ff ff ff       	call   c0021bf8 <x87::~x87()>
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	83 ec 08             	sub    esp,0x8
c0021c31:	68 58 01 00 00       	push   0x158
c0021c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c3a:	e8 4b ad fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	83 c4 0c             	add    esp,0xc
c0021c45:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021c46 <IOAPIC::~IOAPIC()>:
c0021c46:	83 ec 0c             	sub    esp,0xc
c0021c49:	ba 0c 55 02 c0       	mov    edx,0xc002550c
c0021c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c52:	89 10                	mov    DWORD PTR [eax],edx
c0021c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c58:	83 ec 0c             	sub    esp,0xc
c0021c5b:	50                   	push   eax
c0021c5c:	e8 1f c1 fe ff       	call   c000dd80 <Device::~Device()>
c0021c61:	83 c4 10             	add    esp,0x10
c0021c64:	90                   	nop
c0021c65:	83 c4 0c             	add    esp,0xc
c0021c68:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021c6a <IOAPIC::~IOAPIC()>:
c0021c6a:	83 ec 0c             	sub    esp,0xc
c0021c6d:	83 ec 0c             	sub    esp,0xc
c0021c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c74:	e8 cd ff ff ff       	call   c0021c46 <IOAPIC::~IOAPIC()>
c0021c79:	83 c4 10             	add    esp,0x10
c0021c7c:	83 ec 08             	sub    esp,0x8
c0021c7f:	68 68 01 00 00       	push   0x168
c0021c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c88:	e8 fd ac fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021c8d:	83 c4 10             	add    esp,0x10
c0021c90:	83 c4 0c             	add    esp,0xc
c0021c93:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021c94 <APIC::~APIC()>:
c0021c94:	83 ec 0c             	sub    esp,0xc
c0021c97:	ba c4 54 02 c0       	mov    edx,0xc00254c4
c0021c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca0:	89 10                	mov    DWORD PTR [eax],edx
c0021ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca6:	83 ec 0c             	sub    esp,0xc
c0021ca9:	50                   	push   eax
c0021caa:	e8 25 cc fe ff       	call   c000e8d4 <InterruptController::~InterruptController()>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	90                   	nop
c0021cb3:	83 c4 0c             	add    esp,0xc
c0021cb6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021cb8 <APIC::~APIC()>:
c0021cb8:	83 ec 0c             	sub    esp,0xc
c0021cbb:	83 ec 0c             	sub    esp,0xc
c0021cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc2:	e8 cd ff ff ff       	call   c0021c94 <APIC::~APIC()>
c0021cc7:	83 c4 10             	add    esp,0x10
c0021cca:	83 ec 08             	sub    esp,0x8
c0021ccd:	68 58 21 00 00       	push   0x2158
c0021cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd6:	e8 af ac fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021cdb:	83 c4 10             	add    esp,0x10
c0021cde:	83 c4 0c             	add    esp,0xc
c0021ce1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021ce2 <PIC::~PIC()>:
c0021ce2:	83 ec 0c             	sub    esp,0xc
c0021ce5:	ba 5c 55 02 c0       	mov    edx,0xc002555c
c0021cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cee:	89 10                	mov    DWORD PTR [eax],edx
c0021cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf4:	83 ec 0c             	sub    esp,0xc
c0021cf7:	50                   	push   eax
c0021cf8:	e8 d7 cb fe ff       	call   c000e8d4 <InterruptController::~InterruptController()>
c0021cfd:	83 c4 10             	add    esp,0x10
c0021d00:	90                   	nop
c0021d01:	83 c4 0c             	add    esp,0xc
c0021d04:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021d06 <PIC::~PIC()>:
c0021d06:	83 ec 0c             	sub    esp,0xc
c0021d09:	83 ec 0c             	sub    esp,0xc
c0021d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d10:	e8 cd ff ff ff       	call   c0021ce2 <PIC::~PIC()>
c0021d15:	83 c4 10             	add    esp,0x10
c0021d18:	83 ec 08             	sub    esp,0x8
c0021d1b:	68 58 21 00 00       	push   0x2158
c0021d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d24:	e8 61 ac fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021d29:	83 c4 10             	add    esp,0x10
c0021d2c:	83 c4 0c             	add    esp,0xc
c0021d2f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021d30 <APICTimer::~APICTimer()>:
c0021d30:	83 ec 0c             	sub    esp,0xc
c0021d33:	ba b0 55 02 c0       	mov    edx,0xc00255b0
c0021d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3c:	89 10                	mov    DWORD PTR [eax],edx
c0021d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	50                   	push   eax
c0021d46:	e8 95 e9 fe ff       	call   c00106e0 <Timer::~Timer()>
c0021d4b:	83 c4 10             	add    esp,0x10
c0021d4e:	90                   	nop
c0021d4f:	83 c4 0c             	add    esp,0xc
c0021d52:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021d54 <APICTimer::~APICTimer()>:
c0021d54:	83 ec 0c             	sub    esp,0xc
c0021d57:	83 ec 0c             	sub    esp,0xc
c0021d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d5e:	e8 cd ff ff ff       	call   c0021d30 <APICTimer::~APICTimer()>
c0021d63:	83 c4 10             	add    esp,0x10
c0021d66:	83 ec 08             	sub    esp,0x8
c0021d69:	68 60 01 00 00       	push   0x160
c0021d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d72:	e8 13 ac fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021d77:	83 c4 10             	add    esp,0x10
c0021d7a:	83 c4 0c             	add    esp,0xc
c0021d7d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021d80 <PIT::~PIT()>:
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	ba 00 56 02 c0       	mov    edx,0xc0025600
c0021d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8c:	89 10                	mov    DWORD PTR [eax],edx
c0021d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d92:	83 ec 0c             	sub    esp,0xc
c0021d95:	50                   	push   eax
c0021d96:	e8 45 e9 fe ff       	call   c00106e0 <Timer::~Timer()>
c0021d9b:	83 c4 10             	add    esp,0x10
c0021d9e:	90                   	nop
c0021d9f:	83 c4 0c             	add    esp,0xc
c0021da2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021da4 <PIT::~PIT()>:
c0021da4:	83 ec 0c             	sub    esp,0xc
c0021da7:	83 ec 0c             	sub    esp,0xc
c0021daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dae:	e8 cd ff ff ff       	call   c0021d80 <PIT::~PIT()>
c0021db3:	83 c4 10             	add    esp,0x10
c0021db6:	83 ec 08             	sub    esp,0x8
c0021db9:	68 5c 01 00 00       	push   0x15c
c0021dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dc2:	e8 c3 ab fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021dc7:	83 c4 10             	add    esp,0x10
c0021dca:	83 c4 0c             	add    esp,0xc
c0021dcd:	c3                   	ret    
