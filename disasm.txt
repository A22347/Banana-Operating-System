
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d2 fb 00 00       	call   c000fbf2 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 7e 02 00       	call   c0027ef8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 8a 02 c0       	mov    ebx,0xc0028aa2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 8a 02 c0    	cmp    ebx,0xc0028ab0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 d0 02 c0       	mov    eax,0xc002d038
c0000049:	3d 38 d0 02 c0       	cmp    eax,0xc002d038
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 d0 02 c0       	push   0xc002d038
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 d0 02 c0       	mov    eax,0xc002d038
c0000075:	2d 38 d0 02 c0       	sub    eax,0xc002d038
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 d0 02 c0       	push   0xc002d038
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d668,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 8a 02 c0       	mov    ebx,0xc0028ab8
c00000bb:	81 eb b4 8a 02 c0    	sub    ebx,0xc0028ab4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 8a 02 c0       	mov    esi,0xc0028ab4
c00000ca:	a1 6c d6 02 c0       	mov    eax,ds:0xc002d66c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c d6 02 c0       	mov    ds:0xc002d66c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c d6 02 c0       	mov    eax,ds:0xc002d66c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 d0 02 c0       	push   0xc002d038
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d668,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 d6 02 c0       	push   0xc002d670
c000012c:	68 38 d0 02 c0       	push   0xc002d038
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 81 ce 01 00       	call   c001d21c <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 34 25 01 00       	call   c00128e7 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 5f ce 01 00       	call   c001d21c <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 ad d2 01 00       	call   c001d689 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 5b d8 01 00       	call   c001dc40 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 b0 da 02 c0 	lgdtd  ds:0xc002dab0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 12 42 01 00       	call   c00147eb <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 88 d6 02 c0       	mov    ds:0xc002d688,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 88 d6 02 c0    	mov    DWORD PTR ds:0xc002d688,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 88 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d688
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 c0 8a 02 c0 02 	test   BYTE PTR [edx-0x3ffd7540],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 c0 8a 02 c0 01 	test   BYTE PTR [edx-0x3ffd7540],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 c0 8a 02 c0 08 	test   BYTE PTR [edx-0x3ffd7540],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 c0 8a 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7540],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 c0 8a 02 c0 01 	test   BYTE PTR [edx-0x3ffd7540],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d a0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6a0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 a4 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd295c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 a4 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd295c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 cc d6 02 c0    	cmp    DWORD PTR ds:0xc002d6cc,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d dc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6dc
c0000e60:	c7 42 0c d4 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d6d4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 dc d6 02 c0    	mov    DWORD PTR ds:0xc002d6dc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 a0 d6 02 c0 02 	test   BYTE PTR ds:0xc002d6a0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 50 e7 00 00       	call   c000f691 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 92 e6 00 00       	call   c000f691 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 7c e6 00 00       	call   c000f691 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 58 e6 00 00       	call   c000f691 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d a0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6a0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 a4 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd295c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 a4 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd295c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 d4 d6 02 c0 	lea    edx,[eax*8-0x3ffd292c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d e0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6e0
c00011e2:	81 fb d4 d6 02 c0    	cmp    ebx,0xc002d6d4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d d4 d6 02 c0       	cmp    eax,0xc002d6d4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d d0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 dc d6 02 c0       	mov    ds:0xc002d6dc,eax
c000121e:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0001223:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 d4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6d4
c0001231:	c7 40 0c d4 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d6d4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 d4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6d4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 98 d6 02 c0 	lea    ebp,[edx*4-0x3ffd2968]
c0001282:	8b 14 95 a0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2960]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 a0 d6 02 c0 	lea    ecx,[edx*4-0x3ffd2960]
c000129d:	8b 14 95 a0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2960]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd d4 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd262c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 d4 d6 02 c0 	lea    eax,[eax*8-0x3ffd292c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d dc d6 02 c0    	mov    DWORD PTR ds:0xc002d6dc,ecx
c0001357:	89 0d e0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e0,ecx
c000135d:	c7 41 08 d4 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d6d4
c0001364:	c7 41 0c d4 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d6d4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd cc d6 02 c0 	lea    edx,[ecx*8-0x3ffd2934]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d d4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd262c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d d4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd262c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 cc d6 02 c0 	lea    edx,[eax*4-0x3ffd2934]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d d4 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd262c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d dc d6 02 c0    	mov    DWORD PTR ds:0xc002d6dc,edi
c000142a:	89 3d e0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e0,edi
c0001430:	c7 47 08 d4 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d6d4
c0001437:	c7 47 0c d4 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d6d4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba a0 d6 02 c0       	mov    edx,0xc002d6a0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d a0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d f4 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 f4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9f4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d f4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 cc d6 02 c0    	cmp    DWORD PTR ds:0xc002d6cc,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d a0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 fc d9 02 c0    	push   DWORD PTR ds:0xc002d9fc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d a0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 fc d9 02 c0       	mov    eax,ds:0xc002d9fc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d cc d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6cc,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 a4 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd295c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 d4 d6 02 c0       	mov    eax,0xc002d6d4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d cc d9 02 c0       	cmp    eax,0xc002d9cc
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 f0 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9f0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 04 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da04
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 14 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da14
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 c4 8b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd743c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 a0 d6 02 c0       	mov    ds:0xc002d6a0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d e4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d e8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ec d9 02 c0    	mov    DWORD PTR ds:0xc002d9ec,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 f4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9f4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 80 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee80]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 0c ea 01 00       	jmp    c0020638 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 80 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee80]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 3d ea 01 00       	jmp    c002067f <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 80 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee80]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 65 ea 01 00       	jmp    c00206c6 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 18 43 02 00       	call   c002625c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 e0 8c 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7320]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 e0 8c 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7320]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba e0 8b 02 c0       	mov    edx,0xc0028be0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 00 8d 02 c0       	mov    edx,0xc0028d00
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba ec be 02 c0       	mov    edx,0xc002beec
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba f0 8c 02 c0       	mov    edx,0xc0028cf0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 40 da 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd25c0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 20 da 02 c0    	mov    ax,ds:0xc002da20
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 20 da 02 c0    	mov    ds:0xc002da20,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 15 31 02 00       	call   c002625c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 12 8d 02 c0       	mov    eax,0xc0028d12
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 60 8c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd73a0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 1b 8d 02 c0       	mov    eax,0xc0028d1b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 e0 8c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7320]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 e0 1a 02 00       	call   c002625c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba f0 8c 02 c0       	mov    edx,0xc0028cf0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba e0 8b 02 c0       	mov    edx,0xc0028be0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba f0 8b 02 c0       	mov    edx,0xc0028bf0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 40 da 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd25c0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 40 da 02 c0 	mov    DWORD PTR [edx*4-0x3ffd25c0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 a7 04 02 00       	call   c002625c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 8d 04 02 00       	call   c002625c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 37 8c 02 c0       	mov    eax,0xc0028c37
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 30 8c 02 c0       	mov    eax,0xc0028c30
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 40 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd25c0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 20 8c 02 c0       	mov    esi,0xc0028c20
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 d0 eb 01 00       	call   c002625c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 00 8d 02 c0       	mov    edx,0xc0028d00
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 00 8c 02 c0       	mov    edx,0xc0028c00
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 10 8c 02 c0       	mov    edx,0xc0028c10
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 22 8d 02 c0       	mov    edx,0xc0028d22
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 2e 8d 02 c0       	mov    edx,0xc0028d2e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 42 8d 02 c0       	mov    edx,0xc0028d42
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 97 73 00 00       	call   c000f83a <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 91 73 00 00       	call   c000f84a <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 60 90 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029060
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 60 90 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029060
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 60 8e 02 c0       	mov    eax,0xc0028e60
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 a0 8d 02 c0       	mov    eax,0xc0028da0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 60 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd72a0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 d6 70 00 00       	call   c000f84a <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c0 70 00 00       	call   c000f84a <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 24 f5 01 00       	call   c0027d2f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 e7 f4 01 00       	call   c0027d11 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 bb f4 01 00       	call   c0027d2f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 6e eb 01 00       	call   c0027434 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 e8 f5 01 00       	call   c0027ec0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 35 f4 01 00       	call   c0027d2f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 77 f3 01 00       	call   c0027d2f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 44 f3 01 00       	call   c0027d11 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 31 f2 01 00       	call   c0027d2f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 f9 f1 01 00       	call   c0027d11 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 9f 6c 00 00       	call   c000f86a <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 3a 6c 00 00       	call   c000f84a <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 60 91 02 c0       	mov    eax,0xc0029160
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 05 f0 01 00       	call   c0027d2f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ca ef 01 00       	call   c0027d11 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 c0 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a40]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 da ec 01 00       	call   c0027ac3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 58 e6 01 00       	call   c0027460 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 14 ef 01 00       	call   c0027d33 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 02 f0 01 00       	call   c0027e57 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 ec e5 01 00       	call   c0027460 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 97 ee 01 00       	call   c0027d2d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 78 ee 01 00       	call   c0027d31 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 06 f0 01 00       	call   c0027ee0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 b8 eb 01 00       	call   c0027ac3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 36 e5 01 00       	call   c0027460 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 f2 ed 01 00       	call   c0027d33 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 e0 ee 01 00       	call   c0027e57 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ca e4 01 00       	call   c0027460 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 75 ed 01 00       	call   c0027d2d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 55 ed 01 00       	call   c0027d31 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 e2 ee 01 00       	call   c0027ee0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 90 ec 01 00       	call   c0027d2f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 4e ec 01 00       	call   c0027d11 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 36 ec 01 00       	call   c0027d2f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 a8 e9 01 00       	call   c0027ac3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 aa dc 01 00       	call   c0026de3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 0d e3 01 00       	call   c0027460 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 5f e9 01 00       	call   c0027ac3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 65 dc 01 00       	call   c0026de3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 34 e9 01 00       	call   c0027ac3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 84 eb 01 00       	call   c0027d2d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 61 e2 01 00       	call   c0027434 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 db ec 01 00       	call   c0027ec0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 0a eb 01 00       	call   c0027d11 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 05 e2 01 00       	call   c0027434 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 83 e8 01 00       	call   c0027ac3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 06 e2 01 00       	call   c0027460 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 58 e8 01 00       	call   c0027ac3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 bf e4 01 00       	call   c0027744 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 3e db 01 00       	call   c0026de3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 9e d4 01 00       	call   c0026778 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 75 eb 01 00       	call   c0027e57 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 5e e1 01 00       	call   c0027460 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 45 eb 01 00       	call   c0027e57 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 b7 da 01 00       	call   c0026de3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 f0 e9 01 00       	call   c0027d33 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 d8 e3 01 00       	call   c0027744 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 5e da 01 00       	call   c0026de3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 44 eb 01 00       	call   c0027ee0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 1e e7 01 00       	call   c0027ac3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 75 e0 01 00       	call   c0027434 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 54 e9 01 00       	call   c0027d2f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 ed d9 01 00       	call   c0026de3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 19 e0 01 00       	call   c0027434 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 b3 ea 01 00       	call   c0027ee0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 6c e6 01 00       	call   c0027ac3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 e9 df 01 00       	call   c0027460 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 3c e6 01 00       	call   c0027ac3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 42 d9 01 00       	call   c0026de3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 12 e6 01 00       	call   c0027ac3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 64 e8 01 00       	call   c0027d2f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 3b df 01 00       	call   c0027434 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 b5 e9 01 00       	call   c0027ec0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 e4 e7 01 00       	call   c0027d11 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 de de 01 00       	call   c0027434 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 5c e5 01 00       	call   c0027ac3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 df de 01 00       	call   c0027460 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 31 e5 01 00       	call   c0027ac3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 98 e1 01 00       	call   c0027744 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 17 d8 01 00       	call   c0026de3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 67 d1 01 00       	call   c0026778 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 3e e8 01 00       	call   c0027e57 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 27 de 01 00       	call   c0027460 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 0e e8 01 00       	call   c0027e57 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 80 d7 01 00       	call   c0026de3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 b9 e6 01 00       	call   c0027d33 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 a0 e0 01 00       	call   c0027744 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 1f d7 01 00       	call   c0026de3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 05 e8 01 00       	call   c0027ee0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 df e3 01 00       	call   c0027ac3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 36 dd 01 00       	call   c0027434 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 15 e6 01 00       	call   c0027d2f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ae d6 01 00       	call   c0026de3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 da dc 01 00       	call   c0027434 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 4f e3 01 00       	call   c0027ac3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 55 d6 01 00       	call   c0026de3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 20 96 02 c0       	mov    eax,0xc0029620
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 34 96 02 c0       	mov    eax,0xc0029634
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d3 5f 00 00       	call   c000f84a <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 d5 5f 00 00       	call   c000f86a <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ca e1 01 00       	call   c0027ac3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 48 db 01 00       	call   c0027460 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 da cd 01 00       	call   c0026778 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 b1 e4 01 00       	call   c0027e57 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 9a da 01 00       	call   c0027460 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 7d e4 01 00       	call   c0027e57 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ef d3 01 00       	call   c0026de3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 4f e4 01 00       	call   c0027e57 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 3e da 01 00       	call   c0027460 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 a7 d3 01 00       	call   c0026de3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 c8 cc 01 00       	call   c0026778 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 9f e3 01 00       	call   c0027e57 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 88 d9 01 00       	call   c0027460 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 6b e3 01 00       	call   c0027e57 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 dd d2 01 00       	call   c0026de3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 3d e3 01 00       	call   c0027e57 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 2c d9 01 00       	call   c0027460 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 95 d2 01 00       	call   c0026de3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 73 d2 01 00       	call   c0026de3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 4f cb 01 00       	call   c0026778 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 26 e2 01 00       	call   c0027e57 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 0f d8 01 00       	call   c0027460 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 f2 e1 01 00       	call   c0027e57 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 64 d1 01 00       	call   c0026de3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 c4 e1 01 00       	call   c0027e57 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ad d7 01 00       	call   c0027460 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 16 d1 01 00       	call   c0026de3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 76 e1 01 00       	call   c0027e57 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 5f d7 01 00       	call   c0027460 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 c8 d0 01 00       	call   c0026de3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 dd c9 01 00       	call   c0026778 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 b4 e0 01 00       	call   c0027e57 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 9d d6 01 00       	call   c0027460 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 84 e0 01 00       	call   c0027e57 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 f6 cf 01 00       	call   c0026de3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 56 e0 01 00       	call   c0027e57 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 3f d6 01 00       	call   c0027460 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 a8 cf 01 00       	call   c0026de3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 08 e0 01 00       	call   c0027e57 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 f1 d5 01 00       	call   c0027460 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 5a cf 01 00       	call   c0026de3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 2e cf 01 00       	call   c0026de3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 8b d5 01 00       	call   c0027460 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 47 de 01 00       	call   c0027d33 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 d6 ce 01 00       	call   c0026de3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 33 d5 01 00       	call   c0027460 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ef dd 01 00       	call   c0027d33 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 69 c7 01 00       	call   c0026778 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 40 de 01 00       	call   c0027e57 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 29 d4 01 00       	call   c0027460 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 0c de 01 00       	call   c0027e57 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 7e cd 01 00       	call   c0026de3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 de dd 01 00       	call   c0027e57 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 c7 d3 01 00       	call   c0027460 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 30 cd 01 00       	call   c0026de3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 90 dd 01 00       	call   c0027e57 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 79 d3 01 00       	call   c0027460 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 e2 cc 01 00       	call   c0026de3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 42 dd 01 00       	call   c0027e57 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 2b d3 01 00       	call   c0027460 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 94 cc 01 00       	call   c0026de3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 f4 dc 01 00       	call   c0027e57 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 dd d2 01 00       	call   c0027460 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 46 cc 01 00       	call   c0026de3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 48 c5 01 00       	call   c0026778 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 1f dc 01 00       	call   c0027e57 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 08 d2 01 00       	call   c0027460 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ef db 01 00       	call   c0027e57 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 61 cb 01 00       	call   c0026de3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 c1 db 01 00       	call   c0027e57 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 aa d1 01 00       	call   c0027460 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 13 cb 01 00       	call   c0026de3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 73 db 01 00       	call   c0027e57 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 5c d1 01 00       	call   c0027460 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 c5 ca 01 00       	call   c0026de3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 25 db 01 00       	call   c0027e57 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 0e d1 01 00       	call   c0027460 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 77 ca 01 00       	call   c0026de3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 d7 da 01 00       	call   c0027e57 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 c0 d0 01 00       	call   c0027460 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 29 ca 01 00       	call   c0026de3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 fd c9 01 00       	call   c0026de3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 5a d0 01 00       	call   c0027460 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 16 d9 01 00       	call   c0027d33 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 a5 c9 01 00       	call   c0026de3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 02 d0 01 00       	call   c0027460 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 be d8 01 00       	call   c0027d33 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 4c c9 01 00       	call   c0026de3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 a9 cf 01 00       	call   c0027460 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 65 d8 01 00       	call   c0027d33 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 f3 c8 01 00       	call   c0026de3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 50 cf 01 00       	call   c0027460 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 0c d8 01 00       	call   c0027d33 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 6a c1 01 00       	call   c0026778 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 41 d8 01 00       	call   c0027e57 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 2a ce 01 00       	call   c0027460 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 0d d8 01 00       	call   c0027e57 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 7f c7 01 00       	call   c0026de3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 df d7 01 00       	call   c0027e57 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 c8 cd 01 00       	call   c0027460 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 31 c7 01 00       	call   c0026de3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 91 d7 01 00       	call   c0027e57 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 7a cd 01 00       	call   c0027460 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 e3 c6 01 00       	call   c0026de3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 43 d7 01 00       	call   c0027e57 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 2c cd 01 00       	call   c0027460 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 95 c6 01 00       	call   c0026de3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 f5 d6 01 00       	call   c0027e57 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 de cc 01 00       	call   c0027460 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 47 c6 01 00       	call   c0026de3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 a7 d6 01 00       	call   c0027e57 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 90 cc 01 00       	call   c0027460 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 f6 c5 01 00       	call   c0026de3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 56 d6 01 00       	call   c0027e57 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 3f cc 01 00       	call   c0027460 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 a8 c5 01 00       	call   c0026de3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 a2 be 01 00       	call   c0026778 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 79 d5 01 00       	call   c0027e57 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 62 cb 01 00       	call   c0027460 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 42 d5 01 00       	call   c0027e57 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 b4 c4 01 00       	call   c0026de3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 14 d5 01 00       	call   c0027e57 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 fd ca 01 00       	call   c0027460 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 66 c4 01 00       	call   c0026de3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 c6 d4 01 00       	call   c0027e57 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 af ca 01 00       	call   c0027460 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 18 c4 01 00       	call   c0026de3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 78 d4 01 00       	call   c0027e57 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 61 ca 01 00       	call   c0027460 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ca c3 01 00       	call   c0026de3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 2a d4 01 00       	call   c0027e57 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 13 ca 01 00       	call   c0027460 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 7c c3 01 00       	call   c0026de3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 dc d3 01 00       	call   c0027e57 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 c5 c9 01 00       	call   c0027460 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 2b c3 01 00       	call   c0026de3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 8b d3 01 00       	call   c0027e57 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 74 c9 01 00       	call   c0027460 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 e3 c2 01 00       	call   c0026de3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 bc c2 01 00       	call   c0026de3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 1a c9 01 00       	call   c0027460 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 d6 d1 01 00       	call   c0027d33 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 65 c2 01 00       	call   c0026de3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 c3 c8 01 00       	call   c0027460 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 7f d1 01 00       	call   c0027d33 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 0d c2 01 00       	call   c0026de3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 6b c8 01 00       	call   c0027460 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 27 d1 01 00       	call   c0027d33 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 b5 c1 01 00       	call   c0026de3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 13 c8 01 00       	call   c0027460 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 cf d0 01 00       	call   c0027d33 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 5d c1 01 00       	call   c0026de3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 bb c7 01 00       	call   c0027460 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 77 d0 01 00       	call   c0027d33 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 0b c1 01 00       	call   c0026de3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 69 c7 01 00       	call   c0027460 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 25 d0 01 00       	call   c0027d33 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 39 b9 01 00       	call   c0026778 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 10 d0 01 00       	call   c0027e57 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 f9 c5 01 00       	call   c0027460 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 e0 cf 01 00       	call   c0027e57 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 52 bf 01 00       	call   c0026de3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 64 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd699c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 86 cf 01 00       	call   c0027e57 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 6f c5 01 00       	call   c0027460 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 da be 01 00       	call   c0026de3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 27 cf 01 00       	call   c0027e57 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 10 c5 01 00       	call   c0027460 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 7b be 01 00       	call   c0026de3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 c8 ce 01 00       	call   c0027e57 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 b1 c4 01 00       	call   c0027460 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 1c be 01 00       	call   c0026de3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 69 ce 01 00       	call   c0027e57 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 52 c4 01 00       	call   c0027460 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 bd bd 01 00       	call   c0026de3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 0a ce 01 00       	call   c0027e57 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 f3 c3 01 00       	call   c0027460 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 5e bd 01 00       	call   c0026de3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 ab cd 01 00       	call   c0027e57 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 94 c3 01 00       	call   c0027460 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 ff bc 01 00       	call   c0026de3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 4c cd 01 00       	call   c0027e57 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 35 c3 01 00       	call   c0027460 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 a0 bc 01 00       	call   c0026de3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 ed cc 01 00       	call   c0027e57 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 d6 c2 01 00       	call   c0027460 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 41 bc 01 00       	call   c0026de3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 4b b5 01 00       	call   c0026778 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 22 cc 01 00       	call   c0027e57 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 0b c2 01 00       	call   c0027460 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 f2 cb 01 00       	call   c0027e57 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 64 bb 01 00       	call   c0026de3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 80 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6980]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 97 cb 01 00       	call   c0027e57 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 80 c1 01 00       	call   c0027460 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 eb ba 01 00       	call   c0026de3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 37 cb 01 00       	call   c0027e57 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 20 c1 01 00       	call   c0027460 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 8b ba 01 00       	call   c0026de3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 d7 ca 01 00       	call   c0027e57 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 c0 c0 01 00       	call   c0027460 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 2b ba 01 00       	call   c0026de3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 77 ca 01 00       	call   c0027e57 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 60 c0 01 00       	call   c0027460 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 cb b9 01 00       	call   c0026de3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 17 ca 01 00       	call   c0027e57 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 00 c0 01 00       	call   c0027460 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 6b b9 01 00       	call   c0026de3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 b7 c9 01 00       	call   c0027e57 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 a0 bf 01 00       	call   c0027460 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 0b b9 01 00       	call   c0026de3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 57 c9 01 00       	call   c0027e57 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 40 bf 01 00       	call   c0027460 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 ab b8 01 00       	call   c0026de3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 f7 c8 01 00       	call   c0027e57 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 e0 be 01 00       	call   c0027460 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 4b b8 01 00       	call   c0026de3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 9c 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6964]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 f0 b7 01 00       	call   c0026de3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 4d be 01 00       	call   c0027460 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 09 c7 01 00       	call   c0027d33 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 93 b7 01 00       	call   c0026de3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 f0 bd 01 00       	call   c0027460 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ac c6 01 00       	call   c0027d33 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 36 b7 01 00       	call   c0026de3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 93 bd 01 00       	call   c0027460 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 4f c6 01 00       	call   c0027d33 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 d9 b6 01 00       	call   c0026de3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 36 bd 01 00       	call   c0027460 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 f2 c5 01 00       	call   c0027d33 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 7c b6 01 00       	call   c0026de3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 d9 bc 01 00       	call   c0027460 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 95 c5 01 00       	call   c0027d33 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 1f b6 01 00       	call   c0026de3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 7c bc 01 00       	call   c0027460 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 38 c5 01 00       	call   c0027d33 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 c2 b5 01 00       	call   c0026de3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 1f bc 01 00       	call   c0027460 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 db c4 01 00       	call   c0027d33 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 65 b5 01 00       	call   c0026de3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 c2 bb 01 00       	call   c0027460 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 7e c4 01 00       	call   c0027d33 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 7a bb 01 00       	call   c0027460 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ea c5 01 00       	jmp    c0027ee0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 5c c2 01 00       	call   c0027d2f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 1a c2 01 00       	call   c0027d11 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 b1 bf 01 00       	call   c0027ac3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 b2 b2 01 00       	call   c0026de3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 81 bf 01 00       	call   c0027ac3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 e8 bb 01 00       	call   c0027744 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 87 c1 01 00       	call   c0027d11 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 8a c1 01 00       	call   c0027d2f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 5d c1 01 00       	call   c0027d2f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 56 bb 01 00       	call   c0027744 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 d8 c2 01 00       	call   c0027ee0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 b3 c2 01 00       	call   c0027ee0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 8d be 01 00       	call   c0027ac3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 e4 b7 01 00       	call   c0027434 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 c3 c0 01 00       	call   c0027d2f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 5c b1 01 00       	call   c0026de3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 80 b7 01 00       	call   c0027434 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 1a c2 01 00       	call   c0027ee0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 5a ba 01 00       	call   c0027744 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 d7 b0 01 00       	call   c0026de3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 03 bd 01 00       	call   c0027ac3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 03 b0 01 00       	call   c0026de3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 e3 af 01 00       	call   c0026de3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 b3 bc 01 00       	call   c0027ac3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 03 bf 01 00       	call   c0027d2d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 e2 b5 01 00       	call   c0027434 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 5c c0 01 00       	call   c0027ec0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 8b be 01 00       	call   c0027d11 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 89 b5 01 00       	call   c0027434 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 07 bc 01 00       	call   c0027ac3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 8a b5 01 00       	call   c0027460 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 dc bb 01 00       	call   c0027ac3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 43 b8 01 00       	call   c0027744 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 c2 ae 01 00       	call   c0026de3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 8c bb 01 00       	call   c0027ac3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 d8 bd 01 00       	call   c0027d2f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 cd b4 01 00       	call   c0027460 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 9f b4 01 00       	call   c0027460 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 d8 ba 01 00       	call   c0027ac3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 3c b7 01 00       	call   c0027744 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 04 b7 01 00       	call   c0027744 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 83 ad 01 00       	call   c0026de3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 68 be 01 00       	call   c0027ee0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 42 ba 01 00       	call   c0027ac3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 99 b3 01 00       	call   c0027434 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 78 bc 01 00       	call   c0027d2f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 10 ad 01 00       	call   c0026de3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 34 b3 01 00       	call   c0027434 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ce bd 01 00       	call   c0027ee0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 97 bb 01 00       	call   c0027d2f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 55 bb 01 00       	call   c0027d11 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 ec b8 01 00       	call   c0027ac3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 ed ab 01 00       	call   c0026de3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 bc b8 01 00       	call   c0027ac3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 23 b5 01 00       	call   c0027744 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 c2 ba 01 00       	call   c0027d11 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 c5 ba 01 00       	call   c0027d2f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 98 ba 01 00       	call   c0027d2f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 91 b4 01 00       	call   c0027744 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 13 bc 01 00       	call   c0027ee0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ee bb 01 00       	call   c0027ee0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 c8 b7 01 00       	call   c0027ac3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 1f b1 01 00       	call   c0027434 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 fe b9 01 00       	call   c0027d2f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 97 aa 01 00       	call   c0026de3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 bb b0 01 00       	call   c0027434 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 55 bb 01 00       	call   c0027ee0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 95 b3 01 00       	call   c0027744 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 12 aa 01 00       	call   c0026de3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 3d b6 01 00       	call   c0027ac3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 3d a9 01 00       	call   c0026de3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 1d a9 01 00       	call   c0026de3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 ed b5 01 00       	call   c0027ac3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 3d b8 01 00       	call   c0027d2d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 1b af 01 00       	call   c0027434 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 95 b9 01 00       	call   c0027ec0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 c4 b7 01 00       	call   c0027d11 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 c1 ae 01 00       	call   c0027434 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 3f b5 01 00       	call   c0027ac3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 c2 ae 01 00       	call   c0027460 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 14 b5 01 00       	call   c0027ac3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 7b b1 01 00       	call   c0027744 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 fa a7 01 00       	call   c0026de3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 c4 b4 01 00       	call   c0027ac3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 10 b7 01 00       	call   c0027d2f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 05 ae 01 00       	call   c0027460 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 d7 ad 01 00       	call   c0027460 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 0e b4 01 00       	call   c0027ac3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 72 b0 01 00       	call   c0027744 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 3f b0 01 00       	call   c0027744 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 be a6 01 00       	call   c0026de3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 a3 b7 01 00       	call   c0027ee0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 7d b3 01 00       	call   c0027ac3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 d4 ac 01 00       	call   c0027434 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 b3 b5 01 00       	call   c0027d2f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 4b a6 01 00       	call   c0026de3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 6f ac 01 00       	call   c0027434 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 09 b7 01 00       	call   c0027ee0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 d2 b4 01 00       	call   c0027d2f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 90 b4 01 00       	call   c0027d11 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 27 b2 01 00       	call   c0027ac3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 28 a5 01 00       	call   c0026de3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 f7 b1 01 00       	call   c0027ac3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 5e ae 01 00       	call   c0027744 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 fd b3 01 00       	call   c0027d11 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 00 b4 01 00       	call   c0027d2f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 d3 b3 01 00       	call   c0027d2f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 cc ad 01 00       	call   c0027744 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 4e b5 01 00       	call   c0027ee0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 29 b5 01 00       	call   c0027ee0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 03 b1 01 00       	call   c0027ac3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 5a aa 01 00       	call   c0027434 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 39 b3 01 00       	call   c0027d2f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 d2 a3 01 00       	call   c0026de3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 f6 a9 01 00       	call   c0027434 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 90 b4 01 00       	call   c0027ee0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 d0 ac 01 00       	call   c0027744 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 4d a3 01 00       	call   c0026de3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 78 af 01 00       	call   c0027ac3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 78 a2 01 00       	call   c0026de3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 58 a2 01 00       	call   c0026de3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 28 af 01 00       	call   c0027ac3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 78 b1 01 00       	call   c0027d2d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 56 a8 01 00       	call   c0027434 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 d0 b2 01 00       	call   c0027ec0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 ff b0 01 00       	call   c0027d11 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 fc a7 01 00       	call   c0027434 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 7a ae 01 00       	call   c0027ac3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 fd a7 01 00       	call   c0027460 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 4f ae 01 00       	call   c0027ac3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 b6 aa 01 00       	call   c0027744 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 35 a1 01 00       	call   c0026de3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 ff ad 01 00       	call   c0027ac3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 4b b0 01 00       	call   c0027d2f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 40 a7 01 00       	call   c0027460 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 12 a7 01 00       	call   c0027460 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 49 ad 01 00       	call   c0027ac3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ad a9 01 00       	call   c0027744 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 7a a9 01 00       	call   c0027744 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 f9 9f 01 00       	call   c0026de3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 de b0 01 00       	call   c0027ee0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 b8 ac 01 00       	call   c0027ac3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 0f a6 01 00       	call   c0027434 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ee ae 01 00       	call   c0027d2f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 86 9f 01 00       	call   c0026de3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 aa a5 01 00       	call   c0027434 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 44 b0 01 00       	call   c0027ee0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 0d ae 01 00       	call   c0027d2f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 cb ad 01 00       	call   c0027d11 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 62 ab 01 00       	call   c0027ac3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 63 9e 01 00       	call   c0026de3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 32 ab 01 00       	call   c0027ac3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 99 a7 01 00       	call   c0027744 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 38 ad 01 00       	call   c0027d11 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 3b ad 01 00       	call   c0027d2f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 0e ad 01 00       	call   c0027d2f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 07 a7 01 00       	call   c0027744 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 89 ae 01 00       	call   c0027ee0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 64 ae 01 00       	call   c0027ee0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 3e aa 01 00       	call   c0027ac3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 95 a3 01 00       	call   c0027434 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 74 ac 01 00       	call   c0027d2f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 0d 9d 01 00       	call   c0026de3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 31 a3 01 00       	call   c0027434 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 cb ad 01 00       	call   c0027ee0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 0b a6 01 00       	call   c0027744 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 88 9c 01 00       	call   c0026de3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 b3 a8 01 00       	call   c0027ac3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 b3 9b 01 00       	call   c0026de3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 93 9b 01 00       	call   c0026de3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 63 a8 01 00       	call   c0027ac3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 b3 aa 01 00       	call   c0027d2d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 91 a1 01 00       	call   c0027434 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 0b ac 01 00       	call   c0027ec0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 3a aa 01 00       	call   c0027d11 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 37 a1 01 00       	call   c0027434 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 b5 a7 01 00       	call   c0027ac3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 38 a1 01 00       	call   c0027460 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 8a a7 01 00       	call   c0027ac3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 f1 a3 01 00       	call   c0027744 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 70 9a 01 00       	call   c0026de3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 3a a7 01 00       	call   c0027ac3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 86 a9 01 00       	call   c0027d2f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 7b a0 01 00       	call   c0027460 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 4d a0 01 00       	call   c0027460 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 84 a6 01 00       	call   c0027ac3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 e8 a2 01 00       	call   c0027744 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 b5 a2 01 00       	call   c0027744 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 34 99 01 00       	call   c0026de3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 19 aa 01 00       	call   c0027ee0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 f3 a5 01 00       	call   c0027ac3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 4a 9f 01 00       	call   c0027434 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 29 a8 01 00       	call   c0027d2f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 c1 98 01 00       	call   c0026de3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 e5 9e 01 00       	call   c0027434 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 7f a9 01 00       	call   c0027ee0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 45 a7 01 00       	call   c0027d2f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 03 a7 01 00       	call   c0027d11 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 9a a4 01 00       	call   c0027ac3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 9b 97 01 00       	call   c0026de3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 6a a4 01 00       	call   c0027ac3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 d1 a0 01 00       	call   c0027744 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 70 a6 01 00       	call   c0027d11 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 73 a6 01 00       	call   c0027d2f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 46 a6 01 00       	call   c0027d2f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 3f a0 01 00       	call   c0027744 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 c1 a7 01 00       	call   c0027ee0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 98 a7 01 00       	call   c0027ee0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 72 a3 01 00       	call   c0027ac3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 c9 9c 01 00       	call   c0027434 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 a8 a5 01 00       	call   c0027d2f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 41 96 01 00       	call   c0026de3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 69 9c 01 00       	call   c0027434 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 03 a7 01 00       	call   c0027ee0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 44 9f 01 00       	call   c0027744 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 c1 95 01 00       	call   c0026de3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 ed a1 01 00       	call   c0027ac3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 ed 94 01 00       	call   c0026de3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 cd 94 01 00       	call   c0026de3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 9d a1 01 00       	call   c0027ac3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 d1 a3 01 00       	call   c0027d11 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 c8 9a 01 00       	call   c0027434 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 42 a5 01 00       	call   c0027ec0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 71 a3 01 00       	call   c0027d11 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 6b 9a 01 00       	call   c0027434 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 e9 a0 01 00       	call   c0027ac3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 6c 9a 01 00       	call   c0027460 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 be a0 01 00       	call   c0027ac3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 25 9d 01 00       	call   c0027744 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 a4 93 01 00       	call   c0026de3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 6e a0 01 00       	call   c0027ac3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ba a2 01 00       	call   c0027d2f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 af 99 01 00       	call   c0027460 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 81 99 01 00       	call   c0027460 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 c5 9f 01 00       	call   c0027ac3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 2c 9c 01 00       	call   c0027744 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 15 99 01 00       	call   c0027460 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 d1 a1 01 00       	call   c0027d33 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 c4 9b 01 00       	call   c0027744 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 43 92 01 00       	call   c0026de3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 28 a3 01 00       	call   c0027ee0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 02 9f 01 00       	call   c0027ac3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 59 98 01 00       	call   c0027434 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 38 a1 01 00       	call   c0027d2f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 d0 91 01 00       	call   c0026de3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 f8 97 01 00       	call   c0027434 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 92 a2 01 00       	call   c0027ee0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 c4 96 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd693c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 b8 96 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6948]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 99 1b 00 00       	call   c000f84a <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 4d 9f 01 00       	call   c0027d2f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 0b 9f 01 00       	call   c0027d11 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 f7 9e 01 00       	call   c0027d2f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 69 9c 01 00       	call   c0027ac3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 e7 95 01 00       	call   c0027460 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 39 9c 01 00       	call   c0027ac3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 3f 8f 01 00       	call   c0026de3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 0e 9c 01 00       	call   c0027ac3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 5e 9e 01 00       	call   c0027d2d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 3f 95 01 00       	call   c0027434 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 b9 9f 01 00       	call   c0027ec0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 e8 9d 01 00       	call   c0027d11 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 e7 94 01 00       	call   c0027434 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 65 9b 01 00       	call   c0027ac3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 e8 94 01 00       	call   c0027460 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 3a 9b 01 00       	call   c0027ac3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 a1 97 01 00       	call   c0027744 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 20 8e 01 00       	call   c0026de3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 48 97 01 00       	call   c0027744 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ce 8d 01 00       	call   c0026de3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 b4 9e 01 00       	call   c0027ee0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 8e 9a 01 00       	call   c0027ac3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 e5 93 01 00       	call   c0027434 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 c4 9c 01 00       	call   c0027d2f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 5d 8d 01 00       	call   c0026de3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 89 93 01 00       	call   c0027434 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 23 9e 01 00       	call   c0027ee0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 d8 99 01 00       	call   c0027ac3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 55 93 01 00       	call   c0027460 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 a6 99 01 00       	call   c0027ac3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ac 8c 01 00       	call   c0026de3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 7c 99 01 00       	call   c0027ac3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 d0 9b 01 00       	call   c0027d31 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 a9 92 01 00       	call   c0027434 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 23 9d 01 00       	call   c0027ec0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 52 9b 01 00       	call   c0027d11 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 50 92 01 00       	call   c0027434 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ce 98 01 00       	call   c0027ac3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 51 92 01 00       	call   c0027460 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 a3 98 01 00       	call   c0027ac3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 0a 95 01 00       	call   c0027744 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 89 8b 01 00       	call   c0026de3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 a5 94 01 00       	call   c0027744 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 24 8b 01 00       	call   c0026de3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 0a 9c 01 00       	call   c0027ee0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 e4 97 01 00       	call   c0027ac3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 3b 91 01 00       	call   c0027434 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 1a 9a 01 00       	call   c0027d2f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 b3 8a 01 00       	call   c0026de3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 df 90 01 00       	call   c0027434 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 50 97 01 00       	call   c0027ac3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 56 8a 01 00       	call   c0026de3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 de 97 02 c0       	mov    eax,0xc00297de
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 ef 97 02 c0       	mov    eax,0xc00297ef
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 db 13 00 00       	call   c000f84a <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 dd 13 00 00       	call   c000f86a <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 4c 13 00 00       	call   c000f83a <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 26 98 02 c0       	push   0xc0029826
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 a8 da 02 c0       	mov    eax,0xc002daa8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 2f 98 02 c0       	push   0xc002982f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 5c 62 02 c0       	mov    eax,0xc002625c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 39 98 02 c0       	push   0xc0029839
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 90 5f 02 c0       	mov    eax,0xc0025f90
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 42 98 02 c0       	push   0xc0029842
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 5c 63 02 c0       	mov    eax,0xc002635c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 4c 98 02 c0       	push   0xc002984c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 dc 60 02 c0       	mov    eax,0xc00260dc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 55 98 02 c0       	push   0xc0029855
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ac da 02 c0       	mov    eax,0xc002daac
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 62 98 02 c0       	push   0xc0029862
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ad da 02 c0       	mov    eax,0xc002daad
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 83 5a 00 00       	call   c00140a6 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e1 11 00 00       	call   c000f83a <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c000e668:	68 6f 98 02 c0       	push   0xc002986f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 15 ee 00 00       	call   c001d48a <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 cf f1 00 c0       	push   0xc000f1cf
c000e684:	53                   	push   ebx
c000e685:	e8 fe f0 00 00       	call   c001d788 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 e6 df 01 c0       	push   0xc001dfe6
c000e693:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c000e699:	e8 ea f0 00 00       	call   c001d788 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000e6a6:	c6 05 ad da 02 c0 01 	mov    BYTE PTR ds:0xc002daad,0x1
c000e6ad:	e8 b5 fc 00 00       	call   c001e367 <Vm::initialise8086()>
c000e6b2:	e8 d7 47 00 00       	call   c0012e8e <Fs::initVFS()>
c000e6b7:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 97 d7 00 00       	call   c001be6a <Sys::loadSyscalls()>
c000e6d3:	e8 dc b7 00 00       	call   c0019eb4 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 7c 98 02 c0       	push   0xc002987c
c000e6e2:	68 85 98 02 c0       	push   0xc0029885
c000e6e7:	e8 ee c4 00 00       	call   c001abda <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 82 52 00 00       	call   c0013976 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 75 59 00 00       	call   c001407a <Device::loadDriversForAll()>
c000e705:	5a                   	pop    edx
c000e706:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c000e70c:	59                   	pop    ecx
c000e70d:	6a 01                	push   0x1
c000e70f:	68 8d 98 02 c0       	push   0xc002988d
c000e714:	e8 bc e8 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c000e719:	5a                   	pop    edx
c000e71a:	59                   	pop    ecx
c000e71b:	53                   	push   ebx
c000e71c:	50                   	push   eax
c000e71d:	e8 cf ea 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c000e722:	83 c4 10             	add    esp,0x10
c000e725:	83 ec 0c             	sub    esp,0xc
c000e728:	6a 02                	push   0x2
c000e72a:	e8 bd f3 00 00       	call   c001daec <blockTask(TaskState)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	eb f1                	jmp    c000e725 <Krnl::firstTask()+0xdb>

c000e734 <Computer::Computer()>:
c000e734:	83 ec 0c             	sub    esp,0xc
c000e737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e73b:	83 ec 08             	sub    esp,0x8
c000e73e:	68 a9 98 02 c0       	push   0xc00298a9
c000e743:	50                   	push   eax
c000e744:	e8 d7 59 00 00       	call   c0014120 <Device::Device(char const*)>
c000e749:	83 c4 10             	add    esp,0x10
c000e74c:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c000e751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e755:	89 10                	mov    DWORD PTR [eax],edx
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e77d:	83 ca 04             	or     edx,0x4
c000e780:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e790:	0f b6 d0             	movzx  edx,al
c000e793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e797:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7a8:	0f b6 d0             	movzx  edx,al
c000e7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7af:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7be:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7cb:	0f b6 d0             	movzx  edx,al
c000e7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7d6:	83 e1 3f             	and    ecx,0x3f
c000e7d9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e7:	0f b6 d0             	movzx  edx,al
c000e7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ee:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ff:	0f b6 d0             	movzx  edx,al
c000e802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e806:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e815:	8d 50 01             	lea    edx,[eax+0x1]
c000e818:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e81c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e822:	0f b6 d0             	movzx  edx,al
c000e825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e829:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e82d:	83 e1 3f             	and    ecx,0x3f
c000e830:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e838:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e83e:	0f b6 d0             	movzx  edx,al
c000e841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e845:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e850:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e856:	0f b6 d0             	movzx  edx,al
c000e859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e866:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86c:	8d 50 01             	lea    edx,[eax+0x1]
c000e86f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e873:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e879:	0f b6 d0             	movzx  edx,al
c000e87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e880:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e884:	83 e1 3f             	and    ecx,0x3f
c000e887:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e88b:	90                   	nop
c000e88c:	83 c4 0c             	add    esp,0xc
c000e88f:	c3                   	ret    

c000e890 <Computer::setBootMessage(char const*)>:
c000e890:	c3                   	ret    
c000e891:	90                   	nop

c000e892 <Computer::detectFeatures()>:
c000e892:	55                   	push   ebp
c000e893:	57                   	push   edi
c000e894:	56                   	push   esi
c000e895:	53                   	push   ebx
c000e896:	83 ec 1c             	sub    esp,0x1c
c000e899:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e89d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8a7:	e8 38 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ac:	85 c0                	test   eax,eax
c000e8ae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8b4:	0f 95 c2             	setne  dl
c000e8b7:	83 e0 fd             	and    eax,0xfffffffd
c000e8ba:	d1 e2                	shl    edx,1
c000e8bc:	09 d0                	or     eax,edx
c000e8be:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8c4:	a8 02                	test   al,0x2
c000e8c6:	75 46                	jne    c000e90e <Computer::detectFeatures()+0x7c>
c000e8c8:	f6 05 c1 da 02 c0 04 	test   BYTE PTR ds:0xc002dac1,0x4
c000e8cf:	74 07                	je     c000e8d8 <Computer::detectFeatures()+0x46>
c000e8d1:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8d8:	e8 49 76 01 00       	call   c0025f26 <x87Detect>
c000e8dd:	83 e0 01             	and    eax,0x1
c000e8e0:	c1 e0 04             	shl    eax,0x4
c000e8e3:	88 c2                	mov    dl,al
c000e8e5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8eb:	83 e0 ef             	and    eax,0xffffffef
c000e8ee:	09 d0                	or     eax,edx
c000e8f0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8f6:	a8 10                	test   al,0x10
c000e8f8:	0f 85 2a 01 00 00    	jne    c000ea28 <Computer::detectFeatures()+0x196>
c000e8fe:	84 c0                	test   al,al
c000e900:	0f 88 45 01 00 00    	js     c000ea4b <Computer::detectFeatures()+0x1b9>
c000e906:	83 c4 1c             	add    esp,0x1c
c000e909:	5b                   	pop    ebx
c000e90a:	5e                   	pop    esi
c000e90b:	5f                   	pop    edi
c000e90c:	5d                   	pop    ebp
c000e90d:	c3                   	ret    
c000e90e:	83 ec 0c             	sub    esp,0xc
c000e911:	6a 20                	push   0x20
c000e913:	e8 5e 9f 00 00       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c000e918:	83 e0 01             	and    eax,0x1
c000e91b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e922:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e928:	83 e0 f7             	and    eax,0xfffffff7
c000e92b:	09 d0                	or     eax,edx
c000e92d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e933:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e93a:	e8 37 9f 00 00       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c000e93f:	83 e0 01             	and    eax,0x1
c000e942:	88 c2                	mov    dl,al
c000e944:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e94a:	83 e0 fe             	and    eax,0xfffffffe
c000e94d:	09 d0                	or     eax,edx
c000e94f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e955:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e95c:	e8 15 9f 00 00       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c000e961:	c1 e0 07             	shl    eax,0x7
c000e964:	88 c2                	mov    dl,al
c000e966:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e96c:	83 e0 7f             	and    eax,0x7f
c000e96f:	09 d0                	or     eax,edx
c000e971:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e977:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e97e:	e8 f3 9e 00 00       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c000e983:	83 c4 10             	add    esp,0x10
c000e986:	83 e0 01             	and    eax,0x1
c000e989:	c1 e0 05             	shl    eax,0x5
c000e98c:	88 c2                	mov    dl,al
c000e98e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e994:	83 e0 df             	and    eax,0xffffffdf
c000e997:	09 d0                	or     eax,edx
c000e999:	f7 05 c0 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dac0,0x401
c000e9a3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9a9:	0f 84 c2 00 00 00    	je     c000ea71 <Computer::detectFeatures()+0x1df>
c000e9af:	83 e0 fe             	and    eax,0xfffffffe
c000e9b2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9be:	88 c2                	mov    dl,al
c000e9c0:	83 e2 09             	and    edx,0x9
c000e9c3:	fe ca                	dec    dl
c000e9c5:	75 09                	jne    c000e9d0 <Computer::detectFeatures()+0x13e>
c000e9c7:	83 e0 fe             	and    eax,0xfffffffe
c000e9ca:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d0:	83 ec 0c             	sub    esp,0xc
c000e9d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9d7:	50                   	push   eax
c000e9d8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9dc:	55                   	push   ebp
c000e9dd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e1:	57                   	push   edi
c000e9e2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9e6:	56                   	push   esi
c000e9e7:	68 00 00 00 80       	push   0x80000000
c000e9ec:	e8 01 9e 00 00       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f1:	83 c4 20             	add    esp,0x20
c000e9f4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e9fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e9ff:	0f 86 c3 fe ff ff    	jbe    c000e8c8 <Computer::detectFeatures()+0x36>
c000ea05:	83 ec 0c             	sub    esp,0xc
c000ea08:	50                   	push   eax
c000ea09:	55                   	push   ebp
c000ea0a:	57                   	push   edi
c000ea0b:	56                   	push   esi
c000ea0c:	68 01 00 00 80       	push   0x80000001
c000ea11:	e8 dc 9d 00 00       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea16:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea20:	83 c4 20             	add    esp,0x20
c000ea23:	e9 a0 fe ff ff       	jmp    c000e8c8 <Computer::detectFeatures()+0x36>
c000ea28:	e8 b3 74 01 00       	call   c0025ee0 <absolutelyNoChanceInHell>
c000ea2d:	88 c2                	mov    dl,al
c000ea2f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea35:	c1 e2 07             	shl    edx,0x7
c000ea38:	83 e0 7f             	and    eax,0x7f
c000ea3b:	09 d0                	or     eax,edx
c000ea3d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea43:	84 c0                	test   al,al
c000ea45:	0f 89 bb fe ff ff    	jns    c000e906 <Computer::detectFeatures()+0x74>
c000ea4b:	e8 70 74 01 00       	call   c0025ec0 <avxDetect>
c000ea50:	83 e0 01             	and    eax,0x1
c000ea53:	c1 e0 05             	shl    eax,0x5
c000ea56:	88 c2                	mov    dl,al
c000ea58:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea5e:	83 e0 df             	and    eax,0xffffffdf
c000ea61:	09 d0                	or     eax,edx
c000ea63:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea69:	83 c4 1c             	add    esp,0x1c
c000ea6c:	5b                   	pop    ebx
c000ea6d:	5e                   	pop    esi
c000ea6e:	5f                   	pop    edi
c000ea6f:	5d                   	pop    ebp
c000ea70:	c3                   	ret    
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	68 00 02 00 00       	push   0x200
c000ea79:	e8 f8 9d 00 00       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c000ea7e:	83 c4 10             	add    esp,0x10
c000ea81:	83 e0 01             	and    eax,0x1
c000ea84:	88 c2                	mov    dl,al
c000ea86:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea8c:	83 e0 fe             	and    eax,0xfffffffe
c000ea8f:	09 d0                	or     eax,edx
c000ea91:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea97:	e9 1c ff ff ff       	jmp    c000e9b8 <Computer::detectFeatures()+0x126>

c000ea9c <Computer::displayFeatures()>:
c000ea9c:	53                   	push   ebx
c000ea9d:	83 ec 14             	sub    esp,0x14
c000eaa0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaa4:	68 b9 98 02 c0       	push   0xc00298b9
c000eaa9:	e8 5b 40 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000eaae:	83 c4 10             	add    esp,0x10
c000eab1:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eab8:	0f 85 73 02 00 00    	jne    c000ed31 <Computer::displayFeatures()+0x295>
c000eabe:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000eac3:	83 ec 08             	sub    esp,0x8
c000eac6:	50                   	push   eax
c000eac7:	68 cc 98 02 c0       	push   0xc00298cc
c000eacc:	e8 38 40 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ead1:	83 c4 10             	add    esp,0x10
c000ead4:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eadb:	0f 85 8c 02 00 00    	jne    c000ed6d <Computer::displayFeatures()+0x2d1>
c000eae1:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000eae6:	83 ec 08             	sub    esp,0x8
c000eae9:	50                   	push   eax
c000eaea:	68 dd 98 02 c0       	push   0xc00298dd
c000eaef:	e8 15 40 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000eaf4:	83 c4 10             	add    esp,0x10
c000eaf7:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eafe:	0f 85 5f 02 00 00    	jne    c000ed63 <Computer::displayFeatures()+0x2c7>
c000eb04:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000eb09:	83 ec 08             	sub    esp,0x8
c000eb0c:	50                   	push   eax
c000eb0d:	68 ee 98 02 c0       	push   0xc00298ee
c000eb12:	e8 f2 3f 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000eb17:	83 c4 10             	add    esp,0x10
c000eb1a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb21:	0f 85 32 02 00 00    	jne    c000ed59 <Computer::displayFeatures()+0x2bd>
c000eb27:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000eb2c:	83 ec 08             	sub    esp,0x8
c000eb2f:	50                   	push   eax
c000eb30:	68 ff 98 02 c0       	push   0xc00298ff
c000eb35:	e8 cf 3f 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000eb3a:	83 c4 10             	add    esp,0x10
c000eb3d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb44:	0f 85 05 02 00 00    	jne    c000ed4f <Computer::displayFeatures()+0x2b3>
c000eb4a:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000eb4f:	83 ec 08             	sub    esp,0x8
c000eb52:	50                   	push   eax
c000eb53:	68 10 99 02 c0       	push   0xc0029910
c000eb58:	e8 ac 3f 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000eb5d:	83 c4 10             	add    esp,0x10
c000eb60:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb67:	0f 85 d8 01 00 00    	jne    c000ed45 <Computer::displayFeatures()+0x2a9>
c000eb6d:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000eb72:	83 ec 08             	sub    esp,0x8
c000eb75:	50                   	push   eax
c000eb76:	68 21 99 02 c0       	push   0xc0029921
c000eb7b:	e8 89 3f 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb8a:	0f 85 ab 01 00 00    	jne    c000ed3b <Computer::displayFeatures()+0x29f>
c000eb90:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000eb95:	83 ec 08             	sub    esp,0x8
c000eb98:	50                   	push   eax
c000eb99:	68 32 99 02 c0       	push   0xc0029932
c000eb9e:	e8 66 3f 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebad:	0f 88 1b 02 00 00    	js     c000edce <Computer::displayFeatures()+0x332>
c000ebb3:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ebb8:	83 ec 08             	sub    esp,0x8
c000ebbb:	50                   	push   eax
c000ebbc:	68 43 99 02 c0       	push   0xc0029943
c000ebc1:	e8 43 3f 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ebc6:	83 c4 10             	add    esp,0x10
c000ebc9:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd0:	0f 85 a1 01 00 00    	jne    c000ed77 <Computer::displayFeatures()+0x2db>
c000ebd6:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ebdb:	83 ec 08             	sub    esp,0x8
c000ebde:	50                   	push   eax
c000ebdf:	68 54 99 02 c0       	push   0xc0029954
c000ebe4:	e8 20 3f 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ebe9:	83 c4 10             	add    esp,0x10
c000ebec:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf3:	0f 85 cb 01 00 00    	jne    c000edc4 <Computer::displayFeatures()+0x328>
c000ebf9:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ebfe:	83 ec 08             	sub    esp,0x8
c000ec01:	50                   	push   eax
c000ec02:	68 65 99 02 c0       	push   0xc0029965
c000ec07:	e8 fd 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ec0c:	83 c4 10             	add    esp,0x10
c000ec0f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec16:	0f 85 9e 01 00 00    	jne    c000edba <Computer::displayFeatures()+0x31e>
c000ec1c:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ec21:	83 ec 08             	sub    esp,0x8
c000ec24:	50                   	push   eax
c000ec25:	68 76 99 02 c0       	push   0xc0029976
c000ec2a:	e8 da 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ec2f:	83 c4 10             	add    esp,0x10
c000ec32:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec39:	0f 85 71 01 00 00    	jne    c000edb0 <Computer::displayFeatures()+0x314>
c000ec3f:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ec44:	83 ec 08             	sub    esp,0x8
c000ec47:	50                   	push   eax
c000ec48:	68 87 99 02 c0       	push   0xc0029987
c000ec4d:	e8 b7 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ec52:	83 c4 10             	add    esp,0x10
c000ec55:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec5c:	0f 85 44 01 00 00    	jne    c000eda6 <Computer::displayFeatures()+0x30a>
c000ec62:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ec67:	83 ec 08             	sub    esp,0x8
c000ec6a:	50                   	push   eax
c000ec6b:	68 98 99 02 c0       	push   0xc0029998
c000ec70:	e8 94 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ec75:	83 c4 10             	add    esp,0x10
c000ec78:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec7f:	0f 85 17 01 00 00    	jne    c000ed9c <Computer::displayFeatures()+0x300>
c000ec85:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ec8a:	83 ec 08             	sub    esp,0x8
c000ec8d:	50                   	push   eax
c000ec8e:	68 a9 99 02 c0       	push   0xc00299a9
c000ec93:	e8 71 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ec98:	83 c4 10             	add    esp,0x10
c000ec9b:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca2:	0f 85 ea 00 00 00    	jne    c000ed92 <Computer::displayFeatures()+0x2f6>
c000eca8:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ecad:	83 ec 08             	sub    esp,0x8
c000ecb0:	50                   	push   eax
c000ecb1:	68 ba 99 02 c0       	push   0xc00299ba
c000ecb6:	e8 4e 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ecbb:	83 c4 10             	add    esp,0x10
c000ecbe:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecc5:	0f 88 0d 01 00 00    	js     c000edd8 <Computer::displayFeatures()+0x33c>
c000eccb:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ecd0:	83 ec 08             	sub    esp,0x8
c000ecd3:	50                   	push   eax
c000ecd4:	68 cb 99 02 c0       	push   0xc00299cb
c000ecd9:	e8 2b 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ecde:	83 c4 10             	add    esp,0x10
c000ece1:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ece8:	0f 85 9a 00 00 00    	jne    c000ed88 <Computer::displayFeatures()+0x2ec>
c000ecee:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ecf3:	83 ec 08             	sub    esp,0x8
c000ecf6:	50                   	push   eax
c000ecf7:	68 dc 99 02 c0       	push   0xc00299dc
c000ecfc:	e8 08 3e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ed01:	83 c4 10             	add    esp,0x10
c000ed04:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed0b:	75 74                	jne    c000ed81 <Computer::displayFeatures()+0x2e5>
c000ed0d:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c000ed12:	83 ec 08             	sub    esp,0x8
c000ed15:	50                   	push   eax
c000ed16:	68 ed 99 02 c0       	push   0xc00299ed
c000ed1b:	e8 e9 3d 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ed20:	c7 44 24 20 bf b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b2bf
c000ed28:	83 c4 18             	add    esp,0x18
c000ed2b:	5b                   	pop    ebx
c000ed2c:	e9 d8 3d 00 00       	jmp    c0012b09 <Dbg::kprintf(char const*, ...)>
c000ed31:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed36:	e9 88 fd ff ff       	jmp    c000eac3 <Computer::displayFeatures()+0x27>
c000ed3b:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed40:	e9 50 fe ff ff       	jmp    c000eb95 <Computer::displayFeatures()+0xf9>
c000ed45:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed4a:	e9 23 fe ff ff       	jmp    c000eb72 <Computer::displayFeatures()+0xd6>
c000ed4f:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed54:	e9 f6 fd ff ff       	jmp    c000eb4f <Computer::displayFeatures()+0xb3>
c000ed59:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed5e:	e9 c9 fd ff ff       	jmp    c000eb2c <Computer::displayFeatures()+0x90>
c000ed63:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed68:	e9 9c fd ff ff       	jmp    c000eb09 <Computer::displayFeatures()+0x6d>
c000ed6d:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed72:	e9 6f fd ff ff       	jmp    c000eae6 <Computer::displayFeatures()+0x4a>
c000ed77:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed7c:	e9 5a fe ff ff       	jmp    c000ebdb <Computer::displayFeatures()+0x13f>
c000ed81:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed86:	eb 8a                	jmp    c000ed12 <Computer::displayFeatures()+0x276>
c000ed88:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed8d:	e9 61 ff ff ff       	jmp    c000ecf3 <Computer::displayFeatures()+0x257>
c000ed92:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000ed97:	e9 11 ff ff ff       	jmp    c000ecad <Computer::displayFeatures()+0x211>
c000ed9c:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000eda1:	e9 e4 fe ff ff       	jmp    c000ec8a <Computer::displayFeatures()+0x1ee>
c000eda6:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000edab:	e9 b7 fe ff ff       	jmp    c000ec67 <Computer::displayFeatures()+0x1cb>
c000edb0:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000edb5:	e9 8a fe ff ff       	jmp    c000ec44 <Computer::displayFeatures()+0x1a8>
c000edba:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000edbf:	e9 5d fe ff ff       	jmp    c000ec21 <Computer::displayFeatures()+0x185>
c000edc4:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000edc9:	e9 30 fe ff ff       	jmp    c000ebfe <Computer::displayFeatures()+0x162>
c000edce:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000edd3:	e9 e0 fd ff ff       	jmp    c000ebb8 <Computer::displayFeatures()+0x11c>
c000edd8:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c000eddd:	e9 ee fe ff ff       	jmp    c000ecd0 <Computer::displayFeatures()+0x234>

c000ede2 <Computer::rdmsr(unsigned int)>:
c000ede2:	83 ec 0c             	sub    esp,0xc
c000ede5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ede9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf0:	74 0a                	je     c000edfc <Computer::rdmsr(unsigned int)+0x1a>
c000edf2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edf6:	0f 32                	rdmsr  
c000edf8:	83 c4 0c             	add    esp,0xc
c000edfb:	c3                   	ret    
c000edfc:	83 ec 0c             	sub    esp,0xc
c000edff:	68 fe 99 02 c0       	push   0xc00299fe
c000ee04:	e8 e4 b1 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000ee09:	83 c4 10             	add    esp,0x10
c000ee0c:	eb e4                	jmp    c000edf2 <Computer::rdmsr(unsigned int)+0x10>

c000ee0e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee0e:	57                   	push   edi
c000ee0f:	56                   	push   esi
c000ee10:	52                   	push   edx
c000ee11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee15:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee19:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee1d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee24:	74 0e                	je     c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee2a:	89 f0                	mov    eax,esi
c000ee2c:	89 fa                	mov    edx,edi
c000ee2e:	0f 30                	wrmsr  
c000ee30:	58                   	pop    eax
c000ee31:	5e                   	pop    esi
c000ee32:	5f                   	pop    edi
c000ee33:	c3                   	ret    
c000ee34:	83 ec 0c             	sub    esp,0xc
c000ee37:	68 04 9a 02 c0       	push   0xc0029a04
c000ee3c:	e8 ac b1 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000ee41:	83 c4 10             	add    esp,0x10
c000ee44:	eb e0                	jmp    c000ee26 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee46 <Computer::nmiEnabled()>:
c000ee46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee4a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee50:	c3                   	ret    
c000ee51:	90                   	nop

c000ee52 <Computer::readCMOS(unsigned char)>:
c000ee52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee56:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee5d:	19 c0                	sbb    eax,eax
c000ee5f:	83 e0 80             	and    eax,0xffffff80
c000ee62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee66:	e6 70                	out    0x70,al
c000ee68:	e4 71                	in     al,0x71
c000ee6a:	c3                   	ret    
c000ee6b:	90                   	nop

c000ee6c <Computer::enableNMI(bool)>:
c000ee6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee74:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee7a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee82:	eb ce                	jmp    c000ee52 <Computer::readCMOS(unsigned char)>

c000ee84 <Computer::open(int, int, void*)>:
c000ee84:	56                   	push   esi
c000ee85:	53                   	push   ebx
c000ee86:	83 ec 10             	sub    esp,0x10
c000ee89:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee8d:	f6 05 c0 da 02 c0 04 	test   BYTE PTR ds:0xc002dac0,0x4
c000ee94:	68 68 12 00 00       	push   0x1268
c000ee99:	0f 94 05 e4 c9 02 c0 	sete   BYTE PTR ds:0xc002c9e4
c000eea0:	e8 95 09 00 00       	call   c000f83a <malloc>
c000eea5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eea8:	89 c6                	mov    esi,eax
c000eeaa:	e8 97 8e 00 00       	call   c0017d46 <ACPI::ACPI()>
c000eeaf:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eeb5:	58                   	pop    eax
c000eeb6:	5a                   	pop    edx
c000eeb7:	56                   	push   esi
c000eeb8:	53                   	push   ebx
c000eeb9:	e8 72 50 00 00       	call   c0013f30 <Device::addChild(Device*)>
c000eebe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec1:	e8 cc f9 ff ff       	call   c000e892 <Computer::detectFeatures()>
c000eec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec9:	e8 ce fb ff ff       	call   c000ea9c <Computer::displayFeatures()>
c000eece:	59                   	pop    ecx
c000eecf:	5e                   	pop    esi
c000eed0:	6a 01                	push   0x1
c000eed2:	53                   	push   ebx
c000eed3:	e8 94 ff ff ff       	call   c000ee6c <Computer::enableNMI(bool)>
c000eed8:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eedf:	e8 56 09 00 00       	call   c000f83a <malloc>
c000eee4:	89 04 24             	mov    DWORD PTR [esp],eax
c000eee7:	89 c6                	mov    esi,eax
c000eee9:	e8 40 9a 00 00       	call   c001892e <CPU::CPU()>
c000eeee:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eef4:	58                   	pop    eax
c000eef5:	5a                   	pop    edx
c000eef6:	56                   	push   esi
c000eef7:	53                   	push   ebx
c000eef8:	e8 33 50 00 00       	call   c0013f30 <Device::addChild(Device*)>
c000eefd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef03:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef09:	6a 00                	push   0x0
c000ef0b:	6a 00                	push   0x0
c000ef0d:	50                   	push   eax
c000ef0e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef11:	83 c4 20             	add    esp,0x20
c000ef14:	e8 9d 55 00 00       	call   c00144b6 <setupFPU()>
c000ef19:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef1f:	85 c0                	test   eax,eax
c000ef21:	74 1f                	je     c000ef42 <Computer::open(int, int, void*)+0xbe>
c000ef23:	83 ec 08             	sub    esp,0x8
c000ef26:	50                   	push   eax
c000ef27:	53                   	push   ebx
c000ef28:	e8 03 50 00 00       	call   c0013f30 <Device::addChild(Device*)>
c000ef2d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef33:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef35:	6a 00                	push   0x0
c000ef37:	6a 00                	push   0x0
c000ef39:	6a 00                	push   0x0
c000ef3b:	50                   	push   eax
c000ef3c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef3f:	83 c4 20             	add    esp,0x20
c000ef42:	83 ec 0c             	sub    esp,0xc
c000ef45:	68 4a e6 00 c0       	push   0xc000e64a
c000ef4a:	e8 39 e9 00 00       	call   c001d888 <setupMultitasking(void (*)())>
c000ef4f:	83 c4 14             	add    esp,0x14
c000ef52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef57:	5b                   	pop    ebx
c000ef58:	5e                   	pop    esi
c000ef59:	c3                   	ret    

c000ef5a <Computer::disableNMI()>:
c000ef5a:	6a 00                	push   0x0
c000ef5c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef60:	e8 07 ff ff ff       	call   c000ee6c <Computer::enableNMI(bool)>
c000ef65:	58                   	pop    eax
c000ef66:	5a                   	pop    edx
c000ef67:	c3                   	ret    

c000ef68 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef6c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef73:	19 c0                	sbb    eax,eax
c000ef75:	83 e0 80             	and    eax,0xffffff80
c000ef78:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef7c:	e6 70                	out    0x70,al
c000ef7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef82:	e6 71                	out    0x71,al
c000ef84:	c3                   	ret    
c000ef85:	90                   	nop

c000ef86 <Computer::handleNMI()>:
c000ef86:	56                   	push   esi
c000ef87:	53                   	push   ebx
c000ef88:	83 ec 10             	sub    esp,0x10
c000ef8b:	e4 92                	in     al,0x92
c000ef8d:	89 c6                	mov    esi,eax
c000ef8f:	e4 61                	in     al,0x61
c000ef91:	68 0a 9a 02 c0       	push   0xc0029a0a
c000ef96:	88 c3                	mov    bl,al
c000ef98:	e8 6c 3b 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ef9d:	83 c4 10             	add    esp,0x10
c000efa0:	83 e6 10             	and    esi,0x10
c000efa3:	75 0d                	jne    c000efb2 <Computer::handleNMI()+0x2c>
c000efa5:	f6 c3 40             	test   bl,0x40
c000efa8:	75 1d                	jne    c000efc7 <Computer::handleNMI()+0x41>
c000efaa:	84 db                	test   bl,bl
c000efac:	78 2d                	js     c000efdb <Computer::handleNMI()+0x55>
c000efae:	58                   	pop    eax
c000efaf:	5b                   	pop    ebx
c000efb0:	5e                   	pop    esi
c000efb1:	c3                   	ret    
c000efb2:	83 ec 0c             	sub    esp,0xc
c000efb5:	68 1b 9a 02 c0       	push   0xc0029a1b
c000efba:	e8 2e b0 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000efbf:	83 c4 10             	add    esp,0x10
c000efc2:	f6 c3 40             	test   bl,0x40
c000efc5:	74 e3                	je     c000efaa <Computer::handleNMI()+0x24>
c000efc7:	83 ec 0c             	sub    esp,0xc
c000efca:	68 28 9a 02 c0       	push   0xc0029a28
c000efcf:	e8 19 b0 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000efd4:	83 c4 10             	add    esp,0x10
c000efd7:	84 db                	test   bl,bl
c000efd9:	79 d3                	jns    c000efae <Computer::handleNMI()+0x28>
c000efdb:	c7 44 24 10 32 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a32
c000efe3:	5a                   	pop    edx
c000efe4:	5b                   	pop    ebx
c000efe5:	5e                   	pop    esi
c000efe6:	e9 02 b0 00 00       	jmp    c0019fed <Krnl::panic(char const*)>
c000efeb:	90                   	nop

c000efec <Computer::setDiskActivityLight(int, bool)>:
c000efec:	56                   	push   esi
c000efed:	53                   	push   ebx
c000efee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eff7:	77 1b                	ja     c000f014 <Computer::setDiskActivityLight(int, bool)+0x28>
c000eff9:	e4 92                	in     al,0x92
c000effb:	bb 40 00 00 00       	mov    ebx,0x40
c000f000:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f004:	89 da                	mov    edx,ebx
c000f006:	d3 e2                	shl    edx,cl
c000f008:	89 f1                	mov    ecx,esi
c000f00a:	f7 d2                	not    edx
c000f00c:	d3 e3                	shl    ebx,cl
c000f00e:	21 d0                	and    eax,edx
c000f010:	09 d8                	or     eax,ebx
c000f012:	e6 92                	out    0x92,al
c000f014:	5b                   	pop    ebx
c000f015:	5e                   	pop    esi
c000f016:	c3                   	ret    
c000f017:	90                   	nop

c000f018 <GDTEntry::setBase(unsigned int)>:
c000f018:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f01c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f020:	89 c1                	mov    ecx,eax
c000f022:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f026:	c1 e9 10             	shr    ecx,0x10
c000f029:	c1 e8 18             	shr    eax,0x18
c000f02c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f02f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f032:	c3                   	ret    
c000f033:	90                   	nop

c000f034 <GDTEntry::setLimit(unsigned int)>:
c000f034:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f03f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f042:	83 e2 f0             	and    edx,0xfffffff0
c000f045:	c1 e8 10             	shr    eax,0x10
c000f048:	83 e0 0f             	and    eax,0xf
c000f04b:	09 d0                	or     eax,edx
c000f04d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f050:	c3                   	ret    
c000f051:	90                   	nop

c000f052 <GDT::GDT()>:
c000f052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f056:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f066:	90                   	nop
c000f067:	c3                   	ret    

c000f068 <GDT::addEntry(GDTEntry)>:
c000f068:	53                   	push   ebx
c000f069:	83 ec 0c             	sub    esp,0xc
c000f06c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f070:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f072:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f079:	52                   	push   edx
c000f07a:	50                   	push   eax
c000f07b:	68 6c 9a 02 c0       	push   0xc0029a6c
c000f080:	e8 84 3a 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000f085:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f087:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f08b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f08f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f093:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f097:	8d 50 01             	lea    edx,[eax+0x1]
c000f09a:	c1 e0 03             	shl    eax,0x3
c000f09d:	89 13                	mov    DWORD PTR [ebx],edx
c000f09f:	83 c4 18             	add    esp,0x18
c000f0a2:	5b                   	pop    ebx
c000f0a3:	c3                   	ret    

c000f0a4 <GDT::getNumberOfEntries()>:
c000f0a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0aa:	c3                   	ret    
c000f0ab:	90                   	nop

c000f0ac <GDT::flush()>:
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b2:	83 c0 04             	add    eax,0x4
c000f0b5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0bc:	a3 b2 da 02 c0       	mov    ds:0xc002dab2,eax
c000f0c1:	66 89 15 b0 da 02 c0 	mov    WORD PTR ds:0xc002dab0,dx
c000f0c8:	e9 7b 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0cd:	90                   	nop

c000f0ce <GDT::setup()>:
c000f0ce:	55                   	push   ebp
c000f0cf:	57                   	push   edi
c000f0d0:	56                   	push   esi
c000f0d1:	53                   	push   ebx
c000f0d2:	83 ec 3c             	sub    esp,0x3c
c000f0d5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0d9:	6a 00                	push   0x0
c000f0db:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0df:	53                   	push   ebx
c000f0e0:	e8 33 ff ff ff       	call   c000f018 <GDTEntry::setBase(unsigned int)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 47 ff ff ff       	call   c000f034 <GDTEntry::setLimit(unsigned int)>
c000f0ed:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0f5:	6a 00                	push   0x0
c000f0f7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f0fb:	53                   	push   ebx
c000f0fc:	e8 17 ff ff ff       	call   c000f018 <GDTEntry::setBase(unsigned int)>
c000f101:	68 ff ff ff 00       	push   0xffffff
c000f106:	53                   	push   ebx
c000f107:	e8 28 ff ff ff       	call   c000f034 <GDTEntry::setLimit(unsigned int)>
c000f10c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f110:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f115:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f11a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f11e:	83 c4 20             	add    esp,0x20
c000f121:	6a 00                	push   0x0
c000f123:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f127:	53                   	push   ebx
c000f128:	e8 eb fe ff ff       	call   c000f018 <GDTEntry::setBase(unsigned int)>
c000f12d:	68 ff ff ff 00       	push   0xffffff
c000f132:	53                   	push   ebx
c000f133:	e8 fc fe ff ff       	call   c000f034 <GDTEntry::setLimit(unsigned int)>
c000f138:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f13c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f140:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f144:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f148:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f14c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f151:	0d 00 92 c0 00       	or     eax,0xc09200
c000f156:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f15a:	89 d8                	mov    eax,ebx
c000f15c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f160:	80 cc 60             	or     ah,0x60
c000f163:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f167:	83 c4 0c             	add    esp,0xc
c000f16a:	89 f8                	mov    eax,edi
c000f16c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f170:	80 cc 60             	or     ah,0x60
c000f173:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f177:	89 c7                	mov    edi,eax
c000f179:	55                   	push   ebp
c000f17a:	e8 e9 fe ff ff       	call   c000f068 <GDT::addEntry(GDTEntry)>
c000f17f:	83 c4 0c             	add    esp,0xc
c000f182:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f186:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18a:	55                   	push   ebp
c000f18b:	e8 d8 fe ff ff       	call   c000f068 <GDT::addEntry(GDTEntry)>
c000f190:	83 c4 0c             	add    esp,0xc
c000f193:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f197:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19b:	55                   	push   ebp
c000f19c:	e8 c7 fe ff ff       	call   c000f068 <GDT::addEntry(GDTEntry)>
c000f1a1:	83 c4 0c             	add    esp,0xc
c000f1a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ac:	53                   	push   ebx
c000f1ad:	51                   	push   ecx
c000f1ae:	55                   	push   ebp
c000f1af:	e8 b4 fe ff ff       	call   c000f068 <GDT::addEntry(GDTEntry)>
c000f1b4:	83 c4 0c             	add    esp,0xc
c000f1b7:	57                   	push   edi
c000f1b8:	56                   	push   esi
c000f1b9:	55                   	push   ebp
c000f1ba:	e8 a9 fe ff ff       	call   c000f068 <GDT::addEntry(GDTEntry)>
c000f1bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c2:	e8 e5 fe ff ff       	call   c000f0ac <GDT::flush()>
c000f1c7:	83 c4 4c             	add    esp,0x4c
c000f1ca:	5b                   	pop    ebx
c000f1cb:	5e                   	pop    esi
c000f1cc:	5f                   	pop    edi
c000f1cd:	5d                   	pop    ebp
c000f1ce:	c3                   	ret    

c000f1cf <idleFunction(void*)>:
c000f1cf:	53                   	push   ebx
c000f1d0:	83 ec 08             	sub    esp,0x8
c000f1d3:	e8 80 e4 00 00       	call   c001d658 <unlockScheduler()>
c000f1d8:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000f1dd:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e3:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1ea:	74 3c                	je     c000f228 <idleFunction(void*)+0x59>
c000f1ec:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f3:	74 33                	je     c000f228 <idleFunction(void*)+0x59>
c000f1f5:	31 db                	xor    ebx,ebx
c000f1f7:	52                   	push   edx
c000f1f8:	52                   	push   edx
c000f1f9:	68 e1 00 00 00       	push   0xe1
c000f1fe:	50                   	push   eax
c000f1ff:	e8 de fb ff ff       	call   c000ede2 <Computer::rdmsr(unsigned int)>
c000f204:	53                   	push   ebx
c000f205:	83 e0 02             	and    eax,0x2
c000f208:	50                   	push   eax
c000f209:	68 e1 00 00 00       	push   0xe1
c000f20e:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c000f214:	e8 f5 fb ff ff       	call   c000ee0e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f219:	83 c4 20             	add    esp,0x20
c000f21c:	e8 5e 10 ff ff       	call   c000027f <doTPAUSE>
c000f221:	e8 3a 8d 01 00       	call   c0027f60 <idleCommon()>
c000f226:	eb f4                	jmp    c000f21c <idleFunction(void*)+0x4d>
c000f228:	fb                   	sti    
c000f229:	f4                   	hlt    
c000f22a:	e8 31 8d 01 00       	call   c0027f60 <idleCommon()>
c000f22f:	eb f7                	jmp    c000f228 <idleFunction(void*)+0x59>
c000f231:	90                   	nop

c000f232 <IDTEntry::IDTEntry(bool)>:
c000f232:	83 ec 04             	sub    esp,0x4
c000f235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f239:	88 04 24             	mov    BYTE PTR [esp],al
c000f23c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f240:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24a:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f24e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f252:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f255:	83 e2 f0             	and    edx,0xfffffff0
c000f258:	83 ca 0e             	or     edx,0xe
c000f25b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f25e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f262:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f265:	83 e2 ef             	and    edx,0xffffffef
c000f268:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f26f:	74 04                	je     c000f275 <IDTEntry::IDTEntry(bool)+0x43>
c000f271:	b2 03                	mov    dl,0x3
c000f273:	eb 02                	jmp    c000f277 <IDTEntry::IDTEntry(bool)+0x45>
c000f275:	b2 00                	mov    dl,0x0
c000f277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f27b:	83 e2 03             	and    edx,0x3
c000f27e:	88 d1                	mov    cl,dl
c000f280:	c1 e1 05             	shl    ecx,0x5
c000f283:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f286:	83 e2 9f             	and    edx,0xffffff9f
c000f289:	09 ca                	or     edx,ecx
c000f28b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f28e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f292:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f295:	83 ca 80             	or     edx,0xffffff80
c000f298:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29b:	90                   	nop
c000f29c:	83 c4 04             	add    esp,0x4
c000f29f:	c3                   	ret    

c000f2a0 <IDTEntry::setOffset(unsigned int)>:
c000f2a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a8:	66 89 02             	mov    WORD PTR [edx],ax
c000f2ab:	c1 e8 10             	shr    eax,0x10
c000f2ae:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b2:	c3                   	ret    
c000f2b3:	90                   	nop

c000f2b4 <IDT::IDT()>:
c000f2b4:	90                   	nop
c000f2b5:	c3                   	ret    

c000f2b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2ba:	83 c0 30             	add    eax,0x30
c000f2bd:	c3                   	ret    

c000f2be <IDT::addEntry(IDTEntry, int)>:
c000f2be:	53                   	push   ebx
c000f2bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2d6:	5b                   	pop    ebx
c000f2d7:	c3                   	ret    

c000f2d8 <IDT::addEntry(int, void (*)(), bool)>:
c000f2d8:	53                   	push   ebx
c000f2d9:	83 ec 10             	sub    esp,0x10
c000f2dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e1:	50                   	push   eax
c000f2e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2e6:	53                   	push   ebx
c000f2e7:	e8 46 ff ff ff       	call   c000f232 <IDTEntry::IDTEntry(bool)>
c000f2ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f0:	53                   	push   ebx
c000f2f1:	e8 aa ff ff ff       	call   c000f2a0 <IDTEntry::setOffset(unsigned int)>
c000f2f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f2fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f306:	e8 b3 ff ff ff       	call   c000f2be <IDT::addEntry(IDTEntry, int)>
c000f30b:	83 c4 30             	add    esp,0x30
c000f30e:	5b                   	pop    ebx
c000f30f:	c3                   	ret    

c000f310 <IDT::flush()>:
c000f310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f314:	66 c7 05 b8 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002dab8,0x7ff
c000f31d:	a3 ba da 02 c0       	mov    ds:0xc002daba,eax
c000f322:	0f 01 1d b8 da 02 c0 	lidtd  ds:0xc002dab8
c000f329:	c3                   	ret    

c000f32a <IDT::setup()>:
c000f32a:	57                   	push   edi
c000f32b:	56                   	push   esi
c000f32c:	53                   	push   ebx
c000f32d:	83 ec 10             	sub    esp,0x10
c000f330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f334:	6a 00                	push   0x0
c000f336:	68 68 04 00 c0       	push   0xc0000468
c000f33b:	6a 00                	push   0x0
c000f33d:	53                   	push   ebx
c000f33e:	e8 95 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f343:	6a 00                	push   0x0
c000f345:	68 78 04 00 c0       	push   0xc0000478
c000f34a:	6a 01                	push   0x1
c000f34c:	53                   	push   ebx
c000f34d:	e8 86 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f352:	83 c4 20             	add    esp,0x20
c000f355:	6a 00                	push   0x0
c000f357:	68 82 04 00 c0       	push   0xc0000482
c000f35c:	6a 02                	push   0x2
c000f35e:	53                   	push   ebx
c000f35f:	e8 74 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f364:	6a 00                	push   0x0
c000f366:	68 8c 04 00 c0       	push   0xc000048c
c000f36b:	6a 03                	push   0x3
c000f36d:	53                   	push   ebx
c000f36e:	e8 65 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f373:	83 c4 20             	add    esp,0x20
c000f376:	6a 00                	push   0x0
c000f378:	68 96 04 00 c0       	push   0xc0000496
c000f37d:	6a 04                	push   0x4
c000f37f:	53                   	push   ebx
c000f380:	e8 53 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f385:	6a 00                	push   0x0
c000f387:	68 a0 04 00 c0       	push   0xc00004a0
c000f38c:	6a 05                	push   0x5
c000f38e:	53                   	push   ebx
c000f38f:	e8 44 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f394:	83 c4 20             	add    esp,0x20
c000f397:	6a 00                	push   0x0
c000f399:	68 aa 04 00 c0       	push   0xc00004aa
c000f39e:	6a 06                	push   0x6
c000f3a0:	53                   	push   ebx
c000f3a1:	e8 32 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f3a6:	6a 00                	push   0x0
c000f3a8:	68 b4 04 00 c0       	push   0xc00004b4
c000f3ad:	6a 07                	push   0x7
c000f3af:	53                   	push   ebx
c000f3b0:	e8 23 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f3b5:	83 c4 20             	add    esp,0x20
c000f3b8:	6a 00                	push   0x0
c000f3ba:	68 be 04 00 c0       	push   0xc00004be
c000f3bf:	6a 08                	push   0x8
c000f3c1:	53                   	push   ebx
c000f3c2:	e8 11 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f3c7:	6a 00                	push   0x0
c000f3c9:	68 c6 04 00 c0       	push   0xc00004c6
c000f3ce:	6a 09                	push   0x9
c000f3d0:	53                   	push   ebx
c000f3d1:	e8 02 ff ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f3d6:	83 c4 20             	add    esp,0x20
c000f3d9:	6a 00                	push   0x0
c000f3db:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e0:	6a 0a                	push   0xa
c000f3e2:	53                   	push   ebx
c000f3e3:	e8 f0 fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f3e8:	6a 00                	push   0x0
c000f3ea:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ef:	6a 0b                	push   0xb
c000f3f1:	53                   	push   ebx
c000f3f2:	e8 e1 fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f3f7:	83 c4 20             	add    esp,0x20
c000f3fa:	6a 00                	push   0x0
c000f3fc:	68 e0 04 00 c0       	push   0xc00004e0
c000f401:	6a 0c                	push   0xc
c000f403:	53                   	push   ebx
c000f404:	e8 cf fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f409:	6a 00                	push   0x0
c000f40b:	68 e8 04 00 c0       	push   0xc00004e8
c000f410:	6a 0d                	push   0xd
c000f412:	53                   	push   ebx
c000f413:	e8 c0 fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f418:	83 c4 20             	add    esp,0x20
c000f41b:	6a 00                	push   0x0
c000f41d:	68 f0 04 00 c0       	push   0xc00004f0
c000f422:	6a 0e                	push   0xe
c000f424:	53                   	push   ebx
c000f425:	e8 ae fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f42a:	6a 00                	push   0x0
c000f42c:	68 f8 04 00 c0       	push   0xc00004f8
c000f431:	6a 0f                	push   0xf
c000f433:	53                   	push   ebx
c000f434:	e8 9f fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f439:	83 c4 20             	add    esp,0x20
c000f43c:	6a 00                	push   0x0
c000f43e:	68 02 05 00 c0       	push   0xc0000502
c000f443:	6a 10                	push   0x10
c000f445:	53                   	push   ebx
c000f446:	e8 8d fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f44b:	6a 00                	push   0x0
c000f44d:	68 0c 05 00 c0       	push   0xc000050c
c000f452:	6a 11                	push   0x11
c000f454:	53                   	push   ebx
c000f455:	e8 7e fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f45a:	83 c4 20             	add    esp,0x20
c000f45d:	6a 00                	push   0x0
c000f45f:	68 16 05 00 c0       	push   0xc0000516
c000f464:	6a 12                	push   0x12
c000f466:	53                   	push   ebx
c000f467:	e8 6c fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f46c:	6a 01                	push   0x1
c000f46e:	68 b0 05 00 c0       	push   0xc00005b0
c000f473:	6a 60                	push   0x60
c000f475:	53                   	push   ebx
c000f476:	e8 5d fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f47b:	83 c4 20             	add    esp,0x20
c000f47e:	6a 00                	push   0x0
c000f480:	68 b7 05 00 c0       	push   0xc00005b7
c000f485:	6a 20                	push   0x20
c000f487:	53                   	push   ebx
c000f488:	e8 4b fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f48d:	6a 00                	push   0x0
c000f48f:	68 a2 05 00 c0       	push   0xc00005a2
c000f494:	6a 21                	push   0x21
c000f496:	53                   	push   ebx
c000f497:	e8 3c fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f49c:	83 c4 20             	add    esp,0x20
c000f49f:	6a 00                	push   0x0
c000f4a1:	68 a9 05 00 c0       	push   0xc00005a9
c000f4a6:	6a 22                	push   0x22
c000f4a8:	53                   	push   ebx
c000f4a9:	e8 2a fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f4ae:	6a 00                	push   0x0
c000f4b0:	68 20 05 00 c0       	push   0xc0000520
c000f4b5:	6a 23                	push   0x23
c000f4b7:	53                   	push   ebx
c000f4b8:	e8 1b fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f4bd:	83 c4 20             	add    esp,0x20
c000f4c0:	6a 00                	push   0x0
c000f4c2:	68 2a 05 00 c0       	push   0xc000052a
c000f4c7:	6a 24                	push   0x24
c000f4c9:	53                   	push   ebx
c000f4ca:	e8 09 fe ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f4cf:	6a 00                	push   0x0
c000f4d1:	68 34 05 00 c0       	push   0xc0000534
c000f4d6:	6a 25                	push   0x25
c000f4d8:	53                   	push   ebx
c000f4d9:	e8 fa fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f4de:	83 c4 20             	add    esp,0x20
c000f4e1:	6a 00                	push   0x0
c000f4e3:	68 3e 05 00 c0       	push   0xc000053e
c000f4e8:	6a 26                	push   0x26
c000f4ea:	53                   	push   ebx
c000f4eb:	e8 e8 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f4f0:	6a 00                	push   0x0
c000f4f2:	68 48 05 00 c0       	push   0xc0000548
c000f4f7:	6a 27                	push   0x27
c000f4f9:	53                   	push   ebx
c000f4fa:	e8 d9 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f4ff:	83 c4 20             	add    esp,0x20
c000f502:	6a 00                	push   0x0
c000f504:	68 52 05 00 c0       	push   0xc0000552
c000f509:	6a 28                	push   0x28
c000f50b:	53                   	push   ebx
c000f50c:	e8 c7 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f511:	6a 00                	push   0x0
c000f513:	68 5c 05 00 c0       	push   0xc000055c
c000f518:	6a 29                	push   0x29
c000f51a:	53                   	push   ebx
c000f51b:	e8 b8 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f520:	83 c4 20             	add    esp,0x20
c000f523:	6a 00                	push   0x0
c000f525:	68 66 05 00 c0       	push   0xc0000566
c000f52a:	6a 2a                	push   0x2a
c000f52c:	53                   	push   ebx
c000f52d:	e8 a6 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f532:	6a 00                	push   0x0
c000f534:	68 70 05 00 c0       	push   0xc0000570
c000f539:	6a 2b                	push   0x2b
c000f53b:	53                   	push   ebx
c000f53c:	e8 97 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f541:	83 c4 20             	add    esp,0x20
c000f544:	6a 00                	push   0x0
c000f546:	68 7a 05 00 c0       	push   0xc000057a
c000f54b:	6a 2c                	push   0x2c
c000f54d:	53                   	push   ebx
c000f54e:	e8 85 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f553:	6a 00                	push   0x0
c000f555:	68 84 05 00 c0       	push   0xc0000584
c000f55a:	6a 2d                	push   0x2d
c000f55c:	53                   	push   ebx
c000f55d:	e8 76 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f562:	83 c4 20             	add    esp,0x20
c000f565:	6a 00                	push   0x0
c000f567:	68 8e 05 00 c0       	push   0xc000058e
c000f56c:	6a 2e                	push   0x2e
c000f56e:	53                   	push   ebx
c000f56f:	e8 64 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f574:	6a 00                	push   0x0
c000f576:	68 98 05 00 c0       	push   0xc0000598
c000f57b:	6a 2f                	push   0x2f
c000f57d:	53                   	push   ebx
c000f57e:	e8 55 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f583:	83 c4 20             	add    esp,0x20
c000f586:	6a 00                	push   0x0
c000f588:	68 ed 05 00 c0       	push   0xc00005ed
c000f58d:	6a 30                	push   0x30
c000f58f:	53                   	push   ebx
c000f590:	e8 43 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f595:	6a 00                	push   0x0
c000f597:	68 f7 05 00 c0       	push   0xc00005f7
c000f59c:	6a 31                	push   0x31
c000f59e:	53                   	push   ebx
c000f59f:	e8 34 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f5a4:	83 c4 20             	add    esp,0x20
c000f5a7:	6a 00                	push   0x0
c000f5a9:	68 01 06 00 c0       	push   0xc0000601
c000f5ae:	6a 32                	push   0x32
c000f5b0:	53                   	push   ebx
c000f5b1:	e8 22 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f5b6:	6a 00                	push   0x0
c000f5b8:	68 0b 06 00 c0       	push   0xc000060b
c000f5bd:	6a 33                	push   0x33
c000f5bf:	53                   	push   ebx
c000f5c0:	e8 13 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f5c5:	83 c4 20             	add    esp,0x20
c000f5c8:	6a 00                	push   0x0
c000f5ca:	68 15 06 00 c0       	push   0xc0000615
c000f5cf:	6a 34                	push   0x34
c000f5d1:	53                   	push   ebx
c000f5d2:	e8 01 fd ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f5d7:	6a 00                	push   0x0
c000f5d9:	68 1f 06 00 c0       	push   0xc000061f
c000f5de:	6a 35                	push   0x35
c000f5e0:	53                   	push   ebx
c000f5e1:	e8 f2 fc ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f5e6:	83 c4 20             	add    esp,0x20
c000f5e9:	6a 00                	push   0x0
c000f5eb:	68 29 06 00 c0       	push   0xc0000629
c000f5f0:	6a 36                	push   0x36
c000f5f2:	53                   	push   ebx
c000f5f3:	e8 e0 fc ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f5f8:	6a 00                	push   0x0
c000f5fa:	68 33 06 00 c0       	push   0xc0000633
c000f5ff:	6a 37                	push   0x37
c000f601:	53                   	push   ebx
c000f602:	e8 d1 fc ff ff       	call   c000f2d8 <IDT::addEntry(int, void (*)(), bool)>
c000f607:	83 c4 20             	add    esp,0x20
c000f60a:	e8 9a 26 00 00       	call   c0011ca9 <Virt::getAKernelVAS()>
c000f60f:	52                   	push   edx
c000f610:	6a 03                	push   0x3
c000f612:	6a 02                	push   0x2
c000f614:	50                   	push   eax
c000f615:	e8 ca 2c 00 00       	call   c00122e4 <VAS::allocatePages(int, int)>
c000f61a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f621:	89 c6                	mov    esi,eax
c000f623:	e8 12 02 00 00       	call   c000f83a <malloc>
c000f628:	81 c6 00 20 00 00    	add    esi,0x2000
c000f62e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f631:	89 c7                	mov    edi,eax
c000f633:	e8 12 1e 00 00       	call   c001144a <TSS::TSS()>
c000f638:	83 c4 0c             	add    esp,0xc
c000f63b:	68 be 04 00 c0       	push   0xc00004be
c000f640:	56                   	push   esi
c000f641:	57                   	push   edi
c000f642:	e8 43 1e 00 00       	call   c001148a <TSS::setup(unsigned long, unsigned long)>
c000f647:	59                   	pop    ecx
c000f648:	89 c6                	mov    esi,eax
c000f64a:	5f                   	pop    edi
c000f64b:	6a 00                	push   0x0
c000f64d:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f651:	50                   	push   eax
c000f652:	e8 db fb ff ff       	call   c000f232 <IDTEntry::IDTEntry(bool)>
c000f657:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f65b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f660:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f667:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f66d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f671:	80 ce 05             	or     dh,0x5
c000f674:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f677:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f67b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f67f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f682:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f685:	e8 86 fc ff ff       	call   c000f310 <IDT::flush()>
c000f68a:	83 c4 20             	add    esp,0x20
c000f68d:	5b                   	pop    ebx
c000f68e:	5e                   	pop    esi
c000f68f:	5f                   	pop    edi
c000f690:	c3                   	ret    

c000f691 <sbrk>:
c000f691:	55                   	push   ebp
c000f692:	57                   	push   edi
c000f693:	56                   	push   esi
c000f694:	53                   	push   ebx
c000f695:	83 ec 1c             	sub    esp,0x1c
c000f698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f69c:	85 c0                	test   eax,eax
c000f69e:	74 3e                	je     c000f6de <sbrk+0x4d>
c000f6a0:	78 43                	js     c000f6e5 <sbrk+0x54>
c000f6a2:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c000f6a8:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6ae:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6b4:	83 e2 01             	and    edx,0x1
c000f6b7:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6bb:	8b 0d c8 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9c8
c000f6c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6c5:	05 ff 0f 00 00       	add    eax,0xfff
c000f6ca:	89 c2                	mov    edx,eax
c000f6cc:	78 2f                	js     c000f6fd <sbrk+0x6c>
c000f6ce:	c1 fa 0c             	sar    edx,0xc
c000f6d1:	89 d7                	mov    edi,edx
c000f6d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6d7:	be 00 00 00 00       	mov    esi,0x0
c000f6dc:	eb 36                	jmp    c000f714 <sbrk+0x83>
c000f6de:	a1 c8 c9 02 c0       	mov    eax,ds:0xc002c9c8
c000f6e3:	eb 74                	jmp    c000f759 <sbrk+0xc8>
c000f6e5:	83 ec 08             	sub    esp,0x8
c000f6e8:	50                   	push   eax
c000f6e9:	68 88 9a 02 c0       	push   0xc0029a88
c000f6ee:	e8 16 34 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000f6f3:	83 c4 10             	add    esp,0x10
c000f6f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6fb:	eb 5c                	jmp    c000f759 <sbrk+0xc8>
c000f6fd:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f703:	eb c9                	jmp    c000f6ce <sbrk+0x3d>
c000f705:	81 05 c8 c9 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c9c8,0x1000
c000f70f:	46                   	inc    esi
c000f710:	39 f7                	cmp    edi,esi
c000f712:	74 34                	je     c000f748 <sbrk+0xb7>
c000f714:	e8 90 25 00 00       	call   c0011ca9 <Virt::getAKernelVAS()>
c000f719:	89 c3                	mov    ebx,eax
c000f71b:	8b 2d c8 c9 02 c0    	mov    ebp,DWORD PTR ds:0xc002c9c8
c000f721:	e8 b1 07 00 00       	call   c000fed7 <Phys::allocatePage()>
c000f726:	68 01 04 00 00       	push   0x401
c000f72b:	55                   	push   ebp
c000f72c:	50                   	push   eax
c000f72d:	53                   	push   ebx
c000f72e:	e8 b1 2a 00 00       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f733:	83 c4 10             	add    esp,0x10
c000f736:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f73b:	74 c8                	je     c000f705 <sbrk+0x74>
c000f73d:	8b 1d c8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c8
c000f743:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f746:	eb bd                	jmp    c000f705 <sbrk+0x74>
c000f748:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f74d:	75 12                	jne    c000f761 <sbrk+0xd0>
c000f74f:	0f 20 d8             	mov    eax,cr3
c000f752:	0f 22 d8             	mov    cr3,eax
c000f755:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f759:	83 c4 1c             	add    esp,0x1c
c000f75c:	5b                   	pop    ebx
c000f75d:	5e                   	pop    esi
c000f75e:	5f                   	pop    edi
c000f75f:	5d                   	pop    ebp
c000f760:	c3                   	ret    
c000f761:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f765:	89 cb                	mov    ebx,ecx
c000f767:	c1 eb 0a             	shr    ebx,0xa
c000f76a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f770:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f77a:	c1 e0 0c             	shl    eax,0xc
c000f77d:	01 c8                	add    eax,ecx
c000f77f:	c1 e8 0a             	shr    eax,0xa
c000f782:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f787:	2d 00 00 40 00       	sub    eax,0x400000
c000f78c:	39 c3                	cmp    ebx,eax
c000f78e:	77 c5                	ja     c000f755 <sbrk+0xc4>
c000f790:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f793:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f799:	39 d8                	cmp    eax,ebx
c000f79b:	73 f3                	jae    c000f790 <sbrk+0xff>
c000f79d:	eb b6                	jmp    c000f755 <sbrk+0xc4>

c000f79f <mmap>:
c000f79f:	83 ec 18             	sub    esp,0x18
c000f7a2:	68 b8 9a 02 c0       	push   0xc0029ab8
c000f7a7:	e8 41 a8 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000f7ac:	b8 00 00 00 00       	mov    eax,0x0
c000f7b1:	83 c4 1c             	add    esp,0x1c
c000f7b4:	c3                   	ret    

c000f7b5 <munmap>:
c000f7b5:	83 ec 18             	sub    esp,0x18
c000f7b8:	68 bd 9a 02 c0       	push   0xc0029abd
c000f7bd:	e8 2b a8 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000f7c2:	b8 00 00 00 00       	mov    eax,0x0
c000f7c7:	83 c4 1c             	add    esp,0x1c
c000f7ca:	c3                   	ret    

c000f7cb <liballoc_lock()>:
c000f7cb:	83 ec 0c             	sub    esp,0xc
c000f7ce:	e8 83 de 00 00       	call   c001d656 <lockScheduler()>
c000f7d3:	b8 00 00 00 00       	mov    eax,0x0
c000f7d8:	83 c4 0c             	add    esp,0xc
c000f7db:	c3                   	ret    

c000f7dc <liballoc_unlock()>:
c000f7dc:	83 ec 0c             	sub    esp,0xc
c000f7df:	e8 74 de 00 00       	call   c001d658 <unlockScheduler()>
c000f7e4:	b8 00 00 00 00       	mov    eax,0x0
c000f7e9:	83 c4 0c             	add    esp,0xc
c000f7ec:	c3                   	ret    

c000f7ed <liballoc_alloc(int)>:
c000f7ed:	83 ec 0c             	sub    esp,0xc
c000f7f0:	e8 b4 24 00 00       	call   c0011ca9 <Virt::getAKernelVAS()>
c000f7f5:	83 ec 04             	sub    esp,0x4
c000f7f8:	6a 01                	push   0x1
c000f7fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7fe:	50                   	push   eax
c000f7ff:	e8 e0 2a 00 00       	call   c00122e4 <VAS::allocatePages(int, int)>
c000f804:	83 c4 1c             	add    esp,0x1c
c000f807:	c3                   	ret    

c000f808 <liballoc_free(void*, int)>:
c000f808:	83 ec 0c             	sub    esp,0xc
c000f80b:	e8 99 24 00 00       	call   c0011ca9 <Virt::getAKernelVAS()>
c000f810:	83 ec 08             	sub    esp,0x8
c000f813:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f817:	50                   	push   eax
c000f818:	e8 83 27 00 00       	call   c0011fa0 <VAS::freeAllocatedPages(unsigned long)>
c000f81d:	b8 00 00 00 00       	mov    eax,0x0
c000f822:	83 c4 1c             	add    esp,0x1c
c000f825:	c3                   	ret    

c000f826 <realloc>:
c000f826:	83 ec 14             	sub    esp,0x14
c000f829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f82d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f831:	e8 1e 1e ff ff       	call   c0001654 <dlrealloc>
c000f836:	83 c4 1c             	add    esp,0x1c
c000f839:	c3                   	ret    

c000f83a <malloc>:
c000f83a:	83 ec 18             	sub    esp,0x18
c000f83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f841:	e8 d1 18 ff ff       	call   c0001117 <dlmalloc>
c000f846:	83 c4 1c             	add    esp,0x1c
c000f849:	c3                   	ret    

c000f84a <free>:
c000f84a:	83 ec 18             	sub    esp,0x18
c000f84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f851:	e8 66 15 ff ff       	call   c0000dbc <dlfree>
c000f856:	83 c4 1c             	add    esp,0x1c
c000f859:	c3                   	ret    

c000f85a <rfree>:
c000f85a:	83 ec 18             	sub    esp,0x18
c000f85d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f861:	e8 56 15 ff ff       	call   c0000dbc <dlfree>
c000f866:	83 c4 1c             	add    esp,0x1c
c000f869:	c3                   	ret    

c000f86a <calloc>:
c000f86a:	56                   	push   esi
c000f86b:	53                   	push   ebx
c000f86c:	83 ec 10             	sub    esp,0x10
c000f86f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f873:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f878:	53                   	push   ebx
c000f879:	e8 bc ff ff ff       	call   c000f83a <malloc>
c000f87e:	89 c6                	mov    esi,eax
c000f880:	83 c4 0c             	add    esp,0xc
c000f883:	53                   	push   ebx
c000f884:	6a 00                	push   0x0
c000f886:	50                   	push   eax
c000f887:	e8 ec 0e ff ff       	call   c0000778 <memset>
c000f88c:	89 f0                	mov    eax,esi
c000f88e:	83 c4 14             	add    esp,0x14
c000f891:	5b                   	pop    ebx
c000f892:	5e                   	pop    esi
c000f893:	c3                   	ret    

c000f894 <hwTextMode_loadInData(VgaText*)>:
c000f894:	55                   	push   ebp
c000f895:	a1 e0 c9 02 c0       	mov    eax,ds:0xc002c9e0
c000f89a:	57                   	push   edi
c000f89b:	56                   	push   esi
c000f89c:	53                   	push   ebx
c000f89d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a1:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8a7:	85 d2                	test   edx,edx
c000f8a9:	7e 2f                	jle    c000f8da <hwTextMode_loadInData(VgaText*)+0x46>
c000f8ab:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b1:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8b4:	31 f6                	xor    esi,esi
c000f8b6:	29 fd                	sub    ebp,edi
c000f8b8:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8bb:	31 c0                	xor    eax,eax
c000f8bd:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c1:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8c5:	40                   	inc    eax
c000f8c6:	83 f8 50             	cmp    eax,0x50
c000f8c9:	75 f2                	jne    c000f8bd <hwTextMode_loadInData(VgaText*)+0x29>
c000f8cb:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d1:	46                   	inc    esi
c000f8d2:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8d8:	7f de                	jg     c000f8b8 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8da:	5b                   	pop    ebx
c000f8db:	5e                   	pop    esi
c000f8dc:	5f                   	pop    edi
c000f8dd:	5d                   	pop    ebp
c000f8de:	c3                   	ret    

c000f8df <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8df:	55                   	push   ebp
c000f8e0:	80 3d 40 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db40,0x0
c000f8e7:	57                   	push   edi
c000f8e8:	56                   	push   esi
c000f8e9:	53                   	push   ebx
c000f8ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8ee:	75 50                	jne    c000f940 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f0:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8f6:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f8fc:	8b 15 e0 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e0
c000f902:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f906:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f90c:	eb 0e                	jmp    c000f91c <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f90e:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f914:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f91a:	89 da                	mov    edx,ebx
c000f91c:	83 e5 0f             	and    ebp,0xf
c000f91f:	c1 e0 04             	shl    eax,0x4
c000f922:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f925:	0f b6 c0             	movzx  eax,al
c000f928:	41                   	inc    ecx
c000f929:	09 e8                	or     eax,ebp
c000f92b:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f92f:	c1 e0 08             	shl    eax,0x8
c000f932:	09 e8                	or     eax,ebp
c000f934:	39 fb                	cmp    ebx,edi
c000f936:	66 89 02             	mov    WORD PTR [edx],ax
c000f939:	75 d3                	jne    c000f90e <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f93b:	5b                   	pop    ebx
c000f93c:	5e                   	pop    esi
c000f93d:	5f                   	pop    edi
c000f93e:	5d                   	pop    ebp
c000f93f:	c3                   	ret    
c000f940:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f94a:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f954:	31 c0                	xor    eax,eax
c000f956:	bd 02 00 00 00       	mov    ebp,0x2
c000f95b:	eb 9f                	jmp    c000f8fc <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f95d <hwTextMode_showCursor(VgaText*, bool)>:
c000f95d:	56                   	push   esi
c000f95e:	80 3d 40 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db40,0x0
c000f965:	53                   	push   ebx
c000f966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f96a:	75 39                	jne    c000f9a5 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f96c:	84 c0                	test   al,al
c000f96e:	74 38                	je     c000f9a8 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f970:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f975:	b0 0a                	mov    al,0xa
c000f977:	89 da                	mov    edx,ebx
c000f979:	ee                   	out    dx,al
c000f97a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f97f:	89 ca                	mov    edx,ecx
c000f981:	ec                   	in     al,dx
c000f982:	b2 0f                	mov    dl,0xf
c000f984:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f988:	83 e0 c0             	and    eax,0xffffffc0
c000f98b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f991:	09 d0                	or     eax,edx
c000f993:	89 ca                	mov    edx,ecx
c000f995:	ee                   	out    dx,al
c000f996:	b0 0b                	mov    al,0xb
c000f998:	89 da                	mov    edx,ebx
c000f99a:	ee                   	out    dx,al
c000f99b:	89 ca                	mov    edx,ecx
c000f99d:	ec                   	in     al,dx
c000f99e:	83 e0 e0             	and    eax,0xffffffe0
c000f9a1:	83 c8 0f             	or     eax,0xf
c000f9a4:	ee                   	out    dx,al
c000f9a5:	5b                   	pop    ebx
c000f9a6:	5e                   	pop    esi
c000f9a7:	c3                   	ret    
c000f9a8:	b0 0a                	mov    al,0xa
c000f9aa:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9af:	ee                   	out    dx,al
c000f9b0:	b0 20                	mov    al,0x20
c000f9b2:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9b7:	ee                   	out    dx,al
c000f9b8:	5b                   	pop    ebx
c000f9b9:	5e                   	pop    esi
c000f9ba:	c3                   	ret    

c000f9bb <hwTextMode_update(VgaText*)>:
c000f9bb:	c3                   	ret    

c000f9bc <hwTextMode_updateCursor(VgaText*)>:
c000f9bc:	56                   	push   esi
c000f9bd:	80 3d 40 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db40,0x0
c000f9c4:	53                   	push   ebx
c000f9c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9c9:	75 3f                	jne    c000fa0a <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9cb:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d0:	b9 19 00 00 00       	mov    ecx,0x19
c000f9d5:	89 f2                	mov    edx,esi
c000f9d7:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9dd:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e3:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9e6:	c1 e1 04             	shl    ecx,0x4
c000f9e9:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9ef:	b0 0f                	mov    al,0xf
c000f9f1:	ee                   	out    dx,al
c000f9f2:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9f7:	88 c8                	mov    al,cl
c000f9f9:	89 da                	mov    edx,ebx
c000f9fb:	ee                   	out    dx,al
c000f9fc:	b0 0e                	mov    al,0xe
c000f9fe:	89 f2                	mov    edx,esi
c000fa00:	ee                   	out    dx,al
c000fa01:	89 c8                	mov    eax,ecx
c000fa03:	89 da                	mov    edx,ebx
c000fa05:	66 c1 e8 08          	shr    ax,0x8
c000fa09:	ee                   	out    dx,al
c000fa0a:	5b                   	pop    ebx
c000fa0b:	5e                   	pop    esi
c000fa0c:	c3                   	ret    

c000fa0d <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa11:	80 3d 40 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db40,0x0
c000fa18:	75 38                	jne    c000fa52 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa1a:	ba da 03 00 00       	mov    edx,0x3da
c000fa1f:	84 c0                	test   al,al
c000fa21:	75 18                	jne    c000fa3b <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa23:	ec                   	in     al,dx
c000fa24:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa29:	b0 30                	mov    al,0x30
c000fa2b:	89 ca                	mov    edx,ecx
c000fa2d:	ee                   	out    dx,al
c000fa2e:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa33:	ec                   	in     al,dx
c000fa34:	83 c8 08             	or     eax,0x8
c000fa37:	89 ca                	mov    edx,ecx
c000fa39:	ee                   	out    dx,al
c000fa3a:	c3                   	ret    
c000fa3b:	ec                   	in     al,dx
c000fa3c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa41:	b0 30                	mov    al,0x30
c000fa43:	89 ca                	mov    edx,ecx
c000fa45:	ee                   	out    dx,al
c000fa46:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa4b:	ec                   	in     al,dx
c000fa4c:	83 e0 f7             	and    eax,0xfffffff7
c000fa4f:	89 ca                	mov    edx,ecx
c000fa51:	ee                   	out    dx,al
c000fa52:	c3                   	ret    

c000fa53 <hwTextMode_scrollScreen(VgaText*)>:
c000fa53:	55                   	push   ebp
c000fa54:	57                   	push   edi
c000fa55:	56                   	push   esi
c000fa56:	53                   	push   ebx
c000fa57:	83 ec 1c             	sub    esp,0x1c
c000fa5a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa5e:	80 3d 40 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db40,0x0
c000fa65:	74 14                	je     c000fa7b <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa67:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa71:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa7b:	a1 e0 c9 02 c0       	mov    eax,ds:0xc002c9e0
c000fa80:	bd 02 00 00 00       	mov    ebp,0x2
c000fa85:	05 a0 00 00 00       	add    eax,0xa0
c000fa8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa8e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa92:	31 c0                	xor    eax,eax
c000fa94:	eb 0b                	jmp    c000faa1 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa96:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fa9c:	74 57                	je     c000faf5 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000fa9e:	43                   	inc    ebx
c000fa9f:	89 f0                	mov    eax,esi
c000faa1:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faa7:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000faad:	88 13                	mov    BYTE PTR [ebx],dl
c000faaf:	8d 70 01             	lea    esi,[eax+0x1]
c000fab2:	83 fd 18             	cmp    ebp,0x18
c000fab5:	75 df                	jne    c000fa96 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fab7:	a8 01                	test   al,0x1
c000fab9:	75 13                	jne    c000face <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fabb:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fabe:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fac4:	75 d8                	jne    c000fa9e <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fac6:	83 c4 1c             	add    esp,0x1c
c000fac9:	5b                   	pop    ebx
c000faca:	5e                   	pop    esi
c000facb:	5f                   	pop    edi
c000facc:	5d                   	pop    ebp
c000facd:	c3                   	ret    
c000face:	83 ec 08             	sub    esp,0x8
c000fad1:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fad8:	50                   	push   eax
c000fad9:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fadd:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000fae4:	50                   	push   eax
c000fae5:	e8 32 0c 00 00       	call   c001071c <VgaText::combineColours(unsigned char, unsigned char)>
c000faea:	83 c4 10             	add    esp,0x10
c000faed:	88 07                	mov    BYTE PTR [edi],al
c000faef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf3:	eb c9                	jmp    c000fabe <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000faf5:	45                   	inc    ebp
c000faf6:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fafe:	eb 8e                	jmp    c000fa8e <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb00 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb00:	57                   	push   edi
c000fb01:	80 3d 40 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db40,0x0
c000fb08:	56                   	push   esi
c000fb09:	53                   	push   ebx
c000fb0a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb0e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb12:	75 65                	jne    c000fb79 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb14:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb19:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb1e:	83 ec 08             	sub    esp,0x8
c000fb21:	52                   	push   edx
c000fb22:	50                   	push   eax
c000fb23:	e8 f4 0b 00 00       	call   c001071c <VgaText::combineColours(unsigned char, unsigned char)>
c000fb28:	5a                   	pop    edx
c000fb29:	0f b6 c0             	movzx  eax,al
c000fb2c:	59                   	pop    ecx
c000fb2d:	50                   	push   eax
c000fb2e:	0f be c3             	movsx  eax,bl
c000fb31:	50                   	push   eax
c000fb32:	e8 8b 0c 00 00       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb37:	83 c4 10             	add    esp,0x10
c000fb3a:	8b 35 e0 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9e0
c000fb40:	80 3d 40 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db40,0x0
c000fb47:	74 07                	je     c000fb50 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb49:	66 0f be c3          	movsx  ax,bl
c000fb4d:	80 cc 02             	or     ah,0x2
c000fb50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb54:	ba 19 00 00 00       	mov    edx,0x19
c000fb59:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb5f:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb62:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb65:	c1 e1 04             	shl    ecx,0x4
c000fb68:	c1 e2 04             	shl    edx,0x4
c000fb6b:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb6f:	01 ca                	add    edx,ecx
c000fb71:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb75:	5b                   	pop    ebx
c000fb76:	5e                   	pop    esi
c000fb77:	5f                   	pop    edi
c000fb78:	c3                   	ret    
c000fb79:	b8 02 00 00 00       	mov    eax,0x2
c000fb7e:	31 d2                	xor    edx,edx
c000fb80:	eb 9c                	jmp    c000fb1e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb82 <setupTextMode()>:
c000fb82:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb87:	83 e0 30             	and    eax,0x30
c000fb8a:	66 83 f8 30          	cmp    ax,0x30
c000fb8e:	75 11                	jne    c000fba1 <setupTextMode()+0x1f>
c000fb90:	81 2d e0 c9 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002c9e0,0x8000
c000fb9a:	c6 05 40 db 02 c0 01 	mov    BYTE PTR ds:0xc002db40,0x1
c000fba1:	c7 05 78 db 02 c0 0d fa 00 c0 	mov    DWORD PTR ds:0xc002db78,0xc000fa0d
c000fbab:	c7 05 64 db 02 c0 94 f8 00 c0 	mov    DWORD PTR ds:0xc002db64,0xc000f894
c000fbb5:	c7 05 60 db 02 c0 df f8 00 c0 	mov    DWORD PTR ds:0xc002db60,0xc000f8df
c000fbbf:	c7 05 6c db 02 c0 53 fa 00 c0 	mov    DWORD PTR ds:0xc002db6c,0xc000fa53
c000fbc9:	c7 05 74 db 02 c0 5d f9 00 c0 	mov    DWORD PTR ds:0xc002db74,0xc000f95d
c000fbd3:	c7 05 68 db 02 c0 bb f9 00 c0 	mov    DWORD PTR ds:0xc002db68,0xc000f9bb
c000fbdd:	c7 05 70 db 02 c0 bc f9 00 c0 	mov    DWORD PTR ds:0xc002db70,0xc000f9bc
c000fbe7:	c7 05 7c db 02 c0 00 fb 00 c0 	mov    DWORD PTR ds:0xc002db7c,0xc000fb00
c000fbf1:	c3                   	ret    

c000fbf2 <kernel_main>:
c000fbf2:	57                   	push   edi
c000fbf3:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbf8:	56                   	push   esi
c000fbf9:	31 f6                	xor    esi,esi
c000fbfb:	53                   	push   ebx
c000fbfc:	83 ec 10             	sub    esp,0x10
c000fbff:	e8 72 09 00 00       	call   c0010576 <installVgaTextImplementation()>
c000fc04:	e8 79 ff ff ff       	call   c000fb82 <setupTextMode()>
c000fc09:	89 f0                	mov    eax,esi
c000fc0b:	89 fa                	mov    edx,edi
c000fc0d:	ee                   	out    dx,al
c000fc0e:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc13:	b0 80                	mov    al,0x80
c000fc15:	89 da                	mov    edx,ebx
c000fc17:	ee                   	out    dx,al
c000fc18:	b1 03                	mov    cl,0x3
c000fc1a:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc1f:	88 c8                	mov    al,cl
c000fc21:	ee                   	out    dx,al
c000fc22:	89 f0                	mov    eax,esi
c000fc24:	89 fa                	mov    edx,edi
c000fc26:	ee                   	out    dx,al
c000fc27:	88 c8                	mov    al,cl
c000fc29:	89 da                	mov    edx,ebx
c000fc2b:	ee                   	out    dx,al
c000fc2c:	b0 c7                	mov    al,0xc7
c000fc2e:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc33:	ee                   	out    dx,al
c000fc34:	b0 0b                	mov    al,0xb
c000fc36:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc3b:	ee                   	out    dx,al
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	68 c4 9a 02 c0       	push   0xc0029ac4
c000fc44:	e8 c0 2e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000fc49:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc4e:	05 ff 0f 00 00       	add    eax,0xfff
c000fc53:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc58:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc5b:	e8 d1 03 00 00       	call   c0010031 <Phys::physicalMemorySetup(unsigned int)>
c000fc60:	e8 c5 1f 00 00       	call   c0011c2a <Virt::virtualMemorySetup()>
c000fc65:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc6b:	83 c4 10             	add    esp,0x10
c000fc6e:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc74:	75 0e                	jne    c000fc84 <kernel_main+0x92>
c000fc76:	89 d8                	mov    eax,ebx
c000fc78:	25 48 03 00 00       	and    eax,0x348
c000fc7d:	3d 00 03 00 00       	cmp    eax,0x300
c000fc82:	74 10                	je     c000fc94 <kernel_main+0xa2>
c000fc84:	83 ec 0c             	sub    esp,0xc
c000fc87:	68 c0 b2 02 c0       	push   0xc002b2c0
c000fc8c:	e8 5c a3 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000fc91:	83 c4 10             	add    esp,0x10
c000fc94:	83 ec 0c             	sub    esp,0xc
c000fc97:	89 1d c0 da 02 c0    	mov    DWORD PTR ds:0xc002dac0,ebx
c000fc9d:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca1:	53                   	push   ebx
c000fca2:	e8 37 21 00 00       	call   c0011dde <VAS::VAS()>
c000fca7:	89 1d 24 dc 02 c0    	mov    DWORD PTR ds:0xc002dc24,ebx
c000fcad:	e8 6e 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb2:	c7 04 24 db 9a 02 c0 	mov    DWORD PTR [esp],0xc0029adb
c000fcb9:	e8 4b 2e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000fcbe:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcc5:	e8 70 fb ff ff       	call   c000f83a <malloc>
c000fcca:	89 04 24             	mov    DWORD PTR [esp],eax
c000fccd:	89 c6                	mov    esi,eax
c000fccf:	e8 60 ea ff ff       	call   c000e734 <Computer::Computer()>
c000fcd4:	58                   	pop    eax
c000fcd5:	89 35 a8 da 02 c0    	mov    DWORD PTR ds:0xc002daa8,esi
c000fcdb:	5a                   	pop    edx
c000fcdc:	56                   	push   esi
c000fcdd:	68 f8 9a 02 c0       	push   0xc0029af8
c000fce2:	e8 22 2e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000fce7:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000fcec:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcee:	6a 00                	push   0x0
c000fcf0:	6a 00                	push   0x0
c000fcf2:	6a 00                	push   0x0
c000fcf4:	50                   	push   eax
c000fcf5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcf8:	83 c4 14             	add    esp,0x14
c000fcfb:	53                   	push   ebx
c000fcfc:	e8 77 23 00 00       	call   c0012078 <VAS::~VAS()>
c000fd01:	c7 04 24 0b 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b0b
c000fd08:	e8 e0 a2 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000fd0d:	83 c4 20             	add    esp,0x20
c000fd10:	5b                   	pop    ebx
c000fd11:	5e                   	pop    esi
c000fd12:	5f                   	pop    edi
c000fd13:	c3                   	ret    

c000fd14 <Phys::allocateDMA(unsigned long)>:
c000fd14:	55                   	push   ebp
c000fd15:	31 d2                	xor    edx,edx
c000fd17:	57                   	push   edi
c000fd18:	31 ed                	xor    ebp,ebp
c000fd1a:	56                   	push   esi
c000fd1b:	31 c9                	xor    ecx,ecx
c000fd1d:	53                   	push   ebx
c000fd1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd22:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd28:	31 c0                	xor    eax,eax
c000fd2a:	c1 ee 0c             	shr    esi,0xc
c000fd2d:	eb 17                	jmp    c000fd46 <Phys::allocateDMA(unsigned long)+0x32>
c000fd2f:	85 c9                	test   ecx,ecx
c000fd31:	75 04                	jne    c000fd37 <Phys::allocateDMA(unsigned long)+0x23>
c000fd33:	89 d5                	mov    ebp,edx
c000fd35:	89 d0                	mov    eax,edx
c000fd37:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd3a:	39 de                	cmp    esi,ebx
c000fd3c:	74 20                	je     c000fd5e <Phys::allocateDMA(unsigned long)+0x4a>
c000fd3e:	42                   	inc    edx
c000fd3f:	89 d9                	mov    ecx,ebx
c000fd41:	83 fa 2f             	cmp    edx,0x2f
c000fd44:	7f 11                	jg     c000fd57 <Phys::allocateDMA(unsigned long)+0x43>
c000fd46:	80 ba 00 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2500],0x0
c000fd4d:	74 e0                	je     c000fd2f <Phys::allocateDMA(unsigned long)+0x1b>
c000fd4f:	31 c9                	xor    ecx,ecx
c000fd51:	42                   	inc    edx
c000fd52:	83 fa 2f             	cmp    edx,0x2f
c000fd55:	7e ef                	jle    c000fd46 <Phys::allocateDMA(unsigned long)+0x32>
c000fd57:	5b                   	pop    ebx
c000fd58:	31 c0                	xor    eax,eax
c000fd5a:	5e                   	pop    esi
c000fd5b:	5f                   	pop    edi
c000fd5c:	5d                   	pop    ebp
c000fd5d:	c3                   	ret    
c000fd5e:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd61:	89 d7                	mov    edi,edx
c000fd63:	4f                   	dec    edi
c000fd64:	79 03                	jns    c000fd69 <Phys::allocateDMA(unsigned long)+0x55>
c000fd66:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd69:	c1 ff 04             	sar    edi,0x4
c000fd6c:	89 c2                	mov    edx,eax
c000fd6e:	c1 fa 04             	sar    edx,0x4
c000fd71:	39 fa                	cmp    edx,edi
c000fd73:	75 2f                	jne    c000fda4 <Phys::allocateDMA(unsigned long)+0x90>
c000fd75:	85 db                	test   ebx,ebx
c000fd77:	74 1a                	je     c000fd93 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd79:	be 00 db 02 c0       	mov    esi,0xc002db00
c000fd7e:	8d 90 00 db 02 c0    	lea    edx,[eax-0x3ffd2500]
c000fd84:	f7 d6                	not    esi
c000fd86:	29 c6                	sub    esi,eax
c000fd88:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd8b:	42                   	inc    edx
c000fd8c:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd8f:	39 d9                	cmp    ecx,ebx
c000fd91:	7f f5                	jg     c000fd88 <Phys::allocateDMA(unsigned long)+0x74>
c000fd93:	85 ff                	test   edi,edi
c000fd95:	74 13                	je     c000fdaa <Phys::allocateDMA(unsigned long)+0x96>
c000fd97:	5b                   	pop    ebx
c000fd98:	05 50 20 0c 00       	add    eax,0xc2050
c000fd9d:	5e                   	pop    esi
c000fd9e:	c1 e0 0c             	shl    eax,0xc
c000fda1:	5f                   	pop    edi
c000fda2:	5d                   	pop    ebp
c000fda3:	c3                   	ret    
c000fda4:	89 ea                	mov    edx,ebp
c000fda6:	31 c9                	xor    ecx,ecx
c000fda8:	eb a7                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdaa:	5b                   	pop    ebx
c000fdab:	c1 e0 0c             	shl    eax,0xc
c000fdae:	5e                   	pop    esi
c000fdaf:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdb4:	5f                   	pop    edi
c000fdb5:	5d                   	pop    ebp
c000fdb6:	c3                   	ret    

c000fdb7 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdbf:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdc5:	c1 e9 0c             	shr    ecx,0xc
c000fdc8:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdcd:	76 25                	jbe    c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdcf:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdd4:	c1 e8 0c             	shr    eax,0xc
c000fdd7:	8d 50 10             	lea    edx,[eax+0x10]
c000fdda:	85 c9                	test   ecx,ecx
c000fddc:	74 15                	je     c000fdf3 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdde:	8d 82 00 db 02 c0    	lea    eax,[edx-0x3ffd2500]
c000fde4:	8d 94 11 00 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2500]
c000fdeb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdee:	40                   	inc    eax
c000fdef:	39 d0                	cmp    eax,edx
c000fdf1:	75 f8                	jne    c000fdeb <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf3:	c3                   	ret    
c000fdf4:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fdfa:	c1 ea 0c             	shr    edx,0xc
c000fdfd:	eb db                	jmp    c000fdda <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fdff <Phys::setPageState(unsigned long, bool)>:
c000fdff:	56                   	push   esi
c000fe00:	ba 01 00 00 00       	mov    edx,0x1
c000fe05:	53                   	push   ebx
c000fe06:	8b 35 cc c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9cc
c000fe0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe14:	89 c8                	mov    eax,ecx
c000fe16:	83 e1 07             	and    ecx,0x7
c000fe19:	c1 e8 03             	shr    eax,0x3
c000fe1c:	d3 e3                	shl    ebx,cl
c000fe1e:	01 c6                	add    esi,eax
c000fe20:	d3 e2                	shl    edx,cl
c000fe22:	f7 d2                	not    edx
c000fe24:	20 16                	and    BYTE PTR [esi],dl
c000fe26:	03 05 cc c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9cc
c000fe2c:	08 18                	or     BYTE PTR [eax],bl
c000fe2e:	5b                   	pop    ebx
c000fe2f:	5e                   	pop    esi
c000fe30:	c3                   	ret    

c000fe31 <Phys::getPageState(unsigned long)>:
c000fe31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe35:	8b 15 cc c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9cc
c000fe3b:	89 c8                	mov    eax,ecx
c000fe3d:	83 e1 07             	and    ecx,0x7
c000fe40:	c1 e8 03             	shr    eax,0x3
c000fe43:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe47:	d3 f8                	sar    eax,cl
c000fe49:	83 e0 01             	and    eax,0x1
c000fe4c:	c3                   	ret    

c000fe4d <Phys::freePage(unsigned long)>:
c000fe4d:	53                   	push   ebx
c000fe4e:	83 ec 08             	sub    esp,0x8
c000fe51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe55:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe5b:	76 57                	jbe    c000feb4 <Phys::freePage(unsigned long)+0x67>
c000fe5d:	c1 eb 0c             	shr    ebx,0xc
c000fe60:	53                   	push   ebx
c000fe61:	e8 cb ff ff ff       	call   c000fe31 <Phys::getPageState(unsigned long)>
c000fe66:	5a                   	pop    edx
c000fe67:	84 c0                	test   al,al
c000fe69:	74 5b                	je     c000fec6 <Phys::freePage(unsigned long)+0x79>
c000fe6b:	a1 ec da 02 c0       	mov    eax,ds:0xc002daec
c000fe70:	48                   	dec    eax
c000fe71:	a3 ec da 02 c0       	mov    ds:0xc002daec,eax
c000fe76:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe79:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7c:	c1 e0 02             	shl    eax,0x2
c000fe7f:	99                   	cdq    
c000fe80:	f7 3d f0 da 02 c0    	idiv   DWORD PTR ds:0xc002daf0
c000fe86:	39 05 e8 da 02 c0    	cmp    DWORD PTR ds:0xc002dae8,eax
c000fe8c:	75 13                	jne    c000fea1 <Phys::freePage(unsigned long)+0x54>
c000fe8e:	83 ec 08             	sub    esp,0x8
c000fe91:	6a 00                	push   0x0
c000fe93:	53                   	push   ebx
c000fe94:	e8 66 ff ff ff       	call   c000fdff <Phys::setPageState(unsigned long, bool)>
c000fe99:	83 c4 10             	add    esp,0x10
c000fe9c:	83 c4 08             	add    esp,0x8
c000fe9f:	5b                   	pop    ebx
c000fea0:	c3                   	ret    
c000fea1:	83 ec 0c             	sub    esp,0xc
c000fea4:	a3 e8 da 02 c0       	mov    ds:0xc002dae8,eax
c000fea9:	50                   	push   eax
c000feaa:	e8 5b 0a 00 00       	call   c001090a <VgaText::updateRAMUsageDisplay(int)>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	eb da                	jmp    c000fe8e <Phys::freePage(unsigned long)+0x41>
c000feb4:	68 00 10 00 00       	push   0x1000
c000feb9:	53                   	push   ebx
c000feba:	e8 f8 fe ff ff       	call   c000fdb7 <Phys::freeDMA(unsigned long, unsigned long)>
c000febf:	59                   	pop    ecx
c000fec0:	5b                   	pop    ebx
c000fec1:	83 c4 08             	add    esp,0x8
c000fec4:	5b                   	pop    ebx
c000fec5:	c3                   	ret    
c000fec6:	c7 44 24 10 26 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b26
c000fece:	83 c4 08             	add    esp,0x8
c000fed1:	5b                   	pop    ebx
c000fed2:	e9 16 a1 00 00       	jmp    c0019fed <Krnl::panic(char const*)>

c000fed7 <Phys::allocatePage()>:
c000fed7:	56                   	push   esi
c000fed8:	53                   	push   ebx
c000fed9:	51                   	push   ecx
c000feda:	8b 35 e0 da 02 c0    	mov    esi,DWORD PTR ds:0xc002dae0
c000fee0:	89 f3                	mov    ebx,esi
c000fee2:	eb 0a                	jmp    c000feee <Phys::allocatePage()+0x17>
c000fee4:	89 1d e0 da 02 c0    	mov    DWORD PTR ds:0xc002dae0,ebx
c000feea:	39 de                	cmp    esi,ebx
c000feec:	74 24                	je     c000ff12 <Phys::allocatePage()+0x3b>
c000feee:	53                   	push   ebx
c000feef:	e8 3d ff ff ff       	call   c000fe31 <Phys::getPageState(unsigned long)>
c000fef4:	5a                   	pop    edx
c000fef5:	84 c0                	test   al,al
c000fef7:	74 5a                	je     c000ff53 <Phys::allocatePage()+0x7c>
c000fef9:	43                   	inc    ebx
c000fefa:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff00:	75 e2                	jne    c000fee4 <Phys::allocatePage()+0xd>
c000ff02:	31 db                	xor    ebx,ebx
c000ff04:	c7 05 e0 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dae0,0x0
c000ff0e:	39 de                	cmp    esi,ebx
c000ff10:	75 dc                	jne    c000feee <Phys::allocatePage()+0x17>
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	68 3c 9b 02 c0       	push   0xc0029b3c
c000ff1a:	e8 ea 2b 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c000ff1f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff26:	e8 e9 fd ff ff       	call   c000fd14 <Phys::allocateDMA(unsigned long)>
c000ff2b:	83 c4 10             	add    esp,0x10
c000ff2e:	85 c0                	test   eax,eax
c000ff30:	75 56                	jne    c000ff88 <Phys::allocatePage()+0xb1>
c000ff32:	83 ec 0c             	sub    esp,0xc
c000ff35:	68 4d 9b 02 c0       	push   0xc0029b4d
c000ff3a:	e8 ae a0 00 00       	call   c0019fed <Krnl::panic(char const*)>
c000ff3f:	83 c4 10             	add    esp,0x10
c000ff42:	8b 1d e0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dae0
c000ff48:	53                   	push   ebx
c000ff49:	e8 e3 fe ff ff       	call   c000fe31 <Phys::getPageState(unsigned long)>
c000ff4e:	5a                   	pop    edx
c000ff4f:	84 c0                	test   al,al
c000ff51:	75 a6                	jne    c000fef9 <Phys::allocatePage()+0x22>
c000ff53:	6a 01                	push   0x1
c000ff55:	53                   	push   ebx
c000ff56:	e8 a4 fe ff ff       	call   c000fdff <Phys::setPageState(unsigned long, bool)>
c000ff5b:	a1 ec da 02 c0       	mov    eax,ds:0xc002daec
c000ff60:	59                   	pop    ecx
c000ff61:	40                   	inc    eax
c000ff62:	5b                   	pop    ebx
c000ff63:	a3 ec da 02 c0       	mov    ds:0xc002daec,eax
c000ff68:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff6b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff6e:	c1 e0 02             	shl    eax,0x2
c000ff71:	99                   	cdq    
c000ff72:	f7 3d f0 da 02 c0    	idiv   DWORD PTR ds:0xc002daf0
c000ff78:	39 05 e8 da 02 c0    	cmp    DWORD PTR ds:0xc002dae8,eax
c000ff7e:	75 0c                	jne    c000ff8c <Phys::allocatePage()+0xb5>
c000ff80:	a1 e0 da 02 c0       	mov    eax,ds:0xc002dae0
c000ff85:	c1 e0 0c             	shl    eax,0xc
c000ff88:	5a                   	pop    edx
c000ff89:	5b                   	pop    ebx
c000ff8a:	5e                   	pop    esi
c000ff8b:	c3                   	ret    
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	a3 e8 da 02 c0       	mov    ds:0xc002dae8,eax
c000ff94:	50                   	push   eax
c000ff95:	e8 70 09 00 00       	call   c001090a <VgaText::updateRAMUsageDisplay(int)>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	eb e1                	jmp    c000ff80 <Phys::allocatePage()+0xa9>

c000ff9f <Phys::allocateContiguousPages(int)>:
c000ff9f:	57                   	push   edi
c000ffa0:	56                   	push   esi
c000ffa1:	53                   	push   ebx
c000ffa2:	31 db                	xor    ebx,ebx
c000ffa4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffa8:	e8 a9 d6 00 00       	call   c001d656 <lockScheduler()>
c000ffad:	85 db                	test   ebx,ebx
c000ffaf:	75 11                	jne    c000ffc2 <Phys::allocateContiguousPages(int)+0x23>
c000ffb1:	e8 21 ff ff ff       	call   c000fed7 <Phys::allocatePage()>
c000ffb6:	83 ff 01             	cmp    edi,0x1
c000ffb9:	89 c6                	mov    esi,eax
c000ffbb:	74 21                	je     c000ffde <Phys::allocateContiguousPages(int)+0x3f>
c000ffbd:	bb 01 00 00 00       	mov    ebx,0x1
c000ffc2:	e8 10 ff ff ff       	call   c000fed7 <Phys::allocatePage()>
c000ffc7:	89 da                	mov    edx,ebx
c000ffc9:	c1 e2 0c             	shl    edx,0xc
c000ffcc:	01 f2                	add    edx,esi
c000ffce:	39 c2                	cmp    edx,eax
c000ffd0:	74 17                	je     c000ffe9 <Phys::allocateContiguousPages(int)+0x4a>
c000ffd2:	bb 01 00 00 00       	mov    ebx,0x1
c000ffd7:	89 c6                	mov    esi,eax
c000ffd9:	83 ff 01             	cmp    edi,0x1
c000ffdc:	75 e4                	jne    c000ffc2 <Phys::allocateContiguousPages(int)+0x23>
c000ffde:	e8 75 d6 00 00       	call   c001d658 <unlockScheduler()>
c000ffe3:	89 f0                	mov    eax,esi
c000ffe5:	5b                   	pop    ebx
c000ffe6:	5e                   	pop    esi
c000ffe7:	5f                   	pop    edi
c000ffe8:	c3                   	ret    
c000ffe9:	43                   	inc    ebx
c000ffea:	39 fb                	cmp    ebx,edi
c000ffec:	75 bf                	jne    c000ffad <Phys::allocateContiguousPages(int)+0xe>
c000ffee:	e8 65 d6 00 00       	call   c001d658 <unlockScheduler()>
c000fff3:	89 f0                	mov    eax,esi
c000fff5:	5b                   	pop    ebx
c000fff6:	5e                   	pop    esi
c000fff7:	5f                   	pop    edi
c000fff8:	c3                   	ret    

c000fff9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fff9:	56                   	push   esi
c000fffa:	53                   	push   ebx
c000fffb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffff:	39 1d e4 da 02 c0    	cmp    DWORD PTR ds:0xc002dae4,ebx
c0010005:	73 06                	jae    c001000d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010007:	89 1d e4 da 02 c0    	mov    DWORD PTR ds:0xc002dae4,ebx
c001000d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010011:	c1 eb 0c             	shr    ebx,0xc
c0010014:	c1 e8 0c             	shr    eax,0xc
c0010017:	39 d8                	cmp    eax,ebx
c0010019:	73 13                	jae    c001002e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001001b:	6a 00                	push   0x0
c001001d:	8d 70 01             	lea    esi,[eax+0x1]
c0010020:	50                   	push   eax
c0010021:	e8 d9 fd ff ff       	call   c000fdff <Phys::setPageState(unsigned long, bool)>
c0010026:	5a                   	pop    edx
c0010027:	89 f0                	mov    eax,esi
c0010029:	59                   	pop    ecx
c001002a:	39 f3                	cmp    ebx,esi
c001002c:	75 ed                	jne    c001001b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001002e:	5b                   	pop    ebx
c001002f:	5e                   	pop    esi
c0010030:	c3                   	ret    

c0010031 <Phys::physicalMemorySetup(unsigned int)>:
c0010031:	55                   	push   ebp
c0010032:	57                   	push   edi
c0010033:	56                   	push   esi
c0010034:	53                   	push   ebx
c0010035:	31 db                	xor    ebx,ebx
c0010037:	83 ec 40             	sub    esp,0x40
c001003a:	6a 30                	push   0x30
c001003c:	6a 00                	push   0x0
c001003e:	68 00 db 02 c0       	push   0xc002db00
c0010043:	e8 30 07 ff ff       	call   c0000778 <memset>
c0010048:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001004c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010051:	05 00 10 00 00       	add    eax,0x1000
c0010056:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001005a:	83 c4 10             	add    esp,0x10
c001005d:	83 ec 08             	sub    esp,0x8
c0010060:	6a 01                	push   0x1
c0010062:	53                   	push   ebx
c0010063:	43                   	inc    ebx
c0010064:	e8 96 fd ff ff       	call   c000fdff <Phys::setPageState(unsigned long, bool)>
c0010069:	83 c4 10             	add    esp,0x10
c001006c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010072:	75 e9                	jne    c001005d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010074:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001007b:	66 85 c0             	test   ax,ax
c001007e:	0f 84 8e 01 00 00    	je     c0010212 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010084:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010088:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010090:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010094:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010099:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001009d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100a5:	eb 15                	jmp    c00100bc <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100a7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100ab:	83 c3 18             	add    ebx,0x18
c00100ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100b2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100b6:	0f 84 66 01 00 00    	je     c0010222 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100bc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100c2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100cd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100cf:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100d2:	01 f0                	add    eax,esi
c00100d4:	55                   	push   ebp
c00100d5:	11 fa                	adc    edx,edi
c00100d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e3:	56                   	push   esi
c00100e4:	68 88 9b 02 c0       	push   0xc0029b88
c00100e9:	e8 1b 2a 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00100ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100f2:	83 c4 10             	add    esp,0x10
c00100f5:	09 f8                	or     eax,edi
c00100f7:	0f 85 25 01 00 00    	jne    c0010222 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fd:	4d                   	dec    ebp
c00100fe:	75 a7                	jne    c00100a7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010100:	ba 00 00 08 00       	mov    edx,0x80000
c0010105:	89 c1                	mov    ecx,eax
c0010107:	39 f2                	cmp    edx,esi
c0010109:	19 f9                	sbb    ecx,edi
c001010b:	0f 82 a7 00 00 00    	jb     c00101b8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010111:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010115:	89 c1                	mov    ecx,eax
c0010117:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001011b:	0f 83 97 00 00 00    	jae    c00101b8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010121:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010126:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001012a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001012e:	39 fa                	cmp    edx,edi
c0010130:	19 e8                	sbb    eax,ebp
c0010132:	0f 82 14 01 00 00    	jb     c001024c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010138:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001013c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010140:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010146:	ba ff 1f 00 00       	mov    edx,0x1fff
c001014b:	83 d5 ff             	adc    ebp,0xffffffff
c001014e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010152:	31 c0                	xor    eax,eax
c0010154:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010158:	39 fa                	cmp    edx,edi
c001015a:	89 c1                	mov    ecx,eax
c001015c:	19 e9                	sbb    ecx,ebp
c001015e:	0f 83 43 ff ff ff    	jae    c00100a7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010164:	be 00 00 08 00       	mov    esi,0x80000
c0010169:	50                   	push   eax
c001016a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001016e:	57                   	push   edi
c001016f:	56                   	push   esi
c0010170:	68 ac 9b 02 c0       	push   0xc0029bac
c0010175:	e8 8f 29 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001017a:	5a                   	pop    edx
c001017b:	59                   	pop    ecx
c001017c:	57                   	push   edi
c001017d:	56                   	push   esi
c001017e:	e8 76 fe ff ff       	call   c000fff9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010183:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010187:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001018b:	83 c4 0c             	add    esp,0xc
c001018e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010192:	03 05 f0 da 02 c0    	add    eax,DWORD PTR ds:0xc002daf0
c0010198:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001019f:	a3 f0 da 02 c0       	mov    ds:0xc002daf0,eax
c00101a4:	52                   	push   edx
c00101a5:	50                   	push   eax
c00101a6:	68 69 9b 02 c0       	push   0xc0029b69
c00101ab:	e8 59 29 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00101b0:	83 c4 10             	add    esp,0x10
c00101b3:	e9 ef fe ff ff       	jmp    c00100a7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101b8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101c4:	39 ea                	cmp    edx,ebp
c00101c6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101ca:	0f 82 d7 fe ff ff    	jb     c00100a7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d0:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101d9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101dd:	0f 83 c4 fe ff ff    	jae    c00100a7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e3:	39 ee                	cmp    esi,ebp
c00101e5:	89 f8                	mov    eax,edi
c00101e7:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101eb:	0f 83 78 ff ff ff    	jae    c0010169 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101f9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00101fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010201:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010209:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001020d:	e9 57 ff ff ff       	jmp    c0010169 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010212:	83 ec 0c             	sub    esp,0xc
c0010215:	68 5b 9b 02 c0       	push   0xc0029b5b
c001021a:	e8 ce 9d 00 00       	call   c0019fed <Krnl::panic(char const*)>
c001021f:	83 c4 10             	add    esp,0x10
c0010222:	bb 40 01 00 00       	mov    ebx,0x140
c0010227:	83 ec 08             	sub    esp,0x8
c001022a:	6a 00                	push   0x0
c001022c:	53                   	push   ebx
c001022d:	43                   	inc    ebx
c001022e:	e8 cc fb ff ff       	call   c000fdff <Phys::setPageState(unsigned long, bool)>
c0010233:	ff 05 f0 da 02 c0    	inc    DWORD PTR ds:0xc002daf0
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010242:	75 e3                	jne    c0010227 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010244:	83 c4 3c             	add    esp,0x3c
c0010247:	5b                   	pop    ebx
c0010248:	5e                   	pop    esi
c0010249:	5f                   	pop    edi
c001024a:	5d                   	pop    ebp
c001024b:	c3                   	ret    
c001024c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010254:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001025c:	e9 d7 fe ff ff       	jmp    c0010138 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010261:	90                   	nop

c0010262 <Pipe::isAtty()>:
c0010262:	31 c0                	xor    eax,eax
c0010264:	c3                   	ret    
c0010265:	90                   	nop

c0010266 <Pipe::~Pipe()>:
c0010266:	83 ec 0c             	sub    esp,0xc
c0010269:	ba 18 9c 02 c0       	mov    edx,0xc0029c18
c001026e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010272:	89 10                	mov    DWORD PTR [eax],edx
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	83 ec 0c             	sub    esp,0xc
c001027b:	50                   	push   eax
c001027c:	e8 37 16 00 00       	call   c00118b8 <UnixFile::~UnixFile()>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	90                   	nop
c0010285:	83 c4 0c             	add    esp,0xc
c0010288:	c3                   	ret    
c0010289:	90                   	nop

c001028a <Pipe::~Pipe()>:
c001028a:	83 ec 0c             	sub    esp,0xc
c001028d:	83 ec 0c             	sub    esp,0xc
c0010290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010294:	e8 cd ff ff ff       	call   c0010266 <Pipe::~Pipe()>
c0010299:	83 c4 10             	add    esp,0x10
c001029c:	83 ec 08             	sub    esp,0x8
c001029f:	6a 20                	push   0x20
c00102a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a5:	e8 7f 27 00 00       	call   c0012a29 <operator delete(void*, unsigned long)>
c00102aa:	83 c4 10             	add    esp,0x10
c00102ad:	83 c4 0c             	add    esp,0xc
c00102b0:	c3                   	ret    
c00102b1:	90                   	nop

c00102b2 <Pipe::read(unsigned long long, void*, int*)>:
c00102b2:	55                   	push   ebp
c00102b3:	57                   	push   edi
c00102b4:	56                   	push   esi
c00102b5:	53                   	push   ebx
c00102b6:	83 ec 1c             	sub    esp,0x1c
c00102b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102c5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102c8:	89 c8                	mov    eax,ecx
c00102ca:	99                   	cdq    
c00102cb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102cf:	74 19                	je     c00102ea <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d1:	39 f9                	cmp    ecx,edi
c00102d3:	89 d1                	mov    ecx,edx
c00102d5:	19 f1                	sbb    ecx,esi
c00102d7:	73 11                	jae    c00102ea <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d9:	e8 78 d3 00 00       	call   c001d656 <lockScheduler()>
c00102de:	e8 af d6 00 00       	call   c001d992 <schedule()>
c00102e3:	e8 70 d3 00 00       	call   c001d658 <unlockScheduler()>
c00102e8:	eb db                	jmp    c00102c5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102ea:	39 f8                	cmp    eax,edi
c00102ec:	89 d1                	mov    ecx,edx
c00102ee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102f2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102f6:	19 f1                	sbb    ecx,esi
c00102f8:	73 08                	jae    c0010302 <Pipe::read(unsigned long long, void*, int*)+0x50>
c00102fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010302:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010305:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010308:	29 c6                	sub    esi,eax
c001030a:	89 f1                	mov    ecx,esi
c001030c:	c1 f9 1f             	sar    ecx,0x1f
c001030f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010313:	89 ca                	mov    edx,ecx
c0010315:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010319:	19 d1                	sbb    ecx,edx
c001031b:	73 04                	jae    c0010321 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001031d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010321:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010325:	89 fd                	mov    ebp,edi
c0010327:	29 f5                	sub    ebp,esi
c0010329:	85 f6                	test   esi,esi
c001032b:	74 12                	je     c001033f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001032d:	52                   	push   edx
c001032e:	56                   	push   esi
c001032f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010332:	50                   	push   eax
c0010333:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010337:	e8 08 04 ff ff       	call   c0000744 <memcpy>
c001033c:	83 c4 10             	add    esp,0x10
c001033f:	85 ed                	test   ebp,ebp
c0010341:	74 12                	je     c0010355 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010343:	50                   	push   eax
c0010344:	55                   	push   ebp
c0010345:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010348:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001034c:	56                   	push   esi
c001034d:	e8 f2 03 ff ff       	call   c0000744 <memcpy>
c0010352:	83 c4 10             	add    esp,0x10
c0010355:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010358:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001035b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001035e:	99                   	cdq    
c001035f:	89 f7                	mov    edi,esi
c0010361:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010365:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010369:	c1 ff 1f             	sar    edi,0x1f
c001036c:	57                   	push   edi
c001036d:	56                   	push   esi
c001036e:	52                   	push   edx
c001036f:	50                   	push   eax
c0010370:	e8 e7 5f 01 00       	call   c002635c <__umoddi3>
c0010375:	83 c4 10             	add    esp,0x10
c0010378:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001037b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010380:	75 10                	jne    c0010392 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010382:	83 ec 0c             	sub    esp,0xc
c0010385:	68 d5 9b 02 c0       	push   0xc0029bd5
c001038a:	e8 5e 9c 00 00       	call   c0019fed <Krnl::panic(char const*)>
c001038f:	83 c4 10             	add    esp,0x10
c0010392:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010396:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001039a:	89 10                	mov    DWORD PTR [eax],edx
c001039c:	83 c4 1c             	add    esp,0x1c
c001039f:	31 c0                	xor    eax,eax
c00103a1:	5b                   	pop    ebx
c00103a2:	5e                   	pop    esi
c00103a3:	5f                   	pop    edi
c00103a4:	5d                   	pop    ebp
c00103a5:	c3                   	ret    

c00103a6 <Pipe::write(unsigned long long, void*, int*)>:
c00103a6:	55                   	push   ebp
c00103a7:	57                   	push   edi
c00103a8:	56                   	push   esi
c00103a9:	53                   	push   ebx
c00103aa:	83 ec 1c             	sub    esp,0x1c
c00103ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00103bc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103bf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103c6:	89 de                	mov    esi,ebx
c00103c8:	89 df                	mov    edi,ebx
c00103ca:	c1 ff 1f             	sar    edi,0x1f
c00103cd:	01 c6                	add    esi,eax
c00103cf:	89 c8                	mov    eax,ecx
c00103d1:	11 d7                	adc    edi,edx
c00103d3:	99                   	cdq    
c00103d4:	39 f1                	cmp    ecx,esi
c00103d6:	89 d0                	mov    eax,edx
c00103d8:	19 f8                	sbb    eax,edi
c00103da:	b8 01 00 00 00       	mov    eax,0x1
c00103df:	0f 82 80 00 00 00    	jb     c0010465 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103e8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103eb:	01 d8                	add    eax,ebx
c00103ed:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103f1:	99                   	cdq    
c00103f2:	f7 f9                	idiv   ecx
c00103f4:	29 d1                	sub    ecx,edx
c00103f6:	89 d7                	mov    edi,edx
c00103f8:	89 c8                	mov    eax,ecx
c00103fa:	99                   	cdq    
c00103fb:	39 ce                	cmp    esi,ecx
c00103fd:	19 d3                	sbb    ebx,edx
c00103ff:	bb 00 00 00 00       	mov    ebx,0x0
c0010404:	72 04                	jb     c001040a <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010406:	89 f3                	mov    ebx,esi
c0010408:	29 cb                	sub    ebx,ecx
c001040a:	89 f1                	mov    ecx,esi
c001040c:	29 d9                	sub    ecx,ebx
c001040e:	74 1a                	je     c001042a <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010410:	52                   	push   edx
c0010411:	51                   	push   ecx
c0010412:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010416:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001041a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001041d:	57                   	push   edi
c001041e:	e8 21 03 ff ff       	call   c0000744 <memcpy>
c0010423:	83 c4 10             	add    esp,0x10
c0010426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001042a:	85 db                	test   ebx,ebx
c001042c:	74 12                	je     c0010440 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001042e:	50                   	push   eax
c001042f:	53                   	push   ebx
c0010430:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010434:	51                   	push   ecx
c0010435:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010438:	e8 07 03 ff ff       	call   c0000744 <memcpy>
c001043d:	83 c4 10             	add    esp,0x10
c0010440:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010443:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010448:	75 10                	jne    c001045a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001044a:	83 ec 0c             	sub    esp,0xc
c001044d:	68 f1 9b 02 c0       	push   0xc0029bf1
c0010452:	e8 96 9b 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0010457:	83 c4 10             	add    esp,0x10
c001045a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001045e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010461:	89 38                	mov    DWORD PTR [eax],edi
c0010463:	31 c0                	xor    eax,eax
c0010465:	83 c4 1c             	add    esp,0x1c
c0010468:	5b                   	pop    ebx
c0010469:	5e                   	pop    esi
c001046a:	5f                   	pop    edi
c001046b:	5d                   	pop    ebp
c001046c:	c3                   	ret    
c001046d:	90                   	nop

c001046e <Pipe::Pipe(int)>:
c001046e:	83 ec 0c             	sub    esp,0xc
c0010471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010475:	83 ec 08             	sub    esp,0x8
c0010478:	6a 00                	push   0x0
c001047a:	50                   	push   eax
c001047b:	e8 56 12 00 00       	call   c00116d6 <UnixFile::UnixFile(int)>
c0010480:	83 c4 10             	add    esp,0x10
c0010483:	ba 18 9c 02 c0       	mov    edx,0xc0029c18
c0010488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048c:	89 10                	mov    DWORD PTR [eax],edx
c001048e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010496:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104b3:	83 ec 0c             	sub    esp,0xc
c00104b6:	50                   	push   eax
c00104b7:	e8 7e f3 ff ff       	call   c000f83a <malloc>
c00104bc:	83 c4 10             	add    esp,0x10
c00104bf:	89 c2                	mov    edx,eax
c00104c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104d0:	90                   	nop
c00104d1:	83 c4 0c             	add    esp,0xc
c00104d4:	c3                   	ret    
c00104d5:	90                   	nop

c00104d6 <VgaText::isAtty()>:
c00104d6:	b0 01                	mov    al,0x1
c00104d8:	c3                   	ret    
c00104d9:	90                   	nop

c00104da <VgaText::~VgaText()>:
c00104da:	83 ec 0c             	sub    esp,0xc
c00104dd:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c00104e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e6:	89 10                	mov    DWORD PTR [eax],edx
c00104e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ec:	83 ec 0c             	sub    esp,0xc
c00104ef:	50                   	push   eax
c00104f0:	e8 c3 13 00 00       	call   c00118b8 <UnixFile::~UnixFile()>
c00104f5:	83 c4 10             	add    esp,0x10
c00104f8:	90                   	nop
c00104f9:	83 c4 0c             	add    esp,0xc
c00104fc:	c3                   	ret    
c00104fd:	90                   	nop

c00104fe <VgaText::~VgaText()>:
c00104fe:	83 ec 0c             	sub    esp,0xc
c0010501:	83 ec 0c             	sub    esp,0xc
c0010504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010508:	e8 cd ff ff ff       	call   c00104da <VgaText::~VgaText()>
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	83 ec 08             	sub    esp,0x8
c0010513:	68 60 12 00 00       	push   0x1260
c0010518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001051c:	e8 08 25 00 00       	call   c0012a29 <operator delete(void*, unsigned long)>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	83 c4 0c             	add    esp,0xc
c0010527:	c3                   	ret    

c0010528 <VgaText::read(unsigned long long, void*, int*)>:
c0010528:	83 ec 10             	sub    esp,0x10
c001052b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010537:	e8 1d 59 00 00       	call   c0015e59 <readKeyboard(VgaText*, char*, unsigned long)>
c001053c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010540:	89 02                	mov    DWORD PTR [edx],eax
c0010542:	31 c0                	xor    eax,eax
c0010544:	83 c4 1c             	add    esp,0x1c
c0010547:	c3                   	ret    

c0010548 <setTerminalScrollLock(bool)>:
c0010548:	c3                   	ret    

c0010549 <addToTerminalCycle(VgaText*)>:
c0010549:	8b 15 80 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db80
c001054f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010553:	85 d2                	test   edx,edx
c0010555:	75 0c                	jne    c0010563 <addToTerminalCycle(VgaText*)+0x1a>
c0010557:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001055d:	a3 80 db 02 c0       	mov    ds:0xc002db80,eax
c0010562:	c3                   	ret    
c0010563:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010569:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001056f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010575:	c3                   	ret    

c0010576 <installVgaTextImplementation()>:
c0010576:	83 ec 10             	sub    esp,0x10
c0010579:	6a 20                	push   0x20
c001057b:	6a 00                	push   0x0
c001057d:	68 60 db 02 c0       	push   0xc002db60
c0010582:	e8 f1 01 ff ff       	call   c0000778 <memset>
c0010587:	83 c4 1c             	add    esp,0x1c
c001058a:	c3                   	ret    

c001058b <scrollTerminalScrollLock(int)>:
c001058b:	c3                   	ret    

c001058c <VgaText::load()>:
c001058c:	53                   	push   ebx
c001058d:	31 c0                	xor    eax,eax
c001058f:	83 ec 58             	sub    esp,0x58
c0010592:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010596:	89 e2                	mov    edx,esp
c0010598:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001059c:	40                   	inc    eax
c001059d:	83 f8 50             	cmp    eax,0x50
c00105a0:	75 f6                	jne    c0010598 <VgaText::load()+0xc>
c00105a2:	31 c0                	xor    eax,eax
c00105a4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105ab:	84 c9                	test   cl,cl
c00105ad:	74 06                	je     c00105b5 <VgaText::load()+0x29>
c00105af:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105b2:	40                   	inc    eax
c00105b3:	eb ef                	jmp    c00105a4 <VgaText::load()+0x18>
c00105b5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105bb:	85 c0                	test   eax,eax
c00105bd:	74 09                	je     c00105c8 <VgaText::load()+0x3c>
c00105bf:	51                   	push   ecx
c00105c0:	51                   	push   ecx
c00105c1:	52                   	push   edx
c00105c2:	53                   	push   ebx
c00105c3:	ff d0                	call   eax
c00105c5:	83 c4 10             	add    esp,0x10
c00105c8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105ce:	85 c0                	test   eax,eax
c00105d0:	74 09                	je     c00105db <VgaText::load()+0x4f>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	53                   	push   ebx
c00105d6:	ff d0                	call   eax
c00105d8:	83 c4 10             	add    esp,0x10
c00105db:	83 c4 58             	add    esp,0x58
c00105de:	5b                   	pop    ebx
c00105df:	c3                   	ret    

c00105e0 <VgaText::updateCursor()>:
c00105e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e4:	39 05 84 db 02 c0    	cmp    DWORD PTR ds:0xc002db84,eax
c00105ea:	75 0c                	jne    c00105f8 <VgaText::updateCursor()+0x18>
c00105ec:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105f2:	85 c0                	test   eax,eax
c00105f4:	74 02                	je     c00105f8 <VgaText::updateCursor()+0x18>
c00105f6:	ff e0                	jmp    eax
c00105f8:	c3                   	ret    
c00105f9:	90                   	nop

c00105fa <VgaText::showCursor(bool)>:
c00105fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010602:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010608:	c3                   	ret    
c0010609:	90                   	nop

c001060a <VgaText::disableBlink(bool)>:
c001060a:	56                   	push   esi
c001060b:	53                   	push   ebx
c001060c:	51                   	push   ecx
c001060d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010611:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010615:	39 1d 84 db 02 c0    	cmp    DWORD PTR ds:0xc002db84,ebx
c001061b:	75 18                	jne    c0010635 <VgaText::disableBlink(bool)+0x2b>
c001061d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010623:	85 c0                	test   eax,eax
c0010625:	74 0e                	je     c0010635 <VgaText::disableBlink(bool)+0x2b>
c0010627:	89 f1                	mov    ecx,esi
c0010629:	52                   	push   edx
c001062a:	52                   	push   edx
c001062b:	0f b6 d1             	movzx  edx,cl
c001062e:	52                   	push   edx
c001062f:	53                   	push   ebx
c0010630:	ff d0                	call   eax
c0010632:	83 c4 10             	add    esp,0x10
c0010635:	89 f0                	mov    eax,esi
c0010637:	83 f0 01             	xor    eax,0x1
c001063a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010640:	58                   	pop    eax
c0010641:	5b                   	pop    ebx
c0010642:	5e                   	pop    esi
c0010643:	c3                   	ret    

c0010644 <VgaText::doANSI_SGR(int)>:
c0010644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064c:	85 d2                	test   edx,edx
c001064e:	75 14                	jne    c0010664 <VgaText::doANSI_SGR(int)+0x20>
c0010650:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010656:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001065c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010662:	eb 65                	jmp    c00106c9 <VgaText::doANSI_SGR(int)+0x85>
c0010664:	83 fa 07             	cmp    edx,0x7
c0010667:	75 14                	jne    c001067d <VgaText::doANSI_SGR(int)+0x39>
c0010669:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001066f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010675:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001067b:	eb 4c                	jmp    c00106c9 <VgaText::doANSI_SGR(int)+0x85>
c001067d:	83 fa 1b             	cmp    edx,0x1b
c0010680:	74 ce                	je     c0010650 <VgaText::doANSI_SGR(int)+0xc>
c0010682:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010685:	83 f9 07             	cmp    ecx,0x7
c0010688:	77 09                	ja     c0010693 <VgaText::doANSI_SGR(int)+0x4f>
c001068a:	8b 14 8d 00 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3600]
c0010691:	eb 20                	jmp    c00106b3 <VgaText::doANSI_SGR(int)+0x6f>
c0010693:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010696:	83 f9 07             	cmp    ecx,0x7
c0010699:	77 09                	ja     c00106a4 <VgaText::doANSI_SGR(int)+0x60>
c001069b:	8b 14 8d 00 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3600]
c00106a2:	eb 25                	jmp    c00106c9 <VgaText::doANSI_SGR(int)+0x85>
c00106a4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106a7:	83 f9 07             	cmp    ecx,0x7
c00106aa:	77 0e                	ja     c00106ba <VgaText::doANSI_SGR(int)+0x76>
c00106ac:	8b 14 95 b8 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3748]
c00106b3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106b9:	c3                   	ret    
c00106ba:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106bd:	83 f9 07             	cmp    ecx,0x7
c00106c0:	77 0d                	ja     c00106cf <VgaText::doANSI_SGR(int)+0x8b>
c00106c2:	8b 14 95 90 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3770]
c00106c9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106cf:	c3                   	ret    

c00106d0 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106de:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106e4:	c3                   	ret    
c00106e5:	90                   	nop

c00106e6 <VgaText::setDefaultFgColour(VgaColour)>:
c00106e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ee:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00106f4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106fa:	c3                   	ret    
c00106fb:	90                   	nop

c00106fc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106fc:	53                   	push   ebx
c00106fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010701:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010705:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010709:	51                   	push   ecx
c001070a:	e8 c1 ff ff ff       	call   c00106d0 <VgaText::setDefaultBgColour(VgaColour)>
c001070f:	58                   	pop    eax
c0010710:	5a                   	pop    edx
c0010711:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010715:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010719:	5b                   	pop    ebx
c001071a:	eb ca                	jmp    c00106e6 <VgaText::setDefaultFgColour(VgaColour)>

c001071c <VgaText::combineColours(unsigned char, unsigned char)>:
c001071c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010720:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010725:	83 e0 0f             	and    eax,0xf
c0010728:	c1 e2 04             	shl    edx,0x4
c001072b:	09 d0                	or     eax,edx
c001072d:	c3                   	ret    

c001072e <VgaText::scrollScreen()>:
c001072e:	57                   	push   edi
c001072f:	56                   	push   esi
c0010730:	be 01 00 00 00       	mov    esi,0x1
c0010735:	53                   	push   ebx
c0010736:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001073a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010740:	31 ff                	xor    edi,edi
c0010742:	01 d9                	add    ecx,ebx
c0010744:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010747:	83 fe 17             	cmp    esi,0x17
c001074a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010750:	75 28                	jne    c001077a <VgaText::scrollScreen()+0x4c>
c0010752:	f7 c7 01 00 00 00    	test   edi,0x1
c0010758:	74 1c                	je     c0010776 <VgaText::scrollScreen()+0x48>
c001075a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010761:	50                   	push   eax
c0010762:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010769:	50                   	push   eax
c001076a:	e8 ad ff ff ff       	call   c001071c <VgaText::combineColours(unsigned char, unsigned char)>
c001076f:	5a                   	pop    edx
c0010770:	5a                   	pop    edx
c0010771:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010774:	eb 04                	jmp    c001077a <VgaText::scrollScreen()+0x4c>
c0010776:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001077a:	47                   	inc    edi
c001077b:	41                   	inc    ecx
c001077c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010782:	75 c0                	jne    c0010744 <VgaText::scrollScreen()+0x16>
c0010784:	46                   	inc    esi
c0010785:	83 fe 18             	cmp    esi,0x18
c0010788:	75 b0                	jne    c001073a <VgaText::scrollScreen()+0xc>
c001078a:	39 1d 84 db 02 c0    	cmp    DWORD PTR ds:0xc002db84,ebx
c0010790:	75 24                	jne    c00107b6 <VgaText::scrollScreen()+0x88>
c0010792:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010799:	74 08                	je     c00107a3 <VgaText::scrollScreen()+0x75>
c001079b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107a1:	eb 13                	jmp    c00107b6 <VgaText::scrollScreen()+0x88>
c00107a3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107a9:	85 c0                	test   eax,eax
c00107ab:	74 09                	je     c00107b6 <VgaText::scrollScreen()+0x88>
c00107ad:	83 ec 0c             	sub    esp,0xc
c00107b0:	53                   	push   ebx
c00107b1:	ff d0                	call   eax
c00107b3:	83 c4 10             	add    esp,0x10
c00107b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ba:	5b                   	pop    ebx
c00107bb:	5e                   	pop    esi
c00107bc:	5f                   	pop    edi
c00107bd:	e9 1e fe ff ff       	jmp    c00105e0 <VgaText::updateCursor()>

c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107c7:	c1 e0 08             	shl    eax,0x8
c00107ca:	89 c2                	mov    edx,eax
c00107cc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d1:	09 d0                	or     eax,edx
c00107d3:	c3                   	ret    

c00107d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107d4:	53                   	push   ebx
c00107d5:	83 ec 08             	sub    esp,0x8
c00107d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107dc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e1:	50                   	push   eax
c00107e2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e7:	50                   	push   eax
c00107e8:	e8 2f ff ff ff       	call   c001071c <VgaText::combineColours(unsigned char, unsigned char)>
c00107ed:	5a                   	pop    edx
c00107ee:	0f b6 c0             	movzx  eax,al
c00107f1:	5b                   	pop    ebx
c00107f2:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107f7:	50                   	push   eax
c00107f8:	53                   	push   ebx
c00107f9:	e8 c4 ff ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c00107fe:	5a                   	pop    edx
c00107ff:	5a                   	pop    edx
c0010800:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010806:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001080a:	0f b7 d2             	movzx  edx,dx
c001080d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010812:	39 0d 84 db 02 c0    	cmp    DWORD PTR ds:0xc002db84,ecx
c0010818:	75 14                	jne    c001082e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001081a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010820:	85 c0                	test   eax,eax
c0010822:	74 0a                	je     c001082e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010824:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010828:	83 c4 08             	add    esp,0x8
c001082b:	5b                   	pop    ebx
c001082c:	ff e0                	jmp    eax
c001082e:	83 c4 08             	add    esp,0x8
c0010831:	5b                   	pop    ebx
c0010832:	c3                   	ret    
c0010833:	90                   	nop

c0010834 <VgaText::getCursorX()>:
c0010834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010838:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001083e:	c3                   	ret    
c001083f:	90                   	nop

c0010840 <VgaText::getCursorY()>:
c0010840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010844:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001084a:	c3                   	ret    
c001084b:	90                   	nop

c001084c <VgaText::setCursor(int, int)>:
c001084c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010850:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010854:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001085a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001085e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010864:	e9 77 fd ff ff       	jmp    c00105e0 <VgaText::updateCursor()>
c0010869:	90                   	nop

c001086a <VgaText::setCursorX(int)>:
c001086a:	83 ec 10             	sub    esp,0x10
c001086d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010871:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087b:	50                   	push   eax
c001087c:	e8 cb ff ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010881:	83 c4 1c             	add    esp,0x1c
c0010884:	c3                   	ret    
c0010885:	90                   	nop

c0010886 <VgaText::setCursorY(int)>:
c0010886:	83 ec 10             	sub    esp,0x10
c0010889:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001088d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010891:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010897:	50                   	push   eax
c0010898:	e8 af ff ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c001089d:	83 c4 1c             	add    esp,0x1c
c00108a0:	c3                   	ret    
c00108a1:	90                   	nop

c00108a2 <VgaText::incrementCursor(bool)>:
c00108a2:	56                   	push   esi
c00108a3:	53                   	push   ebx
c00108a4:	51                   	push   ecx
c00108a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108ad:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108b3:	40                   	inc    eax
c00108b4:	83 f8 50             	cmp    eax,0x50
c00108b7:	74 08                	je     c00108c1 <VgaText::incrementCursor(bool)+0x1f>
c00108b9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108bf:	eb 33                	jmp    c00108f4 <VgaText::incrementCursor(bool)+0x52>
c00108c1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108c7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108d1:	8d 50 01             	lea    edx,[eax+0x1]
c00108d4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108da:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108e0:	75 12                	jne    c00108f4 <VgaText::incrementCursor(bool)+0x52>
c00108e2:	83 ec 0c             	sub    esp,0xc
c00108e5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108eb:	53                   	push   ebx
c00108ec:	e8 3d fe ff ff       	call   c001072e <VgaText::scrollScreen()>
c00108f1:	83 c4 10             	add    esp,0x10
c00108f4:	89 f0                	mov    eax,esi
c00108f6:	84 c0                	test   al,al
c00108f8:	74 0c                	je     c0010906 <VgaText::incrementCursor(bool)+0x64>
c00108fa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108fe:	5a                   	pop    edx
c00108ff:	5b                   	pop    ebx
c0010900:	5e                   	pop    esi
c0010901:	e9 da fc ff ff       	jmp    c00105e0 <VgaText::updateCursor()>
c0010906:	58                   	pop    eax
c0010907:	5b                   	pop    ebx
c0010908:	5e                   	pop    esi
c0010909:	c3                   	ret    

c001090a <VgaText::updateRAMUsageDisplay(int)>:
c001090a:	56                   	push   esi
c001090b:	8b 35 e0 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9e0
c0010911:	53                   	push   ebx
c0010912:	bb 0a 00 00 00       	mov    ebx,0xa
c0010917:	6a 0f                	push   0xf
c0010919:	6a 00                	push   0x0
c001091b:	e8 fc fd ff ff       	call   c001071c <VgaText::combineColours(unsigned char, unsigned char)>
c0010920:	5a                   	pop    edx
c0010921:	59                   	pop    ecx
c0010922:	0f b6 c8             	movzx  ecx,al
c0010925:	51                   	push   ecx
c0010926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092a:	99                   	cdq    
c001092b:	f7 fb                	idiv   ebx
c001092d:	89 d3                	mov    ebx,edx
c001092f:	83 c0 30             	add    eax,0x30
c0010932:	83 c3 30             	add    ebx,0x30
c0010935:	0f be c0             	movsx  eax,al
c0010938:	0f b6 db             	movzx  ebx,bl
c001093b:	50                   	push   eax
c001093c:	e8 81 fe ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010941:	5a                   	pop    edx
c0010942:	5a                   	pop    edx
c0010943:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001094a:	51                   	push   ecx
c001094b:	53                   	push   ebx
c001094c:	e8 71 fe ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010951:	5b                   	pop    ebx
c0010952:	5a                   	pop    edx
c0010953:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001095a:	51                   	push   ecx
c001095b:	6a 25                	push   0x25
c001095d:	e8 60 fe ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010962:	59                   	pop    ecx
c0010963:	5b                   	pop    ebx
c0010964:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001096b:	5b                   	pop    ebx
c001096c:	5e                   	pop    esi
c001096d:	c3                   	ret    

c001096e <VgaText::updateDiskUsage()>:
c001096e:	55                   	push   ebp
c001096f:	bd 10 27 00 00       	mov    ebp,0x2710
c0010974:	57                   	push   edi
c0010975:	8b 3d e0 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c9e0
c001097b:	56                   	push   esi
c001097c:	53                   	push   ebx
c001097d:	6a 0f                	push   0xf
c001097f:	6a 00                	push   0x0
c0010981:	e8 96 fd ff ff       	call   c001071c <VgaText::combineColours(unsigned char, unsigned char)>
c0010986:	5a                   	pop    edx
c0010987:	0f b6 d8             	movzx  ebx,al
c001098a:	59                   	pop    ecx
c001098b:	8b 35 08 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031e08
c0010991:	53                   	push   ebx
c0010992:	b9 0a 00 00 00       	mov    ecx,0xa
c0010997:	89 f0                	mov    eax,esi
c0010999:	99                   	cdq    
c001099a:	f7 fd                	idiv   ebp
c001099c:	99                   	cdq    
c001099d:	f7 f9                	idiv   ecx
c001099f:	8d 42 30             	lea    eax,[edx+0x30]
c00109a2:	0f b6 c0             	movzx  eax,al
c00109a5:	50                   	push   eax
c00109a6:	e8 17 fe ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c00109ab:	5d                   	pop    ebp
c00109ac:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109b1:	5a                   	pop    edx
c00109b2:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109b6:	53                   	push   ebx
c00109b7:	89 f0                	mov    eax,esi
c00109b9:	99                   	cdq    
c00109ba:	f7 fd                	idiv   ebp
c00109bc:	99                   	cdq    
c00109bd:	f7 f9                	idiv   ecx
c00109bf:	8d 42 30             	lea    eax,[edx+0x30]
c00109c2:	0f b6 c0             	movzx  eax,al
c00109c5:	50                   	push   eax
c00109c6:	e8 f7 fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c00109cb:	5d                   	pop    ebp
c00109cc:	bd 64 00 00 00       	mov    ebp,0x64
c00109d1:	5a                   	pop    edx
c00109d2:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109d9:	53                   	push   ebx
c00109da:	89 f0                	mov    eax,esi
c00109dc:	99                   	cdq    
c00109dd:	f7 fd                	idiv   ebp
c00109df:	99                   	cdq    
c00109e0:	f7 f9                	idiv   ecx
c00109e2:	8d 42 30             	lea    eax,[edx+0x30]
c00109e5:	0f b6 c0             	movzx  eax,al
c00109e8:	50                   	push   eax
c00109e9:	e8 d4 fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c00109ee:	5d                   	pop    ebp
c00109ef:	5a                   	pop    edx
c00109f0:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109f7:	53                   	push   ebx
c00109f8:	89 f0                	mov    eax,esi
c00109fa:	99                   	cdq    
c00109fb:	f7 f9                	idiv   ecx
c00109fd:	89 d6                	mov    esi,edx
c00109ff:	99                   	cdq    
c0010a00:	f7 f9                	idiv   ecx
c0010a02:	8d 42 30             	lea    eax,[edx+0x30]
c0010a05:	0f b6 c0             	movzx  eax,al
c0010a08:	50                   	push   eax
c0010a09:	e8 b4 fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0e:	5d                   	pop    ebp
c0010a0f:	5a                   	pop    edx
c0010a10:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a17:	53                   	push   ebx
c0010a18:	8d 46 30             	lea    eax,[esi+0x30]
c0010a1b:	0f b6 f0             	movzx  esi,al
c0010a1e:	56                   	push   esi
c0010a1f:	e8 9e fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a24:	5e                   	pop    esi
c0010a25:	8b 35 04 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031e04
c0010a2b:	5d                   	pop    ebp
c0010a2c:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a33:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a38:	53                   	push   ebx
c0010a39:	89 f0                	mov    eax,esi
c0010a3b:	99                   	cdq    
c0010a3c:	f7 fd                	idiv   ebp
c0010a3e:	99                   	cdq    
c0010a3f:	f7 f9                	idiv   ecx
c0010a41:	8d 42 30             	lea    eax,[edx+0x30]
c0010a44:	0f b6 c0             	movzx  eax,al
c0010a47:	50                   	push   eax
c0010a48:	e8 75 fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4d:	5a                   	pop    edx
c0010a4e:	5d                   	pop    ebp
c0010a4f:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a56:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a5b:	53                   	push   ebx
c0010a5c:	89 f0                	mov    eax,esi
c0010a5e:	99                   	cdq    
c0010a5f:	f7 fd                	idiv   ebp
c0010a61:	99                   	cdq    
c0010a62:	f7 f9                	idiv   ecx
c0010a64:	8d 42 30             	lea    eax,[edx+0x30]
c0010a67:	0f b6 c0             	movzx  eax,al
c0010a6a:	50                   	push   eax
c0010a6b:	e8 52 fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a70:	5a                   	pop    edx
c0010a71:	5d                   	pop    ebp
c0010a72:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a79:	bd 64 00 00 00       	mov    ebp,0x64
c0010a7e:	53                   	push   ebx
c0010a7f:	89 f0                	mov    eax,esi
c0010a81:	99                   	cdq    
c0010a82:	f7 fd                	idiv   ebp
c0010a84:	99                   	cdq    
c0010a85:	f7 f9                	idiv   ecx
c0010a87:	83 c2 30             	add    edx,0x30
c0010a8a:	0f b6 d2             	movzx  edx,dl
c0010a8d:	52                   	push   edx
c0010a8e:	e8 2f fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a93:	5a                   	pop    edx
c0010a94:	5d                   	pop    ebp
c0010a95:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a9c:	53                   	push   ebx
c0010a9d:	89 f0                	mov    eax,esi
c0010a9f:	99                   	cdq    
c0010aa0:	f7 f9                	idiv   ecx
c0010aa2:	89 d6                	mov    esi,edx
c0010aa4:	99                   	cdq    
c0010aa5:	f7 f9                	idiv   ecx
c0010aa7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aaa:	0f b6 c0             	movzx  eax,al
c0010aad:	50                   	push   eax
c0010aae:	e8 0f fd ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab3:	5a                   	pop    edx
c0010ab4:	59                   	pop    ecx
c0010ab5:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010abc:	53                   	push   ebx
c0010abd:	8d 46 30             	lea    eax,[esi+0x30]
c0010ac0:	0f b6 f0             	movzx  esi,al
c0010ac3:	56                   	push   esi
c0010ac4:	e8 f9 fc ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac9:	5b                   	pop    ebx
c0010aca:	5e                   	pop    esi
c0010acb:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ad2:	5b                   	pop    ebx
c0010ad3:	5e                   	pop    esi
c0010ad4:	5f                   	pop    edi
c0010ad5:	5d                   	pop    ebp
c0010ad6:	c3                   	ret    
c0010ad7:	90                   	nop

c0010ad8 <VgaText::updateTitle()>:
c0010ad8:	53                   	push   ebx
c0010ad9:	31 c0                	xor    eax,eax
c0010adb:	83 ec 58             	sub    esp,0x58
c0010ade:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ae2:	89 e1                	mov    ecx,esp
c0010ae4:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ae8:	40                   	inc    eax
c0010ae9:	83 f8 50             	cmp    eax,0x50
c0010aec:	75 f6                	jne    c0010ae4 <VgaText::updateTitle()+0xc>
c0010aee:	31 c0                	xor    eax,eax
c0010af0:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010af7:	84 db                	test   bl,bl
c0010af9:	74 06                	je     c0010b01 <VgaText::updateTitle()+0x29>
c0010afb:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010afe:	40                   	inc    eax
c0010aff:	eb ef                	jmp    c0010af0 <VgaText::updateTitle()+0x18>
c0010b01:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b07:	85 c0                	test   eax,eax
c0010b09:	74 09                	je     c0010b14 <VgaText::updateTitle()+0x3c>
c0010b0b:	53                   	push   ebx
c0010b0c:	53                   	push   ebx
c0010b0d:	51                   	push   ecx
c0010b0e:	52                   	push   edx
c0010b0f:	ff d0                	call   eax
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	e8 55 fe ff ff       	call   c001096e <VgaText::updateDiskUsage()>
c0010b19:	83 c4 58             	add    esp,0x58
c0010b1c:	5b                   	pop    ebx
c0010b1d:	c3                   	ret    

c0010b1e <VgaText::setTitleTextColour(VgaColour)>:
c0010b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b26:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b2c:	eb aa                	jmp    c0010ad8 <VgaText::updateTitle()>

c0010b2e <VgaText::setTitleColour(VgaColour)>:
c0010b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b36:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b3c:	eb 9a                	jmp    c0010ad8 <VgaText::updateTitle()>

c0010b3e <VgaText::setTitle(char*)>:
c0010b3e:	53                   	push   ebx
c0010b3f:	83 ec 10             	sub    esp,0x10
c0010b42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b50:	50                   	push   eax
c0010b51:	e8 de fc fe ff       	call   c0000834 <strcpy>
c0010b56:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b5a:	83 c4 18             	add    esp,0x18
c0010b5d:	5b                   	pop    ebx
c0010b5e:	e9 75 ff ff ff       	jmp    c0010ad8 <VgaText::updateTitle()>
c0010b63:	90                   	nop

c0010b64 <VgaText::decrementCursor(bool)>:
c0010b64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b6c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b72:	85 c0                	test   eax,eax
c0010b74:	74 07                	je     c0010b7d <VgaText::decrementCursor(bool)+0x19>
c0010b76:	48                   	dec    eax
c0010b77:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b7d:	84 c9                	test   cl,cl
c0010b7f:	74 09                	je     c0010b8a <VgaText::decrementCursor(bool)+0x26>
c0010b81:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b85:	e9 56 fa ff ff       	jmp    c00105e0 <VgaText::updateCursor()>
c0010b8a:	c3                   	ret    
c0010b8b:	90                   	nop

c0010b8c <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b8c:	53                   	push   ebx
c0010b8d:	83 ec 08             	sub    esp,0x8
c0010b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010ba0:	3c 07                	cmp    al,0x7
c0010ba2:	75 2a                	jne    c0010bce <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010ba4:	a1 2c dc 02 c0       	mov    eax,ds:0xc002dc2c
c0010ba9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bb1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bb9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bc5:	83 c4 08             	add    esp,0x8
c0010bc8:	5b                   	pop    ebx
c0010bc9:	e9 3a 2d 00 00       	jmp    c0013908 <Buzzer::beep(int, int, bool)>
c0010bce:	3c 0d                	cmp    al,0xd
c0010bd0:	75 0c                	jne    c0010bde <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bd2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bdc:	eb 3b                	jmp    c0010c19 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010bde:	3c 0a                	cmp    al,0xa
c0010be0:	75 40                	jne    c0010c22 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010be2:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010be8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bf2:	8d 50 01             	lea    edx,[eax+0x1]
c0010bf5:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010bfb:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c01:	75 12                	jne    c0010c15 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c03:	83 ec 0c             	sub    esp,0xc
c0010c06:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c0c:	53                   	push   ebx
c0010c0d:	e8 1c fb ff ff       	call   c001072e <VgaText::scrollScreen()>
c0010c12:	83 c4 10             	add    esp,0x10
c0010c15:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c19:	83 c4 08             	add    esp,0x8
c0010c1c:	5b                   	pop    ebx
c0010c1d:	e9 be f9 ff ff       	jmp    c00105e0 <VgaText::updateCursor()>
c0010c22:	3c 08                	cmp    al,0x8
c0010c24:	75 31                	jne    c0010c57 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c26:	50                   	push   eax
c0010c27:	50                   	push   eax
c0010c28:	6a 01                	push   0x1
c0010c2a:	53                   	push   ebx
c0010c2b:	e8 34 ff ff ff       	call   c0010b64 <VgaText::decrementCursor(bool)>
c0010c30:	5a                   	pop    edx
c0010c31:	59                   	pop    ecx
c0010c32:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c38:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c3e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c44:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c4a:	6a 20                	push   0x20
c0010c4c:	53                   	push   ebx
c0010c4d:	e8 82 fb ff ff       	call   c00107d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c52:	83 c4 28             	add    esp,0x28
c0010c55:	5b                   	pop    ebx
c0010c56:	c3                   	ret    
c0010c57:	83 ec 08             	sub    esp,0x8
c0010c5a:	0f be c0             	movsx  eax,al
c0010c5d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c63:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c69:	51                   	push   ecx
c0010c6a:	52                   	push   edx
c0010c6b:	50                   	push   eax
c0010c6c:	53                   	push   ebx
c0010c6d:	e8 62 fb ff ff       	call   c00107d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c72:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c76:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c7e:	83 c4 28             	add    esp,0x28
c0010c81:	5b                   	pop    ebx
c0010c82:	e9 1b fc ff ff       	jmp    c00108a2 <VgaText::incrementCursor(bool)>
c0010c87:	90                   	nop

c0010c88 <VgaText::isShowingCursor()>:
c0010c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c92:	c3                   	ret    
c0010c93:	90                   	nop

c0010c94 <VgaText::isBlinkDisabled()>:
c0010c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c98:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010c9e:	83 f0 01             	xor    eax,0x1
c0010ca1:	c3                   	ret    

c0010ca2 <VgaText::setCursorHeight(int)>:
c0010ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010caa:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cb0:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cbb:	e9 3a f9 ff ff       	jmp    c00105fa <VgaText::showCursor(bool)>

c0010cc0 <VgaText::getCursorHeight()>:
c0010cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc4:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cca:	c3                   	ret    

c0010ccb <setActiveTerminal(VgaText*)>:
c0010ccb:	53                   	push   ebx
c0010ccc:	83 ec 08             	sub    esp,0x8
c0010ccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd3:	85 db                	test   ebx,ebx
c0010cd5:	75 11                	jne    c0010ce8 <setActiveTerminal(VgaText*)+0x1d>
c0010cd7:	c7 44 24 10 2c 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029c2c
c0010cdf:	83 c4 08             	add    esp,0x8
c0010ce2:	5b                   	pop    ebx
c0010ce3:	e9 05 93 00 00       	jmp    c0019fed <Krnl::panic(char const*)>
c0010ce8:	50                   	push   eax
c0010ce9:	50                   	push   eax
c0010cea:	53                   	push   ebx
c0010ceb:	68 3a 9c 02 c0       	push   0xc0029c3a
c0010cf0:	e8 14 1e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0010cf5:	a1 84 db 02 c0       	mov    eax,ds:0xc002db84
c0010cfa:	83 c4 10             	add    esp,0x10
c0010cfd:	85 c0                	test   eax,eax
c0010cff:	74 0c                	je     c0010d0d <setActiveTerminal(VgaText*)+0x42>
c0010d01:	83 ec 0c             	sub    esp,0xc
c0010d04:	50                   	push   eax
c0010d05:	e8 d6 f8 ff ff       	call   c00105e0 <VgaText::updateCursor()>
c0010d0a:	83 c4 10             	add    esp,0x10
c0010d0d:	89 1d 84 db 02 c0    	mov    DWORD PTR ds:0xc002db84,ebx
c0010d13:	51                   	push   ecx
c0010d14:	51                   	push   ecx
c0010d15:	53                   	push   ebx
c0010d16:	68 52 9c 02 c0       	push   0xc0029c52
c0010d1b:	e8 e9 1d 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0010d20:	83 c4 0c             	add    esp,0xc
c0010d23:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d29:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d2f:	53                   	push   ebx
c0010d30:	e8 17 fb ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010d35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d38:	e8 57 ff ff ff       	call   c0010c94 <VgaText::isBlinkDisabled()>
c0010d3d:	5a                   	pop    edx
c0010d3e:	0f b6 c0             	movzx  eax,al
c0010d41:	59                   	pop    ecx
c0010d42:	50                   	push   eax
c0010d43:	53                   	push   ebx
c0010d44:	e8 c1 f8 ff ff       	call   c001060a <VgaText::disableBlink(bool)>
c0010d49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d4c:	e8 6f ff ff ff       	call   c0010cc0 <VgaText::getCursorHeight()>
c0010d51:	5a                   	pop    edx
c0010d52:	59                   	pop    ecx
c0010d53:	50                   	push   eax
c0010d54:	53                   	push   ebx
c0010d55:	e8 48 ff ff ff       	call   c0010ca2 <VgaText::setCursorHeight(int)>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d64:	75 0a                	jne    c0010d70 <setActiveTerminal(VgaText*)+0xa5>
c0010d66:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d70:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d74:	83 c4 08             	add    esp,0x8
c0010d77:	5b                   	pop    ebx
c0010d78:	e9 0f f8 ff ff       	jmp    c001058c <VgaText::load()>

c0010d7d <doTerminalCycle()>:
c0010d7d:	83 ec 18             	sub    esp,0x18
c0010d80:	a1 80 db 02 c0       	mov    eax,ds:0xc002db80
c0010d85:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d8b:	50                   	push   eax
c0010d8c:	a3 80 db 02 c0       	mov    ds:0xc002db80,eax
c0010d91:	e8 35 ff ff ff       	call   c0010ccb <setActiveTerminal(VgaText*)>
c0010d96:	83 c4 1c             	add    esp,0x1c
c0010d99:	c3                   	ret    

c0010d9a <VgaText::doUpdate()>:
c0010d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d9e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010da4:	85 c0                	test   eax,eax
c0010da6:	74 02                	je     c0010daa <VgaText::doUpdate()+0x10>
c0010da8:	ff e0                	jmp    eax
c0010daa:	c3                   	ret    
c0010dab:	90                   	nop

c0010dac <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dac:	55                   	push   ebp
c0010dad:	57                   	push   edi
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 1c             	sub    esp,0x1c
c0010db3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010db7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dbc:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dc3:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dc6:	50                   	push   eax
c0010dc7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dcc:	50                   	push   eax
c0010dcd:	e8 4a f9 ff ff       	call   c001071c <VgaText::combineColours(unsigned char, unsigned char)>
c0010dd2:	59                   	pop    ecx
c0010dd3:	0f b6 c0             	movzx  eax,al
c0010dd6:	5b                   	pop    ebx
c0010dd7:	31 c9                	xor    ecx,ecx
c0010dd9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010de1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010de5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010deb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010def:	0f b7 db             	movzx  ebx,bx
c0010df2:	01 db                	add    ebx,ebx
c0010df4:	01 fb                	add    ebx,edi
c0010df6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010df9:	84 c0                	test   al,al
c0010dfb:	0f 84 38 01 00 00    	je     c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e01:	3c 0d                	cmp    al,0xd
c0010e03:	75 0f                	jne    c0010e14 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e05:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e0f:	e9 1f 01 00 00       	jmp    c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e14:	3c 0a                	cmp    al,0xa
c0010e16:	75 5b                	jne    c0010e73 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e18:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e1e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e28:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e2b:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e31:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e37:	75 12                	jne    c0010e4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e39:	83 ec 0c             	sub    esp,0xc
c0010e3c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e42:	55                   	push   ebp
c0010e43:	e8 e6 f8 ff ff       	call   c001072e <VgaText::scrollScreen()>
c0010e48:	83 c4 10             	add    esp,0x10
c0010e4b:	83 ec 0c             	sub    esp,0xc
c0010e4e:	55                   	push   ebp
c0010e4f:	e8 8c f7 ff ff       	call   c00105e0 <VgaText::updateCursor()>
c0010e54:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e5c:	83 c4 10             	add    esp,0x10
c0010e5f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e65:	31 c9                	xor    ecx,ecx
c0010e67:	0f b7 db             	movzx  ebx,bx
c0010e6a:	01 db                	add    ebx,ebx
c0010e6c:	01 fb                	add    ebx,edi
c0010e6e:	e9 c0 00 00 00       	jmp    c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e73:	3c 08                	cmp    al,0x8
c0010e75:	75 4e                	jne    c0010ec5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e77:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e7b:	53                   	push   ebx
c0010e7c:	53                   	push   ebx
c0010e7d:	6a 01                	push   0x1
c0010e7f:	55                   	push   ebp
c0010e80:	e8 df fc ff ff       	call   c0010b64 <VgaText::decrementCursor(bool)>
c0010e85:	58                   	pop    eax
c0010e86:	5a                   	pop    edx
c0010e87:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e8d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e93:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010e99:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010e9f:	6a 20                	push   0x20
c0010ea1:	55                   	push   ebp
c0010ea2:	e8 2d f9 ff ff       	call   c00107d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ea7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eaf:	83 c4 20             	add    esp,0x20
c0010eb2:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eb8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ebc:	0f b7 db             	movzx  ebx,bx
c0010ebf:	01 db                	add    ebx,ebx
c0010ec1:	01 fb                	add    ebx,edi
c0010ec3:	eb 6e                	jmp    c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ec5:	51                   	push   ecx
c0010ec6:	51                   	push   ecx
c0010ec7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ecb:	50                   	push   eax
c0010ecc:	e8 f1 f8 ff ff       	call   c00107c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ed1:	83 c4 10             	add    esp,0x10
c0010ed4:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ed7:	39 2d 84 db 02 c0    	cmp    DWORD PTR ds:0xc002db84,ebp
c0010edd:	75 2a                	jne    c0010f09 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010edf:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010ee5:	85 c0                	test   eax,eax
c0010ee7:	74 20                	je     c0010f09 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ee9:	52                   	push   edx
c0010eea:	52                   	push   edx
c0010eeb:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010efb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010eff:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f02:	51                   	push   ecx
c0010f03:	55                   	push   ebp
c0010f04:	ff d0                	call   eax
c0010f06:	83 c4 20             	add    esp,0x20
c0010f09:	83 c3 02             	add    ebx,0x2
c0010f0c:	50                   	push   eax
c0010f0d:	50                   	push   eax
c0010f0e:	6a 00                	push   0x0
c0010f10:	55                   	push   ebp
c0010f11:	e8 8c f9 ff ff       	call   c00108a2 <VgaText::incrementCursor(bool)>
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f20:	75 0f                	jne    c0010f31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f22:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f2a:	0f b7 db             	movzx  ebx,bx
c0010f2d:	01 db                	add    ebx,ebx
c0010f2f:	01 fb                	add    ebx,edi
c0010f31:	b1 01                	mov    cl,0x1
c0010f33:	46                   	inc    esi
c0010f34:	e9 bd fe ff ff       	jmp    c0010df6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f39:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f3d:	83 ec 0c             	sub    esp,0xc
c0010f40:	55                   	push   ebp
c0010f41:	e8 9a f6 ff ff       	call   c00105e0 <VgaText::updateCursor()>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f4d:	84 c9                	test   cl,cl
c0010f4f:	74 0c                	je     c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f51:	83 ec 0c             	sub    esp,0xc
c0010f54:	55                   	push   ebp
c0010f55:	e8 40 fe ff ff       	call   c0010d9a <VgaText::doUpdate()>
c0010f5a:	83 c4 10             	add    esp,0x10
c0010f5d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f64:	83 c4 1c             	add    esp,0x1c
c0010f67:	5b                   	pop    ebx
c0010f68:	5e                   	pop    esi
c0010f69:	5f                   	pop    edi
c0010f6a:	5d                   	pop    ebp
c0010f6b:	c3                   	ret    

c0010f6c <VgaText::clearScreen()>:
c0010f6c:	57                   	push   edi
c0010f6d:	56                   	push   esi
c0010f6e:	31 f6                	xor    esi,esi
c0010f70:	53                   	push   ebx
c0010f71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f75:	52                   	push   edx
c0010f76:	6a 00                	push   0x0
c0010f78:	6a 00                	push   0x0
c0010f7a:	53                   	push   ebx
c0010f7b:	e8 cc f8 ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010f80:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f90:	7e 26                	jle    c0010fb8 <VgaText::clearScreen()+0x4c>
c0010f92:	31 ff                	xor    edi,edi
c0010f94:	50                   	push   eax
c0010f95:	50                   	push   eax
c0010f96:	56                   	push   esi
c0010f97:	57                   	push   edi
c0010f98:	47                   	inc    edi
c0010f99:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010f9f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fa5:	6a 20                	push   0x20
c0010fa7:	53                   	push   ebx
c0010fa8:	e8 27 f8 ff ff       	call   c00107d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fad:	83 c4 20             	add    esp,0x20
c0010fb0:	83 ff 50             	cmp    edi,0x50
c0010fb3:	75 df                	jne    c0010f94 <VgaText::clearScreen()+0x28>
c0010fb5:	46                   	inc    esi
c0010fb6:	eb d2                	jmp    c0010f8a <VgaText::clearScreen()+0x1e>
c0010fb8:	83 ec 0c             	sub    esp,0xc
c0010fbb:	53                   	push   ebx
c0010fbc:	e8 d9 fd ff ff       	call   c0010d9a <VgaText::doUpdate()>
c0010fc1:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	5b                   	pop    ebx
c0010fcc:	5e                   	pop    esi
c0010fcd:	5f                   	pop    edi
c0010fce:	c3                   	ret    
c0010fcf:	90                   	nop

c0010fd0 <VgaText::putchar(char)>:
c0010fd0:	56                   	push   esi
c0010fd1:	53                   	push   ebx
c0010fd2:	83 ec 14             	sub    esp,0x14
c0010fd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fdd:	3c 5b                	cmp    al,0x5b
c0010fdf:	75 21                	jne    c0011002 <VgaText::putchar(char)+0x32>
c0010fe1:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010fe8:	74 28                	je     c0011012 <VgaText::putchar(char)+0x42>
c0010fea:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ff3:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010ffd:	e9 e2 00 00 00       	jmp    c00110e4 <VgaText::putchar(char)+0x114>
c0011002:	3c 1b                	cmp    al,0x1b
c0011004:	75 0c                	jne    c0011012 <VgaText::putchar(char)+0x42>
c0011006:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001100d:	e9 d2 00 00 00       	jmp    c00110e4 <VgaText::putchar(char)+0x114>
c0011012:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011018:	84 c9                	test   cl,cl
c001101a:	0f 84 ab 00 00 00    	je     c00110cb <VgaText::putchar(char)+0xfb>
c0011020:	8d 50 c0             	lea    edx,[eax-0x40]
c0011023:	80 fa 3e             	cmp    dl,0x3e
c0011026:	0f 87 82 00 00 00    	ja     c00110ae <VgaText::putchar(char)+0xde>
c001102c:	3c 6d                	cmp    al,0x6d
c001102e:	75 4d                	jne    c001107d <VgaText::putchar(char)+0xad>
c0011030:	31 f6                	xor    esi,esi
c0011032:	31 d2                	xor    edx,edx
c0011034:	31 c0                	xor    eax,eax
c0011036:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001103c:	7e 30                	jle    c001106e <VgaText::putchar(char)+0x9e>
c001103e:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011046:	80 fa 3b             	cmp    dl,0x3b
c0011049:	75 17                	jne    c0011062 <VgaText::putchar(char)+0x92>
c001104b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001104f:	50                   	push   eax
c0011050:	53                   	push   ebx
c0011051:	e8 ee f5 ff ff       	call   c0010644 <VgaText::doANSI_SGR(int)>
c0011056:	59                   	pop    ecx
c0011057:	31 d2                	xor    edx,edx
c0011059:	58                   	pop    eax
c001105a:	31 c0                	xor    eax,eax
c001105c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011060:	eb 09                	jmp    c001106b <VgaText::putchar(char)+0x9b>
c0011062:	6b c0 0a             	imul   eax,eax,0xa
c0011065:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011069:	88 ca                	mov    dl,cl
c001106b:	46                   	inc    esi
c001106c:	eb c8                	jmp    c0011036 <VgaText::putchar(char)+0x66>
c001106e:	84 d2                	test   dl,dl
c0011070:	74 31                	je     c00110a3 <VgaText::putchar(char)+0xd3>
c0011072:	50                   	push   eax
c0011073:	53                   	push   ebx
c0011074:	e8 cb f5 ff ff       	call   c0010644 <VgaText::doANSI_SGR(int)>
c0011079:	58                   	pop    eax
c001107a:	5a                   	pop    edx
c001107b:	eb 26                	jmp    c00110a3 <VgaText::putchar(char)+0xd3>
c001107d:	3c 4a                	cmp    al,0x4a
c001107f:	75 22                	jne    c00110a3 <VgaText::putchar(char)+0xd3>
c0011081:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011088:	75 19                	jne    c00110a3 <VgaText::putchar(char)+0xd3>
c001108a:	83 ec 0c             	sub    esp,0xc
c001108d:	53                   	push   ebx
c001108e:	e8 d9 fe ff ff       	call   c0010f6c <VgaText::clearScreen()>
c0011093:	83 c4 0c             	add    esp,0xc
c0011096:	6a 00                	push   0x0
c0011098:	6a 00                	push   0x0
c001109a:	53                   	push   ebx
c001109b:	e8 ac f7 ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c00110a0:	83 c4 10             	add    esp,0x10
c00110a3:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110ac:	eb 36                	jmp    c00110e4 <VgaText::putchar(char)+0x114>
c00110ae:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110b4:	83 fa 0e             	cmp    edx,0xe
c00110b7:	7f 2b                	jg     c00110e4 <VgaText::putchar(char)+0x114>
c00110b9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110bc:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110c2:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110c9:	eb 19                	jmp    c00110e4 <VgaText::putchar(char)+0x114>
c00110cb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110d1:	0f be c0             	movsx  eax,al
c00110d4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110da:	50                   	push   eax
c00110db:	53                   	push   ebx
c00110dc:	e8 ab fa ff ff       	call   c0010b8c <VgaText::putchar(char, VgaColour, VgaColour)>
c00110e1:	83 c4 10             	add    esp,0x10
c00110e4:	83 c4 14             	add    esp,0x14
c00110e7:	5b                   	pop    ebx
c00110e8:	5e                   	pop    esi
c00110e9:	c3                   	ret    

c00110ea <VgaText::puts(char const*)>:
c00110ea:	53                   	push   ebx
c00110eb:	83 ec 08             	sub    esp,0x8
c00110ee:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00110f5:	84 c0                	test   al,al
c00110f7:	74 12                	je     c001110b <VgaText::puts(char const*)+0x21>
c00110f9:	43                   	inc    ebx
c00110fa:	51                   	push   ecx
c00110fb:	51                   	push   ecx
c00110fc:	50                   	push   eax
c00110fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011101:	e8 ca fe ff ff       	call   c0010fd0 <VgaText::putchar(char)>
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	eb e7                	jmp    c00110f2 <VgaText::puts(char const*)+0x8>
c001110b:	83 c4 08             	add    esp,0x8
c001110e:	5b                   	pop    ebx
c001110f:	c3                   	ret    

c0011110 <VgaText::putx(unsigned int)>:
c0011110:	57                   	push   edi
c0011111:	b9 11 00 00 00       	mov    ecx,0x11
c0011116:	56                   	push   esi
c0011117:	be 6e 9c 02 c0       	mov    esi,0xc0029c6e
c001111c:	53                   	push   ebx
c001111d:	83 ec 20             	sub    esp,0x20
c0011120:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011124:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011128:	fc                   	cld    
c0011129:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001112b:	be 08 00 00 00       	mov    esi,0x8
c0011130:	50                   	push   eax
c0011131:	50                   	push   eax
c0011132:	89 d8                	mov    eax,ebx
c0011134:	c1 e3 04             	shl    ebx,0x4
c0011137:	c1 e8 1c             	shr    eax,0x1c
c001113a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001113f:	50                   	push   eax
c0011140:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011144:	e8 87 fe ff ff       	call   c0010fd0 <VgaText::putchar(char)>
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	4e                   	dec    esi
c001114d:	75 e1                	jne    c0011130 <VgaText::putx(unsigned int)+0x20>
c001114f:	83 c4 20             	add    esp,0x20
c0011152:	5b                   	pop    ebx
c0011153:	5e                   	pop    esi
c0011154:	5f                   	pop    edi
c0011155:	c3                   	ret    

c0011156 <VgaText::VgaText(char const*)>:
c0011156:	57                   	push   edi
c0011157:	56                   	push   esi
c0011158:	53                   	push   ebx
c0011159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115d:	83 ec 08             	sub    esp,0x8
c0011160:	6a 00                	push   0x0
c0011162:	50                   	push   eax
c0011163:	e8 6e 05 00 00       	call   c00116d6 <UnixFile::UnixFile(int)>
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c0011170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011174:	89 10                	mov    DWORD PTR [eax],edx
c0011176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011188:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011196:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001119d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a1:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ac:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ba:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c8:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d3:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111de:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111e4:	bb 60 db 02 c0       	mov    ebx,0xc002db60
c00111e9:	b8 08 00 00 00       	mov    eax,0x8
c00111ee:	fc                   	cld    
c00111ef:	89 d7                	mov    edi,edx
c00111f1:	89 de                	mov    esi,ebx
c00111f3:	89 c1                	mov    ecx,eax
c00111f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fb:	05 1e 10 00 00       	add    eax,0x101e
c0011200:	83 ec 08             	sub    esp,0x8
c0011203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011207:	50                   	push   eax
c0011208:	e8 27 f6 fe ff       	call   c0000834 <strcpy>
c001120d:	83 c4 10             	add    esp,0x10
c0011210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011214:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011222:	83 c0 0c             	add    eax,0xc
c0011225:	83 ec 04             	sub    esp,0x4
c0011228:	68 00 0f 00 00       	push   0xf00
c001122d:	6a 00                	push   0x0
c001122f:	50                   	push   eax
c0011230:	e8 43 f5 fe ff       	call   c0000778 <memset>
c0011235:	83 c4 10             	add    esp,0x10
c0011238:	83 ec 04             	sub    esp,0x4
c001123b:	6a 00                	push   0x0
c001123d:	6a 07                	push   0x7
c001123f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011243:	e8 b4 f4 ff ff       	call   c00106fc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011248:	83 c4 10             	add    esp,0x10
c001124b:	83 ec 08             	sub    esp,0x8
c001124e:	6a 02                	push   0x2
c0011250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011254:	e8 49 fa ff ff       	call   c0010ca2 <VgaText::setCursorHeight(int)>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	83 ec 04             	sub    esp,0x4
c001125f:	6a 00                	push   0x0
c0011261:	6a 00                	push   0x0
c0011263:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011267:	e8 e0 f5 ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c001126c:	83 c4 10             	add    esp,0x10
c001126f:	83 ec 08             	sub    esp,0x8
c0011272:	6a 01                	push   0x1
c0011274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011278:	e8 7d f3 ff ff       	call   c00105fa <VgaText::showCursor(bool)>
c001127d:	83 c4 10             	add    esp,0x10
c0011280:	83 ec 08             	sub    esp,0x8
c0011283:	6a 01                	push   0x1
c0011285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011289:	e8 7c f3 ff ff       	call   c001060a <VgaText::disableBlink(bool)>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011298:	e8 cf fc ff ff       	call   c0010f6c <VgaText::clearScreen()>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a4:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112af:	05 9e 10 00 00       	add    eax,0x109e
c00112b4:	83 ec 04             	sub    esp,0x4
c00112b7:	68 96 00 00 00       	push   0x96
c00112bc:	6a 00                	push   0x0
c00112be:	50                   	push   eax
c00112bf:	e8 b4 f4 fe ff       	call   c0000778 <memset>
c00112c4:	83 c4 10             	add    esp,0x10
c00112c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112cb:	05 34 11 00 00       	add    eax,0x1134
c00112d0:	83 ec 04             	sub    esp,0x4
c00112d3:	68 2c 01 00 00       	push   0x12c
c00112d8:	6a 00                	push   0x0
c00112da:	50                   	push   eax
c00112db:	e8 98 f4 fe ff       	call   c0000778 <memset>
c00112e0:	83 c4 10             	add    esp,0x10
c00112e3:	90                   	nop
c00112e4:	5b                   	pop    ebx
c00112e5:	5e                   	pop    esi
c00112e6:	5f                   	pop    edi
c00112e7:	c3                   	ret    

c00112e8 <VgaText::receiveKey(unsigned char)>:
c00112e8:	55                   	push   ebp
c00112e9:	57                   	push   edi
c00112ea:	56                   	push   esi
c00112eb:	53                   	push   ebx
c00112ec:	83 ec 1c             	sub    esp,0x1c
c00112ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112f7:	84 db                	test   bl,bl
c00112f9:	0f 84 c9 00 00 00    	je     c00113c8 <VgaText::receiveKey(unsigned char)+0xe0>
c00112ff:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011305:	80 fb 08             	cmp    bl,0x8
c0011308:	75 2c                	jne    c0011336 <VgaText::receiveKey(unsigned char)+0x4e>
c001130a:	83 ec 0c             	sub    esp,0xc
c001130d:	57                   	push   edi
c001130e:	e8 81 f4 fe ff       	call   c0000794 <strlen>
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	85 c0                	test   eax,eax
c0011318:	74 41                	je     c001135b <VgaText::receiveKey(unsigned char)+0x73>
c001131a:	50                   	push   eax
c001131b:	50                   	push   eax
c001131c:	6a 08                	push   0x8
c001131e:	56                   	push   esi
c001131f:	e8 ac fc ff ff       	call   c0010fd0 <VgaText::putchar(char)>
c0011324:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011327:	e8 68 f4 fe ff       	call   c0000794 <strlen>
c001132c:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011334:	eb 22                	jmp    c0011358 <VgaText::receiveKey(unsigned char)+0x70>
c0011336:	0f be c3             	movsx  eax,bl
c0011339:	52                   	push   edx
c001133a:	52                   	push   edx
c001133b:	50                   	push   eax
c001133c:	56                   	push   esi
c001133d:	e8 8e fc ff ff       	call   c0010fd0 <VgaText::putchar(char)>
c0011342:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011346:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001134b:	59                   	pop    ecx
c001134c:	5d                   	pop    ebp
c001134d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011351:	50                   	push   eax
c0011352:	57                   	push   edi
c0011353:	e8 1c f6 fe ff       	call   c0000974 <strcat>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011362:	75 05                	jne    c0011369 <VgaText::receiveKey(unsigned char)+0x81>
c0011364:	80 fb 0a             	cmp    bl,0xa
c0011367:	75 53                	jne    c00113bc <VgaText::receiveKey(unsigned char)+0xd4>
c0011369:	83 ec 0c             	sub    esp,0xc
c001136c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011372:	53                   	push   ebx
c0011373:	e8 1c f4 fe ff       	call   c0000794 <strlen>
c0011378:	89 3c 24             	mov    DWORD PTR [esp],edi
c001137b:	89 c5                	mov    ebp,eax
c001137d:	e8 12 f4 fe ff       	call   c0000794 <strlen>
c0011382:	83 c4 10             	add    esp,0x10
c0011385:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011389:	3d 2c 01 00 00       	cmp    eax,0x12c
c001138e:	76 10                	jbe    c00113a0 <VgaText::receiveKey(unsigned char)+0xb8>
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	68 7f 9c 02 c0       	push   0xc0029c7f
c0011398:	e8 50 8c 00 00       	call   c0019fed <Krnl::panic(char const*)>
c001139d:	83 c4 10             	add    esp,0x10
c00113a0:	50                   	push   eax
c00113a1:	50                   	push   eax
c00113a2:	57                   	push   edi
c00113a3:	53                   	push   ebx
c00113a4:	e8 cb f5 fe ff       	call   c0000974 <strcat>
c00113a9:	83 c4 0c             	add    esp,0xc
c00113ac:	68 96 00 00 00       	push   0x96
c00113b1:	6a 00                	push   0x0
c00113b3:	57                   	push   edi
c00113b4:	e8 bf f3 fe ff       	call   c0000778 <memset>
c00113b9:	83 c4 10             	add    esp,0x10
c00113bc:	83 ec 0c             	sub    esp,0xc
c00113bf:	56                   	push   esi
c00113c0:	e8 d5 f9 ff ff       	call   c0010d9a <VgaText::doUpdate()>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	83 c4 1c             	add    esp,0x1c
c00113cb:	5b                   	pop    ebx
c00113cc:	5e                   	pop    esi
c00113cd:	5f                   	pop    edi
c00113ce:	5d                   	pop    ebp
c00113cf:	c3                   	ret    

c00113d0 <VgaText::write(unsigned long long, void*, int*)>:
c00113d0:	55                   	push   ebp
c00113d1:	57                   	push   edi
c00113d2:	56                   	push   esi
c00113d3:	53                   	push   ebx
c00113d4:	83 ec 0c             	sub    esp,0xc
c00113d7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113db:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113df:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113e3:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113ea:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113ed:	39 eb                	cmp    ebx,ebp
c00113ef:	74 13                	je     c0011404 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113f1:	43                   	inc    ebx
c00113f2:	50                   	push   eax
c00113f3:	50                   	push   eax
c00113f4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113f8:	50                   	push   eax
c00113f9:	56                   	push   esi
c00113fa:	e8 d1 fb ff ff       	call   c0010fd0 <VgaText::putchar(char)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	eb e9                	jmp    c00113ed <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011404:	83 ec 0c             	sub    esp,0xc
c0011407:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001140e:	56                   	push   esi
c001140f:	e8 86 f9 ff ff       	call   c0010d9a <VgaText::doUpdate()>
c0011414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011418:	89 38                	mov    DWORD PTR [eax],edi
c001141a:	83 c4 1c             	add    esp,0x1c
c001141d:	31 c0                	xor    eax,eax
c001141f:	5b                   	pop    ebx
c0011420:	5e                   	pop    esi
c0011421:	5f                   	pop    edi
c0011422:	5d                   	pop    ebp
c0011423:	c3                   	ret    

c0011424 <newTerminal(char*)>:
c0011424:	83 ec 28             	sub    esp,0x28
c0011427:	68 60 12 00 00       	push   0x1260
c001142c:	e8 09 e4 ff ff       	call   c000f83a <malloc>
c0011431:	5a                   	pop    edx
c0011432:	59                   	pop    ecx
c0011433:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011437:	50                   	push   eax
c0011438:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001143c:	e8 15 fd ff ff       	call   c0011156 <VgaText::VgaText(char const*)>
c0011441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011445:	83 c4 2c             	add    esp,0x2c
c0011448:	c3                   	ret    
c0011449:	90                   	nop

c001144a <TSS::TSS()>:
c001144a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001144e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011455:	90                   	nop
c0011456:	c3                   	ret    
c0011457:	90                   	nop

c0011458 <TSS::setESP(unsigned long)>:
c0011458:	55                   	push   ebp
c0011459:	89 e5                	mov    ebp,esp
c001145b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011461:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011464:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011467:	90                   	nop
c0011468:	5d                   	pop    ebp
c0011469:	c3                   	ret    

c001146a <TSS::flush()>:
c001146a:	55                   	push   ebp
c001146b:	89 e5                	mov    ebp,esp
c001146d:	83 ec 10             	sub    esp,0x10
c0011470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011473:	8b 00                	mov    eax,DWORD PTR [eax]
c0011475:	83 c8 03             	or     eax,0x3
c0011478:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001147c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011480:	66 89 d0             	mov    ax,dx
c0011483:	0f 00 d8             	ltr    ax
c0011486:	90                   	nop
c0011487:	c9                   	leave  
c0011488:	c3                   	ret    
c0011489:	90                   	nop

c001148a <TSS::setup(unsigned long, unsigned long)>:
c001148a:	55                   	push   ebp
c001148b:	89 e5                	mov    ebp,esp
c001148d:	83 ec 18             	sub    esp,0x18
c0011490:	83 ec 0c             	sub    esp,0xc
c0011493:	6a 68                	push   0x68
c0011495:	e8 a0 e3 ff ff       	call   c000f83a <malloc>
c001149a:	83 c4 10             	add    esp,0x10
c001149d:	89 c2                	mov    edx,eax
c001149f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ab:	83 ec 04             	sub    esp,0x4
c00114ae:	6a 68                	push   0x68
c00114b0:	6a 00                	push   0x0
c00114b2:	50                   	push   eax
c00114b3:	e8 c0 f2 fe ff       	call   c0000778 <memset>
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c1:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cd:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e5:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f1:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fd:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001150f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011515:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001151b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011521:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011530:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011539:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001153c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001153f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011542:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011545:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001154c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011552:	0f 20 da             	mov    edx,cr3
c0011555:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011558:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001155b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001155e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011561:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	50                   	push   eax
c0011568:	8d 45 ec             	lea    eax,[ebp-0x14]
c001156b:	50                   	push   eax
c001156c:	e8 a7 da ff ff       	call   c000f018 <GDTEntry::setBase(unsigned int)>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	83 ec 08             	sub    esp,0x8
c0011577:	6a 68                	push   0x68
c0011579:	8d 45 ec             	lea    eax,[ebp-0x14]
c001157c:	50                   	push   eax
c001157d:	e8 b2 da ff ff       	call   c000f034 <GDTEntry::setLimit(unsigned int)>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011589:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001158c:	83 e0 0f             	and    eax,0xf
c001158f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011592:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011595:	83 c8 40             	or     eax,0x40
c0011598:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001159b:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00115a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115a6:	05 78 01 00 00       	add    eax,0x178
c00115ab:	83 ec 04             	sub    esp,0x4
c00115ae:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115b1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115b4:	50                   	push   eax
c00115b5:	e8 ae da ff ff       	call   c000f068 <GDT::addEntry(GDTEntry)>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	89 c2                	mov    edx,eax
c00115bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c2:	89 10                	mov    DWORD PTR [eax],edx
c00115c4:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00115c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115cf:	05 78 01 00 00       	add    eax,0x178
c00115d4:	83 ec 0c             	sub    esp,0xc
c00115d7:	50                   	push   eax
c00115d8:	e8 cf da ff ff       	call   c000f0ac <GDT::flush()>
c00115dd:	83 c4 10             	add    esp,0x10
c00115e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00115e5:	83 ec 08             	sub    esp,0x8
c00115e8:	50                   	push   eax
c00115e9:	68 e8 9c 02 c0       	push   0xc0029ce8
c00115ee:	e8 16 15 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00115f3:	83 c4 10             	add    esp,0x10
c00115f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00115fb:	c9                   	leave  
c00115fc:	c3                   	ret    
c00115fd:	90                   	nop

c00115fe <ReservedFilename::read(unsigned long long, void*, int*)>:
c00115fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011609:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001160e:	75 08                	jne    c0011618 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011610:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011616:	eb 38                	jmp    c0011650 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011618:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001161d:	75 17                	jne    c0011636 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001161f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011624:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011627:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001162d:	8b 10                	mov    edx,DWORD PTR [eax]
c001162f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011633:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011636:	89 c1                	mov    ecx,eax
c0011638:	83 e1 fd             	and    ecx,0xfffffffd
c001163b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011641:	74 cd                	je     c0011610 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011643:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011648:	83 e0 ef             	and    eax,0xffffffef
c001164b:	83 f8 08             	cmp    eax,0x8
c001164e:	76 c0                	jbe    c0011610 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011650:	31 c0                	xor    eax,eax
c0011652:	c3                   	ret    
c0011653:	90                   	nop

c0011654 <ReservedFilename::isAtty()>:
c0011654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011658:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001165b:	31 c0                	xor    eax,eax
c001165d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011663:	74 09                	je     c001166e <ReservedFilename::isAtty()+0x1a>
c0011665:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001166b:	0f 94 c0             	sete   al
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011674:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001167b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001167f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011684:	75 08                	jne    c001168e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011686:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001168c:	eb 3d                	jmp    c00116cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001168e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011693:	75 17                	jne    c00116ac <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011695:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001169a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001169d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00116a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116b1:	75 04                	jne    c00116b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116b3:	89 0a                	mov    DWORD PTR [edx],ecx
c00116b5:	eb 14                	jmp    c00116cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116bc:	74 c8                	je     c0011686 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116be:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116c3:	83 e0 ef             	and    eax,0xffffffef
c00116c6:	83 f8 08             	cmp    eax,0x8
c00116c9:	76 bb                	jbe    c0011686 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116cb:	31 c0                	xor    eax,eax
c00116cd:	c3                   	ret    

c00116ce <UnixFile::getFileDescriptor()>:
c00116ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d5:	c3                   	ret    

c00116d6 <UnixFile::UnixFile(int)>:
c00116d6:	53                   	push   ebx
c00116d7:	83 ec 28             	sub    esp,0x28
c00116da:	ba d4 9d 02 c0       	mov    edx,0xc0029dd4
c00116df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e3:	89 10                	mov    DWORD PTR [eax],edx
c00116e5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116ed:	0f 8f 8c 01 00 00    	jg     c001187f <UnixFile::UnixFile(int)+0x1a9>
c00116f3:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c00116f8:	8d 50 01             	lea    edx,[eax+0x1]
c00116fb:	89 15 40 ca 02 c0    	mov    DWORD PTR ds:0xc002ca40,edx
c0011701:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011705:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011708:	83 ec 08             	sub    esp,0x8
c001170b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001170f:	68 18 dc 02 c0       	push   0xc002dc18
c0011714:	e8 b7 68 01 00       	call   c0027fd0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	a0 14 dc 02 c0       	mov    al,ds:0xc002dc14
c0011721:	83 f0 01             	xor    eax,0x1
c0011724:	84 c0                	test   al,al
c0011726:	0f 84 54 01 00 00    	je     c0011880 <UnixFile::UnixFile(int)+0x1aa>
c001172c:	c6 05 14 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc14,0x1
c0011733:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001173b:	83 ec 0c             	sub    esp,0xc
c001173e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011742:	e8 f3 e0 ff ff       	call   c000f83a <malloc>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	89 c3                	mov    ebx,eax
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	68 03 ff ff 0f       	push   0xfffff03
c0011754:	53                   	push   ebx
c0011755:	e8 2c 01 00 00       	call   c0011886 <ReservedFilename::ReservedFilename(int)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	89 1d 0c dc 02 c0    	mov    DWORD PTR ds:0xc002dc0c,ebx
c0011763:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001176b:	83 ec 0c             	sub    esp,0xc
c001176e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011772:	e8 c3 e0 ff ff       	call   c000f83a <malloc>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	89 c3                	mov    ebx,eax
c001177c:	83 ec 08             	sub    esp,0x8
c001177f:	68 01 ff ff 0f       	push   0xfffff01
c0011784:	53                   	push   ebx
c0011785:	e8 fc 00 00 00       	call   c0011886 <ReservedFilename::ReservedFilename(int)>
c001178a:	83 c4 10             	add    esp,0x10
c001178d:	89 1d 10 dc 02 c0    	mov    DWORD PTR ds:0xc002dc10,ebx
c0011793:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001179b:	83 ec 0c             	sub    esp,0xc
c001179e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117a2:	e8 93 e0 ff ff       	call   c000f83a <malloc>
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	89 c3                	mov    ebx,eax
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	68 00 ff ff 0f       	push   0xfffff00
c00117b4:	53                   	push   ebx
c00117b5:	e8 cc 00 00 00       	call   c0011886 <ReservedFilename::ReservedFilename(int)>
c00117ba:	83 c4 10             	add    esp,0x10
c00117bd:	89 1d 04 dc 02 c0    	mov    DWORD PTR ds:0xc002dc04,ebx
c00117c3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117cb:	83 ec 0c             	sub    esp,0xc
c00117ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117d2:	e8 63 e0 ff ff       	call   c000f83a <malloc>
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	89 c3                	mov    ebx,eax
c00117dc:	83 ec 08             	sub    esp,0x8
c00117df:	68 02 ff ff 0f       	push   0xfffff02
c00117e4:	53                   	push   ebx
c00117e5:	e8 9c 00 00 00       	call   c0011886 <ReservedFilename::ReservedFilename(int)>
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	89 1d 08 dc 02 c0    	mov    DWORD PTR ds:0xc002dc08,ebx
c00117f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117fb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011800:	7f 7e                	jg     c0011880 <UnixFile::UnixFile(int)+0x1aa>
c0011802:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001180a:	83 ec 0c             	sub    esp,0xc
c001180d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011811:	e8 24 e0 ff ff       	call   c000f83a <malloc>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	89 c3                	mov    ebx,eax
c001181b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001181f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011824:	83 ec 08             	sub    esp,0x8
c0011827:	50                   	push   eax
c0011828:	53                   	push   ebx
c0011829:	e8 58 00 00 00       	call   c0011886 <ReservedFilename::ReservedFilename(int)>
c001182e:	83 c4 10             	add    esp,0x10
c0011831:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011835:	89 1c 85 e0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2420],ebx
c001183c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011844:	83 ec 0c             	sub    esp,0xc
c0011847:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001184b:	e8 ea df ff ff       	call   c000f83a <malloc>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	89 c3                	mov    ebx,eax
c0011855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011859:	05 20 ff ff 0f       	add    eax,0xfffff20
c001185e:	83 ec 08             	sub    esp,0x8
c0011861:	50                   	push   eax
c0011862:	53                   	push   ebx
c0011863:	e8 1e 00 00 00       	call   c0011886 <ReservedFilename::ReservedFilename(int)>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001186f:	89 1c 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],ebx
c0011876:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001187a:	e9 7c ff ff ff       	jmp    c00117fb <UnixFile::UnixFile(int)+0x125>
c001187f:	90                   	nop
c0011880:	83 c4 28             	add    esp,0x28
c0011883:	5b                   	pop    ebx
c0011884:	c3                   	ret    
c0011885:	90                   	nop

c0011886 <ReservedFilename::ReservedFilename(int)>:
c0011886:	83 ec 0c             	sub    esp,0xc
c0011889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001188d:	83 ec 08             	sub    esp,0x8
c0011890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011894:	50                   	push   eax
c0011895:	e8 3c fe ff ff       	call   c00116d6 <UnixFile::UnixFile(int)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	ba f0 9d 02 c0       	mov    edx,0xc0029df0
c00118a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a6:	89 10                	mov    DWORD PTR [eax],edx
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118b3:	90                   	nop
c00118b4:	83 c4 0c             	add    esp,0xc
c00118b7:	c3                   	ret    

c00118b8 <UnixFile::~UnixFile()>:
c00118b8:	83 ec 1c             	sub    esp,0x1c
c00118bb:	ba d4 9d 02 c0       	mov    edx,0xc0029dd4
c00118c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118c4:	89 10                	mov    DWORD PTR [eax],edx
c00118c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118cd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118d2:	7f 73                	jg     c0011947 <UnixFile::~UnixFile()+0x8f>
c00118d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118dc:	83 ec 0c             	sub    esp,0xc
c00118df:	68 18 dc 02 c0       	push   0xc002dc18
c00118e4:	e8 bb 67 01 00       	call   c00280a4 <LinkedList<UnixFile>::getFirstElement()>
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118f0:	83 ec 0c             	sub    esp,0xc
c00118f3:	68 18 dc 02 c0       	push   0xc002dc18
c00118f8:	e8 af 67 01 00       	call   c00280ac <LinkedList<UnixFile>::removeFirst()>
c00118fd:	83 c4 10             	add    esp,0x10
c0011900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011904:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011908:	74 40                	je     c001194a <UnixFile::~UnixFile()+0x92>
c001190a:	83 ec 08             	sub    esp,0x8
c001190d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011911:	68 18 dc 02 c0       	push   0xc002dc18
c0011916:	e8 b5 66 01 00       	call   c0027fd0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011922:	8d 50 01             	lea    edx,[eax+0x1]
c0011925:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011929:	3d 88 13 00 00       	cmp    eax,0x1388
c001192e:	0f 94 c0             	sete   al
c0011931:	84 c0                	test   al,al
c0011933:	74 a7                	je     c00118dc <UnixFile::~UnixFile()+0x24>
c0011935:	83 ec 0c             	sub    esp,0xc
c0011938:	68 ac 9d 02 c0       	push   0xc0029dac
c001193d:	e8 ab 86 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	eb 95                	jmp    c00118dc <UnixFile::~UnixFile()+0x24>
c0011947:	90                   	nop
c0011948:	eb 01                	jmp    c001194b <UnixFile::~UnixFile()+0x93>
c001194a:	90                   	nop
c001194b:	90                   	nop
c001194c:	83 c4 1c             	add    esp,0x1c
c001194f:	c3                   	ret    

c0011950 <UnixFile::~UnixFile()>:
c0011950:	83 ec 0c             	sub    esp,0xc
c0011953:	83 ec 0c             	sub    esp,0xc
c0011956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195a:	e8 59 ff ff ff       	call   c00118b8 <UnixFile::~UnixFile()>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	83 ec 08             	sub    esp,0x8
c0011965:	6a 0c                	push   0xc
c0011967:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001196b:	e8 b9 10 00 00       	call   c0012a29 <operator delete(void*, unsigned long)>
c0011970:	83 c4 10             	add    esp,0x10
c0011973:	83 c4 0c             	add    esp,0xc
c0011976:	c3                   	ret    
c0011977:	90                   	nop

c0011978 <ReservedFilename::~ReservedFilename()>:
c0011978:	83 ec 0c             	sub    esp,0xc
c001197b:	ba f0 9d 02 c0       	mov    edx,0xc0029df0
c0011980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011984:	89 10                	mov    DWORD PTR [eax],edx
c0011986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198a:	83 ec 0c             	sub    esp,0xc
c001198d:	50                   	push   eax
c001198e:	e8 25 ff ff ff       	call   c00118b8 <UnixFile::~UnixFile()>
c0011993:	83 c4 10             	add    esp,0x10
c0011996:	90                   	nop
c0011997:	83 c4 0c             	add    esp,0xc
c001199a:	c3                   	ret    
c001199b:	90                   	nop

c001199c <ReservedFilename::~ReservedFilename()>:
c001199c:	83 ec 0c             	sub    esp,0xc
c001199f:	83 ec 0c             	sub    esp,0xc
c00119a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119a6:	e8 cd ff ff ff       	call   c0011978 <ReservedFilename::~ReservedFilename()>
c00119ab:	83 c4 10             	add    esp,0x10
c00119ae:	83 ec 08             	sub    esp,0x8
c00119b1:	6a 0c                	push   0xc
c00119b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119b7:	e8 6d 10 00 00       	call   c0012a29 <operator delete(void*, unsigned long)>
c00119bc:	83 c4 10             	add    esp,0x10
c00119bf:	83 c4 0c             	add    esp,0xc
c00119c2:	c3                   	ret    

c00119c3 <getFromFileDescriptor(int)>:
c00119c3:	53                   	push   ebx
c00119c4:	83 ec 08             	sub    esp,0x8
c00119c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119cb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119d1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119d7:	7f 2c                	jg     c0011a05 <getFromFileDescriptor(int)+0x42>
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	68 18 dc 02 c0       	push   0xc002dc18
c00119e1:	e8 be 66 01 00       	call   c00280a4 <LinkedList<UnixFile>::getFirstElement()>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	85 c0                	test   eax,eax
c00119eb:	75 04                	jne    c00119f1 <getFromFileDescriptor(int)+0x2e>
c00119ed:	31 c0                	xor    eax,eax
c00119ef:	eb 6e                	jmp    c0011a5f <getFromFileDescriptor(int)+0x9c>
c00119f1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119f4:	74 69                	je     c0011a5f <getFromFileDescriptor(int)+0x9c>
c00119f6:	52                   	push   edx
c00119f7:	52                   	push   edx
c00119f8:	50                   	push   eax
c00119f9:	68 18 dc 02 c0       	push   0xc002dc18
c00119fe:	e8 4b 67 01 00       	call   c002814e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a03:	eb e1                	jmp    c00119e6 <getFromFileDescriptor(int)+0x23>
c0011a05:	a1 0c dc 02 c0       	mov    eax,ds:0xc002dc0c
c0011a0a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a10:	74 4d                	je     c0011a5f <getFromFileDescriptor(int)+0x9c>
c0011a12:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0011a17:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a1d:	74 40                	je     c0011a5f <getFromFileDescriptor(int)+0x9c>
c0011a1f:	a1 08 dc 02 c0       	mov    eax,ds:0xc002dc08
c0011a24:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a2a:	74 33                	je     c0011a5f <getFromFileDescriptor(int)+0x9c>
c0011a2c:	a1 04 dc 02 c0       	mov    eax,ds:0xc002dc04
c0011a31:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a37:	74 26                	je     c0011a5f <getFromFileDescriptor(int)+0x9c>
c0011a39:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a3f:	83 f8 08             	cmp    eax,0x8
c0011a42:	77 09                	ja     c0011a4d <getFromFileDescriptor(int)+0x8a>
c0011a44:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c0011a4b:	eb 12                	jmp    c0011a5f <getFromFileDescriptor(int)+0x9c>
c0011a4d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a53:	83 fb 08             	cmp    ebx,0x8
c0011a56:	77 95                	ja     c00119ed <getFromFileDescriptor(int)+0x2a>
c0011a58:	8b 04 9d a0 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2460]
c0011a5f:	83 c4 08             	add    esp,0x8
c0011a62:	5b                   	pop    ebx
c0011a63:	c3                   	ret    

c0011a64 <__static_initialization_and_destruction_0(int, int)>:
c0011a64:	83 ec 0c             	sub    esp,0xc
c0011a67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a6c:	75 34                	jne    c0011aa2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a76:	75 2a                	jne    c0011aa2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a78:	83 ec 0c             	sub    esp,0xc
c0011a7b:	68 18 dc 02 c0       	push   0xc002dc18
c0011a80:	e8 f3 64 01 00       	call   c0027f78 <LinkedList<UnixFile>::LinkedList()>
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	83 ec 04             	sub    esp,0x4
c0011a8b:	68 c4 c9 02 c0       	push   0xc002c9c4
c0011a90:	68 18 dc 02 c0       	push   0xc002dc18
c0011a95:	68 76 7f 02 c0       	push   0xc0027f76
c0011a9a:	e8 04 0f 00 00       	call   c00129a3 <__cxa_atexit>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	90                   	nop
c0011aa3:	83 c4 0c             	add    esp,0xc
c0011aa6:	c3                   	ret    

c0011aa7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011aa7:	83 ec 0c             	sub    esp,0xc
c0011aaa:	83 ec 08             	sub    esp,0x8
c0011aad:	68 ff ff 00 00       	push   0xffff
c0011ab2:	6a 01                	push   0x1
c0011ab4:	e8 ab ff ff ff       	call   c0011a64 <__static_initialization_and_destruction_0(int, int)>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	83 c4 0c             	add    esp,0xc
c0011abf:	c3                   	ret    

c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ac0:	53                   	push   ebx
c0011ac1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ac5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ac9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011acf:	89 c8                	mov    eax,ecx
c0011ad1:	d1 e8                	shr    eax,1
c0011ad3:	03 05 48 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca48
c0011ad9:	83 e1 01             	and    ecx,0x1
c0011adc:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ade:	75 09                	jne    c0011ae9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011ae0:	83 e2 f0             	and    edx,0xfffffff0
c0011ae3:	09 da                	or     edx,ebx
c0011ae5:	88 10                	mov    BYTE PTR [eax],dl
c0011ae7:	5b                   	pop    ebx
c0011ae8:	c3                   	ret    
c0011ae9:	c1 e3 04             	shl    ebx,0x4
c0011aec:	83 e2 0f             	and    edx,0xf
c0011aef:	09 da                	or     edx,ebx
c0011af1:	88 10                	mov    BYTE PTR [eax],dl
c0011af3:	5b                   	pop    ebx
c0011af4:	c3                   	ret    

c0011af5 <Virt::getPageState(unsigned long)>:
c0011af5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011af9:	8b 0d 48 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca48
c0011aff:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b05:	89 d0                	mov    eax,edx
c0011b07:	d1 e8                	shr    eax,1
c0011b09:	83 e2 01             	and    edx,0x1
c0011b0c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b0f:	75 04                	jne    c0011b15 <Virt::getPageState(unsigned long)+0x20>
c0011b11:	83 e0 0f             	and    eax,0xf
c0011b14:	c3                   	ret    
c0011b15:	c0 e8 04             	shr    al,0x4
c0011b18:	c3                   	ret    

c0011b19 <Virt::allocateKernelVirtualPages(int)>:
c0011b19:	55                   	push   ebp
c0011b1a:	31 ed                	xor    ebp,ebp
c0011b1c:	57                   	push   edi
c0011b1d:	56                   	push   esi
c0011b1e:	53                   	push   ebx
c0011b1f:	31 db                	xor    ebx,ebx
c0011b21:	83 ec 1c             	sub    esp,0x1c
c0011b24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b28:	8b 3d 44 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca44
c0011b2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b33:	57                   	push   edi
c0011b34:	e8 bc ff ff ff       	call   c0011af5 <Virt::getPageState(unsigned long)>
c0011b39:	5a                   	pop    edx
c0011b3a:	84 c0                	test   al,al
c0011b3c:	75 3a                	jne    c0011b78 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b3e:	85 db                	test   ebx,ebx
c0011b40:	75 02                	jne    c0011b44 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b42:	89 fd                	mov    ebp,edi
c0011b44:	43                   	inc    ebx
c0011b45:	39 f3                	cmp    ebx,esi
c0011b47:	74 5a                	je     c0011ba3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b49:	47                   	inc    edi
c0011b4a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b50:	76 31                	jbe    c0011b83 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b52:	c7 05 44 ca 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ca44,0xc8000
c0011b5c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b61:	75 28                	jne    c0011b8b <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b63:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b68:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b6d:	57                   	push   edi
c0011b6e:	e8 82 ff ff ff       	call   c0011af5 <Virt::getPageState(unsigned long)>
c0011b73:	5a                   	pop    edx
c0011b74:	84 c0                	test   al,al
c0011b76:	74 c6                	je     c0011b3e <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b78:	31 db                	xor    ebx,ebx
c0011b7a:	47                   	inc    edi
c0011b7b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b81:	77 cf                	ja     c0011b52 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b83:	89 3d 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,edi
c0011b89:	eb a8                	jmp    c0011b33 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b8b:	83 ec 0c             	sub    esp,0xc
c0011b8e:	68 04 9e 02 c0       	push   0xc0029e04
c0011b93:	e8 55 84 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0011b98:	8b 3d 44 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca44
c0011b9e:	83 c4 10             	add    esp,0x10
c0011ba1:	eb 90                	jmp    c0011b33 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ba3:	89 2d 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,ebp
c0011ba9:	4b                   	dec    ebx
c0011baa:	74 5f                	je     c0011c0b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bac:	85 f6                	test   esi,esi
c0011bae:	74 3d                	je     c0011bed <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bb0:	89 e8                	mov    eax,ebp
c0011bb2:	31 db                	xor    ebx,ebx
c0011bb4:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bb7:	eb 14                	jmp    c0011bcd <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bb9:	6a 01                	push   0x1
c0011bbb:	43                   	inc    ebx
c0011bbc:	50                   	push   eax
c0011bbd:	e8 fe fe ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc2:	58                   	pop    eax
c0011bc3:	39 f3                	cmp    ebx,esi
c0011bc5:	5a                   	pop    edx
c0011bc6:	74 25                	je     c0011bed <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bc8:	a1 44 ca 02 c0       	mov    eax,ds:0xc002ca44
c0011bcd:	8d 50 01             	lea    edx,[eax+0x1]
c0011bd0:	85 db                	test   ebx,ebx
c0011bd2:	89 15 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,edx
c0011bd8:	74 20                	je     c0011bfa <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011bda:	39 df                	cmp    edi,ebx
c0011bdc:	75 db                	jne    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011bde:	6a 03                	push   0x3
c0011be0:	43                   	inc    ebx
c0011be1:	50                   	push   eax
c0011be2:	e8 d9 fe ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be7:	59                   	pop    ecx
c0011be8:	39 f3                	cmp    ebx,esi
c0011bea:	58                   	pop    eax
c0011beb:	75 db                	jne    c0011bc8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bed:	83 c4 1c             	add    esp,0x1c
c0011bf0:	89 e8                	mov    eax,ebp
c0011bf2:	5b                   	pop    ebx
c0011bf3:	c1 e0 0c             	shl    eax,0xc
c0011bf6:	5e                   	pop    esi
c0011bf7:	5f                   	pop    edi
c0011bf8:	5d                   	pop    ebp
c0011bf9:	c3                   	ret    
c0011bfa:	6a 02                	push   0x2
c0011bfc:	bb 01 00 00 00       	mov    ebx,0x1
c0011c01:	50                   	push   eax
c0011c02:	e8 b9 fe ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c07:	58                   	pop    eax
c0011c08:	5a                   	pop    edx
c0011c09:	eb bd                	jmp    c0011bc8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c0b:	6a 04                	push   0x4
c0011c0d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c10:	55                   	push   ebp
c0011c11:	a3 44 ca 02 c0       	mov    ds:0xc002ca44,eax
c0011c16:	e8 a5 fe ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c1b:	59                   	pop    ecx
c0011c1c:	89 e8                	mov    eax,ebp
c0011c1e:	5b                   	pop    ebx
c0011c1f:	c1 e0 0c             	shl    eax,0xc
c0011c22:	83 c4 1c             	add    esp,0x1c
c0011c25:	5b                   	pop    ebx
c0011c26:	5e                   	pop    esi
c0011c27:	5f                   	pop    edi
c0011c28:	5d                   	pop    ebp
c0011c29:	c3                   	ret    

c0011c2a <Virt::virtualMemorySetup()>:
c0011c2a:	53                   	push   ebx
c0011c2b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c30:	83 ec 08             	sub    esp,0x8
c0011c33:	6a 0f                	push   0xf
c0011c35:	53                   	push   ebx
c0011c36:	43                   	inc    ebx
c0011c37:	e8 84 fe ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c3c:	59                   	pop    ecx
c0011c3d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c43:	58                   	pop    eax
c0011c44:	75 ed                	jne    c0011c33 <Virt::virtualMemorySetup()+0x9>
c0011c46:	83 ec 08             	sub    esp,0x8
c0011c49:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c4e:	68 00 00 00 c8       	push   0xc8000000
c0011c53:	68 8b 9f 02 c0       	push   0xc0029f8b
c0011c58:	e8 ac 0e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0011c5d:	58                   	pop    eax
c0011c5e:	5a                   	pop    edx
c0011c5f:	68 00 f0 ff ef       	push   0xeffff000
c0011c64:	68 9f 9f 02 c0       	push   0xc0029f9f
c0011c69:	e8 9b 0e 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0011c6e:	83 c4 10             	add    esp,0x10
c0011c71:	83 ec 08             	sub    esp,0x8
c0011c74:	6a 00                	push   0x0
c0011c76:	53                   	push   ebx
c0011c77:	43                   	inc    ebx
c0011c78:	e8 43 fe ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c86:	75 e9                	jne    c0011c71 <Virt::virtualMemorySetup()+0x47>
c0011c88:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c8d:	83 ec 08             	sub    esp,0x8
c0011c90:	6a 0f                	push   0xf
c0011c92:	53                   	push   ebx
c0011c93:	43                   	inc    ebx
c0011c94:	e8 27 fe ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c99:	83 c4 10             	add    esp,0x10
c0011c9c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ca2:	75 e9                	jne    c0011c8d <Virt::virtualMemorySetup()+0x63>
c0011ca4:	83 c4 08             	add    esp,0x8
c0011ca7:	5b                   	pop    ebx
c0011ca8:	c3                   	ret    

c0011ca9 <Virt::getAKernelVAS()>:
c0011ca9:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c0011cae:	c3                   	ret    

c0011caf <Virt::setupPageSwapping(int)>:
c0011caf:	57                   	push   edi
c0011cb0:	56                   	push   esi
c0011cb1:	53                   	push   ebx
c0011cb2:	83 ec 1c             	sub    esp,0x1c
c0011cb5:	68 14 01 00 00       	push   0x114
c0011cba:	e8 7b db ff ff       	call   c000f83a <malloc>
c0011cbf:	83 c4 0c             	add    esp,0xc
c0011cc2:	89 c6                	mov    esi,eax
c0011cc4:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c0011cca:	68 b3 9f 02 c0       	push   0xc0029fb3
c0011ccf:	50                   	push   eax
c0011cd0:	e8 8d 13 00 00       	call   c0013062 <File::File(char const*, Process*)>
c0011cd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cd8:	e8 61 15 00 00       	call   c001323e <File::unlink()>
c0011cdd:	58                   	pop    eax
c0011cde:	5a                   	pop    edx
c0011cdf:	6a 12                	push   0x12
c0011ce1:	56                   	push   esi
c0011ce2:	e8 df 13 00 00       	call   c00130c6 <File::open(FileOpenMode)>
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	85 c0                	test   eax,eax
c0011cec:	0f 85 ca 00 00 00    	jne    c0011dbc <Virt::setupPageSwapping(int)+0x10d>
c0011cf2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cf6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cfe:	c1 e3 08             	shl    ebx,0x8
c0011d01:	83 ec 0c             	sub    esp,0xc
c0011d04:	68 00 00 01 00       	push   0x10000
c0011d09:	e8 2c db ff ff       	call   c000f83a <malloc>
c0011d0e:	83 c4 0c             	add    esp,0xc
c0011d11:	89 c7                	mov    edi,eax
c0011d13:	68 00 00 01 00       	push   0x10000
c0011d18:	6a 00                	push   0x0
c0011d1a:	50                   	push   eax
c0011d1b:	e8 58 ea fe ff       	call   c0000778 <memset>
c0011d20:	83 c4 10             	add    esp,0x10
c0011d23:	85 db                	test   ebx,ebx
c0011d25:	79 03                	jns    c0011d2a <Virt::setupPageSwapping(int)+0x7b>
c0011d27:	83 c3 0f             	add    ebx,0xf
c0011d2a:	c1 fb 04             	sar    ebx,0x4
c0011d2d:	4b                   	dec    ebx
c0011d2e:	83 fb ff             	cmp    ebx,0xffffffff
c0011d31:	74 4b                	je     c0011d7e <Virt::setupPageSwapping(int)+0xcf>
c0011d33:	83 ec 0c             	sub    esp,0xc
c0011d36:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d38:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d3c:	52                   	push   edx
c0011d3d:	57                   	push   edi
c0011d3e:	6a 00                	push   0x0
c0011d40:	68 00 00 01 00       	push   0x10000
c0011d45:	56                   	push   esi
c0011d46:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d49:	83 c4 20             	add    esp,0x20
c0011d4c:	85 c0                	test   eax,eax
c0011d4e:	75 59                	jne    c0011da9 <Virt::setupPageSwapping(int)+0xfa>
c0011d50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d54:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d59:	74 d2                	je     c0011d2d <Virt::setupPageSwapping(int)+0x7e>
c0011d5b:	83 ec 08             	sub    esp,0x8
c0011d5e:	4b                   	dec    ebx
c0011d5f:	50                   	push   eax
c0011d60:	68 06 a0 02 c0       	push   0xc002a006
c0011d65:	e8 9f 0d 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0011d6a:	c7 04 24 0f a0 02 c0 	mov    DWORD PTR [esp],0xc002a00f
c0011d71:	e8 77 82 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0011d76:	83 c4 10             	add    esp,0x10
c0011d79:	83 fb ff             	cmp    ebx,0xffffffff
c0011d7c:	75 b5                	jne    c0011d33 <Virt::setupPageSwapping(int)+0x84>
c0011d7e:	83 ec 0c             	sub    esp,0xc
c0011d81:	56                   	push   esi
c0011d82:	e8 9d 13 00 00       	call   c0013124 <File::close()>
c0011d87:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d8a:	e8 cb da ff ff       	call   c000f85a <rfree>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	85 f6                	test   esi,esi
c0011d94:	74 0c                	je     c0011da2 <Virt::setupPageSwapping(int)+0xf3>
c0011d96:	83 ec 0c             	sub    esp,0xc
c0011d99:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d9b:	56                   	push   esi
c0011d9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d9f:	83 c4 10             	add    esp,0x10
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	5b                   	pop    ebx
c0011da6:	5e                   	pop    esi
c0011da7:	5f                   	pop    edi
c0011da8:	c3                   	ret    
c0011da9:	83 ec 08             	sub    esp,0x8
c0011dac:	50                   	push   eax
c0011dad:	68 ee 9f 02 c0       	push   0xc0029fee
c0011db2:	e8 52 0d 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	eb 94                	jmp    c0011d50 <Virt::setupPageSwapping(int)+0xa1>
c0011dbc:	83 ec 08             	sub    esp,0x8
c0011dbf:	50                   	push   eax
c0011dc0:	68 ca 9f 02 c0       	push   0xc0029fca
c0011dc5:	e8 3f 0d 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0011dca:	c7 04 24 d3 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fd3
c0011dd1:	e8 17 82 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	e9 14 ff ff ff       	jmp    c0011cf2 <Virt::setupPageSwapping(int)+0x43>

c0011dde <VAS::VAS()>:
c0011dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011de9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ded:	a3 24 dc 02 c0       	mov    ds:0xc002dc24,eax
c0011df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df6:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfe:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e05:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e0c:	90                   	nop
c0011e0d:	c3                   	ret    

c0011e0e <VAS::VAS(VAS*)>:
c0011e0e:	83 ec 0c             	sub    esp,0xc
c0011e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e1c:	83 ec 0c             	sub    esp,0xc
c0011e1f:	68 24 9e 02 c0       	push   0xc0029e24
c0011e24:	e8 c4 81 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0011e29:	83 c4 10             	add    esp,0x10
c0011e2c:	90                   	nop
c0011e2d:	83 c4 0c             	add    esp,0xc
c0011e30:	c3                   	ret    
c0011e31:	90                   	nop

c0011e32 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e36:	89 c2                	mov    edx,eax
c0011e38:	c1 e8 0a             	shr    eax,0xa
c0011e3b:	c1 ea 16             	shr    edx,0x16
c0011e3e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e43:	19 c9                	sbb    ecx,ecx
c0011e45:	c1 e2 0c             	shl    edx,0xc
c0011e48:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e4e:	25 fc 0f 00 00       	and    eax,0xffc
c0011e53:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e5a:	01 d0                	add    eax,edx
c0011e5c:	c3                   	ret    
c0011e5d:	90                   	nop

c0011e5e <VAS::getPageTableEntry(unsigned long)>:
c0011e5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e62:	89 ca                	mov    edx,ecx
c0011e64:	c1 e9 0a             	shr    ecx,0xa
c0011e67:	c1 ea 16             	shr    edx,0x16
c0011e6a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e70:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e76:	c1 e0 0c             	shl    eax,0xc
c0011e79:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e7c:	c3                   	ret    

c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e7d:	57                   	push   edi
c0011e7e:	56                   	push   esi
c0011e7f:	be 01 00 00 00       	mov    esi,0x1
c0011e84:	53                   	push   ebx
c0011e85:	83 ec 10             	sub    esp,0x10
c0011e88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8c:	c1 eb 0c             	shr    ebx,0xc
c0011e8f:	eb 3f                	jmp    c0011ed0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011e91:	e8 13 fe ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c0011e96:	83 ec 08             	sub    esp,0x8
c0011e99:	57                   	push   edi
c0011e9a:	50                   	push   eax
c0011e9b:	e8 be ff ff ff       	call   c0011e5e <VAS::getPageTableEntry(unsigned long)>
c0011ea0:	83 c4 10             	add    esp,0x10
c0011ea3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ea9:	f6 c4 04             	test   ah,0x4
c0011eac:	75 5f                	jne    c0011f0d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eae:	80 fa 04             	cmp    dl,0x4
c0011eb1:	74 78                	je     c0011f2b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011eb3:	80 fa 02             	cmp    dl,0x2
c0011eb6:	0f 84 88 00 00 00    	je     c0011f44 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ebc:	80 fa 03             	cmp    dl,0x3
c0011ebf:	0f 84 ad 00 00 00    	je     c0011f72 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ec5:	fe ca                	dec    dl
c0011ec7:	0f 84 92 00 00 00    	je     c0011f5f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ecd:	43                   	inc    ebx
c0011ece:	31 f6                	xor    esi,esi
c0011ed0:	53                   	push   ebx
c0011ed1:	e8 1f fc ff ff       	call   c0011af5 <Virt::getPageState(unsigned long)>
c0011ed6:	5f                   	pop    edi
c0011ed7:	89 df                	mov    edi,ebx
c0011ed9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011edd:	c1 e7 0c             	shl    edi,0xc
c0011ee0:	84 c0                	test   al,al
c0011ee2:	75 ad                	jne    c0011e91 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011ee4:	83 ec 0c             	sub    esp,0xc
c0011ee7:	68 15 a0 02 c0       	push   0xc002a015
c0011eec:	e8 fc 80 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0011ef1:	e8 b3 fd ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c0011ef6:	5a                   	pop    edx
c0011ef7:	59                   	pop    ecx
c0011ef8:	57                   	push   edi
c0011ef9:	50                   	push   eax
c0011efa:	e8 5f ff ff ff       	call   c0011e5e <VAS::getPageTableEntry(unsigned long)>
c0011eff:	83 c4 10             	add    esp,0x10
c0011f02:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f04:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f08:	f6 c4 04             	test   ah,0x4
c0011f0b:	74 c0                	je     c0011ecd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f0d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f11:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f16:	83 ec 0c             	sub    esp,0xc
c0011f19:	50                   	push   eax
c0011f1a:	e8 2e df ff ff       	call   c000fe4d <Phys::freePage(unsigned long)>
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f26:	80 fa 04             	cmp    dl,0x4
c0011f29:	75 88                	jne    c0011eb3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f2b:	89 f0                	mov    eax,esi
c0011f2d:	84 c0                	test   al,al
c0011f2f:	75 47                	jne    c0011f78 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f31:	c7 44 24 20 48 9e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029e48
c0011f39:	83 c4 10             	add    esp,0x10
c0011f3c:	5b                   	pop    ebx
c0011f3d:	5e                   	pop    esi
c0011f3e:	5f                   	pop    edi
c0011f3f:	e9 a9 80 00 00       	jmp    c0019fed <Krnl::panic(char const*)>
c0011f44:	89 f0                	mov    eax,esi
c0011f46:	84 c0                	test   al,al
c0011f48:	75 15                	jne    c0011f5f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f4a:	83 ec 0c             	sub    esp,0xc
c0011f4d:	68 31 a0 02 c0       	push   0xc002a031
c0011f52:	e8 96 80 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0011f57:	83 c4 10             	add    esp,0x10
c0011f5a:	e9 6e ff ff ff       	jmp    c0011ecd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f5f:	83 ec 08             	sub    esp,0x8
c0011f62:	6a 00                	push   0x0
c0011f64:	53                   	push   ebx
c0011f65:	e8 56 fb ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f6a:	83 c4 10             	add    esp,0x10
c0011f6d:	e9 5b ff ff ff       	jmp    c0011ecd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f72:	89 f0                	mov    eax,esi
c0011f74:	84 c0                	test   al,al
c0011f76:	75 15                	jne    c0011f8d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f78:	83 ec 08             	sub    esp,0x8
c0011f7b:	6a 00                	push   0x0
c0011f7d:	53                   	push   ebx
c0011f7e:	e8 3d fb ff ff       	call   c0011ac0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f83:	83 c4 10             	add    esp,0x10
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	5b                   	pop    ebx
c0011f8a:	5e                   	pop    esi
c0011f8b:	5f                   	pop    edi
c0011f8c:	c3                   	ret    
c0011f8d:	c7 44 24 20 4d a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a04d
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	5b                   	pop    ebx
c0011f99:	5e                   	pop    esi
c0011f9a:	5f                   	pop    edi
c0011f9b:	e9 4d 80 00 00       	jmp    c0019fed <Krnl::panic(char const*)>

c0011fa0 <VAS::freeAllocatedPages(unsigned long)>:
c0011fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fa8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fac:	74 09                	je     c0011fb7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fb2:	e9 c6 fe ff ff       	jmp    c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>
c0011fb7:	c7 44 24 04 6c 9e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029e6c
c0011fbf:	e9 45 0b 00 00       	jmp    c0012b09 <Dbg::kprintf(char const*, ...)>

c0011fc4 <VAS::virtualToPhysical(unsigned long)>:
c0011fc4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fc8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fcc:	e8 8d fe ff ff       	call   c0011e5e <VAS::getPageTableEntry(unsigned long)>
c0011fd1:	5a                   	pop    edx
c0011fd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fd4:	59                   	pop    ecx
c0011fd5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fda:	c3                   	ret    
c0011fdb:	90                   	nop

c0011fdc <VAS::reflagRange(unsigned long, int, int, int)>:
c0011fdc:	55                   	push   ebp
c0011fdd:	57                   	push   edi
c0011fde:	56                   	push   esi
c0011fdf:	53                   	push   ebx
c0011fe0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011fe4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011fe8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011fec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ff0:	85 db                	test   ebx,ebx
c0011ff2:	7e 22                	jle    c0012016 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ff4:	c1 e3 0c             	shl    ebx,0xc
c0011ff7:	01 f3                	add    ebx,esi
c0011ff9:	56                   	push   esi
c0011ffa:	81 c6 00 10 00 00    	add    esi,0x1000
c0012000:	55                   	push   ebp
c0012001:	e8 58 fe ff ff       	call   c0011e5e <VAS::getPageTableEntry(unsigned long)>
c0012006:	5a                   	pop    edx
c0012007:	59                   	pop    ecx
c0012008:	8b 08                	mov    ecx,DWORD PTR [eax]
c001200a:	21 f9                	and    ecx,edi
c001200c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012010:	39 f3                	cmp    ebx,esi
c0012012:	89 08                	mov    DWORD PTR [eax],ecx
c0012014:	75 e3                	jne    c0011ff9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012016:	5b                   	pop    ebx
c0012017:	5e                   	pop    esi
c0012018:	5f                   	pop    edi
c0012019:	5d                   	pop    ebp
c001201a:	c3                   	ret    
c001201b:	90                   	nop

c001201c <VAS::setToWriteCombining(unsigned long, int)>:
c001201c:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0012021:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012027:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001202e:	75 01                	jne    c0012031 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012030:	c3                   	ret    
c0012031:	68 80 00 00 00       	push   0x80
c0012036:	6a ff                	push   0xffffffff
c0012038:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001203c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012044:	e8 93 ff ff ff       	call   c0011fdc <VAS::reflagRange(unsigned long, int, int, int)>
c0012049:	83 c4 14             	add    esp,0x14
c001204c:	c3                   	ret    
c001204d:	90                   	nop

c001204e <VAS::mapOtherVASIn(bool, VAS*)>:
c001204e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012057:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001205a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001205e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012061:	19 c0                	sbb    eax,eax
c0012063:	83 ca 03             	or     edx,0x3
c0012066:	83 e0 fc             	and    eax,0xfffffffc
c0012069:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012070:	0f 20 d8             	mov    eax,cr3
c0012073:	0f 22 d8             	mov    cr3,eax
c0012076:	c3                   	ret    
c0012077:	90                   	nop

c0012078 <VAS::~VAS()>:
c0012078:	83 ec 2c             	sub    esp,0x2c
c001207b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012083:	e8 ce b5 00 00       	call   c001d656 <lockScheduler()>
c0012088:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001208d:	8b 00                	mov    eax,DWORD PTR [eax]
c001208f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012092:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012098:	83 ec 04             	sub    esp,0x4
c001209b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001209f:	6a 01                	push   0x1
c00120a1:	50                   	push   eax
c00120a2:	e8 a7 ff ff ff       	call   c001204e <VAS::mapOtherVASIn(bool, VAS*)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120b2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120ba:	0f 8f d7 00 00 00    	jg     c0012197 <VAS::~VAS()+0x11f>
c00120c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120cb:	c1 e2 02             	shl    edx,0x2
c00120ce:	01 d0                	add    eax,edx
c00120d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120da:	83 e0 01             	and    eax,0x1
c00120dd:	0f 84 ab 00 00 00    	je     c001218e <VAS::~VAS()+0x116>
c00120e3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120eb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00120f3:	7f 75                	jg     c001216a <VAS::~VAS()+0xf2>
c00120f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120f9:	c1 e0 0a             	shl    eax,0xa
c00120fc:	89 c2                	mov    edx,eax
c00120fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012102:	01 d0                	add    eax,edx
c0012104:	c1 e0 0c             	shl    eax,0xc
c0012107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001210b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012110:	8b 00                	mov    eax,DWORD PTR [eax]
c0012112:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012115:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001211b:	83 ec 04             	sub    esp,0x4
c001211e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012122:	6a 01                	push   0x1
c0012124:	50                   	push   eax
c0012125:	e8 08 fd ff ff       	call   c0011e32 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001212a:	83 c4 10             	add    esp,0x10
c001212d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012131:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012135:	8b 00                	mov    eax,DWORD PTR [eax]
c0012137:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001213b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213f:	25 01 04 00 00       	and    eax,0x401
c0012144:	3d 01 04 00 00       	cmp    eax,0x401
c0012149:	75 19                	jne    c0012164 <VAS::~VAS()+0xec>
c001214b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001214f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012154:	83 ec 0c             	sub    esp,0xc
c0012157:	50                   	push   eax
c0012158:	e8 f0 dc ff ff       	call   c000fe4d <Phys::freePage(unsigned long)>
c001215d:	83 c4 10             	add    esp,0x10
c0012160:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012164:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012168:	eb 81                	jmp    c00120eb <VAS::~VAS()+0x73>
c001216a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216e:	25 00 04 00 00       	and    eax,0x400
c0012173:	74 19                	je     c001218e <VAS::~VAS()+0x116>
c0012175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012179:	25 00 f0 ff ff       	and    eax,0xfffff000
c001217e:	83 ec 0c             	sub    esp,0xc
c0012181:	50                   	push   eax
c0012182:	e8 c6 dc ff ff       	call   c000fe4d <Phys::freePage(unsigned long)>
c0012187:	83 c4 10             	add    esp,0x10
c001218a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001218e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012192:	e9 1b ff ff ff       	jmp    c00120b2 <VAS::~VAS()+0x3a>
c0012197:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001219b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001219e:	83 ec 0c             	sub    esp,0xc
c00121a1:	50                   	push   eax
c00121a2:	e8 d6 fc ff ff       	call   c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121b1:	83 ec 0c             	sub    esp,0xc
c00121b4:	50                   	push   eax
c00121b5:	e8 93 dc ff ff       	call   c000fe4d <Phys::freePage(unsigned long)>
c00121ba:	83 c4 10             	add    esp,0x10
c00121bd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121c5:	c1 e0 02             	shl    eax,0x2
c00121c8:	83 ec 08             	sub    esp,0x8
c00121cb:	50                   	push   eax
c00121cc:	68 90 9e 02 c0       	push   0xc0029e90
c00121d1:	e8 33 09 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00121d6:	83 c4 10             	add    esp,0x10
c00121d9:	e8 7a b4 00 00       	call   c001d658 <unlockScheduler()>
c00121de:	90                   	nop
c00121df:	83 c4 2c             	add    esp,0x2c
c00121e2:	c3                   	ret    
c00121e3:	90                   	nop

c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121e4:	55                   	push   ebp
c00121e5:	57                   	push   edi
c00121e6:	56                   	push   esi
c00121e7:	53                   	push   ebx
c00121e8:	83 ec 1c             	sub    esp,0x1c
c00121eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121f3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00121f9:	77 08                	ja     c0012203 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00121fb:	0f 20 d8             	mov    eax,cr3
c00121fe:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012201:	75 47                	jne    c001224a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012203:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012207:	09 d8                	or     eax,ebx
c0012209:	a9 ff 0f 00 00       	test   eax,0xfff
c001220e:	75 57                	jne    c0012267 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012210:	89 de                	mov    esi,ebx
c0012212:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012215:	c1 ee 16             	shr    esi,0x16
c0012218:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001221f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012223:	74 54                	je     c0012279 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012225:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012229:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001222f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012233:	c1 e6 0c             	shl    esi,0xc
c0012236:	c1 eb 0a             	shr    ebx,0xa
c0012239:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001223f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012242:	83 c4 1c             	add    esp,0x1c
c0012245:	5b                   	pop    ebx
c0012246:	5e                   	pop    esi
c0012247:	5f                   	pop    edi
c0012248:	5d                   	pop    ebp
c0012249:	c3                   	ret    
c001224a:	83 ec 0c             	sub    esp,0xc
c001224d:	68 b0 9e 02 c0       	push   0xc0029eb0
c0012252:	e8 b2 08 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001225e:	09 d8                	or     eax,ebx
c0012260:	a9 ff 0f 00 00       	test   eax,0xfff
c0012265:	74 a9                	je     c0012210 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012267:	83 ec 0c             	sub    esp,0xc
c001226a:	68 18 9f 02 c0       	push   0xc0029f18
c001226f:	e8 79 7d 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0012274:	83 c4 10             	add    esp,0x10
c0012277:	eb 97                	jmp    c0012210 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012279:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001227d:	e8 55 dc ff ff       	call   c000fed7 <Phys::allocatePage()>
c0012282:	89 c5                	mov    ebp,eax
c0012284:	e8 20 fa ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c0012289:	83 ec 0c             	sub    esp,0xc
c001228c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012290:	6a 01                	push   0x1
c0012292:	e8 82 f8 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c0012297:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001229e:	6a 01                	push   0x1
c00122a0:	50                   	push   eax
c00122a1:	55                   	push   ebp
c00122a2:	81 cd 07 04 00 00    	or     ebp,0x407
c00122a8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122ac:	51                   	push   ecx
c00122ad:	e8 26 02 00 00       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122b2:	83 c4 1c             	add    esp,0x1c
c00122b5:	68 00 10 00 00       	push   0x1000
c00122ba:	6a 00                	push   0x0
c00122bc:	50                   	push   eax
c00122bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122c1:	e8 b2 e4 fe ff       	call   c0000778 <memset>
c00122c6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122ca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122cd:	e8 ab fb ff ff       	call   c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>
c00122d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122df:	e9 41 ff ff ff       	jmp    c0012225 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122e4 <VAS::allocatePages(int, int)>:
c00122e4:	55                   	push   ebp
c00122e5:	57                   	push   edi
c00122e6:	56                   	push   esi
c00122e7:	53                   	push   ebx
c00122e8:	83 ec 1c             	sub    esp,0x1c
c00122eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122ef:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00122f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122fa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012300:	83 e0 01             	and    eax,0x1
c0012303:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012307:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001230b:	0f 85 cc 00 00 00    	jne    c00123dd <VAS::allocatePages(int, int)+0xf9>
c0012311:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012314:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012318:	85 c0                	test   eax,eax
c001231a:	0f 84 a1 00 00 00    	je     c00123c1 <VAS::allocatePages(int, int)+0xdd>
c0012320:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012324:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012328:	c1 e6 0c             	shl    esi,0xc
c001232b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001232f:	85 c0                	test   eax,eax
c0012331:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012334:	7e 33                	jle    c0012369 <VAS::allocatePages(int, int)+0x85>
c0012336:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001233a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001233e:	81 cd 00 04 00 00    	or     ebp,0x400
c0012344:	e8 8e db ff ff       	call   c000fed7 <Phys::allocatePage()>
c0012349:	55                   	push   ebp
c001234a:	53                   	push   ebx
c001234b:	50                   	push   eax
c001234c:	57                   	push   edi
c001234d:	e8 92 fe ff ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012352:	83 c4 10             	add    esp,0x10
c0012355:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001235a:	74 03                	je     c001235f <VAS::allocatePages(int, int)+0x7b>
c001235c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001235f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012365:	39 de                	cmp    esi,ebx
c0012367:	75 db                	jne    c0012344 <VAS::allocatePages(int, int)+0x60>
c0012369:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001236e:	75 12                	jne    c0012382 <VAS::allocatePages(int, int)+0x9e>
c0012370:	0f 20 d8             	mov    eax,cr3
c0012373:	0f 22 d8             	mov    cr3,eax
c0012376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001237a:	83 c4 1c             	add    esp,0x1c
c001237d:	5b                   	pop    ebx
c001237e:	5e                   	pop    esi
c001237f:	5f                   	pop    edi
c0012380:	5d                   	pop    ebp
c0012381:	c3                   	ret    
c0012382:	c1 ee 0a             	shr    esi,0xa
c0012385:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012389:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001238f:	c1 eb 0a             	shr    ebx,0xa
c0012392:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012398:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001239e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123a4:	39 c3                	cmp    ebx,eax
c00123a6:	77 ce                	ja     c0012376 <VAS::allocatePages(int, int)+0x92>
c00123a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123b1:	39 d8                	cmp    eax,ebx
c00123b3:	73 f3                	jae    c00123a8 <VAS::allocatePages(int, int)+0xc4>
c00123b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123b9:	83 c4 1c             	add    esp,0x1c
c00123bc:	5b                   	pop    ebx
c00123bd:	5e                   	pop    esi
c00123be:	5f                   	pop    edi
c00123bf:	5d                   	pop    ebp
c00123c0:	c3                   	ret    
c00123c1:	83 ec 0c             	sub    esp,0xc
c00123c4:	68 3c 9f 02 c0       	push   0xc0029f3c
c00123c9:	e8 1f 7c 00 00       	call   c0019fed <Krnl::panic(char const*)>
c00123ce:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	e9 43 ff ff ff       	jmp    c0012320 <VAS::allocatePages(int, int)+0x3c>
c00123dd:	83 ec 0c             	sub    esp,0xc
c00123e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123e4:	e8 30 f7 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c00123e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123ed:	83 c4 10             	add    esp,0x10
c00123f0:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00123f5:	0f 87 9b 00 00 00    	ja     c0012496 <VAS::allocatePages(int, int)+0x1b2>
c00123fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00123ff:	85 d2                	test   edx,edx
c0012401:	7e 3c                	jle    c001243f <VAS::allocatePages(int, int)+0x15b>
c0012403:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012407:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001240b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001240f:	c1 e5 0c             	shl    ebp,0xc
c0012412:	81 ce 00 04 00 00    	or     esi,0x400
c0012418:	01 dd                	add    ebp,ebx
c001241a:	e8 b8 da ff ff       	call   c000fed7 <Phys::allocatePage()>
c001241f:	56                   	push   esi
c0012420:	53                   	push   ebx
c0012421:	50                   	push   eax
c0012422:	57                   	push   edi
c0012423:	e8 bc fd ff ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012428:	83 c4 10             	add    esp,0x10
c001242b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012430:	74 03                	je     c0012435 <VAS::allocatePages(int, int)+0x151>
c0012432:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012435:	81 c3 00 10 00 00    	add    ebx,0x1000
c001243b:	39 dd                	cmp    ebp,ebx
c001243d:	75 db                	jne    c001241a <VAS::allocatePages(int, int)+0x136>
c001243f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012444:	0f 84 26 ff ff ff    	je     c0012370 <VAS::allocatePages(int, int)+0x8c>
c001244a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001244e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012452:	89 d3                	mov    ebx,edx
c0012454:	c1 e0 0c             	shl    eax,0xc
c0012457:	c1 eb 0a             	shr    ebx,0xa
c001245a:	01 d0                	add    eax,edx
c001245c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012462:	c1 e8 0a             	shr    eax,0xa
c0012465:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001246b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012470:	2d 00 00 40 00       	sub    eax,0x400000
c0012475:	39 c3                	cmp    ebx,eax
c0012477:	0f 87 f9 fe ff ff    	ja     c0012376 <VAS::allocatePages(int, int)+0x92>
c001247d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012480:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012486:	39 d8                	cmp    eax,ebx
c0012488:	73 f3                	jae    c001247d <VAS::allocatePages(int, int)+0x199>
c001248a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001248e:	83 c4 1c             	add    esp,0x1c
c0012491:	5b                   	pop    ebx
c0012492:	5e                   	pop    esi
c0012493:	5f                   	pop    edi
c0012494:	5d                   	pop    ebp
c0012495:	c3                   	ret    
c0012496:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001249b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a1:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124a8:	0f 84 4d ff ff ff    	je     c00123fb <VAS::allocatePages(int, int)+0x117>
c00124ae:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124b6:	e9 40 ff ff ff       	jmp    c00123fb <VAS::allocatePages(int, int)+0x117>
c00124bb:	90                   	nop

c00124bc <VAS::setCPUSpecific(unsigned long)>:
c00124bc:	83 ec 0c             	sub    esp,0xc
c00124bf:	6a 05                	push   0x5
c00124c1:	68 00 00 40 c2       	push   0xc2400000
c00124c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ce:	e8 11 fd ff ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d3:	83 c4 1c             	add    esp,0x1c
c00124d6:	c3                   	ret    
c00124d7:	90                   	nop

c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124d8:	55                   	push   ebp
c00124d9:	57                   	push   edi
c00124da:	56                   	push   esi
c00124db:	53                   	push   ebx
c00124dc:	83 ec 1c             	sub    esp,0x1c
c00124df:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00124e4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124ee:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124f2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00124f8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00124fc:	83 e0 01             	and    eax,0x1
c00124ff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012503:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012507:	85 c0                	test   eax,eax
c0012509:	7e 39                	jle    c0012544 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001250b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001250f:	89 f3                	mov    ebx,esi
c0012511:	c1 e0 0c             	shl    eax,0xc
c0012514:	01 f0                	add    eax,esi
c0012516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001251a:	55                   	push   ebp
c001251b:	53                   	push   ebx
c001251c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012520:	29 f0                	sub    eax,esi
c0012522:	01 d8                	add    eax,ebx
c0012524:	50                   	push   eax
c0012525:	57                   	push   edi
c0012526:	e8 b9 fc ff ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001252b:	83 c4 10             	add    esp,0x10
c001252e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012533:	74 03                	je     c0012538 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012535:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012538:	81 c3 00 10 00 00    	add    ebx,0x1000
c001253e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012542:	75 d6                	jne    c001251a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012544:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012549:	75 10                	jne    c001255b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001254b:	0f 20 d8             	mov    eax,cr3
c001254e:	0f 22 d8             	mov    cr3,eax
c0012551:	83 c4 1c             	add    esp,0x1c
c0012554:	89 f0                	mov    eax,esi
c0012556:	5b                   	pop    ebx
c0012557:	5e                   	pop    esi
c0012558:	5f                   	pop    edi
c0012559:	5d                   	pop    ebp
c001255a:	c3                   	ret    
c001255b:	89 f3                	mov    ebx,esi
c001255d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012561:	c1 eb 0a             	shr    ebx,0xa
c0012564:	c1 e0 0c             	shl    eax,0xc
c0012567:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001256d:	01 f0                	add    eax,esi
c001256f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012575:	c1 e8 0a             	shr    eax,0xa
c0012578:	25 00 f0 ff ff       	and    eax,0xfffff000
c001257d:	2d 00 00 40 00       	sub    eax,0x400000
c0012582:	39 c3                	cmp    ebx,eax
c0012584:	77 cb                	ja     c0012551 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012589:	81 c3 00 10 00 00    	add    ebx,0x1000
c001258f:	39 d8                	cmp    eax,ebx
c0012591:	73 f3                	jae    c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012593:	83 c4 1c             	add    esp,0x1c
c0012596:	89 f0                	mov    eax,esi
c0012598:	5b                   	pop    ebx
c0012599:	5e                   	pop    esi
c001259a:	5f                   	pop    edi
c001259b:	5d                   	pop    ebp
c001259c:	c3                   	ret    
c001259d:	90                   	nop

c001259e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001259e:	55                   	push   ebp
c001259f:	57                   	push   edi
c00125a0:	56                   	push   esi
c00125a1:	53                   	push   ebx
c00125a2:	83 ec 1c             	sub    esp,0x1c
c00125a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125a9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125ad:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125b1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125b5:	a9 ff 0f 00 00       	test   eax,0xfff
c00125ba:	75 4a                	jne    c0012606 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125c0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125c3:	c1 eb 16             	shr    ebx,0x16
c00125c6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125cd:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125d1:	74 4d                	je     c0012620 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125d7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125db:	c1 e8 0a             	shr    eax,0xa
c00125de:	80 fa 01             	cmp    dl,0x1
c00125e1:	19 d2                	sbb    edx,edx
c00125e3:	c1 e3 0c             	shl    ebx,0xc
c00125e6:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00125ea:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00125f0:	25 fc 0f 00 00       	and    eax,0xffc
c00125f5:	01 d8                	add    eax,ebx
c00125f7:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00125fe:	83 c4 1c             	add    esp,0x1c
c0012601:	5b                   	pop    ebx
c0012602:	5e                   	pop    esi
c0012603:	5f                   	pop    edi
c0012604:	5d                   	pop    ebp
c0012605:	c3                   	ret    
c0012606:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001260a:	83 ec 0c             	sub    esp,0xc
c001260d:	68 68 9f 02 c0       	push   0xc0029f68
c0012612:	e8 d6 79 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0012617:	83 c4 10             	add    esp,0x10
c001261a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001261e:	eb 9c                	jmp    c00125bc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012620:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012624:	e8 ae d8 ff ff       	call   c000fed7 <Phys::allocatePage()>
c0012629:	89 c5                	mov    ebp,eax
c001262b:	e8 79 f6 ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c0012630:	83 ec 0c             	sub    esp,0xc
c0012633:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012637:	6a 01                	push   0x1
c0012639:	e8 db f4 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c001263e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012645:	6a 01                	push   0x1
c0012647:	50                   	push   eax
c0012648:	55                   	push   ebp
c0012649:	81 cd 07 04 00 00    	or     ebp,0x407
c001264f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012653:	51                   	push   ecx
c0012654:	e8 7f fe ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012659:	83 c4 1c             	add    esp,0x1c
c001265c:	68 00 10 00 00       	push   0x1000
c0012661:	6a 00                	push   0x0
c0012663:	50                   	push   eax
c0012664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012668:	e8 0b e1 fe ff       	call   c0000778 <memset>
c001266d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012671:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012674:	e8 04 f8 ff ff       	call   c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>
c0012679:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001267c:	83 c4 10             	add    esp,0x10
c001267f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012686:	e9 48 ff ff ff       	jmp    c00125d3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001268b:	90                   	nop

c001268c <VAS::VAS(bool)>:
c001268c:	53                   	push   ebx
c001268d:	83 ec 28             	sub    esp,0x28
c0012690:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012694:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001269c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126ab:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126ae:	e8 24 d8 ff ff       	call   c000fed7 <Phys::allocatePage()>
c00126b3:	89 c2                	mov    edx,eax
c00126b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126bc:	e8 e8 f5 ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c00126c1:	89 c3                	mov    ebx,eax
c00126c3:	83 ec 0c             	sub    esp,0xc
c00126c6:	6a 01                	push   0x1
c00126c8:	e8 4c f4 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	89 c2                	mov    edx,eax
c00126d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126d9:	83 ec 0c             	sub    esp,0xc
c00126dc:	6a 03                	push   0x3
c00126de:	6a 01                	push   0x1
c00126e0:	52                   	push   edx
c00126e1:	50                   	push   eax
c00126e2:	53                   	push   ebx
c00126e3:	e8 f0 fd ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126e8:	83 c4 20             	add    esp,0x20
c00126eb:	89 c2                	mov    edx,eax
c00126ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00126f4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00126fc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012704:	7f 1c                	jg     c0012722 <VAS::VAS(bool)+0x96>
c0012706:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001270a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001270d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012711:	c1 e2 02             	shl    edx,0x2
c0012714:	01 d0                	add    eax,edx
c0012716:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001271c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012720:	eb da                	jmp    c00126fc <VAS::VAS(bool)+0x70>
c0012722:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001272a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012732:	7f 7a                	jg     c00127ae <VAS::VAS(bool)+0x122>
c0012734:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012738:	2d 00 02 00 00       	sub    eax,0x200
c001273d:	c1 e0 0c             	shl    eax,0xc
c0012740:	83 c8 03             	or     eax,0x3
c0012743:	89 c2                	mov    edx,eax
c0012745:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001274a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012750:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012756:	83 e0 10             	and    eax,0x10
c0012759:	84 c0                	test   al,al
c001275b:	74 07                	je     c0012764 <VAS::VAS(bool)+0xd8>
c001275d:	b8 00 01 00 00       	mov    eax,0x100
c0012762:	eb 05                	jmp    c0012769 <VAS::VAS(bool)+0xdd>
c0012764:	b8 00 00 00 00       	mov    eax,0x0
c0012769:	09 d0                	or     eax,edx
c001276b:	89 c1                	mov    ecx,eax
c001276d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012771:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012774:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012778:	c1 e2 02             	shl    edx,0x2
c001277b:	01 d0                	add    eax,edx
c001277d:	89 ca                	mov    edx,ecx
c001277f:	89 10                	mov    DWORD PTR [eax],edx
c0012781:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012785:	2d 40 03 00 00       	sub    eax,0x340
c001278a:	83 f8 7f             	cmp    eax,0x7f
c001278d:	77 16                	ja     c00127a5 <VAS::VAS(bool)+0x119>
c001278f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012793:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012796:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001279a:	c1 e2 02             	shl    edx,0x2
c001279d:	01 d0                	add    eax,edx
c001279f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127a5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127a9:	e9 7c ff ff ff       	jmp    c001272a <VAS::VAS(bool)+0x9e>
c00127ae:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00127b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127b9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127bf:	83 e0 10             	and    eax,0x10
c00127c2:	84 c0                	test   al,al
c00127c4:	74 07                	je     c00127cd <VAS::VAS(bool)+0x141>
c00127c6:	b8 03 41 00 00       	mov    eax,0x4103
c00127cb:	eb 05                	jmp    c00127d2 <VAS::VAS(bool)+0x146>
c00127cd:	b8 03 40 00 00       	mov    eax,0x4003
c00127d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00127d9:	81 c2 20 0c 00 00    	add    edx,0xc20
c00127df:	89 02                	mov    DWORD PTR [edx],eax
c00127e1:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00127e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127ec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00127f2:	83 ec 08             	sub    esp,0x8
c00127f5:	50                   	push   eax
c00127f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127fa:	e8 bd fc ff ff       	call   c00124bc <VAS::setCPUSpecific(unsigned long)>
c00127ff:	83 c4 10             	add    esp,0x10
c0012802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012806:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012809:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001280e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012814:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001281a:	83 e0 10             	and    eax,0x10
c001281d:	84 c0                	test   al,al
c001281f:	74 07                	je     c0012828 <VAS::VAS(bool)+0x19c>
c0012821:	b8 00 01 00 00       	mov    eax,0x100
c0012826:	eb 05                	jmp    c001282d <VAS::VAS(bool)+0x1a1>
c0012828:	b8 00 00 00 00       	mov    eax,0x0
c001282d:	09 c2                	or     edx,eax
c001282f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012833:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012836:	05 fc 0f 00 00       	add    eax,0xffc
c001283b:	83 ca 03             	or     edx,0x3
c001283e:	89 10                	mov    DWORD PTR [eax],edx
c0012840:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0012845:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001284b:	83 ec 0c             	sub    esp,0xc
c001284e:	50                   	push   eax
c001284f:	e8 c8 19 00 00       	call   c001421c <Device::getName()>
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	83 ec 08             	sub    esp,0x8
c001285a:	68 67 a0 02 c0       	push   0xc002a067
c001285f:	50                   	push   eax
c0012860:	e8 5b e0 fe ff       	call   c00008c0 <strcmp>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	85 c0                	test   eax,eax
c001286a:	0f 94 c0             	sete   al
c001286d:	84 c0                	test   al,al
c001286f:	74 70                	je     c00128e1 <VAS::VAS(bool)+0x255>
c0012871:	e8 c3 ad 00 00       	call   c001d639 <disableIRQs()>
c0012876:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001287b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012881:	05 7c 09 00 00       	add    eax,0x97c
c0012886:	83 ec 0c             	sub    esp,0xc
c0012889:	50                   	push   eax
c001288a:	e8 27 ca ff ff       	call   c000f2b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012897:	89 c3                	mov    ebx,eax
c0012899:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001289e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a4:	05 7c 09 00 00       	add    eax,0x97c
c00128a9:	83 ec 0c             	sub    esp,0xc
c00128ac:	50                   	push   eax
c00128ad:	e8 04 ca ff ff       	call   c000f2b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	83 ec 08             	sub    esp,0x8
c00128b8:	50                   	push   eax
c00128b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128bd:	e8 9c f5 ff ff       	call   c0011e5e <VAS::getPageTableEntry(unsigned long)>
c00128c2:	83 c4 10             	add    esp,0x10
c00128c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128cc:	6a 11                	push   0x11
c00128ce:	53                   	push   ebx
c00128cf:	50                   	push   eax
c00128d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128d4:	e8 0b f9 ff ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00128d9:	83 c4 10             	add    esp,0x10
c00128dc:	e8 66 ad 00 00       	call   c001d647 <enableIRQs()>
c00128e1:	90                   	nop
c00128e2:	83 c4 28             	add    esp,0x28
c00128e5:	5b                   	pop    ebx
c00128e6:	c3                   	ret    

c00128e7 <mapVASFirstTime>:
c00128e7:	55                   	push   ebp
c00128e8:	57                   	push   edi
c00128e9:	56                   	push   esi
c00128ea:	53                   	push   ebx
c00128eb:	83 ec 0c             	sub    esp,0xc
c00128ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128f3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00128f6:	4a                   	dec    edx
c00128f7:	0f 84 8e 00 00 00    	je     c001298b <mapVASFirstTime+0xa4>
c00128fd:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012900:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012903:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012908:	c1 e5 15             	shl    ebp,0x15
c001290b:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012910:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012916:	29 eb                	sub    ebx,ebp
c0012918:	29 ee                	sub    esi,ebp
c001291a:	e8 b8 d5 ff ff       	call   c000fed7 <Phys::allocatePage()>
c001291f:	83 ec 0c             	sub    esp,0xc
c0012922:	68 03 04 00 00       	push   0x403
c0012927:	6a 01                	push   0x1
c0012929:	53                   	push   ebx
c001292a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012930:	50                   	push   eax
c0012931:	57                   	push   edi
c0012932:	e8 a1 fb ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012937:	83 c4 20             	add    esp,0x20
c001293a:	39 f3                	cmp    ebx,esi
c001293c:	75 dc                	jne    c001291a <mapVASFirstTime+0x33>
c001293e:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012943:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012948:	29 ee                	sub    esi,ebp
c001294a:	29 e8                	sub    eax,ebp
c001294c:	89 c5                	mov    ebp,eax
c001294e:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012952:	19 db                	sbb    ebx,ebx
c0012954:	e8 7e d5 ff ff       	call   c000fed7 <Phys::allocatePage()>
c0012959:	83 e3 04             	and    ebx,0x4
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	81 c3 03 04 00 00    	add    ebx,0x403
c0012965:	53                   	push   ebx
c0012966:	6a 01                	push   0x1
c0012968:	56                   	push   esi
c0012969:	81 ee 00 10 00 00    	sub    esi,0x1000
c001296f:	50                   	push   eax
c0012970:	57                   	push   edi
c0012971:	e8 62 fb ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012976:	83 c4 20             	add    esp,0x20
c0012979:	39 f5                	cmp    ebp,esi
c001297b:	75 d1                	jne    c001294e <mapVASFirstTime+0x67>
c001297d:	0f 20 d8             	mov    eax,cr3
c0012980:	0f 22 d8             	mov    cr3,eax
c0012983:	83 c4 0c             	add    esp,0xc
c0012986:	5b                   	pop    ebx
c0012987:	5e                   	pop    esi
c0012988:	5f                   	pop    edi
c0012989:	5d                   	pop    ebp
c001298a:	c3                   	ret    
c001298b:	83 ec 0c             	sub    esp,0xc
c001298e:	68 75 a0 02 c0       	push   0xc002a075
c0012993:	e8 71 01 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0012998:	83 c4 10             	add    esp,0x10
c001299b:	83 c4 0c             	add    esp,0xc
c001299e:	5b                   	pop    ebx
c001299f:	5e                   	pop    esi
c00129a0:	5f                   	pop    edi
c00129a1:	5d                   	pop    ebp
c00129a2:	c3                   	ret    

c00129a3 <__cxa_atexit>:
c00129a3:	31 c0                	xor    eax,eax
c00129a5:	c3                   	ret    

c00129a6 <__cxa_finalize>:
c00129a6:	c3                   	ret    

c00129a7 <__stack_chk_fail>:
c00129a7:	55                   	push   ebp
c00129a8:	89 e5                	mov    ebp,esp
c00129aa:	83 ec 14             	sub    esp,0x14
c00129ad:	68 8e a0 02 c0       	push   0xc002a08e
c00129b2:	e8 52 01 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00129b7:	58                   	pop    eax
c00129b8:	5a                   	pop    edx
c00129b9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00129bc:	68 de a0 02 c0       	push   0xc002a0de
c00129c1:	e8 43 01 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00129c6:	59                   	pop    ecx
c00129c7:	58                   	pop    eax
c00129c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129cb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129ce:	68 de a0 02 c0       	push   0xc002a0de
c00129d3:	e8 31 01 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00129d8:	5a                   	pop    edx
c00129d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129dc:	59                   	pop    ecx
c00129dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00129df:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129e2:	68 de a0 02 c0       	push   0xc002a0de
c00129e7:	e8 1d 01 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00129ec:	5a                   	pop    edx
c00129ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129f0:	59                   	pop    ecx
c00129f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129f8:	68 de a0 02 c0       	push   0xc002a0de
c00129fd:	e8 07 01 00 00       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0012a02:	c7 04 24 e6 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0e6
c0012a09:	e8 df 75 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0012a0e:	83 c4 10             	add    esp,0x10
c0012a11:	c9                   	leave  
c0012a12:	c3                   	ret    

c0012a13 <__cxa_pure_virtual>:
c0012a13:	83 ec 18             	sub    esp,0x18
c0012a16:	68 fe a0 02 c0       	push   0xc002a0fe
c0012a1b:	e8 cd 75 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0012a20:	83 c4 1c             	add    esp,0x1c
c0012a23:	c3                   	ret    

c0012a24 <operator new[](unsigned long)>:
c0012a24:	e9 11 ce ff ff       	jmp    c000f83a <malloc>

c0012a29 <operator delete(void*, unsigned long)>:
c0012a29:	e9 2c ce ff ff       	jmp    c000f85a <rfree>

c0012a2e <operator delete[](void*)>:
c0012a2e:	e9 27 ce ff ff       	jmp    c000f85a <rfree>

c0012a33 <operator delete[](void*, unsigned long)>:
c0012a33:	e9 22 ce ff ff       	jmp    c000f85a <rfree>

c0012a38 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012a38:	57                   	push   edi
c0012a39:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012a3e:	56                   	push   esi
c0012a3f:	be 14 a1 02 c0       	mov    esi,0xc002a114
c0012a44:	53                   	push   ebx
c0012a45:	83 ec 40             	sub    esp,0x40
c0012a48:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a4c:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012a50:	fc                   	cld    
c0012a51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a53:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012a57:	83 f9 3e             	cmp    ecx,0x3e
c0012a5a:	7e 05                	jle    c0012a61 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012a5c:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012a61:	89 df                	mov    edi,ebx
c0012a63:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a67:	eb 02                	jmp    c0012a6b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012a69:	89 c7                	mov    edi,eax
c0012a6b:	31 d2                	xor    edx,edx
c0012a6d:	46                   	inc    esi
c0012a6e:	89 f8                	mov    eax,edi
c0012a70:	f7 f1                	div    ecx
c0012a72:	39 cf                	cmp    edi,ecx
c0012a74:	73 f3                	jae    c0012a69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a76:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a79:	eb 02                	jmp    c0012a7d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a7b:	89 c3                	mov    ebx,eax
c0012a7d:	31 d2                	xor    edx,edx
c0012a7f:	4e                   	dec    esi
c0012a80:	89 d8                	mov    eax,ebx
c0012a82:	f7 f1                	div    ecx
c0012a84:	39 cb                	cmp    ebx,ecx
c0012a86:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012a8a:	88 16                	mov    BYTE PTR [esi],dl
c0012a8c:	73 ed                	jae    c0012a7b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012a8e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012a92:	83 c4 40             	add    esp,0x40
c0012a95:	5b                   	pop    ebx
c0012a96:	5e                   	pop    esi
c0012a97:	5f                   	pop    edi
c0012a98:	c3                   	ret    

c0012a99 <Dbg::logc(char)>:
c0012a99:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a9d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012aa2:	ec                   	in     al,dx
c0012aa3:	a8 20                	test   al,0x20
c0012aa5:	74 fb                	je     c0012aa2 <Dbg::logc(char)+0x9>
c0012aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0012aac:	88 c8                	mov    al,cl
c0012aae:	ee                   	out    dx,al
c0012aaf:	c3                   	ret    

c0012ab0 <Dbg::logs(char*)>:
c0012ab0:	53                   	push   ebx
c0012ab1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ab5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ab8:	84 c0                	test   al,al
c0012aba:	74 0f                	je     c0012acb <Dbg::logs(char*)+0x1b>
c0012abc:	50                   	push   eax
c0012abd:	43                   	inc    ebx
c0012abe:	e8 d6 ff ff ff       	call   c0012a99 <Dbg::logc(char)>
c0012ac3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ac6:	5a                   	pop    edx
c0012ac7:	84 c0                	test   al,al
c0012ac9:	75 f1                	jne    c0012abc <Dbg::logs(char*)+0xc>
c0012acb:	5b                   	pop    ebx
c0012acc:	c3                   	ret    

c0012acd <Dbg::logWriteInt(unsigned int)>:
c0012acd:	83 ec 10             	sub    esp,0x10
c0012ad0:	6a 0a                	push   0xa
c0012ad2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ad6:	50                   	push   eax
c0012ad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012adb:	e8 58 ff ff ff       	call   c0012a38 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ae0:	50                   	push   eax
c0012ae1:	e8 ca ff ff ff       	call   c0012ab0 <Dbg::logs(char*)>
c0012ae6:	83 c4 20             	add    esp,0x20
c0012ae9:	c3                   	ret    

c0012aea <Dbg::logWriteIntBase(unsigned int, int)>:
c0012aea:	83 ec 10             	sub    esp,0x10
c0012aed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012af5:	50                   	push   eax
c0012af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012afa:	e8 39 ff ff ff       	call   c0012a38 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012aff:	50                   	push   eax
c0012b00:	e8 ab ff ff ff       	call   c0012ab0 <Dbg::logs(char*)>
c0012b05:	83 c4 20             	add    esp,0x20
c0012b08:	c3                   	ret    

c0012b09 <Dbg::kprintf(char const*, ...)>:
c0012b09:	55                   	push   ebp
c0012b0a:	57                   	push   edi
c0012b0b:	56                   	push   esi
c0012b0c:	53                   	push   ebx
c0012b0d:	83 ec 0c             	sub    esp,0xc
c0012b10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b14:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b1c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b1f:	84 c0                	test   al,al
c0012b21:	74 4a                	je     c0012b6d <Dbg::kprintf(char const*, ...)+0x64>
c0012b23:	31 db                	xor    ebx,ebx
c0012b25:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b28:	3c 25                	cmp    al,0x25
c0012b2a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b2d:	0f 85 e4 00 00 00    	jne    c0012c17 <Dbg::kprintf(char const*, ...)+0x10e>
c0012b33:	83 c3 02             	add    ebx,0x2
c0012b36:	8a 07                	mov    al,BYTE PTR [edi]
c0012b38:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012b3b:	83 e8 25             	sub    eax,0x25
c0012b3e:	3c 53                	cmp    al,0x53
c0012b40:	0f 87 ba 00 00 00    	ja     c0012c00 <Dbg::kprintf(char const*, ...)+0xf7>
c0012b46:	0f b6 c0             	movzx  eax,al
c0012b49:	ff 24 85 54 a1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5eac]
c0012b50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b54:	89 c8                	mov    eax,ecx
c0012b56:	83 c1 04             	add    ecx,0x4
c0012b59:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b5d:	ff 30                	push   DWORD PTR [eax]
c0012b5f:	e8 4c ff ff ff       	call   c0012ab0 <Dbg::logs(char*)>
c0012b64:	58                   	pop    eax
c0012b65:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012b69:	84 c0                	test   al,al
c0012b6b:	75 b8                	jne    c0012b25 <Dbg::kprintf(char const*, ...)+0x1c>
c0012b6d:	83 c4 0c             	add    esp,0xc
c0012b70:	5b                   	pop    ebx
c0012b71:	5e                   	pop    esi
c0012b72:	5f                   	pop    edi
c0012b73:	5d                   	pop    ebp
c0012b74:	c3                   	ret    
c0012b75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b79:	89 d0                	mov    eax,edx
c0012b7b:	83 c2 04             	add    edx,0x4
c0012b7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b82:	ff 30                	push   DWORD PTR [eax]
c0012b84:	e8 44 ff ff ff       	call   c0012acd <Dbg::logWriteInt(unsigned int)>
c0012b89:	58                   	pop    eax
c0012b8a:	eb d9                	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b90:	89 d0                	mov    eax,edx
c0012b92:	83 c2 04             	add    edx,0x4
c0012b95:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012b98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b9c:	50                   	push   eax
c0012b9d:	e8 f7 fe ff ff       	call   c0012a99 <Dbg::logc(char)>
c0012ba2:	58                   	pop    eax
c0012ba3:	eb c0                	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ba5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ba9:	89 c8                	mov    eax,ecx
c0012bab:	83 c1 04             	add    ecx,0x4
c0012bae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bb2:	ff 30                	push   DWORD PTR [eax]
c0012bb4:	e8 14 ff ff ff       	call   c0012acd <Dbg::logWriteInt(unsigned int)>
c0012bb9:	5f                   	pop    edi
c0012bba:	eb a9                	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bc0:	89 c8                	mov    eax,ecx
c0012bc2:	83 c1 04             	add    ecx,0x4
c0012bc5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bc9:	6a 10                	push   0x10
c0012bcb:	ff 30                	push   DWORD PTR [eax]
c0012bcd:	e8 18 ff ff ff       	call   c0012aea <Dbg::logWriteIntBase(unsigned int, int)>
c0012bd2:	59                   	pop    ecx
c0012bd3:	5f                   	pop    edi
c0012bd4:	eb 8f                	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bda:	89 d0                	mov    eax,edx
c0012bdc:	83 c2 08             	add    edx,0x8
c0012bdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012be3:	6a 10                	push   0x10
c0012be5:	ff 30                	push   DWORD PTR [eax]
c0012be7:	e8 fe fe ff ff       	call   c0012aea <Dbg::logWriteIntBase(unsigned int, int)>
c0012bec:	58                   	pop    eax
c0012bed:	5a                   	pop    edx
c0012bee:	e9 72 ff ff ff       	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bf3:	6a 25                	push   0x25
c0012bf5:	e8 9f fe ff ff       	call   c0012a99 <Dbg::logc(char)>
c0012bfa:	58                   	pop    eax
c0012bfb:	e9 65 ff ff ff       	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c00:	6a 25                	push   0x25
c0012c02:	e8 92 fe ff ff       	call   c0012a99 <Dbg::logc(char)>
c0012c07:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c0a:	50                   	push   eax
c0012c0b:	e8 89 fe ff ff       	call   c0012a99 <Dbg::logc(char)>
c0012c10:	5a                   	pop    edx
c0012c11:	59                   	pop    ecx
c0012c12:	e9 4e ff ff ff       	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c17:	50                   	push   eax
c0012c18:	89 eb                	mov    ebx,ebp
c0012c1a:	e8 7a fe ff ff       	call   c0012a99 <Dbg::logc(char)>
c0012c1f:	89 fd                	mov    ebp,edi
c0012c21:	58                   	pop    eax
c0012c22:	e9 3e ff ff ff       	jmp    c0012b65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c27:	90                   	nop

c0012c28 <File::read(unsigned long long, void*, int*)>:
c0012c28:	53                   	push   ebx
c0012c29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c31:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c38:	3c 19                	cmp    al,0x19
c0012c3a:	77 35                	ja     c0012c71 <File::read(unsigned long long, void*, int*)+0x49>
c0012c3c:	8b 04 85 c0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f40]
c0012c43:	85 c0                	test   eax,eax
c0012c45:	74 2a                	je     c0012c71 <File::read(unsigned long long, void*, int*)+0x49>
c0012c47:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c4d:	85 c0                	test   eax,eax
c0012c4f:	74 20                	je     c0012c71 <File::read(unsigned long long, void*, int*)+0x49>
c0012c51:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c55:	74 21                	je     c0012c78 <File::read(unsigned long long, void*, int*)+0x50>
c0012c57:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c59:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c5d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c6b:	5b                   	pop    ebx
c0012c6c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c6f:	ff e0                	jmp    eax
c0012c71:	b8 0b 00 00 00       	mov    eax,0xb
c0012c76:	eb 05                	jmp    c0012c7d <File::read(unsigned long long, void*, int*)+0x55>
c0012c78:	b8 05 00 00 00       	mov    eax,0x5
c0012c7d:	5b                   	pop    ebx
c0012c7e:	c3                   	ret    
c0012c7f:	90                   	nop

c0012c80 <File::write(unsigned long long, void*, int*)>:
c0012c80:	53                   	push   ebx
c0012c81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c89:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c90:	3c 19                	cmp    al,0x19
c0012c92:	77 35                	ja     c0012cc9 <File::write(unsigned long long, void*, int*)+0x49>
c0012c94:	8b 04 85 c0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f40]
c0012c9b:	85 c0                	test   eax,eax
c0012c9d:	74 2a                	je     c0012cc9 <File::write(unsigned long long, void*, int*)+0x49>
c0012c9f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ca5:	85 c0                	test   eax,eax
c0012ca7:	74 20                	je     c0012cc9 <File::write(unsigned long long, void*, int*)+0x49>
c0012ca9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cad:	74 21                	je     c0012cd0 <File::write(unsigned long long, void*, int*)+0x50>
c0012caf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cb5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012cbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012cbf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012cc3:	5b                   	pop    ebx
c0012cc4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012cc7:	ff e0                	jmp    eax
c0012cc9:	b8 0b 00 00 00       	mov    eax,0xb
c0012cce:	eb 05                	jmp    c0012cd5 <File::write(unsigned long long, void*, int*)+0x55>
c0012cd0:	b8 05 00 00 00       	mov    eax,0x5
c0012cd5:	5b                   	pop    ebx
c0012cd6:	c3                   	ret    
c0012cd7:	90                   	nop

c0012cd8 <Directory::read(unsigned long long, void*, int*)>:
c0012cd8:	53                   	push   ebx
c0012cd9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cdd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ce1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ce8:	3c 19                	cmp    al,0x19
c0012cea:	77 35                	ja     c0012d21 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cec:	8b 04 85 c0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f40]
c0012cf3:	85 c0                	test   eax,eax
c0012cf5:	74 2a                	je     c0012d21 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cf7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cfd:	85 c0                	test   eax,eax
c0012cff:	74 20                	je     c0012d21 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d01:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d05:	74 21                	je     c0012d28 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d07:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d09:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d0d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d1b:	5b                   	pop    ebx
c0012d1c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d1f:	ff e0                	jmp    eax
c0012d21:	b8 0b 00 00 00       	mov    eax,0xb
c0012d26:	eb 05                	jmp    c0012d2d <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d28:	b8 05 00 00 00       	mov    eax,0x5
c0012d2d:	5b                   	pop    ebx
c0012d2e:	c3                   	ret    
c0012d2f:	90                   	nop

c0012d30 <Directory::write(unsigned long long, void*, int*)>:
c0012d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d34:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012d3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d40:	80 fa 19             	cmp    dl,0x19
c0012d43:	77 18                	ja     c0012d5d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d45:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c0012d4c:	85 d2                	test   edx,edx
c0012d4e:	74 0d                	je     c0012d5d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d50:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012d57:	19 c0                	sbb    eax,eax
c0012d59:	83 e0 0a             	and    eax,0xa
c0012d5c:	40                   	inc    eax
c0012d5d:	c3                   	ret    

c0012d5e <File::isAtty()>:
c0012d5e:	31 c0                	xor    eax,eax
c0012d60:	c3                   	ret    
c0012d61:	90                   	nop

c0012d62 <Directory::isAtty()>:
c0012d62:	31 c0                	xor    eax,eax
c0012d64:	c3                   	ret    
c0012d65:	90                   	nop

c0012d66 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012d66:	b8 0a 00 00 00       	mov    eax,0xa
c0012d6b:	c3                   	ret    

c0012d6c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d6c:	b8 0a 00 00 00       	mov    eax,0xa
c0012d71:	c3                   	ret    

c0012d72 <File::~File()>:
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	ba 10 a3 02 c0       	mov    edx,0xc002a310
c0012d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d7e:	89 10                	mov    DWORD PTR [eax],edx
c0012d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d84:	83 ec 0c             	sub    esp,0xc
c0012d87:	50                   	push   eax
c0012d88:	e8 2b eb ff ff       	call   c00118b8 <UnixFile::~UnixFile()>
c0012d8d:	83 c4 10             	add    esp,0x10
c0012d90:	90                   	nop
c0012d91:	83 c4 0c             	add    esp,0xc
c0012d94:	c3                   	ret    
c0012d95:	90                   	nop

c0012d96 <File::~File()>:
c0012d96:	83 ec 0c             	sub    esp,0xc
c0012d99:	83 ec 0c             	sub    esp,0xc
c0012d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da0:	e8 cd ff ff ff       	call   c0012d72 <File::~File()>
c0012da5:	83 c4 10             	add    esp,0x10
c0012da8:	83 ec 08             	sub    esp,0x8
c0012dab:	68 14 01 00 00       	push   0x114
c0012db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db4:	e8 70 fc ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0012db9:	83 c4 10             	add    esp,0x10
c0012dbc:	83 c4 0c             	add    esp,0xc
c0012dbf:	c3                   	ret    

c0012dc0 <Directory::~Directory()>:
c0012dc0:	83 ec 0c             	sub    esp,0xc
c0012dc3:	ba 2c a3 02 c0       	mov    edx,0xc002a32c
c0012dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dcc:	89 10                	mov    DWORD PTR [eax],edx
c0012dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd2:	83 ec 0c             	sub    esp,0xc
c0012dd5:	50                   	push   eax
c0012dd6:	e8 dd ea ff ff       	call   c00118b8 <UnixFile::~UnixFile()>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	90                   	nop
c0012ddf:	83 c4 0c             	add    esp,0xc
c0012de2:	c3                   	ret    
c0012de3:	90                   	nop

c0012de4 <Directory::~Directory()>:
c0012de4:	83 ec 0c             	sub    esp,0xc
c0012de7:	83 ec 0c             	sub    esp,0xc
c0012dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dee:	e8 cd ff ff ff       	call   c0012dc0 <Directory::~Directory()>
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	83 ec 08             	sub    esp,0x8
c0012df9:	68 14 01 00 00       	push   0x114
c0012dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e02:	e8 22 fc ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0012e07:	83 c4 10             	add    esp,0x10
c0012e0a:	83 c4 0c             	add    esp,0xc
c0012e0d:	c3                   	ret    

c0012e0e <Filesystem::Filesystem()>:
c0012e0e:	ba ac a2 02 c0       	mov    edx,0xc002a2ac
c0012e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e17:	89 10                	mov    DWORD PTR [eax],edx
c0012e19:	8b 15 28 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc28
c0012e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e2a:	a3 28 dc 02 c0       	mov    ds:0xc002dc28,eax
c0012e2f:	90                   	nop
c0012e30:	c3                   	ret    
c0012e31:	90                   	nop

c0012e32 <Filesystem::~Filesystem()>:
c0012e32:	ba ac a2 02 c0       	mov    edx,0xc002a2ac
c0012e37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e3b:	89 10                	mov    DWORD PTR [eax],edx
c0012e3d:	90                   	nop
c0012e3e:	c3                   	ret    
c0012e3f:	90                   	nop

c0012e40 <Filesystem::~Filesystem()>:
c0012e40:	83 ec 0c             	sub    esp,0xc
c0012e43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e47:	e8 e6 ff ff ff       	call   c0012e32 <Filesystem::~Filesystem()>
c0012e4c:	83 c4 04             	add    esp,0x4
c0012e4f:	83 ec 08             	sub    esp,0x8
c0012e52:	6a 08                	push   0x8
c0012e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e58:	e8 cc fb ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	83 c4 0c             	add    esp,0xc
c0012e63:	c3                   	ret    

c0012e64 <Fs::getcwd(Process*, char*, int)>:
c0012e64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e68:	31 c0                	xor    eax,eax
c0012e6a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e6d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e71:	7d 15                	jge    c0012e88 <Fs::getcwd(Process*, char*, int)+0x24>
c0012e73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e77:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012e7e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012e81:	84 c9                	test   cl,cl
c0012e83:	74 06                	je     c0012e8b <Fs::getcwd(Process*, char*, int)+0x27>
c0012e85:	40                   	inc    eax
c0012e86:	eb e2                	jmp    c0012e6a <Fs::getcwd(Process*, char*, int)+0x6>
c0012e88:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012e8b:	31 c0                	xor    eax,eax
c0012e8d:	c3                   	ret    

c0012e8e <Fs::initVFS()>:
c0012e8e:	83 ec 18             	sub    esp,0x18
c0012e91:	6a 08                	push   0x8
c0012e93:	e8 a2 c9 ff ff       	call   c000f83a <malloc>
c0012e98:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e9b:	e8 2a d9 00 00       	call   c00207ca <FAT::FAT()>
c0012ea0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ea7:	e8 8e c9 ff ff       	call   c000f83a <malloc>
c0012eac:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eaf:	e8 6e eb 00 00       	call   c0021a22 <ISO9660::ISO9660()>
c0012eb4:	83 c4 1c             	add    esp,0x1c
c0012eb7:	c3                   	ret    

c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012eb8:	55                   	push   ebp
c0012eb9:	57                   	push   edi
c0012eba:	56                   	push   esi
c0012ebb:	53                   	push   ebx
c0012ebc:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ec2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ec9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ed0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ed7:	68 00 04 00 00       	push   0x400
c0012edc:	6a 00                	push   0x0
c0012ede:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ee2:	56                   	push   esi
c0012ee3:	e8 90 d8 fe ff       	call   c0000778 <memset>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012eef:	75 0b                	jne    c0012efc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ef1:	50                   	push   eax
c0012ef2:	50                   	push   eax
c0012ef3:	57                   	push   edi
c0012ef4:	56                   	push   esi
c0012ef5:	e8 3a d9 fe ff       	call   c0000834 <strcpy>
c0012efa:	eb 41                	jmp    c0012f3d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012efc:	8a 07                	mov    al,BYTE PTR [edi]
c0012efe:	3c 5c                	cmp    al,0x5c
c0012f00:	74 04                	je     c0012f06 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f02:	3c 2f                	cmp    al,0x2f
c0012f04:	75 18                	jne    c0012f1e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f06:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f09:	3c 60                	cmp    al,0x60
c0012f0b:	7e 03                	jle    c0012f10 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f0d:	83 e8 20             	sub    eax,0x20
c0012f10:	88 04 24             	mov    BYTE PTR [esp],al
c0012f13:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f1a:	50                   	push   eax
c0012f1b:	50                   	push   eax
c0012f1c:	eb 18                	jmp    c0012f36 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f1e:	50                   	push   eax
c0012f1f:	50                   	push   eax
c0012f20:	55                   	push   ebp
c0012f21:	56                   	push   esi
c0012f22:	e8 0d d9 fe ff       	call   c0000834 <strcpy>
c0012f27:	5a                   	pop    edx
c0012f28:	59                   	pop    ecx
c0012f29:	68 c0 b8 02 c0       	push   0xc002b8c0
c0012f2e:	56                   	push   esi
c0012f2f:	e8 40 da fe ff       	call   c0000974 <strcat>
c0012f34:	5d                   	pop    ebp
c0012f35:	58                   	pop    eax
c0012f36:	57                   	push   edi
c0012f37:	56                   	push   esi
c0012f38:	e8 37 da fe ff       	call   c0000974 <strcat>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012f43:	3c 60                	cmp    al,0x60
c0012f45:	7e 03                	jle    c0012f4a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012f47:	83 e8 20             	sub    eax,0x20
c0012f4a:	88 04 24             	mov    BYTE PTR [esp],al
c0012f4d:	88 03                	mov    BYTE PTR [ebx],al
c0012f4f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f56:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012f5c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012f60:	bf 03 00 00 00       	mov    edi,0x3
c0012f65:	b8 03 00 00 00       	mov    eax,0x3
c0012f6a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f6d:	84 d2                	test   dl,dl
c0012f6f:	0f 84 91 00 00 00    	je     c0013006 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f75:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012f78:	80 fa 5c             	cmp    dl,0x5c
c0012f7b:	74 05                	je     c0012f82 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012f7d:	80 fa 2f             	cmp    dl,0x2f
c0012f80:	75 12                	jne    c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f82:	89 c5                	mov    ebp,eax
c0012f84:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f89:	74 09                	je     c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f8b:	40                   	inc    eax
c0012f8c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012f90:	89 cf                	mov    edi,ecx
c0012f92:	eb d6                	jmp    c0012f6a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012f94:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012f99:	75 5b                	jne    c0012ff6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012f9b:	80 fa 2e             	cmp    dl,0x2e
c0012f9e:	75 56                	jne    c0012ff6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012fa4:	74 19                	je     c0012fbf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012fa6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fab:	74 53                	je     c0013000 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fad:	89 f9                	mov    ecx,edi
c0012faf:	41                   	inc    ecx
c0012fb0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fb3:	80 fa 2f             	cmp    dl,0x2f
c0012fb6:	74 f7                	je     c0012faf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fb8:	80 fa 5c             	cmp    dl,0x5c
c0012fbb:	74 f2                	je     c0012faf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fbd:	eb d1                	jmp    c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fbf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fc4:	74 3a                	je     c0013000 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fc6:	83 f8 03             	cmp    eax,0x3
c0012fc9:	74 c5                	je     c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fcb:	41                   	inc    ecx
c0012fcc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fcf:	80 fa 2f             	cmp    dl,0x2f
c0012fd2:	74 f7                	je     c0012fcb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fd4:	80 fa 5c             	cmp    dl,0x5c
c0012fd7:	74 f2                	je     c0012fcb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fd9:	48                   	dec    eax
c0012fda:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fde:	75 06                	jne    c0012fe6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fe0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012fe4:	eb f3                	jmp    c0012fd9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012fe6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fea:	74 07                	je     c0012ff3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012fec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ff0:	48                   	dec    eax
c0012ff1:	eb f3                	jmp    c0012fe6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ff3:	40                   	inc    eax
c0012ff4:	eb 9a                	jmp    c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ff6:	80 fa 2f             	cmp    dl,0x2f
c0012ff9:	74 95                	je     c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ffb:	80 fa 5c             	cmp    dl,0x5c
c0012ffe:	74 90                	je     c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013000:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013003:	40                   	inc    eax
c0013004:	eb 8a                	jmp    c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013006:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001300a:	83 ec 0c             	sub    esp,0xc
c001300d:	53                   	push   ebx
c001300e:	e8 81 d7 fe ff       	call   c0000794 <strlen>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001301b:	75 26                	jne    c0013043 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	53                   	push   ebx
c0013021:	e8 6e d7 fe ff       	call   c0000794 <strlen>
c0013026:	83 c4 10             	add    esp,0x10
c0013029:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001302e:	74 26                	je     c0013056 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013030:	83 ec 0c             	sub    esp,0xc
c0013033:	53                   	push   ebx
c0013034:	e8 5b d7 fe ff       	call   c0000794 <strlen>
c0013039:	83 c4 10             	add    esp,0x10
c001303c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013041:	eb c7                	jmp    c001300a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013043:	83 ec 0c             	sub    esp,0xc
c0013046:	53                   	push   ebx
c0013047:	e8 48 d7 fe ff       	call   c0000794 <strlen>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013054:	74 c7                	je     c001301d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013056:	81 c4 0c 04 00 00    	add    esp,0x40c
c001305c:	5b                   	pop    ebx
c001305d:	5e                   	pop    esi
c001305e:	5f                   	pop    edi
c001305f:	5d                   	pop    ebp
c0013060:	c3                   	ret    
c0013061:	90                   	nop

c0013062 <File::File(char const*, Process*)>:
c0013062:	83 ec 0c             	sub    esp,0xc
c0013065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013069:	83 ec 08             	sub    esp,0x8
c001306c:	6a 00                	push   0x0
c001306e:	50                   	push   eax
c001306f:	e8 62 e6 ff ff       	call   c00116d6 <UnixFile::UnixFile(int)>
c0013074:	83 c4 10             	add    esp,0x10
c0013077:	ba 10 a3 02 c0       	mov    edx,0xc002a310
c001307c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013080:	89 10                	mov    DWORD PTR [eax],edx
c0013082:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013086:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001308c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013090:	83 c0 0d             	add    eax,0xd
c0013093:	83 ec 04             	sub    esp,0x4
c0013096:	52                   	push   edx
c0013097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001309b:	50                   	push   eax
c001309c:	e8 17 fe ff ff       	call   c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130ab:	8d 50 bf             	lea    edx,[eax-0x41]
c00130ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130bc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130c0:	90                   	nop
c00130c1:	83 c4 0c             	add    esp,0xc
c00130c4:	c3                   	ret    
c00130c5:	90                   	nop

c00130c6 <File::open(FileOpenMode)>:
c00130c6:	53                   	push   ebx
c00130c7:	b8 0b 00 00 00       	mov    eax,0xb
c00130cc:	83 ec 08             	sub    esp,0x8
c00130cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130d3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130da:	80 fa 19             	cmp    dl,0x19
c00130dd:	77 40                	ja     c001311f <File::open(FileOpenMode)+0x59>
c00130df:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c00130e6:	85 d2                	test   edx,edx
c00130e8:	74 35                	je     c001311f <File::open(FileOpenMode)+0x59>
c00130ea:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130f0:	85 d2                	test   edx,edx
c00130f2:	74 2b                	je     c001311f <File::open(FileOpenMode)+0x59>
c00130f4:	b8 06 00 00 00       	mov    eax,0x6
c00130f9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00130fd:	75 20                	jne    c001311f <File::open(FileOpenMode)+0x59>
c00130ff:	8b 02                	mov    eax,DWORD PTR [edx]
c0013101:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013107:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001310b:	51                   	push   ecx
c001310c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001310f:	51                   	push   ecx
c0013110:	52                   	push   edx
c0013111:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	85 c0                	test   eax,eax
c0013119:	75 04                	jne    c001311f <File::open(FileOpenMode)+0x59>
c001311b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001311f:	83 c4 08             	add    esp,0x8
c0013122:	5b                   	pop    ebx
c0013123:	c3                   	ret    

c0013124 <File::close()>:
c0013124:	53                   	push   ebx
c0013125:	b8 0b 00 00 00       	mov    eax,0xb
c001312a:	83 ec 08             	sub    esp,0x8
c001312d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013131:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013138:	80 fa 19             	cmp    dl,0x19
c001313b:	77 41                	ja     c001317e <File::close()+0x5a>
c001313d:	8b 1c 95 c0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f40]
c0013144:	85 db                	test   ebx,ebx
c0013146:	74 36                	je     c001317e <File::close()+0x5a>
c0013148:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001314f:	74 2d                	je     c001317e <File::close()+0x5a>
c0013151:	b8 05 00 00 00       	mov    eax,0x5
c0013156:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001315a:	74 22                	je     c001317e <File::close()+0x5a>
c001315c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013160:	8b 04 95 c0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f40]
c0013167:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001316d:	53                   	push   ebx
c001316e:	53                   	push   ebx
c001316f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013171:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013177:	50                   	push   eax
c0013178:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	83 c4 08             	add    esp,0x8
c0013181:	5b                   	pop    ebx
c0013182:	c3                   	ret    
c0013183:	90                   	nop

c0013184 <File::seek(unsigned long long)>:
c0013184:	56                   	push   esi
c0013185:	53                   	push   ebx
c0013186:	b8 0b 00 00 00       	mov    eax,0xb
c001318b:	51                   	push   ecx
c001318c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013190:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013194:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001319b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001319f:	80 fa 19             	cmp    dl,0x19
c00131a2:	77 31                	ja     c00131d5 <File::seek(unsigned long long)+0x51>
c00131a4:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c00131ab:	85 d2                	test   edx,edx
c00131ad:	74 26                	je     c00131d5 <File::seek(unsigned long long)+0x51>
c00131af:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131b5:	85 d2                	test   edx,edx
c00131b7:	74 1c                	je     c00131d5 <File::seek(unsigned long long)+0x51>
c00131b9:	b8 05 00 00 00       	mov    eax,0x5
c00131be:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00131c2:	74 11                	je     c00131d5 <File::seek(unsigned long long)+0x51>
c00131c4:	8b 02                	mov    eax,DWORD PTR [edx]
c00131c6:	53                   	push   ebx
c00131c7:	51                   	push   ecx
c00131c8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00131ce:	52                   	push   edx
c00131cf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131d2:	83 c4 10             	add    esp,0x10
c00131d5:	5a                   	pop    edx
c00131d6:	5b                   	pop    ebx
c00131d7:	5e                   	pop    esi
c00131d8:	c3                   	ret    
c00131d9:	90                   	nop

c00131da <File::tell(unsigned long long*)>:
c00131da:	83 ec 0c             	sub    esp,0xc
c00131dd:	b8 0b 00 00 00       	mov    eax,0xb
c00131e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131e6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131ed:	80 fa 19             	cmp    dl,0x19
c00131f0:	77 34                	ja     c0013226 <File::tell(unsigned long long*)+0x4c>
c00131f2:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c00131f9:	85 d2                	test   edx,edx
c00131fb:	74 29                	je     c0013226 <File::tell(unsigned long long*)+0x4c>
c00131fd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013203:	85 d2                	test   edx,edx
c0013205:	74 1f                	je     c0013226 <File::tell(unsigned long long*)+0x4c>
c0013207:	b8 05 00 00 00       	mov    eax,0x5
c001320c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013210:	74 14                	je     c0013226 <File::tell(unsigned long long*)+0x4c>
c0013212:	50                   	push   eax
c0013213:	8b 02                	mov    eax,DWORD PTR [edx]
c0013215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013219:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001321f:	52                   	push   edx
c0013220:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	83 c4 0c             	add    esp,0xc
c0013229:	c3                   	ret    

c001322a <File::rewind()>:
c001322a:	83 ec 10             	sub    esp,0x10
c001322d:	6a 00                	push   0x0
c001322f:	6a 00                	push   0x0
c0013231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013235:	e8 4a ff ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001323a:	83 c4 1c             	add    esp,0x1c
c001323d:	c3                   	ret    

c001323e <File::unlink()>:
c001323e:	83 ec 0c             	sub    esp,0xc
c0013241:	b8 0b 00 00 00       	mov    eax,0xb
c0013246:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001324a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013251:	80 f9 19             	cmp    cl,0x19
c0013254:	77 2f                	ja     c0013285 <File::unlink()+0x47>
c0013256:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c001325d:	85 c9                	test   ecx,ecx
c001325f:	74 24                	je     c0013285 <File::unlink()+0x47>
c0013261:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013267:	85 c9                	test   ecx,ecx
c0013269:	74 1a                	je     c0013285 <File::unlink()+0x47>
c001326b:	b8 06 00 00 00       	mov    eax,0x6
c0013270:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013274:	75 0f                	jne    c0013285 <File::unlink()+0x47>
c0013276:	83 c2 0d             	add    edx,0xd
c0013279:	50                   	push   eax
c001327a:	50                   	push   eax
c001327b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001327d:	52                   	push   edx
c001327e:	51                   	push   ecx
c001327f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	83 c4 0c             	add    esp,0xc
c0013288:	c3                   	ret    
c0013289:	90                   	nop

c001328a <File::rename(char const*)>:
c001328a:	83 ec 0c             	sub    esp,0xc
c001328d:	b8 0b 00 00 00       	mov    eax,0xb
c0013292:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013296:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001329d:	80 f9 19             	cmp    cl,0x19
c00132a0:	77 32                	ja     c00132d4 <File::rename(char const*)+0x4a>
c00132a2:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c00132a9:	85 c9                	test   ecx,ecx
c00132ab:	74 27                	je     c00132d4 <File::rename(char const*)+0x4a>
c00132ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b3:	85 c9                	test   ecx,ecx
c00132b5:	74 1d                	je     c00132d4 <File::rename(char const*)+0x4a>
c00132b7:	b8 06 00 00 00       	mov    eax,0x6
c00132bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132c0:	75 12                	jne    c00132d4 <File::rename(char const*)+0x4a>
c00132c2:	83 c2 0d             	add    edx,0xd
c00132c5:	50                   	push   eax
c00132c6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132cc:	52                   	push   edx
c00132cd:	51                   	push   ecx
c00132ce:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	83 c4 0c             	add    esp,0xc
c00132d7:	c3                   	ret    

c00132d8 <File::chfatattr(unsigned char, unsigned char)>:
c00132d8:	57                   	push   edi
c00132d9:	b8 0b 00 00 00       	mov    eax,0xb
c00132de:	56                   	push   esi
c00132df:	53                   	push   ebx
c00132e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132f3:	80 f9 19             	cmp    cl,0x19
c00132f6:	77 37                	ja     c001332f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00132f8:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c00132ff:	85 c9                	test   ecx,ecx
c0013301:	74 2c                	je     c001332f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013303:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013309:	85 c9                	test   ecx,ecx
c001330b:	74 22                	je     c001332f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001330d:	b8 06 00 00 00       	mov    eax,0x6
c0013312:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013316:	75 17                	jne    c001332f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013318:	8b 39                	mov    edi,DWORD PTR [ecx]
c001331a:	89 f0                	mov    eax,esi
c001331c:	83 c2 0d             	add    edx,0xd
c001331f:	0f b6 f0             	movzx  esi,al
c0013322:	0f b6 db             	movzx  ebx,bl
c0013325:	56                   	push   esi
c0013326:	53                   	push   ebx
c0013327:	52                   	push   edx
c0013328:	51                   	push   ecx
c0013329:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001332c:	83 c4 10             	add    esp,0x10
c001332f:	5b                   	pop    ebx
c0013330:	5e                   	pop    esi
c0013331:	5f                   	pop    edi
c0013332:	c3                   	ret    
c0013333:	90                   	nop

c0013334 <File::exists()>:
c0013334:	83 ec 0c             	sub    esp,0xc
c0013337:	31 c0                	xor    eax,eax
c0013339:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001333d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013344:	80 f9 19             	cmp    cl,0x19
c0013347:	77 24                	ja     c001336d <File::exists()+0x39>
c0013349:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c0013350:	85 c9                	test   ecx,ecx
c0013352:	74 19                	je     c001336d <File::exists()+0x39>
c0013354:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001335a:	85 c9                	test   ecx,ecx
c001335c:	74 0f                	je     c001336d <File::exists()+0x39>
c001335e:	83 c2 0d             	add    edx,0xd
c0013361:	50                   	push   eax
c0013362:	50                   	push   eax
c0013363:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013365:	52                   	push   edx
c0013366:	51                   	push   ecx
c0013367:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001336a:	83 c4 10             	add    esp,0x10
c001336d:	83 c4 0c             	add    esp,0xc
c0013370:	c3                   	ret    
c0013371:	90                   	nop

c0013372 <File::stat(unsigned long long*, bool*)>:
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	50                   	push   eax
c0013375:	b8 0b 00 00 00       	mov    eax,0xb
c001337a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001337e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013389:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001338d:	80 f9 19             	cmp    cl,0x19
c0013390:	77 3d                	ja     c00133cf <File::stat(unsigned long long*, bool*)+0x5d>
c0013392:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c0013399:	85 c9                	test   ecx,ecx
c001339b:	74 32                	je     c00133cf <File::stat(unsigned long long*, bool*)+0x5d>
c001339d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133a3:	85 c9                	test   ecx,ecx
c00133a5:	74 28                	je     c00133cf <File::stat(unsigned long long*, bool*)+0x5d>
c00133a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133ad:	74 13                	je     c00133c2 <File::stat(unsigned long long*, bool*)+0x50>
c00133af:	83 ec 04             	sub    esp,0x4
c00133b2:	56                   	push   esi
c00133b3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00133b9:	51                   	push   ecx
c00133ba:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00133bd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133c0:	eb 0a                	jmp    c00133cc <File::stat(unsigned long long*, bool*)+0x5a>
c00133c2:	53                   	push   ebx
c00133c3:	83 c2 0d             	add    edx,0xd
c00133c6:	56                   	push   esi
c00133c7:	52                   	push   edx
c00133c8:	51                   	push   ecx
c00133c9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00133cc:	83 c4 10             	add    esp,0x10
c00133cf:	5a                   	pop    edx
c00133d0:	5b                   	pop    ebx
c00133d1:	5e                   	pop    esi
c00133d2:	c3                   	ret    

c00133d3 <Fs::setcwd(Process*, char*)>:
c00133d3:	55                   	push   ebp
c00133d4:	57                   	push   edi
c00133d5:	56                   	push   esi
c00133d6:	53                   	push   ebx
c00133d7:	81 ec 20 02 00 00    	sub    esp,0x220
c00133dd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00133e4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00133ea:	57                   	push   edi
c00133eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00133f2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00133f6:	56                   	push   esi
c00133f7:	e8 bc fa ff ff       	call   c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00133fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00133ff:	e8 90 d3 fe ff       	call   c0000794 <strlen>
c0013404:	83 c4 10             	add    esp,0x10
c0013407:	83 f8 02             	cmp    eax,0x2
c001340a:	77 17                	ja     c0013423 <Fs::setcwd(Process*, char*)+0x50>
c001340c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013411:	83 e8 41             	sub    eax,0x41
c0013414:	83 f8 19             	cmp    eax,0x19
c0013417:	76 24                	jbe    c001343d <Fs::setcwd(Process*, char*)+0x6a>
c0013419:	b8 03 00 00 00       	mov    eax,0x3
c001341e:	e9 e0 00 00 00       	jmp    c0013503 <Fs::setcwd(Process*, char*)+0x130>
c0013423:	83 ec 0c             	sub    esp,0xc
c0013426:	56                   	push   esi
c0013427:	e8 68 d3 fe ff       	call   c0000794 <strlen>
c001342c:	83 c4 10             	add    esp,0x10
c001342f:	83 f8 03             	cmp    eax,0x3
c0013432:	75 34                	jne    c0013468 <Fs::setcwd(Process*, char*)+0x95>
c0013434:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013439:	75 2d                	jne    c0013468 <Fs::setcwd(Process*, char*)+0x95>
c001343b:	eb cf                	jmp    c001340c <Fs::setcwd(Process*, char*)+0x39>
c001343d:	8b 14 85 c0 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f40]
c0013444:	b8 05 00 00 00       	mov    eax,0x5
c0013449:	85 d2                	test   edx,edx
c001344b:	0f 84 b2 00 00 00    	je     c0013503 <Fs::setcwd(Process*, char*)+0x130>
c0013451:	b8 06 00 00 00       	mov    eax,0x6
c0013456:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001345d:	0f 85 92 00 00 00    	jne    c00134f5 <Fs::setcwd(Process*, char*)+0x122>
c0013463:	e9 9b 00 00 00       	jmp    c0013503 <Fs::setcwd(Process*, char*)+0x130>
c0013468:	83 ec 0c             	sub    esp,0xc
c001346b:	68 14 01 00 00       	push   0x114
c0013470:	e8 c5 c3 ff ff       	call   c000f83a <malloc>
c0013475:	83 c4 0c             	add    esp,0xc
c0013478:	89 c3                	mov    ebx,eax
c001347a:	55                   	push   ebp
c001347b:	56                   	push   esi
c001347c:	50                   	push   eax
c001347d:	e8 e0 fb ff ff       	call   c0013062 <File::File(char const*, Process*)>
c0013482:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013487:	83 c4 0c             	add    esp,0xc
c001348a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001348e:	50                   	push   eax
c001348f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013493:	50                   	push   eax
c0013494:	53                   	push   ebx
c0013495:	e8 d8 fe ff ff       	call   c0013372 <File::stat(unsigned long long*, bool*)>
c001349a:	83 c4 10             	add    esp,0x10
c001349d:	83 f8 02             	cmp    eax,0x2
c00134a0:	74 04                	je     c00134a6 <Fs::setcwd(Process*, char*)+0xd3>
c00134a2:	85 c0                	test   eax,eax
c00134a4:	74 1c                	je     c00134c2 <Fs::setcwd(Process*, char*)+0xef>
c00134a6:	b8 01 00 00 00       	mov    eax,0x1
c00134ab:	85 db                	test   ebx,ebx
c00134ad:	74 54                	je     c0013503 <Fs::setcwd(Process*, char*)+0x130>
c00134af:	83 ec 0c             	sub    esp,0xc
c00134b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134b4:	53                   	push   ebx
c00134b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134b8:	83 c4 10             	add    esp,0x10
c00134bb:	b8 01 00 00 00       	mov    eax,0x1
c00134c0:	eb 41                	jmp    c0013503 <Fs::setcwd(Process*, char*)+0x130>
c00134c2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134c7:	75 1c                	jne    c00134e5 <Fs::setcwd(Process*, char*)+0x112>
c00134c9:	b8 02 00 00 00       	mov    eax,0x2
c00134ce:	85 db                	test   ebx,ebx
c00134d0:	74 31                	je     c0013503 <Fs::setcwd(Process*, char*)+0x130>
c00134d2:	83 ec 0c             	sub    esp,0xc
c00134d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134d7:	53                   	push   ebx
c00134d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134db:	83 c4 10             	add    esp,0x10
c00134de:	b8 02 00 00 00       	mov    eax,0x2
c00134e3:	eb 1e                	jmp    c0013503 <Fs::setcwd(Process*, char*)+0x130>
c00134e5:	85 db                	test   ebx,ebx
c00134e7:	74 0c                	je     c00134f5 <Fs::setcwd(Process*, char*)+0x122>
c00134e9:	83 ec 0c             	sub    esp,0xc
c00134ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134ee:	53                   	push   ebx
c00134ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134f2:	83 c4 10             	add    esp,0x10
c00134f5:	50                   	push   eax
c00134f6:	50                   	push   eax
c00134f7:	56                   	push   esi
c00134f8:	57                   	push   edi
c00134f9:	e8 36 d3 fe ff       	call   c0000834 <strcpy>
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	31 c0                	xor    eax,eax
c0013503:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013509:	5b                   	pop    ebx
c001350a:	5e                   	pop    esi
c001350b:	5f                   	pop    edi
c001350c:	5d                   	pop    ebp
c001350d:	c3                   	ret    

c001350e <Directory::Directory(char const*, Process*)>:
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013515:	83 ec 08             	sub    esp,0x8
c0013518:	6a 00                	push   0x0
c001351a:	50                   	push   eax
c001351b:	e8 b6 e1 ff ff       	call   c00116d6 <UnixFile::UnixFile(int)>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	ba 2c a3 02 c0       	mov    edx,0xc002a32c
c0013528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352c:	89 10                	mov    DWORD PTR [eax],edx
c001352e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013532:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353c:	83 c0 0d             	add    eax,0xd
c001353f:	83 ec 04             	sub    esp,0x4
c0013542:	52                   	push   edx
c0013543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013547:	50                   	push   eax
c0013548:	e8 6b f9 ff ff       	call   c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013554:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013557:	8d 50 bf             	lea    edx,[eax-0x41]
c001355a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013568:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001356c:	90                   	nop
c001356d:	83 c4 0c             	add    esp,0xc
c0013570:	c3                   	ret    
c0013571:	90                   	nop

c0013572 <Directory::open()>:
c0013572:	53                   	push   ebx
c0013573:	b8 0b 00 00 00       	mov    eax,0xb
c0013578:	83 ec 08             	sub    esp,0x8
c001357b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001357f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013586:	80 fa 19             	cmp    dl,0x19
c0013589:	77 3d                	ja     c00135c8 <Directory::open()+0x56>
c001358b:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c0013592:	85 d2                	test   edx,edx
c0013594:	74 32                	je     c00135c8 <Directory::open()+0x56>
c0013596:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001359c:	85 d2                	test   edx,edx
c001359e:	74 28                	je     c00135c8 <Directory::open()+0x56>
c00135a0:	b8 06 00 00 00       	mov    eax,0x6
c00135a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135a9:	75 1d                	jne    c00135c8 <Directory::open()+0x56>
c00135ab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135b1:	50                   	push   eax
c00135b2:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b4:	51                   	push   ecx
c00135b5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135b8:	51                   	push   ecx
c00135b9:	52                   	push   edx
c00135ba:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	85 c0                	test   eax,eax
c00135c2:	75 04                	jne    c00135c8 <Directory::open()+0x56>
c00135c4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135c8:	83 c4 08             	add    esp,0x8
c00135cb:	5b                   	pop    ebx
c00135cc:	c3                   	ret    
c00135cd:	90                   	nop

c00135ce <Directory::close()>:
c00135ce:	53                   	push   ebx
c00135cf:	b8 0b 00 00 00       	mov    eax,0xb
c00135d4:	83 ec 08             	sub    esp,0x8
c00135d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135db:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135e2:	80 fa 19             	cmp    dl,0x19
c00135e5:	77 41                	ja     c0013628 <Directory::close()+0x5a>
c00135e7:	8b 1c 95 c0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f40]
c00135ee:	85 db                	test   ebx,ebx
c00135f0:	74 36                	je     c0013628 <Directory::close()+0x5a>
c00135f2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135f9:	74 2d                	je     c0013628 <Directory::close()+0x5a>
c00135fb:	b8 05 00 00 00       	mov    eax,0x5
c0013600:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013604:	74 22                	je     c0013628 <Directory::close()+0x5a>
c0013606:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001360a:	8b 04 95 c0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f40]
c0013611:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013617:	53                   	push   ebx
c0013618:	53                   	push   ebx
c0013619:	8b 10                	mov    edx,DWORD PTR [eax]
c001361b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013621:	50                   	push   eax
c0013622:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013625:	83 c4 10             	add    esp,0x10
c0013628:	83 c4 08             	add    esp,0x8
c001362b:	5b                   	pop    ebx
c001362c:	c3                   	ret    
c001362d:	90                   	nop

c001362e <Directory::unlink()>:
c001362e:	83 ec 0c             	sub    esp,0xc
c0013631:	b8 0b 00 00 00       	mov    eax,0xb
c0013636:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001363a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013641:	80 f9 19             	cmp    cl,0x19
c0013644:	77 2f                	ja     c0013675 <Directory::unlink()+0x47>
c0013646:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c001364d:	85 c9                	test   ecx,ecx
c001364f:	74 24                	je     c0013675 <Directory::unlink()+0x47>
c0013651:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013657:	85 c9                	test   ecx,ecx
c0013659:	74 1a                	je     c0013675 <Directory::unlink()+0x47>
c001365b:	b8 06 00 00 00       	mov    eax,0x6
c0013660:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013664:	75 0f                	jne    c0013675 <Directory::unlink()+0x47>
c0013666:	83 c2 0d             	add    edx,0xd
c0013669:	50                   	push   eax
c001366a:	50                   	push   eax
c001366b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001366d:	52                   	push   edx
c001366e:	51                   	push   ecx
c001366f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013672:	83 c4 10             	add    esp,0x10
c0013675:	83 c4 0c             	add    esp,0xc
c0013678:	c3                   	ret    
c0013679:	90                   	nop

c001367a <Directory::rename(char const*)>:
c001367a:	83 ec 0c             	sub    esp,0xc
c001367d:	b8 0b 00 00 00       	mov    eax,0xb
c0013682:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013686:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001368d:	80 f9 19             	cmp    cl,0x19
c0013690:	77 32                	ja     c00136c4 <Directory::rename(char const*)+0x4a>
c0013692:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c0013699:	85 c9                	test   ecx,ecx
c001369b:	74 27                	je     c00136c4 <Directory::rename(char const*)+0x4a>
c001369d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a3:	85 c9                	test   ecx,ecx
c00136a5:	74 1d                	je     c00136c4 <Directory::rename(char const*)+0x4a>
c00136a7:	b8 06 00 00 00       	mov    eax,0x6
c00136ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b0:	75 12                	jne    c00136c4 <Directory::rename(char const*)+0x4a>
c00136b2:	83 c2 0d             	add    edx,0xd
c00136b5:	50                   	push   eax
c00136b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136bc:	52                   	push   edx
c00136bd:	51                   	push   ecx
c00136be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136c1:	83 c4 10             	add    esp,0x10
c00136c4:	83 c4 0c             	add    esp,0xc
c00136c7:	c3                   	ret    

c00136c8 <Directory::exists()>:
c00136c8:	83 ec 0c             	sub    esp,0xc
c00136cb:	31 c0                	xor    eax,eax
c00136cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136d8:	80 f9 19             	cmp    cl,0x19
c00136db:	77 24                	ja     c0013701 <Directory::exists()+0x39>
c00136dd:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c00136e4:	85 c9                	test   ecx,ecx
c00136e6:	74 19                	je     c0013701 <Directory::exists()+0x39>
c00136e8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136ee:	85 c9                	test   ecx,ecx
c00136f0:	74 0f                	je     c0013701 <Directory::exists()+0x39>
c00136f2:	83 c2 0d             	add    edx,0xd
c00136f5:	50                   	push   eax
c00136f6:	50                   	push   eax
c00136f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f9:	52                   	push   edx
c00136fa:	51                   	push   ecx
c00136fb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136fe:	83 c4 10             	add    esp,0x10
c0013701:	83 c4 0c             	add    esp,0xc
c0013704:	c3                   	ret    
c0013705:	90                   	nop

c0013706 <Directory::read(dirent*)>:
c0013706:	83 ec 1c             	sub    esp,0x1c
c0013709:	b8 0b 00 00 00       	mov    eax,0xb
c001370e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013712:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013719:	80 fa 19             	cmp    dl,0x19
c001371c:	77 30                	ja     c001374e <Directory::read(dirent*)+0x48>
c001371e:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c0013725:	85 d2                	test   edx,edx
c0013727:	74 25                	je     c001374e <Directory::read(dirent*)+0x48>
c0013729:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013730:	74 1c                	je     c001374e <Directory::read(dirent*)+0x48>
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013737:	8d 54 24 18          	lea    edx,[esp+0x18]
c001373b:	52                   	push   edx
c001373c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013740:	6a 00                	push   0x0
c0013742:	68 10 01 00 00       	push   0x110
c0013747:	51                   	push   ecx
c0013748:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001374b:	83 c4 20             	add    esp,0x20
c001374e:	83 c4 1c             	add    esp,0x1c
c0013751:	c3                   	ret    

c0013752 <Directory::create()>:
c0013752:	83 ec 0c             	sub    esp,0xc
c0013755:	b8 0b 00 00 00       	mov    eax,0xb
c001375a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001375e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013765:	80 f9 19             	cmp    cl,0x19
c0013768:	77 2f                	ja     c0013799 <Directory::create()+0x47>
c001376a:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c0013771:	85 c9                	test   ecx,ecx
c0013773:	74 24                	je     c0013799 <Directory::create()+0x47>
c0013775:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001377b:	85 c9                	test   ecx,ecx
c001377d:	74 1a                	je     c0013799 <Directory::create()+0x47>
c001377f:	b8 06 00 00 00       	mov    eax,0x6
c0013784:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013788:	75 0f                	jne    c0013799 <Directory::create()+0x47>
c001378a:	83 c2 0d             	add    edx,0xd
c001378d:	50                   	push   eax
c001378e:	50                   	push   eax
c001378f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013791:	52                   	push   edx
c0013792:	51                   	push   ecx
c0013793:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	83 c4 0c             	add    esp,0xc
c001379c:	c3                   	ret    
c001379d:	90                   	nop

c001379e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001379e:	b8 0a 00 00 00       	mov    eax,0xa
c00137a3:	c3                   	ret    

c00137a4 <Bus::Bus(char const*)>:
c00137a4:	83 ec 0c             	sub    esp,0xc
c00137a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ab:	83 ec 08             	sub    esp,0x8
c00137ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b2:	50                   	push   eax
c00137b3:	e8 68 09 00 00       	call   c0014120 <Device::Device(char const*)>
c00137b8:	83 c4 10             	add    esp,0x10
c00137bb:	ba 48 a3 02 c0       	mov    edx,0xc002a348
c00137c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c4:	89 10                	mov    DWORD PTR [eax],edx
c00137c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00137d4:	90                   	nop
c00137d5:	83 c4 0c             	add    esp,0xc
c00137d8:	c3                   	ret    
c00137d9:	90                   	nop

c00137da <Bus::~Bus()>:
c00137da:	83 ec 0c             	sub    esp,0xc
c00137dd:	ba 48 a3 02 c0       	mov    edx,0xc002a348
c00137e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e6:	89 10                	mov    DWORD PTR [eax],edx
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	83 ec 0c             	sub    esp,0xc
c00137ef:	50                   	push   eax
c00137f0:	e8 0d 06 00 00       	call   c0013e02 <Device::~Device()>
c00137f5:	83 c4 10             	add    esp,0x10
c00137f8:	90                   	nop
c00137f9:	83 c4 0c             	add    esp,0xc
c00137fc:	c3                   	ret    
c00137fd:	90                   	nop

c00137fe <Bus::~Bus()>:
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	83 ec 0c             	sub    esp,0xc
c0013804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013808:	e8 cd ff ff ff       	call   c00137da <Bus::~Bus()>
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	83 ec 08             	sub    esp,0x8
c0013813:	68 58 01 00 00       	push   0x158
c0013818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001381c:	e8 08 f2 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0013821:	83 c4 10             	add    esp,0x10
c0013824:	83 c4 0c             	add    esp,0xc
c0013827:	c3                   	ret    

c0013828 <Buzzer::Buzzer(char const*)>:
c0013828:	83 ec 0c             	sub    esp,0xc
c001382b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382f:	83 ec 08             	sub    esp,0x8
c0013832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013836:	50                   	push   eax
c0013837:	e8 e4 08 00 00       	call   c0014120 <Device::Device(char const*)>
c001383c:	83 c4 10             	add    esp,0x10
c001383f:	ba 74 a3 02 c0       	mov    edx,0xc002a374
c0013844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013848:	89 10                	mov    DWORD PTR [eax],edx
c001384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013866:	90                   	nop
c0013867:	83 c4 0c             	add    esp,0xc
c001386a:	c3                   	ret    
c001386b:	90                   	nop

c001386c <Buzzer::~Buzzer()>:
c001386c:	83 ec 0c             	sub    esp,0xc
c001386f:	ba 74 a3 02 c0       	mov    edx,0xc002a374
c0013874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013878:	89 10                	mov    DWORD PTR [eax],edx
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	83 ec 0c             	sub    esp,0xc
c0013881:	50                   	push   eax
c0013882:	e8 7b 05 00 00       	call   c0013e02 <Device::~Device()>
c0013887:	83 c4 10             	add    esp,0x10
c001388a:	90                   	nop
c001388b:	83 c4 0c             	add    esp,0xc
c001388e:	c3                   	ret    
c001388f:	90                   	nop

c0013890 <Buzzer::~Buzzer()>:
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	83 ec 0c             	sub    esp,0xc
c0013896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389a:	e8 cd ff ff ff       	call   c001386c <Buzzer::~Buzzer()>
c001389f:	83 c4 10             	add    esp,0x10
c00138a2:	83 ec 08             	sub    esp,0x8
c00138a5:	68 5c 01 00 00       	push   0x15c
c00138aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138ae:	e8 76 f1 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00138b3:	83 c4 10             	add    esp,0x10
c00138b6:	83 c4 0c             	add    esp,0xc
c00138b9:	c3                   	ret    

c00138ba <Buzzer::stop()>:
c00138ba:	83 ec 14             	sub    esp,0x14
c00138bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00138c3:	6a 00                	push   0x0
c00138c5:	50                   	push   eax
c00138c6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138c9:	83 c4 1c             	add    esp,0x1c
c00138cc:	c3                   	ret    

c00138cd <beepThread(void*)>:
c00138cd:	53                   	push   ebx
c00138ce:	83 ec 08             	sub    esp,0x8
c00138d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138d5:	e8 7e 9d 00 00       	call   c001d658 <unlockScheduler()>
c00138da:	b8 40 42 0f 00       	mov    eax,0xf4240
c00138df:	52                   	push   edx
c00138e0:	52                   	push   edx
c00138e1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00138e7:	52                   	push   edx
c00138e8:	50                   	push   eax
c00138e9:	e8 b8 a2 00 00       	call   c001dba6 <nanoSleep(unsigned long long)>
c00138ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138f1:	e8 c4 ff ff ff       	call   c00138ba <Buzzer::stop()>
c00138f6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00138fe:	83 c4 18             	add    esp,0x18
c0013901:	5b                   	pop    ebx
c0013902:	e9 e5 a1 00 00       	jmp    c001daec <blockTask(TaskState)>
c0013907:	90                   	nop

c0013908 <Buzzer::beep(int, int, bool)>:
c0013908:	57                   	push   edi
c0013909:	56                   	push   esi
c001390a:	53                   	push   ebx
c001390b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001390f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013913:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013917:	52                   	push   edx
c0013918:	52                   	push   edx
c0013919:	8b 06                	mov    eax,DWORD PTR [esi]
c001391b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001391f:	56                   	push   esi
c0013920:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013923:	83 c4 10             	add    esp,0x10
c0013926:	89 f8                	mov    eax,edi
c0013928:	84 c0                	test   al,al
c001392a:	74 1f                	je     c001394b <Buzzer::beep(int, int, bool)+0x43>
c001392c:	50                   	push   eax
c001392d:	50                   	push   eax
c001392e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013934:	99                   	cdq    
c0013935:	52                   	push   edx
c0013936:	50                   	push   eax
c0013937:	e8 6a a2 00 00       	call   c001dba6 <nanoSleep(unsigned long long)>
c001393c:	83 c4 10             	add    esp,0x10
c001393f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013943:	5b                   	pop    ebx
c0013944:	5e                   	pop    esi
c0013945:	5f                   	pop    edi
c0013946:	e9 6f ff ff ff       	jmp    c00138ba <Buzzer::stop()>
c001394b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013951:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0013956:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001395e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013962:	c7 44 24 14 cd 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc00138cd
c001396a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001396e:	5b                   	pop    ebx
c001396f:	5e                   	pop    esi
c0013970:	5f                   	pop    edi
c0013971:	e9 12 9e 00 00       	jmp    c001d788 <Process::createThread(void (*)(void*), void*, int)>

c0013976 <User::loadClockSettings(int)>:
c0013976:	53                   	push   ebx
c0013977:	83 ec 14             	sub    esp,0x14
c001397a:	68 14 01 00 00       	push   0x114
c001397f:	e8 b6 be ff ff       	call   c000f83a <malloc>
c0013984:	83 c4 0c             	add    esp,0xc
c0013987:	89 c3                	mov    ebx,eax
c0013989:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c001398f:	68 9c a3 02 c0       	push   0xc002a39c
c0013994:	50                   	push   eax
c0013995:	e8 c8 f6 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001399a:	58                   	pop    eax
c001399b:	5a                   	pop    edx
c001399c:	6a 01                	push   0x1
c001399e:	53                   	push   ebx
c001399f:	e8 22 f7 ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c00139a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139a7:	e8 78 f7 ff ff       	call   c0013124 <File::close()>
c00139ac:	83 c4 10             	add    esp,0x10
c00139af:	85 db                	test   ebx,ebx
c00139b1:	74 0f                	je     c00139c2 <User::loadClockSettings(int)+0x4c>
c00139b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00139b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139bc:	83 c4 08             	add    esp,0x8
c00139bf:	5b                   	pop    ebx
c00139c0:	ff e0                	jmp    eax
c00139c2:	83 c4 08             	add    esp,0x8
c00139c5:	5b                   	pop    ebx
c00139c6:	c3                   	ret    
c00139c7:	90                   	nop

c00139c8 <Clock::Clock(char const*)>:
c00139c8:	83 ec 0c             	sub    esp,0xc
c00139cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139cf:	83 ec 08             	sub    esp,0x8
c00139d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139d6:	50                   	push   eax
c00139d7:	e8 44 07 00 00       	call   c0014120 <Device::Device(char const*)>
c00139dc:	83 c4 10             	add    esp,0x10
c00139df:	ba c4 a3 02 c0       	mov    edx,0xc002a3c4
c00139e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e8:	89 10                	mov    DWORD PTR [eax],edx
c00139ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ee:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00139f8:	90                   	nop
c00139f9:	83 c4 0c             	add    esp,0xc
c00139fc:	c3                   	ret    
c00139fd:	90                   	nop

c00139fe <Clock::~Clock()>:
c00139fe:	83 ec 0c             	sub    esp,0xc
c0013a01:	ba c4 a3 02 c0       	mov    edx,0xc002a3c4
c0013a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0a:	89 10                	mov    DWORD PTR [eax],edx
c0013a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a10:	83 ec 0c             	sub    esp,0xc
c0013a13:	50                   	push   eax
c0013a14:	e8 e9 03 00 00       	call   c0013e02 <Device::~Device()>
c0013a19:	83 c4 10             	add    esp,0x10
c0013a1c:	90                   	nop
c0013a1d:	83 c4 0c             	add    esp,0xc
c0013a20:	c3                   	ret    
c0013a21:	90                   	nop

c0013a22 <Clock::~Clock()>:
c0013a22:	83 ec 0c             	sub    esp,0xc
c0013a25:	83 ec 0c             	sub    esp,0xc
c0013a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a2c:	e8 cd ff ff ff       	call   c00139fe <Clock::~Clock()>
c0013a31:	83 c4 10             	add    esp,0x10
c0013a34:	83 ec 08             	sub    esp,0x8
c0013a37:	68 58 01 00 00       	push   0x158
c0013a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a40:	e8 e4 ef ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0013a45:	83 c4 10             	add    esp,0x10
c0013a48:	83 c4 0c             	add    esp,0xc
c0013a4b:	c3                   	ret    

c0013a4c <Clock::timeInSecondsLocal()>:
c0013a4c:	53                   	push   ebx
c0013a4d:	83 ec 14             	sub    esp,0x14
c0013a50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a54:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a56:	50                   	push   eax
c0013a57:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013a5a:	0f b6 0d 30 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc30
c0013a61:	03 0d 34 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc34
c0013a67:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a6d:	89 cb                	mov    ebx,ecx
c0013a6f:	c1 fb 1f             	sar    ebx,0x1f
c0013a72:	01 c8                	add    eax,ecx
c0013a74:	11 da                	adc    edx,ebx
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	31 c9                	xor    ecx,ecx
c0013a7b:	80 3d 31 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc31,0x0
c0013a82:	74 05                	je     c0013a89 <Clock::timeInSecondsLocal()+0x3d>
c0013a84:	b9 08 07 00 00       	mov    ecx,0x708
c0013a89:	31 db                	xor    ebx,ebx
c0013a8b:	01 c8                	add    eax,ecx
c0013a8d:	11 da                	adc    edx,ebx
c0013a8f:	83 c4 08             	add    esp,0x8
c0013a92:	5b                   	pop    ebx
c0013a93:	c3                   	ret    

c0013a94 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013a94:	57                   	push   edi
c0013a95:	56                   	push   esi
c0013a96:	53                   	push   ebx
c0013a97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aa1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013aa5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013aa8:	0f b6 05 30 dc 02 c0 	movzx  eax,BYTE PTR ds:0xc002dc30
c0013aaf:	03 05 34 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dc34
c0013ab5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013abb:	99                   	cdq    
c0013abc:	29 c6                	sub    esi,eax
c0013abe:	19 d7                	sbb    edi,edx
c0013ac0:	89 f0                	mov    eax,esi
c0013ac2:	89 fa                	mov    edx,edi
c0013ac4:	31 f6                	xor    esi,esi
c0013ac6:	80 3d 31 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc31,0x0
c0013acd:	74 05                	je     c0013ad4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013acf:	be 08 07 00 00       	mov    esi,0x708
c0013ad4:	31 ff                	xor    edi,edi
c0013ad6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ada:	29 f0                	sub    eax,esi
c0013adc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ae0:	19 fa                	sbb    edx,edi
c0013ae2:	89 d8                	mov    eax,ebx
c0013ae4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ae8:	5b                   	pop    ebx
c0013ae9:	5e                   	pop    esi
c0013aea:	5f                   	pop    edi
c0013aeb:	ff e0                	jmp    eax

c0013aed <datetimeToSeconds(datetime_t)>:
c0013aed:	55                   	push   ebp
c0013aee:	57                   	push   edi
c0013aef:	56                   	push   esi
c0013af0:	53                   	push   ebx
c0013af1:	83 ec 14             	sub    esp,0x14
c0013af4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013af8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013afc:	89 d3                	mov    ebx,edx
c0013afe:	0f b6 c6             	movzx  eax,dh
c0013b01:	c1 eb 10             	shr    ebx,0x10
c0013b04:	48                   	dec    eax
c0013b05:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b0a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b0e:	0f b6 f5             	movzx  esi,ch
c0013b11:	89 cf                	mov    edi,ecx
c0013b13:	6b f6 3c             	imul   esi,esi,0x3c
c0013b16:	c1 ef 10             	shr    edi,0x10
c0013b19:	0f b6 c9             	movzx  ecx,cl
c0013b1c:	89 f8                	mov    eax,edi
c0013b1e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b24:	0f b6 f8             	movzx  edi,al
c0013b27:	0f b6 d2             	movzx  edx,dl
c0013b2a:	01 fe                	add    esi,edi
c0013b2c:	01 f1                	add    ecx,esi
c0013b2e:	0f b7 f3             	movzx  esi,bx
c0013b31:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b35:	c1 f9 1f             	sar    ecx,0x1f
c0013b38:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013b3d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b41:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013b46:	8b 0c 8d 00 a4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5c00]
c0013b4d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013b51:	76 29                	jbe    c0013b7c <datetimeToSeconds(datetime_t)+0x8f>
c0013b53:	f6 c3 03             	test   bl,0x3
c0013b56:	75 24                	jne    c0013b7c <datetimeToSeconds(datetime_t)+0x8f>
c0013b58:	31 d2                	xor    edx,edx
c0013b5a:	bf 64 00 00 00       	mov    edi,0x64
c0013b5f:	89 d8                	mov    eax,ebx
c0013b61:	66 f7 f7             	div    di
c0013b64:	66 85 d2             	test   dx,dx
c0013b67:	75 12                	jne    c0013b7b <datetimeToSeconds(datetime_t)+0x8e>
c0013b69:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013b6f:	bf 90 01 00 00       	mov    edi,0x190
c0013b74:	99                   	cdq    
c0013b75:	f7 ff                	idiv   edi
c0013b77:	85 d2                	test   edx,edx
c0013b79:	75 01                	jne    c0013b7c <datetimeToSeconds(datetime_t)+0x8f>
c0013b7b:	41                   	inc    ecx
c0013b7c:	66 83 fb 46          	cmp    bx,0x46
c0013b80:	76 45                	jbe    c0013bc7 <datetimeToSeconds(datetime_t)+0xda>
c0013b82:	bb 46 00 00 00       	mov    ebx,0x46
c0013b87:	bf 64 00 00 00       	mov    edi,0x64
c0013b8c:	bd 90 01 00 00       	mov    ebp,0x190
c0013b91:	b8 6d 01 00 00       	mov    eax,0x16d
c0013b96:	f6 c3 03             	test   bl,0x3
c0013b99:	75 23                	jne    c0013bbe <datetimeToSeconds(datetime_t)+0xd1>
c0013b9b:	89 d8                	mov    eax,ebx
c0013b9d:	99                   	cdq    
c0013b9e:	f7 ff                	idiv   edi
c0013ba0:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ba5:	85 d2                	test   edx,edx
c0013ba7:	75 15                	jne    c0013bbe <datetimeToSeconds(datetime_t)+0xd1>
c0013ba9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013baf:	99                   	cdq    
c0013bb0:	f7 fd                	idiv   ebp
c0013bb2:	83 fa 01             	cmp    edx,0x1
c0013bb5:	19 c0                	sbb    eax,eax
c0013bb7:	f7 d0                	not    eax
c0013bb9:	05 6e 01 00 00       	add    eax,0x16e
c0013bbe:	01 c1                	add    ecx,eax
c0013bc0:	43                   	inc    ebx
c0013bc1:	39 f3                	cmp    ebx,esi
c0013bc3:	7c cc                	jl     c0013b91 <datetimeToSeconds(datetime_t)+0xa4>
c0013bc5:	eb 35                	jmp    c0013bfc <datetimeToSeconds(datetime_t)+0x10f>
c0013bc7:	74 33                	je     c0013bfc <datetimeToSeconds(datetime_t)+0x10f>
c0013bc9:	b8 45 00 00 00       	mov    eax,0x45
c0013bce:	89 c2                	mov    edx,eax
c0013bd0:	83 e2 03             	and    edx,0x3
c0013bd3:	39 f0                	cmp    eax,esi
c0013bd5:	7e 0f                	jle    c0013be6 <datetimeToSeconds(datetime_t)+0xf9>
c0013bd7:	83 fa 01             	cmp    edx,0x1
c0013bda:	19 d2                	sbb    edx,edx
c0013bdc:	48                   	dec    eax
c0013bdd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013be4:	eb e8                	jmp    c0013bce <datetimeToSeconds(datetime_t)+0xe1>
c0013be6:	b8 6d 01 00 00       	mov    eax,0x16d
c0013beb:	85 d2                	test   edx,edx
c0013bed:	75 0b                	jne    c0013bfa <datetimeToSeconds(datetime_t)+0x10d>
c0013bef:	66 83 fb 01          	cmp    bx,0x1
c0013bf3:	19 c0                	sbb    eax,eax
c0013bf5:	05 6e 01 00 00       	add    eax,0x16e
c0013bfa:	29 c1                	sub    ecx,eax
c0013bfc:	b8 80 51 01 00       	mov    eax,0x15180
c0013c01:	f7 e9                	imul   ecx
c0013c03:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c07:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c0b:	83 c4 14             	add    esp,0x14
c0013c0e:	5b                   	pop    ebx
c0013c0f:	5e                   	pop    esi
c0013c10:	5f                   	pop    edi
c0013c11:	5d                   	pop    ebp
c0013c12:	c3                   	ret    
c0013c13:	90                   	nop

c0013c14 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c14:	57                   	push   edi
c0013c15:	56                   	push   esi
c0013c16:	53                   	push   ebx
c0013c17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c1b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c1d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c28:	e8 c0 fe ff ff       	call   c0013aed <datetimeToSeconds(datetime_t)>
c0013c2d:	59                   	pop    ecx
c0013c2e:	0f b6 0d 30 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc30
c0013c35:	5b                   	pop    ebx
c0013c36:	03 0d 34 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc34
c0013c3c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013c42:	89 cb                	mov    ebx,ecx
c0013c44:	c1 fb 1f             	sar    ebx,0x1f
c0013c47:	29 c8                	sub    eax,ecx
c0013c49:	19 da                	sbb    edx,ebx
c0013c4b:	31 c9                	xor    ecx,ecx
c0013c4d:	80 3d 31 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc31,0x0
c0013c54:	74 05                	je     c0013c5b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013c56:	b9 08 07 00 00       	mov    ecx,0x708
c0013c5b:	31 db                	xor    ebx,ebx
c0013c5d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c61:	29 c8                	sub    eax,ecx
c0013c63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c67:	19 da                	sbb    edx,ebx
c0013c69:	89 f8                	mov    eax,edi
c0013c6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013c6f:	5b                   	pop    ebx
c0013c70:	5e                   	pop    esi
c0013c71:	5f                   	pop    edi
c0013c72:	ff e0                	jmp    eax

c0013c74 <secondsToDatetime(unsigned long long)>:
c0013c74:	55                   	push   ebp
c0013c75:	57                   	push   edi
c0013c76:	56                   	push   esi
c0013c77:	53                   	push   ebx
c0013c78:	83 ec 1c             	sub    esp,0x1c
c0013c7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013c83:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013c87:	6a 00                	push   0x0
c0013c89:	68 80 51 01 00       	push   0x15180
c0013c8e:	55                   	push   ebp
c0013c8f:	57                   	push   edi
c0013c90:	e8 c7 25 01 00       	call   c002625c <__udivdi3>
c0013c95:	83 c4 10             	add    esp,0x10
c0013c98:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013c9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ca2:	6a 00                	push   0x0
c0013ca4:	68 80 51 01 00       	push   0x15180
c0013ca9:	55                   	push   ebp
c0013caa:	57                   	push   edi
c0013cab:	bf 10 0e 00 00       	mov    edi,0xe10
c0013cb0:	e8 a7 26 01 00       	call   c002635c <__umoddi3>
c0013cb5:	83 c4 10             	add    esp,0x10
c0013cb8:	99                   	cdq    
c0013cb9:	f7 ff                	idiv   edi
c0013cbb:	bf 3c 00 00 00       	mov    edi,0x3c
c0013cc0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013cc3:	89 d0                	mov    eax,edx
c0013cc5:	99                   	cdq    
c0013cc6:	f7 ff                	idiv   edi
c0013cc8:	85 db                	test   ebx,ebx
c0013cca:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013ccd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013cd0:	79 11                	jns    c0013ce3 <secondsToDatetime(unsigned long long)+0x6f>
c0013cd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013cd6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013cdc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ce1:	eb 07                	jmp    c0013cea <secondsToDatetime(unsigned long long)+0x76>
c0013ce3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ce8:	89 d8                	mov    eax,ebx
c0013cea:	bf b4 05 00 00       	mov    edi,0x5b4
c0013cef:	99                   	cdq    
c0013cf0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013cf5:	f7 f9                	idiv   ecx
c0013cf7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d00:	31 d2                	xor    edx,edx
c0013d02:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d0a:	01 c3                	add    ebx,eax
c0013d0c:	89 d8                	mov    eax,ebx
c0013d0e:	f7 f1                	div    ecx
c0013d10:	31 d2                	xor    edx,edx
c0013d12:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d15:	89 d8                	mov    eax,ebx
c0013d17:	f7 f7                	div    edi
c0013d19:	31 d2                	xor    edx,edx
c0013d1b:	29 c1                	sub    ecx,eax
c0013d1d:	89 d8                	mov    eax,ebx
c0013d1f:	f7 f5                	div    ebp
c0013d21:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d26:	29 c1                	sub    ecx,eax
c0013d28:	31 d2                	xor    edx,edx
c0013d2a:	89 c8                	mov    eax,ecx
c0013d2c:	f7 f5                	div    ebp
c0013d2e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d37:	31 d2                	xor    edx,edx
c0013d39:	89 c8                	mov    eax,ecx
c0013d3b:	f7 f5                	div    ebp
c0013d3d:	31 d2                	xor    edx,edx
c0013d3f:	01 c3                	add    ebx,eax
c0013d41:	89 c8                	mov    eax,ecx
c0013d43:	f7 f7                	div    edi
c0013d45:	bf 99 00 00 00       	mov    edi,0x99
c0013d4a:	29 c3                	sub    ebx,eax
c0013d4c:	31 d2                	xor    edx,edx
c0013d4e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013d56:	29 c3                	sub    ebx,eax
c0013d58:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013d5b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d5e:	bb 05 00 00 00       	mov    ebx,0x5
c0013d63:	83 c1 02             	add    ecx,0x2
c0013d66:	89 c8                	mov    eax,ecx
c0013d68:	f7 f7                	div    edi
c0013d6a:	31 d2                	xor    edx,edx
c0013d6c:	89 c7                	mov    edi,eax
c0013d6e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013d74:	83 c0 02             	add    eax,0x2
c0013d77:	f7 f3                	div    ebx
c0013d79:	89 eb                	mov    ebx,ebp
c0013d7b:	29 c3                	sub    ebx,eax
c0013d7d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013d83:	88 1e                	mov    BYTE PTR [esi],bl
c0013d85:	19 c0                	sbb    eax,eax
c0013d87:	31 d2                	xor    edx,edx
c0013d89:	83 e0 0c             	and    eax,0xc
c0013d8c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013d90:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013d98:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013d9c:	83 f9 01             	cmp    ecx,0x1
c0013d9f:	0f 96 c2             	setbe  dl
c0013da2:	41                   	inc    ecx
c0013da3:	01 d0                	add    eax,edx
c0013da5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013da8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013dac:	83 c4 1c             	add    esp,0x1c
c0013daf:	89 f0                	mov    eax,esi
c0013db1:	5b                   	pop    ebx
c0013db2:	5e                   	pop    esi
c0013db3:	5f                   	pop    edi
c0013db4:	5d                   	pop    ebp
c0013db5:	c2 04 00             	ret    0x4

c0013db8 <Clock::timeInDatetimeLocal()>:
c0013db8:	53                   	push   ebx
c0013db9:	83 ec 14             	sub    esp,0x14
c0013dbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dc4:	e8 83 fc ff ff       	call   c0013a4c <Clock::timeInSecondsLocal()>
c0013dc9:	83 c4 0c             	add    esp,0xc
c0013dcc:	52                   	push   edx
c0013dcd:	50                   	push   eax
c0013dce:	53                   	push   ebx
c0013dcf:	e8 a0 fe ff ff       	call   c0013c74 <secondsToDatetime(unsigned long long)>
c0013dd4:	89 d8                	mov    eax,ebx
c0013dd6:	83 c4 14             	add    esp,0x14
c0013dd9:	5b                   	pop    ebx
c0013dda:	c2 04 00             	ret    0x4
c0013ddd:	90                   	nop

c0013dde <Device::hibernate()>:
c0013dde:	c3                   	ret    
c0013ddf:	90                   	nop

c0013de0 <Device::wake()>:
c0013de0:	c3                   	ret    
c0013de1:	90                   	nop

c0013de2 <Device::detect()>:
c0013de2:	c3                   	ret    
c0013de3:	90                   	nop

c0013de4 <Device::disableLegacy()>:
c0013de4:	c3                   	ret    
c0013de5:	90                   	nop

c0013de6 <Device::powerSaving(PowerSavingLevel)>:
c0013de6:	c3                   	ret    
c0013de7:	90                   	nop

c0013de8 <DriverlessDevice::close(int, int, void*)>:
c0013de8:	31 c0                	xor    eax,eax
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <DriverlessDevice::detect()>:
c0013dec:	c3                   	ret    
c0013ded:	90                   	nop

c0013dee <DriverlessDevice::open(int, int, void*)>:
c0013dee:	83 ec 18             	sub    esp,0x18
c0013df1:	68 30 a4 02 c0       	push   0xc002a430
c0013df6:	e8 f2 61 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0013dfb:	83 c8 ff             	or     eax,0xffffffff
c0013dfe:	83 c4 1c             	add    esp,0x1c
c0013e01:	c3                   	ret    

c0013e02 <Device::~Device()>:
c0013e02:	ba 58 a4 02 c0       	mov    edx,0xc002a458
c0013e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e0b:	89 10                	mov    DWORD PTR [eax],edx
c0013e0d:	90                   	nop
c0013e0e:	c3                   	ret    
c0013e0f:	90                   	nop

c0013e10 <Device::~Device()>:
c0013e10:	83 ec 0c             	sub    esp,0xc
c0013e13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e17:	e8 e6 ff ff ff       	call   c0013e02 <Device::~Device()>
c0013e1c:	83 c4 04             	add    esp,0x4
c0013e1f:	83 ec 08             	sub    esp,0x8
c0013e22:	68 58 01 00 00       	push   0x158
c0013e27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e2b:	e8 f9 eb ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	83 c4 0c             	add    esp,0xc
c0013e36:	c3                   	ret    
c0013e37:	90                   	nop

c0013e38 <Device::findAndLoadDriver()>:
c0013e38:	c3                   	ret    
c0013e39:	90                   	nop

c0013e3a <Device::preOpenPCI(PCIDeviceInfo)>:
c0013e3a:	57                   	push   edi
c0013e3b:	b9 09 00 00 00       	mov    ecx,0x9
c0013e40:	56                   	push   esi
c0013e41:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e45:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013e49:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e53:	81 c7 18 01 00 00    	add    edi,0x118
c0013e59:	fc                   	cld    
c0013e5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e5c:	5e                   	pop    esi
c0013e5d:	5f                   	pop    edi
c0013e5e:	c3                   	ret    
c0013e5f:	90                   	nop

c0013e60 <Device::preOpenACPI(void*, char*, char*)>:
c0013e60:	56                   	push   esi
c0013e61:	53                   	push   ebx
c0013e62:	83 ec 08             	sub    esp,0x8
c0013e65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e69:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013e6d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013e77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e7b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013e81:	6a 1e                	push   0x1e
c0013e83:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013e89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e8d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013e93:	50                   	push   eax
c0013e94:	e8 ab c8 fe ff       	call   c0000744 <memcpy>
c0013e99:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013e9d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ea1:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013ea9:	83 c4 14             	add    esp,0x14
c0013eac:	5b                   	pop    ebx
c0013ead:	5e                   	pop    esi
c0013eae:	e9 91 c8 fe ff       	jmp    c0000744 <memcpy>
c0013eb3:	90                   	nop

c0013eb4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eb8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ebd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ec4:	75 0b                	jne    c0013ed1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ec6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ec8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ecc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013ecf:	eb 1e                	jmp    c0013eef <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ed1:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0013ed6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013edc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ee2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ee4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ee8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013eec:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013eef:	ff e0                	jmp    eax
c0013ef1:	90                   	nop

c0013ef2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ef6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013efb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f02:	75 0b                	jne    c0013f0f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f04:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f06:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f0a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f0d:	eb 1e                	jmp    c0013f2d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f0f:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0013f14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f1a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f20:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f22:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f2a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f2d:	ff e0                	jmp    eax
c0013f2f:	90                   	nop

c0013f30 <Device::addChild(Device*)>:
c0013f30:	53                   	push   ebx
c0013f31:	83 ec 08             	sub    esp,0x8
c0013f34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f3c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013f42:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013f48:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f4a:	85 d2                	test   edx,edx
c0013f4c:	74 04                	je     c0013f52 <Device::addChild(Device*)+0x22>
c0013f4e:	89 d3                	mov    ebx,edx
c0013f50:	eb f6                	jmp    c0013f48 <Device::addChild(Device*)+0x18>
c0013f52:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013f55:	83 ec 0c             	sub    esp,0xc
c0013f58:	6a 08                	push   0x8
c0013f5a:	e8 db b8 ff ff       	call   c000f83a <malloc>
c0013f5f:	89 03                	mov    DWORD PTR [ebx],eax
c0013f61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f6e:	83 c4 18             	add    esp,0x18
c0013f71:	5b                   	pop    ebx
c0013f72:	c3                   	ret    
c0013f73:	90                   	nop

c0013f74 <Device::removeAllChildren()>:
c0013f74:	56                   	push   esi
c0013f75:	53                   	push   ebx
c0013f76:	52                   	push   edx
c0013f77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f7b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013f81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f84:	74 17                	je     c0013f9d <Device::removeAllChildren()+0x29>
c0013f86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f89:	85 c0                	test   eax,eax
c0013f8b:	74 0c                	je     c0013f99 <Device::removeAllChildren()+0x25>
c0013f8d:	83 ec 0c             	sub    esp,0xc
c0013f90:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f92:	50                   	push   eax
c0013f93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f9b:	eb e4                	jmp    c0013f81 <Device::removeAllChildren()+0xd>
c0013f9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fa3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fa9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013faf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb6:	58                   	pop    eax
c0013fb7:	5b                   	pop    ebx
c0013fb8:	5e                   	pop    esi
c0013fb9:	c3                   	ret    

c0013fba <Device::hibernateAll()>:
c0013fba:	53                   	push   ebx
c0013fbb:	83 ec 14             	sub    esp,0x14
c0013fbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fc4:	53                   	push   ebx
c0013fc5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fc8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fce:	83 c4 10             	add    esp,0x10
c0013fd1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fd4:	74 0f                	je     c0013fe5 <Device::hibernateAll()+0x2b>
c0013fd6:	83 ec 0c             	sub    esp,0xc
c0013fd9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fdc:	e8 d9 ff ff ff       	call   c0013fba <Device::hibernateAll()>
c0013fe1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fe3:	eb e9                	jmp    c0013fce <Device::hibernateAll()+0x14>
c0013fe5:	83 c4 08             	add    esp,0x8
c0013fe8:	5b                   	pop    ebx
c0013fe9:	c3                   	ret    

c0013fea <Device::wakeAll()>:
c0013fea:	53                   	push   ebx
c0013feb:	83 ec 14             	sub    esp,0x14
c0013fee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ff2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ff4:	53                   	push   ebx
c0013ff5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ff8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014004:	74 0f                	je     c0014015 <Device::wakeAll()+0x2b>
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001400c:	e8 d9 ff ff ff       	call   c0013fea <Device::wakeAll()>
c0014011:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014013:	eb e9                	jmp    c0013ffe <Device::wakeAll()+0x14>
c0014015:	83 c4 08             	add    esp,0x8
c0014018:	5b                   	pop    ebx
c0014019:	c3                   	ret    

c001401a <Device::detectAll()>:
c001401a:	53                   	push   ebx
c001401b:	83 ec 14             	sub    esp,0x14
c001401e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014022:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014024:	53                   	push   ebx
c0014025:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014028:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014034:	74 0f                	je     c0014045 <Device::detectAll()+0x2b>
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001403c:	e8 d9 ff ff ff       	call   c001401a <Device::detectAll()>
c0014041:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014043:	eb e9                	jmp    c001402e <Device::detectAll()+0x14>
c0014045:	83 c4 08             	add    esp,0x8
c0014048:	5b                   	pop    ebx
c0014049:	c3                   	ret    

c001404a <Device::disableLegacyAll()>:
c001404a:	53                   	push   ebx
c001404b:	83 ec 14             	sub    esp,0x14
c001404e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014052:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014054:	53                   	push   ebx
c0014055:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014058:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001405e:	83 c4 10             	add    esp,0x10
c0014061:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014064:	74 0f                	je     c0014075 <Device::disableLegacyAll()+0x2b>
c0014066:	83 ec 0c             	sub    esp,0xc
c0014069:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001406c:	e8 d9 ff ff ff       	call   c001404a <Device::disableLegacyAll()>
c0014071:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014073:	eb e9                	jmp    c001405e <Device::disableLegacyAll()+0x14>
c0014075:	83 c4 08             	add    esp,0x8
c0014078:	5b                   	pop    ebx
c0014079:	c3                   	ret    

c001407a <Device::loadDriversForAll()>:
c001407a:	53                   	push   ebx
c001407b:	83 ec 08             	sub    esp,0x8
c001407e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014082:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014088:	8b 18                	mov    ebx,DWORD PTR [eax]
c001408a:	85 db                	test   ebx,ebx
c001408c:	74 12                	je     c00140a0 <Device::loadDriversForAll()+0x26>
c001408e:	83 ec 0c             	sub    esp,0xc
c0014091:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014094:	e8 e1 ff ff ff       	call   c001407a <Device::loadDriversForAll()>
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	89 d8                	mov    eax,ebx
c001409e:	eb e8                	jmp    c0014088 <Device::loadDriversForAll()+0xe>
c00140a0:	83 c4 08             	add    esp,0x8
c00140a3:	5b                   	pop    ebx
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <Device::closeAll()>:
c00140a6:	53                   	push   ebx
c00140a7:	83 ec 08             	sub    esp,0x8
c00140aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b0:	6a 00                	push   0x0
c00140b2:	6a 00                	push   0x0
c00140b4:	6a 00                	push   0x0
c00140b6:	53                   	push   ebx
c00140b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140c0:	83 c4 10             	add    esp,0x10
c00140c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140c6:	74 0f                	je     c00140d7 <Device::closeAll()+0x31>
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140ce:	e8 d3 ff ff ff       	call   c00140a6 <Device::closeAll()>
c00140d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140d5:	eb e9                	jmp    c00140c0 <Device::closeAll()+0x1a>
c00140d7:	83 c4 08             	add    esp,0x8
c00140da:	5b                   	pop    ebx
c00140db:	c3                   	ret    

c00140dc <Device::powerSavingAll(PowerSavingLevel)>:
c00140dc:	56                   	push   esi
c00140dd:	53                   	push   ebx
c00140de:	83 ec 0c             	sub    esp,0xc
c00140e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140e5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00140e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140eb:	56                   	push   esi
c00140ec:	53                   	push   ebx
c00140ed:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00140f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140f6:	83 c4 10             	add    esp,0x10
c00140f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140fc:	74 0f                	je     c001410d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00140fe:	52                   	push   edx
c00140ff:	52                   	push   edx
c0014100:	56                   	push   esi
c0014101:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014104:	e8 d3 ff ff ff       	call   c00140dc <Device::powerSavingAll(PowerSavingLevel)>
c0014109:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001410b:	eb e9                	jmp    c00140f6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001410d:	58                   	pop    eax
c001410e:	5b                   	pop    ebx
c001410f:	5e                   	pop    esi
c0014110:	c3                   	ret    
c0014111:	90                   	nop

c0014112 <Device::setName(char const*)>:
c0014112:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001411a:	e9 15 c7 fe ff       	jmp    c0000834 <strcpy>
c001411f:	90                   	nop

c0014120 <Device::Device(char const*)>:
c0014120:	83 ec 1c             	sub    esp,0x1c
c0014123:	ba 58 a4 02 c0       	mov    edx,0xc002a458
c0014128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001412c:	89 10                	mov    DWORD PTR [eax],edx
c001412e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014132:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001413c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014140:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001414a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001414e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001415c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014166:	83 ec 08             	sub    esp,0x8
c0014169:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001416d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014171:	e8 9c ff ff ff       	call   c0014112 <Device::setName(char const*)>
c0014176:	83 c4 10             	add    esp,0x10
c0014179:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014181:	83 ec 0c             	sub    esp,0xc
c0014184:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014188:	e8 ad b6 ff ff       	call   c000f83a <malloc>
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014196:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001419d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141a1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00141a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141ab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141bb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141cc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00141d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00141de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00141fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141fe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001420c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014216:	90                   	nop
c0014217:	83 c4 1c             	add    esp,0x1c
c001421a:	c3                   	ret    
c001421b:	90                   	nop

c001421c <Device::getName()>:
c001421c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014220:	05 d0 00 00 00       	add    eax,0xd0
c0014225:	c3                   	ret    

c0014226 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014226:	83 ec 0c             	sub    esp,0xc
c0014229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001422d:	83 ec 08             	sub    esp,0x8
c0014230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014234:	50                   	push   eax
c0014235:	e8 e6 fe ff ff       	call   c0014120 <Device::Device(char const*)>
c001423a:	83 c4 10             	add    esp,0x10
c001423d:	ba 84 a4 02 c0       	mov    edx,0xc002a484
c0014242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014246:	89 10                	mov    DWORD PTR [eax],edx
c0014248:	90                   	nop
c0014249:	83 c4 0c             	add    esp,0xc
c001424c:	c3                   	ret    
c001424d:	90                   	nop

c001424e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001424e:	57                   	push   edi
c001424f:	56                   	push   esi
c0014250:	53                   	push   ebx
c0014251:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014255:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014259:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001425d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014263:	75 0c                	jne    c0014271 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014265:	52                   	push   edx
c0014266:	52                   	push   edx
c0014267:	53                   	push   ebx
c0014268:	56                   	push   esi
c0014269:	e8 2c 3f 01 00       	call   c002819a <LinkedList<Device>::addElement(Device*)>
c001426e:	83 c4 10             	add    esp,0x10
c0014271:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014277:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001427a:	74 12                	je     c001428e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001427c:	50                   	push   eax
c001427d:	57                   	push   edi
c001427e:	56                   	push   esi
c001427f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014282:	e8 c7 ff ff ff       	call   c001424e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014287:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	eb e9                	jmp    c0014277 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001428e:	5b                   	pop    ebx
c001428f:	5e                   	pop    esi
c0014290:	5f                   	pop    edi
c0014291:	c3                   	ret    

c0014292 <getDevicesOfType(DeviceType)>:
c0014292:	53                   	push   ebx
c0014293:	83 ec 14             	sub    esp,0x14
c0014296:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001429a:	53                   	push   ebx
c001429b:	e8 d6 3f 01 00       	call   c0028276 <LinkedList<Device>::LinkedList()>
c00142a0:	83 c4 0c             	add    esp,0xc
c00142a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142a7:	53                   	push   ebx
c00142a8:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c00142ae:	e8 9b ff ff ff       	call   c001424e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142b3:	89 d8                	mov    eax,ebx
c00142b5:	83 c4 18             	add    esp,0x18
c00142b8:	5b                   	pop    ebx
c00142b9:	c2 04 00             	ret    0x4

c00142bc <HardDiskController::HardDiskController(char const*)>:
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c3:	83 ec 08             	sub    esp,0x8
c00142c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142ca:	50                   	push   eax
c00142cb:	e8 50 fe ff ff       	call   c0014120 <Device::Device(char const*)>
c00142d0:	83 c4 10             	add    esp,0x10
c00142d3:	ba b0 a4 02 c0       	mov    edx,0xc002a4b0
c00142d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142dc:	89 10                	mov    DWORD PTR [eax],edx
c00142de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00142ec:	90                   	nop
c00142ed:	83 c4 0c             	add    esp,0xc
c00142f0:	c3                   	ret    
c00142f1:	90                   	nop

c00142f2 <HardDiskController::~HardDiskController()>:
c00142f2:	83 ec 0c             	sub    esp,0xc
c00142f5:	ba b0 a4 02 c0       	mov    edx,0xc002a4b0
c00142fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142fe:	89 10                	mov    DWORD PTR [eax],edx
c0014300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014304:	83 ec 0c             	sub    esp,0xc
c0014307:	50                   	push   eax
c0014308:	e8 f5 fa ff ff       	call   c0013e02 <Device::~Device()>
c001430d:	83 c4 10             	add    esp,0x10
c0014310:	90                   	nop
c0014311:	83 c4 0c             	add    esp,0xc
c0014314:	c3                   	ret    
c0014315:	90                   	nop

c0014316 <HardDiskController::~HardDiskController()>:
c0014316:	83 ec 0c             	sub    esp,0xc
c0014319:	83 ec 0c             	sub    esp,0xc
c001431c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014320:	e8 cd ff ff ff       	call   c00142f2 <HardDiskController::~HardDiskController()>
c0014325:	83 c4 10             	add    esp,0x10
c0014328:	83 ec 08             	sub    esp,0x8
c001432b:	68 58 01 00 00       	push   0x158
c0014330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014334:	e8 f0 e6 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0014339:	83 c4 10             	add    esp,0x10
c001433c:	83 c4 0c             	add    esp,0xc
c001433f:	c3                   	ret    

c0014340 <PhysicalDisk::eject()>:
c0014340:	83 ec 18             	sub    esp,0x18
c0014343:	68 d4 a4 02 c0       	push   0xc002a4d4
c0014348:	e8 bc e7 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001434d:	83 c8 ff             	or     eax,0xffffffff
c0014350:	83 c4 1c             	add    esp,0x1c
c0014353:	c3                   	ret    

c0014354 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014354:	83 ec 0c             	sub    esp,0xc
c0014357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001435b:	83 ec 08             	sub    esp,0x8
c001435e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014362:	50                   	push   eax
c0014363:	e8 b8 fd ff ff       	call   c0014120 <Device::Device(char const*)>
c0014368:	83 c4 10             	add    esp,0x10
c001436b:	ba 04 a5 02 c0       	mov    edx,0xc002a504
c0014370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014374:	89 10                	mov    DWORD PTR [eax],edx
c0014376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001437a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014385:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001438c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014390:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001439a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001439e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143a2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00143a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ac:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143b6:	90                   	nop
c00143b7:	83 c4 0c             	add    esp,0xc
c00143ba:	c3                   	ret    
c00143bb:	90                   	nop

c00143bc <PhysicalDisk::startCache()>:
c00143bc:	56                   	push   esi
c00143bd:	53                   	push   ebx
c00143be:	83 ec 10             	sub    esp,0x10
c00143c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143c5:	6a 44                	push   0x44
c00143c7:	e8 6e b4 ff ff       	call   c000f83a <malloc>
c00143cc:	89 c6                	mov    esi,eax
c00143ce:	58                   	pop    eax
c00143cf:	5a                   	pop    edx
c00143d0:	53                   	push   ebx
c00143d1:	56                   	push   esi
c00143d2:	e8 d5 26 00 00       	call   c0016aac <VCache::VCache(PhysicalDisk*)>
c00143d7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00143dd:	83 c4 14             	add    esp,0x14
c00143e0:	5b                   	pop    ebx
c00143e1:	5e                   	pop    esi
c00143e2:	c3                   	ret    
c00143e3:	90                   	nop

c00143e4 <PhysicalDisk::~PhysicalDisk()>:
c00143e4:	83 ec 0c             	sub    esp,0xc
c00143e7:	ba 04 a5 02 c0       	mov    edx,0xc002a504
c00143ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f0:	89 10                	mov    DWORD PTR [eax],edx
c00143f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	50                   	push   eax
c00143fa:	e8 03 fa ff ff       	call   c0013e02 <Device::~Device()>
c00143ff:	83 c4 10             	add    esp,0x10
c0014402:	90                   	nop
c0014403:	83 c4 0c             	add    esp,0xc
c0014406:	c3                   	ret    
c0014407:	90                   	nop

c0014408 <PhysicalDisk::~PhysicalDisk()>:
c0014408:	83 ec 0c             	sub    esp,0xc
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014412:	e8 cd ff ff ff       	call   c00143e4 <PhysicalDisk::~PhysicalDisk()>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	83 ec 08             	sub    esp,0x8
c001441d:	68 6c 01 00 00       	push   0x16c
c0014422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014426:	e8 fe e5 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	83 c4 0c             	add    esp,0xc
c0014431:	c3                   	ret    

c0014432 <FPU::FPU(char const*)>:
c0014432:	83 ec 0c             	sub    esp,0xc
c0014435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014439:	83 ec 08             	sub    esp,0x8
c001443c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014440:	50                   	push   eax
c0014441:	e8 da fc ff ff       	call   c0014120 <Device::Device(char const*)>
c0014446:	83 c4 10             	add    esp,0x10
c0014449:	ba 48 a5 02 c0       	mov    edx,0xc002a548
c001444e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014452:	89 10                	mov    DWORD PTR [eax],edx
c0014454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014458:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014462:	90                   	nop
c0014463:	83 c4 0c             	add    esp,0xc
c0014466:	c3                   	ret    
c0014467:	90                   	nop

c0014468 <FPU::~FPU()>:
c0014468:	83 ec 0c             	sub    esp,0xc
c001446b:	ba 48 a5 02 c0       	mov    edx,0xc002a548
c0014470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014474:	89 10                	mov    DWORD PTR [eax],edx
c0014476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	50                   	push   eax
c001447e:	e8 7f f9 ff ff       	call   c0013e02 <Device::~Device()>
c0014483:	83 c4 10             	add    esp,0x10
c0014486:	90                   	nop
c0014487:	83 c4 0c             	add    esp,0xc
c001448a:	c3                   	ret    
c001448b:	90                   	nop

c001448c <FPU::~FPU()>:
c001448c:	83 ec 0c             	sub    esp,0xc
c001448f:	83 ec 0c             	sub    esp,0xc
c0014492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014496:	e8 cd ff ff ff       	call   c0014468 <FPU::~FPU()>
c001449b:	83 c4 10             	add    esp,0x10
c001449e:	83 ec 08             	sub    esp,0x8
c00144a1:	68 58 01 00 00       	push   0x158
c00144a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144aa:	e8 7a e5 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00144af:	83 c4 10             	add    esp,0x10
c00144b2:	83 c4 0c             	add    esp,0xc
c00144b5:	c3                   	ret    

c00144b6 <setupFPU()>:
c00144b6:	53                   	push   ebx
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c00144c0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00144c7:	74 19                	je     c00144e2 <setupFPU()+0x2c>
c00144c9:	83 ec 0c             	sub    esp,0xc
c00144cc:	68 58 01 00 00       	push   0x158
c00144d1:	e8 64 b3 ff ff       	call   c000f83a <malloc>
c00144d6:	89 c3                	mov    ebx,eax
c00144d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00144db:	e8 08 09 01 00       	call   c0024de8 <AVX::AVX()>
c00144e0:	eb 5b                	jmp    c001453d <setupFPU()+0x87>
c00144e2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00144e8:	84 c0                	test   al,al
c00144ea:	79 19                	jns    c0014505 <setupFPU()+0x4f>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	68 58 01 00 00       	push   0x158
c00144f4:	e8 41 b3 ff ff       	call   c000f83a <malloc>
c00144f9:	89 c3                	mov    ebx,eax
c00144fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00144fe:	e8 0b 0a 01 00       	call   c0024f0e <SSE::SSE()>
c0014503:	eb 38                	jmp    c001453d <setupFPU()+0x87>
c0014505:	a8 20                	test   al,0x20
c0014507:	74 19                	je     c0014522 <setupFPU()+0x6c>
c0014509:	83 ec 0c             	sub    esp,0xc
c001450c:	68 58 01 00 00       	push   0x158
c0014511:	e8 24 b3 ff ff       	call   c000f83a <malloc>
c0014516:	89 c3                	mov    ebx,eax
c0014518:	89 04 24             	mov    DWORD PTR [esp],eax
c001451b:	e8 58 09 01 00       	call   c0024e78 <MMX::MMX()>
c0014520:	eb 1b                	jmp    c001453d <setupFPU()+0x87>
c0014522:	a8 10                	test   al,0x10
c0014524:	74 1c                	je     c0014542 <setupFPU()+0x8c>
c0014526:	83 ec 0c             	sub    esp,0xc
c0014529:	68 58 01 00 00       	push   0x158
c001452e:	e8 07 b3 ff ff       	call   c000f83a <malloc>
c0014533:	89 c3                	mov    ebx,eax
c0014535:	89 04 24             	mov    DWORD PTR [esp],eax
c0014538:	e8 5f 0a 01 00       	call   c0024f9c <x87::x87()>
c001453d:	83 c4 10             	add    esp,0x10
c0014540:	eb 24                	jmp    c0014566 <setupFPU()+0xb0>
c0014542:	83 e0 ef             	and    eax,0xffffffef
c0014545:	83 ec 0c             	sub    esp,0xc
c0014548:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001454e:	68 34 a5 02 c0       	push   0xc002a534
c0014553:	e8 b1 e5 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014558:	0f 20 c0             	mov    eax,cr0
c001455b:	83 c8 04             	or     eax,0x4
c001455e:	0f 22 c0             	mov    cr0,eax
c0014561:	31 db                	xor    ebx,ebx
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	89 d8                	mov    eax,ebx
c0014568:	83 c4 08             	add    esp,0x8
c001456b:	5b                   	pop    ebx
c001456c:	c3                   	ret    
c001456d:	90                   	nop

c001456e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001456e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014572:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014576:	c1 e0 04             	shl    eax,0x4
c0014579:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001457d:	8d 50 10             	lea    edx,[eax+0x10]
c0014580:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014586:	74 08                	je     c0014590 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014588:	83 c0 04             	add    eax,0x4
c001458b:	39 d0                	cmp    eax,edx
c001458d:	75 f1                	jne    c0014580 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001458f:	c3                   	ret    
c0014590:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001459a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145a4:	eb e2                	jmp    c0014588 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00145a6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00145a6:	57                   	push   edi
c00145a7:	31 c0                	xor    eax,eax
c00145a9:	56                   	push   esi
c00145aa:	53                   	push   ebx
c00145ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00145af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00145b7:	89 da                	mov    edx,ebx
c00145b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145bd:	c1 e2 04             	shl    edx,0x4
c00145c0:	01 ca                	add    edx,ecx
c00145c2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00145ca:	74 16                	je     c00145e2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00145cc:	40                   	inc    eax
c00145cd:	83 f8 04             	cmp    eax,0x4
c00145d0:	75 f0                	jne    c00145c2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00145d2:	c7 44 24 10 78 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a578
c00145da:	5b                   	pop    ebx
c00145db:	5e                   	pop    esi
c00145dc:	5f                   	pop    edi
c00145dd:	e9 0b 5a 00 00       	jmp    c0019fed <Krnl::panic(char const*)>
c00145e2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00145e5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00145e8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00145ee:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00145f4:	5b                   	pop    ebx
c00145f5:	5e                   	pop    esi
c00145f6:	5f                   	pop    edi
c00145f7:	c3                   	ret    

c00145f8 <doubleFault(regs*, void*)>:
c00145f8:	55                   	push   ebp
c00145f9:	89 e5                	mov    ebp,esp
c00145fb:	83 ec 08             	sub    esp,0x8
c00145fe:	83 ec 0c             	sub    esp,0xc
c0014601:	68 b3 a5 02 c0       	push   0xc002a5b3
c0014606:	e8 e2 59 00 00       	call   c0019fed <Krnl::panic(char const*)>
c001460b:	83 c4 10             	add    esp,0x10
c001460e:	90                   	nop
c001460f:	c9                   	leave  
c0014610:	c3                   	ret    
c0014611:	90                   	nop

c0014612 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014612:	56                   	push   esi
c0014613:	53                   	push   ebx
c0014614:	50                   	push   eax
c0014615:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014619:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001461d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014622:	75 35                	jne    c0014659 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014624:	8d 43 20             	lea    eax,[ebx+0x20]
c0014627:	31 d2                	xor    edx,edx
c0014629:	89 c1                	mov    ecx,eax
c001462b:	c1 e1 04             	shl    ecx,0x4
c001462e:	01 f1                	add    ecx,esi
c0014630:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014638:	74 3e                	je     c0014678 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001463a:	42                   	inc    edx
c001463b:	83 fa 04             	cmp    edx,0x4
c001463e:	75 f0                	jne    c0014630 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014640:	83 ec 0c             	sub    esp,0xc
c0014643:	68 f8 a5 02 c0       	push   0xc002a5f8
c0014648:	e8 a0 59 00 00       	call   c0019fed <Krnl::panic(char const*)>
c001464d:	83 c4 10             	add    esp,0x10
c0014650:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014655:	5a                   	pop    edx
c0014656:	5b                   	pop    ebx
c0014657:	5e                   	pop    esi
c0014658:	c3                   	ret    
c0014659:	83 ec 0c             	sub    esp,0xc
c001465c:	56                   	push   esi
c001465d:	e8 ba fb ff ff       	call   c001421c <Device::getName()>
c0014662:	83 c4 10             	add    esp,0x10
c0014665:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014668:	75 ba                	jne    c0014624 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001466a:	83 fb 0f             	cmp    ebx,0xf
c001466d:	7f 29                	jg     c0014698 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001466f:	0f b6 9b 00 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3300]
c0014676:	eb ac                	jmp    c0014624 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014678:	8d 04 82             	lea    eax,[edx+eax*4]
c001467b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001467f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014682:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014688:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001468c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014692:	89 d8                	mov    eax,ebx
c0014694:	5a                   	pop    edx
c0014695:	5b                   	pop    ebx
c0014696:	5e                   	pop    esi
c0014697:	c3                   	ret    
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	68 c0 a5 02 c0       	push   0xc002a5c0
c00146a0:	e8 48 59 00 00       	call   c0019fed <Krnl::panic(char const*)>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	e9 77 ff ff ff       	jmp    c0014624 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146ad:	90                   	nop

c00146ae <InterruptController::clearAllHandlers(int, bool)>:
c00146ae:	56                   	push   esi
c00146af:	53                   	push   ebx
c00146b0:	52                   	push   edx
c00146b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146b9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00146be:	75 61                	jne    c0014721 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00146c0:	8d 46 20             	lea    eax,[esi+0x20]
c00146c3:	c1 e6 04             	shl    esi,0x4
c00146c6:	c1 e0 04             	shl    eax,0x4
c00146c9:	01 de                	add    esi,ebx
c00146cb:	01 d8                	add    eax,ebx
c00146cd:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00146d7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00146e1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00146eb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00146f5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00146ff:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014709:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014713:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001471d:	58                   	pop    eax
c001471e:	5b                   	pop    ebx
c001471f:	5e                   	pop    esi
c0014720:	c3                   	ret    
c0014721:	83 ec 0c             	sub    esp,0xc
c0014724:	53                   	push   ebx
c0014725:	e8 f2 fa ff ff       	call   c001421c <Device::getName()>
c001472a:	83 c4 10             	add    esp,0x10
c001472d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014730:	75 8e                	jne    c00146c0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014732:	83 fe 0f             	cmp    esi,0xf
c0014735:	7f 09                	jg     c0014740 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014737:	0f b6 b6 00 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3300]
c001473e:	eb 80                	jmp    c00146c0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	68 34 a6 02 c0       	push   0xc002a634
c0014748:	e8 a0 58 00 00       	call   c0019fed <Krnl::panic(char const*)>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	e9 6b ff ff ff       	jmp    c00146c0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014755:	90                   	nop

c0014756 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014756:	56                   	push   esi
c0014757:	53                   	push   ebx
c0014758:	52                   	push   edx
c0014759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001475d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014761:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014766:	75 3a                	jne    c00147a2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001476c:	8d 50 20             	lea    edx,[eax+0x20]
c001476f:	c1 e2 04             	shl    edx,0x4
c0014772:	8d 04 16             	lea    eax,[esi+edx*1]
c0014775:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014779:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001477f:	74 0b                	je     c001478c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014781:	83 c0 04             	add    eax,0x4
c0014784:	39 d0                	cmp    eax,edx
c0014786:	75 f1                	jne    c0014779 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014788:	58                   	pop    eax
c0014789:	5b                   	pop    ebx
c001478a:	5e                   	pop    esi
c001478b:	c3                   	ret    
c001478c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014796:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00147a0:	eb df                	jmp    c0014781 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00147a2:	83 ec 0c             	sub    esp,0xc
c00147a5:	56                   	push   esi
c00147a6:	e8 71 fa ff ff       	call   c001421c <Device::getName()>
c00147ab:	83 c4 10             	add    esp,0x10
c00147ae:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147b1:	75 b5                	jne    c0014768 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147b3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00147b8:	7f 11                	jg     c00147cb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00147ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147be:	0f b6 80 00 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3300]
c00147c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147c9:	eb 9d                	jmp    c0014768 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147cb:	83 ec 0c             	sub    esp,0xc
c00147ce:	68 34 a6 02 c0       	push   0xc002a634
c00147d3:	e8 15 58 00 00       	call   c0019fed <Krnl::panic(char const*)>
c00147d8:	83 c4 10             	add    esp,0x10
c00147db:	eb 8b                	jmp    c0014768 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00147dd <nmiHandler(regs*, void*)>:
c00147dd:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00147e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147e6:	e9 9b a7 ff ff       	jmp    c000ef86 <Computer::handleNMI()>

c00147eb <int_handler>:
c00147eb:	55                   	push   ebp
c00147ec:	57                   	push   edi
c00147ed:	56                   	push   esi
c00147ee:	53                   	push   ebx
c00147ef:	83 ec 0c             	sub    esp,0xc
c00147f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147f6:	80 3d 00 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030600,0x0
c00147fd:	74 0b                	je     c001480a <int_handler+0x1f>
c00147ff:	fa                   	cli    
c0014800:	f4                   	hlt    
c0014801:	80 3d 00 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030600,0x0
c0014808:	75 f5                	jne    c00147ff <int_handler+0x14>
c001480a:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001480f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014812:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014818:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001481e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014821:	83 f8 17             	cmp    eax,0x17
c0014824:	77 13                	ja     c0014839 <int_handler+0x4e>
c0014826:	83 ec 08             	sub    esp,0x8
c0014829:	8b 17                	mov    edx,DWORD PTR [edi]
c001482b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001482e:	0f b6 c0             	movzx  eax,al
c0014831:	50                   	push   eax
c0014832:	57                   	push   edi
c0014833:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014836:	83 c4 10             	add    esp,0x10
c0014839:	83 c3 15             	add    ebx,0x15
c001483c:	c1 e3 04             	shl    ebx,0x4
c001483f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014843:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001484a:	31 db                	xor    ebx,ebx
c001484c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014850:	85 c0                	test   eax,eax
c0014852:	74 13                	je     c0014867 <int_handler+0x7c>
c0014854:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014857:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001485b:	74 1c                	je     c0014879 <int_handler+0x8e>
c001485d:	83 ec 08             	sub    esp,0x8
c0014860:	52                   	push   edx
c0014861:	56                   	push   esi
c0014862:	ff d0                	call   eax
c0014864:	83 c4 10             	add    esp,0x10
c0014867:	43                   	inc    ebx
c0014868:	83 fb 04             	cmp    ebx,0x4
c001486b:	75 df                	jne    c001484c <int_handler+0x61>
c001486d:	83 c4 0c             	add    esp,0xc
c0014870:	31 c0                	xor    eax,eax
c0014872:	5b                   	pop    ebx
c0014873:	31 d2                	xor    edx,edx
c0014875:	5e                   	pop    esi
c0014876:	5f                   	pop    edi
c0014877:	5d                   	pop    ebp
c0014878:	c3                   	ret    
c0014879:	83 ec 08             	sub    esp,0x8
c001487c:	52                   	push   edx
c001487d:	56                   	push   esi
c001487e:	ff d0                	call   eax
c0014880:	83 c4 10             	add    esp,0x10
c0014883:	83 c4 0c             	add    esp,0xc
c0014886:	5b                   	pop    ebx
c0014887:	5e                   	pop    esi
c0014888:	5f                   	pop    edi
c0014889:	5d                   	pop    ebp
c001488a:	c3                   	ret    
c001488b:	90                   	nop

c001488c <InterruptController::InterruptController(char const*)>:
c001488c:	83 ec 1c             	sub    esp,0x1c
c001488f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014893:	83 ec 08             	sub    esp,0x8
c0014896:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001489a:	50                   	push   eax
c001489b:	e8 80 f8 ff ff       	call   c0014120 <Device::Device(char const*)>
c00148a0:	83 c4 10             	add    esp,0x10
c00148a3:	ba d0 a8 02 c0       	mov    edx,0xc002a8d0
c00148a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148ac:	89 10                	mov    DWORD PTR [eax],edx
c00148ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148b2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00148bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148c4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00148cc:	7f 5e                	jg     c001492c <InterruptController::InterruptController(char const*)+0xa0>
c00148ce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148d6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00148db:	7f 49                	jg     c0014926 <InterruptController::InterruptController(char const*)+0x9a>
c00148dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148e5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00148ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148f0:	01 ca                	add    edx,ecx
c00148f2:	83 c2 54             	add    edx,0x54
c00148f5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00148fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014901:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014905:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001490c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014910:	01 ca                	add    edx,ecx
c0014912:	81 c2 54 04 00 00    	add    edx,0x454
c0014918:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014920:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014924:	eb b0                	jmp    c00148d6 <InterruptController::InterruptController(char const*)+0x4a>
c0014926:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001492a:	eb 98                	jmp    c00148c4 <InterruptController::InterruptController(char const*)+0x38>
c001492c:	90                   	nop
c001492d:	83 c4 1c             	add    esp,0x1c
c0014930:	c3                   	ret    
c0014931:	90                   	nop

c0014932 <InterruptController::~InterruptController()>:
c0014932:	83 ec 0c             	sub    esp,0xc
c0014935:	ba d0 a8 02 c0       	mov    edx,0xc002a8d0
c001493a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001493e:	89 10                	mov    DWORD PTR [eax],edx
c0014940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014944:	83 ec 0c             	sub    esp,0xc
c0014947:	50                   	push   eax
c0014948:	e8 b5 f4 ff ff       	call   c0013e02 <Device::~Device()>
c001494d:	83 c4 10             	add    esp,0x10
c0014950:	90                   	nop
c0014951:	83 c4 0c             	add    esp,0xc
c0014954:	c3                   	ret    
c0014955:	90                   	nop

c0014956 <InterruptController::~InterruptController()>:
c0014956:	83 ec 0c             	sub    esp,0xc
c0014959:	83 ec 0c             	sub    esp,0xc
c001495c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014960:	e8 cd ff ff ff       	call   c0014932 <InterruptController::~InterruptController()>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	83 ec 08             	sub    esp,0x8
c001496b:	68 58 21 00 00       	push   0x2158
c0014970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014974:	e8 b0 e0 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0014979:	83 c4 10             	add    esp,0x10
c001497c:	83 c4 0c             	add    esp,0xc
c001497f:	c3                   	ret    

c0014980 <displayDebugInfo(regs*)>:
c0014980:	55                   	push   ebp
c0014981:	57                   	push   edi
c0014982:	56                   	push   esi
c0014983:	53                   	push   ebx
c0014984:	83 ec 24             	sub    esp,0x24
c0014987:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001498b:	0f 20 c2             	mov    edx,cr0
c001498e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014992:	0f 20 d7             	mov    edi,cr2
c0014995:	0f 20 de             	mov    esi,cr3
c0014998:	0f 20 e5             	mov    ebp,cr4
c001499b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001499e:	68 6e a6 02 c0       	push   0xc002a66e
c00149a3:	e8 61 e1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00149a8:	59                   	pop    ecx
c00149a9:	58                   	pop    eax
c00149aa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149ad:	68 79 a6 02 c0       	push   0xc002a679
c00149b2:	e8 52 e1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00149b7:	58                   	pop    eax
c00149b8:	5a                   	pop    edx
c00149b9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00149bc:	68 84 a6 02 c0       	push   0xc002a684
c00149c1:	e8 43 e1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00149c6:	59                   	pop    ecx
c00149c7:	58                   	pop    eax
c00149c8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149cb:	68 8f a6 02 c0       	push   0xc002a68f
c00149d0:	e8 34 e1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00149d5:	58                   	pop    eax
c00149d6:	5a                   	pop    edx
c00149d7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00149da:	68 9a a6 02 c0       	push   0xc002a69a
c00149df:	e8 25 e1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00149e4:	59                   	pop    ecx
c00149e5:	58                   	pop    eax
c00149e6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00149e9:	68 a5 a6 02 c0       	push   0xc002a6a5
c00149ee:	e8 16 e1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00149f3:	58                   	pop    eax
c00149f4:	5a                   	pop    edx
c00149f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00149f8:	68 b0 a6 02 c0       	push   0xc002a6b0
c00149fd:	e8 07 e1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014a02:	59                   	pop    ecx
c0014a03:	58                   	pop    eax
c0014a04:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a07:	68 bb a6 02 c0       	push   0xc002a6bb
c0014a0c:	e8 f8 e0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014a11:	58                   	pop    eax
c0014a12:	5a                   	pop    edx
c0014a13:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a16:	68 c6 a6 02 c0       	push   0xc002a6c6
c0014a1b:	e8 e9 e0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014a20:	59                   	pop    ecx
c0014a21:	58                   	pop    eax
c0014a22:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a25:	68 d5 a6 02 c0       	push   0xc002a6d5
c0014a2a:	e8 da e0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014a2f:	58                   	pop    eax
c0014a30:	5a                   	pop    edx
c0014a31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a34:	68 e0 a6 02 c0       	push   0xc002a6e0
c0014a39:	e8 cb e0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014a3e:	59                   	pop    ecx
c0014a3f:	58                   	pop    eax
c0014a40:	57                   	push   edi
c0014a41:	68 eb a6 02 c0       	push   0xc002a6eb
c0014a46:	e8 be e0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014a4b:	58                   	pop    eax
c0014a4c:	5a                   	pop    edx
c0014a4d:	56                   	push   esi
c0014a4e:	68 f6 a6 02 c0       	push   0xc002a6f6
c0014a53:	e8 b1 e0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014a58:	59                   	pop    ecx
c0014a59:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014a5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a64:	e8 62 c2 ff ff       	call   c0010ccb <setActiveTerminal(VgaText*)>
c0014a69:	58                   	pop    eax
c0014a6a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a6d:	5a                   	pop    edx
c0014a6e:	c1 e0 05             	shl    eax,0x5
c0014a71:	05 60 ca 02 c0       	add    eax,0xc002ca60
c0014a76:	50                   	push   eax
c0014a77:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014a7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a82:	e8 63 c6 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014a87:	59                   	pop    ecx
c0014a88:	58                   	pop    eax
c0014a89:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014a8e:	68 01 a7 02 c0       	push   0xc002a701
c0014a93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a99:	e8 4c c6 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014a9e:	58                   	pop    eax
c0014a9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aa4:	5a                   	pop    edx
c0014aa5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aa8:	83 c0 0c             	add    eax,0xc
c0014aab:	50                   	push   eax
c0014aac:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014ab1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab7:	e8 2e c6 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014abc:	59                   	pop    ecx
c0014abd:	58                   	pop    eax
c0014abe:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014ac3:	68 0a a7 02 c0       	push   0xc002a70a
c0014ac8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ace:	e8 17 c6 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014ad3:	58                   	pop    eax
c0014ad4:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014ad9:	5a                   	pop    edx
c0014ada:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014add:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae3:	e8 28 c6 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014ae8:	59                   	pop    ecx
c0014ae9:	58                   	pop    eax
c0014aea:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014aef:	68 12 a7 02 c0       	push   0xc002a712
c0014af4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afa:	e8 eb c5 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014aff:	58                   	pop    eax
c0014b00:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b05:	5a                   	pop    edx
c0014b06:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b0f:	e8 fc c5 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014b14:	59                   	pop    ecx
c0014b15:	58                   	pop    eax
c0014b16:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b1b:	68 1a a7 02 c0       	push   0xc002a71a
c0014b20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b26:	e8 bf c5 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014b2b:	58                   	pop    eax
c0014b2c:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b31:	5a                   	pop    edx
c0014b32:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3b:	e8 d0 c5 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014b40:	59                   	pop    ecx
c0014b41:	58                   	pop    eax
c0014b42:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b47:	68 22 a7 02 c0       	push   0xc002a722
c0014b4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b52:	e8 93 c5 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014b57:	58                   	pop    eax
c0014b58:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b5d:	5a                   	pop    edx
c0014b5e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014b61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b67:	e8 a4 c5 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014b6c:	59                   	pop    ecx
c0014b6d:	58                   	pop    eax
c0014b6e:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b73:	68 2a a7 02 c0       	push   0xc002a72a
c0014b78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7e:	e8 67 c5 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014b83:	58                   	pop    eax
c0014b84:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b89:	5a                   	pop    edx
c0014b8a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014b8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b93:	e8 78 c5 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014b98:	59                   	pop    ecx
c0014b99:	58                   	pop    eax
c0014b9a:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014b9f:	68 32 a7 02 c0       	push   0xc002a732
c0014ba4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014baa:	e8 3b c5 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014baf:	58                   	pop    eax
c0014bb0:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014bb5:	5a                   	pop    edx
c0014bb6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014bb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbf:	e8 4c c5 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014bc4:	59                   	pop    ecx
c0014bc5:	58                   	pop    eax
c0014bc6:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014bcb:	68 3a a7 02 c0       	push   0xc002a73a
c0014bd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd6:	e8 0f c5 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014bdb:	58                   	pop    eax
c0014bdc:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014be1:	5a                   	pop    edx
c0014be2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014be6:	52                   	push   edx
c0014be7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bed:	e8 1e c5 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014bf2:	59                   	pop    ecx
c0014bf3:	58                   	pop    eax
c0014bf4:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014bf9:	68 43 a7 02 c0       	push   0xc002a743
c0014bfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c04:	e8 e1 c4 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014c09:	58                   	pop    eax
c0014c0a:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014c0f:	5a                   	pop    edx
c0014c10:	57                   	push   edi
c0014c11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c17:	e8 f4 c4 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014c1c:	59                   	pop    ecx
c0014c1d:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014c22:	5f                   	pop    edi
c0014c23:	68 4b a7 02 c0       	push   0xc002a74b
c0014c28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c2e:	e8 b7 c4 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014c33:	58                   	pop    eax
c0014c34:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014c39:	5a                   	pop    edx
c0014c3a:	56                   	push   esi
c0014c3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c41:	e8 ca c4 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014c46:	59                   	pop    ecx
c0014c47:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014c4c:	5e                   	pop    esi
c0014c4d:	68 53 a7 02 c0       	push   0xc002a753
c0014c52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c58:	e8 8d c4 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014c5d:	5f                   	pop    edi
c0014c5e:	58                   	pop    eax
c0014c5f:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014c64:	55                   	push   ebp
c0014c65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c6b:	e8 a0 c4 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014c70:	58                   	pop    eax
c0014c71:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014c76:	5a                   	pop    edx
c0014c77:	68 5b a7 02 c0       	push   0xc002a75b
c0014c7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c82:	e8 63 c4 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014c87:	0f 21 c0             	mov    eax,db0
c0014c8a:	59                   	pop    ecx
c0014c8b:	5e                   	pop    esi
c0014c8c:	50                   	push   eax
c0014c8d:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014c92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c98:	e8 73 c4 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014c9d:	5f                   	pop    edi
c0014c9e:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014ca3:	5d                   	pop    ebp
c0014ca4:	68 64 a7 02 c0       	push   0xc002a764
c0014ca9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014caf:	e8 36 c4 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014cb4:	0f 21 c8             	mov    eax,db1
c0014cb7:	5a                   	pop    edx
c0014cb8:	59                   	pop    ecx
c0014cb9:	50                   	push   eax
c0014cba:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014cbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cc5:	e8 46 c4 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014cca:	5e                   	pop    esi
c0014ccb:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014cd0:	5f                   	pop    edi
c0014cd1:	68 6c a7 02 c0       	push   0xc002a76c
c0014cd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cdc:	e8 09 c4 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014ce1:	0f 21 d0             	mov    eax,db2
c0014ce4:	5d                   	pop    ebp
c0014ce5:	5a                   	pop    edx
c0014ce6:	50                   	push   eax
c0014ce7:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014cec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf2:	e8 19 c4 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014cf7:	59                   	pop    ecx
c0014cf8:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014cfd:	5e                   	pop    esi
c0014cfe:	68 74 a7 02 c0       	push   0xc002a774
c0014d03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d09:	e8 dc c3 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014d0e:	0f 21 d8             	mov    eax,db3
c0014d11:	5f                   	pop    edi
c0014d12:	5d                   	pop    ebp
c0014d13:	50                   	push   eax
c0014d14:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014d19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d1f:	e8 ec c3 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014d24:	58                   	pop    eax
c0014d25:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014d2a:	5a                   	pop    edx
c0014d2b:	68 7c a7 02 c0       	push   0xc002a77c
c0014d30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d36:	e8 af c3 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014d3b:	0f 21 f0             	mov    eax,db6
c0014d3e:	59                   	pop    ecx
c0014d3f:	5e                   	pop    esi
c0014d40:	50                   	push   eax
c0014d41:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014d46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d4c:	e8 bf c3 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014d51:	5f                   	pop    edi
c0014d52:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014d57:	5d                   	pop    ebp
c0014d58:	68 84 a7 02 c0       	push   0xc002a784
c0014d5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d63:	e8 82 c3 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014d68:	0f 21 f8             	mov    eax,db7
c0014d6b:	5a                   	pop    edx
c0014d6c:	59                   	pop    ecx
c0014d6d:	50                   	push   eax
c0014d6e:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014d73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d79:	e8 92 c3 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014d7e:	5e                   	pop    esi
c0014d7f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d82:	e8 fd 81 00 00       	call   c001cf84 <Thr::getDriverNameFromAddress(unsigned long)>
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	85 c0                	test   eax,eax
c0014d8c:	74 7d                	je     c0014e0b <displayDebugInfo(regs*)+0x48b>
c0014d8e:	89 c6                	mov    esi,eax
c0014d90:	50                   	push   eax
c0014d91:	50                   	push   eax
c0014d92:	56                   	push   esi
c0014d93:	68 8c a7 02 c0       	push   0xc002a78c
c0014d98:	e8 6c dd ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014d9d:	5a                   	pop    edx
c0014d9e:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014da3:	59                   	pop    ecx
c0014da4:	68 9a a7 02 c0       	push   0xc002a79a
c0014da9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014daf:	e8 36 c3 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014db4:	5f                   	pop    edi
c0014db5:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014dba:	5d                   	pop    ebp
c0014dbb:	56                   	push   esi
c0014dbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc2:	e8 23 c3 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014dc7:	58                   	pop    eax
c0014dc8:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014dcd:	5a                   	pop    edx
c0014dce:	68 a6 a7 02 c0       	push   0xc002a7a6
c0014dd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd9:	e8 0c c3 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c0014dde:	59                   	pop    ecx
c0014ddf:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0014de4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014dea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ded:	e8 c9 81 00 00       	call   c001cfbb <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014df2:	5b                   	pop    ebx
c0014df3:	5d                   	pop    ebp
c0014df4:	50                   	push   eax
c0014df5:	57                   	push   edi
c0014df6:	e8 15 c3 ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c0014dfb:	58                   	pop    eax
c0014dfc:	5a                   	pop    edx
c0014dfd:	56                   	push   esi
c0014dfe:	68 b2 a7 02 c0       	push   0xc002a7b2
c0014e03:	e8 01 dd ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014e08:	83 c4 10             	add    esp,0x10
c0014e0b:	fa                   	cli    
c0014e0c:	f4                   	hlt    
c0014e0d:	eb fe                	jmp    c0014e0d <displayDebugInfo(regs*)+0x48d>

c0014e0f <x87EmulHandler(regs*, void*)>:
c0014e0f:	53                   	push   ebx
c0014e10:	83 ec 14             	sub    esp,0x14
c0014e13:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e17:	53                   	push   ebx
c0014e18:	e8 cd a4 00 00       	call   c001f2ea <Vm::x87Handler(regs*)>
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	84 c0                	test   al,al
c0014e22:	74 05                	je     c0014e29 <x87EmulHandler(regs*, void*)+0x1a>
c0014e24:	83 c4 08             	add    esp,0x8
c0014e27:	5b                   	pop    ebx
c0014e28:	c3                   	ret    
c0014e29:	83 ec 0c             	sub    esp,0xc
c0014e2c:	68 c2 a7 02 c0       	push   0xc002a7c2
c0014e31:	e8 d3 dc ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014e36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e39:	e8 42 fb ff ff       	call   c0014980 <displayDebugInfo(regs*)>

c0014e3e <gpFault(regs*, void*)>:
c0014e3e:	53                   	push   ebx
c0014e3f:	83 ec 14             	sub    esp,0x14
c0014e42:	c7 05 50 dc 02 c0 67 e6 01 c0 	mov    DWORD PTR ds:0xc002dc50,0xc001e667
c0014e4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e50:	53                   	push   ebx
c0014e51:	e8 11 98 00 00       	call   c001e667 <Vm::faultHandler(regs*)>
c0014e56:	83 c4 10             	add    esp,0x10
c0014e59:	84 c0                	test   al,al
c0014e5b:	74 05                	je     c0014e62 <gpFault(regs*, void*)+0x24>
c0014e5d:	83 c4 08             	add    esp,0x8
c0014e60:	5b                   	pop    ebx
c0014e61:	c3                   	ret    
c0014e62:	83 ec 0c             	sub    esp,0xc
c0014e65:	68 d8 a7 02 c0       	push   0xc002a7d8
c0014e6a:	e8 9a dc ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014e6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e72:	e8 09 fb ff ff       	call   c0014980 <displayDebugInfo(regs*)>

c0014e77 <pgFault(regs*, void*)>:
c0014e77:	83 ec 18             	sub    esp,0x18
c0014e7a:	68 f3 a7 02 c0       	push   0xc002a7f3
c0014e7f:	e8 85 dc ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014e84:	58                   	pop    eax
c0014e85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e89:	e8 f2 fa ff ff       	call   c0014980 <displayDebugInfo(regs*)>

c0014e8e <otherISRHandler(regs*, void*)>:
c0014e8e:	53                   	push   ebx
c0014e8f:	83 ec 0c             	sub    esp,0xc
c0014e92:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e96:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e99:	50                   	push   eax
c0014e9a:	50                   	push   eax
c0014e9b:	68 00 a8 02 c0       	push   0xc002a800
c0014ea0:	e8 64 dc ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014ea5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ea8:	e8 d3 fa ff ff       	call   c0014980 <displayDebugInfo(regs*)>

c0014ead <opcodeFault(regs*, void*)>:
c0014ead:	55                   	push   ebp
c0014eae:	89 e5                	mov    ebp,esp
c0014eb0:	56                   	push   esi
c0014eb1:	53                   	push   ebx
c0014eb2:	83 ec 40             	sub    esp,0x40
c0014eb5:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0014eba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ec0:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ec6:	84 c0                	test   al,al
c0014ec8:	74 24                	je     c0014eee <opcodeFault(regs*, void*)+0x41>
c0014eca:	83 ec 0c             	sub    esp,0xc
c0014ecd:	68 20 a8 02 c0       	push   0xc002a820
c0014ed2:	e8 32 dc ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0014ed7:	83 c4 10             	add    esp,0x10
c0014eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ee0:	8d 50 19             	lea    edx,[eax+0x19]
c0014ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ee9:	e9 be 05 00 00       	jmp    c00154ac <opcodeFault(regs*, void*)+0x5ff>
c0014eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ef4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ef7:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014efb:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f0d:	3c f0                	cmp    al,0xf0
c0014f0f:	75 17                	jne    c0014f28 <opcodeFault(regs*, void*)+0x7b>
c0014f11:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f1a:	8d 50 01             	lea    edx,[eax+0x1]
c0014f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f20:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f23:	e9 da 00 00 00       	jmp    c0015002 <opcodeFault(regs*, void*)+0x155>
c0014f28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f2d:	3c f2                	cmp    al,0xf2
c0014f2f:	74 09                	je     c0014f3a <opcodeFault(regs*, void*)+0x8d>
c0014f31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f34:	8a 00                	mov    al,BYTE PTR [eax]
c0014f36:	3c f3                	cmp    al,0xf3
c0014f38:	75 1b                	jne    c0014f55 <opcodeFault(regs*, void*)+0xa8>
c0014f3a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f3e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f47:	8d 50 01             	lea    edx,[eax+0x1]
c0014f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f50:	e9 ad 00 00 00       	jmp    c0015002 <opcodeFault(regs*, void*)+0x155>
c0014f55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f58:	8a 00                	mov    al,BYTE PTR [eax]
c0014f5a:	3c 66                	cmp    al,0x66
c0014f5c:	75 1f                	jne    c0014f7d <opcodeFault(regs*, void*)+0xd0>
c0014f5e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f62:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f66:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f6f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f75:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f78:	e9 85 00 00 00       	jmp    c0015002 <opcodeFault(regs*, void*)+0x155>
c0014f7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f80:	8a 00                	mov    al,BYTE PTR [eax]
c0014f82:	3c 67                	cmp    al,0x67
c0014f84:	75 18                	jne    c0014f9e <opcodeFault(regs*, void*)+0xf1>
c0014f86:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f8a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f90:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f93:	8d 50 01             	lea    edx,[eax+0x1]
c0014f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f99:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f9c:	eb 64                	jmp    c0015002 <opcodeFault(regs*, void*)+0x155>
c0014f9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa3:	3c 2e                	cmp    al,0x2e
c0014fa5:	74 09                	je     c0014fb0 <opcodeFault(regs*, void*)+0x103>
c0014fa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014faa:	8a 00                	mov    al,BYTE PTR [eax]
c0014fac:	3c 3e                	cmp    al,0x3e
c0014fae:	75 18                	jne    c0014fc8 <opcodeFault(regs*, void*)+0x11b>
c0014fb0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fb4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fbd:	8d 50 01             	lea    edx,[eax+0x1]
c0014fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fc6:	eb 3a                	jmp    c0015002 <opcodeFault(regs*, void*)+0x155>
c0014fc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fcb:	8a 00                	mov    al,BYTE PTR [eax]
c0014fcd:	3c 36                	cmp    al,0x36
c0014fcf:	74 1b                	je     c0014fec <opcodeFault(regs*, void*)+0x13f>
c0014fd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd4:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd6:	3c 26                	cmp    al,0x26
c0014fd8:	74 12                	je     c0014fec <opcodeFault(regs*, void*)+0x13f>
c0014fda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdf:	3c 64                	cmp    al,0x64
c0014fe1:	74 09                	je     c0014fec <opcodeFault(regs*, void*)+0x13f>
c0014fe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe8:	3c 65                	cmp    al,0x65
c0014fea:	75 16                	jne    c0015002 <opcodeFault(regs*, void*)+0x155>
c0014fec:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ff0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ff9:	8d 50 01             	lea    edx,[eax+0x1]
c0014ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015002:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015005:	8a 00                	mov    al,BYTE PTR [eax]
c0015007:	3c 0f                	cmp    al,0xf
c0015009:	0f 85 ad 00 00 00    	jne    c00150bc <opcodeFault(regs*, void*)+0x20f>
c001500f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015012:	40                   	inc    eax
c0015013:	8a 00                	mov    al,BYTE PTR [eax]
c0015015:	3c c2                	cmp    al,0xc2
c0015017:	74 0e                	je     c0015027 <opcodeFault(regs*, void*)+0x17a>
c0015019:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001501c:	40                   	inc    eax
c001501d:	8a 00                	mov    al,BYTE PTR [eax]
c001501f:	3c c3                	cmp    al,0xc3
c0015021:	0f 85 95 00 00 00    	jne    c00150bc <opcodeFault(regs*, void*)+0x20f>
c0015027:	83 ec 0c             	sub    esp,0xc
c001502a:	68 43 a8 02 c0       	push   0xc002a843
c001502f:	e8 d5 da ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0015034:	83 c4 10             	add    esp,0x10
c0015037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001503d:	8d 50 01             	lea    edx,[eax+0x1]
c0015040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015043:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015046:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015049:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504c:	8a 00                	mov    al,BYTE PTR [eax]
c001504e:	8d 50 fe             	lea    edx,[eax-0x2]
c0015051:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015054:	88 10                	mov    BYTE PTR [eax],dl
c0015056:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015059:	50                   	push   eax
c001505a:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001505d:	50                   	push   eax
c001505e:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015061:	50                   	push   eax
c0015062:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015065:	e8 b4 47 00 00       	call   c001981e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001506a:	83 c4 10             	add    esp,0x10
c001506d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015070:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015073:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015076:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015079:	01 d0                	add    eax,edx
c001507b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001507e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015081:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015084:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015087:	48                   	dec    eax
c0015088:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001508b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015091:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015097:	83 ec 04             	sub    esp,0x4
c001509a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001509d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150a0:	50                   	push   eax
c00150a1:	e8 0e b1 fe ff       	call   c00001b4 <voodooXADD>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00150ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00150af:	01 c2                	add    edx,eax
c00150b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150b7:	e9 f0 03 00 00       	jmp    c00154ac <opcodeFault(regs*, void*)+0x5ff>
c00150bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150bf:	8a 00                	mov    al,BYTE PTR [eax]
c00150c1:	3c 0f                	cmp    al,0xf
c00150c3:	0f 85 8b 01 00 00    	jne    c0015254 <opcodeFault(regs*, void*)+0x3a7>
c00150c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150cc:	40                   	inc    eax
c00150cd:	8a 00                	mov    al,BYTE PTR [eax]
c00150cf:	3c c7                	cmp    al,0xc7
c00150d1:	0f 86 7d 01 00 00    	jbe    c0015254 <opcodeFault(regs*, void*)+0x3a7>
c00150d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150da:	40                   	inc    eax
c00150db:	8a 00                	mov    al,BYTE PTR [eax]
c00150dd:	3c cf                	cmp    al,0xcf
c00150df:	0f 87 6f 01 00 00    	ja     c0015254 <opcodeFault(regs*, void*)+0x3a7>
c00150e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e8:	40                   	inc    eax
c00150e9:	8a 00                	mov    al,BYTE PTR [eax]
c00150eb:	83 c0 38             	add    eax,0x38
c00150ee:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00150f1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00150f5:	75 0b                	jne    c0015102 <opcodeFault(regs*, void*)+0x255>
c00150f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fa:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015100:	eb 75                	jmp    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c0015102:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015106:	75 0b                	jne    c0015113 <opcodeFault(regs*, void*)+0x266>
c0015108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001510e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015111:	eb 64                	jmp    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c0015113:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015117:	75 0b                	jne    c0015124 <opcodeFault(regs*, void*)+0x277>
c0015119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001511f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015122:	eb 53                	jmp    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c0015124:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015128:	75 0b                	jne    c0015135 <opcodeFault(regs*, void*)+0x288>
c001512a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015130:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015133:	eb 42                	jmp    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c0015135:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015139:	75 0b                	jne    c0015146 <opcodeFault(regs*, void*)+0x299>
c001513b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015141:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015144:	eb 31                	jmp    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c0015146:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001514a:	75 0b                	jne    c0015157 <opcodeFault(regs*, void*)+0x2aa>
c001514c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015152:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015155:	eb 20                	jmp    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c0015157:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001515b:	75 0b                	jne    c0015168 <opcodeFault(regs*, void*)+0x2bb>
c001515d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015160:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015163:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015166:	eb 0f                	jmp    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c0015168:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001516c:	75 09                	jne    c0015177 <opcodeFault(regs*, void*)+0x2ca>
c001516e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015171:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015174:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015177:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001517b:	74 10                	je     c001518d <opcodeFault(regs*, void*)+0x2e0>
c001517d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015184:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001518b:	eb 2d                	jmp    c00151ba <opcodeFault(regs*, void*)+0x30d>
c001518d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015190:	c1 e0 18             	shl    eax,0x18
c0015193:	89 c2                	mov    edx,eax
c0015195:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015198:	c1 e0 08             	shl    eax,0x8
c001519b:	25 00 00 ff 00       	and    eax,0xff0000
c00151a0:	09 c2                	or     edx,eax
c00151a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151a5:	c1 e8 08             	shr    eax,0x8
c00151a8:	25 00 ff 00 00       	and    eax,0xff00
c00151ad:	09 c2                	or     edx,eax
c00151af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151b2:	c1 e8 18             	shr    eax,0x18
c00151b5:	09 d0                	or     eax,edx
c00151b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151ba:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00151be:	75 0b                	jne    c00151cb <opcodeFault(regs*, void*)+0x31e>
c00151c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151c6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151c9:	eb 75                	jmp    c0015240 <opcodeFault(regs*, void*)+0x393>
c00151cb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151cf:	75 0b                	jne    c00151dc <opcodeFault(regs*, void*)+0x32f>
c00151d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151d7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00151da:	eb 64                	jmp    c0015240 <opcodeFault(regs*, void*)+0x393>
c00151dc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151e0:	75 0b                	jne    c00151ed <opcodeFault(regs*, void*)+0x340>
c00151e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151e8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151eb:	eb 53                	jmp    c0015240 <opcodeFault(regs*, void*)+0x393>
c00151ed:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151f1:	75 0b                	jne    c00151fe <opcodeFault(regs*, void*)+0x351>
c00151f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151f9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00151fc:	eb 42                	jmp    c0015240 <opcodeFault(regs*, void*)+0x393>
c00151fe:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015202:	75 0b                	jne    c001520f <opcodeFault(regs*, void*)+0x362>
c0015204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015207:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001520a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001520d:	eb 31                	jmp    c0015240 <opcodeFault(regs*, void*)+0x393>
c001520f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015213:	75 0b                	jne    c0015220 <opcodeFault(regs*, void*)+0x373>
c0015215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015218:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001521b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001521e:	eb 20                	jmp    c0015240 <opcodeFault(regs*, void*)+0x393>
c0015220:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015224:	75 0b                	jne    c0015231 <opcodeFault(regs*, void*)+0x384>
c0015226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015229:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001522c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001522f:	eb 0f                	jmp    c0015240 <opcodeFault(regs*, void*)+0x393>
c0015231:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015235:	75 09                	jne    c0015240 <opcodeFault(regs*, void*)+0x393>
c0015237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001523d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015243:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015246:	8d 50 02             	lea    edx,[eax+0x2]
c0015249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001524f:	e9 58 02 00 00       	jmp    c00154ac <opcodeFault(regs*, void*)+0x5ff>
c0015254:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015257:	8a 00                	mov    al,BYTE PTR [eax]
c0015259:	3c 0f                	cmp    al,0xf
c001525b:	0f 85 76 01 00 00    	jne    c00153d7 <opcodeFault(regs*, void*)+0x52a>
c0015261:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015264:	40                   	inc    eax
c0015265:	8a 00                	mov    al,BYTE PTR [eax]
c0015267:	3c c7                	cmp    al,0xc7
c0015269:	0f 85 68 01 00 00    	jne    c00153d7 <opcodeFault(regs*, void*)+0x52a>
c001526f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015275:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015278:	8d 50 01             	lea    edx,[eax+0x1]
c001527b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015281:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015284:	50                   	push   eax
c0015285:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015288:	50                   	push   eax
c0015289:	8d 45 bc             	lea    eax,[ebp-0x44]
c001528c:	50                   	push   eax
c001528d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015290:	e8 89 45 00 00       	call   c001981e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015295:	83 c4 10             	add    esp,0x10
c0015298:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001529b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001529e:	83 f0 01             	xor    eax,0x1
c00152a1:	84 c0                	test   al,al
c00152a3:	0f 84 2e 01 00 00    	je     c00153d7 <opcodeFault(regs*, void*)+0x52a>
c00152a9:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00152ac:	3c 01                	cmp    al,0x1
c00152ae:	0f 85 23 01 00 00    	jne    c00153d7 <opcodeFault(regs*, void*)+0x52a>
c00152b4:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00152b7:	83 f0 01             	xor    eax,0x1
c00152ba:	84 c0                	test   al,al
c00152bc:	0f 84 15 01 00 00    	je     c00153d7 <opcodeFault(regs*, void*)+0x52a>
c00152c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00152c8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152cb:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00152d2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152d5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152d8:	89 c2                	mov    edx,eax
c00152da:	b8 00 00 00 00       	mov    eax,0x0
c00152df:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152e2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00152eb:	ba 00 00 00 00       	mov    edx,0x0
c00152f0:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00152f3:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00152f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00152fc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00152ff:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015306:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015309:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001530c:	89 c2                	mov    edx,eax
c001530e:	b8 00 00 00 00       	mov    eax,0x0
c0015313:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015316:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001531f:	ba 00 00 00 00       	mov    edx,0x0
c0015324:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015327:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001532a:	e8 27 83 00 00       	call   c001d656 <lockScheduler()>
c001532f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015332:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015335:	8b 00                	mov    eax,DWORD PTR [eax]
c0015337:	89 c1                	mov    ecx,eax
c0015339:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001533c:	89 cb                	mov    ebx,ecx
c001533e:	89 d0                	mov    eax,edx
c0015340:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015343:	89 c6                	mov    esi,eax
c0015345:	89 f0                	mov    eax,esi
c0015347:	09 d8                	or     eax,ebx
c0015349:	85 c0                	test   eax,eax
c001534b:	75 21                	jne    c001536e <opcodeFault(regs*, void*)+0x4c1>
c001534d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015350:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015353:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015356:	89 01                	mov    DWORD PTR [ecx],eax
c0015358:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015361:	83 c8 40             	or     eax,0x40
c0015364:	89 c2                	mov    edx,eax
c0015366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015369:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001536c:	eb 3e                	jmp    c00153ac <opcodeFault(regs*, void*)+0x4ff>
c001536e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015371:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015374:	8b 00                	mov    eax,DWORD PTR [eax]
c0015376:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015379:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001537c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015382:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015385:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015388:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001538b:	89 d0                	mov    eax,edx
c001538d:	31 d2                	xor    edx,edx
c001538f:	89 c3                	mov    ebx,eax
c0015391:	89 d6                	mov    esi,edx
c0015393:	89 da                	mov    edx,ebx
c0015395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015398:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001539b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153a1:	83 e0 bf             	and    eax,0xffffffbf
c00153a4:	89 c2                	mov    edx,eax
c00153a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153ac:	e8 a7 82 00 00       	call   c001d658 <unlockScheduler()>
c00153b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b7:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00153ba:	01 c2                	add    edx,eax
c00153bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c2:	83 ec 0c             	sub    esp,0xc
c00153c5:	68 52 a8 02 c0       	push   0xc002a852
c00153ca:	e8 3a d7 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	e9 d5 00 00 00       	jmp    c00154ac <opcodeFault(regs*, void*)+0x5ff>
c00153d7:	83 ec 0c             	sub    esp,0xc
c00153da:	68 65 a8 02 c0       	push   0xc002a865
c00153df:	e8 25 d7 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00153e4:	83 c4 10             	add    esp,0x10
c00153e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ea:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f3:	c1 e0 04             	shl    eax,0x4
c00153f6:	01 d0                	add    eax,edx
c00153f8:	83 c0 03             	add    eax,0x3
c00153fb:	8a 00                	mov    al,BYTE PTR [eax]
c00153fd:	0f b6 d8             	movzx  ebx,al
c0015400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015403:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015409:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001540c:	c1 e0 04             	shl    eax,0x4
c001540f:	01 d0                	add    eax,edx
c0015411:	83 c0 02             	add    eax,0x2
c0015414:	8a 00                	mov    al,BYTE PTR [eax]
c0015416:	0f b6 c8             	movzx  ecx,al
c0015419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001541f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015422:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015425:	c1 e0 04             	shl    eax,0x4
c0015428:	01 d0                	add    eax,edx
c001542a:	40                   	inc    eax
c001542b:	8a 00                	mov    al,BYTE PTR [eax]
c001542d:	0f b6 d0             	movzx  edx,al
c0015430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015433:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015439:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001543c:	c1 e0 04             	shl    eax,0x4
c001543f:	01 f0                	add    eax,esi
c0015441:	8a 00                	mov    al,BYTE PTR [eax]
c0015443:	0f b6 c0             	movzx  eax,al
c0015446:	83 ec 0c             	sub    esp,0xc
c0015449:	53                   	push   ebx
c001544a:	51                   	push   ecx
c001544b:	52                   	push   edx
c001544c:	50                   	push   eax
c001544d:	68 78 a8 02 c0       	push   0xc002a878
c0015452:	e8 b2 d6 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0015457:	83 c4 20             	add    esp,0x20
c001545a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015460:	83 c0 03             	add    eax,0x3
c0015463:	8a 00                	mov    al,BYTE PTR [eax]
c0015465:	0f b6 d8             	movzx  ebx,al
c0015468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546e:	83 c0 02             	add    eax,0x2
c0015471:	8a 00                	mov    al,BYTE PTR [eax]
c0015473:	0f b6 c8             	movzx  ecx,al
c0015476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015479:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547c:	40                   	inc    eax
c001547d:	8a 00                	mov    al,BYTE PTR [eax]
c001547f:	0f b6 d0             	movzx  edx,al
c0015482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015485:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015488:	8a 00                	mov    al,BYTE PTR [eax]
c001548a:	0f b6 c0             	movzx  eax,al
c001548d:	83 ec 0c             	sub    esp,0xc
c0015490:	53                   	push   ebx
c0015491:	51                   	push   ecx
c0015492:	52                   	push   edx
c0015493:	50                   	push   eax
c0015494:	68 a0 a8 02 c0       	push   0xc002a8a0
c0015499:	e8 6b d6 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001549e:	83 c4 20             	add    esp,0x20
c00154a1:	83 ec 0c             	sub    esp,0xc
c00154a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154a7:	e8 d4 f4 ff ff       	call   c0014980 <displayDebugInfo(regs*)>
c00154ac:	8d 65 f8             	lea    esp,[ebp-0x8]
c00154af:	5b                   	pop    ebx
c00154b0:	5e                   	pop    esi
c00154b1:	5d                   	pop    ebp
c00154b2:	c3                   	ret    

c00154b3 <displayProgramFault(char const*)>:
c00154b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154bb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154c1:	85 c0                	test   eax,eax
c00154c3:	74 15                	je     c00154da <displayProgramFault(char const*)+0x27>
c00154c5:	83 ec 0c             	sub    esp,0xc
c00154c8:	6a 04                	push   0x4
c00154ca:	6a 0f                	push   0xf
c00154cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154d0:	50                   	push   eax
c00154d1:	e8 d6 b8 ff ff       	call   c0010dac <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154d6:	83 c4 1c             	add    esp,0x1c
c00154d9:	c3                   	ret    
c00154da:	c3                   	ret    

c00154db <setupInterruptController()>:
c00154db:	55                   	push   ebp
c00154dc:	89 e5                	mov    ebp,esp
c00154de:	53                   	push   ebx
c00154df:	83 ec 24             	sub    esp,0x24
c00154e2:	b8 00 00 00 00       	mov    eax,0x0
c00154e7:	85 c0                	test   eax,eax
c00154e9:	0f 95 c0             	setne  al
c00154ec:	84 c0                	test   al,al
c00154ee:	74 5b                	je     c001554b <setupInterruptController()+0x70>
c00154f0:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00154f7:	83 ec 0c             	sub    esp,0xc
c00154fa:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00154fd:	e8 38 a3 ff ff       	call   c000f83a <malloc>
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	89 c3                	mov    ebx,eax
c0015507:	83 ec 0c             	sub    esp,0xc
c001550a:	53                   	push   ebx
c001550b:	e8 ca fc 00 00       	call   c00251da <APIC::APIC()>
c0015510:	83 c4 10             	add    esp,0x10
c0015513:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015519:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001551c:	8b 00                	mov    eax,DWORD PTR [eax]
c001551e:	83 c0 08             	add    eax,0x8
c0015521:	8b 00                	mov    eax,DWORD PTR [eax]
c0015523:	6a 00                	push   0x0
c0015525:	6a 00                	push   0x0
c0015527:	6a 00                	push   0x0
c0015529:	52                   	push   edx
c001552a:	ff d0                	call   eax
c001552c:	83 c4 10             	add    esp,0x10
c001552f:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0015534:	83 ec 08             	sub    esp,0x8
c0015537:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001553a:	50                   	push   eax
c001553b:	e8 f0 e9 ff ff       	call   c0013f30 <Device::addChild(Device*)>
c0015540:	83 c4 10             	add    esp,0x10
c0015543:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015546:	e9 52 03 00 00       	jmp    c001589d <setupInterruptController()+0x3c2>
c001554b:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0015550:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015556:	83 e0 01             	and    eax,0x1
c0015559:	84 c0                	test   al,al
c001555b:	0f 95 c0             	setne  al
c001555e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015561:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015568:	83 ec 0c             	sub    esp,0xc
c001556b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001556e:	e8 c7 a2 ff ff       	call   c000f83a <malloc>
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	89 c3                	mov    ebx,eax
c0015578:	83 ec 0c             	sub    esp,0xc
c001557b:	53                   	push   ebx
c001557c:	e8 b1 01 01 00       	call   c0025732 <PIC::PIC()>
c0015581:	83 c4 10             	add    esp,0x10
c0015584:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015587:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001558a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558d:	8b 00                	mov    eax,DWORD PTR [eax]
c001558f:	83 c0 08             	add    eax,0x8
c0015592:	8b 00                	mov    eax,DWORD PTR [eax]
c0015594:	6a 00                	push   0x0
c0015596:	6a 00                	push   0x0
c0015598:	6a 00                	push   0x0
c001559a:	52                   	push   edx
c001559b:	ff d0                	call   eax
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00155a4:	74 73                	je     c0015619 <setupInterruptController()+0x13e>
c00155a6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ae:	83 c0 0c             	add    eax,0xc
c00155b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b3:	6a 00                	push   0x0
c00155b5:	6a 00                	push   0x0
c00155b7:	6a 00                	push   0x0
c00155b9:	52                   	push   edx
c00155ba:	ff d0                	call   eax
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155c3:	74 15                	je     c00155da <setupInterruptController()+0xff>
c00155c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ca:	83 c0 04             	add    eax,0x4
c00155cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cf:	83 ec 0c             	sub    esp,0xc
c00155d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d5:	ff d0                	call   eax
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155e1:	83 ec 0c             	sub    esp,0xc
c00155e4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155e7:	e8 4e a2 ff ff       	call   c000f83a <malloc>
c00155ec:	83 c4 10             	add    esp,0x10
c00155ef:	89 c3                	mov    ebx,eax
c00155f1:	83 ec 0c             	sub    esp,0xc
c00155f4:	53                   	push   ebx
c00155f5:	e8 e0 fb 00 00       	call   c00251da <APIC::APIC()>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015600:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015603:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015606:	8b 00                	mov    eax,DWORD PTR [eax]
c0015608:	83 c0 08             	add    eax,0x8
c001560b:	8b 00                	mov    eax,DWORD PTR [eax]
c001560d:	6a 00                	push   0x0
c001560f:	6a 00                	push   0x0
c0015611:	6a 00                	push   0x0
c0015613:	52                   	push   edx
c0015614:	ff d0                	call   eax
c0015616:	83 c4 10             	add    esp,0x10
c0015619:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001561e:	83 ec 08             	sub    esp,0x8
c0015621:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015624:	50                   	push   eax
c0015625:	e8 06 e9 ff ff       	call   c0013f30 <Device::addChild(Device*)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015630:	8b 00                	mov    eax,DWORD PTR [eax]
c0015632:	83 c0 24             	add    eax,0x24
c0015635:	8b 00                	mov    eax,DWORD PTR [eax]
c0015637:	6a 00                	push   0x0
c0015639:	68 8e 4e 01 c0       	push   0xc0014e8e
c001563e:	6a 00                	push   0x0
c0015640:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015643:	ff d0                	call   eax
c0015645:	83 c4 10             	add    esp,0x10
c0015648:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564b:	8b 00                	mov    eax,DWORD PTR [eax]
c001564d:	83 c0 24             	add    eax,0x24
c0015650:	8b 00                	mov    eax,DWORD PTR [eax]
c0015652:	6a 00                	push   0x0
c0015654:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015659:	6a 01                	push   0x1
c001565b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001565e:	ff d0                	call   eax
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015666:	8b 00                	mov    eax,DWORD PTR [eax]
c0015668:	83 c0 24             	add    eax,0x24
c001566b:	8b 00                	mov    eax,DWORD PTR [eax]
c001566d:	6a 00                	push   0x0
c001566f:	68 dd 47 01 c0       	push   0xc00147dd
c0015674:	6a 02                	push   0x2
c0015676:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015679:	ff d0                	call   eax
c001567b:	83 c4 10             	add    esp,0x10
c001567e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015681:	8b 00                	mov    eax,DWORD PTR [eax]
c0015683:	83 c0 24             	add    eax,0x24
c0015686:	8b 00                	mov    eax,DWORD PTR [eax]
c0015688:	6a 00                	push   0x0
c001568a:	68 8e 4e 01 c0       	push   0xc0014e8e
c001568f:	6a 03                	push   0x3
c0015691:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015694:	ff d0                	call   eax
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569c:	8b 00                	mov    eax,DWORD PTR [eax]
c001569e:	83 c0 24             	add    eax,0x24
c00156a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a3:	6a 00                	push   0x0
c00156a5:	68 8e 4e 01 c0       	push   0xc0014e8e
c00156aa:	6a 04                	push   0x4
c00156ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156af:	ff d0                	call   eax
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b9:	83 c0 24             	add    eax,0x24
c00156bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156be:	6a 00                	push   0x0
c00156c0:	68 8e 4e 01 c0       	push   0xc0014e8e
c00156c5:	6a 05                	push   0x5
c00156c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ca:	ff d0                	call   eax
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d4:	83 c0 24             	add    eax,0x24
c00156d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d9:	6a 00                	push   0x0
c00156db:	68 ad 4e 01 c0       	push   0xc0014ead
c00156e0:	6a 06                	push   0x6
c00156e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e5:	ff d0                	call   eax
c00156e7:	83 c4 10             	add    esp,0x10
c00156ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ef:	83 c0 24             	add    eax,0x24
c00156f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f4:	6a 00                	push   0x0
c00156f6:	68 0f 4e 01 c0       	push   0xc0014e0f
c00156fb:	6a 07                	push   0x7
c00156fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015700:	ff d0                	call   eax
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015708:	8b 00                	mov    eax,DWORD PTR [eax]
c001570a:	83 c0 24             	add    eax,0x24
c001570d:	8b 00                	mov    eax,DWORD PTR [eax]
c001570f:	6a 00                	push   0x0
c0015711:	68 f8 45 01 c0       	push   0xc00145f8
c0015716:	6a 08                	push   0x8
c0015718:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001571b:	ff d0                	call   eax
c001571d:	83 c4 10             	add    esp,0x10
c0015720:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015723:	8b 00                	mov    eax,DWORD PTR [eax]
c0015725:	83 c0 24             	add    eax,0x24
c0015728:	8b 00                	mov    eax,DWORD PTR [eax]
c001572a:	6a 00                	push   0x0
c001572c:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015731:	6a 09                	push   0x9
c0015733:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015736:	ff d0                	call   eax
c0015738:	83 c4 10             	add    esp,0x10
c001573b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001573e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015740:	83 c0 24             	add    eax,0x24
c0015743:	8b 00                	mov    eax,DWORD PTR [eax]
c0015745:	6a 00                	push   0x0
c0015747:	68 8e 4e 01 c0       	push   0xc0014e8e
c001574c:	6a 0a                	push   0xa
c001574e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015751:	ff d0                	call   eax
c0015753:	83 c4 10             	add    esp,0x10
c0015756:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015759:	8b 00                	mov    eax,DWORD PTR [eax]
c001575b:	83 c0 24             	add    eax,0x24
c001575e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015760:	6a 00                	push   0x0
c0015762:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015767:	6a 0b                	push   0xb
c0015769:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001576c:	ff d0                	call   eax
c001576e:	83 c4 10             	add    esp,0x10
c0015771:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015774:	8b 00                	mov    eax,DWORD PTR [eax]
c0015776:	83 c0 24             	add    eax,0x24
c0015779:	8b 00                	mov    eax,DWORD PTR [eax]
c001577b:	6a 00                	push   0x0
c001577d:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015782:	6a 0c                	push   0xc
c0015784:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015787:	ff d0                	call   eax
c0015789:	83 c4 10             	add    esp,0x10
c001578c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001578f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015791:	83 c0 24             	add    eax,0x24
c0015794:	8b 00                	mov    eax,DWORD PTR [eax]
c0015796:	6a 00                	push   0x0
c0015798:	68 3e 4e 01 c0       	push   0xc0014e3e
c001579d:	6a 0d                	push   0xd
c001579f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157a2:	ff d0                	call   eax
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ac:	83 c0 24             	add    eax,0x24
c00157af:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b1:	6a 00                	push   0x0
c00157b3:	68 77 4e 01 c0       	push   0xc0014e77
c00157b8:	6a 0e                	push   0xe
c00157ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157bd:	ff d0                	call   eax
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c7:	83 c0 24             	add    eax,0x24
c00157ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00157cc:	6a 00                	push   0x0
c00157ce:	68 8e 4e 01 c0       	push   0xc0014e8e
c00157d3:	6a 0f                	push   0xf
c00157d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157d8:	ff d0                	call   eax
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e2:	83 c0 24             	add    eax,0x24
c00157e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e7:	6a 00                	push   0x0
c00157e9:	68 8e 4e 01 c0       	push   0xc0014e8e
c00157ee:	6a 10                	push   0x10
c00157f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157f3:	ff d0                	call   eax
c00157f5:	83 c4 10             	add    esp,0x10
c00157f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157fd:	83 c0 24             	add    eax,0x24
c0015800:	8b 00                	mov    eax,DWORD PTR [eax]
c0015802:	6a 00                	push   0x0
c0015804:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015809:	6a 11                	push   0x11
c001580b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001580e:	ff d0                	call   eax
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015816:	8b 00                	mov    eax,DWORD PTR [eax]
c0015818:	83 c0 24             	add    eax,0x24
c001581b:	8b 00                	mov    eax,DWORD PTR [eax]
c001581d:	6a 00                	push   0x0
c001581f:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015824:	6a 12                	push   0x12
c0015826:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015829:	ff d0                	call   eax
c001582b:	83 c4 10             	add    esp,0x10
c001582e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015831:	8b 00                	mov    eax,DWORD PTR [eax]
c0015833:	83 c0 24             	add    eax,0x24
c0015836:	8b 00                	mov    eax,DWORD PTR [eax]
c0015838:	6a 00                	push   0x0
c001583a:	68 8e 4e 01 c0       	push   0xc0014e8e
c001583f:	6a 13                	push   0x13
c0015841:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015844:	ff d0                	call   eax
c0015846:	83 c4 10             	add    esp,0x10
c0015849:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001584c:	8b 00                	mov    eax,DWORD PTR [eax]
c001584e:	83 c0 24             	add    eax,0x24
c0015851:	8b 00                	mov    eax,DWORD PTR [eax]
c0015853:	6a 00                	push   0x0
c0015855:	68 8e 4e 01 c0       	push   0xc0014e8e
c001585a:	6a 14                	push   0x14
c001585c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001585f:	ff d0                	call   eax
c0015861:	83 c4 10             	add    esp,0x10
c0015864:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015867:	8b 00                	mov    eax,DWORD PTR [eax]
c0015869:	83 c0 24             	add    eax,0x24
c001586c:	8b 00                	mov    eax,DWORD PTR [eax]
c001586e:	6a 00                	push   0x0
c0015870:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015875:	6a 1e                	push   0x1e
c0015877:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001587a:	ff d0                	call   eax
c001587c:	83 c4 10             	add    esp,0x10
c001587f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015882:	8b 00                	mov    eax,DWORD PTR [eax]
c0015884:	83 c0 24             	add    eax,0x24
c0015887:	8b 00                	mov    eax,DWORD PTR [eax]
c0015889:	6a 00                	push   0x0
c001588b:	68 41 c0 01 c0       	push   0xc001c041
c0015890:	6a 60                	push   0x60
c0015892:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015895:	ff d0                	call   eax
c0015897:	83 c4 10             	add    esp,0x10
c001589a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001589d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158a0:	c9                   	leave  
c00158a1:	c3                   	ret    

c00158a2 <InterruptController::convertLegacyIRQNumber(int)>:
c00158a2:	55                   	push   ebp
c00158a3:	89 e5                	mov    ebp,esp
c00158a5:	83 ec 08             	sub    esp,0x8
c00158a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ab:	83 ec 0c             	sub    esp,0xc
c00158ae:	50                   	push   eax
c00158af:	e8 68 e9 ff ff       	call   c001421c <Device::getName()>
c00158b4:	83 c4 10             	add    esp,0x10
c00158b7:	8a 00                	mov    al,BYTE PTR [eax]
c00158b9:	3c 41                	cmp    al,0x41
c00158bb:	0f 94 c0             	sete   al
c00158be:	84 c0                	test   al,al
c00158c0:	74 28                	je     c00158ea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158c2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00158c6:	7f 12                	jg     c00158da <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00158c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158cb:	05 00 cd 02 c0       	add    eax,0xc002cd00
c00158d0:	8a 00                	mov    al,BYTE PTR [eax]
c00158d2:	0f b6 c0             	movzx  eax,al
c00158d5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158d8:	eb 10                	jmp    c00158ea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158da:	83 ec 0c             	sub    esp,0xc
c00158dd:	68 c0 a5 02 c0       	push   0xc002a5c0
c00158e2:	e8 06 47 00 00       	call   c0019fed <Krnl::panic(char const*)>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158ed:	c9                   	leave  
c00158ee:	c3                   	ret    
c00158ef:	90                   	nop

c00158f0 <startGUI(void*)>:
c00158f0:	55                   	push   ebp
c00158f1:	89 e5                	mov    ebp,esp
c00158f3:	53                   	push   ebx
c00158f4:	83 ec 04             	sub    esp,0x4
c00158f7:	e8 5c 7d 00 00       	call   c001d658 <unlockScheduler()>
c00158fc:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0015902:	83 ec 08             	sub    esp,0x8
c0015905:	6a 01                	push   0x1
c0015907:	68 10 a9 02 c0       	push   0xc002a910
c001590c:	e8 c4 76 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c0015911:	83 c4 10             	add    esp,0x10
c0015914:	83 ec 08             	sub    esp,0x8
c0015917:	53                   	push   ebx
c0015918:	50                   	push   eax
c0015919:	e8 d3 78 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c001591e:	83 c4 10             	add    esp,0x10
c0015921:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0015927:	83 ec 08             	sub    esp,0x8
c001592a:	6a 01                	push   0x1
c001592c:	68 2a a9 02 c0       	push   0xc002a92a
c0015931:	e8 9f 76 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c0015936:	83 c4 10             	add    esp,0x10
c0015939:	83 ec 08             	sub    esp,0x8
c001593c:	53                   	push   ebx
c001593d:	50                   	push   eax
c001593e:	e8 ae 78 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	90                   	nop
c0015947:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001594a:	c9                   	leave  
c001594b:	c3                   	ret    

c001594c <startGUIVESA(void*)>:
c001594c:	55                   	push   ebp
c001594d:	89 e5                	mov    ebp,esp
c001594f:	53                   	push   ebx
c0015950:	83 ec 04             	sub    esp,0x4
c0015953:	e8 00 7d 00 00       	call   c001d658 <unlockScheduler()>
c0015958:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c001595e:	83 ec 08             	sub    esp,0x8
c0015961:	6a 01                	push   0x1
c0015963:	68 44 a9 02 c0       	push   0xc002a944
c0015968:	e8 68 76 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c001596d:	83 c4 10             	add    esp,0x10
c0015970:	83 ec 08             	sub    esp,0x8
c0015973:	53                   	push   ebx
c0015974:	50                   	push   eax
c0015975:	e8 77 78 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0015983:	83 ec 08             	sub    esp,0x8
c0015986:	6a 01                	push   0x1
c0015988:	68 2a a9 02 c0       	push   0xc002a92a
c001598d:	e8 43 76 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	83 ec 08             	sub    esp,0x8
c0015998:	53                   	push   ebx
c0015999:	50                   	push   eax
c001599a:	e8 52 78 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c001599f:	83 c4 10             	add    esp,0x10
c00159a2:	90                   	nop
c00159a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159a6:	c9                   	leave  
c00159a7:	c3                   	ret    

c00159a8 <sendKeyToTerminal(unsigned char)>:
c00159a8:	55                   	push   ebp
c00159a9:	89 e5                	mov    ebp,esp
c00159ab:	83 ec 28             	sub    esp,0x28
c00159ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159b4:	a1 84 db 02 c0       	mov    eax,ds:0xc002db84
c00159b9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159bd:	83 ec 08             	sub    esp,0x8
c00159c0:	52                   	push   edx
c00159c1:	50                   	push   eax
c00159c2:	e8 21 b9 ff ff       	call   c00112e8 <VgaText::receiveKey(unsigned char)>
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159ce:	75 41                	jne    c0015a11 <sendKeyToTerminal(unsigned char)+0x69>
c00159d0:	e8 a8 7c 00 00       	call   c001d67d <lockStuff()>
c00159d5:	a1 60 dc 02 c0       	mov    eax,ds:0xc002dc60
c00159da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159dd:	c7 05 60 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc60,0x0
c00159e7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159eb:	74 1f                	je     c0015a0c <sendKeyToTerminal(unsigned char)+0x64>
c00159ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159fc:	83 ec 0c             	sub    esp,0xc
c00159ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a02:	e8 67 82 00 00       	call   c001dc6e <unblockTask(ThreadControlBlock*)>
c0015a07:	83 c4 10             	add    esp,0x10
c0015a0a:	eb db                	jmp    c00159e7 <sendKeyToTerminal(unsigned char)+0x3f>
c0015a0c:	e8 06 80 00 00       	call   c001da17 <unlockStuff()>
c0015a11:	90                   	nop
c0015a12:	c9                   	leave  
c0015a13:	c3                   	ret    

c0015a14 <sendKeyboardToken(KeyboardToken)>:
c0015a14:	55                   	push   ebp
c0015a15:	89 e5                	mov    ebp,esp
c0015a17:	83 ec 18             	sub    esp,0x18
c0015a1a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a20:	0f b7 c0             	movzx  eax,ax
c0015a23:	83 f2 01             	xor    edx,0x1
c0015a26:	88 90 80 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd2380],dl
c0015a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2f:	66 3d 03 02          	cmp    ax,0x203
c0015a33:	75 07                	jne    c0015a3c <sendKeyboardToken(KeyboardToken)+0x28>
c0015a35:	a0 80 dd 02 c0       	mov    al,ds:0xc002dd80
c0015a3a:	84 c0                	test   al,al
c0015a3c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a40:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a43:	a0 88 e0 02 c0       	mov    al,ds:0xc002e088
c0015a48:	38 c2                	cmp    dl,al
c0015a4a:	74 1c                	je     c0015a68 <sendKeyboardToken(KeyboardToken)+0x54>
c0015a4c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a4f:	a2 88 e0 02 c0       	mov    ds:0xc002e088,al
c0015a54:	a0 88 e0 02 c0       	mov    al,ds:0xc002e088
c0015a59:	0f b6 c0             	movzx  eax,al
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	50                   	push   eax
c0015a60:	e8 e3 aa ff ff       	call   c0010548 <setTerminalScrollLock(bool)>
c0015a65:	83 c4 10             	add    esp,0x10
c0015a68:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015a6b:	84 c0                	test   al,al
c0015a6d:	0f 84 ae 00 00 00    	je     c0015b21 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a76:	66 3d 10 03          	cmp    ax,0x310
c0015a7a:	75 06                	jne    c0015a82 <sendKeyboardToken(KeyboardToken)+0x6e>
c0015a7c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a85:	66 3d 11 03          	cmp    ax,0x311
c0015a89:	75 06                	jne    c0015a91 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015a8b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a94:	66 3d 12 03          	cmp    ax,0x312
c0015a98:	75 06                	jne    c0015aa0 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015a9a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa3:	66 3d 13 03          	cmp    ax,0x313
c0015aa7:	75 06                	jne    c0015aaf <sendKeyboardToken(KeyboardToken)+0x9b>
c0015aa9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab2:	66 3d 14 03          	cmp    ax,0x314
c0015ab6:	75 06                	jne    c0015abe <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ab8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac1:	66 3d 15 03          	cmp    ax,0x315
c0015ac5:	75 06                	jne    c0015acd <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ac7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad0:	66 3d 16 03          	cmp    ax,0x316
c0015ad4:	75 06                	jne    c0015adc <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ad6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015adf:	66 3d 17 03          	cmp    ax,0x317
c0015ae3:	75 06                	jne    c0015aeb <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ae5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aee:	66 3d 18 03          	cmp    ax,0x318
c0015af2:	75 06                	jne    c0015afa <sendKeyboardToken(KeyboardToken)+0xe6>
c0015af4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afd:	66 3d 19 03          	cmp    ax,0x319
c0015b01:	75 06                	jne    c0015b09 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b03:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0c:	66 3d 1a 03          	cmp    ax,0x31a
c0015b10:	0f 85 c9 00 00 00    	jne    c0015bdf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b16:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b1c:	e9 be 00 00 00       	jmp    c0015bdf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b24:	66 3d 10 03          	cmp    ax,0x310
c0015b28:	75 0a                	jne    c0015b34 <sendKeyboardToken(KeyboardToken)+0x120>
c0015b2a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b37:	66 3d 11 03          	cmp    ax,0x311
c0015b3b:	75 0a                	jne    c0015b47 <sendKeyboardToken(KeyboardToken)+0x133>
c0015b3d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4a:	66 3d 12 03          	cmp    ax,0x312
c0015b4e:	75 0a                	jne    c0015b5a <sendKeyboardToken(KeyboardToken)+0x146>
c0015b50:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5d:	66 3d 13 03          	cmp    ax,0x313
c0015b61:	75 0a                	jne    c0015b6d <sendKeyboardToken(KeyboardToken)+0x159>
c0015b63:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b70:	66 3d 14 03          	cmp    ax,0x314
c0015b74:	75 0a                	jne    c0015b80 <sendKeyboardToken(KeyboardToken)+0x16c>
c0015b76:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015b7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b83:	66 3d 15 03          	cmp    ax,0x315
c0015b87:	75 0a                	jne    c0015b93 <sendKeyboardToken(KeyboardToken)+0x17f>
c0015b89:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b8f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b96:	66 3d 16 03          	cmp    ax,0x316
c0015b9a:	75 0a                	jne    c0015ba6 <sendKeyboardToken(KeyboardToken)+0x192>
c0015b9c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ba2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba9:	66 3d 17 03          	cmp    ax,0x317
c0015bad:	75 0a                	jne    c0015bb9 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015baf:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015bb5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbc:	66 3d 18 03          	cmp    ax,0x318
c0015bc0:	75 0a                	jne    c0015bcc <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015bc2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015bc8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcf:	66 3d 19 03          	cmp    ax,0x319
c0015bd3:	75 0a                	jne    c0015bdf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015bd5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015bdb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be2:	66 3d 00 02          	cmp    ax,0x200
c0015be6:	75 2c                	jne    c0015c14 <sendKeyboardToken(KeyboardToken)+0x200>
c0015be8:	a0 80 e0 02 c0       	mov    al,ds:0xc002e080
c0015bed:	83 f0 01             	xor    eax,0x1
c0015bf0:	84 c0                	test   al,al
c0015bf2:	74 20                	je     c0015c14 <sendKeyboardToken(KeyboardToken)+0x200>
c0015bf4:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0015bf9:	6a 01                	push   0x1
c0015bfb:	6a 00                	push   0x0
c0015bfd:	68 f0 58 01 c0       	push   0xc00158f0
c0015c02:	50                   	push   eax
c0015c03:	e8 80 7b 00 00       	call   c001d788 <Process::createThread(void (*)(void*), void*, int)>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	c6 05 80 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e080,0x1
c0015c12:	eb 33                	jmp    c0015c47 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c17:	66 3d 01 02          	cmp    ax,0x201
c0015c1b:	75 2a                	jne    c0015c47 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c1d:	a0 80 e0 02 c0       	mov    al,ds:0xc002e080
c0015c22:	83 f0 01             	xor    eax,0x1
c0015c25:	84 c0                	test   al,al
c0015c27:	74 1e                	je     c0015c47 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c29:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c0015c2e:	6a 01                	push   0x1
c0015c30:	6a 00                	push   0x0
c0015c32:	68 4c 59 01 c0       	push   0xc001594c
c0015c37:	50                   	push   eax
c0015c38:	e8 4b 7b 00 00       	call   c001d788 <Process::createThread(void (*)(void*), void*, int)>
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	c6 05 80 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e080,0x1
c0015c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4a:	66 3d 1d 03          	cmp    ax,0x31d
c0015c4e:	75 06                	jne    c0015c56 <sendKeyboardToken(KeyboardToken)+0x242>
c0015c50:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c59:	66 3d 1c 03          	cmp    ax,0x31c
c0015c5d:	75 06                	jne    c0015c65 <sendKeyboardToken(KeyboardToken)+0x251>
c0015c5f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c68:	66 3d 1b 03          	cmp    ax,0x31b
c0015c6c:	75 06                	jne    c0015c74 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c6e:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c77:	66 3d 1e 03          	cmp    ax,0x31e
c0015c7b:	75 06                	jne    c0015c83 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c7d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c86:	66 3d 1f 03          	cmp    ax,0x31f
c0015c8a:	75 06                	jne    c0015c92 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c8c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c95:	66 3d 1a 03          	cmp    ax,0x31a
c0015c99:	75 06                	jne    c0015ca1 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015c9b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015ca1:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015ca5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ca8:	83 f0 01             	xor    eax,0x1
c0015cab:	84 c0                	test   al,al
c0015cad:	74 77                	je     c0015d26 <sendKeyboardToken(KeyboardToken)+0x312>
c0015caf:	a0 81 dd 02 c0       	mov    al,ds:0xc002dd81
c0015cb4:	84 c0                	test   al,al
c0015cb6:	74 41                	je     c0015cf9 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015cb8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015cbc:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015cc0:	74 2b                	je     c0015ced <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015cc2:	8b 15 84 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e084
c0015cc8:	89 d0                	mov    eax,edx
c0015cca:	c1 e0 02             	shl    eax,0x2
c0015ccd:	01 d0                	add    eax,edx
c0015ccf:	01 c0                	add    eax,eax
c0015cd1:	a3 84 e0 02 c0       	mov    ds:0xc002e084,eax
c0015cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd9:	0f b7 c0             	movzx  eax,ax
c0015cdc:	8d 50 d0             	lea    edx,[eax-0x30]
c0015cdf:	a1 84 e0 02 c0       	mov    eax,ds:0xc002e084
c0015ce4:	01 d0                	add    eax,edx
c0015ce6:	a3 84 e0 02 c0       	mov    ds:0xc002e084,eax
c0015ceb:	eb 6d                	jmp    c0015d5a <sendKeyboardToken(KeyboardToken)+0x346>
c0015ced:	c7 05 84 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e084,0x0
c0015cf7:	eb 61                	jmp    c0015d5a <sendKeyboardToken(KeyboardToken)+0x346>
c0015cf9:	a1 84 e0 02 c0       	mov    eax,ds:0xc002e084
c0015cfe:	85 c0                	test   eax,eax
c0015d00:	74 18                	je     c0015d1a <sendKeyboardToken(KeyboardToken)+0x306>
c0015d02:	a1 84 e0 02 c0       	mov    eax,ds:0xc002e084
c0015d07:	0f b6 c0             	movzx  eax,al
c0015d0a:	83 ec 0c             	sub    esp,0xc
c0015d0d:	50                   	push   eax
c0015d0e:	e8 95 fc ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015d13:	83 c4 10             	add    esp,0x10
c0015d16:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d1a:	c7 05 84 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e084,0x0
c0015d24:	eb 34                	jmp    c0015d5a <sendKeyboardToken(KeyboardToken)+0x346>
c0015d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d29:	66 3d 01 01          	cmp    ax,0x101
c0015d2d:	75 2b                	jne    c0015d5a <sendKeyboardToken(KeyboardToken)+0x346>
c0015d2f:	a1 84 e0 02 c0       	mov    eax,ds:0xc002e084
c0015d34:	85 c0                	test   eax,eax
c0015d36:	74 18                	je     c0015d50 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015d38:	a1 84 e0 02 c0       	mov    eax,ds:0xc002e084
c0015d3d:	0f b6 c0             	movzx  eax,al
c0015d40:	83 ec 0c             	sub    esp,0xc
c0015d43:	50                   	push   eax
c0015d44:	e8 5f fc ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d50:	c7 05 84 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e084,0x0
c0015d5a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d5d:	83 f0 01             	xor    eax,0x1
c0015d60:	84 c0                	test   al,al
c0015d62:	74 4c                	je     c0015db0 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d64:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d67:	83 f0 01             	xor    eax,0x1
c0015d6a:	84 c0                	test   al,al
c0015d6c:	74 42                	je     c0015db0 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d6e:	a0 80 dd 02 c0       	mov    al,ds:0xc002dd80
c0015d73:	83 f0 01             	xor    eax,0x1
c0015d76:	84 c0                	test   al,al
c0015d78:	74 36                	je     c0015db0 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d7d:	66 83 f8 1f          	cmp    ax,0x1f
c0015d81:	76 09                	jbe    c0015d8c <sendKeyboardToken(KeyboardToken)+0x378>
c0015d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d86:	66 83 f8 7e          	cmp    ax,0x7e
c0015d8a:	76 12                	jbe    c0015d9e <sendKeyboardToken(KeyboardToken)+0x38a>
c0015d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8f:	66 83 f8 0a          	cmp    ax,0xa
c0015d93:	74 09                	je     c0015d9e <sendKeyboardToken(KeyboardToken)+0x38a>
c0015d95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d98:	66 83 f8 08          	cmp    ax,0x8
c0015d9c:	75 12                	jne    c0015db0 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da1:	0f b6 c0             	movzx  eax,al
c0015da4:	83 ec 0c             	sub    esp,0xc
c0015da7:	50                   	push   eax
c0015da8:	e8 fb fb ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015db3:	83 f0 01             	xor    eax,0x1
c0015db6:	84 c0                	test   al,al
c0015db8:	74 4f                	je     c0015e09 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dba:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015dbd:	83 f0 01             	xor    eax,0x1
c0015dc0:	84 c0                	test   al,al
c0015dc2:	74 45                	je     c0015e09 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dc4:	a0 80 dd 02 c0       	mov    al,ds:0xc002dd80
c0015dc9:	84 c0                	test   al,al
c0015dcb:	74 3c                	je     c0015e09 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd0:	66 83 f8 3f          	cmp    ax,0x3f
c0015dd4:	76 33                	jbe    c0015e09 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd9:	66 83 f8 7f          	cmp    ax,0x7f
c0015ddd:	77 2a                	ja     c0015e09 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de2:	88 c2                	mov    dl,al
c0015de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de7:	66 83 f8 5f          	cmp    ax,0x5f
c0015deb:	76 04                	jbe    c0015df1 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015ded:	b0 20                	mov    al,0x20
c0015def:	eb 02                	jmp    c0015df3 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015df1:	b0 00                	mov    al,0x0
c0015df3:	29 c2                	sub    edx,eax
c0015df5:	88 d0                	mov    al,dl
c0015df7:	83 e8 40             	sub    eax,0x40
c0015dfa:	0f b6 c0             	movzx  eax,al
c0015dfd:	83 ec 0c             	sub    esp,0xc
c0015e00:	50                   	push   eax
c0015e01:	e8 a2 fb ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0c:	66 3d 00 03          	cmp    ax,0x300
c0015e10:	75 0f                	jne    c0015e21 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e12:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e15:	83 f0 01             	xor    eax,0x1
c0015e18:	84 c0                	test   al,al
c0015e1a:	74 05                	je     c0015e21 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e1c:	e8 5c af ff ff       	call   c0010d7d <doTerminalCycle()>
c0015e21:	90                   	nop
c0015e22:	c9                   	leave  
c0015e23:	c3                   	ret    

c0015e24 <clearInternalKeybuffer(VgaText*)>:
c0015e24:	55                   	push   ebp
c0015e25:	89 e5                	mov    ebp,esp
c0015e27:	83 ec 08             	sub    esp,0x8
c0015e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2d:	05 34 11 00 00       	add    eax,0x1134
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	50                   	push   eax
c0015e36:	e8 59 a9 fe ff       	call   c0000794 <strlen>
c0015e3b:	83 c4 10             	add    esp,0x10
c0015e3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e41:	81 c2 34 11 00 00    	add    edx,0x1134
c0015e47:	83 ec 04             	sub    esp,0x4
c0015e4a:	50                   	push   eax
c0015e4b:	6a 00                	push   0x0
c0015e4d:	52                   	push   edx
c0015e4e:	e8 25 a9 fe ff       	call   c0000778 <memset>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	90                   	nop
c0015e57:	c9                   	leave  
c0015e58:	c3                   	ret    

c0015e59 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e59:	55                   	push   ebp
c0015e5a:	89 e5                	mov    ebp,esp
c0015e5c:	83 ec 18             	sub    esp,0x18
c0015e5f:	fb                   	sti    
c0015e60:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015e67:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e6b:	0f 84 8a 00 00 00    	je     c0015efb <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e74:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015e7a:	84 c0                	test   al,al
c0015e7c:	75 11                	jne    c0015e8f <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015e7e:	e8 d3 77 00 00       	call   c001d656 <lockScheduler()>
c0015e83:	e8 0a 7b 00 00       	call   c001d992 <schedule()>
c0015e88:	e8 cb 77 00 00       	call   c001d658 <unlockScheduler()>
c0015e8d:	eb e2                	jmp    c0015e71 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015e8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e92:	8d 50 01             	lea    edx,[eax+0x1]
c0015e95:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e9b:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015ea1:	88 10                	mov    BYTE PTR [eax],dl
c0015ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea6:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015eac:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb2:	05 34 11 00 00       	add    eax,0x1134
c0015eb7:	83 ec 0c             	sub    esp,0xc
c0015eba:	50                   	push   eax
c0015ebb:	e8 d4 a8 fe ff       	call   c0000794 <strlen>
c0015ec0:	83 c4 10             	add    esp,0x10
c0015ec3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ec6:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ecc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ecf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ed2:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ed8:	83 ec 04             	sub    esp,0x4
c0015edb:	50                   	push   eax
c0015edc:	51                   	push   ecx
c0015edd:	52                   	push   edx
c0015ede:	e8 99 a7 fe ff       	call   c000067c <memmove>
c0015ee3:	83 c4 10             	add    esp,0x10
c0015ee6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015ee9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015eec:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015ef0:	0f 85 71 ff ff ff    	jne    c0015e67 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015ef6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ef9:	eb 03                	jmp    c0015efe <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015efb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015efe:	c9                   	leave  
c0015eff:	c3                   	ret    

c0015f00 <Keyboard::Keyboard(char const*)>:
c0015f00:	83 ec 0c             	sub    esp,0xc
c0015f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f07:	83 ec 08             	sub    esp,0x8
c0015f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f0e:	50                   	push   eax
c0015f0f:	e8 0c e2 ff ff       	call   c0014120 <Device::Device(char const*)>
c0015f14:	83 c4 10             	add    esp,0x10
c0015f17:	ba 68 a9 02 c0       	mov    edx,0xc002a968
c0015f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f20:	89 10                	mov    DWORD PTR [eax],edx
c0015f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f26:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015f30:	c6 05 64 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc64,0x1
c0015f37:	90                   	nop
c0015f38:	83 c4 0c             	add    esp,0xc
c0015f3b:	c3                   	ret    

c0015f3c <Keyboard::~Keyboard()>:
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	ba 68 a9 02 c0       	mov    edx,0xc002a968
c0015f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f48:	89 10                	mov    DWORD PTR [eax],edx
c0015f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4e:	83 ec 0c             	sub    esp,0xc
c0015f51:	50                   	push   eax
c0015f52:	e8 ab de ff ff       	call   c0013e02 <Device::~Device()>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	90                   	nop
c0015f5b:	83 c4 0c             	add    esp,0xc
c0015f5e:	c3                   	ret    
c0015f5f:	90                   	nop

c0015f60 <Keyboard::~Keyboard()>:
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	83 ec 0c             	sub    esp,0xc
c0015f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f6a:	e8 cd ff ff ff       	call   c0015f3c <Keyboard::~Keyboard()>
c0015f6f:	83 c4 10             	add    esp,0x10
c0015f72:	83 ec 08             	sub    esp,0x8
c0015f75:	68 5c 01 00 00       	push   0x15c
c0015f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f7e:	e8 a6 ca ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0015f83:	83 c4 10             	add    esp,0x10
c0015f86:	83 c4 0c             	add    esp,0xc
c0015f89:	c3                   	ret    

c0015f8a <LogicalDisk::close(int, int, void*)>:
c0015f8a:	83 c8 ff             	or     eax,0xffffffff
c0015f8d:	c3                   	ret    

c0015f8e <LogicalDisk::~LogicalDisk()>:
c0015f8e:	83 ec 0c             	sub    esp,0xc
c0015f91:	ba 18 aa 02 c0       	mov    edx,0xc002aa18
c0015f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f9a:	89 10                	mov    DWORD PTR [eax],edx
c0015f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa0:	83 ec 0c             	sub    esp,0xc
c0015fa3:	50                   	push   eax
c0015fa4:	e8 59 de ff ff       	call   c0013e02 <Device::~Device()>
c0015fa9:	83 c4 10             	add    esp,0x10
c0015fac:	90                   	nop
c0015fad:	83 c4 0c             	add    esp,0xc
c0015fb0:	c3                   	ret    
c0015fb1:	90                   	nop

c0015fb2 <LogicalDisk::~LogicalDisk()>:
c0015fb2:	83 ec 0c             	sub    esp,0xc
c0015fb5:	83 ec 0c             	sub    esp,0xc
c0015fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fbc:	e8 cd ff ff ff       	call   c0015f8e <LogicalDisk::~LogicalDisk()>
c0015fc1:	83 c4 10             	add    esp,0x10
c0015fc4:	83 ec 08             	sub    esp,0x8
c0015fc7:	68 74 01 00 00       	push   0x174
c0015fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fd0:	e8 54 ca ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0015fd5:	83 c4 10             	add    esp,0x10
c0015fd8:	83 c4 0c             	add    esp,0xc
c0015fdb:	c3                   	ret    

c0015fdc <LogicalDisk::open(int, int, void*)>:
c0015fdc:	83 ec 18             	sub    esp,0x18
c0015fdf:	68 94 a9 02 c0       	push   0xc002a994
c0015fe4:	e8 04 40 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0015fe9:	83 c8 ff             	or     eax,0xffffffff
c0015fec:	83 c4 1c             	add    esp,0x1c
c0015fef:	c3                   	ret    

c0015ff0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ff0:	53                   	push   ebx
c0015ff1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ffd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016003:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016009:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001600f:	77 10                	ja     c0016021 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016011:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016017:	89 d3                	mov    ebx,edx
c0016019:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001601f:	72 05                	jb     c0016026 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016021:	83 c8 ff             	or     eax,0xffffffff
c0016024:	89 c2                	mov    edx,eax
c0016026:	5b                   	pop    ebx
c0016027:	c3                   	ret    

c0016028 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016028:	56                   	push   esi
c0016029:	83 c8 ff             	or     eax,0xffffffff
c001602c:	53                   	push   ebx
c001602d:	89 c2                	mov    edx,eax
c001602f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016033:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016037:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001603b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016041:	77 27                	ja     c001606a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016043:	89 d8                	mov    eax,ebx
c0016045:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001604b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016051:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016056:	89 c2                	mov    edx,eax
c0016058:	73 10                	jae    c001606a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001605a:	89 c8                	mov    eax,ecx
c001605c:	89 da                	mov    edx,ebx
c001605e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016064:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001606a:	5b                   	pop    ebx
c001606b:	5e                   	pop    esi
c001606c:	c3                   	ret    
c001606d:	90                   	nop

c001606e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001606e:	83 ec 1c             	sub    esp,0x1c
c0016071:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016079:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001607d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016081:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016085:	89 04 24             	mov    DWORD PTR [esp],eax
c0016088:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001608c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016094:	83 ec 08             	sub    esp,0x8
c0016097:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001609b:	50                   	push   eax
c001609c:	e8 7f e0 ff ff       	call   c0014120 <Device::Device(char const*)>
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	ba 18 aa 02 c0       	mov    edx,0xc002aa18
c00160a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160ad:	89 10                	mov    DWORD PTR [eax],edx
c00160af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160be:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160c9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00160d3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160df:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00160e5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00160eb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00160f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160f6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00160fc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016106:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001610a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016114:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001611e:	90                   	nop
c001611f:	83 c4 1c             	add    esp,0x1c
c0016122:	c3                   	ret    
c0016123:	90                   	nop

c0016124 <LogicalDisk::assignDriveLetter()>:
c0016124:	55                   	push   ebp
c0016125:	57                   	push   edi
c0016126:	56                   	push   esi
c0016127:	53                   	push   ebx
c0016128:	83 ec 14             	sub    esp,0x14
c001612b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001612f:	8b 3d a0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0a0
c0016135:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001613b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001613f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016145:	8b 3d a4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0a4
c001614b:	3c 01                	cmp    al,0x1
c001614d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016151:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016155:	19 c0                	sbb    eax,eax
c0016157:	83 e0 02             	and    eax,0x2
c001615a:	83 c0 41             	add    eax,0x41
c001615d:	0f be e8             	movsx  ebp,al
c0016160:	3c 43                	cmp    al,0x43
c0016162:	75 10                	jne    c0016174 <LogicalDisk::assignDriveLetter()+0x50>
c0016164:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001616b:	75 5d                	jne    c00161ca <LogicalDisk::assignDriveLetter()+0xa6>
c001616d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016172:	75 56                	jne    c00161ca <LogicalDisk::assignDriveLetter()+0xa6>
c0016174:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016177:	ba 01 00 00 00       	mov    edx,0x1
c001617c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016180:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016184:	d3 e2                	shl    edx,cl
c0016186:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001618a:	89 d7                	mov    edi,edx
c001618c:	89 d6                	mov    esi,edx
c001618e:	c1 ff 1f             	sar    edi,0x1f
c0016191:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016195:	21 f9                	and    ecx,edi
c0016197:	09 d1                	or     ecx,edx
c0016199:	75 2f                	jne    c00161ca <LogicalDisk::assignDriveLetter()+0xa6>
c001619b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001619f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00161a3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00161a9:	09 f2                	or     edx,esi
c00161ab:	89 15 a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,edx
c00161b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161b5:	09 fa                	or     edx,edi
c00161b7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00161bb:	89 15 a4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a4,edx
c00161c1:	89 1c bd c0 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1f40],ebx
c00161c8:	eb 08                	jmp    c00161d2 <LogicalDisk::assignDriveLetter()+0xae>
c00161ca:	45                   	inc    ebp
c00161cb:	40                   	inc    eax
c00161cc:	3c 5b                	cmp    al,0x5b
c00161ce:	75 90                	jne    c0016160 <LogicalDisk::assignDriveLetter()+0x3c>
c00161d0:	31 c0                	xor    eax,eax
c00161d2:	83 c4 14             	add    esp,0x14
c00161d5:	5b                   	pop    ebx
c00161d6:	5e                   	pop    esi
c00161d7:	5f                   	pop    edi
c00161d8:	5d                   	pop    ebp
c00161d9:	c3                   	ret    

c00161da <LogicalDisk::mount()>:
c00161da:	56                   	push   esi
c00161db:	53                   	push   ebx
c00161dc:	51                   	push   ecx
c00161dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161e1:	8b 1d 28 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc28
c00161e7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00161f1:	85 db                	test   ebx,ebx
c00161f3:	74 50                	je     c0016245 <LogicalDisk::mount()+0x6b>
c00161f5:	e8 47 74 00 00       	call   c001d641 <getIRQNestingLevel()>
c00161fa:	52                   	push   edx
c00161fb:	52                   	push   edx
c00161fc:	50                   	push   eax
c00161fd:	68 b8 a9 02 c0       	push   0xc002a9b8
c0016202:	e8 02 c9 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0016207:	83 c4 0c             	add    esp,0xc
c001620a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016211:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016213:	83 e8 41             	sub    eax,0x41
c0016216:	50                   	push   eax
c0016217:	56                   	push   esi
c0016218:	53                   	push   ebx
c0016219:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	84 c0                	test   al,al
c0016221:	74 08                	je     c001622b <LogicalDisk::mount()+0x51>
c0016223:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016229:	eb 1c                	jmp    c0016247 <LogicalDisk::mount()+0x6d>
c001622b:	e8 11 74 00 00       	call   c001d641 <getIRQNestingLevel()>
c0016230:	51                   	push   ecx
c0016231:	51                   	push   ecx
c0016232:	50                   	push   eax
c0016233:	68 d3 a9 02 c0       	push   0xc002a9d3
c0016238:	e8 cc c8 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001623d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	eb ac                	jmp    c00161f1 <LogicalDisk::mount()+0x17>
c0016245:	31 c0                	xor    eax,eax
c0016247:	5a                   	pop    edx
c0016248:	5b                   	pop    ebx
c0016249:	5e                   	pop    esi
c001624a:	c3                   	ret    
c001624b:	90                   	nop

c001624c <LogicalDisk::unmount()>:
c001624c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016250:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001625a:	c3                   	ret    
c001625b:	90                   	nop

c001625c <LogicalDisk::eject()>:
c001625c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016260:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016266:	8b 10                	mov    edx,DWORD PTR [eax]
c0016268:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001626c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001626f:	90                   	nop

c0016270 <LogicalDisk::unassignDriveLetter()>:
c0016270:	57                   	push   edi
c0016271:	56                   	push   esi
c0016272:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016276:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001627d:	84 c9                	test   cl,cl
c001627f:	75 0f                	jne    c0016290 <LogicalDisk::unassignDriveLetter()+0x20>
c0016281:	c7 44 24 0c ee a9 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a9ee
c0016289:	5e                   	pop    esi
c001628a:	5f                   	pop    edi
c001628b:	e9 5d 3d 00 00       	jmp    c0019fed <Krnl::panic(char const*)>
c0016290:	83 e9 41             	sub    ecx,0x41
c0016293:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001629a:	b8 01 00 00 00       	mov    eax,0x1
c001629f:	c7 04 8d c0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1f40],0x0
c00162aa:	d3 e0                	shl    eax,cl
c00162ac:	89 c7                	mov    edi,eax
c00162ae:	f7 d0                	not    eax
c00162b0:	c1 ff 1f             	sar    edi,0x1f
c00162b3:	21 05 a0 e0 02 c0    	and    DWORD PTR ds:0xc002e0a0,eax
c00162b9:	89 fe                	mov    esi,edi
c00162bb:	f7 d6                	not    esi
c00162bd:	21 35 a4 e0 02 c0    	and    DWORD PTR ds:0xc002e0a4,esi
c00162c3:	5e                   	pop    esi
c00162c4:	5f                   	pop    edi
c00162c5:	c3                   	ret    

c00162c6 <LogicalDisk::read(unsigned long long, int, void*)>:
c00162c6:	57                   	push   edi
c00162c7:	56                   	push   esi
c00162c8:	53                   	push   ebx
c00162c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162d9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162df:	77 41                	ja     c0016322 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00162e1:	99                   	cdq    
c00162e2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162e8:	01 c8                	add    eax,ecx
c00162ea:	11 da                	adc    edx,ebx
c00162ec:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162f2:	19 d7                	sbb    edi,edx
c00162f4:	72 33                	jb     c0016329 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00162f6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00162fc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016302:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016306:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001630a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016310:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016316:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001631a:	5b                   	pop    ebx
c001631b:	5e                   	pop    esi
c001631c:	5f                   	pop    edi
c001631d:	e9 b0 0a 00 00       	jmp    c0016dd2 <VCache::read(unsigned long long, int, void*)>
c0016322:	b8 05 00 00 00       	mov    eax,0x5
c0016327:	eb 05                	jmp    c001632e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016329:	b8 07 00 00 00       	mov    eax,0x7
c001632e:	5b                   	pop    ebx
c001632f:	5e                   	pop    esi
c0016330:	5f                   	pop    edi
c0016331:	c3                   	ret    

c0016332 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016332:	57                   	push   edi
c0016333:	56                   	push   esi
c0016334:	53                   	push   ebx
c0016335:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016339:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001633d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016345:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001634b:	77 41                	ja     c001638e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001634d:	99                   	cdq    
c001634e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016354:	01 c8                	add    eax,ecx
c0016356:	11 da                	adc    edx,ebx
c0016358:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001635e:	19 d7                	sbb    edi,edx
c0016360:	72 33                	jb     c0016395 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016362:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016368:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001636e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016372:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016376:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001637c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016386:	5b                   	pop    ebx
c0016387:	5e                   	pop    esi
c0016388:	5f                   	pop    edi
c0016389:	e9 4e 09 00 00       	jmp    c0016cdc <VCache::write(unsigned long long, int, void*)>
c001638e:	b8 05 00 00 00       	mov    eax,0x5
c0016393:	eb 05                	jmp    c001639a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016395:	b8 07 00 00 00       	mov    eax,0x7
c001639a:	5b                   	pop    ebx
c001639b:	5e                   	pop    esi
c001639c:	5f                   	pop    edi
c001639d:	c3                   	ret    

c001639e <Mouse::Mouse(char const*)>:
c001639e:	83 ec 0c             	sub    esp,0xc
c00163a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a5:	83 ec 08             	sub    esp,0x8
c00163a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ac:	50                   	push   eax
c00163ad:	e8 6e dd ff ff       	call   c0014120 <Device::Device(char const*)>
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	ba 44 aa 02 c0       	mov    edx,0xc002aa44
c00163ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163be:	89 10                	mov    DWORD PTR [eax],edx
c00163c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c4:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00163ce:	90                   	nop
c00163cf:	83 c4 0c             	add    esp,0xc
c00163d2:	c3                   	ret    
c00163d3:	90                   	nop

c00163d4 <Mouse::~Mouse()>:
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	ba 44 aa 02 c0       	mov    edx,0xc002aa44
c00163dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e0:	89 10                	mov    DWORD PTR [eax],edx
c00163e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e6:	83 ec 0c             	sub    esp,0xc
c00163e9:	50                   	push   eax
c00163ea:	e8 13 da ff ff       	call   c0013e02 <Device::~Device()>
c00163ef:	83 c4 10             	add    esp,0x10
c00163f2:	90                   	nop
c00163f3:	83 c4 0c             	add    esp,0xc
c00163f6:	c3                   	ret    
c00163f7:	90                   	nop

c00163f8 <Mouse::~Mouse()>:
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	83 ec 0c             	sub    esp,0xc
c00163fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016402:	e8 cd ff ff ff       	call   c00163d4 <Mouse::~Mouse()>
c0016407:	83 c4 10             	add    esp,0x10
c001640a:	83 ec 08             	sub    esp,0x8
c001640d:	68 58 01 00 00       	push   0x158
c0016412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016416:	e8 0e c6 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c001641b:	83 c4 10             	add    esp,0x10
c001641e:	83 c4 0c             	add    esp,0xc
c0016421:	c3                   	ret    

c0016422 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016422:	55                   	push   ebp
c0016423:	57                   	push   edi
c0016424:	56                   	push   esi
c0016425:	53                   	push   ebx
c0016426:	81 ec 28 01 00 00    	sub    esp,0x128
c001642c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016433:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001643a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016441:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016448:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001644c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016450:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016457:	e8 c0 dd ff ff       	call   c001421c <Device::getName()>
c001645c:	5a                   	pop    edx
c001645d:	59                   	pop    ecx
c001645e:	50                   	push   eax
c001645f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016463:	55                   	push   ebp
c0016464:	e8 cb a3 fe ff       	call   c0000834 <strcpy>
c0016469:	5b                   	pop    ebx
c001646a:	58                   	pop    eax
c001646b:	68 68 aa 02 c0       	push   0xc002aa68
c0016470:	55                   	push   ebp
c0016471:	e8 fe a4 fe ff       	call   c0000974 <strcat>
c0016476:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001647d:	e8 b8 93 ff ff       	call   c000f83a <malloc>
c0016482:	83 c4 0c             	add    esp,0xc
c0016485:	89 c3                	mov    ebx,eax
c0016487:	57                   	push   edi
c0016488:	56                   	push   esi
c0016489:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001648d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016491:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016498:	55                   	push   ebp
c0016499:	50                   	push   eax
c001649a:	e8 cf fb ff ff       	call   c001606e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001649f:	83 c4 14             	add    esp,0x14
c00164a2:	53                   	push   ebx
c00164a3:	e8 7c fc ff ff       	call   c0016124 <LogicalDisk::assignDriveLetter()>
c00164a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164ab:	89 c6                	mov    esi,eax
c00164ad:	e8 28 fd ff ff       	call   c00161da <LogicalDisk::mount()>
c00164b2:	58                   	pop    eax
c00164b3:	5a                   	pop    edx
c00164b4:	53                   	push   ebx
c00164b5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164bc:	e8 6f da ff ff       	call   c0013f30 <Device::addChild(Device*)>
c00164c1:	59                   	pop    ecx
c00164c2:	89 f0                	mov    eax,esi
c00164c4:	5b                   	pop    ebx
c00164c5:	0f be f0             	movsx  esi,al
c00164c8:	56                   	push   esi
c00164c9:	68 73 aa 02 c0       	push   0xc002aa73
c00164ce:	e8 36 c6 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00164d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00164d9:	5b                   	pop    ebx
c00164da:	5e                   	pop    esi
c00164db:	5f                   	pop    edi
c00164dc:	5d                   	pop    ebp
c00164dd:	c3                   	ret    

c00164de <createPartitionsForDisk(PhysicalDisk*)>:
c00164de:	55                   	push   ebp
c00164df:	57                   	push   edi
c00164e0:	56                   	push   esi
c00164e1:	53                   	push   ebx
c00164e2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00164e8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00164ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00164f5:	3d 00 02 00 00       	cmp    eax,0x200
c00164fa:	74 27                	je     c0016523 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00164fc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016502:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016508:	83 ec 10             	sub    esp,0x10
c001650b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001650f:	99                   	cdq    
c0016510:	c1 e6 0a             	shl    esi,0xa
c0016513:	52                   	push   edx
c0016514:	89 fd                	mov    ebp,edi
c0016516:	50                   	push   eax
c0016517:	55                   	push   ebp
c0016518:	56                   	push   esi
c0016519:	e8 3e fd 00 00       	call   c002625c <__udivdi3>
c001651e:	e9 b1 00 00 00       	jmp    c00165d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016523:	83 ec 0c             	sub    esp,0xc
c0016526:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016528:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001652c:	56                   	push   esi
c001652d:	6a 01                	push   0x1
c001652f:	6a 00                	push   0x0
c0016531:	6a 00                	push   0x0
c0016533:	53                   	push   ebx
c0016534:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016537:	83 c4 20             	add    esp,0x20
c001653a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016542:	75 0a                	jne    c001654e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016544:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001654c:	74 2c                	je     c001657a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001654e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016554:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001655a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016560:	83 ec 10             	sub    esp,0x10
c0016563:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016567:	89 f7                	mov    edi,esi
c0016569:	c1 e0 0a             	shl    eax,0xa
c001656c:	c1 ff 1f             	sar    edi,0x1f
c001656f:	57                   	push   edi
c0016570:	56                   	push   esi
c0016571:	52                   	push   edx
c0016572:	50                   	push   eax
c0016573:	e8 e4 fc 00 00       	call   c002625c <__udivdi3>
c0016578:	eb 5a                	jmp    c00165d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001657a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016581:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016588:	83 e1 7f             	and    ecx,0x7f
c001658b:	83 e0 7f             	and    eax,0x7f
c001658e:	01 c1                	add    ecx,eax
c0016590:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016597:	83 e0 7f             	and    eax,0x7f
c001659a:	01 c1                	add    ecx,eax
c001659c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165a3:	83 e0 7f             	and    eax,0x7f
c00165a6:	00 c1                	add    cl,al
c00165a8:	74 41                	je     c00165eb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165bc:	83 ec 10             	sub    esp,0x10
c00165bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165c3:	89 f7                	mov    edi,esi
c00165c5:	c1 e0 0a             	shl    eax,0xa
c00165c8:	c1 ff 1f             	sar    edi,0x1f
c00165cb:	57                   	push   edi
c00165cc:	56                   	push   esi
c00165cd:	52                   	push   edx
c00165ce:	50                   	push   eax
c00165cf:	e8 88 fc 00 00       	call   c002625c <__udivdi3>
c00165d4:	83 c4 14             	add    esp,0x14
c00165d7:	52                   	push   edx
c00165d8:	50                   	push   eax
c00165d9:	6a 00                	push   0x0
c00165db:	6a 00                	push   0x0
c00165dd:	53                   	push   ebx
c00165de:	e8 3f fe ff ff       	call   c0016422 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00165e3:	83 c4 20             	add    esp,0x20
c00165e6:	e9 79 01 00 00       	jmp    c0016764 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00165eb:	89 f0                	mov    eax,esi
c00165ed:	31 f6                	xor    esi,esi
c00165ef:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00165f6:	75 02                	jne    c00165fa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00165f8:	89 f1                	mov    ecx,esi
c00165fa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016601:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016608:	c1 e2 08             	shl    edx,0x8
c001660b:	c1 e7 10             	shl    edi,0x10
c001660e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016616:	09 fa                	or     edx,edi
c0016618:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016620:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016627:	83 c0 10             	add    eax,0x10
c001662a:	09 fa                	or     edx,edi
c001662c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016633:	c1 e7 18             	shl    edi,0x18
c0016636:	09 fa                	or     edx,edi
c0016638:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001663f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016643:	c1 e7 10             	shl    edi,0x10
c0016646:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001664d:	c1 e2 08             	shl    edx,0x8
c0016650:	09 fa                	or     edx,edi
c0016652:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016659:	09 fa                	or     edx,edi
c001665b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016662:	c1 e7 18             	shl    edi,0x18
c0016665:	09 fa                	or     edx,edi
c0016667:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001666b:	46                   	inc    esi
c001666c:	83 fe 04             	cmp    esi,0x4
c001666f:	0f 85 7a ff ff ff    	jne    c00165ef <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016679:	83 f0 01             	xor    eax,0x1
c001667c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016680:	75 57                	jne    c00166d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016682:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016686:	83 f0 01             	xor    eax,0x1
c0016689:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001668d:	75 4a                	jne    c00166d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001668f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016693:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001669b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166a3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166a9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166af:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166b9:	89 f7                	mov    edi,esi
c00166bb:	c1 e0 0a             	shl    eax,0xa
c00166be:	c1 ff 1f             	sar    edi,0x1f
c00166c1:	57                   	push   edi
c00166c2:	56                   	push   esi
c00166c3:	52                   	push   edx
c00166c4:	50                   	push   eax
c00166c5:	e8 92 fb 00 00       	call   c002625c <__udivdi3>
c00166ca:	83 c4 10             	add    esp,0x10
c00166cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166d5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00166d9:	84 c9                	test   cl,cl
c00166db:	74 53                	je     c0016730 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00166dd:	0f b6 c9             	movzx  ecx,cl
c00166e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166ec:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00166f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166f8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00166fc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016700:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016704:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001670c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016710:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016714:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016718:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001671c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016720:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016724:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016728:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001672c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016730:	31 ed                	xor    ebp,ebp
c0016732:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016736:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001673a:	89 f8                	mov    eax,edi
c001673c:	09 f0                	or     eax,esi
c001673e:	74 1e                	je     c001675e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016740:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016744:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016748:	89 d1                	mov    ecx,edx
c001674a:	09 c1                	or     ecx,eax
c001674c:	74 10                	je     c001675e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001674e:	83 ec 0c             	sub    esp,0xc
c0016751:	57                   	push   edi
c0016752:	56                   	push   esi
c0016753:	52                   	push   edx
c0016754:	50                   	push   eax
c0016755:	53                   	push   ebx
c0016756:	e8 c7 fc ff ff       	call   c0016422 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001675b:	83 c4 20             	add    esp,0x20
c001675e:	45                   	inc    ebp
c001675f:	83 fd 04             	cmp    ebp,0x4
c0016762:	75 ce                	jne    c0016732 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016764:	81 c4 5c 02 00 00    	add    esp,0x25c
c001676a:	5b                   	pop    ebx
c001676b:	5e                   	pop    esi
c001676c:	5f                   	pop    edi
c001676d:	5d                   	pop    ebp
c001676e:	c3                   	ret    
c001676f:	90                   	nop

c0016770 <Serial::Serial(char const*)>:
c0016770:	83 ec 0c             	sub    esp,0xc
c0016773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016777:	83 ec 08             	sub    esp,0x8
c001677a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001677e:	50                   	push   eax
c001677f:	e8 9c d9 ff ff       	call   c0014120 <Device::Device(char const*)>
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	ba a0 aa 02 c0       	mov    edx,0xc002aaa0
c001678c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016790:	89 10                	mov    DWORD PTR [eax],edx
c0016792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016796:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167a0:	90                   	nop
c00167a1:	83 c4 0c             	add    esp,0xc
c00167a4:	c3                   	ret    
c00167a5:	90                   	nop

c00167a6 <Serial::~Serial()>:
c00167a6:	83 ec 0c             	sub    esp,0xc
c00167a9:	ba a0 aa 02 c0       	mov    edx,0xc002aaa0
c00167ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b2:	89 10                	mov    DWORD PTR [eax],edx
c00167b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	50                   	push   eax
c00167bc:	e8 41 d6 ff ff       	call   c0013e02 <Device::~Device()>
c00167c1:	83 c4 10             	add    esp,0x10
c00167c4:	90                   	nop
c00167c5:	83 c4 0c             	add    esp,0xc
c00167c8:	c3                   	ret    
c00167c9:	90                   	nop

c00167ca <Serial::~Serial()>:
c00167ca:	83 ec 0c             	sub    esp,0xc
c00167cd:	83 ec 0c             	sub    esp,0xc
c00167d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167d4:	e8 cd ff ff ff       	call   c00167a6 <Serial::~Serial()>
c00167d9:	83 c4 10             	add    esp,0x10
c00167dc:	83 ec 08             	sub    esp,0x8
c00167df:	68 58 01 00 00       	push   0x158
c00167e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e8:	e8 3c c2 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	83 c4 0c             	add    esp,0xc
c00167f3:	c3                   	ret    

c00167f4 <Timer::Timer(char const*)>:
c00167f4:	83 ec 0c             	sub    esp,0xc
c00167f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167fb:	83 ec 08             	sub    esp,0x8
c00167fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016802:	50                   	push   eax
c0016803:	e8 18 d9 ff ff       	call   c0014120 <Device::Device(char const*)>
c0016808:	83 c4 10             	add    esp,0x10
c001680b:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0016810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016814:	89 10                	mov    DWORD PTR [eax],edx
c0016816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016824:	90                   	nop
c0016825:	83 c4 0c             	add    esp,0xc
c0016828:	c3                   	ret    
c0016829:	90                   	nop

c001682a <Timer::~Timer()>:
c001682a:	83 ec 0c             	sub    esp,0xc
c001682d:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0016832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016836:	89 10                	mov    DWORD PTR [eax],edx
c0016838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	50                   	push   eax
c0016840:	e8 bd d5 ff ff       	call   c0013e02 <Device::~Device()>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	90                   	nop
c0016849:	83 c4 0c             	add    esp,0xc
c001684c:	c3                   	ret    
c001684d:	90                   	nop

c001684e <Timer::~Timer()>:
c001684e:	83 ec 0c             	sub    esp,0xc
c0016851:	83 ec 0c             	sub    esp,0xc
c0016854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016858:	e8 cd ff ff ff       	call   c001682a <Timer::~Timer()>
c001685d:	83 c4 10             	add    esp,0x10
c0016860:	83 ec 08             	sub    esp,0x8
c0016863:	68 5c 01 00 00       	push   0x15c
c0016868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001686c:	e8 b8 c1 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	83 c4 0c             	add    esp,0xc
c0016877:	c3                   	ret    

c0016878 <Timer::read()>:
c0016878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001687c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016882:	c3                   	ret    

c0016883 <timerHandler(unsigned long long)>:
c0016883:	55                   	push   ebp
c0016884:	57                   	push   edi
c0016885:	56                   	push   esi
c0016886:	53                   	push   ebx
c0016887:	83 ec 0c             	sub    esp,0xc
c001688a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001688e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016892:	01 35 30 e1 02 c0    	add    DWORD PTR ds:0xc002e130,esi
c0016898:	11 3d 34 e1 02 c0    	adc    DWORD PTR ds:0xc002e134,edi
c001689e:	80 3d ad da 02 c0 00 	cmp    BYTE PTR ds:0xc002daad,0x0
c00168a5:	0f 84 07 01 00 00    	je     c00169b2 <timerHandler(unsigned long long)+0x12f>
c00168ab:	e8 cd 6d 00 00       	call   c001d67d <lockStuff()>
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	68 fc 0f 03 c0       	push   0xc0030ffc
c00168b8:	e8 11 1a 01 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168bd:	c7 04 24 fc 0f 03 c0 	mov    DWORD PTR [esp],0xc0030ffc
c00168c4:	89 c3                	mov    ebx,eax
c00168c6:	e8 0b 1a 01 00       	call   c00282d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168cb:	83 c4 10             	add    esp,0x10
c00168ce:	84 c0                	test   al,al
c00168d0:	74 60                	je     c0016932 <timerHandler(unsigned long long)+0xaf>
c00168d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168d8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00168db:	85 c0                	test   eax,eax
c00168dd:	0f 85 91 00 00 00    	jne    c0016974 <timerHandler(unsigned long long)+0xf1>
c00168e3:	e9 be 00 00 00       	jmp    c00169a6 <timerHandler(unsigned long long)+0x123>
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	55                   	push   ebp
c00168ec:	e8 7d 73 00 00       	call   c001dc6e <unblockTask(ThreadControlBlock*)>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	39 eb                	cmp    ebx,ebp
c00168f6:	75 12                	jne    c001690a <timerHandler(unsigned long long)+0x87>
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	68 fc 0f 03 c0       	push   0xc0030ffc
c0016900:	e8 c9 19 01 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016905:	89 c3                	mov    ebx,eax
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	83 ec 0c             	sub    esp,0xc
c001690d:	68 fc 0f 03 c0       	push   0xc0030ffc
c0016912:	e8 bf 19 01 00       	call   c00282d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	84 c0                	test   al,al
c001691c:	75 b4                	jne    c00168d2 <timerHandler(unsigned long long)+0x4f>
c001691e:	83 ec 0c             	sub    esp,0xc
c0016921:	68 fc 0f 03 c0       	push   0xc0030ffc
c0016926:	e8 a3 19 01 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	39 d8                	cmp    eax,ebx
c0016930:	74 a0                	je     c00168d2 <timerHandler(unsigned long long)+0x4f>
c0016932:	83 ec 0c             	sub    esp,0xc
c0016935:	68 fc 0f 03 c0       	push   0xc0030ffc
c001693a:	e8 8f 19 01 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001693f:	c7 04 24 fc 0f 03 c0 	mov    DWORD PTR [esp],0xc0030ffc
c0016946:	89 c5                	mov    ebp,eax
c0016948:	e8 a5 19 01 00       	call   c00282f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001694d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016950:	83 c4 10             	add    esp,0x10
c0016953:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016956:	39 15 30 e1 02 c0    	cmp    DWORD PTR ds:0xc002e130,edx
c001695c:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0016961:	19 c8                	sbb    eax,ecx
c0016963:	73 83                	jae    c00168e8 <timerHandler(unsigned long long)+0x65>
c0016965:	50                   	push   eax
c0016966:	50                   	push   eax
c0016967:	55                   	push   ebp
c0016968:	68 fc 0f 03 c0       	push   0xc0030ffc
c001696d:	e8 2e 1a 01 00       	call   c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016972:	eb 93                	jmp    c0016907 <timerHandler(unsigned long long)+0x84>
c0016974:	80 3d ac da 02 c0 00 	cmp    BYTE PTR ds:0xc002daac,0x0
c001697b:	74 29                	je     c00169a6 <timerHandler(unsigned long long)+0x123>
c001697d:	39 c6                	cmp    esi,eax
c001697f:	bb 00 00 00 00       	mov    ebx,0x0
c0016984:	19 df                	sbb    edi,ebx
c0016986:	72 19                	jb     c00169a1 <timerHandler(unsigned long long)+0x11e>
c0016988:	e8 c9 6c 00 00       	call   c001d656 <lockScheduler()>
c001698d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016992:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016995:	e8 f8 6f 00 00       	call   c001d992 <schedule()>
c001699a:	e8 b9 6c 00 00       	call   c001d658 <unlockScheduler()>
c001699f:	eb 05                	jmp    c00169a6 <timerHandler(unsigned long long)+0x123>
c00169a1:	29 f0                	sub    eax,esi
c00169a3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00169a6:	83 c4 0c             	add    esp,0xc
c00169a9:	5b                   	pop    ebx
c00169aa:	5e                   	pop    esi
c00169ab:	5f                   	pop    edi
c00169ac:	5d                   	pop    ebp
c00169ad:	e9 65 70 00 00       	jmp    c001da17 <unlockStuff()>
c00169b2:	83 c4 0c             	add    esp,0xc
c00169b5:	5b                   	pop    ebx
c00169b6:	5e                   	pop    esi
c00169b7:	5f                   	pop    edi
c00169b8:	5d                   	pop    ebp
c00169b9:	c3                   	ret    

c00169ba <setupTimer(int)>:
c00169ba:	57                   	push   edi
c00169bb:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00169c0:	56                   	push   esi
c00169c1:	53                   	push   ebx
c00169c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169cc:	83 ec 0c             	sub    esp,0xc
c00169cf:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169d5:	e8 42 d8 ff ff       	call   c001421c <Device::getName()>
c00169da:	83 c4 10             	add    esp,0x10
c00169dd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169e0:	0f 85 8d 00 00 00    	jne    c0016a73 <setupTimer(int)+0xb9>
c00169e6:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00169eb:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169f2:	74 7f                	je     c0016a73 <setupTimer(int)+0xb9>
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	68 5c 01 00 00       	push   0x15c
c00169fc:	e8 39 8e ff ff       	call   c000f83a <malloc>
c0016a01:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a04:	89 c3                	mov    ebx,eax
c0016a06:	e8 31 f4 00 00       	call   c0025e3c <PIT::PIT()>
c0016a0b:	59                   	pop    ecx
c0016a0c:	5f                   	pop    edi
c0016a0d:	53                   	push   ebx
c0016a0e:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c0016a14:	e8 17 d5 ff ff       	call   c0013f30 <Device::addChild(Device*)>
c0016a19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a1b:	6a 00                	push   0x0
c0016a1d:	6a 00                	push   0x0
c0016a1f:	56                   	push   esi
c0016a20:	53                   	push   ebx
c0016a21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a24:	83 c4 14             	add    esp,0x14
c0016a27:	68 60 01 00 00       	push   0x160
c0016a2c:	e8 09 8e ff ff       	call   c000f83a <malloc>
c0016a31:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a34:	89 c7                	mov    edi,eax
c0016a36:	e8 b1 f2 00 00       	call   c0025cec <APICTimer::APICTimer()>
c0016a3b:	6a 00                	push   0x0
c0016a3d:	6a 00                	push   0x0
c0016a3f:	56                   	push   esi
c0016a40:	57                   	push   edi
c0016a41:	e8 a8 f1 00 00       	call   c0025bee <APICTimer::open(int, int, void*)>
c0016a46:	83 c4 20             	add    esp,0x20
c0016a49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a4b:	6a 00                	push   0x0
c0016a4d:	6a 00                	push   0x0
c0016a4f:	6a 00                	push   0x0
c0016a51:	53                   	push   ebx
c0016a52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a55:	58                   	pop    eax
c0016a56:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0016a5b:	5a                   	pop    edx
c0016a5c:	57                   	push   edi
c0016a5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a63:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a69:	e8 c2 d4 ff ff       	call   c0013f30 <Device::addChild(Device*)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	eb 33                	jmp    c0016aa6 <setupTimer(int)+0xec>
c0016a73:	83 ec 0c             	sub    esp,0xc
c0016a76:	68 5c 01 00 00       	push   0x15c
c0016a7b:	e8 ba 8d ff ff       	call   c000f83a <malloc>
c0016a80:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a83:	89 c3                	mov    ebx,eax
c0016a85:	e8 b2 f3 00 00       	call   c0025e3c <PIT::PIT()>
c0016a8a:	58                   	pop    eax
c0016a8b:	5a                   	pop    edx
c0016a8c:	53                   	push   ebx
c0016a8d:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c0016a93:	e8 98 d4 ff ff       	call   c0013f30 <Device::addChild(Device*)>
c0016a98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a9a:	6a 00                	push   0x0
c0016a9c:	6a 00                	push   0x0
c0016a9e:	56                   	push   esi
c0016a9f:	53                   	push   ebx
c0016aa0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aa3:	83 c4 20             	add    esp,0x20
c0016aa6:	89 d8                	mov    eax,ebx
c0016aa8:	5b                   	pop    ebx
c0016aa9:	5e                   	pop    esi
c0016aaa:	5f                   	pop    edi
c0016aab:	c3                   	ret    

c0016aac <VCache::VCache(PhysicalDisk*)>:
c0016aac:	53                   	push   ebx
c0016aad:	83 ec 18             	sub    esp,0x18
c0016ab0:	ba 14 ab 02 c0       	mov    edx,0xc002ab14
c0016ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab9:	89 10                	mov    DWORD PTR [eax],edx
c0016abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aca:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016adc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016aee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b04:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b0c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b13:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b26:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b36:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b3d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b45:	83 ec 0c             	sub    esp,0xc
c0016b48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b4c:	e8 e9 8c ff ff       	call   c000f83a <malloc>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	89 c3                	mov    ebx,eax
c0016b56:	83 ec 0c             	sub    esp,0xc
c0016b59:	53                   	push   ebx
c0016b5a:	e8 17 6c 00 00       	call   c001d776 <Mutex::Mutex()>
c0016b5f:	83 c4 10             	add    esp,0x10
c0016b62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b66:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b71:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b78:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b83:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b94:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ba0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ba4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ba7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016baa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bb6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bbc:	05 00 01 00 00       	add    eax,0x100
c0016bc1:	c1 e0 04             	shl    eax,0x4
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	50                   	push   eax
c0016bc8:	e8 6d 8c ff ff       	call   c000f83a <malloc>
c0016bcd:	83 c4 10             	add    esp,0x10
c0016bd0:	89 c2                	mov    edx,eax
c0016bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bf0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bf6:	c1 e0 07             	shl    eax,0x7
c0016bf9:	83 ec 0c             	sub    esp,0xc
c0016bfc:	50                   	push   eax
c0016bfd:	e8 38 8c ff ff       	call   c000f83a <malloc>
c0016c02:	83 c4 10             	add    esp,0x10
c0016c05:	89 c2                	mov    edx,eax
c0016c07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c0e:	90                   	nop
c0016c0f:	83 c4 18             	add    esp,0x18
c0016c12:	5b                   	pop    ebx
c0016c13:	c3                   	ret    

c0016c14 <VCache::invalidateReadBuffer()>:
c0016c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c18:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c1e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c22:	c3                   	ret    
c0016c23:	90                   	nop

c0016c24 <VCache::writeWriteBuffer()>:
c0016c24:	53                   	push   ebx
c0016c25:	83 ec 14             	sub    esp,0x14
c0016c28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c2c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c31:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c34:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c37:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c3d:	50                   	push   eax
c0016c3e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c41:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c48:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c4f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c53:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c5a:	83 c4 28             	add    esp,0x28
c0016c5d:	5b                   	pop    ebx
c0016c5e:	c3                   	ret    
c0016c5f:	90                   	nop

c0016c60 <VCache::~VCache()>:
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	ba 14 ab 02 c0       	mov    edx,0xc002ab14
c0016c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6c:	89 10                	mov    DWORD PTR [eax],edx
c0016c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c72:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c75:	84 c0                	test   al,al
c0016c77:	74 0f                	je     c0016c88 <VCache::~VCache()+0x28>
c0016c79:	83 ec 0c             	sub    esp,0xc
c0016c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c80:	e8 9f ff ff ff       	call   c0016c24 <VCache::writeWriteBuffer()>
c0016c85:	83 c4 10             	add    esp,0x10
c0016c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c8f:	83 ec 0c             	sub    esp,0xc
c0016c92:	50                   	push   eax
c0016c93:	e8 b2 8b ff ff       	call   c000f84a <free>
c0016c98:	83 c4 10             	add    esp,0x10
c0016c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ca2:	83 ec 0c             	sub    esp,0xc
c0016ca5:	50                   	push   eax
c0016ca6:	e8 9f 8b ff ff       	call   c000f84a <free>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	90                   	nop
c0016caf:	83 c4 0c             	add    esp,0xc
c0016cb2:	c3                   	ret    
c0016cb3:	90                   	nop

c0016cb4 <VCache::~VCache()>:
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	83 ec 0c             	sub    esp,0xc
c0016cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbe:	e8 9d ff ff ff       	call   c0016c60 <VCache::~VCache()>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	83 ec 08             	sub    esp,0x8
c0016cc9:	6a 44                	push   0x44
c0016ccb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ccf:	e8 55 bd ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	83 c4 0c             	add    esp,0xc
c0016cda:	c3                   	ret    
c0016cdb:	90                   	nop

c0016cdc <VCache::write(unsigned long long, int, void*)>:
c0016cdc:	55                   	push   ebp
c0016cdd:	57                   	push   edi
c0016cde:	56                   	push   esi
c0016cdf:	53                   	push   ebx
c0016ce0:	83 ec 28             	sub    esp,0x28
c0016ce3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ce7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ceb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cef:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cf6:	e8 dd 6e 00 00       	call   c001dbd8 <Semaphore::acquire()>
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d02:	74 0c                	je     c0016d10 <VCache::write(unsigned long long, int, void*)+0x34>
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	53                   	push   ebx
c0016d08:	e8 07 ff ff ff       	call   c0016c14 <VCache::invalidateReadBuffer()>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d14:	74 66                	je     c0016d7c <VCache::write(unsigned long long, int, void*)+0xa0>
c0016d16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d19:	99                   	cdq    
c0016d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d1e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d21:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d24:	89 c1                	mov    ecx,eax
c0016d26:	89 d0                	mov    eax,edx
c0016d28:	31 f1                	xor    ecx,esi
c0016d2a:	31 f8                	xor    eax,edi
c0016d2c:	89 ca                	mov    edx,ecx
c0016d2e:	09 c2                	or     edx,eax
c0016d30:	75 3e                	jne    c0016d70 <VCache::write(unsigned long long, int, void*)+0x94>
c0016d32:	83 fd 01             	cmp    ebp,0x1
c0016d35:	75 39                	jne    c0016d70 <VCache::write(unsigned long long, int, void*)+0x94>
c0016d37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d3a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d40:	51                   	push   ecx
c0016d41:	50                   	push   eax
c0016d42:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d46:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016d4a:	0f af c8             	imul   ecx,eax
c0016d4d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016d50:	51                   	push   ecx
c0016d51:	e8 ee 99 fe ff       	call   c0000744 <memcpy>
c0016d56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d59:	83 c4 10             	add    esp,0x10
c0016d5c:	40                   	inc    eax
c0016d5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d60:	83 c0 80             	add    eax,0xffffff80
c0016d63:	75 57                	jne    c0016dbc <VCache::write(unsigned long long, int, void*)+0xe0>
c0016d65:	83 ec 0c             	sub    esp,0xc
c0016d68:	53                   	push   ebx
c0016d69:	e8 b6 fe ff ff       	call   c0016c24 <VCache::writeWriteBuffer()>
c0016d6e:	eb 34                	jmp    c0016da4 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016d70:	83 ec 0c             	sub    esp,0xc
c0016d73:	53                   	push   ebx
c0016d74:	e8 ab fe ff ff       	call   c0016c24 <VCache::writeWriteBuffer()>
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d7f:	83 fd 7f             	cmp    ebp,0x7f
c0016d82:	7f 25                	jg     c0016da9 <VCache::write(unsigned long long, int, void*)+0xcd>
c0016d84:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d87:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d8a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016d8d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d91:	52                   	push   edx
c0016d92:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016d98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d9c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d9f:	e8 a0 99 fe ff       	call   c0000744 <memcpy>
c0016da4:	83 c4 10             	add    esp,0x10
c0016da7:	eb 13                	jmp    c0016dbc <VCache::write(unsigned long long, int, void*)+0xe0>
c0016da9:	83 ec 0c             	sub    esp,0xc
c0016dac:	8b 10                	mov    edx,DWORD PTR [eax]
c0016dae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016db2:	55                   	push   ebp
c0016db3:	57                   	push   edi
c0016db4:	56                   	push   esi
c0016db5:	50                   	push   eax
c0016db6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016db9:	83 c4 20             	add    esp,0x20
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dc2:	e8 bf 73 00 00       	call   c001e186 <Semaphore::release()>
c0016dc7:	83 c4 2c             	add    esp,0x2c
c0016dca:	31 c0                	xor    eax,eax
c0016dcc:	5b                   	pop    ebx
c0016dcd:	5e                   	pop    esi
c0016dce:	5f                   	pop    edi
c0016dcf:	5d                   	pop    ebp
c0016dd0:	c3                   	ret    
c0016dd1:	90                   	nop

c0016dd2 <VCache::read(unsigned long long, int, void*)>:
c0016dd2:	55                   	push   ebp
c0016dd3:	57                   	push   edi
c0016dd4:	56                   	push   esi
c0016dd5:	53                   	push   ebx
c0016dd6:	83 ec 28             	sub    esp,0x28
c0016dd9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ddd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016de1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016de9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ded:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016df1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016df5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016df8:	e8 db 6d 00 00       	call   c001dbd8 <Semaphore::acquire()>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e04:	74 0c                	je     c0016e12 <VCache::read(unsigned long long, int, void*)+0x40>
c0016e06:	83 ec 0c             	sub    esp,0xc
c0016e09:	53                   	push   ebx
c0016e0a:	e8 15 fe ff ff       	call   c0016c24 <VCache::writeWriteBuffer()>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	83 fe 01             	cmp    esi,0x1
c0016e15:	0f 85 80 00 00 00    	jne    c0016e9b <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e1b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e1e:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e25:	75 74                	jne    c0016e9b <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e27:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e2a:	89 d1                	mov    ecx,edx
c0016e2c:	f7 d9                	neg    ecx
c0016e2e:	89 cf                	mov    edi,ecx
c0016e30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e34:	c1 ff 1f             	sar    edi,0x1f
c0016e37:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016e3a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016e3e:	89 ce                	mov    esi,ecx
c0016e40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e44:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016e48:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e4c:	89 cf                	mov    edi,ecx
c0016e4e:	74 0a                	je     c0016e5a <VCache::read(unsigned long long, int, void*)+0x88>
c0016e50:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e53:	75 05                	jne    c0016e5a <VCache::read(unsigned long long, int, void*)+0x88>
c0016e55:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016e58:	74 1c                	je     c0016e76 <VCache::read(unsigned long long, int, void*)+0xa4>
c0016e5a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e5e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016e61:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016e64:	83 ec 0c             	sub    esp,0xc
c0016e67:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e69:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e6c:	52                   	push   edx
c0016e6d:	57                   	push   edi
c0016e6e:	56                   	push   esi
c0016e6f:	50                   	push   eax
c0016e70:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e73:	83 c4 20             	add    esp,0x20
c0016e76:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e79:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016e7f:	50                   	push   eax
c0016e80:	52                   	push   edx
c0016e81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e84:	48                   	dec    eax
c0016e85:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016e89:	0f af c2             	imul   eax,edx
c0016e8c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016e8f:	50                   	push   eax
c0016e90:	55                   	push   ebp
c0016e91:	e8 ae 98 fe ff       	call   c0000744 <memcpy>
c0016e96:	83 c4 10             	add    esp,0x10
c0016e99:	eb 21                	jmp    c0016ebc <VCache::read(unsigned long long, int, void*)+0xea>
c0016e9b:	83 ec 0c             	sub    esp,0xc
c0016e9e:	53                   	push   ebx
c0016e9f:	e8 70 fd ff ff       	call   c0016c14 <VCache::invalidateReadBuffer()>
c0016ea4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ea7:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ea9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016eac:	56                   	push   esi
c0016ead:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eb5:	50                   	push   eax
c0016eb6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016eb9:	83 c4 20             	add    esp,0x20
c0016ebc:	83 ec 0c             	sub    esp,0xc
c0016ebf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ec2:	e8 bf 72 00 00       	call   c001e186 <Semaphore::release()>
c0016ec7:	83 c4 2c             	add    esp,0x2c
c0016eca:	31 c0                	xor    eax,eax
c0016ecc:	5b                   	pop    ebx
c0016ecd:	5e                   	pop    esi
c0016ece:	5f                   	pop    edi
c0016ecf:	5d                   	pop    ebp
c0016ed0:	c3                   	ret    
c0016ed1:	90                   	nop

c0016ed2 <Video::putrect(int, int, int, int, unsigned int)>:
c0016ed2:	55                   	push   ebp
c0016ed3:	57                   	push   edi
c0016ed4:	56                   	push   esi
c0016ed5:	53                   	push   ebx
c0016ed6:	83 ec 1c             	sub    esp,0x1c
c0016ed9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016edd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ee1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ee5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ee9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ef1:	01 df                	add    edi,ebx
c0016ef3:	39 fb                	cmp    ebx,edi
c0016ef5:	7d 1f                	jge    c0016f16 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ef7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016efb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016eff:	7d 12                	jge    c0016f13 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016f01:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016f07:	53                   	push   ebx
c0016f08:	55                   	push   ebp
c0016f09:	45                   	inc    ebp
c0016f0a:	56                   	push   esi
c0016f0b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016f0e:	83 c4 10             	add    esp,0x10
c0016f11:	eb e8                	jmp    c0016efb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016f13:	43                   	inc    ebx
c0016f14:	eb dd                	jmp    c0016ef3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016f16:	83 c4 1c             	add    esp,0x1c
c0016f19:	5b                   	pop    ebx
c0016f1a:	5e                   	pop    esi
c0016f1b:	5f                   	pop    edi
c0016f1c:	5d                   	pop    ebp
c0016f1d:	c3                   	ret    

c0016f1e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016f1e:	55                   	push   ebp
c0016f1f:	57                   	push   edi
c0016f20:	31 ff                	xor    edi,edi
c0016f22:	56                   	push   esi
c0016f23:	53                   	push   ebx
c0016f24:	83 ec 1c             	sub    esp,0x1c
c0016f27:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f2f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f36:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f3f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f47:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f4a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f4e:	01 f9                	add    ecx,edi
c0016f50:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f54:	7d 2f                	jge    c0016f85 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f56:	31 f6                	xor    esi,esi
c0016f58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f5c:	01 f2                	add    edx,esi
c0016f5e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f62:	7d 1a                	jge    c0016f7e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f67:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f6a:	46                   	inc    esi
c0016f6b:	51                   	push   ecx
c0016f6c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f70:	52                   	push   edx
c0016f71:	55                   	push   ebp
c0016f72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f75:	83 c4 10             	add    esp,0x10
c0016f78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f7c:	eb da                	jmp    c0016f58 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f7e:	47                   	inc    edi
c0016f7f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f83:	eb c5                	jmp    c0016f4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f85:	83 c4 1c             	add    esp,0x1c
c0016f88:	5b                   	pop    ebx
c0016f89:	5e                   	pop    esi
c0016f8a:	5f                   	pop    edi
c0016f8b:	5d                   	pop    ebp
c0016f8c:	c3                   	ret    
c0016f8d:	90                   	nop

c0016f8e <Video::blit(unsigned int*, int, int, int, int)>:
c0016f8e:	55                   	push   ebp
c0016f8f:	57                   	push   edi
c0016f90:	56                   	push   esi
c0016f91:	53                   	push   ebx
c0016f92:	83 ec 1c             	sub    esp,0x1c
c0016f95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f9d:	85 c0                	test   eax,eax
c0016f9f:	79 02                	jns    c0016fa3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016fa1:	31 c0                	xor    eax,eax
c0016fa3:	c1 e0 02             	shl    eax,0x2
c0016fa6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fb2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016fb6:	39 d8                	cmp    eax,ebx
c0016fb8:	7e 49                	jle    c0017003 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fba:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fc0:	7c 41                	jl     c0017003 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fc2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016fc6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016fce:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016fd2:	39 f9                	cmp    ecx,edi
c0016fd4:	7e 22                	jle    c0016ff8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fd6:	83 c5 04             	add    ebp,0x4
c0016fd9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fdf:	7c 14                	jl     c0016ff5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016fe1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fe3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016fe6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fee:	56                   	push   esi
c0016fef:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016ff2:	83 c4 10             	add    esp,0x10
c0016ff5:	47                   	inc    edi
c0016ff6:	eb d2                	jmp    c0016fca <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016ff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ffc:	43                   	inc    ebx
c0016ffd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017001:	eb ab                	jmp    c0016fae <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017003:	83 c4 1c             	add    esp,0x1c
c0017006:	5b                   	pop    ebx
c0017007:	5e                   	pop    esi
c0017008:	5f                   	pop    edi
c0017009:	5d                   	pop    ebp
c001700a:	c3                   	ret    
c001700b:	90                   	nop

c001700c <Video::clearScreen(unsigned int)>:
c001700c:	57                   	push   edi
c001700d:	56                   	push   esi
c001700e:	53                   	push   ebx
c001700f:	31 db                	xor    ebx,ebx
c0017011:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017015:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001701b:	7e 1f                	jle    c001703c <Video::clearScreen(unsigned int)+0x30>
c001701d:	31 ff                	xor    edi,edi
c001701f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017025:	7e 12                	jle    c0017039 <Video::clearScreen(unsigned int)+0x2d>
c0017027:	8b 06                	mov    eax,DWORD PTR [esi]
c0017029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001702d:	53                   	push   ebx
c001702e:	57                   	push   edi
c001702f:	47                   	inc    edi
c0017030:	56                   	push   esi
c0017031:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017034:	83 c4 10             	add    esp,0x10
c0017037:	eb e6                	jmp    c001701f <Video::clearScreen(unsigned int)+0x13>
c0017039:	43                   	inc    ebx
c001703a:	eb d9                	jmp    c0017015 <Video::clearScreen(unsigned int)+0x9>
c001703c:	5b                   	pop    ebx
c001703d:	5e                   	pop    esi
c001703e:	5f                   	pop    edi
c001703f:	c3                   	ret    

c0017040 <Video::putpixel(int, int, unsigned int)>:
c0017040:	c7 44 24 04 1c ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ab1c
c0017048:	e9 a0 2f 00 00       	jmp    c0019fed <Krnl::panic(char const*)>
c001704d:	90                   	nop

c001704e <Video::Video(char const*)>:
c001704e:	83 ec 0c             	sub    esp,0xc
c0017051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017055:	83 ec 08             	sub    esp,0x8
c0017058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001705c:	50                   	push   eax
c001705d:	e8 be d0 ff ff       	call   c0014120 <Device::Device(char const*)>
c0017062:	83 c4 10             	add    esp,0x10
c0017065:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c001706a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001706e:	89 10                	mov    DWORD PTR [eax],edx
c0017070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017074:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001707e:	90                   	nop
c001707f:	83 c4 0c             	add    esp,0xc
c0017082:	c3                   	ret    
c0017083:	90                   	nop

c0017084 <Video::~Video()>:
c0017084:	83 ec 0c             	sub    esp,0xc
c0017087:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c001708c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017090:	89 10                	mov    DWORD PTR [eax],edx
c0017092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017096:	83 ec 0c             	sub    esp,0xc
c0017099:	50                   	push   eax
c001709a:	e8 63 cd ff ff       	call   c0013e02 <Device::~Device()>
c001709f:	83 c4 10             	add    esp,0x10
c00170a2:	90                   	nop
c00170a3:	83 c4 0c             	add    esp,0xc
c00170a6:	c3                   	ret    
c00170a7:	90                   	nop

c00170a8 <Video::~Video()>:
c00170a8:	83 ec 0c             	sub    esp,0xc
c00170ab:	83 ec 0c             	sub    esp,0xc
c00170ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170b2:	e8 cd ff ff ff       	call   c0017084 <Video::~Video()>
c00170b7:	83 c4 10             	add    esp,0x10
c00170ba:	83 ec 08             	sub    esp,0x8
c00170bd:	68 64 01 00 00       	push   0x164
c00170c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170c6:	e8 5e b9 ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00170cb:	83 c4 10             	add    esp,0x10
c00170ce:	83 c4 0c             	add    esp,0xc
c00170d1:	c3                   	ret    

c00170d2 <Video::isMonochrome()>:
c00170d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170d6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170dc:	c3                   	ret    
c00170dd:	90                   	nop

c00170de <Video::getWidth()>:
c00170de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170e8:	c3                   	ret    
c00170e9:	90                   	nop

c00170ea <Video::getHeight()>:
c00170ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170f4:	c3                   	ret    
c00170f5:	90                   	nop

c00170f6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00170f6:	55                   	push   ebp
c00170f7:	57                   	push   edi
c00170f8:	56                   	push   esi
c00170f9:	53                   	push   ebx
c00170fa:	83 ec 2c             	sub    esp,0x2c
c00170fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017101:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017105:	83 f8 01             	cmp    eax,0x1
c0017108:	19 c9                	sbb    ecx,ecx
c001710a:	31 db                	xor    ebx,ebx
c001710c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017110:	89 cd                	mov    ebp,ecx
c0017112:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001711a:	f7 d5                	not    ebp
c001711c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017122:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017126:	01 d8                	add    eax,ebx
c0017128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001712c:	56                   	push   esi
c001712d:	e8 b8 ff ff ff       	call   c00170ea <Video::getHeight()>
c0017132:	59                   	pop    ecx
c0017133:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017137:	7e 70                	jle    c00171a9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017139:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001713d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017141:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017144:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017148:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001714c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017157:	89 f8                	mov    eax,edi
c0017159:	83 c0 20             	add    eax,0x20
c001715c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017160:	56                   	push   esi
c0017161:	e8 78 ff ff ff       	call   c00170de <Video::getWidth()>
c0017166:	5a                   	pop    edx
c0017167:	39 c7                	cmp    edi,eax
c0017169:	7d 34                	jge    c001719f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001716b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017170:	74 05                	je     c0017177 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017172:	8b 06                	mov    eax,DWORD PTR [esi]
c0017174:	55                   	push   ebp
c0017175:	eb 0d                	jmp    c0017184 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017177:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001717c:	74 12                	je     c0017190 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001717e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017180:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017184:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017188:	57                   	push   edi
c0017189:	56                   	push   esi
c001718a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001718d:	83 c4 10             	add    esp,0x10
c0017190:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017194:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017198:	47                   	inc    edi
c0017199:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001719d:	75 c1                	jne    c0017160 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001719f:	43                   	inc    ebx
c00171a0:	83 fb 20             	cmp    ebx,0x20
c00171a3:	0f 85 79 ff ff ff    	jne    c0017122 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00171a9:	83 c4 2c             	add    esp,0x2c
c00171ac:	5b                   	pop    ebx
c00171ad:	5e                   	pop    esi
c00171ae:	5f                   	pop    edi
c00171af:	5d                   	pop    ebp
c00171b0:	c3                   	ret    
c00171b1:	90                   	nop

c00171b2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00171b2:	55                   	push   ebp
c00171b3:	57                   	push   edi
c00171b4:	56                   	push   esi
c00171b5:	53                   	push   ebx
c00171b6:	83 ec 28             	sub    esp,0x28
c00171b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171bd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00171c1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00171c5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00171c9:	c1 e7 08             	shl    edi,0x8
c00171cc:	01 c7                	add    edi,eax
c00171ce:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00171d2:	c1 e0 08             	shl    eax,0x8
c00171d5:	01 d0                	add    eax,edx
c00171d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171df:	0f af c7             	imul   eax,edi
c00171e2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171e9:	50                   	push   eax
c00171ea:	e8 4b 86 ff ff       	call   c000f83a <malloc>
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	89 c5                	mov    ebp,eax
c00171f4:	85 c0                	test   eax,eax
c00171f6:	75 15                	jne    c001720d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171f8:	83 ec 0c             	sub    esp,0xc
c00171fb:	68 3d ab 02 c0       	push   0xc002ab3d
c0017200:	e8 04 b9 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0017205:	83 c4 10             	add    esp,0x10
c0017208:	e9 1c 01 00 00       	jmp    c0017329 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001720d:	be 12 00 00 00       	mov    esi,0x12
c0017212:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017216:	74 11                	je     c0017229 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017218:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001721c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017220:	c1 fe 03             	sar    esi,0x3
c0017223:	0f af f0             	imul   esi,eax
c0017226:	83 c6 12             	add    esi,0x12
c0017229:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001722d:	74 04                	je     c0017233 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001722f:	85 ff                	test   edi,edi
c0017231:	75 12                	jne    c0017245 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017233:	83 ec 0c             	sub    esp,0xc
c0017236:	68 54 ab 02 c0       	push   0xc002ab54
c001723b:	e8 c9 b8 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0017240:	e9 ce 00 00 00       	jmp    c0017313 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017245:	52                   	push   edx
c0017246:	52                   	push   edx
c0017247:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001724b:	50                   	push   eax
c001724c:	68 69 ab 02 c0       	push   0xc002ab69
c0017251:	e8 b3 b8 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0017256:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	80 fa 02             	cmp    dl,0x2
c0017260:	0f 85 98 00 00 00    	jne    c00172fe <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017266:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001726b:	75 10                	jne    c001727d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001726d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017271:	75 0a                	jne    c001727d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017273:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017276:	83 e8 18             	sub    eax,0x18
c0017279:	a8 f7                	test   al,0xf7
c001727b:	74 0a                	je     c0017287 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001727d:	83 ec 0c             	sub    esp,0xc
c0017280:	68 76 ab 02 c0       	push   0xc002ab76
c0017285:	eb 7f                	jmp    c0017306 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017287:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001728f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017297:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001729b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00172a3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00172a7:	75 0c                	jne    c00172b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00172a9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00172ae:	c1 e0 18             	shl    eax,0x18
c00172b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172b5:	41                   	inc    ecx
c00172b6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00172bb:	c1 e2 10             	shl    edx,0x10
c00172be:	89 d0                	mov    eax,edx
c00172c0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00172c5:	c1 e2 08             	shl    edx,0x8
c00172c8:	09 c2                	or     edx,eax
c00172ca:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00172ce:	09 c2                	or     edx,eax
c00172d0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00172d4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00172d8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00172dc:	c1 f8 03             	sar    eax,0x3
c00172df:	01 c6                	add    esi,eax
c00172e1:	89 c8                	mov    eax,ecx
c00172e3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00172e7:	39 c7                	cmp    edi,eax
c00172e9:	7f b0                	jg     c001729b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172eb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172f3:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172f6:	7e 22                	jle    c001731a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172f8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00172fc:	eb 99                	jmp    c0017297 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00172fe:	50                   	push   eax
c00172ff:	50                   	push   eax
c0017300:	52                   	push   edx
c0017301:	68 84 ab 02 c0       	push   0xc002ab84
c0017306:	e8 fe b7 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001730b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001730e:	e8 37 85 ff ff       	call   c000f84a <free>
c0017313:	83 c4 10             	add    esp,0x10
c0017316:	31 ed                	xor    ebp,ebp
c0017318:	eb 0f                	jmp    c0017329 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001731a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001731e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017321:	89 38                	mov    DWORD PTR [eax],edi
c0017323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017327:	89 08                	mov    DWORD PTR [eax],ecx
c0017329:	83 c4 1c             	add    esp,0x1c
c001732c:	89 e8                	mov    eax,ebp
c001732e:	5b                   	pop    ebx
c001732f:	5e                   	pop    esi
c0017330:	5f                   	pop    edi
c0017331:	5d                   	pop    ebp
c0017332:	c3                   	ret    
c0017333:	90                   	nop

c0017334 <Video::putTGA(int, int, unsigned char*, int)>:
c0017334:	55                   	push   ebp
c0017335:	57                   	push   edi
c0017336:	56                   	push   esi
c0017337:	53                   	push   ebx
c0017338:	83 ec 28             	sub    esp,0x28
c001733b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001733f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017343:	50                   	push   eax
c0017344:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017348:	50                   	push   eax
c0017349:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001734d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017351:	56                   	push   esi
c0017352:	e8 5b fe ff ff       	call   c00171b2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017357:	83 c4 20             	add    esp,0x20
c001735a:	85 c0                	test   eax,eax
c001735c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017360:	74 35                	je     c0017397 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017362:	89 c7                	mov    edi,eax
c0017364:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017368:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001736c:	39 d8                	cmp    eax,ebx
c001736e:	7e 27                	jle    c0017397 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017370:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017374:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017378:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001737c:	39 e8                	cmp    eax,ebp
c001737e:	7e 14                	jle    c0017394 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017380:	8b 06                	mov    eax,DWORD PTR [esi]
c0017382:	83 c7 04             	add    edi,0x4
c0017385:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017388:	53                   	push   ebx
c0017389:	55                   	push   ebp
c001738a:	45                   	inc    ebp
c001738b:	56                   	push   esi
c001738c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001738f:	83 c4 10             	add    esp,0x10
c0017392:	eb e0                	jmp    c0017374 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017394:	43                   	inc    ebx
c0017395:	eb cd                	jmp    c0017364 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017397:	83 c4 1c             	add    esp,0x1c
c001739a:	5b                   	pop    ebx
c001739b:	5e                   	pop    esi
c001739c:	5f                   	pop    edi
c001739d:	5d                   	pop    ebp
c001739e:	c3                   	ret    
c001739f:	90                   	nop

c00173a0 <ACPI::close(int, int, void*)>:
c00173a0:	83 ec 1c             	sub    esp,0x1c
c00173a3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00173ab:	74 0a                	je     c00173b7 <ACPI::close(int, int, void*)+0x17>
c00173ad:	b8 00 00 00 00       	mov    eax,0x0
c00173b2:	e9 9a 00 00 00       	jmp    c0017451 <ACPI::close(int, int, void*)+0xb1>
c00173b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00173bc:	75 37                	jne    c00173f5 <ACPI::close(int, int, void*)+0x55>
c00173be:	83 ec 0c             	sub    esp,0xc
c00173c1:	68 e0 ab 02 c0       	push   0xc002abe0
c00173c6:	e8 3e b7 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00173cb:	83 c4 10             	add    esp,0x10
c00173ce:	a1 68 01 03 c0       	mov    eax,ds:0xc0030168
c00173d3:	85 c0                	test   eax,eax
c00173d5:	74 07                	je     c00173de <ACPI::close(int, int, void*)+0x3e>
c00173d7:	a1 68 01 03 c0       	mov    eax,ds:0xc0030168
c00173dc:	ff d0                	call   eax
c00173de:	83 ec 0c             	sub    esp,0xc
c00173e1:	68 04 ad 02 c0       	push   0xc002ad04
c00173e6:	e8 02 2c 00 00       	call   c0019fed <Krnl::panic(char const*)>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173f3:	eb 5c                	jmp    c0017451 <ACPI::close(int, int, void*)+0xb1>
c00173f5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00173fa:	75 50                	jne    c001744c <ACPI::close(int, int, void*)+0xac>
c00173fc:	a1 64 01 03 c0       	mov    eax,ds:0xc0030164
c0017401:	85 c0                	test   eax,eax
c0017403:	74 07                	je     c001740c <ACPI::close(int, int, void*)+0x6c>
c0017405:	a1 64 01 03 c0       	mov    eax,ds:0xc0030164
c001740a:	ff d0                	call   eax
c001740c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017411:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017416:	83 e0 02             	and    eax,0x2
c0017419:	74 1c                	je     c0017437 <ACPI::close(int, int, void*)+0x97>
c001741b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017426:	89 c2                	mov    edx,eax
c0017428:	ec                   	in     al,dx
c0017429:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001742d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017431:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017435:	eb da                	jmp    c0017411 <ACPI::close(int, int, void*)+0x71>
c0017437:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001743e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017443:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017447:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001744b:	ee                   	out    dx,al
c001744c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017451:	83 c4 1c             	add    esp,0x1c
c0017454:	c3                   	ret    

c0017455 <findRSDP()>:
c0017455:	83 ec 1c             	sub    esp,0x1c
c0017458:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001745d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017463:	83 e0 04             	and    eax,0x4
c0017466:	84 c0                	test   al,al
c0017468:	75 07                	jne    c0017471 <findRSDP()+0x1c>
c001746a:	b8 00 00 00 00       	mov    eax,0x0
c001746f:	eb 6a                	jmp    c00174db <findRSDP()+0x86>
c0017471:	a1 f0 da 02 c0       	mov    eax,ds:0xc002daf0
c0017476:	3d ff 07 00 00       	cmp    eax,0x7ff
c001747b:	7f 1b                	jg     c0017498 <findRSDP()+0x43>
c001747d:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017482:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017488:	83 e2 fb             	and    edx,0xfffffffb
c001748b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017491:	b8 00 00 00 00       	mov    eax,0x0
c0017496:	eb 43                	jmp    c00174db <findRSDP()+0x86>
c0017498:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00174a0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00174a8:	77 2c                	ja     c00174d6 <findRSDP()+0x81>
c00174aa:	83 ec 04             	sub    esp,0x4
c00174ad:	6a 08                	push   0x8
c00174af:	68 ed ab 02 c0       	push   0xc002abed
c00174b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174b8:	e8 83 91 fe ff       	call   c0000640 <memcmp>
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	85 c0                	test   eax,eax
c00174c2:	0f 94 c0             	sete   al
c00174c5:	84 c0                	test   al,al
c00174c7:	74 06                	je     c00174cf <findRSDP()+0x7a>
c00174c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174cd:	eb 0c                	jmp    c00174db <findRSDP()+0x86>
c00174cf:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174d4:	eb ca                	jmp    c00174a0 <findRSDP()+0x4b>
c00174d6:	b8 00 00 00 00       	mov    eax,0x0
c00174db:	83 c4 1c             	add    esp,0x1c
c00174de:	c3                   	ret    

c00174df <loadACPITables(unsigned char*)>:
c00174df:	56                   	push   esi
c00174e0:	53                   	push   ebx
c00174e1:	83 ec 44             	sub    esp,0x44
c00174e4:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00174e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174ef:	83 e0 04             	and    eax,0x4
c00174f2:	84 c0                	test   al,al
c00174f4:	0f 84 05 02 00 00    	je     c00176ff <loadACPITables(unsigned char*)+0x220>
c00174fa:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c00174ff:	84 c0                	test   al,al
c0017501:	74 75                	je     c0017578 <loadACPITables(unsigned char*)+0x99>
c0017503:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017507:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001750b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001750f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017512:	83 e8 24             	sub    eax,0x24
c0017515:	c1 e8 03             	shr    eax,0x3
c0017518:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001751c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017524:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017528:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001752c:	0f 8d b2 00 00 00    	jge    c00175e4 <loadACPITables(unsigned char*)+0x105>
c0017532:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017536:	83 c0 24             	add    eax,0x24
c0017539:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001753d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017541:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017545:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017549:	c1 e0 03             	shl    eax,0x3
c001754c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017550:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017554:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017557:	8b 00                	mov    eax,DWORD PTR [eax]
c0017559:	89 c1                	mov    ecx,eax
c001755b:	a1 6c 01 03 c0       	mov    eax,ds:0xc003016c
c0017560:	8d 50 01             	lea    edx,[eax+0x1]
c0017563:	89 15 6c 01 03 c0    	mov    DWORD PTR ds:0xc003016c,edx
c0017569:	89 ca                	mov    edx,ecx
c001756b:	89 14 c5 84 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe7c],edx
c0017572:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017576:	eb ac                	jmp    c0017524 <loadACPITables(unsigned char*)+0x45>
c0017578:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001757c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017587:	83 e8 24             	sub    eax,0x24
c001758a:	c1 e8 02             	shr    eax,0x2
c001758d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017591:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017599:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001759d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00175a1:	7d 41                	jge    c00175e4 <loadACPITables(unsigned char*)+0x105>
c00175a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175a7:	83 c0 24             	add    eax,0x24
c00175aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175ba:	c1 e0 02             	shl    eax,0x2
c00175bd:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00175c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175c7:	a1 6c 01 03 c0       	mov    eax,ds:0xc003016c
c00175cc:	8d 50 01             	lea    edx,[eax+0x1]
c00175cf:	89 15 6c 01 03 c0    	mov    DWORD PTR ds:0xc003016c,edx
c00175d5:	89 ca                	mov    edx,ecx
c00175d7:	89 14 c5 84 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe7c],edx
c00175de:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00175e2:	eb b5                	jmp    c0017599 <loadACPITables(unsigned char*)+0xba>
c00175e4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00175ec:	a1 6c 01 03 c0       	mov    eax,ds:0xc003016c
c00175f1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00175f5:	0f 8d 05 01 00 00    	jge    c0017700 <loadACPITables(unsigned char*)+0x221>
c00175fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175ff:	8b 04 c5 84 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe7c]
c0017606:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017616:	25 ff 0f 00 00       	and    eax,0xfff
c001761b:	89 c6                	mov    esi,eax
c001761d:	e8 87 a6 ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c0017622:	89 c3                	mov    ebx,eax
c0017624:	83 ec 0c             	sub    esp,0xc
c0017627:	6a 01                	push   0x1
c0017629:	e8 eb a4 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c001762e:	83 c4 10             	add    esp,0x10
c0017631:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017635:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001763b:	83 ec 0c             	sub    esp,0xc
c001763e:	6a 01                	push   0x1
c0017640:	6a 01                	push   0x1
c0017642:	50                   	push   eax
c0017643:	52                   	push   edx
c0017644:	53                   	push   ebx
c0017645:	e8 8e ae ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001764a:	83 c4 20             	add    esp,0x20
c001764d:	09 f0                	or     eax,esi
c001764f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017657:	c1 e0 03             	shl    eax,0x3
c001765a:	05 80 01 03 c0       	add    eax,0xc0030180
c001765f:	83 ec 04             	sub    esp,0x4
c0017662:	6a 04                	push   0x4
c0017664:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017668:	50                   	push   eax
c0017669:	e8 d6 90 fe ff       	call   c0000744 <memcpy>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017675:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017678:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001767c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017680:	05 00 10 00 00       	add    eax,0x1000
c0017685:	c1 e8 0c             	shr    eax,0xc
c0017688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001768c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017690:	89 04 24             	mov    DWORD PTR [esp],eax
c0017693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017697:	25 ff 0f 00 00       	and    eax,0xfff
c001769c:	89 c6                	mov    esi,eax
c001769e:	e8 06 a6 ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c00176a3:	89 c3                	mov    ebx,eax
c00176a5:	83 ec 0c             	sub    esp,0xc
c00176a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176ac:	e8 68 a4 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176be:	83 ec 0c             	sub    esp,0xc
c00176c1:	6a 01                	push   0x1
c00176c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176c7:	50                   	push   eax
c00176c8:	52                   	push   edx
c00176c9:	53                   	push   ebx
c00176ca:	e8 09 ae ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176cf:	83 c4 20             	add    esp,0x20
c00176d2:	09 f0                	or     eax,esi
c00176d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00176db:	83 ec 0c             	sub    esp,0xc
c00176de:	50                   	push   eax
c00176df:	e8 99 a7 ff ff       	call   c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176ef:	89 14 c5 84 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe7c],edx
c00176f6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00176fa:	e9 ed fe ff ff       	jmp    c00175ec <loadACPITables(unsigned char*)+0x10d>
c00176ff:	90                   	nop
c0017700:	83 c4 44             	add    esp,0x44
c0017703:	5b                   	pop    ebx
c0017704:	5e                   	pop    esi
c0017705:	c3                   	ret    

c0017706 <findRSDT(unsigned char*)>:
c0017706:	56                   	push   esi
c0017707:	53                   	push   ebx
c0017708:	83 ec 44             	sub    esp,0x44
c001770b:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017710:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017716:	83 e0 04             	and    eax,0x4
c0017719:	84 c0                	test   al,al
c001771b:	75 0a                	jne    c0017727 <findRSDT(unsigned char*)+0x21>
c001771d:	b8 00 00 00 00       	mov    eax,0x0
c0017722:	e9 f7 00 00 00       	jmp    c001781e <findRSDT(unsigned char*)+0x118>
c0017727:	83 ec 04             	sub    esp,0x4
c001772a:	6a 24                	push   0x24
c001772c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017730:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017734:	50                   	push   eax
c0017735:	e8 0a 90 fe ff       	call   c0000744 <memcpy>
c001773a:	83 c4 10             	add    esp,0x10
c001773d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017741:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017745:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001774d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017751:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017755:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017759:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001775d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017761:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017765:	25 ff 0f 00 00       	and    eax,0xfff
c001776a:	89 c6                	mov    esi,eax
c001776c:	e8 38 a5 ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c0017771:	89 c3                	mov    ebx,eax
c0017773:	83 ec 0c             	sub    esp,0xc
c0017776:	6a 02                	push   0x2
c0017778:	e8 9c a3 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c001777d:	83 c4 10             	add    esp,0x10
c0017780:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017784:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001778a:	83 ec 0c             	sub    esp,0xc
c001778d:	6a 01                	push   0x1
c001778f:	6a 02                	push   0x2
c0017791:	50                   	push   eax
c0017792:	52                   	push   edx
c0017793:	53                   	push   ebx
c0017794:	e8 3f ad ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017799:	83 c4 20             	add    esp,0x20
c001779c:	09 f0                	or     eax,esi
c001779e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177a6:	25 ff 0f 00 00       	and    eax,0xfff
c00177ab:	89 c6                	mov    esi,eax
c00177ad:	e8 f7 a4 ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c00177b2:	89 c3                	mov    ebx,eax
c00177b4:	83 ec 0c             	sub    esp,0xc
c00177b7:	6a 02                	push   0x2
c00177b9:	e8 5b a3 ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c00177be:	83 c4 10             	add    esp,0x10
c00177c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177c5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177cb:	83 ec 0c             	sub    esp,0xc
c00177ce:	6a 01                	push   0x1
c00177d0:	6a 02                	push   0x2
c00177d2:	50                   	push   eax
c00177d3:	52                   	push   edx
c00177d4:	53                   	push   ebx
c00177d5:	e8 fe ac ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177da:	83 c4 20             	add    esp,0x20
c00177dd:	09 f0                	or     eax,esi
c00177df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177e3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00177e8:	75 11                	jne    c00177fb <findRSDT(unsigned char*)+0xf5>
c00177ea:	c6 05 80 03 03 c0 00 	mov    BYTE PTR ds:0xc0030380,0x0
c00177f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177f5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00177f9:	eb 1f                	jmp    c001781a <findRSDT(unsigned char*)+0x114>
c00177fb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017800:	75 11                	jne    c0017813 <findRSDT(unsigned char*)+0x10d>
c0017802:	c6 05 80 03 03 c0 01 	mov    BYTE PTR ds:0xc0030380,0x1
c0017809:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001780d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017811:	eb 07                	jmp    c001781a <findRSDT(unsigned char*)+0x114>
c0017813:	b8 00 00 00 00       	mov    eax,0x0
c0017818:	eb 04                	jmp    c001781e <findRSDT(unsigned char*)+0x118>
c001781a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001781e:	83 c4 44             	add    esp,0x44
c0017821:	5b                   	pop    ebx
c0017822:	5e                   	pop    esi
c0017823:	c3                   	ret    

c0017824 <findDataTable(unsigned char*, char*)>:
c0017824:	83 ec 1c             	sub    esp,0x1c
c0017827:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001782c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017832:	83 e0 04             	and    eax,0x4
c0017835:	84 c0                	test   al,al
c0017837:	75 07                	jne    c0017840 <findDataTable(unsigned char*, char*)+0x1c>
c0017839:	b8 00 00 00 00       	mov    eax,0x0
c001783e:	eb 7c                	jmp    c00178bc <findDataTable(unsigned char*, char*)+0x98>
c0017840:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017848:	a1 6c 01 03 c0       	mov    eax,ds:0xc003016c
c001784d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017851:	7d 3a                	jge    c001788d <findDataTable(unsigned char*, char*)+0x69>
c0017853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017857:	c1 e0 03             	shl    eax,0x3
c001785a:	05 80 01 03 c0       	add    eax,0xc0030180
c001785f:	83 ec 04             	sub    esp,0x4
c0017862:	6a 04                	push   0x4
c0017864:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017868:	50                   	push   eax
c0017869:	e8 d2 8d fe ff       	call   c0000640 <memcmp>
c001786e:	83 c4 10             	add    esp,0x10
c0017871:	85 c0                	test   eax,eax
c0017873:	0f 94 c0             	sete   al
c0017876:	84 c0                	test   al,al
c0017878:	74 0d                	je     c0017887 <findDataTable(unsigned char*, char*)+0x63>
c001787a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001787e:	8b 04 c5 84 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe7c]
c0017885:	eb 35                	jmp    c00178bc <findDataTable(unsigned char*, char*)+0x98>
c0017887:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001788b:	eb bb                	jmp    c0017848 <findDataTable(unsigned char*, char*)+0x24>
c001788d:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c0017892:	84 c0                	test   al,al
c0017894:	74 07                	je     c001789d <findDataTable(unsigned char*, char*)+0x79>
c0017896:	b8 58 00 00 00       	mov    eax,0x58
c001789b:	eb 05                	jmp    c00178a2 <findDataTable(unsigned char*, char*)+0x7e>
c001789d:	b8 52 00 00 00       	mov    eax,0x52
c00178a2:	83 ec 04             	sub    esp,0x4
c00178a5:	50                   	push   eax
c00178a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178aa:	68 28 ad 02 c0       	push   0xc002ad28
c00178af:	e8 55 b2 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	b8 00 00 00 00       	mov    eax,0x0
c00178bc:	83 c4 1c             	add    esp,0x1c
c00178bf:	c3                   	ret    

c00178c0 <scanMADT()>:
c00178c0:	53                   	push   ebx
c00178c1:	83 ec 38             	sub    esp,0x38
c00178c4:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00178c9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178cf:	83 e0 04             	and    eax,0x4
c00178d2:	84 c0                	test   al,al
c00178d4:	0f 84 63 04 00 00    	je     c0017d3d <scanMADT()+0x47d>
c00178da:	e8 76 fb ff ff       	call   c0017455 <findRSDP()>
c00178df:	a3 8c 03 03 c0       	mov    ds:0xc003038c,eax
c00178e4:	a1 8c 03 03 c0       	mov    eax,ds:0xc003038c
c00178e9:	85 c0                	test   eax,eax
c00178eb:	75 19                	jne    c0017906 <scanMADT()+0x46>
c00178ed:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00178f2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178f8:	83 e2 fb             	and    edx,0xfffffffb
c00178fb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017901:	e9 3b 04 00 00       	jmp    c0017d41 <scanMADT()+0x481>
c0017906:	a1 8c 03 03 c0       	mov    eax,ds:0xc003038c
c001790b:	83 ec 0c             	sub    esp,0xc
c001790e:	50                   	push   eax
c001790f:	e8 f2 fd ff ff       	call   c0017706 <findRSDT(unsigned char*)>
c0017914:	83 c4 10             	add    esp,0x10
c0017917:	a3 88 03 03 c0       	mov    ds:0xc0030388,eax
c001791c:	a1 88 03 03 c0       	mov    eax,ds:0xc0030388
c0017921:	85 c0                	test   eax,eax
c0017923:	75 19                	jne    c001793e <scanMADT()+0x7e>
c0017925:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001792a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017930:	83 e2 fb             	and    edx,0xfffffffb
c0017933:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017939:	e9 03 04 00 00       	jmp    c0017d41 <scanMADT()+0x481>
c001793e:	a1 88 03 03 c0       	mov    eax,ds:0xc0030388
c0017943:	83 ec 0c             	sub    esp,0xc
c0017946:	50                   	push   eax
c0017947:	e8 93 fb ff ff       	call   c00174df <loadACPITables(unsigned char*)>
c001794c:	83 c4 10             	add    esp,0x10
c001794f:	a1 88 03 03 c0       	mov    eax,ds:0xc0030388
c0017954:	83 ec 08             	sub    esp,0x8
c0017957:	68 f6 ab 02 c0       	push   0xc002abf6
c001795c:	50                   	push   eax
c001795d:	e8 c2 fe ff ff       	call   c0017824 <findDataTable(unsigned char*, char*)>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017969:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001796e:	75 19                	jne    c0017989 <scanMADT()+0xc9>
c0017970:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017975:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001797b:	83 e2 fe             	and    edx,0xfffffffe
c001797e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017984:	e9 b8 03 00 00       	jmp    c0017d41 <scanMADT()+0x481>
c0017989:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017991:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017995:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017998:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001799c:	0f 87 9f 03 00 00    	ja     c0017d41 <scanMADT()+0x481>
c00179a2:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179aa:	0f 87 91 03 00 00    	ja     c0017d41 <scanMADT()+0x481>
c00179b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179bc:	8d 50 01             	lea    edx,[eax+0x1]
c00179bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179c7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179cb:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d3:	8d 50 01             	lea    edx,[eax+0x1]
c00179d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179e2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00179e6:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00179eb:	0f 86 4f 03 00 00    	jbe    c0017d40 <scanMADT()+0x480>
c00179f1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00179f6:	75 57                	jne    c0017a4f <scanMADT()+0x18f>
c00179f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179fc:	8d 50 01             	lea    edx,[eax+0x1]
c00179ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a03:	8a 15 80 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030580
c0017a09:	0f b6 d2             	movzx  edx,dl
c0017a0c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a10:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a14:	88 82 c0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa40],al
c0017a1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a1e:	8d 50 01             	lea    edx,[eax+0x1]
c0017a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a25:	8a 15 80 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030580
c0017a2b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a2e:	88 0d 80 05 03 c0    	mov    BYTE PTR ds:0xc0030580,cl
c0017a34:	0f b6 d2             	movzx  edx,dl
c0017a37:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a3b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a3f:	88 82 a0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa60],al
c0017a45:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a4a:	e9 da 02 00 00       	jmp    c0017d29 <scanMADT()+0x469>
c0017a4f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a54:	0f 85 14 01 00 00    	jne    c0017b6e <scanMADT()+0x2ae>
c0017a5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017a61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a65:	8a 15 40 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030440
c0017a6b:	0f b6 d2             	movzx  edx,dl
c0017a6e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a72:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a76:	88 82 60 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfba0],al
c0017a7c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a88:	01 d0                	add    eax,edx
c0017a8a:	83 c0 2c             	add    eax,0x2c
c0017a8d:	8a 00                	mov    al,BYTE PTR [eax]
c0017a8f:	0f b6 d0             	movzx  edx,al
c0017a92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a96:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a9d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017aa1:	0f b6 c0             	movzx  eax,al
c0017aa4:	c1 e0 08             	shl    eax,0x8
c0017aa7:	89 d1                	mov    ecx,edx
c0017aa9:	09 c1                	or     ecx,eax
c0017aab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aaf:	8d 50 02             	lea    edx,[eax+0x2]
c0017ab2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ab6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017aba:	0f b6 c0             	movzx  eax,al
c0017abd:	c1 e0 10             	shl    eax,0x10
c0017ac0:	09 c1                	or     ecx,eax
c0017ac2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac6:	8d 50 03             	lea    edx,[eax+0x3]
c0017ac9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017acd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ad1:	0f b6 c0             	movzx  eax,al
c0017ad4:	c1 e0 18             	shl    eax,0x18
c0017ad7:	09 c1                	or     ecx,eax
c0017ad9:	89 ca                	mov    edx,ecx
c0017adb:	a0 40 04 03 c0       	mov    al,ds:0xc0030440
c0017ae0:	0f b6 c0             	movzx  eax,al
c0017ae3:	89 14 85 80 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb80],edx
c0017aea:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017aef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017af3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af7:	01 d0                	add    eax,edx
c0017af9:	83 c0 2c             	add    eax,0x2c
c0017afc:	8a 00                	mov    al,BYTE PTR [eax]
c0017afe:	0f b6 d0             	movzx  edx,al
c0017b01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b05:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b0c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b10:	0f b6 c0             	movzx  eax,al
c0017b13:	c1 e0 08             	shl    eax,0x8
c0017b16:	89 d1                	mov    ecx,edx
c0017b18:	09 c1                	or     ecx,eax
c0017b1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b1e:	8d 50 02             	lea    edx,[eax+0x2]
c0017b21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b25:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b29:	0f b6 c0             	movzx  eax,al
c0017b2c:	c1 e0 10             	shl    eax,0x10
c0017b2f:	09 c1                	or     ecx,eax
c0017b31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b35:	8d 50 03             	lea    edx,[eax+0x3]
c0017b38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b3c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b40:	0f b6 c0             	movzx  eax,al
c0017b43:	c1 e0 18             	shl    eax,0x18
c0017b46:	09 c1                	or     ecx,eax
c0017b48:	89 ca                	mov    edx,ecx
c0017b4a:	a0 40 04 03 c0       	mov    al,ds:0xc0030440
c0017b4f:	0f b6 c0             	movzx  eax,al
c0017b52:	89 14 85 00 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb00],edx
c0017b59:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b5e:	a0 40 04 03 c0       	mov    al,ds:0xc0030440
c0017b63:	40                   	inc    eax
c0017b64:	a2 40 04 03 c0       	mov    ds:0xc0030440,al
c0017b69:	e9 bb 01 00 00       	jmp    c0017d29 <scanMADT()+0x469>
c0017b6e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b73:	0f 85 e9 00 00 00    	jne    c0017c62 <scanMADT()+0x3a2>
c0017b79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b7d:	8d 50 01             	lea    edx,[eax+0x1]
c0017b80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b88:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b8c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017b90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b94:	8d 50 01             	lea    edx,[eax+0x1]
c0017b97:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b9f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ba3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ba7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017baf:	01 d0                	add    eax,edx
c0017bb1:	83 c0 2c             	add    eax,0x2c
c0017bb4:	8a 00                	mov    al,BYTE PTR [eax]
c0017bb6:	0f b6 d0             	movzx  edx,al
c0017bb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bc4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bc8:	0f b6 c0             	movzx  eax,al
c0017bcb:	c1 e0 08             	shl    eax,0x8
c0017bce:	89 d1                	mov    ecx,edx
c0017bd0:	09 c1                	or     ecx,eax
c0017bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd6:	8d 50 02             	lea    edx,[eax+0x2]
c0017bd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bdd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017be1:	0f b6 c0             	movzx  eax,al
c0017be4:	c1 e0 10             	shl    eax,0x10
c0017be7:	09 c1                	or     ecx,eax
c0017be9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bed:	8d 50 03             	lea    edx,[eax+0x3]
c0017bf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bf8:	0f b6 c0             	movzx  eax,al
c0017bfb:	c1 e0 18             	shl    eax,0x18
c0017bfe:	09 c8                	or     eax,ecx
c0017c00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c04:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c11:	01 d0                	add    eax,edx
c0017c13:	83 c0 2c             	add    eax,0x2c
c0017c16:	8a 00                	mov    al,BYTE PTR [eax]
c0017c18:	0f b6 c0             	movzx  eax,al
c0017c1b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c1f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c26:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c2a:	0f b6 d2             	movzx  edx,dl
c0017c2d:	c1 e2 08             	shl    edx,0x8
c0017c30:	09 d0                	or     eax,edx
c0017c32:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c37:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c3c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c45:	88 90 00 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd3300],dl
c0017c4b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c50:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c55:	66 89 84 12 20 04 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfbe0],ax
c0017c5d:	e9 c7 00 00 00       	jmp    c0017d29 <scanMADT()+0x469>
c0017c62:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c67:	0f 85 b0 00 00 00    	jne    c0017d1d <scanMADT()+0x45d>
c0017c6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c71:	8d 50 01             	lea    edx,[eax+0x1]
c0017c74:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c7c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c80:	0f b6 c0             	movzx  eax,al
c0017c83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c8f:	01 d0                	add    eax,edx
c0017c91:	83 c0 2c             	add    eax,0x2c
c0017c94:	8a 00                	mov    al,BYTE PTR [eax]
c0017c96:	0f b6 d0             	movzx  edx,al
c0017c99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ca0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ca8:	0f b6 c0             	movzx  eax,al
c0017cab:	c1 e0 08             	shl    eax,0x8
c0017cae:	09 d0                	or     eax,edx
c0017cb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cb4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cbd:	8d 50 01             	lea    edx,[eax+0x1]
c0017cc0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cc4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ccc:	0f b6 c0             	movzx  eax,al
c0017ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cd7:	c1 e0 08             	shl    eax,0x8
c0017cda:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017cde:	89 c1                	mov    ecx,eax
c0017ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce4:	c1 e0 18             	shl    eax,0x18
c0017ce7:	89 c3                	mov    ebx,eax
c0017ce9:	a1 90 03 03 c0       	mov    eax,ds:0xc0030390
c0017cee:	8d 50 01             	lea    edx,[eax+0x1]
c0017cf1:	89 15 90 03 03 c0    	mov    DWORD PTR ds:0xc0030390,edx
c0017cf7:	09 d9                	or     ecx,ebx
c0017cf9:	89 ca                	mov    edx,ecx
c0017cfb:	89 14 85 a0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc60],edx
c0017d02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d0e:	68 58 ad 02 c0       	push   0xc002ad58
c0017d13:	e8 f1 ad ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0017d18:	83 c4 10             	add    esp,0x10
c0017d1b:	eb 0c                	jmp    c0017d29 <scanMADT()+0x469>
c0017d1d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d22:	75 05                	jne    c0017d29 <scanMADT()+0x469>
c0017d24:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d29:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d32:	01 d0                	add    eax,edx
c0017d34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d38:	e9 54 fc ff ff       	jmp    c0017991 <scanMADT()+0xd1>
c0017d3d:	90                   	nop
c0017d3e:	eb 01                	jmp    c0017d41 <scanMADT()+0x481>
c0017d40:	90                   	nop
c0017d41:	83 c4 38             	add    esp,0x38
c0017d44:	5b                   	pop    ebx
c0017d45:	c3                   	ret    

c0017d46 <ACPI::ACPI()>:
c0017d46:	83 ec 0c             	sub    esp,0xc
c0017d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d4d:	83 ec 08             	sub    esp,0x8
c0017d50:	68 fb ab 02 c0       	push   0xc002abfb
c0017d55:	50                   	push   eax
c0017d56:	e8 c5 c3 ff ff       	call   c0014120 <Device::Device(char const*)>
c0017d5b:	83 c4 10             	add    esp,0x10
c0017d5e:	ba cc ad 02 c0       	mov    edx,0xc002adcc
c0017d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d67:	89 10                	mov    DWORD PTR [eax],edx
c0017d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d78:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d86:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d94:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017da6:	e8 15 fb ff ff       	call   c00178c0 <scanMADT()>
c0017dab:	90                   	nop
c0017dac:	83 c4 0c             	add    esp,0xc
c0017daf:	c3                   	ret    

c0017db0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017db0:	83 ec 2c             	sub    esp,0x2c
c0017db3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017db7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dbb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dbf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dc3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dc8:	88 d0                	mov    al,dl
c0017dca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017dd3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ddb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ddf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017de5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017de9:	0f 8d 97 00 00 00    	jge    c0017e86 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017def:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017df3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017df7:	83 c2 2a             	add    edx,0x2a
c0017dfa:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017dfe:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e03:	75 78                	jne    c0017e7d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e0d:	83 c2 2a             	add    edx,0x2a
c0017e10:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e14:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e18:	75 63                	jne    c0017e7d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e1a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e1f:	74 3a                	je     c0017e5b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e29:	83 c2 2a             	add    edx,0x2a
c0017e2c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e37:	39 c2                	cmp    edx,eax
c0017e39:	74 10                	je     c0017e4b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	68 94 ad 02 c0       	push   0xc002ad94
c0017e43:	e8 a5 21 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0017e48:	83 c4 10             	add    esp,0x10
c0017e4b:	83 ec 0c             	sub    esp,0xc
c0017e4e:	68 00 ac 02 c0       	push   0xc002ac00
c0017e53:	e8 95 21 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0017e58:	83 c4 10             	add    esp,0x10
c0017e5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e67:	83 c2 2a             	add    edx,0x2a
c0017e6a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e6e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e70:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e73:	89 01                	mov    DWORD PTR [ecx],eax
c0017e75:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e78:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e7d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e81:	e9 55 ff ff ff       	jmp    c0017ddb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e86:	90                   	nop
c0017e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e8b:	83 c4 2c             	add    esp,0x2c
c0017e8e:	c2 04 00             	ret    0x4
c0017e91:	90                   	nop

c0017e92 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e92:	83 ec 1c             	sub    esp,0x1c
c0017e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e99:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017e9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ea1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017ea6:	88 c8                	mov    al,cl
c0017ea8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017eac:	88 d0                	mov    al,dl
c0017eae:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ec3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ec7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ecf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ed5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ed9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017edc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ee0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017eef:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017ef3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017efa:	83 c2 2a             	add    edx,0x2a
c0017efd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f05:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f12:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f16:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f24:	8d 50 01             	lea    edx,[eax+0x1]
c0017f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f35:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f3b:	3d 00 02 00 00       	cmp    eax,0x200
c0017f40:	75 10                	jne    c0017f52 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f42:	83 ec 0c             	sub    esp,0xc
c0017f45:	68 0f ac 02 c0       	push   0xc002ac0f
c0017f4a:	e8 9e 20 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	90                   	nop
c0017f53:	83 c4 1c             	add    esp,0x1c
c0017f56:	c3                   	ret    
c0017f57:	90                   	nop

c0017f58 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f58:	b8 00 00 00 00       	mov    eax,0x0
c0017f5d:	c3                   	ret    

c0017f5e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f5e:	83 ec 1c             	sub    esp,0x1c
c0017f61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f65:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f68:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f6c:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017f71:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f76:	83 ec 08             	sub    esp,0x8
c0017f79:	52                   	push   edx
c0017f7a:	50                   	push   eax
c0017f7b:	e8 d2 6e ff ff       	call   c000ee52 <Computer::readCMOS(unsigned char)>
c0017f80:	83 c4 10             	add    esp,0x10
c0017f83:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f87:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017f8c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f91:	83 ec 04             	sub    esp,0x4
c0017f94:	6a 01                	push   0x1
c0017f96:	52                   	push   edx
c0017f97:	50                   	push   eax
c0017f98:	e8 cb 6f ff ff       	call   c000ef68 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	90                   	nop
c0017fa1:	83 c4 1c             	add    esp,0x1c
c0017fa4:	c3                   	ret    
c0017fa5:	90                   	nop

c0017fa6 <ACPI::open(int, int, void*)>:
c0017fa6:	53                   	push   ebx
c0017fa7:	83 ec 28             	sub    esp,0x28
c0017faa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fae:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fb9:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017fc0:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017fc5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fcb:	83 e0 04             	and    eax,0x4
c0017fce:	84 c0                	test   al,al
c0017fd0:	74 47                	je     c0018019 <ACPI::open(int, int, void*)+0x73>
c0017fd2:	a1 88 03 03 c0       	mov    eax,ds:0xc0030388
c0017fd7:	83 ec 08             	sub    esp,0x8
c0017fda:	68 2c ac 02 c0       	push   0xc002ac2c
c0017fdf:	50                   	push   eax
c0017fe0:	e8 3f f8 ff ff       	call   c0017824 <findDataTable(unsigned char*, char*)>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017fec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017ff1:	74 26                	je     c0018019 <ACPI::open(int, int, void*)+0x73>
c0017ff3:	83 ec 0c             	sub    esp,0xc
c0017ff6:	68 31 ac 02 c0       	push   0xc002ac31
c0017ffb:	e8 09 ab ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018000:	83 c4 10             	add    esp,0x10
c0018003:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018007:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001800e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018012:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018019:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018021:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018025:	8a 00                	mov    al,BYTE PTR [eax]
c0018027:	3c 01                	cmp    al,0x1
c0018029:	75 28                	jne    c0018053 <ACPI::open(int, int, void*)+0xad>
c001802b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001802f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001803a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018041:	83 ec 0c             	sub    esp,0xc
c0018044:	68 42 ac 02 c0       	push   0xc002ac42
c0018049:	e8 bb aa ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001804e:	83 c4 10             	add    esp,0x10
c0018051:	eb 25                	jmp    c0018078 <ACPI::open(int, int, void*)+0xd2>
c0018053:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018057:	8a 00                	mov    al,BYTE PTR [eax]
c0018059:	3c 02                	cmp    al,0x2
c001805b:	75 1b                	jne    c0018078 <ACPI::open(int, int, void*)+0xd2>
c001805d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018061:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	68 4a ac 02 c0       	push   0xc002ac4a
c0018070:	e8 94 aa ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018075:	83 c4 10             	add    esp,0x10
c0018078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001807c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018082:	83 f0 01             	xor    eax,0x1
c0018085:	84 c0                	test   al,al
c0018087:	74 6a                	je     c00180f3 <ACPI::open(int, int, void*)+0x14d>
c0018089:	83 ec 0c             	sub    esp,0xc
c001808c:	68 52 ac 02 c0       	push   0xc002ac52
c0018091:	e8 73 aa ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	e8 b2 80 fe ff       	call   c0000150 <manualPCIProbe>
c001809e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180a2:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00180a7:	75 28                	jne    c00180d1 <ACPI::open(int, int, void*)+0x12b>
c00180a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ad:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180bf:	83 ec 0c             	sub    esp,0xc
c00180c2:	68 60 ac 02 c0       	push   0xc002ac60
c00180c7:	e8 3d aa ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	eb 22                	jmp    c00180f3 <ACPI::open(int, int, void*)+0x14d>
c00180d1:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00180d6:	75 1b                	jne    c00180f3 <ACPI::open(int, int, void*)+0x14d>
c00180d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180dc:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180e3:	83 ec 0c             	sub    esp,0xc
c00180e6:	68 6a ac 02 c0       	push   0xc002ac6a
c00180eb:	e8 19 aa ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00180f0:	83 c4 10             	add    esp,0x10
c00180f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180f7:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00180fd:	84 c0                	test   al,al
c00180ff:	74 13                	je     c0018114 <ACPI::open(int, int, void*)+0x16e>
c0018101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018105:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001810b:	83 f0 01             	xor    eax,0x1
c001810e:	0f b6 c0             	movzx  eax,al
c0018111:	40                   	inc    eax
c0018112:	eb 05                	jmp    c0018119 <ACPI::open(int, int, void*)+0x173>
c0018114:	b8 00 00 00 00       	mov    eax,0x0
c0018119:	83 ec 08             	sub    esp,0x8
c001811c:	50                   	push   eax
c001811d:	68 74 ac 02 c0       	push   0xc002ac74
c0018122:	e8 e2 a9 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001812e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018134:	84 c0                	test   al,al
c0018136:	74 67                	je     c001819f <ACPI::open(int, int, void*)+0x1f9>
c0018138:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018140:	83 ec 0c             	sub    esp,0xc
c0018143:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018147:	e8 ee 76 ff ff       	call   c000f83a <malloc>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	89 c3                	mov    ebx,eax
c0018151:	83 ec 0c             	sub    esp,0xc
c0018154:	53                   	push   ebx
c0018155:	e8 00 a0 00 00       	call   c002215a <PCI::PCI()>
c001815a:	83 c4 10             	add    esp,0x10
c001815d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018165:	83 ec 08             	sub    esp,0x8
c0018168:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001816c:	50                   	push   eax
c001816d:	e8 be bd ff ff       	call   c0013f30 <Device::addChild(Device*)>
c0018172:	83 c4 10             	add    esp,0x10
c0018175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018179:	8b 00                	mov    eax,DWORD PTR [eax]
c001817b:	83 c0 08             	add    eax,0x8
c001817e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018180:	6a 00                	push   0x0
c0018182:	6a 00                	push   0x0
c0018184:	6a 00                	push   0x0
c0018186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001818a:	ff d0                	call   eax
c001818c:	83 c4 10             	add    esp,0x10
c001818f:	83 ec 0c             	sub    esp,0xc
c0018192:	68 7d ac 02 c0       	push   0xc002ac7d
c0018197:	e8 6d a9 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001819c:	83 c4 10             	add    esp,0x10
c001819f:	83 ec 0c             	sub    esp,0xc
c00181a2:	68 88 ac 02 c0       	push   0xc002ac88
c00181a7:	e8 cc 43 00 00       	call   c001c578 <Thr::loadKernelSymbolTable(char const*)>
c00181ac:	83 c4 10             	add    esp,0x10
c00181af:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00181b4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00181ba:	83 e0 04             	and    eax,0x4
c00181bd:	84 c0                	test   al,al
c00181bf:	0f 84 d2 00 00 00    	je     c0018297 <ACPI::open(int, int, void*)+0x2f1>
c00181c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00181cc:	83 ec 0c             	sub    esp,0xc
c00181cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181d3:	e8 62 76 ff ff       	call   c000f83a <malloc>
c00181d8:	83 c4 10             	add    esp,0x10
c00181db:	89 c3                	mov    ebx,eax
c00181dd:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c00181e2:	83 ec 04             	sub    esp,0x4
c00181e5:	50                   	push   eax
c00181e6:	68 a6 ac 02 c0       	push   0xc002aca6
c00181eb:	53                   	push   ebx
c00181ec:	e8 71 ae ff ff       	call   c0013062 <File::File(char const*, Process*)>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00181f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00181fd:	74 17                	je     c0018216 <ACPI::open(int, int, void*)+0x270>
c00181ff:	83 ec 0c             	sub    esp,0xc
c0018202:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018206:	e8 29 b1 ff ff       	call   c0013334 <File::exists()>
c001820b:	83 c4 10             	add    esp,0x10
c001820e:	84 c0                	test   al,al
c0018210:	74 04                	je     c0018216 <ACPI::open(int, int, void*)+0x270>
c0018212:	b0 01                	mov    al,0x1
c0018214:	eb 02                	jmp    c0018218 <ACPI::open(int, int, void*)+0x272>
c0018216:	b0 00                	mov    al,0x0
c0018218:	84 c0                	test   al,al
c001821a:	74 22                	je     c001823e <ACPI::open(int, int, void*)+0x298>
c001821c:	83 ec 08             	sub    esp,0x8
c001821f:	6a 01                	push   0x1
c0018221:	68 a6 ac 02 c0       	push   0xc002aca6
c0018226:	e8 aa 4d 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c001822b:	83 c4 10             	add    esp,0x10
c001822e:	83 ec 08             	sub    esp,0x8
c0018231:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018235:	50                   	push   eax
c0018236:	e8 b6 4f 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c001823b:	83 c4 10             	add    esp,0x10
c001823e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018243:	74 1e                	je     c0018263 <ACPI::open(int, int, void*)+0x2bd>
c0018245:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001824a:	74 17                	je     c0018263 <ACPI::open(int, int, void*)+0x2bd>
c001824c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018250:	8b 00                	mov    eax,DWORD PTR [eax]
c0018252:	83 c0 08             	add    eax,0x8
c0018255:	8b 00                	mov    eax,DWORD PTR [eax]
c0018257:	83 ec 0c             	sub    esp,0xc
c001825a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001825e:	ff d0                	call   eax
c0018260:	83 c4 10             	add    esp,0x10
c0018263:	a1 88 03 03 c0       	mov    eax,ds:0xc0030388
c0018268:	83 ec 08             	sub    esp,0x8
c001826b:	68 c3 ac 02 c0       	push   0xc002acc3
c0018270:	50                   	push   eax
c0018271:	e8 ae f5 ff ff       	call   c0017824 <findDataTable(unsigned char*, char*)>
c0018276:	83 c4 10             	add    esp,0x10
c0018279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001827d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018282:	74 13                	je     c0018297 <ACPI::open(int, int, void*)+0x2f1>
c0018284:	83 ec 08             	sub    esp,0x8
c0018287:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001828b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001828f:	e8 ca fc ff ff       	call   c0017f5e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018294:	83 c4 10             	add    esp,0x10
c0018297:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c001829d:	83 ec 08             	sub    esp,0x8
c00182a0:	6a 01                	push   0x1
c00182a2:	68 c8 ac 02 c0       	push   0xc002acc8
c00182a7:	e8 29 4d 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c00182ac:	83 c4 10             	add    esp,0x10
c00182af:	83 ec 08             	sub    esp,0x8
c00182b2:	53                   	push   ebx
c00182b3:	50                   	push   eax
c00182b4:	e8 38 4f 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c00182b9:	83 c4 10             	add    esp,0x10
c00182bc:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c00182c2:	83 ec 08             	sub    esp,0x8
c00182c5:	6a 01                	push   0x1
c00182c7:	68 e5 ac 02 c0       	push   0xc002ace5
c00182cc:	e8 04 4d 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	83 ec 08             	sub    esp,0x8
c00182d7:	53                   	push   ebx
c00182d8:	50                   	push   eax
c00182d9:	e8 13 4f 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c00182de:	83 c4 10             	add    esp,0x10
c00182e1:	b8 00 00 00 00       	mov    eax,0x0
c00182e6:	83 c4 28             	add    esp,0x28
c00182e9:	5b                   	pop    ebx
c00182ea:	c3                   	ret    
c00182eb:	90                   	nop

c00182ec <ACPI::sleep()>:
c00182ec:	83 ec 0c             	sub    esp,0xc
c00182ef:	a1 60 01 03 c0       	mov    eax,ds:0xc0030160
c00182f4:	85 c0                	test   eax,eax
c00182f6:	74 07                	je     c00182ff <ACPI::sleep()+0x13>
c00182f8:	a1 60 01 03 c0       	mov    eax,ds:0xc0030160
c00182fd:	ff d0                	call   eax
c00182ff:	90                   	nop
c0018300:	83 c4 0c             	add    esp,0xc
c0018303:	c3                   	ret    

c0018304 <CPU::close(int, int, void*)>:
c0018304:	31 c0                	xor    eax,eax
c0018306:	c3                   	ret    
c0018307:	90                   	nop

c0018308 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018308:	55                   	push   ebp
c0018309:	57                   	push   edi
c001830a:	56                   	push   esi
c001830b:	53                   	push   ebx
c001830c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018310:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018314:	89 ce                	mov    esi,ecx
c0018316:	89 d5                	mov    ebp,edx
c0018318:	80 f9 04             	cmp    cl,0x4
c001831b:	75 28                	jne    c0018345 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001831d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018320:	3c 03                	cmp    al,0x3
c0018322:	0f 86 63 01 00 00    	jbe    c001848b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018328:	80 fa 03             	cmp    dl,0x3
c001832b:	0f 84 5a 01 00 00    	je     c001848b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018331:	8d 7a f2             	lea    edi,[edx-0xe]
c0018334:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c0018339:	89 fb                	mov    ebx,edi
c001833b:	80 fb 01             	cmp    bl,0x1
c001833e:	77 4e                	ja     c001838e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018340:	e9 52 01 00 00       	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018345:	80 f9 05             	cmp    cl,0x5
c0018348:	75 4d                	jne    c0018397 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001834a:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c001834f:	80 fa 03             	cmp    dl,0x3
c0018352:	0f 86 3f 01 00 00    	jbe    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018358:	8d 7a fa             	lea    edi,[edx-0x6]
c001835b:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c0018360:	89 fb                	mov    ebx,edi
c0018362:	80 fb 01             	cmp    bl,0x1
c0018365:	0f 86 2c 01 00 00    	jbe    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001836b:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c0018370:	80 fa 08             	cmp    dl,0x8
c0018373:	0f 84 1e 01 00 00    	je     c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018379:	89 d7                	mov    edi,edx
c001837b:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c0018380:	83 e7 fb             	and    edi,0xfffffffb
c0018383:	89 fb                	mov    ebx,edi
c0018385:	80 fb 09             	cmp    bl,0x9
c0018388:	0f 84 09 01 00 00    	je     c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001838e:	31 c0                	xor    eax,eax
c0018390:	89 eb                	mov    ebx,ebp
c0018392:	0f b6 fb             	movzx  edi,bl
c0018395:	eb 30                	jmp    c00183c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018397:	31 c0                	xor    eax,eax
c0018399:	80 f9 06             	cmp    cl,0x6
c001839c:	75 f2                	jne    c0018390 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001839e:	80 fa 0a             	cmp    dl,0xa
c00183a1:	77 ed                	ja     c0018390 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183a3:	bf de 05 00 00       	mov    edi,0x5de
c00183a8:	0f a3 d7             	bt     edi,edx
c00183ab:	73 e3                	jae    c0018390 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183ad:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c00183b2:	e9 e0 00 00 00       	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b7:	39 c7                	cmp    edi,eax
c00183b9:	0f 84 d3 00 00 00    	je     c0018492 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183bf:	40                   	inc    eax
c00183c0:	3d d0 00 00 00       	cmp    eax,0xd0
c00183c5:	74 09                	je     c00183d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183c7:	89 f3                	mov    ebx,esi
c00183c9:	80 fb 0f             	cmp    bl,0xf
c00183cc:	75 f1                	jne    c00183bf <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00183ce:	eb e7                	jmp    c00183b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00183d0:	80 f9 10             	cmp    cl,0x10
c00183d3:	75 14                	jne    c00183e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00183d5:	8d 42 fc             	lea    eax,[edx-0x4]
c00183d8:	83 e0 fb             	and    eax,0xfffffffb
c00183db:	3c 02                	cmp    al,0x2
c00183dd:	76 34                	jbe    c0018413 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183df:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c00183e4:	80 fa 02             	cmp    dl,0x2
c00183e7:	eb 24                	jmp    c001840d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183e9:	80 f9 11             	cmp    cl,0x11
c00183ec:	75 13                	jne    c0018401 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183ee:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c00183f3:	80 fa 03             	cmp    dl,0x3
c00183f6:	0f 85 9b 00 00 00    	jne    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183fc:	e9 91 00 00 00       	jmp    c0018492 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018401:	80 f9 12             	cmp    cl,0x12
c0018404:	75 14                	jne    c001841a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018406:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c001840b:	fe ca                	dec    dl
c001840d:	0f 85 84 00 00 00    	jne    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018413:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c0018418:	eb 7d                	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841a:	80 f9 14             	cmp    cl,0x14
c001841d:	75 12                	jne    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001841f:	4a                   	dec    edx
c0018420:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c0018425:	80 fa 01             	cmp    dl,0x1
c0018428:	77 6d                	ja     c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842a:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c001842f:	eb 66                	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018431:	80 f9 15             	cmp    cl,0x15
c0018434:	75 31                	jne    c0018467 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018436:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c001843b:	80 fa 01             	cmp    dl,0x1
c001843e:	74 57                	je     c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018440:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c0018445:	80 fa 13             	cmp    dl,0x13
c0018448:	76 0c                	jbe    c0018456 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001844a:	80 fa 30             	cmp    dl,0x30
c001844d:	75 48                	jne    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844f:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c0018454:	eb 41                	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018456:	b9 04 00 09 00       	mov    ecx,0x90004
c001845b:	0f a3 d1             	bt     ecx,edx
c001845e:	73 37                	jae    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018460:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c0018465:	eb 30                	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018467:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c001846c:	80 f9 16             	cmp    cl,0x16
c001846f:	75 26                	jne    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018471:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c0018476:	84 d2                	test   dl,dl
c0018478:	74 1d                	je     c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001847a:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c001847f:	80 fa 30             	cmp    dl,0x30
c0018482:	75 13                	jne    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018484:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c0018489:	eb 0c                	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001848b:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018490:	eb 05                	jmp    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018492:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c0018497:	5b                   	pop    ebx
c0018498:	5e                   	pop    esi
c0018499:	5f                   	pop    edi
c001849a:	5d                   	pop    ebp
c001849b:	c3                   	ret    

c001849c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001849c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184a4:	80 f9 04             	cmp    cl,0x4
c00184a7:	75 6b                	jne    c0018514 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00184a9:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00184ae:	80 fa 01             	cmp    dl,0x1
c00184b1:	0f 86 92 02 00 00    	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b7:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00184bc:	80 fa 02             	cmp    dl,0x2
c00184bf:	0f 84 84 02 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c5:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00184ca:	80 fa 03             	cmp    dl,0x3
c00184cd:	0f 84 76 02 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d3:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00184d8:	80 fa 04             	cmp    dl,0x4
c00184db:	0f 84 68 02 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e1:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00184e6:	80 fa 05             	cmp    dl,0x5
c00184e9:	0f 84 5a 02 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ef:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00184f4:	80 fa 07             	cmp    dl,0x7
c00184f7:	0f 84 4c 02 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fd:	83 ea 08             	sub    edx,0x8
c0018500:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c0018505:	80 fa 01             	cmp    dl,0x1
c0018508:	0f 87 3b 02 00 00    	ja     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850e:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018513:	c3                   	ret    
c0018514:	80 f9 05             	cmp    cl,0x5
c0018517:	75 45                	jne    c001855e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018519:	8d 4a ff             	lea    ecx,[edx-0x1]
c001851c:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018521:	80 f9 02             	cmp    cl,0x2
c0018524:	0f 86 1f 02 00 00    	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001852a:	80 fa 04             	cmp    dl,0x4
c001852d:	0f 84 f3 01 00 00    	je     c0018726 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018533:	80 fa 07             	cmp    dl,0x7
c0018536:	0f 84 0d 02 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001853c:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018541:	80 fa 08             	cmp    dl,0x8
c0018544:	0f 84 ff 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854a:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c001854f:	80 fa 09             	cmp    dl,0x9
c0018552:	0f 85 f1 01 00 00    	jne    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018558:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001855d:	c3                   	ret    
c001855e:	80 f9 06             	cmp    cl,0x6
c0018561:	0f 85 85 01 00 00    	jne    c00186ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018567:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c001856c:	80 fa 01             	cmp    dl,0x1
c001856f:	0f 84 d4 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018575:	8d 42 fb             	lea    eax,[edx-0x5]
c0018578:	3c 01                	cmp    al,0x1
c001857a:	0f 86 ac 01 00 00    	jbe    c001872c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018580:	80 fa 03             	cmp    dl,0x3
c0018583:	0f 84 a3 01 00 00    	je     c001872c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018589:	8d 4a f9             	lea    ecx,[edx-0x7]
c001858c:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018591:	80 f9 01             	cmp    cl,0x1
c0018594:	0f 86 af 01 00 00    	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001859a:	80 fa 09             	cmp    dl,0x9
c001859d:	0f 84 8f 01 00 00    	je     c0018732 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00185a3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00185a6:	80 f9 01             	cmp    cl,0x1
c00185a9:	0f 86 9a 01 00 00    	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185af:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00185b4:	80 fa 0d             	cmp    dl,0xd
c00185b7:	0f 84 8c 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bd:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00185c2:	80 fa 0e             	cmp    dl,0xe
c00185c5:	0f 84 7e 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cb:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00185d0:	80 fa 0f             	cmp    dl,0xf
c00185d3:	0f 84 70 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d9:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00185de:	80 fa 15             	cmp    dl,0x15
c00185e1:	0f 84 62 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185ea:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00185ef:	80 f9 01             	cmp    cl,0x1
c00185f2:	0f 86 51 01 00 00    	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f8:	80 fa 1a             	cmp    dl,0x1a
c00185fb:	0f 84 37 01 00 00    	je     c0018738 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018601:	80 fa 1c             	cmp    dl,0x1c
c0018604:	0f 84 34 01 00 00    	je     c001873e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001860a:	80 fa 1d             	cmp    dl,0x1d
c001860d:	0f 84 36 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018613:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c0018618:	80 fa 25             	cmp    dl,0x25
c001861b:	0f 84 28 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018621:	8d 4a da             	lea    ecx,[edx-0x26]
c0018624:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018629:	80 f9 01             	cmp    cl,0x1
c001862c:	0f 86 17 01 00 00    	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018632:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c0018637:	80 fa 2a             	cmp    dl,0x2a
c001863a:	0f 84 09 01 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018640:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c0018645:	80 fa 2c             	cmp    dl,0x2c
c0018648:	0f 84 fb 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864e:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c0018653:	80 fa 2d             	cmp    dl,0x2d
c0018656:	0f 84 ed 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865c:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c0018661:	80 fa 2e             	cmp    dl,0x2e
c0018664:	0f 84 df 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866a:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001866f:	80 fa 2f             	cmp    dl,0x2f
c0018672:	0f 84 d1 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018678:	8d 4a cb             	lea    ecx,[edx-0x35]
c001867b:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018680:	80 f9 01             	cmp    cl,0x1
c0018683:	0f 86 c0 00 00 00    	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018689:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001868e:	80 fa 37             	cmp    dl,0x37
c0018691:	0f 84 b2 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018697:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c001869c:	80 fa 3a             	cmp    dl,0x3a
c001869f:	0f 84 a4 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a5:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00186aa:	80 fa 3c             	cmp    dl,0x3c
c00186ad:	0f 84 96 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b3:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00186b8:	80 fa 3d             	cmp    dl,0x3d
c00186bb:	0f 84 88 00 00 00    	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c1:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00186c6:	80 fa 3e             	cmp    dl,0x3e
c00186c9:	74 7e                	je     c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cb:	8d 42 bb             	lea    eax,[edx-0x45]
c00186ce:	3c 01                	cmp    al,0x1
c00186d0:	76 72                	jbe    c0018744 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186d2:	80 fa 3f             	cmp    dl,0x3f
c00186d5:	74 6d                	je     c0018744 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186d7:	80 fa 4a             	cmp    dl,0x4a
c00186da:	74 0a                	je     c00186e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186dc:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c00186e1:	80 fa 4d             	cmp    dl,0x4d
c00186e4:	75 63                	jne    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e6:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00186eb:	c3                   	ret    
c00186ec:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c00186f1:	80 f9 0b             	cmp    cl,0xb
c00186f4:	75 0a                	jne    c0018700 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186f6:	fe ca                	dec    dl
c00186f8:	75 4f                	jne    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186fa:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00186ff:	c3                   	ret    
c0018700:	80 f9 0f             	cmp    cl,0xf
c0018703:	75 44                	jne    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018705:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c001870a:	80 fa 02             	cmp    dl,0x2
c001870d:	76 3a                	jbe    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018712:	3c 01                	cmp    al,0x1
c0018714:	76 0a                	jbe    c0018720 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018716:	b8 e2 b0 02 c0       	mov    eax,0xc002b0e2
c001871b:	80 fa 06             	cmp    dl,0x6
c001871e:	75 29                	jne    c0018749 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018720:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c0018725:	c3                   	ret    
c0018726:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c001872b:	c3                   	ret    
c001872c:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c0018731:	c3                   	ret    
c0018732:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c0018737:	c3                   	ret    
c0018738:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c001873d:	c3                   	ret    
c001873e:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018743:	c3                   	ret    
c0018744:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018749:	c3                   	ret    

c001874a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001874a:	60                   	pusha  
c001874b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001874f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018757:	9c                   	pushf  
c0018758:	fa                   	cli    
c0018759:	0f 09                	wbinvd 
c001875b:	0f 30                	wrmsr  
c001875d:	9d                   	popf   
c001875e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018762:	89 02                	mov    DWORD PTR [edx],eax
c0018764:	61                   	popa   
c0018765:	c3                   	ret    

c0018766 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018766:	60                   	pusha  
c0018767:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001876b:	9c                   	pushf  
c001876c:	fa                   	cli    
c001876d:	0f 09                	wbinvd 
c001876f:	31 c0                	xor    eax,eax
c0018771:	31 d2                	xor    edx,edx
c0018773:	0f 32                	rdmsr  
c0018775:	9d                   	popf   
c0018776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001877a:	89 02                	mov    DWORD PTR [edx],eax
c001877c:	61                   	popa   
c001877d:	c3                   	ret    

c001877e <CPU::AMD_K6_writeback(int, int, int)>:
c001877e:	56                   	push   esi
c001877f:	53                   	push   ebx
c0018780:	83 ec 10             	sub    esp,0x10
c0018783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018787:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001878c:	75 5d                	jne    c00187eb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001878e:	83 f8 08             	cmp    eax,0x8
c0018791:	75 09                	jne    c001879c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018793:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018798:	7e 13                	jle    c00187ad <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001879a:	eb 30                	jmp    c00187cc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001879c:	83 f8 06             	cmp    eax,0x6
c001879f:	7c 4a                	jl     c00187eb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187a1:	83 f8 07             	cmp    eax,0x7
c00187a4:	7e 07                	jle    c00187ad <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187a6:	83 f8 09             	cmp    eax,0x9
c00187a9:	74 21                	je     c00187cc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187ab:	eb 3e                	jmp    c00187eb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187ad:	89 e6                	mov    esi,esp
c00187af:	8b 1d e4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dae4
c00187b5:	56                   	push   esi
c00187b6:	c1 eb 15             	shr    ebx,0x15
c00187b9:	68 82 00 00 c0       	push   0xc0000082
c00187be:	83 e3 7e             	and    ebx,0x7e
c00187c1:	e8 a0 ff ff ff       	call   c0018766 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187c6:	56                   	push   esi
c00187c7:	6a 00                	push   0x0
c00187c9:	53                   	push   ebx
c00187ca:	eb 12                	jmp    c00187de <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00187cc:	89 e3                	mov    ebx,esp
c00187ce:	53                   	push   ebx
c00187cf:	68 82 00 00 c0       	push   0xc0000082
c00187d4:	e8 8d ff ff ff       	call   c0018766 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187d9:	53                   	push   ebx
c00187da:	6a 00                	push   0x0
c00187dc:	6a 00                	push   0x0
c00187de:	68 82 00 00 c0       	push   0xc0000082
c00187e3:	e8 62 ff ff ff       	call   c001874a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187e8:	83 c4 18             	add    esp,0x18
c00187eb:	83 c4 10             	add    esp,0x10
c00187ee:	5b                   	pop    ebx
c00187ef:	5e                   	pop    esi
c00187f0:	c3                   	ret    
c00187f1:	90                   	nop

c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187f2:	55                   	push   ebp
c00187f3:	57                   	push   edi
c00187f4:	56                   	push   esi
c00187f5:	53                   	push   ebx
c00187f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187fa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187fe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018802:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018806:	39 05 c0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfc0,eax
c001880c:	75 23                	jne    c0018831 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001880e:	a1 ec 05 03 c0       	mov    eax,ds:0xc00305ec
c0018813:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018817:	89 06                	mov    DWORD PTR [esi],eax
c0018819:	a1 e8 05 03 c0       	mov    eax,ds:0xc00305e8
c001881e:	89 07                	mov    DWORD PTR [edi],eax
c0018820:	a1 e4 05 03 c0       	mov    eax,ds:0xc00305e4
c0018825:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018828:	a1 e0 05 03 c0       	mov    eax,ds:0xc00305e0
c001882d:	89 02                	mov    DWORD PTR [edx],eax
c001882f:	eb 3f                	jmp    c0018870 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018831:	31 c9                	xor    ecx,ecx
c0018833:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018837:	0f a2                	cpuid  
c0018839:	89 06                	mov    DWORD PTR [esi],eax
c001883b:	89 1f                	mov    DWORD PTR [edi],ebx
c001883d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018841:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018844:	89 10                	mov    DWORD PTR [eax],edx
c0018846:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001884a:	a3 c0 cf 02 c0       	mov    ds:0xc002cfc0,eax
c001884f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018851:	a3 ec 05 03 c0       	mov    ds:0xc00305ec,eax
c0018856:	8b 07                	mov    eax,DWORD PTR [edi]
c0018858:	a3 e8 05 03 c0       	mov    ds:0xc00305e8,eax
c001885d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018860:	a3 e4 05 03 c0       	mov    ds:0xc00305e4,eax
c0018865:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018869:	8b 00                	mov    eax,DWORD PTR [eax]
c001886b:	a3 e0 05 03 c0       	mov    ds:0xc00305e0,eax
c0018870:	5b                   	pop    ebx
c0018871:	5e                   	pop    esi
c0018872:	5f                   	pop    edi
c0018873:	5d                   	pop    ebp
c0018874:	c3                   	ret    
c0018875:	90                   	nop

c0018876 <CPU::cpuidCheckEDX(unsigned int)>:
c0018876:	83 ec 10             	sub    esp,0x10
c0018879:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001887d:	50                   	push   eax
c001887e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018882:	50                   	push   eax
c0018883:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018887:	50                   	push   eax
c0018888:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888c:	50                   	push   eax
c001888d:	6a 01                	push   0x1
c001888f:	e8 5e ff ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018894:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018898:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001889c:	0f 95 c0             	setne  al
c001889f:	83 c4 24             	add    esp,0x24
c00188a2:	c3                   	ret    
c00188a3:	90                   	nop

c00188a4 <CPU::cpuidCheckECX(unsigned int)>:
c00188a4:	83 ec 10             	sub    esp,0x10
c00188a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ab:	50                   	push   eax
c00188ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b0:	50                   	push   eax
c00188b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b5:	50                   	push   eax
c00188b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ba:	50                   	push   eax
c00188bb:	6a 01                	push   0x1
c00188bd:	e8 30 ff ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188c6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188ca:	0f 95 c0             	setne  al
c00188cd:	83 c4 24             	add    esp,0x24
c00188d0:	c3                   	ret    
c00188d1:	90                   	nop

c00188d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00188d2:	83 ec 10             	sub    esp,0x10
c00188d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188d9:	50                   	push   eax
c00188da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188de:	50                   	push   eax
c00188df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e3:	50                   	push   eax
c00188e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e8:	50                   	push   eax
c00188e9:	6a 07                	push   0x7
c00188eb:	e8 02 ff ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188f4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188f8:	0f 95 c0             	setne  al
c00188fb:	83 c4 24             	add    esp,0x24
c00188fe:	c3                   	ret    
c00188ff:	90                   	nop

c0018900 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018900:	83 ec 10             	sub    esp,0x10
c0018903:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018907:	50                   	push   eax
c0018908:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001890c:	50                   	push   eax
c001890d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018911:	50                   	push   eax
c0018912:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018916:	50                   	push   eax
c0018917:	6a 07                	push   0x7
c0018919:	e8 d4 fe ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001891e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018922:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018926:	0f 95 c0             	setne  al
c0018929:	83 c4 24             	add    esp,0x24
c001892c:	c3                   	ret    
c001892d:	90                   	nop

c001892e <CPU::CPU()>:
c001892e:	83 ec 0c             	sub    esp,0xc
c0018931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018935:	83 ec 08             	sub    esp,0x8
c0018938:	68 e2 b0 02 c0       	push   0xc002b0e2
c001893d:	50                   	push   eax
c001893e:	e8 dd b7 ff ff       	call   c0014120 <Device::Device(char const*)>
c0018943:	83 c4 10             	add    esp,0x10
c0018946:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c001894b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001894f:	89 10                	mov    DWORD PTR [eax],edx
c0018951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018955:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001895f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018963:	05 78 01 00 00       	add    eax,0x178
c0018968:	83 ec 0c             	sub    esp,0xc
c001896b:	50                   	push   eax
c001896c:	e8 e1 66 ff ff       	call   c000f052 <GDT::GDT()>
c0018971:	83 c4 10             	add    esp,0x10
c0018974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018978:	05 7c 09 00 00       	add    eax,0x97c
c001897d:	83 ec 0c             	sub    esp,0xc
c0018980:	50                   	push   eax
c0018981:	e8 2e 69 ff ff       	call   c000f2b4 <IDT::IDT()>
c0018986:	83 c4 10             	add    esp,0x10
c0018989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001898d:	05 7c 11 00 00       	add    eax,0x117c
c0018992:	83 ec 0c             	sub    esp,0xc
c0018995:	50                   	push   eax
c0018996:	e8 af 8a ff ff       	call   c001144a <TSS::TSS()>
c001899b:	83 c4 10             	add    esp,0x10
c001899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189a2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00189a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ad:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189b7:	90                   	nop
c00189b8:	83 c4 0c             	add    esp,0xc
c00189bb:	c3                   	ret    

c00189bc <CPU::displayFeatures()>:
c00189bc:	53                   	push   ebx
c00189bd:	83 ec 10             	sub    esp,0x10
c00189c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189c4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00189ca:	68 f0 ad 02 c0       	push   0xc002adf0
c00189cf:	e8 35 a1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00189d4:	59                   	pop    ecx
c00189d5:	58                   	pop    eax
c00189d6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00189dc:	50                   	push   eax
c00189dd:	68 01 ae 02 c0       	push   0xc002ae01
c00189e2:	e8 22 a1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00189e7:	58                   	pop    eax
c00189e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189ee:	5a                   	pop    edx
c00189ef:	c1 e8 0e             	shr    eax,0xe
c00189f2:	0f b6 c0             	movzx  eax,al
c00189f5:	50                   	push   eax
c00189f6:	68 12 ae 02 c0       	push   0xc002ae12
c00189fb:	e8 09 a1 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018a00:	59                   	pop    ecx
c0018a01:	58                   	pop    eax
c0018a02:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a08:	66 c1 e8 06          	shr    ax,0x6
c0018a0c:	0f b6 c0             	movzx  eax,al
c0018a0f:	50                   	push   eax
c0018a10:	68 23 ae 02 c0       	push   0xc002ae23
c0018a15:	e8 ef a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018a1a:	c7 04 24 bf b2 02 c0 	mov    DWORD PTR [esp],0xc002b2bf
c0018a21:	e8 e3 a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018a26:	83 c4 10             	add    esp,0x10
c0018a29:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018a2e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018a35:	74 05                	je     c0018a3c <CPU::displayFeatures()+0x80>
c0018a37:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018a3c:	52                   	push   edx
c0018a3d:	52                   	push   edx
c0018a3e:	50                   	push   eax
c0018a3f:	68 34 ae 02 c0       	push   0xc002ae34
c0018a44:	e8 c0 a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018a49:	83 c4 10             	add    esp,0x10
c0018a4c:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018a51:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018a58:	78 05                	js     c0018a5f <CPU::displayFeatures()+0xa3>
c0018a5a:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018a5f:	51                   	push   ecx
c0018a60:	51                   	push   ecx
c0018a61:	50                   	push   eax
c0018a62:	68 4b ae 02 c0       	push   0xc002ae4b
c0018a67:	e8 9d a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018a6c:	83 c4 10             	add    esp,0x10
c0018a6f:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018a74:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018a7b:	75 05                	jne    c0018a82 <CPU::displayFeatures()+0xc6>
c0018a7d:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018a82:	52                   	push   edx
c0018a83:	52                   	push   edx
c0018a84:	50                   	push   eax
c0018a85:	68 62 ae 02 c0       	push   0xc002ae62
c0018a8a:	e8 7a a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018a8f:	83 c4 10             	add    esp,0x10
c0018a92:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018a97:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018a9e:	75 05                	jne    c0018aa5 <CPU::displayFeatures()+0xe9>
c0018aa0:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018aa5:	51                   	push   ecx
c0018aa6:	51                   	push   ecx
c0018aa7:	50                   	push   eax
c0018aa8:	68 79 ae 02 c0       	push   0xc002ae79
c0018aad:	e8 57 a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018ab2:	83 c4 10             	add    esp,0x10
c0018ab5:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018aba:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ac1:	75 05                	jne    c0018ac8 <CPU::displayFeatures()+0x10c>
c0018ac3:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018ac8:	52                   	push   edx
c0018ac9:	52                   	push   edx
c0018aca:	50                   	push   eax
c0018acb:	68 90 ae 02 c0       	push   0xc002ae90
c0018ad0:	e8 34 a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018ad5:	83 c4 10             	add    esp,0x10
c0018ad8:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018add:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018ae4:	75 05                	jne    c0018aeb <CPU::displayFeatures()+0x12f>
c0018ae6:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018aeb:	51                   	push   ecx
c0018aec:	51                   	push   ecx
c0018aed:	50                   	push   eax
c0018aee:	68 a7 ae 02 c0       	push   0xc002aea7
c0018af3:	e8 11 a0 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018af8:	83 c4 10             	add    esp,0x10
c0018afb:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018b00:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018b07:	75 05                	jne    c0018b0e <CPU::displayFeatures()+0x152>
c0018b09:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018b0e:	52                   	push   edx
c0018b0f:	52                   	push   edx
c0018b10:	50                   	push   eax
c0018b11:	68 be ae 02 c0       	push   0xc002aebe
c0018b16:	e8 ee 9f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018b1b:	83 c4 10             	add    esp,0x10
c0018b1e:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018b23:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018b2a:	75 05                	jne    c0018b31 <CPU::displayFeatures()+0x175>
c0018b2c:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018b31:	51                   	push   ecx
c0018b32:	51                   	push   ecx
c0018b33:	50                   	push   eax
c0018b34:	68 d5 ae 02 c0       	push   0xc002aed5
c0018b39:	e8 cb 9f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018b3e:	83 c4 10             	add    esp,0x10
c0018b41:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018b46:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018b4d:	75 05                	jne    c0018b54 <CPU::displayFeatures()+0x198>
c0018b4f:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018b54:	52                   	push   edx
c0018b55:	52                   	push   edx
c0018b56:	50                   	push   eax
c0018b57:	68 ec ae 02 c0       	push   0xc002aeec
c0018b5c:	e8 a8 9f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018b61:	83 c4 10             	add    esp,0x10
c0018b64:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018b69:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018b70:	75 05                	jne    c0018b77 <CPU::displayFeatures()+0x1bb>
c0018b72:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018b77:	51                   	push   ecx
c0018b78:	51                   	push   ecx
c0018b79:	50                   	push   eax
c0018b7a:	68 03 af 02 c0       	push   0xc002af03
c0018b7f:	e8 85 9f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018b84:	83 c4 10             	add    esp,0x10
c0018b87:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018b8c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018b93:	75 05                	jne    c0018b9a <CPU::displayFeatures()+0x1de>
c0018b95:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018b9a:	52                   	push   edx
c0018b9b:	52                   	push   edx
c0018b9c:	50                   	push   eax
c0018b9d:	68 1a af 02 c0       	push   0xc002af1a
c0018ba2:	e8 62 9f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018ba7:	83 c4 10             	add    esp,0x10
c0018baa:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018baf:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018bb6:	75 05                	jne    c0018bbd <CPU::displayFeatures()+0x201>
c0018bb8:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018bbd:	51                   	push   ecx
c0018bbe:	51                   	push   ecx
c0018bbf:	50                   	push   eax
c0018bc0:	68 31 af 02 c0       	push   0xc002af31
c0018bc5:	e8 3f 9f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018bd2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018bd9:	75 05                	jne    c0018be0 <CPU::displayFeatures()+0x224>
c0018bdb:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018be0:	52                   	push   edx
c0018be1:	52                   	push   edx
c0018be2:	50                   	push   eax
c0018be3:	68 48 af 02 c0       	push   0xc002af48
c0018be8:	e8 1c 9f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018bf5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018bfc:	78 05                	js     c0018c03 <CPU::displayFeatures()+0x247>
c0018bfe:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018c03:	51                   	push   ecx
c0018c04:	51                   	push   ecx
c0018c05:	50                   	push   eax
c0018c06:	68 5f af 02 c0       	push   0xc002af5f
c0018c0b:	e8 f9 9e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018c10:	83 c4 10             	add    esp,0x10
c0018c13:	b8 b2 98 02 c0       	mov    eax,0xc00298b2
c0018c18:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018c1f:	75 05                	jne    c0018c26 <CPU::displayFeatures()+0x26a>
c0018c21:	b8 b6 98 02 c0       	mov    eax,0xc00298b6
c0018c26:	52                   	push   edx
c0018c27:	52                   	push   edx
c0018c28:	50                   	push   eax
c0018c29:	68 76 af 02 c0       	push   0xc002af76
c0018c2e:	e8 d6 9e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0018c33:	83 c4 18             	add    esp,0x18
c0018c36:	5b                   	pop    ebx
c0018c37:	c3                   	ret    

c0018c38 <CPU::detectFeatures()>:
c0018c38:	55                   	push   ebp
c0018c39:	57                   	push   edi
c0018c3a:	56                   	push   esi
c0018c3b:	53                   	push   ebx
c0018c3c:	83 ec 50             	sub    esp,0x50
c0018c3f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018c43:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018c4d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018c54:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018c5a:	6a 0d                	push   0xd
c0018c5c:	6a 00                	push   0x0
c0018c5e:	57                   	push   edi
c0018c5f:	e8 14 7b fe ff       	call   c0000778 <memset>
c0018c64:	83 c4 10             	add    esp,0x10
c0018c67:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0018c6c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018c73:	0f 84 20 09 00 00    	je     c0019599 <CPU::detectFeatures()+0x961>
c0018c79:	83 ec 0c             	sub    esp,0xc
c0018c7c:	6a 10                	push   0x10
c0018c7e:	e8 f3 fb ff ff       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c0018c83:	83 e0 01             	and    eax,0x1
c0018c86:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c89:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c8f:	83 e0 fd             	and    eax,0xfffffffd
c0018c92:	09 d0                	or     eax,edx
c0018c94:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c9a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018ca1:	e8 d0 fb ff ff       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c0018ca6:	83 e0 01             	and    eax,0x1
c0018ca9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018cb0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cb6:	83 e0 fb             	and    eax,0xfffffffb
c0018cb9:	09 d0                	or     eax,edx
c0018cbb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cc1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018cc8:	e8 a9 fb ff ff       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c0018ccd:	83 e0 01             	and    eax,0x1
c0018cd0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cd7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cdd:	83 e0 f7             	and    eax,0xfffffff7
c0018ce0:	09 d0                	or     eax,edx
c0018ce2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ce8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018cef:	e8 82 fb ff ff       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c0018cf4:	83 e0 01             	and    eax,0x1
c0018cf7:	c1 e0 04             	shl    eax,0x4
c0018cfa:	88 c2                	mov    dl,al
c0018cfc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d02:	83 e0 ef             	and    eax,0xffffffef
c0018d05:	09 d0                	or     eax,edx
c0018d07:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d0d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018d14:	e8 5d fb ff ff       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c0018d19:	83 e0 01             	and    eax,0x1
c0018d1c:	c1 e0 05             	shl    eax,0x5
c0018d1f:	88 c2                	mov    dl,al
c0018d21:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d27:	83 e0 df             	and    eax,0xffffffdf
c0018d2a:	09 d0                	or     eax,edx
c0018d2c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d32:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018d39:	e8 38 fb ff ff       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c0018d3e:	83 e0 01             	and    eax,0x1
c0018d41:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d44:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d4a:	83 e0 fd             	and    eax,0xfffffffd
c0018d4d:	09 d0                	or     eax,edx
c0018d4f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d55:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018d5c:	e8 15 fb ff ff       	call   c0018876 <CPU::cpuidCheckEDX(unsigned int)>
c0018d61:	83 e0 01             	and    eax,0x1
c0018d64:	c1 e0 06             	shl    eax,0x6
c0018d67:	88 c2                	mov    dl,al
c0018d69:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d6f:	83 e0 bf             	and    eax,0xffffffbf
c0018d72:	09 d0                	or     eax,edx
c0018d74:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d7a:	58                   	pop    eax
c0018d7b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d7f:	56                   	push   esi
c0018d80:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d84:	55                   	push   ebp
c0018d85:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d89:	50                   	push   eax
c0018d8a:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018d8e:	52                   	push   edx
c0018d8f:	6a 00                	push   0x0
c0018d91:	e8 5c fa ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d96:	83 c4 1c             	add    esp,0x1c
c0018d99:	6a 04                	push   0x4
c0018d9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d9f:	50                   	push   eax
c0018da0:	57                   	push   edi
c0018da1:	e8 9e 79 fe ff       	call   c0000744 <memcpy>
c0018da6:	83 c4 0c             	add    esp,0xc
c0018da9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018daf:	6a 04                	push   0x4
c0018db1:	56                   	push   esi
c0018db2:	50                   	push   eax
c0018db3:	e8 8c 79 fe ff       	call   c0000744 <memcpy>
c0018db8:	83 c4 0c             	add    esp,0xc
c0018dbb:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018dc1:	6a 04                	push   0x4
c0018dc3:	55                   	push   ebp
c0018dc4:	50                   	push   eax
c0018dc5:	e8 7a 79 fe ff       	call   c0000744 <memcpy>
c0018dca:	58                   	pop    eax
c0018dcb:	5a                   	pop    edx
c0018dcc:	68 8d af 02 c0       	push   0xc002af8d
c0018dd1:	57                   	push   edi
c0018dd2:	e8 e9 7a fe ff       	call   c00008c0 <strcmp>
c0018dd7:	83 c4 10             	add    esp,0x10
c0018dda:	85 c0                	test   eax,eax
c0018ddc:	75 0f                	jne    c0018ded <CPU::detectFeatures()+0x1b5>
c0018dde:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018de8:	e9 22 02 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018ded:	50                   	push   eax
c0018dee:	50                   	push   eax
c0018def:	68 9a af 02 c0       	push   0xc002af9a
c0018df4:	57                   	push   edi
c0018df5:	e8 c6 7a fe ff       	call   c00008c0 <strcmp>
c0018dfa:	83 c4 10             	add    esp,0x10
c0018dfd:	85 c0                	test   eax,eax
c0018dff:	74 dd                	je     c0018dde <CPU::detectFeatures()+0x1a6>
c0018e01:	51                   	push   ecx
c0018e02:	51                   	push   ecx
c0018e03:	68 a7 af 02 c0       	push   0xc002afa7
c0018e08:	57                   	push   edi
c0018e09:	e8 b2 7a fe ff       	call   c00008c0 <strcmp>
c0018e0e:	83 c4 10             	add    esp,0x10
c0018e11:	85 c0                	test   eax,eax
c0018e13:	74 2a                	je     c0018e3f <CPU::detectFeatures()+0x207>
c0018e15:	52                   	push   edx
c0018e16:	52                   	push   edx
c0018e17:	68 b4 af 02 c0       	push   0xc002afb4
c0018e1c:	57                   	push   edi
c0018e1d:	e8 9e 7a fe ff       	call   c00008c0 <strcmp>
c0018e22:	83 c4 10             	add    esp,0x10
c0018e25:	85 c0                	test   eax,eax
c0018e27:	74 16                	je     c0018e3f <CPU::detectFeatures()+0x207>
c0018e29:	50                   	push   eax
c0018e2a:	50                   	push   eax
c0018e2b:	68 c1 af 02 c0       	push   0xc002afc1
c0018e30:	57                   	push   edi
c0018e31:	e8 8a 7a fe ff       	call   c00008c0 <strcmp>
c0018e36:	83 c4 10             	add    esp,0x10
c0018e39:	85 c0                	test   eax,eax
c0018e3b:	74 48                	je     c0018e85 <CPU::detectFeatures()+0x24d>
c0018e3d:	eb 0f                	jmp    c0018e4e <CPU::detectFeatures()+0x216>
c0018e3f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018e49:	e9 c1 01 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018e4e:	50                   	push   eax
c0018e4f:	50                   	push   eax
c0018e50:	68 ce af 02 c0       	push   0xc002afce
c0018e55:	57                   	push   edi
c0018e56:	e8 65 7a fe ff       	call   c00008c0 <strcmp>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	85 c0                	test   eax,eax
c0018e60:	74 23                	je     c0018e85 <CPU::detectFeatures()+0x24d>
c0018e62:	50                   	push   eax
c0018e63:	50                   	push   eax
c0018e64:	68 db af 02 c0       	push   0xc002afdb
c0018e69:	57                   	push   edi
c0018e6a:	e8 51 7a fe ff       	call   c00008c0 <strcmp>
c0018e6f:	83 c4 10             	add    esp,0x10
c0018e72:	85 c0                	test   eax,eax
c0018e74:	75 1e                	jne    c0018e94 <CPU::detectFeatures()+0x25c>
c0018e76:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e80:	e9 8a 01 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018e85:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018e8f:	e9 7b 01 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018e94:	50                   	push   eax
c0018e95:	50                   	push   eax
c0018e96:	68 e8 af 02 c0       	push   0xc002afe8
c0018e9b:	57                   	push   edi
c0018e9c:	e8 1f 7a fe ff       	call   c00008c0 <strcmp>
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	85 c0                	test   eax,eax
c0018ea6:	75 0f                	jne    c0018eb7 <CPU::detectFeatures()+0x27f>
c0018ea8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018eb2:	e9 58 01 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018eb7:	50                   	push   eax
c0018eb8:	50                   	push   eax
c0018eb9:	68 a7 af 02 c0       	push   0xc002afa7
c0018ebe:	57                   	push   edi
c0018ebf:	e8 fc 79 fe ff       	call   c00008c0 <strcmp>
c0018ec4:	83 c4 10             	add    esp,0x10
c0018ec7:	85 c0                	test   eax,eax
c0018ec9:	75 0f                	jne    c0018eda <CPU::detectFeatures()+0x2a2>
c0018ecb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018ed5:	e9 35 01 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018eda:	50                   	push   eax
c0018edb:	50                   	push   eax
c0018edc:	68 f5 af 02 c0       	push   0xc002aff5
c0018ee1:	57                   	push   edi
c0018ee2:	e8 d9 79 fe ff       	call   c00008c0 <strcmp>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	85 c0                	test   eax,eax
c0018eec:	75 0f                	jne    c0018efd <CPU::detectFeatures()+0x2c5>
c0018eee:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018ef8:	e9 12 01 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018efd:	51                   	push   ecx
c0018efe:	51                   	push   ecx
c0018eff:	68 02 b0 02 c0       	push   0xc002b002
c0018f04:	57                   	push   edi
c0018f05:	e8 b6 79 fe ff       	call   c00008c0 <strcmp>
c0018f0a:	83 c4 10             	add    esp,0x10
c0018f0d:	85 c0                	test   eax,eax
c0018f0f:	75 0f                	jne    c0018f20 <CPU::detectFeatures()+0x2e8>
c0018f11:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018f1b:	e9 ef 00 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018f20:	52                   	push   edx
c0018f21:	52                   	push   edx
c0018f22:	68 0f b0 02 c0       	push   0xc002b00f
c0018f27:	57                   	push   edi
c0018f28:	e8 93 79 fe ff       	call   c00008c0 <strcmp>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	85 c0                	test   eax,eax
c0018f32:	75 0f                	jne    c0018f43 <CPU::detectFeatures()+0x30b>
c0018f34:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018f3e:	e9 cc 00 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018f43:	50                   	push   eax
c0018f44:	50                   	push   eax
c0018f45:	68 1c b0 02 c0       	push   0xc002b01c
c0018f4a:	57                   	push   edi
c0018f4b:	e8 70 79 fe ff       	call   c00008c0 <strcmp>
c0018f50:	83 c4 10             	add    esp,0x10
c0018f53:	85 c0                	test   eax,eax
c0018f55:	75 0f                	jne    c0018f66 <CPU::detectFeatures()+0x32e>
c0018f57:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018f61:	e9 a9 00 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018f66:	50                   	push   eax
c0018f67:	50                   	push   eax
c0018f68:	68 29 b0 02 c0       	push   0xc002b029
c0018f6d:	57                   	push   edi
c0018f6e:	e8 4d 79 fe ff       	call   c00008c0 <strcmp>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	85 c0                	test   eax,eax
c0018f78:	75 0f                	jne    c0018f89 <CPU::detectFeatures()+0x351>
c0018f7a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018f84:	e9 86 00 00 00       	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018f89:	50                   	push   eax
c0018f8a:	50                   	push   eax
c0018f8b:	68 36 b0 02 c0       	push   0xc002b036
c0018f90:	57                   	push   edi
c0018f91:	e8 2a 79 fe ff       	call   c00008c0 <strcmp>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	85 c0                	test   eax,eax
c0018f9b:	75 0c                	jne    c0018fa9 <CPU::detectFeatures()+0x371>
c0018f9d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018fa7:	eb 66                	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018fa9:	50                   	push   eax
c0018faa:	50                   	push   eax
c0018fab:	68 43 b0 02 c0       	push   0xc002b043
c0018fb0:	57                   	push   edi
c0018fb1:	e8 0a 79 fe ff       	call   c00008c0 <strcmp>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	85 c0                	test   eax,eax
c0018fbb:	75 0c                	jne    c0018fc9 <CPU::detectFeatures()+0x391>
c0018fbd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018fc7:	eb 46                	jmp    c001900f <CPU::detectFeatures()+0x3d7>
c0018fc9:	50                   	push   eax
c0018fca:	50                   	push   eax
c0018fcb:	68 50 b0 02 c0       	push   0xc002b050
c0018fd0:	57                   	push   edi
c0018fd1:	e8 ea 78 fe ff       	call   c00008c0 <strcmp>
c0018fd6:	83 c4 10             	add    esp,0x10
c0018fd9:	85 c0                	test   eax,eax
c0018fdb:	74 e0                	je     c0018fbd <CPU::detectFeatures()+0x385>
c0018fdd:	50                   	push   eax
c0018fde:	50                   	push   eax
c0018fdf:	68 5d b0 02 c0       	push   0xc002b05d
c0018fe4:	57                   	push   edi
c0018fe5:	e8 d6 78 fe ff       	call   c00008c0 <strcmp>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	85 c0                	test   eax,eax
c0018fef:	74 cc                	je     c0018fbd <CPU::detectFeatures()+0x385>
c0018ff1:	51                   	push   ecx
c0018ff2:	51                   	push   ecx
c0018ff3:	68 6a b0 02 c0       	push   0xc002b06a
c0018ff8:	57                   	push   edi
c0018ff9:	e8 c2 78 fe ff       	call   c00008c0 <strcmp>
c0018ffe:	83 c4 10             	add    esp,0x10
c0019001:	85 c0                	test   eax,eax
c0019003:	74 b8                	je     c0018fbd <CPU::detectFeatures()+0x385>
c0019005:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001900f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019014:	0f 86 be 00 00 00    	jbe    c00190d8 <CPU::detectFeatures()+0x4a0>
c001901a:	83 ec 0c             	sub    esp,0xc
c001901d:	68 80 00 00 00       	push   0x80
c0019022:	e8 ab f8 ff ff       	call   c00188d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019027:	83 e0 01             	and    eax,0x1
c001902a:	c1 e0 06             	shl    eax,0x6
c001902d:	88 c2                	mov    dl,al
c001902f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019035:	83 e0 bf             	and    eax,0xffffffbf
c0019038:	09 d0                	or     eax,edx
c001903a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019040:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019047:	e8 86 f8 ff ff       	call   c00188d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001904c:	83 e0 01             	and    eax,0x1
c001904f:	c1 e0 04             	shl    eax,0x4
c0019052:	88 c2                	mov    dl,al
c0019054:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001905a:	83 e0 ef             	and    eax,0xffffffef
c001905d:	09 d0                	or     eax,edx
c001905f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019065:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001906c:	e8 61 f8 ff ff       	call   c00188d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019071:	c1 e0 07             	shl    eax,0x7
c0019074:	88 c2                	mov    dl,al
c0019076:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001907c:	83 e0 7f             	and    eax,0x7f
c001907f:	09 d0                	or     eax,edx
c0019081:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019087:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001908e:	e8 6d f8 ff ff       	call   c0018900 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019093:	83 e0 01             	and    eax,0x1
c0019096:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001909d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190a3:	83 e0 f7             	and    eax,0xfffffff7
c00190a6:	09 d0                	or     eax,edx
c00190a8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190ae:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00190b5:	e8 46 f8 ff ff       	call   c0018900 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00190ba:	83 c4 10             	add    esp,0x10
c00190bd:	83 e0 01             	and    eax,0x1
c00190c0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190c7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190cd:	83 e0 fb             	and    eax,0xfffffffb
c00190d0:	09 d0                	or     eax,edx
c00190d2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190d8:	83 ec 0c             	sub    esp,0xc
c00190db:	56                   	push   esi
c00190dc:	55                   	push   ebp
c00190dd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00190e1:	57                   	push   edi
c00190e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190e6:	50                   	push   eax
c00190e7:	6a 01                	push   0x1
c00190e9:	e8 04 f7 ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190ee:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00190f2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00190f8:	88 ca                	mov    dl,cl
c00190fa:	83 e0 f0             	and    eax,0xfffffff0
c00190fd:	83 e2 0f             	and    edx,0xf
c0019100:	09 d0                	or     eax,edx
c0019102:	88 ca                	mov    dl,cl
c0019104:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001910a:	c0 ea 04             	shr    dl,0x4
c001910d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019111:	0f b6 c2             	movzx  eax,dl
c0019114:	83 c4 20             	add    esp,0x20
c0019117:	c1 e0 06             	shl    eax,0x6
c001911a:	89 c5                	mov    ebp,eax
c001911c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019122:	66 25 3f c0          	and    ax,0xc03f
c0019126:	09 e8                	or     eax,ebp
c0019128:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001912f:	89 c8                	mov    eax,ecx
c0019131:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019137:	c1 e8 08             	shr    eax,0x8
c001913a:	83 e2 3f             	and    edx,0x3f
c001913d:	83 e0 0f             	and    eax,0xf
c0019140:	89 c5                	mov    ebp,eax
c0019142:	c1 e5 06             	shl    ebp,0x6
c0019145:	09 d5                	or     ebp,edx
c0019147:	89 ea                	mov    edx,ebp
c0019149:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001914f:	88 c2                	mov    dl,al
c0019151:	c0 ea 02             	shr    dl,0x2
c0019154:	89 d5                	mov    ebp,edx
c0019156:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001915c:	83 e2 c0             	and    edx,0xffffffc0
c001915f:	09 d5                	or     ebp,edx
c0019161:	89 ea                	mov    edx,ebp
c0019163:	89 cd                	mov    ebp,ecx
c0019165:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001916b:	c1 ed 0c             	shr    ebp,0xc
c001916e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019174:	83 e5 03             	and    ebp,0x3
c0019177:	83 e2 cf             	and    edx,0xffffffcf
c001917a:	c1 e5 04             	shl    ebp,0x4
c001917d:	09 d5                	or     ebp,edx
c001917f:	3c 06                	cmp    al,0x6
c0019181:	89 ea                	mov    edx,ebp
c0019183:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019189:	74 04                	je     c001918f <CPU::detectFeatures()+0x557>
c001918b:	3c 0f                	cmp    al,0xf
c001918d:	75 5c                	jne    c00191eb <CPU::detectFeatures()+0x5b3>
c001918f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019193:	89 cd                	mov    ebp,ecx
c0019195:	c1 ed 10             	shr    ebp,0x10
c0019198:	c1 e5 04             	shl    ebp,0x4
c001919b:	09 ea                	or     edx,ebp
c001919d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191a3:	0f b6 d2             	movzx  edx,dl
c00191a6:	66 81 e5 3f c0       	and    bp,0xc03f
c00191ab:	c1 e2 06             	shl    edx,0x6
c00191ae:	09 ea                	or     edx,ebp
c00191b0:	3c 0f                	cmp    al,0xf
c00191b2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00191b9:	75 30                	jne    c00191eb <CPU::detectFeatures()+0x5b3>
c00191bb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00191c1:	c1 e9 14             	shr    ecx,0x14
c00191c4:	83 e0 3f             	and    eax,0x3f
c00191c7:	83 c1 0f             	add    ecx,0xf
c00191ca:	88 ca                	mov    dl,cl
c00191cc:	c0 e9 02             	shr    cl,0x2
c00191cf:	c1 e2 06             	shl    edx,0x6
c00191d2:	09 d0                	or     eax,edx
c00191d4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00191da:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00191e0:	83 e0 c0             	and    eax,0xffffffc0
c00191e3:	09 c1                	or     ecx,eax
c00191e5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00191eb:	83 ec 0c             	sub    esp,0xc
c00191ee:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00191f5:	56                   	push   esi
c00191f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191fa:	50                   	push   eax
c00191fb:	57                   	push   edi
c00191fc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019200:	55                   	push   ebp
c0019201:	68 00 00 00 80       	push   0x80000000
c0019206:	e8 e7 f5 ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001920b:	83 c4 20             	add    esp,0x20
c001920e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019216:	8d 44 24 18          	lea    eax,[esp+0x18]
c001921a:	76 1e                	jbe    c001923a <CPU::detectFeatures()+0x602>
c001921c:	83 ec 0c             	sub    esp,0xc
c001921f:	56                   	push   esi
c0019220:	50                   	push   eax
c0019221:	57                   	push   edi
c0019222:	55                   	push   ebp
c0019223:	68 01 00 00 80       	push   0x80000001
c0019228:	e8 c5 f5 ff ff       	call   c00187f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001922d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019237:	83 c4 20             	add    esp,0x20
c001923a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019240:	83 f8 01             	cmp    eax,0x1
c0019243:	75 6f                	jne    c00192b4 <CPU::detectFeatures()+0x67c>
c0019245:	51                   	push   ecx
c0019246:	51                   	push   ecx
c0019247:	68 76 b0 02 c0       	push   0xc002b076
c001924c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019250:	56                   	push   esi
c0019251:	e8 de 75 fe ff       	call   c0000834 <strcpy>
c0019256:	5f                   	pop    edi
c0019257:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001925d:	5d                   	pop    ebp
c001925e:	66 c1 e8 06          	shr    ax,0x6
c0019262:	0f b6 c0             	movzx  eax,al
c0019265:	50                   	push   eax
c0019266:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001926c:	c1 e8 0e             	shr    eax,0xe
c001926f:	0f b6 c0             	movzx  eax,al
c0019272:	50                   	push   eax
c0019273:	e8 24 f2 ff ff       	call   c001849c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019278:	5a                   	pop    edx
c0019279:	59                   	pop    ecx
c001927a:	50                   	push   eax
c001927b:	56                   	push   esi
c001927c:	e8 f3 76 fe ff       	call   c0000974 <strcat>
c0019281:	5f                   	pop    edi
c0019282:	5d                   	pop    ebp
c0019283:	56                   	push   esi
c0019284:	53                   	push   ebx
c0019285:	e8 88 ae ff ff       	call   c0014112 <Device::setName(char const*)>
c001928a:	58                   	pop    eax
c001928b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019291:	5a                   	pop    edx
c0019292:	68 7d b0 02 c0       	push   0xc002b07d
c0019297:	50                   	push   eax
c0019298:	e8 23 76 fe ff       	call   c00008c0 <strcmp>
c001929d:	83 c4 10             	add    esp,0x10
c00192a0:	85 c0                	test   eax,eax
c00192a2:	0f 85 71 03 00 00    	jne    c0019619 <CPU::detectFeatures()+0x9e1>
c00192a8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00192af:	e9 65 03 00 00       	jmp    c0019619 <CPU::detectFeatures()+0x9e1>
c00192b4:	83 f8 02             	cmp    eax,0x2
c00192b7:	0f 85 b5 00 00 00    	jne    c0019372 <CPU::detectFeatures()+0x73a>
c00192bd:	57                   	push   edi
c00192be:	57                   	push   edi
c00192bf:	68 8f b0 02 c0       	push   0xc002b08f
c00192c4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192c8:	56                   	push   esi
c00192c9:	e8 66 75 fe ff       	call   c0000834 <strcpy>
c00192ce:	5d                   	pop    ebp
c00192cf:	58                   	pop    eax
c00192d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192d6:	66 c1 e8 06          	shr    ax,0x6
c00192da:	0f b6 c0             	movzx  eax,al
c00192dd:	50                   	push   eax
c00192de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192e4:	c1 e8 0e             	shr    eax,0xe
c00192e7:	0f b6 c0             	movzx  eax,al
c00192ea:	50                   	push   eax
c00192eb:	e8 18 f0 ff ff       	call   c0018308 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00192f0:	5a                   	pop    edx
c00192f1:	59                   	pop    ecx
c00192f2:	50                   	push   eax
c00192f3:	56                   	push   esi
c00192f4:	e8 7b 76 fe ff       	call   c0000974 <strcat>
c00192f9:	5f                   	pop    edi
c00192fa:	5d                   	pop    ebp
c00192fb:	56                   	push   esi
c00192fc:	53                   	push   ebx
c00192fd:	e8 10 ae ff ff       	call   c0014112 <Device::setName(char const*)>
c0019302:	58                   	pop    eax
c0019303:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019309:	5a                   	pop    edx
c001930a:	68 94 b0 02 c0       	push   0xc002b094
c001930f:	50                   	push   eax
c0019310:	e8 ab 75 fe ff       	call   c00008c0 <strcmp>
c0019315:	83 c4 10             	add    esp,0x10
c0019318:	85 c0                	test   eax,eax
c001931a:	75 20                	jne    c001933c <CPU::detectFeatures()+0x704>
c001931c:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c0019322:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019328:	a8 01                	test   al,0x1
c001932a:	74 10                	je     c001933c <CPU::detectFeatures()+0x704>
c001932c:	83 e0 fe             	and    eax,0xfffffffe
c001932f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019335:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001933c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019342:	c1 e8 0e             	shr    eax,0xe
c0019345:	3c 05                	cmp    al,0x5
c0019347:	0f 85 cc 02 00 00    	jne    c0019619 <CPU::detectFeatures()+0x9e1>
c001934d:	56                   	push   esi
c001934e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019354:	83 e0 0f             	and    eax,0xf
c0019357:	50                   	push   eax
c0019358:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001935e:	66 c1 e8 06          	shr    ax,0x6
c0019362:	0f b6 c0             	movzx  eax,al
c0019365:	50                   	push   eax
c0019366:	6a 05                	push   0x5
c0019368:	e8 11 f4 ff ff       	call   c001877e <CPU::AMD_K6_writeback(int, int, int)>
c001936d:	e9 1f 02 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x959>
c0019372:	8d 50 fd             	lea    edx,[eax-0x3]
c0019375:	83 fa 01             	cmp    edx,0x1
c0019378:	76 09                	jbe    c0019383 <CPU::detectFeatures()+0x74b>
c001937a:	83 f8 06             	cmp    eax,0x6
c001937d:	0f 85 91 01 00 00    	jne    c0019514 <CPU::detectFeatures()+0x8dc>
c0019383:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019389:	c1 ea 0e             	shr    edx,0xe
c001938c:	80 fa 05             	cmp    dl,0x5
c001938f:	75 7b                	jne    c001940c <CPU::detectFeatures()+0x7d4>
c0019391:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019397:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001939c:	66 81 fa 00 01       	cmp    dx,0x100
c00193a1:	75 0c                	jne    c00193af <CPU::detectFeatures()+0x777>
c00193a3:	51                   	push   ecx
c00193a4:	51                   	push   ecx
c00193a5:	68 9b b0 02 c0       	push   0xc002b09b
c00193aa:	e9 dc 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c00193af:	66 81 fa 00 02       	cmp    dx,0x200
c00193b4:	75 0c                	jne    c00193c2 <CPU::detectFeatures()+0x78a>
c00193b6:	52                   	push   edx
c00193b7:	52                   	push   edx
c00193b8:	68 ae b0 02 c0       	push   0xc002b0ae
c00193bd:	e9 c9 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c00193c2:	66 81 fa 40 02       	cmp    dx,0x240
c00193c7:	75 0c                	jne    c00193d5 <CPU::detectFeatures()+0x79d>
c00193c9:	50                   	push   eax
c00193ca:	50                   	push   eax
c00193cb:	68 c0 b0 02 c0       	push   0xc002b0c0
c00193d0:	e9 b6 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c00193d5:	83 f8 06             	cmp    eax,0x6
c00193d8:	75 0c                	jne    c00193e6 <CPU::detectFeatures()+0x7ae>
c00193da:	50                   	push   eax
c00193db:	50                   	push   eax
c00193dc:	68 d2 b0 02 c0       	push   0xc002b0d2
c00193e1:	e9 a5 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c00193e6:	83 f8 04             	cmp    eax,0x4
c00193e9:	75 0c                	jne    c00193f7 <CPU::detectFeatures()+0x7bf>
c00193eb:	50                   	push   eax
c00193ec:	50                   	push   eax
c00193ed:	68 de b0 02 c0       	push   0xc002b0de
c00193f2:	e9 94 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c00193f7:	83 f8 03             	cmp    eax,0x3
c00193fa:	0f 85 19 02 00 00    	jne    c0019619 <CPU::detectFeatures()+0x9e1>
c0019400:	50                   	push   eax
c0019401:	50                   	push   eax
c0019402:	68 e6 b0 02 c0       	push   0xc002b0e6
c0019407:	e9 7f 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c001940c:	80 fa 06             	cmp    dl,0x6
c001940f:	0f 85 db 00 00 00    	jne    c00194f0 <CPU::detectFeatures()+0x8b8>
c0019415:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001941b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019420:	66 81 fa 80 01       	cmp    dx,0x180
c0019425:	75 0c                	jne    c0019433 <CPU::detectFeatures()+0x7fb>
c0019427:	50                   	push   eax
c0019428:	50                   	push   eax
c0019429:	68 f1 b0 02 c0       	push   0xc002b0f1
c001942e:	e9 58 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019433:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019439:	66 f7 c1 80 ff       	test   cx,0xff80
c001943e:	75 0c                	jne    c001944c <CPU::detectFeatures()+0x814>
c0019440:	50                   	push   eax
c0019441:	50                   	push   eax
c0019442:	68 01 b1 02 c0       	push   0xc002b101
c0019447:	e9 3f 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c001944c:	66 81 fa 40 02       	cmp    dx,0x240
c0019451:	75 0c                	jne    c001945f <CPU::detectFeatures()+0x827>
c0019453:	55                   	push   ebp
c0019454:	55                   	push   ebp
c0019455:	68 08 b1 02 c0       	push   0xc002b108
c001945a:	e9 2c 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c001945f:	66 81 fa 80 02       	cmp    dx,0x280
c0019464:	75 0c                	jne    c0019472 <CPU::detectFeatures()+0x83a>
c0019466:	57                   	push   edi
c0019467:	57                   	push   edi
c0019468:	68 11 b1 02 c0       	push   0xc002b111
c001946d:	e9 19 01 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019472:	66 81 fa 40 03       	cmp    dx,0x340
c0019477:	74 ed                	je     c0019466 <CPU::detectFeatures()+0x82e>
c0019479:	66 81 fa c0 03       	cmp    dx,0x3c0
c001947e:	75 0c                	jne    c001948c <CPU::detectFeatures()+0x854>
c0019480:	56                   	push   esi
c0019481:	56                   	push   esi
c0019482:	68 18 b1 02 c0       	push   0xc002b118
c0019487:	e9 ff 00 00 00       	jmp    c001958b <CPU::detectFeatures()+0x953>
c001948c:	83 f8 06             	cmp    eax,0x6
c001948f:	0f 84 45 ff ff ff    	je     c00193da <CPU::detectFeatures()+0x7a2>
c0019495:	83 f8 04             	cmp    eax,0x4
c0019498:	0f 84 4d ff ff ff    	je     c00193eb <CPU::detectFeatures()+0x7b3>
c001949e:	83 f8 03             	cmp    eax,0x3
c00194a1:	0f 85 72 01 00 00    	jne    c0019619 <CPU::detectFeatures()+0x9e1>
c00194a7:	51                   	push   ecx
c00194a8:	51                   	push   ecx
c00194a9:	68 21 b1 02 c0       	push   0xc002b121
c00194ae:	53                   	push   ebx
c00194af:	e8 5e ac ff ff       	call   c0014112 <Device::setName(char const*)>
c00194b4:	b1 c1                	mov    cl,0xc1
c00194b6:	88 c8                	mov    al,cl
c00194b8:	e6 22                	out    0x22,al
c00194ba:	e4 23                	in     al,0x23
c00194bc:	88 c2                	mov    dl,al
c00194be:	88 c8                	mov    al,cl
c00194c0:	e6 22                	out    0x22,al
c00194c2:	88 d0                	mov    al,dl
c00194c4:	83 c8 10             	or     eax,0x10
c00194c7:	e6 23                	out    0x23,al
c00194c9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194d0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194d3:	89 d0                	mov    eax,edx
c00194d5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00194db:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00194df:	40                   	inc    eax
c00194e0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194e6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194eb:	e9 a1 00 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x959>
c00194f0:	83 f8 06             	cmp    eax,0x6
c00194f3:	0f 84 e1 fe ff ff    	je     c00193da <CPU::detectFeatures()+0x7a2>
c00194f9:	83 f8 04             	cmp    eax,0x4
c00194fc:	0f 84 e9 fe ff ff    	je     c00193eb <CPU::detectFeatures()+0x7b3>
c0019502:	83 f8 03             	cmp    eax,0x3
c0019505:	0f 85 0e 01 00 00    	jne    c0019619 <CPU::detectFeatures()+0x9e1>
c001950b:	52                   	push   edx
c001950c:	52                   	push   edx
c001950d:	68 2c b1 02 c0       	push   0xc002b12c
c0019512:	eb 77                	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019514:	83 f8 07             	cmp    eax,0x7
c0019517:	75 09                	jne    c0019522 <CPU::detectFeatures()+0x8ea>
c0019519:	50                   	push   eax
c001951a:	50                   	push   eax
c001951b:	68 36 b1 02 c0       	push   0xc002b136
c0019520:	eb 69                	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019522:	83 f8 0a             	cmp    eax,0xa
c0019525:	75 09                	jne    c0019530 <CPU::detectFeatures()+0x8f8>
c0019527:	50                   	push   eax
c0019528:	50                   	push   eax
c0019529:	68 41 b1 02 c0       	push   0xc002b141
c001952e:	eb 5b                	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019530:	83 f8 0b             	cmp    eax,0xb
c0019533:	75 09                	jne    c001953e <CPU::detectFeatures()+0x906>
c0019535:	50                   	push   eax
c0019536:	50                   	push   eax
c0019537:	68 49 b1 02 c0       	push   0xc002b149
c001953c:	eb 4d                	jmp    c001958b <CPU::detectFeatures()+0x953>
c001953e:	83 f8 08             	cmp    eax,0x8
c0019541:	75 09                	jne    c001954c <CPU::detectFeatures()+0x914>
c0019543:	50                   	push   eax
c0019544:	50                   	push   eax
c0019545:	68 52 b1 02 c0       	push   0xc002b152
c001954a:	eb 3f                	jmp    c001958b <CPU::detectFeatures()+0x953>
c001954c:	83 f8 09             	cmp    eax,0x9
c001954f:	75 09                	jne    c001955a <CPU::detectFeatures()+0x922>
c0019551:	50                   	push   eax
c0019552:	50                   	push   eax
c0019553:	68 5a b1 02 c0       	push   0xc002b15a
c0019558:	eb 31                	jmp    c001958b <CPU::detectFeatures()+0x953>
c001955a:	83 f8 05             	cmp    eax,0x5
c001955d:	75 09                	jne    c0019568 <CPU::detectFeatures()+0x930>
c001955f:	50                   	push   eax
c0019560:	50                   	push   eax
c0019561:	68 62 b1 02 c0       	push   0xc002b162
c0019566:	eb 23                	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019568:	83 f8 0c             	cmp    eax,0xc
c001956b:	75 09                	jne    c0019576 <CPU::detectFeatures()+0x93e>
c001956d:	55                   	push   ebp
c001956e:	55                   	push   ebp
c001956f:	68 70 b1 02 c0       	push   0xc002b170
c0019574:	eb 15                	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019576:	83 f8 0d             	cmp    eax,0xd
c0019579:	75 09                	jne    c0019584 <CPU::detectFeatures()+0x94c>
c001957b:	57                   	push   edi
c001957c:	57                   	push   edi
c001957d:	68 7b b1 02 c0       	push   0xc002b17b
c0019582:	eb 07                	jmp    c001958b <CPU::detectFeatures()+0x953>
c0019584:	56                   	push   esi
c0019585:	56                   	push   esi
c0019586:	68 8f b1 02 c0       	push   0xc002b18f
c001958b:	53                   	push   ebx
c001958c:	e8 81 ab ff ff       	call   c0014112 <Device::setName(char const*)>
c0019591:	83 c4 10             	add    esp,0x10
c0019594:	e9 80 00 00 00       	jmp    c0019619 <CPU::detectFeatures()+0x9e1>
c0019599:	51                   	push   ecx
c001959a:	51                   	push   ecx
c001959b:	68 db af 02 c0       	push   0xc002afdb
c00195a0:	57                   	push   edi
c00195a1:	e8 8e 72 fe ff       	call   c0000834 <strcpy>
c00195a6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195b0:	e8 f9 6c fe ff       	call   c00002ae <is486>
c00195b5:	83 c4 10             	add    esp,0x10
c00195b8:	85 c0                	test   eax,eax
c00195ba:	74 2b                	je     c00195e7 <CPU::detectFeatures()+0x9af>
c00195bc:	52                   	push   edx
c00195bd:	52                   	push   edx
c00195be:	68 9b b1 02 c0       	push   0xc002b19b
c00195c3:	53                   	push   ebx
c00195c4:	e8 49 ab ff ff       	call   c0014112 <Device::setName(char const*)>
c00195c9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00195d0:	0f 20 c0             	mov    eax,cr0
c00195d3:	83 e0 14             	and    eax,0x14
c00195d6:	83 c4 10             	add    esp,0x10
c00195d9:	83 f8 04             	cmp    eax,0x4
c00195dc:	75 1f                	jne    c00195fd <CPU::detectFeatures()+0x9c5>
c00195de:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00195e5:	eb 32                	jmp    c0019619 <CPU::detectFeatures()+0x9e1>
c00195e7:	50                   	push   eax
c00195e8:	50                   	push   eax
c00195e9:	68 a6 b1 02 c0       	push   0xc002b1a6
c00195ee:	53                   	push   ebx
c00195ef:	e8 1e ab ff ff       	call   c0014112 <Device::setName(char const*)>
c00195f4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00195fb:	eb d3                	jmp    c00195d0 <CPU::detectFeatures()+0x998>
c00195fd:	e8 87 6c fe ff       	call   c0000289 <hasLegacyFPU>
c0019602:	83 e0 01             	and    eax,0x1
c0019605:	8d 14 00             	lea    edx,[eax+eax*1]
c0019608:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001960e:	83 e0 fd             	and    eax,0xfffffffd
c0019611:	09 d0                	or     eax,edx
c0019613:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019619:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019620:	83 c4 4c             	add    esp,0x4c
c0019623:	5b                   	pop    ebx
c0019624:	5e                   	pop    esi
c0019625:	5f                   	pop    edi
c0019626:	5d                   	pop    ebp
c0019627:	c3                   	ret    

c0019628 <CPU::setupSMEP()>:
c0019628:	0f 20 e0             	mov    eax,cr4
c001962b:	0d 00 00 10 00       	or     eax,0x100000
c0019630:	0f 22 e0             	mov    cr4,eax
c0019633:	c3                   	ret    

c0019634 <CPU::setupUMIP()>:
c0019634:	0f 20 e0             	mov    eax,cr4
c0019637:	80 cc 08             	or     ah,0x8
c001963a:	0f 22 e0             	mov    cr4,eax
c001963d:	c3                   	ret    

c001963e <CPU::setupTSC()>:
c001963e:	0f 20 e0             	mov    eax,cr4
c0019641:	83 c8 04             	or     eax,0x4
c0019644:	0f 22 e0             	mov    cr4,eax
c0019647:	c3                   	ret    

c0019648 <CPU::setupLargePages()>:
c0019648:	0f 20 e0             	mov    eax,cr4
c001964b:	83 c8 10             	or     eax,0x10
c001964e:	0f 22 e0             	mov    cr4,eax
c0019651:	c3                   	ret    

c0019652 <CPU::setupPAT()>:
c0019652:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0019657:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001965e:	74 2c                	je     c001968c <CPU::setupPAT()+0x3a>
c0019660:	53                   	push   ebx
c0019661:	83 ec 10             	sub    esp,0x10
c0019664:	68 77 02 00 00       	push   0x277
c0019669:	50                   	push   eax
c001966a:	e8 73 57 ff ff       	call   c000ede2 <Computer::rdmsr(unsigned int)>
c001966f:	83 e2 f8             	and    edx,0xfffffff8
c0019672:	83 ca 01             	or     edx,0x1
c0019675:	52                   	push   edx
c0019676:	50                   	push   eax
c0019677:	68 77 02 00 00       	push   0x277
c001967c:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c0019682:	e8 87 57 ff ff       	call   c000ee0e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019687:	83 c4 28             	add    esp,0x28
c001968a:	5b                   	pop    ebx
c001968b:	c3                   	ret    
c001968c:	c3                   	ret    
c001968d:	90                   	nop

c001968e <CPU::setupMTRR()>:
c001968e:	c3                   	ret    
c001968f:	90                   	nop

c0019690 <CPU::setupGlobalPages()>:
c0019690:	0f 20 e0             	mov    eax,cr4
c0019693:	0c 80                	or     al,0x80
c0019695:	0f 22 e0             	mov    cr4,eax
c0019698:	c3                   	ret    
c0019699:	90                   	nop

c001969a <CPU::allowUsermodeDataAccess()>:
c001969a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001969e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196a5:	74 03                	je     c00196aa <CPU::allowUsermodeDataAccess()+0x10>
c00196a7:	0f 01 cb             	stac   
c00196aa:	c3                   	ret    
c00196ab:	90                   	nop

c00196ac <CPU::prohibitUsermodeDataAccess()>:
c00196ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196b0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196b7:	74 03                	je     c00196bc <CPU::prohibitUsermodeDataAccess()+0x10>
c00196b9:	0f 01 ca             	clac   
c00196bc:	c3                   	ret    
c00196bd:	90                   	nop

c00196be <CPU::setupSMAP()>:
c00196be:	0f 20 e0             	mov    eax,cr4
c00196c1:	0d 00 00 20 00       	or     eax,0x200000
c00196c6:	0f 22 e0             	mov    cr4,eax
c00196c9:	eb e1                	jmp    c00196ac <CPU::prohibitUsermodeDataAccess()>
c00196cb:	90                   	nop

c00196cc <CPU::setupFeatures()>:
c00196cc:	83 ec 0c             	sub    esp,0xc
c00196cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196d3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00196da:	74 07                	je     c00196e3 <CPU::setupFeatures()+0x17>
c00196dc:	52                   	push   edx
c00196dd:	e8 46 ff ff ff       	call   c0019628 <CPU::setupSMEP()>
c00196e2:	58                   	pop    eax
c00196e3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00196ea:	74 07                	je     c00196f3 <CPU::setupFeatures()+0x27>
c00196ec:	52                   	push   edx
c00196ed:	e8 cc ff ff ff       	call   c00196be <CPU::setupSMAP()>
c00196f2:	58                   	pop    eax
c00196f3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00196fa:	74 07                	je     c0019703 <CPU::setupFeatures()+0x37>
c00196fc:	52                   	push   edx
c00196fd:	e8 32 ff ff ff       	call   c0019634 <CPU::setupUMIP()>
c0019702:	58                   	pop    eax
c0019703:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001970a:	74 07                	je     c0019713 <CPU::setupFeatures()+0x47>
c001970c:	52                   	push   edx
c001970d:	e8 2c ff ff ff       	call   c001963e <CPU::setupTSC()>
c0019712:	58                   	pop    eax
c0019713:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001971a:	74 07                	je     c0019723 <CPU::setupFeatures()+0x57>
c001971c:	52                   	push   edx
c001971d:	e8 26 ff ff ff       	call   c0019648 <CPU::setupLargePages()>
c0019722:	59                   	pop    ecx
c0019723:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001972a:	74 07                	je     c0019733 <CPU::setupFeatures()+0x67>
c001972c:	52                   	push   edx
c001972d:	e8 5e ff ff ff       	call   c0019690 <CPU::setupGlobalPages()>
c0019732:	58                   	pop    eax
c0019733:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001973a:	74 0c                	je     c0019748 <CPU::setupFeatures()+0x7c>
c001973c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019740:	83 c4 0c             	add    esp,0xc
c0019743:	e9 0a ff ff ff       	jmp    c0019652 <CPU::setupPAT()>
c0019748:	83 c4 0c             	add    esp,0xc
c001974b:	c3                   	ret    

c001974c <CPU::open(int, int, void*)>:
c001974c:	57                   	push   edi
c001974d:	56                   	push   esi
c001974e:	53                   	push   ebx
c001974f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019753:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019757:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001975d:	83 ec 0c             	sub    esp,0xc
c0019760:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019766:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001976c:	50                   	push   eax
c001976d:	e8 5c 59 ff ff       	call   c000f0ce <GDT::setup()>
c0019772:	83 c4 0c             	add    esp,0xc
c0019775:	6a 00                	push   0x0
c0019777:	68 ef be ad de       	push   0xdeadbeef
c001977c:	57                   	push   edi
c001977d:	e8 08 7d ff ff       	call   c001148a <TSS::setup(unsigned long, unsigned long)>
c0019782:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019785:	e8 e0 7c ff ff       	call   c001146a <TSS::flush()>
c001978a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019790:	89 04 24             	mov    DWORD PTR [esp],eax
c0019793:	e8 92 5b ff ff       	call   c000f32a <IDT::setup()>
c0019798:	b8 00 04 00 00       	mov    eax,0x400
c001979d:	0f 23 f8             	mov    db7,eax
c00197a0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00197aa:	e8 28 67 ff ff       	call   c000fed7 <Phys::allocatePage()>
c00197af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00197b5:	89 30                	mov    DWORD PTR [eax],esi
c00197b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00197bd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00197c0:	58                   	pop    eax
c00197c1:	5a                   	pop    edx
c00197c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00197cc:	e8 eb 8c ff ff       	call   c00124bc <VAS::setCPUSpecific(unsigned long)>
c00197d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197d4:	e8 5f f4 ff ff       	call   c0018c38 <CPU::detectFeatures()>
c00197d9:	e8 fd bc ff ff       	call   c00154db <setupInterruptController()>
c00197de:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00197e4:	a1 c0 da 02 c0       	mov    eax,ds:0xc002dac0
c00197e9:	83 e0 10             	and    eax,0x10
c00197ec:	83 f8 01             	cmp    eax,0x1
c00197ef:	19 c0                	sbb    eax,eax
c00197f1:	83 e0 46             	and    eax,0x46
c00197f4:	83 c0 1e             	add    eax,0x1e
c00197f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00197fa:	e8 bb d1 ff ff       	call   c00169ba <setupTimer(int)>
c00197ff:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019805:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019808:	e8 bf fe ff ff       	call   c00196cc <CPU::setupFeatures()>
c001980d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019810:	e8 a7 f1 ff ff       	call   c00189bc <CPU::displayFeatures()>
c0019815:	83 c4 10             	add    esp,0x10
c0019818:	31 c0                	xor    eax,eax
c001981a:	5b                   	pop    ebx
c001981b:	5e                   	pop    esi
c001981c:	5f                   	pop    edi
c001981d:	c3                   	ret    

c001981e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001981e:	57                   	push   edi
c001981f:	56                   	push   esi
c0019820:	53                   	push   ebx
c0019821:	51                   	push   ecx
c0019822:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019826:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019829:	0f 02 c0             	lar    eax,ax
c001982c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001982f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019833:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019836:	88 ca                	mov    dl,cl
c0019838:	c0 ea 06             	shr    dl,0x6
c001983b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001983f:	89 ca                	mov    edx,ecx
c0019841:	66 c1 ea 03          	shr    dx,0x3
c0019845:	83 e2 07             	and    edx,0x7
c0019848:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001984d:	88 17                	mov    BYTE PTR [edi],dl
c001984f:	0f 84 a6 01 00 00    	je     c00199fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019855:	83 e1 07             	and    ecx,0x7
c0019858:	80 f9 04             	cmp    cl,0x4
c001985b:	0f 84 98 00 00 00    	je     c00198f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019861:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019866:	0f 95 c0             	setne  al
c0019869:	80 f9 05             	cmp    cl,0x5
c001986c:	0f 95 c2             	setne  dl
c001986f:	08 c2                	or     dl,al
c0019871:	74 79                	je     c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019873:	84 c9                	test   cl,cl
c0019875:	75 05                	jne    c001987c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019877:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001987a:	eb 3c                	jmp    c00198b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001987c:	80 f9 01             	cmp    cl,0x1
c001987f:	75 05                	jne    c0019886 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019881:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019884:	eb 32                	jmp    c00198b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019886:	80 f9 02             	cmp    cl,0x2
c0019889:	75 05                	jne    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001988b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001988e:	eb 28                	jmp    c00198b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019890:	31 c0                	xor    eax,eax
c0019892:	80 f9 03             	cmp    cl,0x3
c0019895:	75 05                	jne    c001989c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019897:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001989a:	eb 1c                	jmp    c00198b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001989c:	80 f9 05             	cmp    cl,0x5
c001989f:	75 05                	jne    c00198a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00198a1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198a4:	eb 12                	jmp    c00198b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198a6:	80 f9 06             	cmp    cl,0x6
c00198a9:	75 05                	jne    c00198b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00198ab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198ae:	eb 08                	jmp    c00198b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198b0:	80 f9 07             	cmp    cl,0x7
c00198b3:	75 03                	jne    c00198b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198b5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198b8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198bd:	75 10                	jne    c00198cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00198bf:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00198c3:	b9 03 00 00 00       	mov    ecx,0x3
c00198c8:	01 d0                	add    eax,edx
c00198ca:	e9 37 01 00 00       	jmp    c0019a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198cf:	b9 02 00 00 00       	mov    ecx,0x2
c00198d4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00198d9:	0f 85 27 01 00 00    	jne    c0019a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198df:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00198e2:	b9 06 00 00 00       	mov    ecx,0x6
c00198e7:	e9 1a 01 00 00       	jmp    c0019a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198ec:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00198ef:	b9 06 00 00 00       	mov    ecx,0x6
c00198f4:	e9 0f 01 00 00       	jmp    c0019a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198f9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00198fc:	88 ca                	mov    dl,cl
c00198fe:	c0 ea 06             	shr    dl,0x6
c0019901:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019905:	89 ca                	mov    edx,ecx
c0019907:	66 c1 ea 03          	shr    dx,0x3
c001990b:	83 e2 07             	and    edx,0x7
c001990e:	80 e1 07             	and    cl,0x7
c0019911:	75 05                	jne    c0019918 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019913:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019916:	eb 4c                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019918:	80 f9 01             	cmp    cl,0x1
c001991b:	75 05                	jne    c0019922 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001991d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019920:	eb 42                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019922:	80 f9 02             	cmp    cl,0x2
c0019925:	75 05                	jne    c001992c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019927:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001992a:	eb 38                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001992c:	80 f9 03             	cmp    cl,0x3
c001992f:	75 05                	jne    c0019936 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019931:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019934:	eb 2e                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019936:	80 f9 04             	cmp    cl,0x4
c0019939:	75 12                	jne    c001994d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001993b:	f6 c4 60             	test   ah,0x60
c001993e:	75 08                	jne    c0019948 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019940:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019943:	8d 78 14             	lea    edi,[eax+0x14]
c0019946:	eb 1c                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019948:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001994b:	eb 17                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001994d:	80 f9 05             	cmp    cl,0x5
c0019950:	75 05                	jne    c0019957 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019952:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019955:	eb 0d                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019957:	80 f9 06             	cmp    cl,0x6
c001995a:	75 05                	jne    c0019961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001995c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001995f:	eb 03                	jmp    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019961:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019964:	84 d2                	test   dl,dl
c0019966:	75 05                	jne    c001996d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019968:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001996b:	eb 3c                	jmp    c00199a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001996d:	80 fa 01             	cmp    dl,0x1
c0019970:	75 05                	jne    c0019977 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019972:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019975:	eb 32                	jmp    c00199a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019977:	80 fa 02             	cmp    dl,0x2
c001997a:	75 05                	jne    c0019981 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001997c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001997f:	eb 28                	jmp    c00199a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019981:	80 fa 03             	cmp    dl,0x3
c0019984:	75 05                	jne    c001998b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019986:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019989:	eb 1e                	jmp    c00199a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001998b:	31 c0                	xor    eax,eax
c001998d:	80 fa 04             	cmp    dl,0x4
c0019990:	74 17                	je     c00199a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019992:	80 fa 05             	cmp    dl,0x5
c0019995:	75 05                	jne    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019997:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001999a:	eb 0d                	jmp    c00199a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001999c:	80 fa 06             	cmp    dl,0x6
c001999f:	75 05                	jne    c00199a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00199a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199a4:	eb 03                	jmp    c00199a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199a6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199a9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199ae:	0f 94 c2             	sete   dl
c00199b1:	80 f9 05             	cmp    cl,0x5
c00199b4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00199b8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00199bd:	d3 e0                	shl    eax,cl
c00199bf:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00199c3:	74 0a                	je     c00199cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00199c5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00199c8:	b9 07 00 00 00       	mov    ecx,0x7
c00199cd:	eb 37                	jmp    c0019a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199cf:	01 f8                	add    eax,edi
c00199d1:	b9 03 00 00 00       	mov    ecx,0x3
c00199d6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199db:	74 2b                	je     c0019a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199dd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00199e2:	75 0d                	jne    c00199f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00199e4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00199e8:	01 c8                	add    eax,ecx
c00199ea:	b9 04 00 00 00       	mov    ecx,0x4
c00199ef:	eb 17                	jmp    c0019a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199f1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00199f4:	b9 07 00 00 00       	mov    ecx,0x7
c00199f9:	eb 0d                	jmp    c0019a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199fb:	b9 02 00 00 00       	mov    ecx,0x2
c0019a00:	b2 01                	mov    dl,0x1
c0019a02:	31 c0                	xor    eax,eax
c0019a04:	eb 02                	jmp    c0019a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a06:	31 d2                	xor    edx,edx
c0019a08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a0c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019a0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a12:	88 11                	mov    BYTE PTR [ecx],dl
c0019a14:	5a                   	pop    edx
c0019a15:	5b                   	pop    ebx
c0019a16:	5e                   	pop    esi
c0019a17:	5f                   	pop    edi
c0019a18:	c3                   	ret    
c0019a19:	90                   	nop

c0019a1a <EnvVarContainer::getEnv(char const*)>:
c0019a1a:	57                   	push   edi
c0019a1b:	56                   	push   esi
c0019a1c:	53                   	push   ebx
c0019a1d:	31 db                	xor    ebx,ebx
c0019a1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a23:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019a25:	7e 2b                	jle    c0019a52 <EnvVarContainer::getEnv(char const*)+0x38>
c0019a27:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019a2e:	50                   	push   eax
c0019a2f:	50                   	push   eax
c0019a30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a33:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019a36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a3a:	e8 81 6e fe ff       	call   c00008c0 <strcmp>
c0019a3f:	83 c4 10             	add    esp,0x10
c0019a42:	85 c0                	test   eax,eax
c0019a44:	75 09                	jne    c0019a4f <EnvVarContainer::getEnv(char const*)+0x35>
c0019a46:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a49:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019a4d:	eb 05                	jmp    c0019a54 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019a4f:	43                   	inc    ebx
c0019a50:	eb d1                	jmp    c0019a23 <EnvVarContainer::getEnv(char const*)+0x9>
c0019a52:	31 c0                	xor    eax,eax
c0019a54:	5b                   	pop    ebx
c0019a55:	5e                   	pop    esi
c0019a56:	5f                   	pop    edi
c0019a57:	c3                   	ret    

c0019a58 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019a58:	57                   	push   edi
c0019a59:	56                   	push   esi
c0019a5a:	53                   	push   ebx
c0019a5b:	83 ec 1c             	sub    esp,0x1c
c0019a5e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a62:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a66:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a6a:	57                   	push   edi
c0019a6b:	e8 24 6d fe ff       	call   c0000794 <strlen>
c0019a70:	40                   	inc    eax
c0019a71:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a74:	e8 c1 5d ff ff       	call   c000f83a <malloc>
c0019a79:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a80:	e8 0f 6d fe ff       	call   c0000794 <strlen>
c0019a85:	40                   	inc    eax
c0019a86:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a89:	e8 ac 5d ff ff       	call   c000f83a <malloc>
c0019a8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a95:	e8 fa 6c fe ff       	call   c0000794 <strlen>
c0019a9a:	83 c4 0c             	add    esp,0xc
c0019a9d:	40                   	inc    eax
c0019a9e:	50                   	push   eax
c0019a9f:	6a 00                	push   0x0
c0019aa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019aa5:	e8 ce 6c fe ff       	call   c0000778 <memset>
c0019aaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019aad:	e8 e2 6c fe ff       	call   c0000794 <strlen>
c0019ab2:	83 c4 0c             	add    esp,0xc
c0019ab5:	40                   	inc    eax
c0019ab6:	50                   	push   eax
c0019ab7:	57                   	push   edi
c0019ab8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019abc:	e8 83 6c fe ff       	call   c0000744 <memcpy>
c0019ac1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ac4:	e8 cb 6c fe ff       	call   c0000794 <strlen>
c0019ac9:	83 c4 0c             	add    esp,0xc
c0019acc:	40                   	inc    eax
c0019acd:	50                   	push   eax
c0019ace:	6a 00                	push   0x0
c0019ad0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ad4:	e8 9f 6c fe ff       	call   c0000778 <memset>
c0019ad9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019adc:	e8 b3 6c fe ff       	call   c0000794 <strlen>
c0019ae1:	83 c4 0c             	add    esp,0xc
c0019ae4:	40                   	inc    eax
c0019ae5:	50                   	push   eax
c0019ae6:	56                   	push   esi
c0019ae7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aeb:	e8 54 6c fe ff       	call   c0000744 <memcpy>
c0019af0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019af2:	40                   	inc    eax
c0019af3:	89 03                	mov    DWORD PTR [ebx],eax
c0019af5:	c1 e0 03             	shl    eax,0x3
c0019af8:	5a                   	pop    edx
c0019af9:	59                   	pop    ecx
c0019afa:	50                   	push   eax
c0019afb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019afe:	e8 23 5d ff ff       	call   c000f826 <realloc>
c0019b03:	83 c4 0c             	add    esp,0xc
c0019b06:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b09:	6a 08                	push   0x8
c0019b0b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019b0f:	52                   	push   edx
c0019b10:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019b12:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019b16:	50                   	push   eax
c0019b17:	e8 28 6c fe ff       	call   c0000744 <memcpy>
c0019b1c:	83 c4 20             	add    esp,0x20
c0019b1f:	5b                   	pop    ebx
c0019b20:	5e                   	pop    esi
c0019b21:	5f                   	pop    edi
c0019b22:	c3                   	ret    
c0019b23:	90                   	nop

c0019b24 <EnvVarContainer::deleteEnv(char const*)>:
c0019b24:	c3                   	ret    
c0019b25:	90                   	nop

c0019b26 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019b26:	55                   	push   ebp
c0019b27:	57                   	push   edi
c0019b28:	56                   	push   esi
c0019b29:	53                   	push   ebx
c0019b2a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019b30:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019b37:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019b3e:	68 14 01 00 00       	push   0x114
c0019b43:	e8 f2 5c ff ff       	call   c000f83a <malloc>
c0019b48:	83 c4 0c             	add    esp,0xc
c0019b4b:	89 c7                	mov    edi,eax
c0019b4d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019b50:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019b57:	50                   	push   eax
c0019b58:	e8 05 95 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c0019b5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b60:	e8 cf 97 ff ff       	call   c0013334 <File::exists()>
c0019b65:	83 c4 10             	add    esp,0x10
c0019b68:	84 c0                	test   al,al
c0019b6a:	75 31                	jne    c0019b9d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019b6c:	51                   	push   ecx
c0019b6d:	51                   	push   ecx
c0019b6e:	6a 12                	push   0x12
c0019b70:	57                   	push   edi
c0019b71:	e8 50 95 ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c0019b76:	8b 07                	mov    eax,DWORD PTR [edi]
c0019b78:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019b7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019b7e:	e8 11 6c fe ff       	call   c0000794 <strlen>
c0019b83:	5a                   	pop    edx
c0019b84:	31 d2                	xor    edx,edx
c0019b86:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019b8a:	51                   	push   ecx
c0019b8b:	55                   	push   ebp
c0019b8c:	52                   	push   edx
c0019b8d:	50                   	push   eax
c0019b8e:	57                   	push   edi
c0019b8f:	ff d3                	call   ebx
c0019b91:	83 c4 14             	add    esp,0x14
c0019b94:	57                   	push   edi
c0019b95:	e8 8a 95 ff ff       	call   c0013124 <File::close()>
c0019b9a:	83 c4 10             	add    esp,0x10
c0019b9d:	31 db                	xor    ebx,ebx
c0019b9f:	50                   	push   eax
c0019ba0:	31 ed                	xor    ebp,ebp
c0019ba2:	68 00 01 00 00       	push   0x100
c0019ba7:	6a 00                	push   0x0
c0019ba9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bad:	50                   	push   eax
c0019bae:	e8 c5 6b fe ff       	call   c0000778 <memset>
c0019bb3:	58                   	pop    eax
c0019bb4:	5a                   	pop    edx
c0019bb5:	6a 01                	push   0x1
c0019bb7:	57                   	push   edi
c0019bb8:	e8 09 95 ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c0019bbd:	83 c4 10             	add    esp,0x10
c0019bc0:	83 ec 0c             	sub    esp,0xc
c0019bc3:	8b 07                	mov    eax,DWORD PTR [edi]
c0019bc5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bc9:	51                   	push   ecx
c0019bca:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019bce:	52                   	push   edx
c0019bcf:	6a 00                	push   0x0
c0019bd1:	6a 01                	push   0x1
c0019bd3:	57                   	push   edi
c0019bd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bd7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019bdb:	83 c4 20             	add    esp,0x20
c0019bde:	3c 0d                	cmp    al,0xd
c0019be0:	0f 84 12 01 00 00    	je     c0019cf8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019be6:	85 db                	test   ebx,ebx
c0019be8:	0f 84 fd 00 00 00    	je     c0019ceb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019bee:	3c 0a                	cmp    al,0xa
c0019bf0:	74 13                	je     c0019c05 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019bf2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019bf7:	74 0c                	je     c0019c05 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019bf9:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019bff:	0f 8e e6 00 00 00    	jle    c0019ceb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019c05:	83 ec 0c             	sub    esp,0xc
c0019c08:	8d 53 01             	lea    edx,[ebx+0x1]
c0019c0b:	29 dd                	sub    ebp,ebx
c0019c0d:	52                   	push   edx
c0019c0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c12:	e8 23 5c ff ff       	call   c000f83a <malloc>
c0019c17:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019c1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019c1e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019c21:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019c25:	e8 10 5c ff ff       	call   c000f83a <malloc>
c0019c2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c2e:	83 c4 0c             	add    esp,0xc
c0019c31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c35:	52                   	push   edx
c0019c36:	6a 00                	push   0x0
c0019c38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c3c:	e8 37 6b fe ff       	call   c0000778 <memset>
c0019c41:	83 c4 0c             	add    esp,0xc
c0019c44:	53                   	push   ebx
c0019c45:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019c49:	55                   	push   ebp
c0019c4a:	01 eb                	add    ebx,ebp
c0019c4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c50:	e8 ef 6a fe ff       	call   c0000744 <memcpy>
c0019c55:	83 c4 0c             	add    esp,0xc
c0019c58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019c5c:	51                   	push   ecx
c0019c5d:	6a 00                	push   0x0
c0019c5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c63:	e8 10 6b fe ff       	call   c0000778 <memset>
c0019c68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c6b:	e8 24 6b fe ff       	call   c0000794 <strlen>
c0019c70:	83 c4 0c             	add    esp,0xc
c0019c73:	50                   	push   eax
c0019c74:	53                   	push   ebx
c0019c75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c79:	e8 c6 6a fe ff       	call   c0000744 <memcpy>
c0019c7e:	5b                   	pop    ebx
c0019c7f:	58                   	pop    eax
c0019c80:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c84:	68 e0 b1 02 c0       	push   0xc002b1e0
c0019c89:	e8 7b 8e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0019c8e:	8b 06                	mov    eax,DWORD PTR [esi]
c0019c90:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019c93:	40                   	inc    eax
c0019c94:	83 c4 10             	add    esp,0x10
c0019c97:	89 06                	mov    DWORD PTR [esi],eax
c0019c99:	85 d2                	test   edx,edx
c0019c9b:	75 0c                	jne    c0019ca9 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019c9d:	83 ec 0c             	sub    esp,0xc
c0019ca0:	6a 08                	push   0x8
c0019ca2:	e8 93 5b ff ff       	call   c000f83a <malloc>
c0019ca7:	eb 0c                	jmp    c0019cb5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019ca9:	c1 e0 03             	shl    eax,0x3
c0019cac:	51                   	push   ecx
c0019cad:	51                   	push   ecx
c0019cae:	50                   	push   eax
c0019caf:	52                   	push   edx
c0019cb0:	e8 71 5b ff ff       	call   c000f826 <realloc>
c0019cb5:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	31 db                	xor    ebx,ebx
c0019cbd:	52                   	push   edx
c0019cbe:	6a 08                	push   0x8
c0019cc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019cc4:	50                   	push   eax
c0019cc5:	8b 16                	mov    edx,DWORD PTR [esi]
c0019cc7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019cca:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019cce:	50                   	push   eax
c0019ccf:	e8 70 6a fe ff       	call   c0000744 <memcpy>
c0019cd4:	83 c4 0c             	add    esp,0xc
c0019cd7:	68 00 01 00 00       	push   0x100
c0019cdc:	6a 00                	push   0x0
c0019cde:	55                   	push   ebp
c0019cdf:	31 ed                	xor    ebp,ebp
c0019ce1:	e8 92 6a fe ff       	call   c0000778 <memset>
c0019ce6:	83 c4 10             	add    esp,0x10
c0019ce9:	eb 0d                	jmp    c0019cf8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019ceb:	3c 3d                	cmp    al,0x3d
c0019ced:	74 07                	je     c0019cf6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019cef:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019cf3:	45                   	inc    ebp
c0019cf4:	eb 02                	jmp    c0019cf8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019cf6:	89 eb                	mov    ebx,ebp
c0019cf8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019cfd:	0f 85 bd fe ff ff    	jne    c0019bc0 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019d03:	50                   	push   eax
c0019d04:	50                   	push   eax
c0019d05:	ff 36                	push   DWORD PTR [esi]
c0019d07:	68 ee b1 02 c0       	push   0xc002b1ee
c0019d0c:	e8 f8 8d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0019d11:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019d17:	5b                   	pop    ebx
c0019d18:	5e                   	pop    esi
c0019d19:	5f                   	pop    edi
c0019d1a:	5d                   	pop    ebp
c0019d1b:	c3                   	ret    

c0019d1c <EnvVarContainer::__loadSystem()>:
c0019d1c:	83 ec 10             	sub    esp,0x10
c0019d1f:	68 e0 cf 02 c0       	push   0xc002cfe0
c0019d24:	68 19 b2 02 c0       	push   0xc002b219
c0019d29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d2d:	e8 f4 fd ff ff       	call   c0019b26 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019d32:	83 c4 1c             	add    esp,0x1c
c0019d35:	c3                   	ret    

c0019d36 <EnvVarContainer::__loadUser()>:
c0019d36:	c3                   	ret    
c0019d37:	90                   	nop

c0019d38 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d4a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d58:	90                   	nop
c0019d59:	c3                   	ret    

c0019d5a <EnvVarContainer::~EnvVarContainer()>:
c0019d5a:	83 ec 0c             	sub    esp,0xc
c0019d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019d64:	85 c0                	test   eax,eax
c0019d66:	74 1d                	je     c0019d85 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d6e:	85 c0                	test   eax,eax
c0019d70:	74 13                	je     c0019d85 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019d79:	83 ec 0c             	sub    esp,0xc
c0019d7c:	50                   	push   eax
c0019d7d:	e8 c8 5a ff ff       	call   c000f84a <free>
c0019d82:	83 c4 10             	add    esp,0x10
c0019d85:	90                   	nop
c0019d86:	83 c4 0c             	add    esp,0xc
c0019d89:	c3                   	ret    

c0019d8a <Krnl::getEnv(Process*, char const*)>:
c0019d8a:	53                   	push   ebx
c0019d8b:	83 ec 08             	sub    esp,0x8
c0019d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d92:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d96:	39 05 14 10 03 c0    	cmp    DWORD PTR ds:0xc0031014,eax
c0019d9c:	74 04                	je     c0019da2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019d9e:	85 c0                	test   eax,eax
c0019da0:	75 0b                	jne    c0019dad <Krnl::getEnv(Process*, char const*)+0x23>
c0019da2:	a1 f0 05 03 c0       	mov    eax,ds:0xc00305f0
c0019da7:	85 c0                	test   eax,eax
c0019da9:	75 19                	jne    c0019dc4 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019dab:	eb 27                	jmp    c0019dd4 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019dad:	52                   	push   edx
c0019dae:	52                   	push   edx
c0019daf:	53                   	push   ebx
c0019db0:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019db6:	e8 5f fc ff ff       	call   c0019a1a <EnvVarContainer::getEnv(char const*)>
c0019dbb:	83 c4 10             	add    esp,0x10
c0019dbe:	85 c0                	test   eax,eax
c0019dc0:	75 28                	jne    c0019dea <Krnl::getEnv(Process*, char const*)+0x60>
c0019dc2:	eb de                	jmp    c0019da2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019dc4:	52                   	push   edx
c0019dc5:	52                   	push   edx
c0019dc6:	53                   	push   ebx
c0019dc7:	50                   	push   eax
c0019dc8:	e8 4d fc ff ff       	call   c0019a1a <EnvVarContainer::getEnv(char const*)>
c0019dcd:	83 c4 10             	add    esp,0x10
c0019dd0:	85 c0                	test   eax,eax
c0019dd2:	75 16                	jne    c0019dea <Krnl::getEnv(Process*, char const*)+0x60>
c0019dd4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019dd8:	a1 f4 05 03 c0       	mov    eax,ds:0xc00305f4
c0019ddd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019de1:	83 c4 08             	add    esp,0x8
c0019de4:	5b                   	pop    ebx
c0019de5:	e9 30 fc ff ff       	jmp    c0019a1a <EnvVarContainer::getEnv(char const*)>
c0019dea:	83 c4 08             	add    esp,0x8
c0019ded:	5b                   	pop    ebx
c0019dee:	c3                   	ret    

c0019def <Krnl::setEnvSystem(char const*, char const*)>:
c0019def:	83 ec 10             	sub    esp,0x10
c0019df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019df6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dfa:	ff 35 f4 05 03 c0    	push   DWORD PTR ds:0xc00305f4
c0019e00:	e8 53 fc ff ff       	call   c0019a58 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e05:	83 c4 1c             	add    esp,0x1c
c0019e08:	c3                   	ret    

c0019e09 <Krnl::setEnvUser(char const*, char const*)>:
c0019e09:	a1 f0 05 03 c0       	mov    eax,ds:0xc00305f0
c0019e0e:	85 c0                	test   eax,eax
c0019e10:	74 15                	je     c0019e27 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019e12:	83 ec 10             	sub    esp,0x10
c0019e15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e1d:	50                   	push   eax
c0019e1e:	e8 35 fc ff ff       	call   c0019a58 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e23:	83 c4 1c             	add    esp,0x1c
c0019e26:	c3                   	ret    
c0019e27:	c3                   	ret    

c0019e28 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e2c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019e32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e36:	e9 1d fc ff ff       	jmp    c0019a58 <EnvVarContainer::setEnv(char const*, char const*)>

c0019e3b <Krnl::deleteEnvSystem(char const*)>:
c0019e3b:	c3                   	ret    

c0019e3c <Krnl::deleteEnvUser(char const*)>:
c0019e3c:	c3                   	ret    

c0019e3d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019e3d:	c3                   	ret    

c0019e3e <Krnl::newProcessEnv(Process*)>:
c0019e3e:	83 ec 28             	sub    esp,0x28
c0019e41:	6a 0c                	push   0xc
c0019e43:	e8 f2 59 ff ff       	call   c000f83a <malloc>
c0019e48:	5a                   	pop    edx
c0019e49:	59                   	pop    ecx
c0019e4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e4e:	50                   	push   eax
c0019e4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e53:	e8 e0 fe ff ff       	call   c0019d38 <EnvVarContainer::EnvVarContainer(Process*)>
c0019e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e5c:	83 c4 2c             	add    esp,0x2c
c0019e5f:	c3                   	ret    

c0019e60 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019e60:	56                   	push   esi
c0019e61:	53                   	push   ebx
c0019e62:	83 ec 10             	sub    esp,0x10
c0019e65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e69:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019e6f:	6a 0c                	push   0xc
c0019e71:	e8 c4 59 ff ff       	call   c000f83a <malloc>
c0019e76:	89 c3                	mov    ebx,eax
c0019e78:	58                   	pop    eax
c0019e79:	5a                   	pop    edx
c0019e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e7e:	53                   	push   ebx
c0019e7f:	e8 b4 fe ff ff       	call   c0019d38 <EnvVarContainer::EnvVarContainer(Process*)>
c0019e84:	8b 06                	mov    eax,DWORD PTR [esi]
c0019e86:	89 03                	mov    DWORD PTR [ebx],eax
c0019e88:	c1 e0 03             	shl    eax,0x3
c0019e8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e8e:	e8 a7 59 ff ff       	call   c000f83a <malloc>
c0019e93:	83 c4 0c             	add    esp,0xc
c0019e96:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019e99:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019e9b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019ea2:	52                   	push   edx
c0019ea3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ea6:	50                   	push   eax
c0019ea7:	e8 98 68 fe ff       	call   c0000744 <memcpy>
c0019eac:	89 d8                	mov    eax,ebx
c0019eae:	83 c4 14             	add    esp,0x14
c0019eb1:	5b                   	pop    ebx
c0019eb2:	5e                   	pop    esi
c0019eb3:	c3                   	ret    

c0019eb4 <Krnl::loadSystemEnv()>:
c0019eb4:	53                   	push   ebx
c0019eb5:	83 ec 14             	sub    esp,0x14
c0019eb8:	6a 0c                	push   0xc
c0019eba:	e8 7b 59 ff ff       	call   c000f83a <malloc>
c0019ebf:	89 c3                	mov    ebx,eax
c0019ec1:	58                   	pop    eax
c0019ec2:	5a                   	pop    edx
c0019ec3:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c0019ec9:	53                   	push   ebx
c0019eca:	e8 69 fe ff ff       	call   c0019d38 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ecf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ed2:	89 1d f4 05 03 c0    	mov    DWORD PTR ds:0xc00305f4,ebx
c0019ed8:	e8 3f fe ff ff       	call   c0019d1c <EnvVarContainer::__loadSystem()>
c0019edd:	83 c4 18             	add    esp,0x18
c0019ee0:	5b                   	pop    ebx
c0019ee1:	c3                   	ret    

c0019ee2 <Krnl::loadUserEnv()>:
c0019ee2:	53                   	push   ebx
c0019ee3:	83 ec 14             	sub    esp,0x14
c0019ee6:	6a 0c                	push   0xc
c0019ee8:	e8 4d 59 ff ff       	call   c000f83a <malloc>
c0019eed:	89 c3                	mov    ebx,eax
c0019eef:	58                   	pop    eax
c0019ef0:	5a                   	pop    edx
c0019ef1:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c0019ef7:	53                   	push   ebx
c0019ef8:	e8 3b fe ff ff       	call   c0019d38 <EnvVarContainer::EnvVarContainer(Process*)>
c0019efd:	89 1d f0 05 03 c0    	mov    DWORD PTR ds:0xc00305f0,ebx
c0019f03:	83 c4 18             	add    esp,0x18
c0019f06:	5b                   	pop    ebx
c0019f07:	c3                   	ret    

c0019f08 <Krnl::flushEnv()>:
c0019f08:	c3                   	ret    

c0019f09 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019f09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f0d:	8b 15 f0 05 03 c0    	mov    edx,DWORD PTR ds:0xc00305f0
c0019f13:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f19:	a1 f4 05 03 c0       	mov    eax,ds:0xc00305f4
c0019f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f20:	03 01                	add    eax,DWORD PTR [ecx]
c0019f22:	85 d2                	test   edx,edx
c0019f24:	74 02                	je     c0019f28 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019f26:	03 02                	add    eax,DWORD PTR [edx]
c0019f28:	c3                   	ret    

c0019f29 <Krnl::getProcessEnvPair(Process*, int)>:
c0019f29:	57                   	push   edi
c0019f2a:	8b 0d f0 05 03 c0    	mov    ecx,DWORD PTR ds:0xc00305f0
c0019f30:	56                   	push   esi
c0019f31:	85 c9                	test   ecx,ecx
c0019f33:	53                   	push   ebx
c0019f34:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f3c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019f42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f46:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f48:	75 47                	jne    c0019f91 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019f4a:	39 c3                	cmp    ebx,eax
c0019f4c:	7c 47                	jl     c0019f95 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019f4e:	8b 15 f4 05 03 c0    	mov    edx,DWORD PTR ds:0xc00305f4
c0019f54:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f56:	01 c1                	add    ecx,eax
c0019f58:	39 d9                	cmp    ecx,ebx
c0019f5a:	7e 6c                	jle    c0019fc8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019f5c:	51                   	push   ecx
c0019f5d:	89 d9                	mov    ecx,ebx
c0019f5f:	29 c1                	sub    ecx,eax
c0019f61:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019f64:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019f68:	53                   	push   ebx
c0019f69:	68 3b b2 02 c0       	push   0xc002b23b
c0019f6e:	e8 96 8b ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0019f73:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019f79:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019f7b:	a1 f4 05 03 c0       	mov    eax,ds:0xc00305f4
c0019f80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f83:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019f87:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019f8a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019f8d:	89 06                	mov    DWORD PTR [esi],eax
c0019f8f:	eb 51                	jmp    c0019fe2 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019f91:	39 c3                	cmp    ebx,eax
c0019f93:	7d 05                	jge    c0019f9a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019f95:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019f98:	eb 20                	jmp    c0019fba <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019f9a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019f9c:	8d 14 07             	lea    edx,[edi+eax*1]
c0019f9f:	39 da                	cmp    edx,ebx
c0019fa1:	7e 04                	jle    c0019fa7 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019fa3:	29 c3                	sub    ebx,eax
c0019fa5:	eb 10                	jmp    c0019fb7 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019fa7:	8b 0d f4 05 03 c0    	mov    ecx,DWORD PTR ds:0xc00305f4
c0019fad:	03 11                	add    edx,DWORD PTR [ecx]
c0019faf:	39 da                	cmp    edx,ebx
c0019fb1:	7e 15                	jle    c0019fc8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019fb3:	29 c3                	sub    ebx,eax
c0019fb5:	29 fb                	sub    ebx,edi
c0019fb7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019fba:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019fbe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019fc1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019fc4:	89 06                	mov    DWORD PTR [esi],eax
c0019fc6:	eb 1d                	jmp    c0019fe5 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019fc8:	83 ec 0c             	sub    esp,0xc
c0019fcb:	68 4f b2 02 c0       	push   0xc002b24f
c0019fd0:	e8 18 00 00 00       	call   c0019fed <Krnl::panic(char const*)>
c0019fd5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019fdb:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019fe2:	83 c4 10             	add    esp,0x10
c0019fe5:	89 f0                	mov    eax,esi
c0019fe7:	5b                   	pop    ebx
c0019fe8:	5e                   	pop    esi
c0019fe9:	5f                   	pop    edi
c0019fea:	c2 04 00             	ret    0x4

c0019fed <Krnl::panic(char const*)>:
c0019fed:	55                   	push   ebp
c0019fee:	89 e5                	mov    ebp,esp
c0019ff0:	53                   	push   ebx
c0019ff1:	83 ec 0c             	sub    esp,0xc
c0019ff4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019ff7:	fa                   	cli    
c0019ff8:	c6 05 00 06 03 c0 01 	mov    BYTE PTR ds:0xc0030600,0x1
c0019fff:	53                   	push   ebx
c001a000:	c6 05 e4 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c9e4,0x0
c001a007:	68 69 b2 02 c0       	push   0xc002b269
c001a00c:	e8 f8 8a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001a011:	58                   	pop    eax
c001a012:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a017:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01d:	e8 a9 6c ff ff       	call   c0010ccb <setActiveTerminal(VgaText*)>
c001a022:	83 c4 0c             	add    esp,0xc
c001a025:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a02a:	6a 01                	push   0x1
c001a02c:	6a 0f                	push   0xf
c001a02e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a034:	e8 c3 66 ff ff       	call   c00106fc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a039:	58                   	pop    eax
c001a03a:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a03f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a045:	e8 22 6f ff ff       	call   c0010f6c <VgaText::clearScreen()>
c001a04a:	58                   	pop    eax
c001a04b:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a050:	5a                   	pop    edx
c001a051:	68 82 b2 02 c0       	push   0xc002b282
c001a056:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05c:	e8 89 70 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a061:	59                   	pop    ecx
c001a062:	58                   	pop    eax
c001a063:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a068:	68 28 b3 02 c0       	push   0xc002b328
c001a06d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a073:	e8 72 70 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a078:	58                   	pop    eax
c001a079:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a07e:	5a                   	pop    edx
c001a07f:	68 9e b2 02 c0       	push   0xc002b29e
c001a084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08a:	e8 5b 70 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a08f:	59                   	pop    ecx
c001a090:	58                   	pop    eax
c001a091:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a096:	53                   	push   ebx
c001a097:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09d:	e8 48 70 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a0a2:	58                   	pop    eax
c001a0a3:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a0a8:	5a                   	pop    edx
c001a0a9:	68 be b2 02 c0       	push   0xc002b2be
c001a0ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b4:	e8 31 70 ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a0b9:	a1 fc 05 03 c0       	mov    eax,ds:0xc00305fc
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	85 c0                	test   eax,eax
c001a0c3:	74 02                	je     c001a0c7 <Krnl::panic(char const*)+0xda>
c001a0c5:	ff d0                	call   eax
c001a0c7:	83 ec 0c             	sub    esp,0xc
c001a0ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0cd:	e8 b2 2e 00 00       	call   c001cf84 <Thr::getDriverNameFromAddress(unsigned long)>
c001a0d2:	83 c4 10             	add    esp,0x10
c001a0d5:	89 c3                	mov    ebx,eax
c001a0d7:	85 c0                	test   eax,eax
c001a0d9:	0f 84 50 02 00 00    	je     c001a32f <Krnl::panic(char const*)+0x342>
c001a0df:	83 ec 08             	sub    esp,0x8
c001a0e2:	8b 15 14 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031014
c001a0e8:	68 64 b3 02 c0       	push   0xc002b364
c001a0ed:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a0f3:	e8 f2 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a0f8:	58                   	pop    eax
c001a0f9:	5a                   	pop    edx
c001a0fa:	8b 15 14 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031014
c001a100:	68 9e b2 02 c0       	push   0xc002b29e
c001a105:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a10b:	e8 da 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a110:	59                   	pop    ecx
c001a111:	58                   	pop    eax
c001a112:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a117:	53                   	push   ebx
c001a118:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a11e:	e8 c7 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a123:	83 c4 10             	add    esp,0x10
c001a126:	83 ec 08             	sub    esp,0x8
c001a129:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a12e:	68 bd b2 02 c0       	push   0xc002b2bd
c001a133:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a139:	e8 ac 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a13e:	58                   	pop    eax
c001a13f:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a144:	5a                   	pop    edx
c001a145:	68 bc b3 02 c0       	push   0xc002b3bc
c001a14a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a150:	e8 95 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a155:	59                   	pop    ecx
c001a156:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a15b:	5b                   	pop    ebx
c001a15c:	68 fc b3 02 c0       	push   0xc002b3fc
c001a161:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a167:	e8 7e 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a16c:	58                   	pop    eax
c001a16d:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a172:	5a                   	pop    edx
c001a173:	68 a9 b2 02 c0       	push   0xc002b2a9
c001a178:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a17e:	e8 67 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a183:	59                   	pop    ecx
c001a184:	5b                   	pop    ebx
c001a185:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a188:	68 c1 b2 02 c0       	push   0xc002b2c1
c001a18d:	e8 77 89 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001a192:	58                   	pop    eax
c001a193:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a196:	5a                   	pop    edx
c001a197:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a19a:	68 ca b2 02 c0       	push   0xc002b2ca
c001a19f:	e8 65 89 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001a1a4:	59                   	pop    ecx
c001a1a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1a8:	5b                   	pop    ebx
c001a1a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1ae:	68 d3 b2 02 c0       	push   0xc002b2d3
c001a1b3:	e8 51 89 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001a1b8:	58                   	pop    eax
c001a1b9:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a1be:	5a                   	pop    edx
c001a1bf:	68 40 b4 02 c0       	push   0xc002b440
c001a1c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ca:	e8 1b 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a1cf:	59                   	pop    ecx
c001a1d0:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a1d5:	5b                   	pop    ebx
c001a1d6:	68 dc b2 02 c0       	push   0xc002b2dc
c001a1db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e1:	e8 04 6f ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a1e6:	0f 20 c0             	mov    eax,cr0
c001a1e9:	5a                   	pop    edx
c001a1ea:	59                   	pop    ecx
c001a1eb:	50                   	push   eax
c001a1ec:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a1f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1f7:	e8 14 6f ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c001a1fc:	5b                   	pop    ebx
c001a1fd:	58                   	pop    eax
c001a1fe:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a203:	68 e6 b2 02 c0       	push   0xc002b2e6
c001a208:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20e:	e8 d7 6e ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a213:	0f 20 d0             	mov    eax,cr2
c001a216:	5a                   	pop    edx
c001a217:	59                   	pop    ecx
c001a218:	50                   	push   eax
c001a219:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a21e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a224:	e8 e7 6e ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c001a229:	5b                   	pop    ebx
c001a22a:	58                   	pop    eax
c001a22b:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a230:	68 f0 b2 02 c0       	push   0xc002b2f0
c001a235:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a23b:	e8 aa 6e ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a240:	0f 20 d8             	mov    eax,cr3
c001a243:	5a                   	pop    edx
c001a244:	59                   	pop    ecx
c001a245:	50                   	push   eax
c001a246:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a24b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a251:	e8 ba 6e ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c001a256:	5b                   	pop    ebx
c001a257:	58                   	pop    eax
c001a258:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a25d:	68 03 b3 02 c0       	push   0xc002b303
c001a262:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a268:	e8 7d 6e ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a26d:	0f 20 e0             	mov    eax,cr4
c001a270:	5a                   	pop    edx
c001a271:	59                   	pop    ecx
c001a272:	50                   	push   eax
c001a273:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a278:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27e:	e8 8d 6e ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c001a283:	5b                   	pop    ebx
c001a284:	58                   	pop    eax
c001a285:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a28a:	68 0d b3 02 c0       	push   0xc002b30d
c001a28f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a295:	e8 50 6e ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a29a:	5a                   	pop    edx
c001a29b:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a2a0:	59                   	pop    ecx
c001a2a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2a7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2aa:	50                   	push   eax
c001a2ab:	e8 60 6e ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c001a2b0:	5b                   	pop    ebx
c001a2b1:	58                   	pop    eax
c001a2b2:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a2b7:	68 24 b3 02 c0       	push   0xc002b324
c001a2bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2c2:	e8 23 6e ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a2c7:	5a                   	pop    edx
c001a2c8:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a2cd:	59                   	pop    ecx
c001a2ce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2d4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a2d7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a2da:	50                   	push   eax
c001a2db:	e8 30 6e ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c001a2e0:	5b                   	pop    ebx
c001a2e1:	58                   	pop    eax
c001a2e2:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a2e7:	68 24 b3 02 c0       	push   0xc002b324
c001a2ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2f2:	e8 f3 6d ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a2f7:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a2fc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a2ff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a305:	8b 12                	mov    edx,DWORD PTR [edx]
c001a307:	59                   	pop    ecx
c001a308:	5b                   	pop    ebx
c001a309:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a30c:	50                   	push   eax
c001a30d:	e8 fe 6d ff ff       	call   c0011110 <VgaText::putx(unsigned int)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	b2 fe                	mov    dl,0xfe
c001a317:	e4 60                	in     al,0x60
c001a319:	3c 1c                	cmp    al,0x1c
c001a31b:	74 04                	je     c001a321 <Krnl::panic(char const*)+0x334>
c001a31d:	3c 5a                	cmp    al,0x5a
c001a31f:	75 f6                	jne    c001a317 <Krnl::panic(char const*)+0x32a>
c001a321:	e4 64                	in     al,0x64
c001a323:	a8 02                	test   al,0x2
c001a325:	75 fa                	jne    c001a321 <Krnl::panic(char const*)+0x334>
c001a327:	88 d0                	mov    al,dl
c001a329:	e6 64                	out    0x64,al
c001a32b:	fa                   	cli    
c001a32c:	f4                   	hlt    
c001a32d:	eb e8                	jmp    c001a317 <Krnl::panic(char const*)+0x32a>
c001a32f:	50                   	push   eax
c001a330:	50                   	push   eax
c001a331:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a336:	68 90 b3 02 c0       	push   0xc002b390
c001a33b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a341:	e8 a4 6d ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a346:	58                   	pop    eax
c001a347:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a34c:	5a                   	pop    edx
c001a34d:	68 9e b2 02 c0       	push   0xc002b29e
c001a352:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a358:	e8 8d 6d ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a35d:	59                   	pop    ecx
c001a35e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a363:	5b                   	pop    ebx
c001a364:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a367:	83 c0 0c             	add    eax,0xc
c001a36a:	50                   	push   eax
c001a36b:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a370:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a376:	e8 6f 6d ff ff       	call   c00110ea <VgaText::puts(char const*)>
c001a37b:	83 c4 10             	add    esp,0x10
c001a37e:	e9 a3 fd ff ff       	jmp    c001a126 <Krnl::panic(char const*)+0x139>

c001a383 <Net::switchEndian16(unsigned short)>:
c001a383:	83 ec 04             	sub    esp,0x4
c001a386:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a38a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a38e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a392:	c1 f8 08             	sar    eax,0x8
c001a395:	89 c2                	mov    edx,eax
c001a397:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a39b:	c1 e0 08             	shl    eax,0x8
c001a39e:	09 d0                	or     eax,edx
c001a3a0:	83 c4 04             	add    esp,0x4
c001a3a3:	c3                   	ret    

c001a3a4 <Net::switchEndian32(unsigned int)>:
c001a3a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3a8:	c1 e8 18             	shr    eax,0x18
c001a3ab:	89 c2                	mov    edx,eax
c001a3ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b1:	c1 e0 08             	shl    eax,0x8
c001a3b4:	25 00 00 ff 00       	and    eax,0xff0000
c001a3b9:	09 c2                	or     edx,eax
c001a3bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3bf:	c1 e8 08             	shr    eax,0x8
c001a3c2:	25 00 ff 00 00       	and    eax,0xff00
c001a3c7:	09 c2                	or     edx,eax
c001a3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3cd:	c1 e0 18             	shl    eax,0x18
c001a3d0:	09 d0                	or     eax,edx
c001a3d2:	c3                   	ret    

c001a3d3 <Net::crc32Calc(unsigned char*, int)>:
c001a3d3:	83 ec 10             	sub    esp,0x10
c001a3d6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3db:	75 07                	jne    c001a3e4 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a3dd:	b8 00 00 00 00       	mov    eax,0x0
c001a3e2:	eb 7c                	jmp    c001a460 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a3e4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a3e9:	7f 07                	jg     c001a3f2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a3eb:	b8 00 00 00 00       	mov    eax,0x0
c001a3f0:	eb 6e                	jmp    c001a460 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a3f2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a3fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a402:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a406:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a40a:	7d 4e                	jge    c001a45a <Net::crc32Calc(unsigned char*, int)+0x87>
c001a40c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a410:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a414:	01 d0                	add    eax,edx
c001a416:	8a 00                	mov    al,BYTE PTR [eax]
c001a418:	0f b6 c0             	movzx  eax,al
c001a41b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a41f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a427:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a42c:	7f 26                	jg     c001a454 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a432:	83 e0 01             	and    eax,0x1
c001a435:	74 0d                	je     c001a444 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a437:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43b:	d1 e8                	shr    eax,1
c001a43d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a442:	eb 06                	jmp    c001a44a <Net::crc32Calc(unsigned char*, int)+0x77>
c001a444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a448:	d1 e8                	shr    eax,1
c001a44a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a44e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a452:	eb d3                	jmp    c001a427 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a454:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a458:	eb a8                	jmp    c001a402 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a45a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a45e:	f7 d0                	not    eax
c001a460:	83 c4 10             	add    esp,0x10
c001a463:	c3                   	ret    

c001a464 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a464:	83 ec 1c             	sub    esp,0x1c
c001a467:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a46f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a477:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a47c:	7f 14                	jg     c001a492 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a47e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a482:	8d 50 01             	lea    edx,[eax+0x1]
c001a485:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a489:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a48c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a490:	eb e5                	jmp    c001a477 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a492:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a496:	8d 50 01             	lea    edx,[eax+0x1]
c001a499:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a49d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a4a0:	83 ec 04             	sub    esp,0x4
c001a4a3:	6a 06                	push   0x6
c001a4a5:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a4a9:	50                   	push   eax
c001a4aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a4ae:	e8 91 62 fe ff       	call   c0000744 <memcpy>
c001a4b3:	83 c4 10             	add    esp,0x10
c001a4b6:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a4bb:	83 ec 04             	sub    esp,0x4
c001a4be:	6a 06                	push   0x6
c001a4c0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a4c4:	50                   	push   eax
c001a4c5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a4c9:	e8 76 62 fe ff       	call   c0000744 <memcpy>
c001a4ce:	83 c4 10             	add    esp,0x10
c001a4d1:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a4d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4da:	0f b7 c0             	movzx  eax,ax
c001a4dd:	c1 f8 08             	sar    eax,0x8
c001a4e0:	89 c1                	mov    ecx,eax
c001a4e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4e9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a4ed:	88 ca                	mov    dl,cl
c001a4ef:	88 10                	mov    BYTE PTR [eax],dl
c001a4f1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4f9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a4fc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a500:	88 10                	mov    BYTE PTR [eax],dl
c001a502:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a50a:	83 ec 04             	sub    esp,0x4
c001a50d:	52                   	push   edx
c001a50e:	50                   	push   eax
c001a50f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a513:	e8 2c 62 fe ff       	call   c0000744 <memcpy>
c001a518:	83 c4 10             	add    esp,0x10
c001a51b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a51f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a523:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a527:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a52b:	83 ec 08             	sub    esp,0x8
c001a52e:	50                   	push   eax
c001a52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a533:	e8 9b fe ff ff       	call   c001a3d3 <Net::crc32Calc(unsigned char*, int)>
c001a538:	83 c4 10             	add    esp,0x10
c001a53b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a53f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a543:	c1 e8 18             	shr    eax,0x18
c001a546:	89 c1                	mov    ecx,eax
c001a548:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a54c:	8d 50 01             	lea    edx,[eax+0x1]
c001a54f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a553:	88 ca                	mov    dl,cl
c001a555:	88 10                	mov    BYTE PTR [eax],dl
c001a557:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a55b:	c1 e8 10             	shr    eax,0x10
c001a55e:	89 c1                	mov    ecx,eax
c001a560:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a564:	8d 50 01             	lea    edx,[eax+0x1]
c001a567:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a56b:	88 ca                	mov    dl,cl
c001a56d:	88 10                	mov    BYTE PTR [eax],dl
c001a56f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a573:	c1 e8 08             	shr    eax,0x8
c001a576:	89 c1                	mov    ecx,eax
c001a578:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a57c:	8d 50 01             	lea    edx,[eax+0x1]
c001a57f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a583:	88 ca                	mov    dl,cl
c001a585:	88 10                	mov    BYTE PTR [eax],dl
c001a587:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a58b:	8d 50 01             	lea    edx,[eax+0x1]
c001a58e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a592:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a596:	88 10                	mov    BYTE PTR [eax],dl
c001a598:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a59c:	83 c4 1c             	add    esp,0x1c
c001a59f:	c3                   	ret    

c001a5a0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a5a0:	83 ec 2c             	sub    esp,0x2c
c001a5a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5ab:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a5b0:	83 ec 04             	sub    esp,0x4
c001a5b3:	6a 06                	push   0x6
c001a5b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a5b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a5bd:	83 c0 0e             	add    eax,0xe
c001a5c0:	50                   	push   eax
c001a5c1:	e8 7e 61 fe ff       	call   c0000744 <memcpy>
c001a5c6:	83 c4 10             	add    esp,0x10
c001a5c9:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a5ce:	83 ec 04             	sub    esp,0x4
c001a5d1:	6a 06                	push   0x6
c001a5d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a5d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a5db:	83 c0 08             	add    eax,0x8
c001a5de:	50                   	push   eax
c001a5df:	e8 60 61 fe ff       	call   c0000744 <memcpy>
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a5ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5f0:	8d 50 01             	lea    edx,[eax+0x1]
c001a5f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a5f7:	8a 00                	mov    al,BYTE PTR [eax]
c001a5f9:	0f b6 c0             	movzx  eax,al
c001a5fc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a601:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a605:	8d 50 01             	lea    edx,[eax+0x1]
c001a608:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a60c:	8a 00                	mov    al,BYTE PTR [eax]
c001a60e:	0f b6 c0             	movzx  eax,al
c001a611:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a616:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a61b:	c1 e0 08             	shl    eax,0x8
c001a61e:	89 c2                	mov    edx,eax
c001a620:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a624:	09 d0                	or     eax,edx
c001a626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a62a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a62e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a633:	75 3a                	jne    c001a66f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a639:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a63c:	66 3d dc 05          	cmp    ax,0x5dc
c001a640:	77 10                	ja     c001a652 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a642:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a646:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a649:	0f b7 c0             	movzx  eax,ax
c001a64c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a650:	eb 1d                	jmp    c001a66f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a652:	83 ec 0c             	sub    esp,0xc
c001a655:	68 68 b4 02 c0       	push   0xc002b468
c001a65a:	e8 aa 84 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001a65f:	83 c4 10             	add    esp,0x10
c001a662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a666:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a66a:	e9 c0 00 00 00       	jmp    c001a72f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a66f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a673:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a677:	8b 00                	mov    eax,DWORD PTR [eax]
c001a679:	83 ec 04             	sub    esp,0x4
c001a67c:	52                   	push   edx
c001a67d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a681:	50                   	push   eax
c001a682:	e8 bd 60 fe ff       	call   c0000744 <memcpy>
c001a687:	83 c4 10             	add    esp,0x10
c001a68a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a68e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a692:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a696:	8d 50 01             	lea    edx,[eax+0x1]
c001a699:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a69d:	8a 00                	mov    al,BYTE PTR [eax]
c001a69f:	0f b6 c0             	movzx  eax,al
c001a6a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a6b1:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b3:	0f b6 c0             	movzx  eax,al
c001a6b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6be:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a6c5:	8a 00                	mov    al,BYTE PTR [eax]
c001a6c7:	0f b6 c0             	movzx  eax,al
c001a6ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a6d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a6d9:	8a 00                	mov    al,BYTE PTR [eax]
c001a6db:	0f b6 c0             	movzx  eax,al
c001a6de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6e6:	c1 e0 18             	shl    eax,0x18
c001a6e9:	89 c2                	mov    edx,eax
c001a6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ef:	c1 e0 10             	shl    eax,0x10
c001a6f2:	09 c2                	or     edx,eax
c001a6f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6f8:	c1 e0 08             	shl    eax,0x8
c001a6fb:	09 d0                	or     eax,edx
c001a6fd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a701:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a705:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a709:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a70d:	83 e8 04             	sub    eax,0x4
c001a710:	83 ec 08             	sub    esp,0x8
c001a713:	50                   	push   eax
c001a714:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a718:	e8 b6 fc ff ff       	call   c001a3d3 <Net::crc32Calc(unsigned char*, int)>
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a724:	0f 94 c2             	sete   dl
c001a727:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a72b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a72e:	90                   	nop
c001a72f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a733:	83 c4 2c             	add    esp,0x2c
c001a736:	c2 04 00             	ret    0x4

c001a739 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a739:	55                   	push   ebp
c001a73a:	57                   	push   edi
c001a73b:	56                   	push   esi
c001a73c:	53                   	push   ebx
c001a73d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a743:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a74a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a74c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a74f:	80 fb 40             	cmp    bl,0x40
c001a752:	75 1b                	jne    c001a76f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a754:	8a 16                	mov    dl,BYTE PTR [esi]
c001a756:	84 d2                	test   dl,dl
c001a758:	0f 84 f1 00 00 00    	je     c001a84f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a75e:	8d 46 01             	lea    eax,[esi+0x1]
c001a761:	80 fa 3a             	cmp    dl,0x3a
c001a764:	74 04                	je     c001a76a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a766:	89 c6                	mov    esi,eax
c001a768:	eb ea                	jmp    c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a76a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a76d:	89 c6                	mov    esi,eax
c001a76f:	50                   	push   eax
c001a770:	6a 40                	push   0x40
c001a772:	6a 00                	push   0x0
c001a774:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a778:	50                   	push   eax
c001a779:	e8 fa 5f fe ff       	call   c0000778 <memset>
c001a77e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a785:	31 c0                	xor    eax,eax
c001a787:	83 c4 10             	add    esp,0x10
c001a78a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a78c:	84 c9                	test   cl,cl
c001a78e:	0f 84 bb 00 00 00    	je     c001a84f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a794:	3d c7 00 00 00       	cmp    eax,0xc7
c001a799:	0f 8f b0 00 00 00    	jg     c001a84f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a79f:	80 f9 0a             	cmp    cl,0xa
c001a7a2:	0f 85 98 00 00 00    	jne    c001a840 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7a8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7ad:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7b1:	a8 df                	test   al,0xdf
c001a7b3:	0f 94 c1             	sete   cl
c001a7b6:	3c 23                	cmp    al,0x23
c001a7b8:	0f 94 c2             	sete   dl
c001a7bb:	08 d1                	or     cl,dl
c001a7bd:	75 4a                	jne    c001a809 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7bf:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7c2:	80 fa 01             	cmp    dl,0x1
c001a7c5:	76 42                	jbe    c001a809 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7c7:	3c 5b                	cmp    al,0x5b
c001a7c9:	75 42                	jne    c001a80d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7cb:	80 fb 40             	cmp    bl,0x40
c001a7ce:	75 39                	jne    c001a809 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7d0:	83 ec 0c             	sub    esp,0xc
c001a7d3:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7d7:	52                   	push   edx
c001a7d8:	e8 b7 5f fe ff       	call   c0000794 <strlen>
c001a7dd:	83 c4 10             	add    esp,0x10
c001a7e0:	83 f8 3f             	cmp    eax,0x3f
c001a7e3:	77 6a                	ja     c001a84f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7e5:	50                   	push   eax
c001a7e6:	50                   	push   eax
c001a7e7:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a7eb:	52                   	push   edx
c001a7ec:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7f0:	52                   	push   edx
c001a7f1:	e8 3e 60 fe ff       	call   c0000834 <strcpy>
c001a7f6:	58                   	pop    eax
c001a7f7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7fb:	52                   	push   edx
c001a7fc:	e8 93 5f fe ff       	call   c0000794 <strlen>
c001a801:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a806:	83 c4 10             	add    esp,0x10
c001a809:	31 d2                	xor    edx,edx
c001a80b:	eb 3a                	jmp    c001a847 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a80d:	80 fb 40             	cmp    bl,0x40
c001a810:	74 06                	je     c001a818 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a812:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a816:	eb 20                	jmp    c001a838 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a818:	50                   	push   eax
c001a819:	50                   	push   eax
c001a81a:	55                   	push   ebp
c001a81b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a81f:	50                   	push   eax
c001a820:	e8 9b 60 fe ff       	call   c00008c0 <strcmp>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	85 c0                	test   eax,eax
c001a82a:	75 dd                	jne    c001a809 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a82c:	eb e4                	jmp    c001a812 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a82e:	8d 50 01             	lea    edx,[eax+0x1]
c001a831:	80 f9 3d             	cmp    cl,0x3d
c001a834:	74 1d                	je     c001a853 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a836:	89 d0                	mov    eax,edx
c001a838:	8a 08                	mov    cl,BYTE PTR [eax]
c001a83a:	84 c9                	test   cl,cl
c001a83c:	75 f0                	jne    c001a82e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a83e:	eb 0f                	jmp    c001a84f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a840:	8d 50 01             	lea    edx,[eax+0x1]
c001a843:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a847:	47                   	inc    edi
c001a848:	89 d0                	mov    eax,edx
c001a84a:	e9 3b ff ff ff       	jmp    c001a78a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a84f:	31 c0                	xor    eax,eax
c001a851:	eb 33                	jmp    c001a886 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a857:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a85a:	50                   	push   eax
c001a85b:	50                   	push   eax
c001a85c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a860:	50                   	push   eax
c001a861:	56                   	push   esi
c001a862:	e8 59 60 fe ff       	call   c00008c0 <strcmp>
c001a867:	83 c4 10             	add    esp,0x10
c001a86a:	85 c0                	test   eax,eax
c001a86c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a870:	75 97                	jne    c001a809 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a872:	51                   	push   ecx
c001a873:	51                   	push   ecx
c001a874:	52                   	push   edx
c001a875:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a87c:	e8 b3 5f fe ff       	call   c0000834 <strcpy>
c001a881:	83 c4 10             	add    esp,0x10
c001a884:	b0 01                	mov    al,0x1
c001a886:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a88c:	5b                   	pop    ebx
c001a88d:	5e                   	pop    esi
c001a88e:	5f                   	pop    edi
c001a88f:	5d                   	pop    ebp
c001a890:	c3                   	ret    

c001a891 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a891:	57                   	push   edi
c001a892:	56                   	push   esi
c001a893:	53                   	push   ebx
c001a894:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a89a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8a1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8a8:	53                   	push   ebx
c001a8a9:	e8 e6 5e fe ff       	call   c0000794 <strlen>
c001a8ae:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8b1:	89 c7                	mov    edi,eax
c001a8b3:	e8 dc 5e fe ff       	call   c0000794 <strlen>
c001a8b8:	83 c4 10             	add    esp,0x10
c001a8bb:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8bf:	3d ff 00 00 00       	cmp    eax,0xff
c001a8c4:	0f 87 d3 00 00 00    	ja     c001a99d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8ca:	57                   	push   edi
c001a8cb:	57                   	push   edi
c001a8cc:	56                   	push   esi
c001a8cd:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8d1:	56                   	push   esi
c001a8d2:	e8 5d 5f fe ff       	call   c0000834 <strcpy>
c001a8d7:	58                   	pop    eax
c001a8d8:	5a                   	pop    edx
c001a8d9:	68 c0 b8 02 c0       	push   0xc002b8c0
c001a8de:	56                   	push   esi
c001a8df:	e8 90 60 fe ff       	call   c0000974 <strcat>
c001a8e4:	59                   	pop    ecx
c001a8e5:	5f                   	pop    edi
c001a8e6:	53                   	push   ebx
c001a8e7:	56                   	push   esi
c001a8e8:	e8 87 60 fe ff       	call   c0000974 <strcat>
c001a8ed:	58                   	pop    eax
c001a8ee:	5a                   	pop    edx
c001a8ef:	68 b4 b4 02 c0       	push   0xc002b4b4
c001a8f4:	56                   	push   esi
c001a8f5:	e8 7a 60 fe ff       	call   c0000974 <strcat>
c001a8fa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a901:	e8 34 4f ff ff       	call   c000f83a <malloc>
c001a906:	83 c4 0c             	add    esp,0xc
c001a909:	89 c3                	mov    ebx,eax
c001a90b:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c001a911:	56                   	push   esi
c001a912:	50                   	push   eax
c001a913:	e8 4a 87 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001a918:	83 c4 10             	add    esp,0x10
c001a91b:	85 db                	test   ebx,ebx
c001a91d:	74 7e                	je     c001a99d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a91f:	51                   	push   ecx
c001a920:	51                   	push   ecx
c001a921:	6a 01                	push   0x1
c001a923:	53                   	push   ebx
c001a924:	e8 9d 87 ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c001a929:	83 c4 10             	add    esp,0x10
c001a92c:	85 c0                	test   eax,eax
c001a92e:	74 08                	je     c001a938 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a935:	53                   	push   ebx
c001a936:	eb 5f                	jmp    c001a997 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a938:	52                   	push   edx
c001a939:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a93d:	50                   	push   eax
c001a93e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a942:	50                   	push   eax
c001a943:	53                   	push   ebx
c001a944:	e8 29 8a ff ff       	call   c0013372 <File::stat(unsigned long long*, bool*)>
c001a949:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a94d:	83 c4 10             	add    esp,0x10
c001a950:	89 c1                	mov    ecx,eax
c001a952:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a956:	74 31                	je     c001a989 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a958:	83 ec 0c             	sub    esp,0xc
c001a95b:	50                   	push   eax
c001a95c:	e8 d9 4e ff ff       	call   c000f83a <malloc>
c001a961:	89 c6                	mov    esi,eax
c001a963:	58                   	pop    eax
c001a964:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a966:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a96a:	52                   	push   edx
c001a96b:	56                   	push   esi
c001a96c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a970:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a974:	53                   	push   ebx
c001a975:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a978:	83 c4 20             	add    esp,0x20
c001a97b:	85 c0                	test   eax,eax
c001a97d:	75 0a                	jne    c001a989 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a97f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a983:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a987:	74 18                	je     c001a9a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a989:	83 ec 0c             	sub    esp,0xc
c001a98c:	53                   	push   ebx
c001a98d:	e8 92 87 ff ff       	call   c0013124 <File::close()>
c001a992:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a994:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a997:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a99a:	83 c4 10             	add    esp,0x10
c001a99d:	31 c0                	xor    eax,eax
c001a99f:	eb 3b                	jmp    c001a9dc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9a1:	83 ec 0c             	sub    esp,0xc
c001a9a4:	53                   	push   ebx
c001a9a5:	e8 7a 87 ff ff       	call   c0013124 <File::close()>
c001a9aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9b2:	83 c4 0c             	add    esp,0xc
c001a9b5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9bc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9c3:	56                   	push   esi
c001a9c4:	e8 70 fd ff ff       	call   c001a739 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9c9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9cc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9d0:	e8 75 4e ff ff       	call   c000f84a <free>
c001a9d5:	83 c4 10             	add    esp,0x10
c001a9d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9dc:	81 c4 20 01 00 00    	add    esp,0x120
c001a9e2:	5b                   	pop    ebx
c001a9e3:	5e                   	pop    esi
c001a9e4:	5f                   	pop    edi
c001a9e5:	c3                   	ret    

c001a9e6 <Reg::getLine(char*, char*, char*)>:
c001a9e6:	57                   	push   edi
c001a9e7:	56                   	push   esi
c001a9e8:	53                   	push   ebx
c001a9e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a9f5:	57                   	push   edi
c001a9f6:	56                   	push   esi
c001a9f7:	53                   	push   ebx
c001a9f8:	68 b9 b4 02 c0       	push   0xc002b4b9
c001a9fd:	e8 8f fe ff ff       	call   c001a891 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	84 c0                	test   al,al
c001aa07:	75 10                	jne    c001aa19 <Reg::getLine(char*, char*, char*)+0x33>
c001aa09:	57                   	push   edi
c001aa0a:	56                   	push   esi
c001aa0b:	53                   	push   ebx
c001aa0c:	68 de b4 02 c0       	push   0xc002b4de
c001aa11:	e8 7b fe ff ff       	call   c001a891 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa16:	83 c4 10             	add    esp,0x10
c001aa19:	5b                   	pop    ebx
c001aa1a:	5e                   	pop    esi
c001aa1b:	5f                   	pop    edi
c001aa1c:	c3                   	ret    

c001aa1d <Reg::readInt(char*, char*, int*)>:
c001aa1d:	55                   	push   ebp
c001aa1e:	57                   	push   edi
c001aa1f:	56                   	push   esi
c001aa20:	53                   	push   ebx
c001aa21:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa27:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa2b:	57                   	push   edi
c001aa2c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa33:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa3a:	e8 a7 ff ff ff       	call   c001a9e6 <Reg::getLine(char*, char*, char*)>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	84 c0                	test   al,al
c001aa44:	0f 84 b3 00 00 00    	je     c001aafd <Reg::readInt(char*, char*, int*)+0xe0>
c001aa4a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa4e:	80 fa 2b             	cmp    dl,0x2b
c001aa51:	74 0c                	je     c001aa5f <Reg::readInt(char*, char*, int*)+0x42>
c001aa53:	80 fa 2d             	cmp    dl,0x2d
c001aa56:	75 0e                	jne    c001aa66 <Reg::readInt(char*, char*, int*)+0x49>
c001aa58:	ba 01 00 00 00       	mov    edx,0x1
c001aa5d:	eb 0b                	jmp    c001aa6a <Reg::readInt(char*, char*, int*)+0x4d>
c001aa5f:	ba 01 00 00 00       	mov    edx,0x1
c001aa64:	eb 02                	jmp    c001aa68 <Reg::readInt(char*, char*, int*)+0x4b>
c001aa66:	31 d2                	xor    edx,edx
c001aa68:	31 c0                	xor    eax,eax
c001aa6a:	be 0a 00 00 00       	mov    esi,0xa
c001aa6f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa74:	75 20                	jne    c001aa96 <Reg::readInt(char*, char*, int*)+0x79>
c001aa76:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa7a:	80 f9 78             	cmp    cl,0x78
c001aa7d:	75 0a                	jne    c001aa89 <Reg::readInt(char*, char*, int*)+0x6c>
c001aa7f:	83 c2 02             	add    edx,0x2
c001aa82:	be 10 00 00 00       	mov    esi,0x10
c001aa87:	eb 0d                	jmp    c001aa96 <Reg::readInt(char*, char*, int*)+0x79>
c001aa89:	80 f9 62             	cmp    cl,0x62
c001aa8c:	75 08                	jne    c001aa96 <Reg::readInt(char*, char*, int*)+0x79>
c001aa8e:	83 c2 02             	add    edx,0x2
c001aa91:	be 02 00 00 00       	mov    esi,0x2
c001aa96:	01 d7                	add    edi,edx
c001aa98:	31 d2                	xor    edx,edx
c001aa9a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aa9c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aaa0:	80 fb 0d             	cmp    bl,0xd
c001aaa3:	0f 94 c3             	sete   bl
c001aaa6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aaab:	0f 94 c1             	sete   cl
c001aaae:	08 cb                	or     bl,cl
c001aab0:	75 3a                	jne    c001aaec <Reg::readInt(char*, char*, int*)+0xcf>
c001aab2:	0f af d6             	imul   edx,esi
c001aab5:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aaba:	83 fe 10             	cmp    esi,0x10
c001aabd:	75 26                	jne    c001aae5 <Reg::readInt(char*, char*, int*)+0xc8>
c001aabf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aac3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aac6:	89 e9                	mov    ecx,ebp
c001aac8:	80 f9 05             	cmp    cl,0x5
c001aacb:	77 06                	ja     c001aad3 <Reg::readInt(char*, char*, int*)+0xb6>
c001aacd:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aad1:	eb 16                	jmp    c001aae9 <Reg::readInt(char*, char*, int*)+0xcc>
c001aad3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aad7:	83 e9 61             	sub    ecx,0x61
c001aada:	80 f9 05             	cmp    cl,0x5
c001aadd:	77 06                	ja     c001aae5 <Reg::readInt(char*, char*, int*)+0xc8>
c001aadf:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aae3:	eb 04                	jmp    c001aae9 <Reg::readInt(char*, char*, int*)+0xcc>
c001aae5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aae9:	47                   	inc    edi
c001aaea:	eb ae                	jmp    c001aa9a <Reg::readInt(char*, char*, int*)+0x7d>
c001aaec:	84 c0                	test   al,al
c001aaee:	74 02                	je     c001aaf2 <Reg::readInt(char*, char*, int*)+0xd5>
c001aaf0:	f7 da                	neg    edx
c001aaf2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aaf9:	89 10                	mov    DWORD PTR [eax],edx
c001aafb:	88 d8                	mov    al,bl
c001aafd:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab03:	5b                   	pop    ebx
c001ab04:	5e                   	pop    esi
c001ab05:	5f                   	pop    edi
c001ab06:	5d                   	pop    ebp
c001ab07:	c3                   	ret    

c001ab08 <Reg::readString(char*, char*, char*, int)>:
c001ab08:	57                   	push   edi
c001ab09:	56                   	push   esi
c001ab0a:	53                   	push   ebx
c001ab0b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab11:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab18:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab1c:	57                   	push   edi
c001ab1d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab24:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab2b:	e8 b6 fe ff ff       	call   c001a9e6 <Reg::getLine(char*, char*, char*)>
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	89 c6                	mov    esi,eax
c001ab35:	84 c0                	test   al,al
c001ab37:	74 44                	je     c001ab7d <Reg::readString(char*, char*, char*, int)+0x75>
c001ab39:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab40:	31 c0                	xor    eax,eax
c001ab42:	4a                   	dec    edx
c001ab43:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab46:	84 c9                	test   cl,cl
c001ab48:	74 0f                	je     c001ab59 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab4a:	39 c2                	cmp    edx,eax
c001ab4c:	7e 0b                	jle    c001ab59 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab4e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab51:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab56:	40                   	inc    eax
c001ab57:	eb ea                	jmp    c001ab43 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab59:	83 ec 0c             	sub    esp,0xc
c001ab5c:	53                   	push   ebx
c001ab5d:	e8 32 5c fe ff       	call   c0000794 <strlen>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab6a:	75 11                	jne    c001ab7d <Reg::readString(char*, char*, char*, int)+0x75>
c001ab6c:	83 ec 0c             	sub    esp,0xc
c001ab6f:	53                   	push   ebx
c001ab70:	e8 1f 5c fe ff       	call   c0000794 <strlen>
c001ab75:	83 c4 10             	add    esp,0x10
c001ab78:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab7d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab83:	89 f0                	mov    eax,esi
c001ab85:	5b                   	pop    ebx
c001ab86:	5e                   	pop    esi
c001ab87:	5f                   	pop    edi
c001ab88:	c3                   	ret    

c001ab89 <Reg::readBool(char*, char*, bool*)>:
c001ab89:	83 ec 20             	sub    esp,0x20
c001ab8c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab90:	50                   	push   eax
c001ab91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab99:	e8 7f fe ff ff       	call   c001aa1d <Reg::readInt(char*, char*, int*)>
c001ab9e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aba3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aba7:	0f 95 02             	setne  BYTE PTR [edx]
c001abaa:	83 c4 2c             	add    esp,0x2c
c001abad:	c3                   	ret    

c001abae <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abae:	53                   	push   ebx
c001abaf:	83 ec 1c             	sub    esp,0x1c
c001abb2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abb6:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abba:	50                   	push   eax
c001abbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abc3:	e8 c1 ff ff ff       	call   c001ab89 <Reg::readBool(char*, char*, bool*)>
c001abc8:	83 c4 10             	add    esp,0x10
c001abcb:	84 c0                	test   al,al
c001abcd:	74 04                	je     c001abd3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abcf:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abd3:	88 d8                	mov    al,bl
c001abd5:	83 c4 18             	add    esp,0x18
c001abd8:	5b                   	pop    ebx
c001abd9:	c3                   	ret    

c001abda <Reg::readIntWithDefault(char*, char*, int)>:
c001abda:	53                   	push   ebx
c001abdb:	83 ec 1c             	sub    esp,0x1c
c001abde:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abe2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abe6:	50                   	push   eax
c001abe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abef:	e8 29 fe ff ff       	call   c001aa1d <Reg::readInt(char*, char*, int*)>
c001abf4:	83 c4 10             	add    esp,0x10
c001abf7:	84 c0                	test   al,al
c001abf9:	74 04                	je     c001abff <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001abfb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001abff:	89 d8                	mov    eax,ebx
c001ac01:	83 c4 18             	add    esp,0x18
c001ac04:	5b                   	pop    ebx
c001ac05:	c3                   	ret    

c001ac06 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac06:	57                   	push   edi
c001ac07:	56                   	push   esi
c001ac08:	53                   	push   ebx
c001ac09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac0d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac11:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac15:	56                   	push   esi
c001ac16:	53                   	push   ebx
c001ac17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac1f:	e8 e4 fe ff ff       	call   c001ab08 <Reg::readString(char*, char*, char*, int)>
c001ac24:	83 c4 10             	add    esp,0x10
c001ac27:	84 c0                	test   al,al
c001ac29:	75 1b                	jne    c001ac46 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001ac2b:	50                   	push   eax
c001ac2c:	56                   	push   esi
c001ac2d:	4e                   	dec    esi
c001ac2e:	6a 00                	push   0x0
c001ac30:	53                   	push   ebx
c001ac31:	e8 42 5b fe ff       	call   c0000778 <memset>
c001ac36:	83 c4 0c             	add    esp,0xc
c001ac39:	56                   	push   esi
c001ac3a:	57                   	push   edi
c001ac3b:	53                   	push   ebx
c001ac3c:	89 fb                	mov    ebx,edi
c001ac3e:	e8 01 5b fe ff       	call   c0000744 <memcpy>
c001ac43:	83 c4 10             	add    esp,0x10
c001ac46:	89 d8                	mov    eax,ebx
c001ac48:	5b                   	pop    ebx
c001ac49:	5e                   	pop    esi
c001ac4a:	5f                   	pop    edi
c001ac4b:	c3                   	ret    

c001ac4c <Sys::eject(regs*)>:
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	83 ca ff             	or     edx,0xffffffff
c001ac52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac56:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac59:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac5e:	83 e9 41             	sub    ecx,0x41
c001ac61:	83 f9 19             	cmp    ecx,0x19
c001ac64:	77 18                	ja     c001ac7e <Sys::eject(regs*)+0x32>
c001ac66:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c001ac6d:	85 c9                	test   ecx,ecx
c001ac6f:	74 0d                	je     c001ac7e <Sys::eject(regs*)+0x32>
c001ac71:	83 ec 0c             	sub    esp,0xc
c001ac74:	51                   	push   ecx
c001ac75:	e8 e2 b5 ff ff       	call   c001625c <LogicalDisk::eject()>
c001ac7a:	83 c4 10             	add    esp,0x10
c001ac7d:	99                   	cdq    
c001ac7e:	83 c4 0c             	add    esp,0xc
c001ac81:	c3                   	ret    

c001ac82 <Sys::exit(regs*)>:
c001ac82:	83 ec 18             	sub    esp,0x18
c001ac85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac89:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac8c:	e8 08 34 00 00       	call   c001e099 <terminateTask(int)>
c001ac91:	83 c8 ff             	or     eax,0xffffffff
c001ac94:	83 c4 1c             	add    esp,0x1c
c001ac97:	89 c2                	mov    edx,eax
c001ac99:	c3                   	ret    

c001ac9a <Sys::getCwd(regs*)>:
c001ac9a:	83 ec 10             	sub    esp,0x10
c001ac9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aca1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aca4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acaf:	e8 b0 81 ff ff       	call   c0012e64 <Fs::getcwd(Process*, char*, int)>
c001acb4:	83 c4 1c             	add    esp,0x1c
c001acb7:	99                   	cdq    
c001acb8:	c3                   	ret    

c001acb9 <Sys::getPID(regs*)>:
c001acb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acc1:	8b 00                	mov    eax,DWORD PTR [eax]
c001acc3:	99                   	cdq    
c001acc4:	c3                   	ret    

c001acc5 <Sys::loadDLL(regs*)>:
c001acc5:	56                   	push   esi
c001acc6:	53                   	push   ebx
c001acc7:	31 d2                	xor    edx,edx
c001acc9:	51                   	push   ecx
c001acca:	b8 01 00 00 00       	mov    eax,0x1
c001accf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001acd3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001acd7:	0f 84 8c 00 00 00    	je     c001ad69 <Sys::loadDLL(regs*)+0xa4>
c001acdd:	83 ec 0c             	sub    esp,0xc
c001ace0:	68 14 01 00 00       	push   0x114
c001ace5:	e8 50 4b ff ff       	call   c000f83a <malloc>
c001acea:	83 c4 0c             	add    esp,0xc
c001aced:	89 c3                	mov    ebx,eax
c001acef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acf4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acf7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001acfa:	53                   	push   ebx
c001acfb:	e8 62 83 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001ad00:	83 c4 10             	add    esp,0x10
c001ad03:	31 d2                	xor    edx,edx
c001ad05:	b8 02 00 00 00       	mov    eax,0x2
c001ad0a:	85 db                	test   ebx,ebx
c001ad0c:	74 5b                	je     c001ad69 <Sys::loadDLL(regs*)+0xa4>
c001ad0e:	83 ec 0c             	sub    esp,0xc
c001ad11:	53                   	push   ebx
c001ad12:	e8 1d 86 ff ff       	call   c0013334 <File::exists()>
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	84 c0                	test   al,al
c001ad1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad1e:	75 11                	jne    c001ad31 <Sys::loadDLL(regs*)+0x6c>
c001ad20:	83 ec 0c             	sub    esp,0xc
c001ad23:	53                   	push   ebx
c001ad24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	b8 03 00 00 00       	mov    eax,0x3
c001ad2f:	eb 36                	jmp    c001ad67 <Sys::loadDLL(regs*)+0xa2>
c001ad31:	83 ec 0c             	sub    esp,0xc
c001ad34:	53                   	push   ebx
c001ad35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad38:	58                   	pop    eax
c001ad39:	5a                   	pop    edx
c001ad3a:	6a 00                	push   0x0
c001ad3c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad3f:	e8 91 22 00 00       	call   c001cfd5 <Thr::loadDLL(char const*, bool)>
c001ad44:	83 c4 10             	add    esp,0x10
c001ad47:	89 c1                	mov    ecx,eax
c001ad49:	31 d2                	xor    edx,edx
c001ad4b:	b8 04 00 00 00       	mov    eax,0x4
c001ad50:	85 c9                	test   ecx,ecx
c001ad52:	74 15                	je     c001ad69 <Sys::loadDLL(regs*)+0xa4>
c001ad54:	53                   	push   ebx
c001ad55:	53                   	push   ebx
c001ad56:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c001ad5c:	51                   	push   ecx
c001ad5d:	e8 8f 24 00 00       	call   c001d1f1 <Thr::executeDLL(unsigned long, void*)>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	31 c0                	xor    eax,eax
c001ad67:	31 d2                	xor    edx,edx
c001ad69:	59                   	pop    ecx
c001ad6a:	5b                   	pop    ebx
c001ad6b:	5e                   	pop    esi
c001ad6c:	c3                   	ret    

c001ad6d <Sys::read(regs*)>:
c001ad6d:	57                   	push   edi
c001ad6e:	56                   	push   esi
c001ad6f:	53                   	push   ebx
c001ad70:	83 ec 10             	sub    esp,0x10
c001ad73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad77:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad7a:	83 f8 02             	cmp    eax,0x2
c001ad7d:	77 10                	ja     c001ad8f <Sys::read(regs*)+0x22>
c001ad7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad87:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ad8d:	eb 0e                	jmp    c001ad9d <Sys::read(regs*)+0x30>
c001ad8f:	83 ec 0c             	sub    esp,0xc
c001ad92:	50                   	push   eax
c001ad93:	e8 2b 6c ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001ad98:	83 c4 10             	add    esp,0x10
c001ad9b:	89 c1                	mov    ecx,eax
c001ad9d:	83 c8 ff             	or     eax,0xffffffff
c001ada0:	85 c9                	test   ecx,ecx
c001ada2:	89 c2                	mov    edx,eax
c001ada4:	74 28                	je     c001adce <Sys::read(regs*)+0x61>
c001ada6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001adae:	31 ff                	xor    edi,edi
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c001adb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001adb9:	52                   	push   edx
c001adba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001adbd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001adc0:	57                   	push   edi
c001adc1:	56                   	push   esi
c001adc2:	51                   	push   ecx
c001adc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001adca:	83 c4 20             	add    esp,0x20
c001adcd:	99                   	cdq    
c001adce:	83 c4 10             	add    esp,0x10
c001add1:	5b                   	pop    ebx
c001add2:	5e                   	pop    esi
c001add3:	5f                   	pop    edi
c001add4:	c3                   	ret    

c001add5 <Sys::sbrk(regs*)>:
c001add5:	56                   	push   esi
c001add6:	53                   	push   ebx
c001add7:	50                   	push   eax
c001add8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001addd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ade1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ade4:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ade7:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aded:	85 db                	test   ebx,ebx
c001adef:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001adf2:	74 02                	je     c001adf6 <Sys::sbrk(regs*)+0x21>
c001adf4:	79 06                	jns    c001adfc <Sys::sbrk(regs*)+0x27>
c001adf6:	89 f0                	mov    eax,esi
c001adf8:	31 d2                	xor    edx,edx
c001adfa:	eb 2a                	jmp    c001ae26 <Sys::sbrk(regs*)+0x51>
c001adfc:	83 c8 ff             	or     eax,0xffffffff
c001adff:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ae05:	89 c2                	mov    edx,eax
c001ae07:	77 1d                	ja     c001ae26 <Sys::sbrk(regs*)+0x51>
c001ae09:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ae0f:	50                   	push   eax
c001ae10:	c1 ea 0c             	shr    edx,0xc
c001ae13:	68 07 04 00 00       	push   0x407
c001ae18:	52                   	push   edx
c001ae19:	51                   	push   ecx
c001ae1a:	e8 c5 74 ff ff       	call   c00122e4 <VAS::allocatePages(int, int)>
c001ae1f:	89 f0                	mov    eax,esi
c001ae21:	31 d2                	xor    edx,edx
c001ae23:	83 c4 10             	add    esp,0x10
c001ae26:	59                   	pop    ecx
c001ae27:	5b                   	pop    ebx
c001ae28:	5e                   	pop    esi
c001ae29:	c3                   	ret    

c001ae2a <Sys::setCwd(regs*)>:
c001ae2a:	83 ec 14             	sub    esp,0x14
c001ae2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae31:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae39:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae3c:	e8 92 85 ff ff       	call   c00133d3 <Fs::setcwd(Process*, char*)>
c001ae41:	83 c4 1c             	add    esp,0x1c
c001ae44:	99                   	cdq    
c001ae45:	c3                   	ret    

c001ae46 <Sys::setTime(regs*)>:
c001ae46:	55                   	push   ebp
c001ae47:	31 d2                	xor    edx,edx
c001ae49:	57                   	push   edi
c001ae4a:	bf 18 00 00 00       	mov    edi,0x18
c001ae4f:	56                   	push   esi
c001ae50:	53                   	push   ebx
c001ae51:	bb 3c 00 00 00       	mov    ebx,0x3c
c001ae56:	83 ec 30             	sub    esp,0x30
c001ae59:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001ae5d:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001ae60:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ae63:	f7 f3                	div    ebx
c001ae65:	89 d6                	mov    esi,edx
c001ae67:	31 d2                	xor    edx,edx
c001ae69:	f7 f3                	div    ebx
c001ae6b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ae6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ae72:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ae77:	31 d2                	xor    edx,edx
c001ae79:	f7 f3                	div    ebx
c001ae7b:	31 d2                	xor    edx,edx
c001ae7d:	bb 0c 00 00 00       	mov    ebx,0xc
c001ae82:	f7 f7                	div    edi
c001ae84:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ae87:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ae8b:	0f b7 cd             	movzx  ecx,bp
c001ae8e:	56                   	push   esi
c001ae8f:	89 c7                	mov    edi,eax
c001ae91:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ae95:	c1 e6 10             	shl    esi,0x10
c001ae98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae9c:	83 e7 1f             	and    edi,0x1f
c001ae9f:	51                   	push   ecx
c001aea0:	47                   	inc    edi
c001aea1:	c1 e8 05             	shr    eax,0x5
c001aea4:	31 d2                	xor    edx,edx
c001aea6:	f7 f3                	div    ebx
c001aea8:	31 db                	xor    ebx,ebx
c001aeaa:	52                   	push   edx
c001aeab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001aeaf:	57                   	push   edi
c001aeb0:	68 f9 b4 02 c0       	push   0xc002b4f9
c001aeb5:	e8 4f 7c ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001aeba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aebe:	89 f8                	mov    eax,edi
c001aec0:	31 c9                	xor    ecx,ecx
c001aec2:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001aec6:	88 c1                	mov    cl,al
c001aec8:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001aece:	88 d5                	mov    ch,dl
c001aed0:	c1 e0 10             	shl    eax,0x10
c001aed3:	0f b7 d1             	movzx  edx,cx
c001aed6:	09 c2                	or     edx,eax
c001aed8:	89 d8                	mov    eax,ebx
c001aeda:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001aedf:	09 f0                	or     eax,esi
c001aee1:	89 c3                	mov    ebx,eax
c001aee3:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001aee7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aeeb:	83 c4 18             	add    esp,0x18
c001aeee:	53                   	push   ebx
c001aeef:	52                   	push   edx
c001aef0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001aef4:	8d 74 24 28          	lea    esi,[esp+0x28]
c001aef8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aefc:	e8 ec 8b ff ff       	call   c0013aed <datetimeToSeconds(datetime_t)>
c001af01:	83 c4 0c             	add    esp,0xc
c001af04:	52                   	push   edx
c001af05:	50                   	push   eax
c001af06:	56                   	push   esi
c001af07:	e8 68 8d ff ff       	call   c0013c74 <secondsToDatetime(unsigned long long)>
c001af0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af14:	51                   	push   ecx
c001af15:	89 d6                	mov    esi,edx
c001af17:	51                   	push   ecx
c001af18:	c1 ee 10             	shr    esi,0x10
c001af1b:	89 f3                	mov    ebx,esi
c001af1d:	0f b6 f3             	movzx  esi,bl
c001af20:	56                   	push   esi
c001af21:	0f b6 f6             	movzx  esi,dh
c001af24:	0f b6 d2             	movzx  edx,dl
c001af27:	56                   	push   esi
c001af28:	52                   	push   edx
c001af29:	89 c2                	mov    edx,eax
c001af2b:	c1 ea 10             	shr    edx,0x10
c001af2e:	52                   	push   edx
c001af2f:	0f b6 d4             	movzx  edx,ah
c001af32:	0f b6 c0             	movzx  eax,al
c001af35:	52                   	push   edx
c001af36:	50                   	push   eax
c001af37:	68 15 b5 02 c0       	push   0xc002b515
c001af3c:	e8 c8 7b ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001af41:	83 c4 2c             	add    esp,0x2c
c001af44:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001af49:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001af4d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001af51:	53                   	push   ebx
c001af52:	51                   	push   ecx
c001af53:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af59:	e8 b6 8c ff ff       	call   c0013c14 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af5e:	83 f0 01             	xor    eax,0x1
c001af61:	31 d2                	xor    edx,edx
c001af63:	0f b6 c0             	movzx  eax,al
c001af66:	83 c4 3c             	add    esp,0x3c
c001af69:	5b                   	pop    ebx
c001af6a:	5e                   	pop    esi
c001af6b:	5f                   	pop    edi
c001af6c:	5d                   	pop    ebp
c001af6d:	c3                   	ret    

c001af6e <Sys::timezone(regs*)>:
c001af6e:	53                   	push   ebx
c001af6f:	83 ec 08             	sub    esp,0x8
c001af72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af76:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af7a:	75 17                	jne    c001af93 <Sys::timezone(regs*)+0x25>
c001af7c:	83 ec 0c             	sub    esp,0xc
c001af7f:	68 31 b5 02 c0       	push   0xc002b531
c001af84:	e8 80 7b ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001af89:	83 c8 ff             	or     eax,0xffffffff
c001af8c:	83 c4 10             	add    esp,0x10
c001af8f:	89 c2                	mov    edx,eax
c001af91:	eb 20                	jmp    c001afb3 <Sys::timezone(regs*)+0x45>
c001af93:	83 ec 0c             	sub    esp,0xc
c001af96:	68 69 b5 02 c0       	push   0xc002b569
c001af9b:	e8 69 7b ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001afa0:	58                   	pop    eax
c001afa1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afa4:	e8 cd 89 ff ff       	call   c0013976 <User::loadClockSettings(int)>
c001afa9:	83 c4 10             	add    esp,0x10
c001afac:	b8 01 00 00 00       	mov    eax,0x1
c001afb1:	31 d2                	xor    edx,edx
c001afb3:	83 c4 08             	add    esp,0x8
c001afb6:	5b                   	pop    ebx
c001afb7:	c3                   	ret    

c001afb8 <Sys::write(regs*)>:
c001afb8:	57                   	push   edi
c001afb9:	56                   	push   esi
c001afba:	53                   	push   ebx
c001afbb:	83 ec 10             	sub    esp,0x10
c001afbe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afc2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afc5:	83 f8 02             	cmp    eax,0x2
c001afc8:	77 10                	ja     c001afda <Sys::write(regs*)+0x22>
c001afca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afcf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afd2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afd8:	eb 0e                	jmp    c001afe8 <Sys::write(regs*)+0x30>
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	50                   	push   eax
c001afde:	e8 e0 69 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	89 c1                	mov    ecx,eax
c001afe8:	83 c8 ff             	or     eax,0xffffffff
c001afeb:	85 c9                	test   ecx,ecx
c001afed:	89 c2                	mov    edx,eax
c001afef:	74 28                	je     c001b019 <Sys::write(regs*)+0x61>
c001aff1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aff9:	31 ff                	xor    edi,edi
c001affb:	83 ec 0c             	sub    esp,0xc
c001affe:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b000:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b004:	52                   	push   edx
c001b005:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b008:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b00b:	57                   	push   edi
c001b00c:	56                   	push   esi
c001b00d:	51                   	push   ecx
c001b00e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b011:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b015:	83 c4 20             	add    esp,0x20
c001b018:	99                   	cdq    
c001b019:	83 c4 10             	add    esp,0x10
c001b01c:	5b                   	pop    ebx
c001b01d:	5e                   	pop    esi
c001b01e:	5f                   	pop    edi
c001b01f:	c3                   	ret    

c001b020 <Sys::yield(regs*)>:
c001b020:	57                   	push   edi
c001b021:	56                   	push   esi
c001b022:	53                   	push   ebx
c001b023:	e8 2e 26 00 00       	call   c001d656 <lockScheduler()>
c001b028:	e8 65 29 00 00       	call   c001d992 <schedule()>
c001b02d:	e8 26 26 00 00       	call   c001d658 <unlockScheduler()>
c001b032:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c001b038:	8b 3d 34 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e134
c001b03e:	89 f0                	mov    eax,esi
c001b040:	89 fb                	mov    ebx,edi
c001b042:	89 f1                	mov    ecx,esi
c001b044:	c1 e0 07             	shl    eax,0x7
c001b047:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b04b:	25 80 30 0f 00       	and    eax,0xf3080
c001b050:	c1 eb 17             	shr    ebx,0x17
c001b053:	31 c8                	xor    eax,ecx
c001b055:	89 da                	mov    edx,ebx
c001b057:	5b                   	pop    ebx
c001b058:	5e                   	pop    esi
c001b059:	5f                   	pop    edi
c001b05a:	c3                   	ret    

c001b05b <sysCallSeekDir(regs*)>:
c001b05b:	31 c0                	xor    eax,eax
c001b05d:	31 d2                	xor    edx,edx
c001b05f:	c3                   	ret    

c001b060 <sysCallTellDir(regs*)>:
c001b060:	31 c0                	xor    eax,eax
c001b062:	31 d2                	xor    edx,edx
c001b064:	c3                   	ret    

c001b065 <sysCallVerify(regs*)>:
c001b065:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b069:	31 d2                	xor    edx,edx
c001b06b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b06e:	c3                   	ret    

c001b06f <sysCallGetArgc(regs*)>:
c001b06f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b074:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b077:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b07d:	99                   	cdq    
c001b07e:	c3                   	ret    

c001b07f <sysFormatDisk(regs*)>:
c001b07f:	56                   	push   esi
c001b080:	53                   	push   ebx
c001b081:	53                   	push   ebx
c001b082:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b086:	8b 1d 28 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc28
c001b08c:	eb 25                	jmp    c001b0b3 <sysFormatDisk(regs*)+0x34>
c001b08e:	83 ec 0c             	sub    esp,0xc
c001b091:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b094:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b096:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b099:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b09c:	50                   	push   eax
c001b09d:	ff 34 85 c0 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f40]
c001b0a4:	53                   	push   ebx
c001b0a5:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b0a8:	83 c4 20             	add    esp,0x20
c001b0ab:	83 f8 08             	cmp    eax,0x8
c001b0ae:	75 12                	jne    c001b0c2 <sysFormatDisk(regs*)+0x43>
c001b0b0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b0b3:	85 db                	test   ebx,ebx
c001b0b5:	75 d7                	jne    c001b08e <sysFormatDisk(regs*)+0xf>
c001b0b7:	59                   	pop    ecx
c001b0b8:	b8 03 00 00 00       	mov    eax,0x3
c001b0bd:	31 d2                	xor    edx,edx
c001b0bf:	5b                   	pop    ebx
c001b0c0:	5e                   	pop    esi
c001b0c1:	c3                   	ret    
c001b0c2:	85 c0                	test   eax,eax
c001b0c4:	74 1b                	je     c001b0e1 <sysFormatDisk(regs*)+0x62>
c001b0c6:	83 f8 09             	cmp    eax,0x9
c001b0c9:	74 0b                	je     c001b0d6 <sysFormatDisk(regs*)+0x57>
c001b0cb:	59                   	pop    ecx
c001b0cc:	b8 02 00 00 00       	mov    eax,0x2
c001b0d1:	31 d2                	xor    edx,edx
c001b0d3:	5b                   	pop    ebx
c001b0d4:	5e                   	pop    esi
c001b0d5:	c3                   	ret    
c001b0d6:	59                   	pop    ecx
c001b0d7:	b8 01 00 00 00       	mov    eax,0x1
c001b0dc:	31 d2                	xor    edx,edx
c001b0de:	5b                   	pop    ebx
c001b0df:	5e                   	pop    esi
c001b0e0:	c3                   	ret    
c001b0e1:	59                   	pop    ecx
c001b0e2:	31 c0                	xor    eax,eax
c001b0e4:	31 d2                	xor    edx,edx
c001b0e6:	5b                   	pop    ebx
c001b0e7:	5e                   	pop    esi
c001b0e8:	c3                   	ret    

c001b0e9 <sysSetDiskVolumeLabel(regs*)>:
c001b0e9:	56                   	push   esi
c001b0ea:	53                   	push   ebx
c001b0eb:	53                   	push   ebx
c001b0ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b0f0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b0f3:	83 f8 19             	cmp    eax,0x19
c001b0f6:	77 29                	ja     c001b121 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b0f8:	8b 0c 85 c0 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f40]
c001b0ff:	85 c9                	test   ecx,ecx
c001b101:	74 1e                	je     c001b121 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b103:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b106:	85 d2                	test   edx,edx
c001b108:	74 17                	je     c001b121 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b10a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b110:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b112:	52                   	push   edx
c001b113:	50                   	push   eax
c001b114:	51                   	push   ecx
c001b115:	53                   	push   ebx
c001b116:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b119:	83 c4 10             	add    esp,0x10
c001b11c:	99                   	cdq    
c001b11d:	59                   	pop    ecx
c001b11e:	5b                   	pop    ebx
c001b11f:	5e                   	pop    esi
c001b120:	c3                   	ret    
c001b121:	59                   	pop    ecx
c001b122:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b127:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b12c:	5b                   	pop    ebx
c001b12d:	5e                   	pop    esi
c001b12e:	c3                   	ret    

c001b12f <sysGetDiskVolumeLabel(regs*)>:
c001b12f:	57                   	push   edi
c001b130:	56                   	push   esi
c001b131:	53                   	push   ebx
c001b132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b136:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b139:	83 fa 19             	cmp    edx,0x19
c001b13c:	77 34                	ja     c001b172 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b13e:	8b 0c 95 c0 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1f40]
c001b145:	85 c9                	test   ecx,ecx
c001b147:	74 29                	je     c001b172 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b149:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b14c:	85 db                	test   ebx,ebx
c001b14e:	74 22                	je     c001b172 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b150:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b153:	85 c0                	test   eax,eax
c001b155:	74 1b                	je     c001b172 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b157:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b162:	50                   	push   eax
c001b163:	53                   	push   ebx
c001b164:	52                   	push   edx
c001b165:	51                   	push   ecx
c001b166:	56                   	push   esi
c001b167:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b16a:	83 c4 20             	add    esp,0x20
c001b16d:	99                   	cdq    
c001b16e:	5b                   	pop    ebx
c001b16f:	5e                   	pop    esi
c001b170:	5f                   	pop    edi
c001b171:	c3                   	ret    
c001b172:	5b                   	pop    ebx
c001b173:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b178:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b17d:	5e                   	pop    esi
c001b17e:	5f                   	pop    edi
c001b17f:	c3                   	ret    

c001b180 <sysShutdown(regs*)>:
c001b180:	83 ec 0c             	sub    esp,0xc
c001b183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b187:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b18a:	85 c0                	test   eax,eax
c001b18c:	74 18                	je     c001b1a6 <sysShutdown(regs*)+0x26>
c001b18e:	83 f8 01             	cmp    eax,0x1
c001b191:	74 38                	je     c001b1cb <sysShutdown(regs*)+0x4b>
c001b193:	83 f8 02             	cmp    eax,0x2
c001b196:	74 24                	je     c001b1bc <sysShutdown(regs*)+0x3c>
c001b198:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b19d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1a2:	83 c4 0c             	add    esp,0xc
c001b1a5:	c3                   	ret    
c001b1a6:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001b1ab:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1ad:	6a 00                	push   0x0
c001b1af:	6a 00                	push   0x0
c001b1b1:	6a 00                	push   0x0
c001b1b3:	50                   	push   eax
c001b1b4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b1b7:	83 c4 10             	add    esp,0x10
c001b1ba:	eb dc                	jmp    c001b198 <sysShutdown(regs*)+0x18>
c001b1bc:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001b1c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1c3:	6a 00                	push   0x0
c001b1c5:	6a 00                	push   0x0
c001b1c7:	6a 01                	push   0x1
c001b1c9:	eb e8                	jmp    c001b1b3 <sysShutdown(regs*)+0x33>
c001b1cb:	a1 60 01 03 c0       	mov    eax,ds:0xc0030160
c001b1d0:	85 c0                	test   eax,eax
c001b1d2:	74 02                	je     c001b1d6 <sysShutdown(regs*)+0x56>
c001b1d4:	ff d0                	call   eax
c001b1d6:	31 c0                	xor    eax,eax
c001b1d8:	31 d2                	xor    edx,edx
c001b1da:	83 c4 0c             	add    esp,0xc
c001b1dd:	c3                   	ret    

c001b1de <sysCallRealpath(regs*)>:
c001b1de:	83 ec 0c             	sub    esp,0xc
c001b1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b1e8:	85 d2                	test   edx,edx
c001b1ea:	74 07                	je     c001b1f3 <sysCallRealpath(regs*)+0x15>
c001b1ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b1ef:	85 c0                	test   eax,eax
c001b1f1:	75 0b                	jne    c001b1fe <sysCallRealpath(regs*)+0x20>
c001b1f3:	b8 01 00 00 00       	mov    eax,0x1
c001b1f8:	31 d2                	xor    edx,edx
c001b1fa:	83 c4 0c             	add    esp,0xc
c001b1fd:	c3                   	ret    
c001b1fe:	51                   	push   ecx
c001b1ff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b205:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b208:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b20e:	51                   	push   ecx
c001b20f:	52                   	push   edx
c001b210:	50                   	push   eax
c001b211:	e8 a2 7c ff ff       	call   c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b216:	83 c4 10             	add    esp,0x10
c001b219:	31 c0                	xor    eax,eax
c001b21b:	31 d2                	xor    edx,edx
c001b21d:	83 c4 0c             	add    esp,0xc
c001b220:	c3                   	ret    

c001b221 <sysCallReadDir(regs*)>:
c001b221:	53                   	push   ebx
c001b222:	83 ec 18             	sub    esp,0x18
c001b225:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b229:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b22c:	83 f8 02             	cmp    eax,0x2
c001b22f:	76 53                	jbe    c001b284 <sysCallReadDir(regs*)+0x63>
c001b231:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b234:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b23a:	77 4f                	ja     c001b28b <sysCallReadDir(regs*)+0x6a>
c001b23c:	83 ec 0c             	sub    esp,0xc
c001b23f:	50                   	push   eax
c001b240:	e8 7e 67 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b245:	83 c4 10             	add    esp,0x10
c001b248:	85 c0                	test   eax,eax
c001b24a:	74 50                	je     c001b29c <sysCallReadDir(regs*)+0x7b>
c001b24c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b254:	83 ec 0c             	sub    esp,0xc
c001b257:	8b 10                	mov    edx,DWORD PTR [eax]
c001b259:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b25d:	51                   	push   ecx
c001b25e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b261:	6a 00                	push   0x0
c001b263:	68 10 01 00 00       	push   0x110
c001b268:	50                   	push   eax
c001b269:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b26c:	83 c4 20             	add    esp,0x20
c001b26f:	85 c0                	test   eax,eax
c001b271:	74 38                	je     c001b2ab <sysCallReadDir(regs*)+0x8a>
c001b273:	83 f8 07             	cmp    eax,0x7
c001b276:	74 0c                	je     c001b284 <sysCallReadDir(regs*)+0x63>
c001b278:	b8 02 00 00 00       	mov    eax,0x2
c001b27d:	31 d2                	xor    edx,edx
c001b27f:	83 c4 18             	add    esp,0x18
c001b282:	5b                   	pop    ebx
c001b283:	c3                   	ret    
c001b284:	b8 01 00 00 00       	mov    eax,0x1
c001b289:	eb f2                	jmp    c001b27d <sysCallReadDir(regs*)+0x5c>
c001b28b:	83 ec 08             	sub    esp,0x8
c001b28e:	52                   	push   edx
c001b28f:	68 a8 b5 02 c0       	push   0xc002b5a8
c001b294:	e8 70 78 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b299:	83 c4 10             	add    esp,0x10
c001b29c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2a6:	83 c4 18             	add    esp,0x18
c001b2a9:	5b                   	pop    ebx
c001b2aa:	c3                   	ret    
c001b2ab:	31 c0                	xor    eax,eax
c001b2ad:	eb ce                	jmp    c001b27d <sysCallReadDir(regs*)+0x5c>

c001b2af <sysCallIsATTY(regs*)>:
c001b2af:	83 ec 0c             	sub    esp,0xc
c001b2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2b9:	83 f8 02             	cmp    eax,0x2
c001b2bc:	76 07                	jbe    c001b2c5 <sysCallIsATTY(regs*)+0x16>
c001b2be:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b2c3:	75 26                	jne    c001b2eb <sysCallIsATTY(regs*)+0x3c>
c001b2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2cd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b2d3:	85 c0                	test   eax,eax
c001b2d5:	74 24                	je     c001b2fb <sysCallIsATTY(regs*)+0x4c>
c001b2d7:	83 ec 0c             	sub    esp,0xc
c001b2da:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2dc:	50                   	push   eax
c001b2dd:	ff 12                	call   DWORD PTR [edx]
c001b2df:	31 d2                	xor    edx,edx
c001b2e1:	0f b6 c0             	movzx  eax,al
c001b2e4:	83 c4 10             	add    esp,0x10
c001b2e7:	83 c4 0c             	add    esp,0xc
c001b2ea:	c3                   	ret    
c001b2eb:	83 ec 0c             	sub    esp,0xc
c001b2ee:	50                   	push   eax
c001b2ef:	e8 cf 66 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b2f4:	83 c4 10             	add    esp,0x10
c001b2f7:	85 c0                	test   eax,eax
c001b2f9:	75 dc                	jne    c001b2d7 <sysCallIsATTY(regs*)+0x28>
c001b2fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b300:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b305:	83 c4 0c             	add    esp,0xc
c001b308:	c3                   	ret    

c001b309 <sysCallSeek(regs*)>:
c001b309:	53                   	push   ebx
c001b30a:	83 ec 08             	sub    esp,0x8
c001b30d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b311:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b314:	83 f8 02             	cmp    eax,0x2
c001b317:	76 4a                	jbe    c001b363 <sysCallSeek(regs*)+0x5a>
c001b319:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b31e:	77 32                	ja     c001b352 <sysCallSeek(regs*)+0x49>
c001b320:	83 ec 0c             	sub    esp,0xc
c001b323:	50                   	push   eax
c001b324:	e8 9a 66 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b329:	83 c4 0c             	add    esp,0xc
c001b32c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b32f:	31 db                	xor    ebx,ebx
c001b331:	53                   	push   ebx
c001b332:	51                   	push   ecx
c001b333:	50                   	push   eax
c001b334:	e8 4b 7e ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001b339:	83 c4 10             	add    esp,0x10
c001b33c:	85 c0                	test   eax,eax
c001b33e:	0f 95 c0             	setne  al
c001b341:	31 d2                	xor    edx,edx
c001b343:	0f b6 c0             	movzx  eax,al
c001b346:	f7 d8                	neg    eax
c001b348:	83 d2 00             	adc    edx,0x0
c001b34b:	83 c4 08             	add    esp,0x8
c001b34e:	f7 da                	neg    edx
c001b350:	5b                   	pop    ebx
c001b351:	c3                   	ret    
c001b352:	83 ec 08             	sub    esp,0x8
c001b355:	50                   	push   eax
c001b356:	68 17 b6 02 c0       	push   0xc002b617
c001b35b:	e8 a9 77 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b368:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b36d:	83 c4 08             	add    esp,0x8
c001b370:	5b                   	pop    ebx
c001b371:	c3                   	ret    

c001b372 <sysCallTell(regs*)>:
c001b372:	53                   	push   ebx
c001b373:	83 ec 08             	sub    esp,0x8
c001b376:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b37a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b37d:	83 f8 02             	cmp    eax,0x2
c001b380:	76 5e                	jbe    c001b3e0 <sysCallTell(regs*)+0x6e>
c001b382:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b387:	77 2d                	ja     c001b3b6 <sysCallTell(regs*)+0x44>
c001b389:	83 ec 0c             	sub    esp,0xc
c001b38c:	50                   	push   eax
c001b38d:	e8 31 66 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b392:	5a                   	pop    edx
c001b393:	59                   	pop    ecx
c001b394:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b397:	50                   	push   eax
c001b398:	e8 3d 7e ff ff       	call   c00131da <File::tell(unsigned long long*)>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	85 c0                	test   eax,eax
c001b3a2:	0f 95 c0             	setne  al
c001b3a5:	31 d2                	xor    edx,edx
c001b3a7:	0f b6 c0             	movzx  eax,al
c001b3aa:	f7 d8                	neg    eax
c001b3ac:	83 d2 00             	adc    edx,0x0
c001b3af:	83 c4 08             	add    esp,0x8
c001b3b2:	f7 da                	neg    edx
c001b3b4:	5b                   	pop    ebx
c001b3b5:	c3                   	ret    
c001b3b6:	83 ec 08             	sub    esp,0x8
c001b3b9:	50                   	push   eax
c001b3ba:	68 31 b6 02 c0       	push   0xc002b631
c001b3bf:	e8 45 77 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b3c4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3c7:	83 c4 10             	add    esp,0x10
c001b3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3d7:	31 d2                	xor    edx,edx
c001b3d9:	31 c0                	xor    eax,eax
c001b3db:	83 c4 08             	add    esp,0x8
c001b3de:	5b                   	pop    ebx
c001b3df:	c3                   	ret    
c001b3e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3ea:	83 c4 08             	add    esp,0x8
c001b3ed:	5b                   	pop    ebx
c001b3ee:	c3                   	ret    

c001b3ef <sysCallSize(regs*)>:
c001b3ef:	53                   	push   ebx
c001b3f0:	83 ec 18             	sub    esp,0x18
c001b3f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3fa:	83 f8 02             	cmp    eax,0x2
c001b3fd:	76 64                	jbe    c001b463 <sysCallSize(regs*)+0x74>
c001b3ff:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b404:	77 33                	ja     c001b439 <sysCallSize(regs*)+0x4a>
c001b406:	83 ec 0c             	sub    esp,0xc
c001b409:	50                   	push   eax
c001b40a:	e8 b4 65 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b40f:	83 c4 0c             	add    esp,0xc
c001b412:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b416:	52                   	push   edx
c001b417:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b41a:	50                   	push   eax
c001b41b:	e8 52 7f ff ff       	call   c0013372 <File::stat(unsigned long long*, bool*)>
c001b420:	83 c4 10             	add    esp,0x10
c001b423:	85 c0                	test   eax,eax
c001b425:	0f 95 c0             	setne  al
c001b428:	31 d2                	xor    edx,edx
c001b42a:	0f b6 c0             	movzx  eax,al
c001b42d:	f7 d8                	neg    eax
c001b42f:	83 d2 00             	adc    edx,0x0
c001b432:	83 c4 18             	add    esp,0x18
c001b435:	f7 da                	neg    edx
c001b437:	5b                   	pop    ebx
c001b438:	c3                   	ret    
c001b439:	83 ec 08             	sub    esp,0x8
c001b43c:	50                   	push   eax
c001b43d:	68 4b b6 02 c0       	push   0xc002b64b
c001b442:	e8 c2 76 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b447:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b453:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b45a:	31 d2                	xor    edx,edx
c001b45c:	31 c0                	xor    eax,eax
c001b45e:	83 c4 18             	add    esp,0x18
c001b461:	5b                   	pop    ebx
c001b462:	c3                   	ret    
c001b463:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b468:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b46d:	83 c4 18             	add    esp,0x18
c001b470:	5b                   	pop    ebx
c001b471:	c3                   	ret    

c001b472 <sysCallSizeFromFilename(regs*)>:
c001b472:	57                   	push   edi
c001b473:	56                   	push   esi
c001b474:	53                   	push   ebx
c001b475:	83 ec 20             	sub    esp,0x20
c001b478:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b47c:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b47f:	83 fb 02             	cmp    ebx,0x2
c001b482:	0f 86 99 00 00 00    	jbe    c001b521 <sysCallSizeFromFilename(regs*)+0xaf>
c001b488:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b48e:	77 65                	ja     c001b4f5 <sysCallSizeFromFilename(regs*)+0x83>
c001b490:	83 ec 0c             	sub    esp,0xc
c001b493:	68 14 01 00 00       	push   0x114
c001b498:	e8 9d 43 ff ff       	call   c000f83a <malloc>
c001b49d:	83 c4 0c             	add    esp,0xc
c001b4a0:	89 c6                	mov    esi,eax
c001b4a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4aa:	53                   	push   ebx
c001b4ab:	56                   	push   esi
c001b4ac:	e8 b1 7b ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001b4b1:	83 c4 0c             	add    esp,0xc
c001b4b4:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b4b8:	50                   	push   eax
c001b4b9:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b4bc:	56                   	push   esi
c001b4bd:	e8 b0 7e ff ff       	call   c0013372 <File::stat(unsigned long long*, bool*)>
c001b4c2:	83 c4 10             	add    esp,0x10
c001b4c5:	85 f6                	test   esi,esi
c001b4c7:	74 14                	je     c001b4dd <sysCallSizeFromFilename(regs*)+0x6b>
c001b4c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4cd:	8b 16                	mov    edx,DWORD PTR [esi]
c001b4cf:	83 ec 0c             	sub    esp,0xc
c001b4d2:	56                   	push   esi
c001b4d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b4d6:	83 c4 10             	add    esp,0x10
c001b4d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4dd:	85 c0                	test   eax,eax
c001b4df:	0f 95 c0             	setne  al
c001b4e2:	31 d2                	xor    edx,edx
c001b4e4:	0f b6 c0             	movzx  eax,al
c001b4e7:	f7 d8                	neg    eax
c001b4e9:	83 d2 00             	adc    edx,0x0
c001b4ec:	83 c4 20             	add    esp,0x20
c001b4ef:	f7 da                	neg    edx
c001b4f1:	5b                   	pop    ebx
c001b4f2:	5e                   	pop    esi
c001b4f3:	5f                   	pop    edi
c001b4f4:	c3                   	ret    
c001b4f5:	83 ec 08             	sub    esp,0x8
c001b4f8:	53                   	push   ebx
c001b4f9:	68 4b b6 02 c0       	push   0xc002b64b
c001b4fe:	e8 06 76 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b503:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b50f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b516:	31 d2                	xor    edx,edx
c001b518:	83 c4 20             	add    esp,0x20
c001b51b:	31 c0                	xor    eax,eax
c001b51d:	5b                   	pop    ebx
c001b51e:	5e                   	pop    esi
c001b51f:	5f                   	pop    edi
c001b520:	c3                   	ret    
c001b521:	83 c4 20             	add    esp,0x20
c001b524:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b529:	5b                   	pop    ebx
c001b52a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b52f:	5e                   	pop    esi
c001b530:	5f                   	pop    edi
c001b531:	c3                   	ret    

c001b532 <sysCallClose(regs*)>:
c001b532:	53                   	push   ebx
c001b533:	83 ec 08             	sub    esp,0x8
c001b536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b53a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b53d:	83 f8 02             	cmp    eax,0x2
c001b540:	76 50                	jbe    c001b592 <sysCallClose(regs*)+0x60>
c001b542:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b547:	74 58                	je     c001b5a1 <sysCallClose(regs*)+0x6f>
c001b549:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b54e:	74 60                	je     c001b5b0 <sysCallClose(regs*)+0x7e>
c001b550:	77 2f                	ja     c001b581 <sysCallClose(regs*)+0x4f>
c001b552:	83 ec 0c             	sub    esp,0xc
c001b555:	50                   	push   eax
c001b556:	e8 68 64 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b55b:	89 c3                	mov    ebx,eax
c001b55d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b560:	e8 bf 7b ff ff       	call   c0013124 <File::close()>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	85 db                	test   ebx,ebx
c001b56a:	74 0c                	je     c001b578 <sysCallClose(regs*)+0x46>
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b571:	53                   	push   ebx
c001b572:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b575:	83 c4 10             	add    esp,0x10
c001b578:	31 c0                	xor    eax,eax
c001b57a:	31 d2                	xor    edx,edx
c001b57c:	83 c4 08             	add    esp,0x8
c001b57f:	5b                   	pop    ebx
c001b580:	c3                   	ret    
c001b581:	83 ec 08             	sub    esp,0x8
c001b584:	50                   	push   eax
c001b585:	68 cc b5 02 c0       	push   0xc002b5cc
c001b58a:	e8 7a 75 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b58f:	83 c4 10             	add    esp,0x10
c001b592:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b597:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b59c:	83 c4 08             	add    esp,0x8
c001b59f:	5b                   	pop    ebx
c001b5a0:	c3                   	ret    
c001b5a1:	83 ec 0c             	sub    esp,0xc
c001b5a4:	68 66 b6 02 c0       	push   0xc002b666
c001b5a9:	e8 5b 75 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b5ae:	eb c5                	jmp    c001b575 <sysCallClose(regs*)+0x43>
c001b5b0:	83 ec 0c             	sub    esp,0xc
c001b5b3:	68 74 b6 02 c0       	push   0xc002b674
c001b5b8:	eb ef                	jmp    c001b5a9 <sysCallClose(regs*)+0x77>

c001b5ba <sysCallOpenDir(regs*)>:
c001b5ba:	56                   	push   esi
c001b5bb:	53                   	push   ebx
c001b5bc:	53                   	push   ebx
c001b5bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5c1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5c4:	85 f6                	test   esi,esi
c001b5c6:	74 59                	je     c001b621 <sysCallOpenDir(regs*)+0x67>
c001b5c8:	83 ec 0c             	sub    esp,0xc
c001b5cb:	68 14 01 00 00       	push   0x114
c001b5d0:	e8 65 42 ff ff       	call   c000f83a <malloc>
c001b5d5:	83 c4 0c             	add    esp,0xc
c001b5d8:	89 c6                	mov    esi,eax
c001b5da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5e5:	56                   	push   esi
c001b5e6:	e8 23 7f ff ff       	call   c001350e <Directory::Directory(char const*, Process*)>
c001b5eb:	83 c4 10             	add    esp,0x10
c001b5ee:	85 f6                	test   esi,esi
c001b5f0:	74 2f                	je     c001b621 <sysCallOpenDir(regs*)+0x67>
c001b5f2:	83 ec 0c             	sub    esp,0xc
c001b5f5:	56                   	push   esi
c001b5f6:	e8 77 7f ff ff       	call   c0013572 <Directory::open()>
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	85 c0                	test   eax,eax
c001b600:	75 1f                	jne    c001b621 <sysCallOpenDir(regs*)+0x67>
c001b602:	83 ec 0c             	sub    esp,0xc
c001b605:	56                   	push   esi
c001b606:	e8 c3 60 ff ff       	call   c00116ce <UnixFile::getFileDescriptor()>
c001b60b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b60e:	83 c4 10             	add    esp,0x10
c001b611:	89 02                	mov    DWORD PTR [edx],eax
c001b613:	c1 f8 1f             	sar    eax,0x1f
c001b616:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b619:	31 c0                	xor    eax,eax
c001b61b:	59                   	pop    ecx
c001b61c:	31 d2                	xor    edx,edx
c001b61e:	5b                   	pop    ebx
c001b61f:	5e                   	pop    esi
c001b620:	c3                   	ret    
c001b621:	59                   	pop    ecx
c001b622:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b627:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b62c:	5b                   	pop    ebx
c001b62d:	5e                   	pop    esi
c001b62e:	c3                   	ret    

c001b62f <sysCallCloseDir(regs*)>:
c001b62f:	53                   	push   ebx
c001b630:	83 ec 08             	sub    esp,0x8
c001b633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b637:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b63a:	83 f8 02             	cmp    eax,0x2
c001b63d:	76 47                	jbe    c001b686 <sysCallCloseDir(regs*)+0x57>
c001b63f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b644:	77 2f                	ja     c001b675 <sysCallCloseDir(regs*)+0x46>
c001b646:	83 ec 0c             	sub    esp,0xc
c001b649:	50                   	push   eax
c001b64a:	e8 74 63 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b64f:	89 c3                	mov    ebx,eax
c001b651:	89 04 24             	mov    DWORD PTR [esp],eax
c001b654:	e8 75 7f ff ff       	call   c00135ce <Directory::close()>
c001b659:	83 c4 10             	add    esp,0x10
c001b65c:	85 db                	test   ebx,ebx
c001b65e:	74 0c                	je     c001b66c <sysCallCloseDir(regs*)+0x3d>
c001b660:	83 ec 0c             	sub    esp,0xc
c001b663:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b665:	53                   	push   ebx
c001b666:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b669:	83 c4 10             	add    esp,0x10
c001b66c:	31 c0                	xor    eax,eax
c001b66e:	31 d2                	xor    edx,edx
c001b670:	83 c4 08             	add    esp,0x8
c001b673:	5b                   	pop    ebx
c001b674:	c3                   	ret    
c001b675:	83 ec 08             	sub    esp,0x8
c001b678:	50                   	push   eax
c001b679:	68 f4 b5 02 c0       	push   0xc002b5f4
c001b67e:	e8 86 74 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001b683:	83 c4 10             	add    esp,0x10
c001b686:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b68b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b690:	83 c4 08             	add    esp,0x8
c001b693:	5b                   	pop    ebx
c001b694:	c3                   	ret    

c001b695 <sysCallMakeDir(regs*)>:
c001b695:	56                   	push   esi
c001b696:	53                   	push   ebx
c001b697:	83 ec 10             	sub    esp,0x10
c001b69a:	68 14 01 00 00       	push   0x114
c001b69f:	e8 96 41 ff ff       	call   c000f83a <malloc>
c001b6a4:	83 c4 0c             	add    esp,0xc
c001b6a7:	89 c3                	mov    ebx,eax
c001b6a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6ae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6b5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6b8:	53                   	push   ebx
c001b6b9:	e8 50 7e ff ff       	call   c001350e <Directory::Directory(char const*, Process*)>
c001b6be:	83 c4 10             	add    esp,0x10
c001b6c1:	85 db                	test   ebx,ebx
c001b6c3:	74 32                	je     c001b6f7 <sysCallMakeDir(regs*)+0x62>
c001b6c5:	83 ec 0c             	sub    esp,0xc
c001b6c8:	53                   	push   ebx
c001b6c9:	e8 84 80 ff ff       	call   c0013752 <Directory::create()>
c001b6ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6d1:	89 c6                	mov    esi,eax
c001b6d3:	e8 f6 7e ff ff       	call   c00135ce <Directory::close()>
c001b6d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	31 c0                	xor    eax,eax
c001b6e5:	59                   	pop    ecx
c001b6e6:	85 f6                	test   esi,esi
c001b6e8:	5b                   	pop    ebx
c001b6e9:	0f 95 c0             	setne  al
c001b6ec:	5e                   	pop    esi
c001b6ed:	31 d2                	xor    edx,edx
c001b6ef:	f7 d8                	neg    eax
c001b6f1:	83 d2 00             	adc    edx,0x0
c001b6f4:	f7 da                	neg    edx
c001b6f6:	c3                   	ret    
c001b6f7:	59                   	pop    ecx
c001b6f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b702:	5b                   	pop    ebx
c001b703:	5e                   	pop    esi
c001b704:	c3                   	ret    

c001b705 <sysCallWait(regs*)>:
c001b705:	83 ec 10             	sub    esp,0x10
c001b708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b70c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b70f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b712:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b715:	e8 f3 23 00 00       	call   c001db0d <waitTask(int, int*, int)>
c001b71a:	83 c4 1c             	add    esp,0x1c
c001b71d:	99                   	cdq    
c001b71e:	c3                   	ret    

c001b71f <sysCallNotImpl(regs*)>:
c001b71f:	83 ec 18             	sub    esp,0x18
c001b722:	68 82 b6 02 c0       	push   0xc002b682
c001b727:	e8 c1 e8 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001b72c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b731:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b736:	83 c4 1c             	add    esp,0x1c
c001b739:	c3                   	ret    

c001b73a <sysPanic(regs*)>:
c001b73a:	83 ec 18             	sub    esp,0x18
c001b73d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b741:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b744:	e8 a4 e8 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001b749:	c7 04 24 9c b6 02 c0 	mov    DWORD PTR [esp],0xc002b69c
c001b750:	e8 98 e8 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001b755:	b8 01 00 00 00       	mov    eax,0x1
c001b75a:	31 d2                	xor    edx,edx
c001b75c:	83 c4 1c             	add    esp,0x1c
c001b75f:	c3                   	ret    

c001b760 <sysCallRmdir(regs*)>:
c001b760:	56                   	push   esi
c001b761:	53                   	push   ebx
c001b762:	83 ec 20             	sub    esp,0x20
c001b765:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b769:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b76c:	68 14 01 00 00       	push   0x114
c001b771:	e8 c4 40 ff ff       	call   c000f83a <malloc>
c001b776:	83 c4 0c             	add    esp,0xc
c001b779:	89 c3                	mov    ebx,eax
c001b77b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b780:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b783:	56                   	push   esi
c001b784:	53                   	push   ebx
c001b785:	e8 d8 78 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001b78a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b78d:	e8 ac 7a ff ff       	call   c001323e <File::unlink()>
c001b792:	83 c4 10             	add    esp,0x10
c001b795:	85 db                	test   ebx,ebx
c001b797:	74 14                	je     c001b7ad <sysCallRmdir(regs*)+0x4d>
c001b799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b79d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b79f:	83 ec 0c             	sub    esp,0xc
c001b7a2:	53                   	push   ebx
c001b7a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7a6:	83 c4 10             	add    esp,0x10
c001b7a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7ad:	85 c0                	test   eax,eax
c001b7af:	0f 95 c0             	setne  al
c001b7b2:	31 d2                	xor    edx,edx
c001b7b4:	0f b6 c0             	movzx  eax,al
c001b7b7:	f7 d8                	neg    eax
c001b7b9:	83 d2 00             	adc    edx,0x0
c001b7bc:	83 c4 14             	add    esp,0x14
c001b7bf:	f7 da                	neg    edx
c001b7c1:	5b                   	pop    ebx
c001b7c2:	5e                   	pop    esi
c001b7c3:	c3                   	ret    

c001b7c4 <sysCallUnlink(regs*)>:
c001b7c4:	56                   	push   esi
c001b7c5:	53                   	push   ebx
c001b7c6:	83 ec 20             	sub    esp,0x20
c001b7c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7cd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7d0:	68 14 01 00 00       	push   0x114
c001b7d5:	e8 60 40 ff ff       	call   c000f83a <malloc>
c001b7da:	83 c4 0c             	add    esp,0xc
c001b7dd:	89 c3                	mov    ebx,eax
c001b7df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7e7:	56                   	push   esi
c001b7e8:	53                   	push   ebx
c001b7e9:	e8 74 78 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001b7ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7f1:	e8 48 7a ff ff       	call   c001323e <File::unlink()>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	85 db                	test   ebx,ebx
c001b7fb:	74 14                	je     c001b811 <sysCallUnlink(regs*)+0x4d>
c001b7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b801:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b803:	83 ec 0c             	sub    esp,0xc
c001b806:	53                   	push   ebx
c001b807:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b80a:	83 c4 10             	add    esp,0x10
c001b80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b811:	85 c0                	test   eax,eax
c001b813:	0f 95 c0             	setne  al
c001b816:	31 d2                	xor    edx,edx
c001b818:	0f b6 c0             	movzx  eax,al
c001b81b:	f7 d8                	neg    eax
c001b81d:	83 d2 00             	adc    edx,0x0
c001b820:	83 c4 14             	add    esp,0x14
c001b823:	f7 da                	neg    edx
c001b825:	5b                   	pop    ebx
c001b826:	5e                   	pop    esi
c001b827:	c3                   	ret    

c001b828 <sysCallGetArgv(regs*)>:
c001b828:	83 ec 0c             	sub    esp,0xc
c001b82b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b82f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b832:	85 c0                	test   eax,eax
c001b834:	78 2b                	js     c001b861 <sysCallGetArgv(regs*)+0x39>
c001b836:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b83c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b83f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b845:	7d 1a                	jge    c001b861 <sysCallGetArgv(regs*)+0x39>
c001b847:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b84e:	85 c0                	test   eax,eax
c001b850:	74 17                	je     c001b869 <sysCallGetArgv(regs*)+0x41>
c001b852:	83 ec 08             	sub    esp,0x8
c001b855:	50                   	push   eax
c001b856:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b859:	e8 d6 4f fe ff       	call   c0000834 <strcpy>
c001b85e:	83 c4 10             	add    esp,0x10
c001b861:	31 c0                	xor    eax,eax
c001b863:	31 d2                	xor    edx,edx
c001b865:	83 c4 0c             	add    esp,0xc
c001b868:	c3                   	ret    
c001b869:	b8 01 00 00 00       	mov    eax,0x1
c001b86e:	31 d2                	xor    edx,edx
c001b870:	83 c4 0c             	add    esp,0xc
c001b873:	c3                   	ret    

c001b874 <sysCallTTYName(regs*)>:
c001b874:	56                   	push   esi
c001b875:	53                   	push   ebx
c001b876:	53                   	push   ebx
c001b877:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b87b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b87e:	85 c0                	test   eax,eax
c001b880:	74 5f                	je     c001b8e1 <sysCallTTYName(regs*)+0x6d>
c001b882:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b885:	83 f8 02             	cmp    eax,0x2
c001b888:	77 3e                	ja     c001b8c8 <sysCallTTYName(regs*)+0x54>
c001b88a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b88f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b892:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b898:	85 db                	test   ebx,ebx
c001b89a:	74 45                	je     c001b8e1 <sysCallTTYName(regs*)+0x6d>
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8a1:	53                   	push   ebx
c001b8a2:	ff 10                	call   DWORD PTR [eax]
c001b8a4:	83 c4 10             	add    esp,0x10
c001b8a7:	84 c0                	test   al,al
c001b8a9:	74 41                	je     c001b8ec <sysCallTTYName(regs*)+0x78>
c001b8ab:	83 ec 08             	sub    esp,0x8
c001b8ae:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b8b4:	53                   	push   ebx
c001b8b5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8b8:	e8 77 4f fe ff       	call   c0000834 <strcpy>
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	31 c0                	xor    eax,eax
c001b8c2:	59                   	pop    ecx
c001b8c3:	31 d2                	xor    edx,edx
c001b8c5:	5b                   	pop    ebx
c001b8c6:	5e                   	pop    esi
c001b8c7:	c3                   	ret    
c001b8c8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8cd:	74 bb                	je     c001b88a <sysCallTTYName(regs*)+0x16>
c001b8cf:	83 ec 0c             	sub    esp,0xc
c001b8d2:	50                   	push   eax
c001b8d3:	e8 eb 60 ff ff       	call   c00119c3 <getFromFileDescriptor(int)>
c001b8d8:	83 c4 10             	add    esp,0x10
c001b8db:	89 c3                	mov    ebx,eax
c001b8dd:	85 db                	test   ebx,ebx
c001b8df:	75 bb                	jne    c001b89c <sysCallTTYName(regs*)+0x28>
c001b8e1:	59                   	pop    ecx
c001b8e2:	b8 01 00 00 00       	mov    eax,0x1
c001b8e7:	31 d2                	xor    edx,edx
c001b8e9:	5b                   	pop    ebx
c001b8ea:	5e                   	pop    esi
c001b8eb:	c3                   	ret    
c001b8ec:	59                   	pop    ecx
c001b8ed:	b8 02 00 00 00       	mov    eax,0x2
c001b8f2:	31 d2                	xor    edx,edx
c001b8f4:	5b                   	pop    ebx
c001b8f5:	5e                   	pop    esi
c001b8f6:	c3                   	ret    

c001b8f7 <sysCallUSleep(regs*)>:
c001b8f7:	83 ec 14             	sub    esp,0x14
c001b8fa:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b903:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b90a:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b90d:	01 ca                	add    edx,ecx
c001b90f:	52                   	push   edx
c001b910:	50                   	push   eax
c001b911:	e8 90 22 00 00       	call   c001dba6 <nanoSleep(unsigned long long)>
c001b916:	31 c0                	xor    eax,eax
c001b918:	31 d2                	xor    edx,edx
c001b91a:	83 c4 1c             	add    esp,0x1c
c001b91d:	c3                   	ret    

c001b91e <sysCallSpawn(regs*)>:
c001b91e:	56                   	push   esi
c001b91f:	53                   	push   ebx
c001b920:	53                   	push   ebx
c001b921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b925:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b928:	85 f6                	test   esi,esi
c001b92a:	75 08                	jne    c001b934 <sysCallSpawn(regs*)+0x16>
c001b92c:	59                   	pop    ecx
c001b92d:	31 c0                	xor    eax,eax
c001b92f:	31 d2                	xor    edx,edx
c001b931:	5b                   	pop    ebx
c001b932:	5e                   	pop    esi
c001b933:	c3                   	ret    
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	68 3f 07 00 00       	push   0x73f
c001b93c:	e8 f9 3e ff ff       	call   c000f83a <malloc>
c001b941:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b944:	89 c6                	mov    esi,eax
c001b946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b94e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b951:	56                   	push   esi
c001b952:	e8 4f 19 00 00       	call   c001d2a6 <Process::Process(char const*, Process*, char**)>
c001b957:	83 c4 20             	add    esp,0x20
c001b95a:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b961:	75 c9                	jne    c001b92c <sysCallSpawn(regs*)+0xe>
c001b963:	83 ec 0c             	sub    esp,0xc
c001b966:	56                   	push   esi
c001b967:	e8 00 1f 00 00       	call   c001d86c <Process::createUserThread()>
c001b96c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b96e:	83 c4 10             	add    esp,0x10
c001b971:	99                   	cdq    
c001b972:	59                   	pop    ecx
c001b973:	5b                   	pop    ebx
c001b974:	5e                   	pop    esi
c001b975:	c3                   	ret    

c001b976 <sysCallGetEnv(regs*)>:
c001b976:	57                   	push   edi
c001b977:	56                   	push   esi
c001b978:	53                   	push   ebx
c001b979:	83 ec 1c             	sub    esp,0x1c
c001b97c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b985:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b988:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b98b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b98e:	e8 76 e5 ff ff       	call   c0019f09 <Krnl::getProcessTotalEnvCount(Process*)>
c001b993:	83 c4 10             	add    esp,0x10
c001b996:	39 c7                	cmp    edi,eax
c001b998:	7c 14                	jl     c001b9ae <sysCallGetEnv(regs*)+0x38>
c001b99a:	85 f6                	test   esi,esi
c001b99c:	75 0b                	jne    c001b9a9 <sysCallGetEnv(regs*)+0x33>
c001b99e:	83 c4 10             	add    esp,0x10
c001b9a1:	31 c0                	xor    eax,eax
c001b9a3:	5b                   	pop    ebx
c001b9a4:	31 d2                	xor    edx,edx
c001b9a6:	5e                   	pop    esi
c001b9a7:	5f                   	pop    edi
c001b9a8:	c3                   	ret    
c001b9a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9ac:	eb f0                	jmp    c001b99e <sysCallGetEnv(regs*)+0x28>
c001b9ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9b2:	52                   	push   edx
c001b9b3:	57                   	push   edi
c001b9b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9ba:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9bd:	50                   	push   eax
c001b9be:	e8 66 e5 ff ff       	call   c0019f29 <Krnl::getProcessEnvPair(Process*, int)>
c001b9c3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9ca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9ce:	83 c4 0c             	add    esp,0xc
c001b9d1:	85 c9                	test   ecx,ecx
c001b9d3:	75 23                	jne    c001b9f8 <sysCallGetEnv(regs*)+0x82>
c001b9d5:	83 ec 0c             	sub    esp,0xc
c001b9d8:	50                   	push   eax
c001b9d9:	e8 b6 4d fe ff       	call   c0000794 <strlen>
c001b9de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9e1:	89 c3                	mov    ebx,eax
c001b9e3:	e8 ac 4d fe ff       	call   c0000794 <strlen>
c001b9e8:	83 c4 10             	add    esp,0x10
c001b9eb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	31 d2                	xor    edx,edx
c001b9f4:	5b                   	pop    ebx
c001b9f5:	5e                   	pop    esi
c001b9f6:	5f                   	pop    edi
c001b9f7:	c3                   	ret    
c001b9f8:	83 ec 08             	sub    esp,0x8
c001b9fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9fe:	50                   	push   eax
c001b9ff:	56                   	push   esi
c001ba00:	e8 2f 4e fe ff       	call   c0000834 <strcpy>
c001ba05:	58                   	pop    eax
c001ba06:	5a                   	pop    edx
c001ba07:	68 ab b6 02 c0       	push   0xc002b6ab
c001ba0c:	56                   	push   esi
c001ba0d:	e8 62 4f fe ff       	call   c0000974 <strcat>
c001ba12:	59                   	pop    ecx
c001ba13:	5b                   	pop    ebx
c001ba14:	57                   	push   edi
c001ba15:	56                   	push   esi
c001ba16:	e8 59 4f fe ff       	call   c0000974 <strcat>
c001ba1b:	83 c4 10             	add    esp,0x10
c001ba1e:	e9 7b ff ff ff       	jmp    c001b99e <sysCallGetEnv(regs*)+0x28>

c001ba23 <sysAppSettings(regs*)>:
c001ba23:	53                   	push   ebx
c001ba24:	83 ec 08             	sub    esp,0x8
c001ba27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ba2e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001ba34:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba39:	66 3d c0 09          	cmp    ax,0x9c0
c001ba3d:	75 2f                	jne    c001ba6e <sysAppSettings(regs*)+0x4b>
c001ba3f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001ba45:	83 e0 1f             	and    eax,0x1f
c001ba48:	3c 01                	cmp    al,0x1
c001ba4a:	74 2e                	je     c001ba7a <sysAppSettings(regs*)+0x57>
c001ba4c:	3c 07                	cmp    al,0x7
c001ba4e:	0f 84 bd 00 00 00    	je     c001bb11 <sysAppSettings(regs*)+0xee>
c001ba54:	84 c0                	test   al,al
c001ba56:	0f 84 dc 00 00 00    	je     c001bb38 <sysAppSettings(regs*)+0x115>
c001ba5c:	3c 08                	cmp    al,0x8
c001ba5e:	74 6d                	je     c001bacd <sysAppSettings(regs*)+0xaa>
c001ba60:	0f b6 c0             	movzx  eax,al
c001ba63:	83 c4 08             	add    esp,0x8
c001ba66:	05 e8 03 00 00       	add    eax,0x3e8
c001ba6b:	5b                   	pop    ebx
c001ba6c:	99                   	cdq    
c001ba6d:	c3                   	ret    
c001ba6e:	b8 01 00 00 00       	mov    eax,0x1
c001ba73:	31 d2                	xor    edx,edx
c001ba75:	83 c4 08             	add    esp,0x8
c001ba78:	5b                   	pop    ebx
c001ba79:	c3                   	ret    
c001ba7a:	51                   	push   ecx
c001ba7b:	68 00 01 00 00       	push   0x100
c001ba80:	6a 00                	push   0x0
c001ba82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba8a:	83 c0 0c             	add    eax,0xc
c001ba8d:	50                   	push   eax
c001ba8e:	e8 e5 4c fe ff       	call   c0000778 <memset>
c001ba93:	83 c4 0c             	add    esp,0xc
c001ba96:	68 ff 00 00 00       	push   0xff
c001ba9b:	53                   	push   ebx
c001ba9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baa4:	83 c0 0c             	add    eax,0xc
c001baa7:	50                   	push   eax
c001baa8:	e8 97 4c fe ff       	call   c0000744 <memcpy>
c001baad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bab2:	5b                   	pop    ebx
c001bab3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bab6:	5a                   	pop    edx
c001bab7:	8d 50 0c             	lea    edx,[eax+0xc]
c001baba:	52                   	push   edx
c001babb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bac1:	e8 78 50 ff ff       	call   c0010b3e <VgaText::setTitle(char*)>
c001bac6:	83 c4 10             	add    esp,0x10
c001bac9:	31 c0                	xor    eax,eax
c001bacb:	eb a6                	jmp    c001ba73 <sysAppSettings(regs*)+0x50>
c001bacd:	83 ec 08             	sub    esp,0x8
c001bad0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bad6:	83 e0 0f             	and    eax,0xf
c001bad9:	50                   	push   eax
c001bada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001badf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bae2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bae8:	e8 41 50 ff ff       	call   c0010b2e <VgaText::setTitleColour(VgaColour)>
c001baed:	58                   	pop    eax
c001baee:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001baf4:	5a                   	pop    edx
c001baf5:	c1 e8 04             	shr    eax,0x4
c001baf8:	83 e0 0f             	and    eax,0xf
c001bafb:	50                   	push   eax
c001bafc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb0a:	e8 0f 50 ff ff       	call   c0010b1e <VgaText::setTitleTextColour(VgaColour)>
c001bb0f:	eb b5                	jmp    c001bac6 <sysAppSettings(regs*)+0xa3>
c001bb11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb19:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb1f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001bb25:	c0 e8 06             	shr    al,0x6
c001bb28:	83 e0 01             	and    eax,0x1
c001bb2b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001bb31:	31 c0                	xor    eax,eax
c001bb33:	e9 3b ff ff ff       	jmp    c001ba73 <sysAppSettings(regs*)+0x50>
c001bb38:	b8 02 00 00 00       	mov    eax,0x2
c001bb3d:	e9 31 ff ff ff       	jmp    c001ba73 <sysAppSettings(regs*)+0x50>

c001bb42 <sysSetFatAttrib(regs*)>:
c001bb42:	57                   	push   edi
c001bb43:	56                   	push   esi
c001bb44:	53                   	push   ebx
c001bb45:	83 ec 1c             	sub    esp,0x1c
c001bb48:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb4c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb4f:	68 14 01 00 00       	push   0x114
c001bb54:	e8 e1 3c ff ff       	call   c000f83a <malloc>
c001bb59:	83 c4 0c             	add    esp,0xc
c001bb5c:	89 c3                	mov    ebx,eax
c001bb5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb63:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb66:	57                   	push   edi
c001bb67:	53                   	push   ebx
c001bb68:	e8 f5 74 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001bb6d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb70:	83 c4 0c             	add    esp,0xc
c001bb73:	0f b6 d4             	movzx  edx,ah
c001bb76:	0f b6 c0             	movzx  eax,al
c001bb79:	52                   	push   edx
c001bb7a:	50                   	push   eax
c001bb7b:	53                   	push   ebx
c001bb7c:	e8 57 77 ff ff       	call   c00132d8 <File::chfatattr(unsigned char, unsigned char)>
c001bb81:	83 c4 10             	add    esp,0x10
c001bb84:	85 db                	test   ebx,ebx
c001bb86:	74 14                	je     c001bb9c <sysSetFatAttrib(regs*)+0x5a>
c001bb88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb8e:	83 ec 0c             	sub    esp,0xc
c001bb91:	53                   	push   ebx
c001bb92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb95:	83 c4 10             	add    esp,0x10
c001bb98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb9c:	85 c0                	test   eax,eax
c001bb9e:	0f 95 c0             	setne  al
c001bba1:	31 d2                	xor    edx,edx
c001bba3:	0f b6 c0             	movzx  eax,al
c001bba6:	f7 d8                	neg    eax
c001bba8:	83 d2 00             	adc    edx,0x0
c001bbab:	83 c4 10             	add    esp,0x10
c001bbae:	f7 da                	neg    edx
c001bbb0:	5b                   	pop    ebx
c001bbb1:	5e                   	pop    esi
c001bbb2:	5f                   	pop    edi
c001bbb3:	c3                   	ret    

c001bbb4 <sysPipe(regs*)>:
c001bbb4:	57                   	push   edi
c001bbb5:	56                   	push   esi
c001bbb6:	53                   	push   ebx
c001bbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbbb:	83 ec 0c             	sub    esp,0xc
c001bbbe:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbc1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbc4:	6a 20                	push   0x20
c001bbc6:	e8 6f 3c ff ff       	call   c000f83a <malloc>
c001bbcb:	89 c3                	mov    ebx,eax
c001bbcd:	58                   	pop    eax
c001bbce:	5a                   	pop    edx
c001bbcf:	68 00 50 00 00       	push   0x5000
c001bbd4:	53                   	push   ebx
c001bbd5:	e8 94 48 ff ff       	call   c001046e <Pipe::Pipe(int)>
c001bbda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbdd:	e8 ec 5a ff ff       	call   c00116ce <UnixFile::getFileDescriptor()>
c001bbe2:	89 07                	mov    DWORD PTR [edi],eax
c001bbe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbe7:	e8 e2 5a ff ff       	call   c00116ce <UnixFile::getFileDescriptor()>
c001bbec:	83 c4 10             	add    esp,0x10
c001bbef:	89 06                	mov    DWORD PTR [esi],eax
c001bbf1:	31 d2                	xor    edx,edx
c001bbf3:	5b                   	pop    ebx
c001bbf4:	31 c0                	xor    eax,eax
c001bbf6:	5e                   	pop    esi
c001bbf7:	5f                   	pop    edi
c001bbf8:	c3                   	ret    

c001bbf9 <sysGetUnixTime(regs*)>:
c001bbf9:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001bbfe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc08:	e9 3f 7e ff ff       	jmp    c0013a4c <Clock::timeInSecondsLocal()>

c001bc0d <string_ends_with(char const*, char const*)>:
c001bc0d:	57                   	push   edi
c001bc0e:	56                   	push   esi
c001bc0f:	53                   	push   ebx
c001bc10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc14:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc18:	83 ec 0c             	sub    esp,0xc
c001bc1b:	53                   	push   ebx
c001bc1c:	e8 73 4b fe ff       	call   c0000794 <strlen>
c001bc21:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc24:	89 c6                	mov    esi,eax
c001bc26:	e8 69 4b fe ff       	call   c0000794 <strlen>
c001bc2b:	83 c4 10             	add    esp,0x10
c001bc2e:	39 c6                	cmp    esi,eax
c001bc30:	7d 06                	jge    c001bc38 <string_ends_with(char const*, char const*)+0x2b>
c001bc32:	5b                   	pop    ebx
c001bc33:	31 c0                	xor    eax,eax
c001bc35:	5e                   	pop    esi
c001bc36:	5f                   	pop    edi
c001bc37:	c3                   	ret    
c001bc38:	83 ec 08             	sub    esp,0x8
c001bc3b:	29 c6                	sub    esi,eax
c001bc3d:	57                   	push   edi
c001bc3e:	01 f3                	add    ebx,esi
c001bc40:	53                   	push   ebx
c001bc41:	e8 7a 4c fe ff       	call   c00008c0 <strcmp>
c001bc46:	83 c4 10             	add    esp,0x10
c001bc49:	85 c0                	test   eax,eax
c001bc4b:	5b                   	pop    ebx
c001bc4c:	0f 94 c0             	sete   al
c001bc4f:	5e                   	pop    esi
c001bc50:	0f b6 c0             	movzx  eax,al
c001bc53:	5f                   	pop    edi
c001bc54:	c3                   	ret    

c001bc55 <sysCallOpen(regs*)>:
c001bc55:	56                   	push   esi
c001bc56:	53                   	push   ebx
c001bc57:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc5d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc64:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc67:	85 c9                	test   ecx,ecx
c001bc69:	0f 84 b3 00 00 00    	je     c001bd22 <sysCallOpen(regs*)+0xcd>
c001bc6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc72:	85 c0                	test   eax,eax
c001bc74:	0f 84 a8 00 00 00    	je     c001bd22 <sysCallOpen(regs*)+0xcd>
c001bc7a:	52                   	push   edx
c001bc7b:	68 ad b6 02 c0       	push   0xc002b6ad
c001bc80:	50                   	push   eax
c001bc81:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc85:	56                   	push   esi
c001bc86:	e8 2d 72 ff ff       	call   c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc8b:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc8e:	e8 01 4b fe ff       	call   c0000794 <strlen>
c001bc93:	83 c4 10             	add    esp,0x10
c001bc96:	48                   	dec    eax
c001bc97:	74 1d                	je     c001bcb6 <sysCallOpen(regs*)+0x61>
c001bc99:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc9c:	eb 0f                	jmp    c001bcad <sysCallOpen(regs*)+0x58>
c001bc9e:	80 fa 3a             	cmp    dl,0x3a
c001bca1:	74 0f                	je     c001bcb2 <sysCallOpen(regs*)+0x5d>
c001bca3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bca7:	48                   	dec    eax
c001bca8:	74 0c                	je     c001bcb6 <sysCallOpen(regs*)+0x61>
c001bcaa:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bcad:	80 fa 2e             	cmp    dl,0x2e
c001bcb0:	75 ec                	jne    c001bc9e <sysCallOpen(regs*)+0x49>
c001bcb2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bcb6:	83 ec 08             	sub    esp,0x8
c001bcb9:	68 b1 b6 02 c0       	push   0xc002b6b1
c001bcbe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcc1:	e8 47 ff ff ff       	call   c001bc0d <string_ends_with(char const*, char const*)>
c001bcc6:	83 c4 10             	add    esp,0x10
c001bcc9:	85 c0                	test   eax,eax
c001bccb:	75 17                	jne    c001bce4 <sysCallOpen(regs*)+0x8f>
c001bccd:	83 ec 08             	sub    esp,0x8
c001bcd0:	68 d2 b6 02 c0       	push   0xc002b6d2
c001bcd5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd8:	e8 30 ff ff ff       	call   c001bc0d <string_ends_with(char const*, char const*)>
c001bcdd:	83 c4 10             	add    esp,0x10
c001bce0:	85 c0                	test   eax,eax
c001bce2:	74 51                	je     c001bd35 <sysCallOpen(regs*)+0xe0>
c001bce4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bce7:	83 ec 08             	sub    esp,0x8
c001bcea:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bcf0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcf7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcfa:	ff 30                	push   DWORD PTR [eax]
c001bcfc:	68 b6 b6 02 c0       	push   0xc002b6b6
c001bd01:	e8 03 6e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001bd06:	c7 04 24 c5 b6 02 c0 	mov    DWORD PTR [esp],0xc002b6c5
c001bd0d:	e8 f7 6d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	81 c4 04 01 00 00    	add    esp,0x104
c001bd1b:	31 c0                	xor    eax,eax
c001bd1d:	31 d2                	xor    edx,edx
c001bd1f:	5b                   	pop    ebx
c001bd20:	5e                   	pop    esi
c001bd21:	c3                   	ret    
c001bd22:	81 c4 04 01 00 00    	add    esp,0x104
c001bd28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd32:	5b                   	pop    ebx
c001bd33:	5e                   	pop    esi
c001bd34:	c3                   	ret    
c001bd35:	83 ec 08             	sub    esp,0x8
c001bd38:	68 b2 b6 02 c0       	push   0xc002b6b2
c001bd3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd40:	e8 7b 4b fe ff       	call   c00008c0 <strcmp>
c001bd45:	83 c4 10             	add    esp,0x10
c001bd48:	85 c0                	test   eax,eax
c001bd4a:	74 98                	je     c001bce4 <sysCallOpen(regs*)+0x8f>
c001bd4c:	83 ec 08             	sub    esp,0x8
c001bd4f:	68 b1 b6 02 c0       	push   0xc002b6b1
c001bd54:	56                   	push   esi
c001bd55:	e8 b3 fe ff ff       	call   c001bc0d <string_ends_with(char const*, char const*)>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	85 c0                	test   eax,eax
c001bd5f:	75 83                	jne    c001bce4 <sysCallOpen(regs*)+0x8f>
c001bd61:	83 ec 08             	sub    esp,0x8
c001bd64:	68 d7 b6 02 c0       	push   0xc002b6d7
c001bd69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd6c:	e8 9c fe ff ff       	call   c001bc0d <string_ends_with(char const*, char const*)>
c001bd71:	83 c4 10             	add    esp,0x10
c001bd74:	85 c0                	test   eax,eax
c001bd76:	0f 85 d9 00 00 00    	jne    c001be55 <sysCallOpen(regs*)+0x200>
c001bd7c:	83 ec 08             	sub    esp,0x8
c001bd7f:	68 dc b6 02 c0       	push   0xc002b6dc
c001bd84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd87:	e8 81 fe ff ff       	call   c001bc0d <string_ends_with(char const*, char const*)>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	85 c0                	test   eax,eax
c001bd91:	0f 85 be 00 00 00    	jne    c001be55 <sysCallOpen(regs*)+0x200>
c001bd97:	83 ec 08             	sub    esp,0x8
c001bd9a:	68 d8 b6 02 c0       	push   0xc002b6d8
c001bd9f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bda2:	e8 19 4b fe ff       	call   c00008c0 <strcmp>
c001bda7:	83 c4 10             	add    esp,0x10
c001bdaa:	85 c0                	test   eax,eax
c001bdac:	0f 84 a3 00 00 00    	je     c001be55 <sysCallOpen(regs*)+0x200>
c001bdb2:	83 ec 08             	sub    esp,0x8
c001bdb5:	68 d7 b6 02 c0       	push   0xc002b6d7
c001bdba:	56                   	push   esi
c001bdbb:	e8 4d fe ff ff       	call   c001bc0d <string_ends_with(char const*, char const*)>
c001bdc0:	83 c4 10             	add    esp,0x10
c001bdc3:	85 c0                	test   eax,eax
c001bdc5:	0f 85 8a 00 00 00    	jne    c001be55 <sysCallOpen(regs*)+0x200>
c001bdcb:	83 ec 0c             	sub    esp,0xc
c001bdce:	68 14 01 00 00       	push   0x114
c001bdd3:	e8 62 3a ff ff       	call   c000f83a <malloc>
c001bdd8:	83 c4 0c             	add    esp,0xc
c001bddb:	89 c6                	mov    esi,eax
c001bddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bde5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bde8:	56                   	push   esi
c001bde9:	e8 74 72 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001bdee:	83 c4 10             	add    esp,0x10
c001bdf1:	85 f6                	test   esi,esi
c001bdf3:	0f 84 29 ff ff ff    	je     c001bd22 <sysCallOpen(regs*)+0xcd>
c001bdf9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bdfc:	0f b6 c2             	movzx  eax,dl
c001bdff:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001be02:	89 d0                	mov    eax,edx
c001be04:	83 e0 01             	and    eax,0x1
c001be07:	f6 c2 02             	test   dl,0x2
c001be0a:	74 03                	je     c001be0f <sysCallOpen(regs*)+0x1ba>
c001be0c:	83 c8 02             	or     eax,0x2
c001be0f:	f6 c2 04             	test   dl,0x4
c001be12:	74 03                	je     c001be17 <sysCallOpen(regs*)+0x1c2>
c001be14:	83 c8 04             	or     eax,0x4
c001be17:	f6 c2 08             	test   dl,0x8
c001be1a:	74 03                	je     c001be1f <sysCallOpen(regs*)+0x1ca>
c001be1c:	83 c8 0a             	or     eax,0xa
c001be1f:	83 e2 10             	and    edx,0x10
c001be22:	74 03                	je     c001be27 <sysCallOpen(regs*)+0x1d2>
c001be24:	83 c8 12             	or     eax,0x12
c001be27:	83 ec 08             	sub    esp,0x8
c001be2a:	50                   	push   eax
c001be2b:	56                   	push   esi
c001be2c:	e8 95 72 ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c001be31:	83 c4 10             	add    esp,0x10
c001be34:	85 c0                	test   eax,eax
c001be36:	0f 85 e6 fe ff ff    	jne    c001bd22 <sysCallOpen(regs*)+0xcd>
c001be3c:	83 ec 0c             	sub    esp,0xc
c001be3f:	56                   	push   esi
c001be40:	e8 89 58 ff ff       	call   c00116ce <UnixFile::getFileDescriptor()>
c001be45:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be48:	89 02                	mov    DWORD PTR [edx],eax
c001be4a:	c1 f8 1f             	sar    eax,0x1f
c001be4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be50:	e9 bd fe ff ff       	jmp    c001bd12 <sysCallOpen(regs*)+0xbd>
c001be55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be58:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be65:	e9 ab fe ff ff       	jmp    c001bd15 <sysCallOpen(regs*)+0xc0>

c001be6a <Sys::loadSyscalls()>:
c001be6a:	c7 05 20 06 03 c0 20 b0 01 c0 	mov    DWORD PTR ds:0xc0030620,0xc001b020
c001be74:	c7 05 24 06 03 c0 82 ac 01 c0 	mov    DWORD PTR ds:0xc0030624,0xc001ac82
c001be7e:	c7 05 28 06 03 c0 d5 ad 01 c0 	mov    DWORD PTR ds:0xc0030628,0xc001add5
c001be88:	c7 05 2c 06 03 c0 b8 af 01 c0 	mov    DWORD PTR ds:0xc003062c,0xc001afb8
c001be92:	c7 05 30 06 03 c0 6d ad 01 c0 	mov    DWORD PTR ds:0xc0030630,0xc001ad6d
c001be9c:	c7 05 34 06 03 c0 b9 ac 01 c0 	mov    DWORD PTR ds:0xc0030634,0xc001acb9
c001bea6:	c7 05 38 06 03 c0 9a ac 01 c0 	mov    DWORD PTR ds:0xc0030638,0xc001ac9a
c001beb0:	c7 05 3c 06 03 c0 2a ae 01 c0 	mov    DWORD PTR ds:0xc003063c,0xc001ae2a
c001beba:	c7 05 44 06 03 c0 32 b5 01 c0 	mov    DWORD PTR ds:0xc0030644,0xc001b532
c001bec4:	c7 05 40 06 03 c0 55 bc 01 c0 	mov    DWORD PTR ds:0xc0030640,0xc001bc55
c001bece:	c7 05 48 06 03 c0 ba b5 01 c0 	mov    DWORD PTR ds:0xc0030648,0xc001b5ba
c001bed8:	c7 05 4c 06 03 c0 21 b2 01 c0 	mov    DWORD PTR ds:0xc003064c,0xc001b221
c001bee2:	c7 05 50 06 03 c0 5b b0 01 c0 	mov    DWORD PTR ds:0xc0030650,0xc001b05b
c001beec:	c7 05 54 06 03 c0 60 b0 01 c0 	mov    DWORD PTR ds:0xc0030654,0xc001b060
c001bef6:	c7 05 58 06 03 c0 95 b6 01 c0 	mov    DWORD PTR ds:0xc0030658,0xc001b695
c001bf00:	c7 05 5c 06 03 c0 2f b6 01 c0 	mov    DWORD PTR ds:0xc003065c,0xc001b62f
c001bf0a:	c7 05 60 06 03 c0 09 b3 01 c0 	mov    DWORD PTR ds:0xc0030660,0xc001b309
c001bf14:	c7 05 64 06 03 c0 72 b3 01 c0 	mov    DWORD PTR ds:0xc0030664,0xc001b372
c001bf1e:	c7 05 68 06 03 c0 ef b3 01 c0 	mov    DWORD PTR ds:0xc0030668,0xc001b3ef
c001bf28:	c7 05 6c 06 03 c0 65 b0 01 c0 	mov    DWORD PTR ds:0xc003066c,0xc001b065
c001bf32:	c7 05 70 06 03 c0 05 b7 01 c0 	mov    DWORD PTR ds:0xc0030670,0xc001b705
c001bf3c:	c7 05 74 06 03 c0 1f b7 01 c0 	mov    DWORD PTR ds:0xc0030674,0xc001b71f
c001bf46:	c7 05 78 06 03 c0 1f b7 01 c0 	mov    DWORD PTR ds:0xc0030678,0xc001b71f
c001bf50:	c7 05 7c 06 03 c0 60 b7 01 c0 	mov    DWORD PTR ds:0xc003067c,0xc001b760
c001bf5a:	c7 05 80 06 03 c0 c4 b7 01 c0 	mov    DWORD PTR ds:0xc0030680,0xc001b7c4
c001bf64:	c7 05 84 06 03 c0 6f b0 01 c0 	mov    DWORD PTR ds:0xc0030684,0xc001b06f
c001bf6e:	c7 05 88 06 03 c0 28 b8 01 c0 	mov    DWORD PTR ds:0xc0030688,0xc001b828
c001bf78:	c7 05 8c 06 03 c0 de b1 01 c0 	mov    DWORD PTR ds:0xc003068c,0xc001b1de
c001bf82:	c7 05 90 06 03 c0 74 b8 01 c0 	mov    DWORD PTR ds:0xc0030690,0xc001b874
c001bf8c:	c7 05 94 06 03 c0 af b2 01 c0 	mov    DWORD PTR ds:0xc0030694,0xc001b2af
c001bf96:	c7 05 98 06 03 c0 f7 b8 01 c0 	mov    DWORD PTR ds:0xc0030698,0xc001b8f7
c001bfa0:	c7 05 9c 06 03 c0 72 b4 01 c0 	mov    DWORD PTR ds:0xc003069c,0xc001b472
c001bfaa:	c7 05 a0 06 03 c0 1e b9 01 c0 	mov    DWORD PTR ds:0xc00306a0,0xc001b91e
c001bfb4:	c7 05 a4 06 03 c0 76 b9 01 c0 	mov    DWORD PTR ds:0xc00306a4,0xc001b976
c001bfbe:	c7 05 a8 06 03 c0 23 ba 01 c0 	mov    DWORD PTR ds:0xc00306a8,0xc001ba23
c001bfc8:	c7 05 ac 06 03 c0 7f b0 01 c0 	mov    DWORD PTR ds:0xc00306ac,0xc001b07f
c001bfd2:	c7 05 b0 06 03 c0 e9 b0 01 c0 	mov    DWORD PTR ds:0xc00306b0,0xc001b0e9
c001bfdc:	c7 05 b4 06 03 c0 2f b1 01 c0 	mov    DWORD PTR ds:0xc00306b4,0xc001b12f
c001bfe6:	c7 05 b8 06 03 c0 42 bb 01 c0 	mov    DWORD PTR ds:0xc00306b8,0xc001bb42
c001bff0:	c7 05 bc 06 03 c0 3a b7 01 c0 	mov    DWORD PTR ds:0xc00306bc,0xc001b73a
c001bffa:	c7 05 c0 06 03 c0 80 b1 01 c0 	mov    DWORD PTR ds:0xc00306c0,0xc001b180
c001c004:	c7 05 c4 06 03 c0 b4 bb 01 c0 	mov    DWORD PTR ds:0xc00306c4,0xc001bbb4
c001c00e:	c7 05 c8 06 03 c0 f9 bb 01 c0 	mov    DWORD PTR ds:0xc00306c8,0xc001bbf9
c001c018:	c7 05 cc 06 03 c0 c5 ac 01 c0 	mov    DWORD PTR ds:0xc00306cc,0xc001acc5
c001c022:	c7 05 d0 06 03 c0 46 ae 01 c0 	mov    DWORD PTR ds:0xc00306d0,0xc001ae46
c001c02c:	c7 05 d4 06 03 c0 6e af 01 c0 	mov    DWORD PTR ds:0xc00306d4,0xc001af6e
c001c036:	c7 05 d8 06 03 c0 4c ac 01 c0 	mov    DWORD PTR ds:0xc00306d8,0xc001ac4c
c001c040:	c3                   	ret    

c001c041 <Sys::systemCall(regs*, void*)>:
c001c041:	53                   	push   ebx
c001c042:	83 ec 08             	sub    esp,0x8
c001c045:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c049:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c04c:	83 f8 7f             	cmp    eax,0x7f
c001c04f:	77 16                	ja     c001c067 <Sys::systemCall(regs*, void*)+0x26>
c001c051:	8b 14 85 20 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf9e0]
c001c058:	85 d2                	test   edx,edx
c001c05a:	74 0b                	je     c001c067 <Sys::systemCall(regs*, void*)+0x26>
c001c05c:	83 ec 0c             	sub    esp,0xc
c001c05f:	53                   	push   ebx
c001c060:	ff d2                	call   edx
c001c062:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c065:	eb 0d                	jmp    c001c074 <Sys::systemCall(regs*, void*)+0x33>
c001c067:	52                   	push   edx
c001c068:	52                   	push   edx
c001c069:	50                   	push   eax
c001c06a:	68 e1 b6 02 c0       	push   0xc002b6e1
c001c06f:	e8 95 6a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001c074:	83 c4 10             	add    esp,0x10
c001c077:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c07c:	31 d2                	xor    edx,edx
c001c07e:	83 c4 08             	add    esp,0x8
c001c081:	5b                   	pop    ebx
c001c082:	c3                   	ret    

c001c083 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c083:	55                   	push   ebp
c001c084:	89 e5                	mov    ebp,esp
c001c086:	57                   	push   edi
c001c087:	56                   	push   esi
c001c088:	53                   	push   ebx
c001c089:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c08f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001c092:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001c095:	85 c0                	test   eax,eax
c001c097:	0f 95 c1             	setne  cl
c001c09a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c09e:	0f 94 c2             	sete   dl
c001c0a1:	84 d1                	test   cl,dl
c001c0a3:	74 26                	je     c001c0cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c0a5:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001c0ac:	74 1d                	je     c001c0cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c0ae:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001c0b1:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001c0b7:	89 d6                	mov    esi,edx
c001c0b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001c0bf:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001c0c5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c0c8:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001c0cb:	83 ec 0c             	sub    esp,0xc
c001c0ce:	05 ff 0f 00 00       	add    eax,0xfff
c001c0d3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c0d6:	6a 01                	push   0x1
c001c0d8:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001c0de:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001c0e4:	e8 30 5a ff ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c001c0e9:	83 c4 10             	add    esp,0x10
c001c0ec:	89 c6                	mov    esi,eax
c001c0ee:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001c0f4:	0f 86 21 01 00 00    	jbe    c001c21b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001c0fa:	c1 eb 0c             	shr    ebx,0xc
c001c0fd:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001c107:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001c10d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c110:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c113:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001c119:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001c11c:	29 d8                	sub    eax,ebx
c001c11e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001c124:	0f 83 f4 00 00 00    	jae    c001c21e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001c12a:	83 ec 0c             	sub    esp,0xc
c001c12d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001c133:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c136:	3d 00 10 00 00       	cmp    eax,0x1000
c001c13b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001c13d:	52                   	push   edx
c001c13e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001c144:	52                   	push   edx
c001c145:	76 05                	jbe    c001c14c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001c147:	b8 00 10 00 00       	mov    eax,0x1000
c001c14c:	31 d2                	xor    edx,edx
c001c14e:	52                   	push   edx
c001c14f:	50                   	push   eax
c001c150:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001c153:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c156:	83 c4 20             	add    esp,0x20
c001c159:	85 c0                	test   eax,eax
c001c15b:	74 1f                	je     c001c17c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001c15d:	51                   	push   ecx
c001c15e:	51                   	push   ecx
c001c15f:	50                   	push   eax
c001c160:	68 f5 b6 02 c0       	push   0xc002b6f5
c001c165:	e8 9f 69 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001c16a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c16d:	e8 0b 5d ff ff       	call   c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>
c001c172:	83 c4 10             	add    esp,0x10
c001c175:	31 c0                	xor    eax,eax
c001c177:	e9 7c 01 00 00       	jmp    c001c2f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001c17c:	e8 d5 14 00 00       	call   c001d656 <lockScheduler()>
c001c181:	e8 51 3d ff ff       	call   c000fed7 <Phys::allocatePage()>
c001c186:	6a 07                	push   0x7
c001c188:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c18e:	56                   	push   esi
c001c18f:	50                   	push   eax
c001c190:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c196:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c199:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c19f:	e8 40 60 ff ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1a4:	83 c4 0c             	add    esp,0xc
c001c1a7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c1ad:	6a 00                	push   0x0
c001c1af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c1b5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c1b8:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c1be:	e8 8b 5e ff ff       	call   c001204e <VAS::mapOtherVASIn(bool, VAS*)>
c001c1c3:	58                   	pop    eax
c001c1c4:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c1ca:	5a                   	pop    edx
c001c1cb:	68 07 04 00 00       	push   0x407
c001c1d0:	53                   	push   ebx
c001c1d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c1d7:	50                   	push   eax
c001c1d8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c1de:	6a 00                	push   0x0
c001c1e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1ee:	e8 ab 63 ff ff       	call   c001259e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c1f3:	83 c4 1c             	add    esp,0x1c
c001c1f6:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c1fc:	68 00 10 00 00       	push   0x1000
c001c201:	50                   	push   eax
c001c202:	56                   	push   esi
c001c203:	e8 3c 45 fe ff       	call   c0000744 <memcpy>
c001c208:	e8 4b 14 00 00       	call   c001d658 <unlockScheduler()>
c001c20d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c213:	83 c4 10             	add    esp,0x10
c001c216:	e9 f5 fe ff ff       	jmp    c001c110 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c21b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c21e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c228:	0f 86 bc 00 00 00    	jbe    c001c2ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c22e:	e8 23 14 00 00       	call   c001d656 <lockScheduler()>
c001c233:	51                   	push   ecx
c001c234:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c23a:	6a 00                	push   0x0
c001c23c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c241:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c244:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c24a:	e8 ff 5d ff ff       	call   c001204e <VAS::mapOtherVASIn(bool, VAS*)>
c001c24f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c255:	83 c4 10             	add    esp,0x10
c001c258:	c1 e8 0c             	shr    eax,0xc
c001c25b:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c265:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c26b:	e8 67 3c ff ff       	call   c000fed7 <Phys::allocatePage()>
c001c270:	6a 07                	push   0x7
c001c272:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c278:	56                   	push   esi
c001c279:	50                   	push   eax
c001c27a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c280:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c283:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c289:	e8 56 5f ff ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c28e:	58                   	pop    eax
c001c28f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c295:	5a                   	pop    edx
c001c296:	68 07 04 00 00       	push   0x407
c001c29b:	53                   	push   ebx
c001c29c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2a2:	50                   	push   eax
c001c2a3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c2a9:	6a 00                	push   0x0
c001c2ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2b9:	e8 e0 62 ff ff       	call   c001259e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2be:	83 c4 1c             	add    esp,0x1c
c001c2c1:	68 00 10 00 00       	push   0x1000
c001c2c6:	6a 00                	push   0x0
c001c2c8:	56                   	push   esi
c001c2c9:	e8 aa 44 fe ff       	call   c0000778 <memset>
c001c2ce:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c2d4:	83 c4 10             	add    esp,0x10
c001c2d7:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c2dd:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c2e3:	77 86                	ja     c001c26b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c2e5:	e8 6e 13 00 00       	call   c001d658 <unlockScheduler()>
c001c2ea:	83 ec 0c             	sub    esp,0xc
c001c2ed:	56                   	push   esi
c001c2ee:	e8 8a 5b ff ff       	call   c0011e7d <Virt::freeKernelVirtualPages(unsigned long)>
c001c2f3:	83 c4 10             	add    esp,0x10
c001c2f6:	b0 01                	mov    al,0x1
c001c2f8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c2fb:	5b                   	pop    ebx
c001c2fc:	5e                   	pop    esi
c001c2fd:	5f                   	pop    edi
c001c2fe:	5d                   	pop    ebp
c001c2ff:	c3                   	ret    

c001c300 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c300:	55                   	push   ebp
c001c301:	57                   	push   edi
c001c302:	56                   	push   esi
c001c303:	53                   	push   ebx
c001c304:	83 ec 48             	sub    esp,0x48
c001c307:	68 14 01 00 00       	push   0x114
c001c30c:	e8 29 35 ff ff       	call   c000f83a <malloc>
c001c311:	83 c4 0c             	add    esp,0xc
c001c314:	89 c6                	mov    esi,eax
c001c316:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c31a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c31e:	50                   	push   eax
c001c31f:	e8 3e 6d ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001c324:	58                   	pop    eax
c001c325:	5a                   	pop    edx
c001c326:	6a 01                	push   0x1
c001c328:	56                   	push   esi
c001c329:	e8 98 6d ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c001c32e:	83 c4 10             	add    esp,0x10
c001c331:	85 c0                	test   eax,eax
c001c333:	0f 85 47 01 00 00    	jne    c001c480 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c339:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c341:	83 ec 0c             	sub    esp,0xc
c001c344:	6a 34                	push   0x34
c001c346:	e8 ef 34 ff ff       	call   c000f83a <malloc>
c001c34b:	89 c3                	mov    ebx,eax
c001c34d:	58                   	pop    eax
c001c34e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c350:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c354:	57                   	push   edi
c001c355:	53                   	push   ebx
c001c356:	6a 00                	push   0x0
c001c358:	6a 34                	push   0x34
c001c35a:	56                   	push   esi
c001c35b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c35e:	83 c4 20             	add    esp,0x20
c001c361:	85 c0                	test   eax,eax
c001c363:	0f 85 17 01 00 00    	jne    c001c480 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c369:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c36f:	0f 85 0b 01 00 00    	jne    c001c480 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c375:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c378:	85 c0                	test   eax,eax
c001c37a:	0f 84 00 01 00 00    	je     c001c480 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c380:	31 d2                	xor    edx,edx
c001c382:	55                   	push   ebp
c001c383:	52                   	push   edx
c001c384:	50                   	push   eax
c001c385:	56                   	push   esi
c001c386:	e8 f9 6d ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c38b:	83 c4 10             	add    esp,0x10
c001c38e:	85 c0                	test   eax,eax
c001c390:	0f 85 ea 00 00 00    	jne    c001c480 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c39c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3a4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3a8:	0f af c2             	imul   eax,edx
c001c3ab:	50                   	push   eax
c001c3ac:	e8 89 34 ff ff       	call   c000f83a <malloc>
c001c3b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3be:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3c2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3c6:	0f af c2             	imul   eax,edx
c001c3c9:	99                   	cdq    
c001c3ca:	52                   	push   edx
c001c3cb:	50                   	push   eax
c001c3cc:	56                   	push   esi
c001c3cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3d0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3d3:	83 c4 20             	add    esp,0x20
c001c3d6:	85 c0                	test   eax,eax
c001c3d8:	0f 84 a2 00 00 00    	je     c001c480 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3de:	31 d2                	xor    edx,edx
c001c3e0:	51                   	push   ecx
c001c3e1:	52                   	push   edx
c001c3e2:	50                   	push   eax
c001c3e3:	56                   	push   esi
c001c3e4:	e8 9b 6d ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c3e9:	83 c4 10             	add    esp,0x10
c001c3ec:	85 c0                	test   eax,eax
c001c3ee:	0f 85 8c 00 00 00    	jne    c001c480 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3f4:	83 ec 0c             	sub    esp,0xc
c001c3f7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c3fb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c3ff:	31 ed                	xor    ebp,ebp
c001c401:	0f af c2             	imul   eax,edx
c001c404:	50                   	push   eax
c001c405:	e8 30 34 ff ff       	call   c000f83a <malloc>
c001c40a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c410:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c417:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c41b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c41f:	0f af c2             	imul   eax,edx
c001c422:	99                   	cdq    
c001c423:	52                   	push   edx
c001c424:	50                   	push   eax
c001c425:	56                   	push   esi
c001c426:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c429:	83 c4 20             	add    esp,0x20
c001c42c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c434:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c438:	0f 86 80 00 00 00    	jbe    c001c4be <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c43e:	0f b7 fd             	movzx  edi,bp
c001c441:	c1 e7 05             	shl    edi,0x5
c001c444:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c448:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c44b:	75 6b                	jne    c001c4b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c44d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c450:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c454:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c457:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c45b:	52                   	push   edx
c001c45c:	31 d2                	xor    edx,edx
c001c45e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c461:	52                   	push   edx
c001c462:	50                   	push   eax
c001c463:	56                   	push   esi
c001c464:	e8 1b 6d ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c469:	83 c4 10             	add    esp,0x10
c001c46c:	85 c0                	test   eax,eax
c001c46e:	74 17                	je     c001c487 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c470:	83 ec 0c             	sub    esp,0xc
c001c473:	68 20 b7 02 c0       	push   0xc002b720
c001c478:	e8 8c 66 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001c47d:	83 c4 10             	add    esp,0x10
c001c480:	31 c0                	xor    eax,eax
c001c482:	e9 87 00 00 00       	jmp    c001c50e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c487:	83 ec 0c             	sub    esp,0xc
c001c48a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c48d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c490:	50                   	push   eax
c001c491:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c495:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c499:	56                   	push   esi
c001c49a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c49e:	e8 e0 fb ff ff       	call   c001c083 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4a7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4ab:	83 c4 20             	add    esp,0x20
c001c4ae:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4b2:	73 04                	jae    c001c4b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4b8:	45                   	inc    ebp
c001c4b9:	e9 76 ff ff ff       	jmp    c001c434 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4be:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4ca:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4d0:	83 ec 0c             	sub    esp,0xc
c001c4d3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4de:	05 00 10 00 00       	add    eax,0x1000
c001c4e3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4ea:	e8 5b 33 ff ff       	call   c000f84a <free>
c001c4ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4f2:	e8 53 33 ff ff       	call   c000f84a <free>
c001c4f7:	58                   	pop    eax
c001c4f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4fc:	e8 49 33 ff ff       	call   c000f84a <free>
c001c501:	89 34 24             	mov    DWORD PTR [esp],esi
c001c504:	e8 1b 6c ff ff       	call   c0013124 <File::close()>
c001c509:	83 c4 10             	add    esp,0x10
c001c50c:	b0 01                	mov    al,0x1
c001c50e:	83 c4 3c             	add    esp,0x3c
c001c511:	5b                   	pop    ebx
c001c512:	5e                   	pop    esi
c001c513:	5f                   	pop    edi
c001c514:	5d                   	pop    ebp
c001c515:	c3                   	ret    

c001c516 <Thr::runtimeReferenceHelper()>:
c001c516:	83 ec 18             	sub    esp,0x18
c001c519:	68 28 b7 02 c0       	push   0xc002b728
c001c51e:	e8 e6 65 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001c523:	fa                   	cli    
c001c524:	83 c4 10             	add    esp,0x10
c001c527:	eb fe                	jmp    c001c527 <Thr::runtimeReferenceHelper()+0x11>

c001c529 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c529:	57                   	push   edi
c001c52a:	56                   	push   esi
c001c52b:	53                   	push   ebx
c001c52c:	31 db                	xor    ebx,ebx
c001c52e:	39 1d c0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fc0,ebx
c001c534:	7e 3c                	jle    c001c572 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c536:	8b 34 9d 40 0f 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf0c0]
c001c53d:	31 ff                	xor    edi,edi
c001c53f:	39 3c 9d 40 0e 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf1c0],edi
c001c546:	7e 27                	jle    c001c56f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c548:	50                   	push   eax
c001c549:	50                   	push   eax
c001c54a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c54e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c550:	03 04 9d c0 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf140]
c001c557:	50                   	push   eax
c001c558:	e8 63 43 fe ff       	call   c00008c0 <strcmp>
c001c55d:	83 c4 10             	add    esp,0x10
c001c560:	85 c0                	test   eax,eax
c001c562:	75 05                	jne    c001c569 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c564:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c567:	eb 0b                	jmp    c001c574 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c569:	83 c6 10             	add    esi,0x10
c001c56c:	47                   	inc    edi
c001c56d:	eb d0                	jmp    c001c53f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c56f:	43                   	inc    ebx
c001c570:	eb bc                	jmp    c001c52e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c572:	31 c0                	xor    eax,eax
c001c574:	5b                   	pop    ebx
c001c575:	5e                   	pop    esi
c001c576:	5f                   	pop    edi
c001c577:	c3                   	ret    

c001c578 <Thr::loadKernelSymbolTable(char const*)>:
c001c578:	55                   	push   ebp
c001c579:	57                   	push   edi
c001c57a:	56                   	push   esi
c001c57b:	53                   	push   ebx
c001c57c:	83 ec 68             	sub    esp,0x68
c001c57f:	8b 35 14 10 03 c0    	mov    esi,DWORD PTR ds:0xc0031014
c001c585:	68 14 01 00 00       	push   0x114
c001c58a:	e8 ab 32 ff ff       	call   c000f83a <malloc>
c001c58f:	83 c4 0c             	add    esp,0xc
c001c592:	89 c3                	mov    ebx,eax
c001c594:	56                   	push   esi
c001c595:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c599:	50                   	push   eax
c001c59a:	e8 c3 6a ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001c59f:	5e                   	pop    esi
c001c5a0:	5f                   	pop    edi
c001c5a1:	6a 01                	push   0x1
c001c5a3:	53                   	push   ebx
c001c5a4:	e8 1d 6b ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	85 c0                	test   eax,eax
c001c5ae:	74 0a                	je     c001c5ba <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5b0:	83 ec 0c             	sub    esp,0xc
c001c5b3:	68 4a b7 02 c0       	push   0xc002b74a
c001c5b8:	eb 34                	jmp    c001c5ee <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5ba:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5c2:	83 ec 0c             	sub    esp,0xc
c001c5c5:	6a 34                	push   0x34
c001c5c7:	e8 6e 32 ff ff       	call   c000f83a <malloc>
c001c5cc:	59                   	pop    ecx
c001c5cd:	89 c7                	mov    edi,eax
c001c5cf:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5d5:	56                   	push   esi
c001c5d6:	57                   	push   edi
c001c5d7:	6a 00                	push   0x0
c001c5d9:	6a 34                	push   0x34
c001c5db:	53                   	push   ebx
c001c5dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5df:	83 c4 20             	add    esp,0x20
c001c5e2:	85 c0                	test   eax,eax
c001c5e4:	74 17                	je     c001c5fd <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5e6:	83 ec 0c             	sub    esp,0xc
c001c5e9:	68 61 b7 02 c0       	push   0xc002b761
c001c5ee:	e8 fa d9 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001c5f3:	83 c4 10             	add    esp,0x10
c001c5f6:	31 c0                	xor    eax,eax
c001c5f8:	e9 31 02 00 00       	jmp    c001c82e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c5fd:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c603:	75 e1                	jne    c001c5e6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c605:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c608:	85 c0                	test   eax,eax
c001c60a:	74 da                	je     c001c5e6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c60c:	52                   	push   edx
c001c60d:	31 d2                	xor    edx,edx
c001c60f:	52                   	push   edx
c001c610:	50                   	push   eax
c001c611:	53                   	push   ebx
c001c612:	e8 6d 6b ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c617:	83 c4 10             	add    esp,0x10
c001c61a:	85 c0                	test   eax,eax
c001c61c:	75 c8                	jne    c001c5e6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c61e:	83 ec 0c             	sub    esp,0xc
c001c621:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c625:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c629:	31 ed                	xor    ebp,ebp
c001c62b:	0f af c2             	imul   eax,edx
c001c62e:	50                   	push   eax
c001c62f:	e8 06 32 ff ff       	call   c000f83a <malloc>
c001c634:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c63a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c63d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c641:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c645:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c649:	0f af c2             	imul   eax,edx
c001c64c:	99                   	cdq    
c001c64d:	52                   	push   edx
c001c64e:	50                   	push   eax
c001c64f:	53                   	push   ebx
c001c650:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c653:	83 c4 20             	add    esp,0x20
c001c656:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c65e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c666:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c66e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c676:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c67a:	0f 86 aa 00 00 00    	jbe    c001c72a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c680:	0f b7 f5             	movzx  esi,bp
c001c683:	6b f6 28             	imul   esi,esi,0x28
c001c686:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c68a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c68d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c691:	50                   	push   eax
c001c692:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c696:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c69a:	8b 16                	mov    edx,DWORD PTR [esi]
c001c69c:	6b c0 28             	imul   eax,eax,0x28
c001c69f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6a3:	89 d0                	mov    eax,edx
c001c6a5:	31 d2                	xor    edx,edx
c001c6a7:	52                   	push   edx
c001c6a8:	50                   	push   eax
c001c6a9:	53                   	push   ebx
c001c6aa:	e8 d5 6a ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c6af:	83 c4 0c             	add    esp,0xc
c001c6b2:	6a 20                	push   0x20
c001c6b4:	6a 00                	push   0x0
c001c6b6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6ba:	52                   	push   edx
c001c6bb:	e8 b8 40 fe ff       	call   c0000778 <memset>
c001c6c0:	58                   	pop    eax
c001c6c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6c3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6c7:	51                   	push   ecx
c001c6c8:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6cc:	52                   	push   edx
c001c6cd:	6a 00                	push   0x0
c001c6cf:	6a 1f                	push   0x1f
c001c6d1:	53                   	push   ebx
c001c6d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6d5:	83 c4 18             	add    esp,0x18
c001c6d8:	68 78 b7 02 c0       	push   0xc002b778
c001c6dd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6e1:	52                   	push   edx
c001c6e2:	e8 d9 41 fe ff       	call   c00008c0 <strcmp>
c001c6e7:	83 c4 10             	add    esp,0x10
c001c6ea:	85 c0                	test   eax,eax
c001c6ec:	75 0f                	jne    c001c6fd <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c6ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6fd:	50                   	push   eax
c001c6fe:	50                   	push   eax
c001c6ff:	68 80 b7 02 c0       	push   0xc002b780
c001c704:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c708:	50                   	push   eax
c001c709:	e8 b2 41 fe ff       	call   c00008c0 <strcmp>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	85 c0                	test   eax,eax
c001c713:	75 0f                	jne    c001c724 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c715:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c718:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c71c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c720:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c724:	45                   	inc    ebp
c001c725:	e9 4c ff ff ff       	jmp    c001c676 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c72a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c72f:	75 10                	jne    c001c741 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c731:	83 ec 0c             	sub    esp,0xc
c001c734:	68 88 b7 02 c0       	push   0xc002b788
c001c739:	e8 af d8 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001c73e:	83 c4 10             	add    esp,0x10
c001c741:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c746:	75 10                	jne    c001c758 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c748:	83 ec 0c             	sub    esp,0xc
c001c74b:	68 88 b7 02 c0       	push   0xc002b788
c001c750:	e8 98 d8 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	31 d2                	xor    edx,edx
c001c75a:	50                   	push   eax
c001c75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75f:	52                   	push   edx
c001c760:	50                   	push   eax
c001c761:	53                   	push   ebx
c001c762:	e8 1d 6a ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c767:	5a                   	pop    edx
c001c768:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c76c:	e8 c9 30 ff ff       	call   c000f83a <malloc>
c001c771:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c775:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c779:	31 c9                	xor    ecx,ecx
c001c77b:	5e                   	pop    esi
c001c77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c77e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c782:	55                   	push   ebp
c001c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c787:	51                   	push   ecx
c001c788:	52                   	push   edx
c001c789:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c78d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c791:	53                   	push   ebx
c001c792:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c795:	83 c4 14             	add    esp,0x14
c001c798:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c79c:	e8 99 30 ff ff       	call   c000f83a <malloc>
c001c7a1:	89 c6                	mov    esi,eax
c001c7a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7a8:	56                   	push   esi
c001c7a9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7ad:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7b1:	51                   	push   ecx
c001c7b2:	52                   	push   edx
c001c7b3:	53                   	push   ebx
c001c7b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7bb:	8b 15 c0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fc0
c001c7c1:	83 c4 1c             	add    esp,0x1c
c001c7c4:	c1 e8 04             	shr    eax,0x4
c001c7c7:	89 04 95 40 0e 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf1c0],eax
c001c7ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7d2:	31 d2                	xor    edx,edx
c001c7d4:	52                   	push   edx
c001c7d5:	50                   	push   eax
c001c7d6:	53                   	push   ebx
c001c7d7:	e8 a8 69 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c7dc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7de:	31 d2                	xor    edx,edx
c001c7e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7e3:	56                   	push   esi
c001c7e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7e8:	52                   	push   edx
c001c7e9:	50                   	push   eax
c001c7ea:	53                   	push   ebx
c001c7eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7ee:	83 c4 14             	add    esp,0x14
c001c7f1:	53                   	push   ebx
c001c7f2:	e8 2d 69 ff ff       	call   c0013124 <File::close()>
c001c7f7:	5d                   	pop    ebp
c001c7f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7fc:	e8 49 30 ff ff       	call   c000f84a <free>
c001c801:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c804:	e8 41 30 ff ff       	call   c000f84a <free>
c001c809:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001c80e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c812:	8d 50 01             	lea    edx,[eax+0x1]
c001c815:	89 0c 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],ecx
c001c81c:	89 34 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],esi
c001c823:	89 15 c0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc0,edx
c001c829:	83 c4 10             	add    esp,0x10
c001c82c:	b0 01                	mov    al,0x1
c001c82e:	83 c4 5c             	add    esp,0x5c
c001c831:	5b                   	pop    ebx
c001c832:	5e                   	pop    esi
c001c833:	5f                   	pop    edi
c001c834:	5d                   	pop    ebp
c001c835:	c3                   	ret    

c001c836 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c836:	55                   	push   ebp
c001c837:	57                   	push   edi
c001c838:	56                   	push   esi
c001c839:	53                   	push   ebx
c001c83a:	81 ec 68 03 00 00    	sub    esp,0x368
c001c840:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c847:	8b 1d 14 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031014
c001c84d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c851:	68 14 01 00 00       	push   0x114
c001c856:	e8 df 2f ff ff       	call   c000f83a <malloc>
c001c85b:	83 c4 0c             	add    esp,0xc
c001c85e:	89 c5                	mov    ebp,eax
c001c860:	53                   	push   ebx
c001c861:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c868:	50                   	push   eax
c001c869:	e8 f4 67 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001c86e:	5e                   	pop    esi
c001c86f:	5f                   	pop    edi
c001c870:	6a 01                	push   0x1
c001c872:	55                   	push   ebp
c001c873:	e8 4e 68 ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c001c878:	83 c4 10             	add    esp,0x10
c001c87b:	85 c0                	test   eax,eax
c001c87d:	0f 85 8d 06 00 00    	jne    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c883:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	6a 34                	push   0x34
c001c890:	e8 a5 2f ff ff       	call   c000f83a <malloc>
c001c895:	5b                   	pop    ebx
c001c896:	89 c7                	mov    edi,eax
c001c898:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c89c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c89f:	53                   	push   ebx
c001c8a0:	57                   	push   edi
c001c8a1:	6a 00                	push   0x0
c001c8a3:	6a 34                	push   0x34
c001c8a5:	55                   	push   ebp
c001c8a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8a9:	83 c4 20             	add    esp,0x20
c001c8ac:	85 c0                	test   eax,eax
c001c8ae:	0f 85 5c 06 00 00    	jne    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c8b4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8ba:	0f 85 50 06 00 00    	jne    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c8c0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8c3:	85 c0                	test   eax,eax
c001c8c5:	0f 84 45 06 00 00    	je     c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c8cb:	31 d2                	xor    edx,edx
c001c8cd:	51                   	push   ecx
c001c8ce:	52                   	push   edx
c001c8cf:	50                   	push   eax
c001c8d0:	55                   	push   ebp
c001c8d1:	e8 ae 68 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c8d6:	83 c4 10             	add    esp,0x10
c001c8d9:	85 c0                	test   eax,eax
c001c8db:	0f 85 2f 06 00 00    	jne    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c8e1:	83 ec 0c             	sub    esp,0xc
c001c8e4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8e7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c8ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8f3:	0f af c2             	imul   eax,edx
c001c8f6:	50                   	push   eax
c001c8f7:	e8 3e 2f ff ff       	call   c000f83a <malloc>
c001c8fc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c903:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c906:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c90a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c90e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c912:	0f af c2             	imul   eax,edx
c001c915:	99                   	cdq    
c001c916:	52                   	push   edx
c001c917:	50                   	push   eax
c001c918:	55                   	push   ebp
c001c919:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c91c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c91f:	83 c4 20             	add    esp,0x20
c001c922:	85 c0                	test   eax,eax
c001c924:	0f 84 e6 05 00 00    	je     c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c92a:	52                   	push   edx
c001c92b:	31 d2                	xor    edx,edx
c001c92d:	52                   	push   edx
c001c92e:	50                   	push   eax
c001c92f:	55                   	push   ebp
c001c930:	e8 4f 68 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c935:	83 c4 10             	add    esp,0x10
c001c938:	85 c0                	test   eax,eax
c001c93a:	0f 85 d0 05 00 00    	jne    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c940:	83 ec 0c             	sub    esp,0xc
c001c943:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c947:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c94b:	31 f6                	xor    esi,esi
c001c94d:	0f af c2             	imul   eax,edx
c001c950:	50                   	push   eax
c001c951:	e8 e4 2e ff ff       	call   c000f83a <malloc>
c001c956:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c959:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c95d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c960:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c964:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c968:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c96c:	0f af c2             	imul   eax,edx
c001c96f:	99                   	cdq    
c001c970:	52                   	push   edx
c001c971:	50                   	push   eax
c001c972:	55                   	push   ebp
c001c973:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c976:	83 c4 20             	add    esp,0x20
c001c979:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c97d:	0f 86 8a 00 00 00    	jbe    c001ca0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c983:	0f b7 de             	movzx  ebx,si
c001c986:	c1 e3 05             	shl    ebx,0x5
c001c989:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c98d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c990:	75 75                	jne    c001ca07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c992:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c995:	31 d2                	xor    edx,edx
c001c997:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c99b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c99e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9a2:	50                   	push   eax
c001c9a3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9a6:	52                   	push   edx
c001c9a7:	50                   	push   eax
c001c9a8:	55                   	push   ebp
c001c9a9:	e8 d6 67 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001c9ae:	83 c4 10             	add    esp,0x10
c001c9b1:	85 c0                	test   eax,eax
c001c9b3:	0f 85 57 05 00 00    	jne    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c9b9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9c3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9c7:	31 d2                	xor    edx,edx
c001c9c9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9cd:	83 ec 0c             	sub    esp,0xc
c001c9d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9db:	50                   	push   eax
c001c9dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9e4:	52                   	push   edx
c001c9e5:	50                   	push   eax
c001c9e6:	55                   	push   ebp
c001c9e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9ea:	83 c4 1c             	add    esp,0x1c
c001c9ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9f0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c9f3:	50                   	push   eax
c001c9f4:	6a 00                	push   0x0
c001c9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fa:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c9fe:	50                   	push   eax
c001c9ff:	e8 74 3d fe ff       	call   c0000778 <memset>
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	46                   	inc    esi
c001ca08:	e9 6c ff ff ff       	jmp    c001c979 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca0d:	53                   	push   ebx
c001ca0e:	31 db                	xor    ebx,ebx
c001ca10:	68 00 01 00 00       	push   0x100
c001ca15:	6a 00                	push   0x0
c001ca17:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca1b:	50                   	push   eax
c001ca1c:	e8 57 3d fe ff       	call   c0000778 <memset>
c001ca21:	83 c4 0c             	add    esp,0xc
c001ca24:	68 00 01 00 00       	push   0x100
c001ca29:	6a 00                	push   0x0
c001ca2b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca32:	50                   	push   eax
c001ca33:	e8 40 3d fe ff       	call   c0000778 <memset>
c001ca38:	83 c4 10             	add    esp,0x10
c001ca3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca43:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca4b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca5b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca63:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca67:	0f 86 30 01 00 00    	jbe    c001cb9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca6d:	0f b7 f3             	movzx  esi,bx
c001ca70:	6b f6 28             	imul   esi,esi,0x28
c001ca73:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca77:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca7e:	52                   	push   edx
c001ca7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca83:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca87:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca89:	6b d2 28             	imul   edx,edx,0x28
c001ca8c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ca90:	31 d2                	xor    edx,edx
c001ca92:	52                   	push   edx
c001ca93:	50                   	push   eax
c001ca94:	55                   	push   ebp
c001ca95:	e8 ea 66 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001ca9a:	83 c4 0c             	add    esp,0xc
c001ca9d:	6a 20                	push   0x20
c001ca9f:	6a 00                	push   0x0
c001caa1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caa8:	51                   	push   ecx
c001caa9:	e8 ca 3c fe ff       	call   c0000778 <memset>
c001caae:	59                   	pop    ecx
c001caaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cab2:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cab6:	52                   	push   edx
c001cab7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cabe:	51                   	push   ecx
c001cabf:	6a 00                	push   0x0
c001cac1:	6a 1f                	push   0x1f
c001cac3:	55                   	push   ebp
c001cac4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cac7:	83 c4 1c             	add    esp,0x1c
c001caca:	6a 09                	push   0x9
c001cacc:	68 a2 b7 02 c0       	push   0xc002b7a2
c001cad1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cad8:	51                   	push   ecx
c001cad9:	e8 62 3b fe ff       	call   c0000640 <memcmp>
c001cade:	83 c4 10             	add    esp,0x10
c001cae1:	85 c0                	test   eax,eax
c001cae3:	75 21                	jne    c001cb06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001caed:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001caf1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001caf5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caf8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001caff:	89 d0                	mov    eax,edx
c001cb01:	40                   	inc    eax
c001cb02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb06:	50                   	push   eax
c001cb07:	6a 09                	push   0x9
c001cb09:	68 ac b7 02 c0       	push   0xc002b7ac
c001cb0e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb15:	50                   	push   eax
c001cb16:	e8 25 3b fe ff       	call   c0000640 <memcmp>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	85 c0                	test   eax,eax
c001cb20:	75 21                	jne    c001cb43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb2a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb32:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb35:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb3c:	89 d0                	mov    eax,edx
c001cb3e:	40                   	inc    eax
c001cb3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb43:	50                   	push   eax
c001cb44:	50                   	push   eax
c001cb45:	68 78 b7 02 c0       	push   0xc002b778
c001cb4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb51:	50                   	push   eax
c001cb52:	e8 69 3d fe ff       	call   c00008c0 <strcmp>
c001cb57:	83 c4 10             	add    esp,0x10
c001cb5a:	85 c0                	test   eax,eax
c001cb5c:	75 0f                	jne    c001cb6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb5e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb6d:	50                   	push   eax
c001cb6e:	50                   	push   eax
c001cb6f:	68 80 b7 02 c0       	push   0xc002b780
c001cb74:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb7b:	50                   	push   eax
c001cb7c:	e8 3f 3d fe ff       	call   c00008c0 <strcmp>
c001cb81:	83 c4 10             	add    esp,0x10
c001cb84:	85 c0                	test   eax,eax
c001cb86:	75 0f                	jne    c001cb97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb88:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cb97:	43                   	inc    ebx
c001cb98:	e9 c6 fe ff ff       	jmp    c001ca63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cb9d:	31 d2                	xor    edx,edx
c001cb9f:	50                   	push   eax
c001cba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cba4:	52                   	push   edx
c001cba5:	50                   	push   eax
c001cba6:	55                   	push   ebp
c001cba7:	e8 d8 65 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001cbac:	58                   	pop    eax
c001cbad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbb1:	e8 84 2c ff ff       	call   c000f83a <malloc>
c001cbb6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbb9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbbd:	31 d2                	xor    edx,edx
c001cbbf:	58                   	pop    eax
c001cbc0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbc4:	53                   	push   ebx
c001cbc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbcd:	52                   	push   edx
c001cbce:	50                   	push   eax
c001cbcf:	55                   	push   ebp
c001cbd0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbd3:	83 c4 14             	add    esp,0x14
c001cbd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbda:	e8 5b 2c ff ff       	call   c000f83a <malloc>
c001cbdf:	31 d2                	xor    edx,edx
c001cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbe5:	83 c4 0c             	add    esp,0xc
c001cbe8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbec:	52                   	push   edx
c001cbed:	50                   	push   eax
c001cbee:	55                   	push   ebp
c001cbef:	e8 90 65 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001cbf4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbf7:	31 d2                	xor    edx,edx
c001cbf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc04:	52                   	push   edx
c001cc05:	50                   	push   eax
c001cc06:	55                   	push   ebp
c001cc07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc0a:	83 c4 20             	add    esp,0x20
c001cc0d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc19:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc1d:	0f 84 f1 02 00 00    	je     c001cf14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001cc23:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc2a:	31 d2                	xor    edx,edx
c001cc2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc30:	c1 e8 03             	shr    eax,0x3
c001cc33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc37:	51                   	push   ecx
c001cc38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc3c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc40:	52                   	push   edx
c001cc41:	50                   	push   eax
c001cc42:	55                   	push   ebp
c001cc43:	e8 3c 65 ff ff       	call   c0013184 <File::seek(unsigned long long)>
c001cc48:	5b                   	pop    ebx
c001cc49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc4d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc54:	e8 e1 2b ff ff       	call   c000f83a <malloc>
c001cc59:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc60:	31 d2                	xor    edx,edx
c001cc62:	5e                   	pop    esi
c001cc63:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc67:	50                   	push   eax
c001cc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc70:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc77:	52                   	push   edx
c001cc78:	50                   	push   eax
c001cc79:	55                   	push   ebp
c001cc7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc7d:	83 c4 20             	add    esp,0x20
c001cc80:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc88:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cc8c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cc90:	0f 8d 62 02 00 00    	jge    c001cef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001cc96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc9e:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cca3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cca6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccae:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccb2:	89 d8                	mov    eax,ebx
c001ccb4:	c1 e8 08             	shr    eax,0x8
c001ccb7:	89 c6                	mov    esi,eax
c001ccb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ccbd:	c1 e6 04             	shl    esi,0x4
c001ccc0:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccc4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccc7:	85 d2                	test   edx,edx
c001ccc9:	0f 85 bf 00 00 00    	jne    c001cd8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cccf:	83 ec 0c             	sub    esp,0xc
c001ccd2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccd6:	03 06                	add    eax,DWORD PTR [esi]
c001ccd8:	50                   	push   eax
c001ccd9:	e8 4b f8 ff ff       	call   c001c529 <Thr::getAddressOfKernelSymbol(char const*)>
c001ccde:	83 c4 10             	add    esp,0x10
c001cce1:	89 c2                	mov    edx,eax
c001cce3:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cce8:	85 c0                	test   eax,eax
c001ccea:	0f 85 9e 00 00 00    	jne    c001cd8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccf0:	83 ec 0c             	sub    esp,0xc
c001ccf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccf7:	03 06                	add    eax,DWORD PTR [esi]
c001ccf9:	50                   	push   eax
c001ccfa:	e8 f6 17 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001ccff:	83 c4 10             	add    esp,0x10
c001cd02:	89 c2                	mov    edx,eax
c001cd04:	85 c0                	test   eax,eax
c001cd06:	0f 85 82 00 00 00    	jne    c001cd8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd0c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd10:	50                   	push   eax
c001cd11:	50                   	push   eax
c001cd12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd16:	03 06                	add    eax,DWORD PTR [esi]
c001cd18:	50                   	push   eax
c001cd19:	68 b6 b7 02 c0       	push   0xc002b7b6
c001cd1e:	e8 e6 5d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001cd23:	58                   	pop    eax
c001cd24:	5a                   	pop    edx
c001cd25:	68 d0 b7 02 c0       	push   0xc002b7d0
c001cd2a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd31:	50                   	push   eax
c001cd32:	e8 fd 3a fe ff       	call   c0000834 <strcpy>
c001cd37:	59                   	pop    ecx
c001cd38:	58                   	pop    eax
c001cd39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd3d:	03 06                	add    eax,DWORD PTR [esi]
c001cd3f:	50                   	push   eax
c001cd40:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd47:	50                   	push   eax
c001cd48:	e8 27 3c fe ff       	call   c0000974 <strcat>
c001cd4d:	58                   	pop    eax
c001cd4e:	5a                   	pop    edx
c001cd4f:	68 66 b8 02 c0       	push   0xc002b866
c001cd54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd5b:	50                   	push   eax
c001cd5c:	e8 13 3c fe ff       	call   c0000974 <strcat>
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd69:	0f 84 43 01 00 00    	je     c001ceb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cd6f:	83 ec 0c             	sub    esp,0xc
c001cd72:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd79:	50                   	push   eax
c001cd7a:	e8 6e d2 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd86:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd8a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd8e:	80 fb 01             	cmp    bl,0x1
c001cd91:	75 7d                	jne    c001ce10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cd93:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cd9a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd9e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cda2:	01 ce                	add    esi,ecx
c001cda4:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdaa:	0f 94 c0             	sete   al
c001cdad:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdb3:	0f 94 c3             	sete   bl
c001cdb6:	09 c3                	or     ebx,eax
c001cdb8:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdba:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdbf:	74 36                	je     c001cdf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001cdc1:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdc4:	84 db                	test   bl,bl
c001cdc6:	75 0a                	jne    c001cdd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001cdc8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdcc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdd0:	76 37                	jbe    c001ce09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cdd2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cdd6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cddb:	0f 84 d1 00 00 00    	je     c001ceb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cde1:	83 ec 0c             	sub    esp,0xc
c001cde4:	68 e7 b7 02 c0       	push   0xc002b7e7
c001cde9:	e8 ff d1 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cdf5:	eb 12                	jmp    c001ce09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cdf7:	01 c1                	add    ecx,eax
c001cdf9:	84 db                	test   bl,bl
c001cdfb:	75 0c                	jne    c001ce09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cdfd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce01:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce05:	77 02                	ja     c001ce09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce07:	01 d1                	add    ecx,edx
c001ce09:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce0b:	e9 df 00 00 00       	jmp    c001ceef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ce10:	80 fb 02             	cmp    bl,0x2
c001ce13:	75 71                	jne    c001ce86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001ce15:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce1c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce20:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce24:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce2a:	74 15                	je     c001ce41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ce2c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce32:	74 0d                	je     c001ce41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ce34:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce38:	83 e8 04             	sub    eax,0x4
c001ce3b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce3f:	76 1f                	jbe    c001ce60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ce41:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce45:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce4a:	74 66                	je     c001ceb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ce4c:	83 ec 0c             	sub    esp,0xc
c001ce4f:	68 03 b8 02 c0       	push   0xc002b803
c001ce54:	e8 94 d1 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001ce59:	83 c4 10             	add    esp,0x10
c001ce5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce60:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce62:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce67:	74 13                	je     c001ce7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001ce69:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce6d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ce74:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ce78:	01 c8                	add    eax,ecx
c001ce7a:	eb 04                	jmp    c001ce80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001ce7c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ce80:	01 c2                	add    edx,eax
c001ce82:	89 16                	mov    DWORD PTR [esi],edx
c001ce84:	eb 69                	jmp    c001ceef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ce86:	0f b6 db             	movzx  ebx,bl
c001ce89:	50                   	push   eax
c001ce8a:	50                   	push   eax
c001ce8b:	53                   	push   ebx
c001ce8c:	68 1f b8 02 c0       	push   0xc002b81f
c001ce91:	e8 73 5c ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ce96:	83 c4 10             	add    esp,0x10
c001ce99:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce9e:	74 12                	je     c001ceb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cea0:	83 ec 0c             	sub    esp,0xc
c001cea3:	68 2a b8 02 c0       	push   0xc002b82a
c001cea8:	e8 40 d1 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001cead:	83 c4 10             	add    esp,0x10
c001ceb0:	eb 3d                	jmp    c001ceef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ceb2:	83 ec 0c             	sub    esp,0xc
c001ceb5:	55                   	push   ebp
c001ceb6:	e8 69 62 ff ff       	call   c0013124 <File::close()>
c001cebb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cebe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cec1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cec4:	59                   	pop    ecx
c001cec5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cec9:	e8 7c 29 ff ff       	call   c000f84a <free>
c001cece:	5b                   	pop    ebx
c001cecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ced3:	e8 72 29 ff ff       	call   c000f84a <free>
c001ced8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cedb:	e8 6a 29 ff ff       	call   c000f84a <free>
c001cee0:	5e                   	pop    esi
c001cee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee5:	e8 60 29 ff ff       	call   c000f84a <free>
c001ceea:	83 c4 10             	add    esp,0x10
c001ceed:	eb 21                	jmp    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ceef:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cef3:	e9 90 fd ff ff       	jmp    c001cc88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cef8:	83 ec 0c             	sub    esp,0xc
c001cefb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ceff:	e8 46 29 ff ff       	call   c000f84a <free>
c001cf04:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf08:	83 c4 10             	add    esp,0x10
c001cf0b:	e9 05 fd ff ff       	jmp    c001cc15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf10:	31 c0                	xor    eax,eax
c001cf12:	eb 33                	jmp    c001cf47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cf14:	83 ec 0c             	sub    esp,0xc
c001cf17:	55                   	push   ebp
c001cf18:	e8 07 62 ff ff       	call   c0013124 <File::close()>
c001cf1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf26:	58                   	pop    eax
c001cf27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf2b:	e8 1a 29 ff ff       	call   c000f84a <free>
c001cf30:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf33:	e8 12 29 ff ff       	call   c000f84a <free>
c001cf38:	5a                   	pop    edx
c001cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3d:	e8 08 29 ff ff       	call   c000f84a <free>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	b0 01                	mov    al,0x1
c001cf47:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf4d:	5b                   	pop    ebx
c001cf4e:	5e                   	pop    esi
c001cf4f:	5f                   	pop    edi
c001cf50:	5d                   	pop    ebp
c001cf51:	c3                   	ret    

c001cf52 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf52:	56                   	push   esi
c001cf53:	31 d2                	xor    edx,edx
c001cf55:	53                   	push   ebx
c001cf56:	8b 1d 20 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030820
c001cf5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf60:	39 d3                	cmp    ebx,edx
c001cf62:	7e 1b                	jle    c001cf7f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf64:	8b 04 95 40 0a 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf5c0]
c001cf6b:	39 c8                	cmp    eax,ecx
c001cf6d:	77 0d                	ja     c001cf7c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf6f:	8b 34 95 40 08 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf7c0]
c001cf76:	01 c6                	add    esi,eax
c001cf78:	39 ce                	cmp    esi,ecx
c001cf7a:	77 05                	ja     c001cf81 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cf7c:	42                   	inc    edx
c001cf7d:	eb e1                	jmp    c001cf60 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cf7f:	31 c0                	xor    eax,eax
c001cf81:	5b                   	pop    ebx
c001cf82:	5e                   	pop    esi
c001cf83:	c3                   	ret    

c001cf84 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cf84:	53                   	push   ebx
c001cf85:	31 c0                	xor    eax,eax
c001cf87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cf8b:	8b 1d 20 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030820
c001cf91:	39 c3                	cmp    ebx,eax
c001cf93:	7e 22                	jle    c001cfb7 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cf95:	8b 14 85 40 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf5c0]
c001cf9c:	39 ca                	cmp    edx,ecx
c001cf9e:	77 14                	ja     c001cfb4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfa0:	03 14 85 40 08 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf7c0]
c001cfa7:	39 ca                	cmp    edx,ecx
c001cfa9:	76 09                	jbe    c001cfb4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfab:	8b 04 85 40 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3c0]
c001cfb2:	eb 05                	jmp    c001cfb9 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfb4:	40                   	inc    eax
c001cfb5:	eb da                	jmp    c001cf91 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfb7:	31 c0                	xor    eax,eax
c001cfb9:	5b                   	pop    ebx
c001cfba:	c3                   	ret    

c001cfbb <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfbb:	53                   	push   ebx
c001cfbc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cfc0:	53                   	push   ebx
c001cfc1:	e8 8c ff ff ff       	call   c001cf52 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cfc6:	5a                   	pop    edx
c001cfc7:	31 d2                	xor    edx,edx
c001cfc9:	85 c0                	test   eax,eax
c001cfcb:	74 04                	je     c001cfd1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cfcd:	89 da                	mov    edx,ebx
c001cfcf:	29 c2                	sub    edx,eax
c001cfd1:	89 d0                	mov    eax,edx
c001cfd3:	5b                   	pop    ebx
c001cfd4:	c3                   	ret    

c001cfd5 <Thr::loadDLL(char const*, bool)>:
c001cfd5:	55                   	push   ebp
c001cfd6:	57                   	push   edi
c001cfd7:	56                   	push   esi
c001cfd8:	53                   	push   ebx
c001cfd9:	81 ec 34 01 00 00    	sub    esp,0x134
c001cfdf:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cfe6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001cfed:	56                   	push   esi
c001cfee:	68 42 b8 02 c0       	push   0xc002b842
c001cff3:	e8 11 5b ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001cff8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cfff:	e8 36 28 ff ff       	call   c000f83a <malloc>
c001d004:	83 c4 0c             	add    esp,0xc
c001d007:	89 c3                	mov    ebx,eax
c001d009:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c001d00f:	56                   	push   esi
c001d010:	50                   	push   eax
c001d011:	e8 4c 60 ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001d016:	83 c4 10             	add    esp,0x10
c001d019:	85 db                	test   ebx,ebx
c001d01b:	75 3c                	jne    c001d059 <Thr::loadDLL(char const*, bool)+0x84>
c001d01d:	89 e8                	mov    eax,ebp
c001d01f:	84 c0                	test   al,al
c001d021:	0f 84 bd 01 00 00    	je     c001d1e4 <Thr::loadDLL(char const*, bool)+0x20f>
c001d027:	57                   	push   edi
c001d028:	57                   	push   edi
c001d029:	68 53 b8 02 c0       	push   0xc002b853
c001d02e:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d032:	57                   	push   edi
c001d033:	e8 fc 37 fe ff       	call   c0000834 <strcpy>
c001d038:	58                   	pop    eax
c001d039:	5a                   	pop    edx
c001d03a:	56                   	push   esi
c001d03b:	57                   	push   edi
c001d03c:	e8 33 39 fe ff       	call   c0000974 <strcat>
c001d041:	59                   	pop    ecx
c001d042:	58                   	pop    eax
c001d043:	68 66 b8 02 c0       	push   0xc002b866
c001d048:	57                   	push   edi
c001d049:	e8 26 39 fe ff       	call   c0000974 <strcat>
c001d04e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d051:	e8 97 cf ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001d056:	83 c4 10             	add    esp,0x10
c001d059:	51                   	push   ecx
c001d05a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d05e:	50                   	push   eax
c001d05f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d063:	50                   	push   eax
c001d064:	53                   	push   ebx
c001d065:	e8 08 63 ff ff       	call   c0013372 <File::stat(unsigned long long*, bool*)>
c001d06a:	83 c4 10             	add    esp,0x10
c001d06d:	85 db                	test   ebx,ebx
c001d06f:	74 0c                	je     c001d07d <Thr::loadDLL(char const*, bool)+0xa8>
c001d071:	83 ec 0c             	sub    esp,0xc
c001d074:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d076:	53                   	push   ebx
c001d077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d082:	75 0a                	jne    c001d08e <Thr::loadDLL(char const*, bool)+0xb9>
c001d084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d088:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d08c:	75 3c                	jne    c001d0ca <Thr::loadDLL(char const*, bool)+0xf5>
c001d08e:	89 e8                	mov    eax,ebp
c001d090:	84 c0                	test   al,al
c001d092:	0f 84 4a 01 00 00    	je     c001d1e2 <Thr::loadDLL(char const*, bool)+0x20d>
c001d098:	51                   	push   ecx
c001d099:	51                   	push   ecx
c001d09a:	68 53 b8 02 c0       	push   0xc002b853
c001d09f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0a3:	53                   	push   ebx
c001d0a4:	e8 8b 37 fe ff       	call   c0000834 <strcpy>
c001d0a9:	5f                   	pop    edi
c001d0aa:	58                   	pop    eax
c001d0ab:	56                   	push   esi
c001d0ac:	53                   	push   ebx
c001d0ad:	e8 c2 38 fe ff       	call   c0000974 <strcat>
c001d0b2:	58                   	pop    eax
c001d0b3:	5a                   	pop    edx
c001d0b4:	68 66 b8 02 c0       	push   0xc002b866
c001d0b9:	53                   	push   ebx
c001d0ba:	e8 b5 38 fe ff       	call   c0000974 <strcat>
c001d0bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c2:	e8 26 cf ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001d0c7:	83 c4 10             	add    esp,0x10
c001d0ca:	e8 da 4b ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c001d0cf:	51                   	push   ecx
c001d0d0:	6a 03                	push   0x3
c001d0d2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d0d6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d0da:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d0e0:	83 d3 00             	adc    ebx,0x0
c001d0e3:	89 ca                	mov    edx,ecx
c001d0e5:	89 d1                	mov    ecx,edx
c001d0e7:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d0eb:	51                   	push   ecx
c001d0ec:	50                   	push   eax
c001d0ed:	e8 f2 51 ff ff       	call   c00122e4 <VAS::allocatePages(int, int)>
c001d0f2:	5f                   	pop    edi
c001d0f3:	89 c3                	mov    ebx,eax
c001d0f5:	58                   	pop    eax
c001d0f6:	53                   	push   ebx
c001d0f7:	68 68 b8 02 c0       	push   0xc002b868
c001d0fc:	e8 08 5a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001d101:	89 34 24             	mov    DWORD PTR [esp],esi
c001d104:	e8 8b 36 fe ff       	call   c0000794 <strlen>
c001d109:	8b 3d 20 08 03 c0    	mov    edi,DWORD PTR ds:0xc0030820
c001d10f:	40                   	inc    eax
c001d110:	89 04 24             	mov    DWORD PTR [esp],eax
c001d113:	e8 22 27 ff ff       	call   c000f83a <malloc>
c001d118:	89 04 bd 40 0c 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf3c0],eax
c001d11f:	58                   	pop    eax
c001d120:	a1 20 08 03 c0       	mov    eax,ds:0xc0030820
c001d125:	5a                   	pop    edx
c001d126:	56                   	push   esi
c001d127:	ff 34 85 40 0c 03 c0 	push   DWORD PTR [eax*4-0x3ffcf3c0]
c001d12e:	e8 01 37 fe ff       	call   c0000834 <strcpy>
c001d133:	a1 20 08 03 c0       	mov    eax,ds:0xc0030820
c001d138:	8d 50 01             	lea    edx,[eax+0x1]
c001d13b:	89 1c 85 40 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5c0],ebx
c001d142:	89 15 20 08 03 c0    	mov    DWORD PTR ds:0xc0030820,edx
c001d148:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d14c:	83 c4 0c             	add    esp,0xc
c001d14f:	89 14 85 40 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf7c0],edx
c001d156:	6a 01                	push   0x1
c001d158:	53                   	push   ebx
c001d159:	56                   	push   esi
c001d15a:	e8 d7 f6 ff ff       	call   c001c836 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d15f:	83 c4 10             	add    esp,0x10
c001d162:	89 c7                	mov    edi,eax
c001d164:	fe c8                	dec    al
c001d166:	74 16                	je     c001d17e <Thr::loadDLL(char const*, bool)+0x1a9>
c001d168:	89 e8                	mov    eax,ebp
c001d16a:	84 c0                	test   al,al
c001d16c:	74 10                	je     c001d17e <Thr::loadDLL(char const*, bool)+0x1a9>
c001d16e:	83 ec 0c             	sub    esp,0xc
c001d171:	68 75 b8 02 c0       	push   0xc002b875
c001d176:	e8 72 ce ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001d17b:	83 c4 10             	add    esp,0x10
c001d17e:	31 f6                	xor    esi,esi
c001d180:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d184:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d188:	05 ff 0f 00 00       	add    eax,0xfff
c001d18d:	83 d2 00             	adc    edx,0x0
c001d190:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d194:	c1 ea 0c             	shr    edx,0xc
c001d197:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d19b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d19f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d1a3:	ba 00 00 00 00       	mov    edx,0x0
c001d1a8:	89 d0                	mov    eax,edx
c001d1aa:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d1ae:	73 2c                	jae    c001d1dc <Thr::loadDLL(char const*, bool)+0x207>
c001d1b0:	e8 f4 4a ff ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c001d1b5:	89 f5                	mov    ebp,esi
c001d1b7:	c1 e5 0c             	shl    ebp,0xc
c001d1ba:	52                   	push   edx
c001d1bb:	01 dd                	add    ebp,ebx
c001d1bd:	52                   	push   edx
c001d1be:	55                   	push   ebp
c001d1bf:	50                   	push   eax
c001d1c0:	e8 99 4c ff ff       	call   c0011e5e <VAS::getPageTableEntry(unsigned long)>
c001d1c5:	83 c4 10             	add    esp,0x10
c001d1c8:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1cb:	75 0c                	jne    c001d1d9 <Thr::loadDLL(char const*, bool)+0x204>
c001d1cd:	83 ec 0c             	sub    esp,0xc
c001d1d0:	55                   	push   ebp
c001d1d1:	e8 77 2c ff ff       	call   c000fe4d <Phys::freePage(unsigned long)>
c001d1d6:	83 c4 10             	add    esp,0x10
c001d1d9:	46                   	inc    esi
c001d1da:	eb a4                	jmp    c001d180 <Thr::loadDLL(char const*, bool)+0x1ab>
c001d1dc:	89 f8                	mov    eax,edi
c001d1de:	84 c0                	test   al,al
c001d1e0:	75 02                	jne    c001d1e4 <Thr::loadDLL(char const*, bool)+0x20f>
c001d1e2:	31 db                	xor    ebx,ebx
c001d1e4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d1ea:	89 d8                	mov    eax,ebx
c001d1ec:	5b                   	pop    ebx
c001d1ed:	5e                   	pop    esi
c001d1ee:	5f                   	pop    edi
c001d1ef:	5d                   	pop    ebp
c001d1f0:	c3                   	ret    

c001d1f1 <Thr::executeDLL(unsigned long, void*)>:
c001d1f1:	56                   	push   esi
c001d1f2:	53                   	push   ebx
c001d1f3:	51                   	push   ecx
c001d1f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d1fc:	85 db                	test   ebx,ebx
c001d1fe:	75 10                	jne    c001d210 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d200:	83 ec 0c             	sub    esp,0xc
c001d203:	68 94 b8 02 c0       	push   0xc002b894
c001d208:	e8 e0 cd ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001d20d:	83 c4 10             	add    esp,0x10
c001d210:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001d214:	89 d8                	mov    eax,ebx
c001d216:	5a                   	pop    edx
c001d217:	5b                   	pop    ebx
c001d218:	5e                   	pop    esi
c001d219:	ff e0                	jmp    eax
c001d21b:	90                   	nop

c001d21c <changeTSS>:
c001d21c:	83 ec 14             	sub    esp,0x14
c001d21f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d224:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d227:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d22c:	c1 e2 15             	shl    edx,0x15
c001d22f:	29 d0                	sub    eax,edx
c001d231:	50                   	push   eax
c001d232:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001d237:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d23d:	05 7c 11 00 00       	add    eax,0x117c
c001d242:	50                   	push   eax
c001d243:	e8 10 42 ff ff       	call   c0011458 <TSS::setESP(unsigned long)>
c001d248:	83 c4 1c             	add    esp,0x1c
c001d24b:	c3                   	ret    

c001d24c <Process::addArgs(char**)>:
c001d24c:	57                   	push   edi
c001d24d:	56                   	push   esi
c001d24e:	53                   	push   ebx
c001d24f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d253:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d257:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d261:	85 ff                	test   edi,edi
c001d263:	74 3d                	je     c001d2a2 <Process::addArgs(char**)+0x56>
c001d265:	8b 07                	mov    eax,DWORD PTR [edi]
c001d267:	85 c0                	test   eax,eax
c001d269:	74 37                	je     c001d2a2 <Process::addArgs(char**)+0x56>
c001d26b:	31 db                	xor    ebx,ebx
c001d26d:	83 ec 0c             	sub    esp,0xc
c001d270:	50                   	push   eax
c001d271:	e8 1e 35 fe ff       	call   c0000794 <strlen>
c001d276:	40                   	inc    eax
c001d277:	89 04 24             	mov    DWORD PTR [esp],eax
c001d27a:	e8 bb 25 ff ff       	call   c000f83a <malloc>
c001d27f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d286:	5a                   	pop    edx
c001d287:	59                   	pop    ecx
c001d288:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d28b:	43                   	inc    ebx
c001d28c:	50                   	push   eax
c001d28d:	e8 a2 35 fe ff       	call   c0000834 <strcpy>
c001d292:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d298:	83 c4 10             	add    esp,0x10
c001d29b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d29e:	85 c0                	test   eax,eax
c001d2a0:	75 cb                	jne    c001d26d <Process::addArgs(char**)+0x21>
c001d2a2:	5b                   	pop    ebx
c001d2a3:	5e                   	pop    esi
c001d2a4:	5f                   	pop    edi
c001d2a5:	c3                   	ret    

c001d2a6 <Process::Process(char const*, Process*, char**)>:
c001d2a6:	56                   	push   esi
c001d2a7:	53                   	push   ebx
c001d2a8:	83 ec 14             	sub    esp,0x14
c001d2ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2af:	05 0c 02 00 00       	add    eax,0x20c
c001d2b4:	bb 07 00 00 00       	mov    ebx,0x7
c001d2b9:	89 c6                	mov    esi,eax
c001d2bb:	85 db                	test   ebx,ebx
c001d2bd:	78 12                	js     c001d2d1 <Process::Process(char const*, Process*, char**)+0x2b>
c001d2bf:	83 ec 0c             	sub    esp,0xc
c001d2c2:	56                   	push   esi
c001d2c3:	e8 4a b2 00 00       	call   c0028512 <ThreadControlBlock::ThreadControlBlock()>
c001d2c8:	83 c4 10             	add    esp,0x10
c001d2cb:	83 c6 63             	add    esi,0x63
c001d2ce:	4b                   	dec    ebx
c001d2cf:	eb ea                	jmp    c001d2bb <Process::Process(char const*, Process*, char**)+0x15>
c001d2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d2dc:	83 ec 0c             	sub    esp,0xc
c001d2df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2e3:	e8 56 cb ff ff       	call   c0019e3e <Krnl::newProcessEnv(Process*)>
c001d2e8:	83 c4 10             	add    esp,0x10
c001d2eb:	89 c2                	mov    edx,eax
c001d2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d2f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2fb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d304:	a1 30 d0 02 c0       	mov    eax,ds:0xc002d030
c001d309:	8d 50 01             	lea    edx,[eax+0x1]
c001d30c:	89 15 30 d0 02 c0    	mov    DWORD PTR ds:0xc002d030,edx
c001d312:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d316:	89 02                	mov    DWORD PTR [edx],eax
c001d318:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d320:	83 ec 0c             	sub    esp,0xc
c001d323:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d327:	e8 0e 25 ff ff       	call   c000f83a <malloc>
c001d32c:	83 c4 10             	add    esp,0x10
c001d32f:	89 c3                	mov    ebx,eax
c001d331:	83 ec 08             	sub    esp,0x8
c001d334:	6a 00                	push   0x0
c001d336:	53                   	push   ebx
c001d337:	e8 50 53 ff ff       	call   c001268c <VAS::VAS(bool)>
c001d33c:	83 c4 10             	add    esp,0x10
c001d33f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d343:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d35b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d35f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d369:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d36f:	85 c0                	test   eax,eax
c001d371:	74 42                	je     c001d3b5 <Process::Process(char const*, Process*, char**)+0x10f>
c001d373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d377:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d37d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d387:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d38d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d391:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d397:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d39d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a1:	05 0c 01 00 00       	add    eax,0x10c
c001d3a6:	83 ec 08             	sub    esp,0x8
c001d3a9:	52                   	push   edx
c001d3aa:	50                   	push   eax
c001d3ab:	e8 84 34 fe ff       	call   c0000834 <strcpy>
c001d3b0:	83 c4 10             	add    esp,0x10
c001d3b3:	eb 63                	jmp    c001d418 <Process::Process(char const*, Process*, char**)+0x172>
c001d3b5:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d3bd:	83 ec 0c             	sub    esp,0xc
c001d3c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d3c4:	e8 71 24 ff ff       	call   c000f83a <malloc>
c001d3c9:	83 c4 10             	add    esp,0x10
c001d3cc:	89 c3                	mov    ebx,eax
c001d3ce:	83 ec 08             	sub    esp,0x8
c001d3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3d5:	53                   	push   ebx
c001d3d6:	e8 7b 3d ff ff       	call   c0011156 <VgaText::VgaText(char const*)>
c001d3db:	83 c4 10             	add    esp,0x10
c001d3de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d3e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	50                   	push   eax
c001d3f6:	e8 4e 31 ff ff       	call   c0010549 <addToTerminalCycle(VgaText*)>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d402:	05 0c 01 00 00       	add    eax,0x10c
c001d407:	83 ec 08             	sub    esp,0x8
c001d40a:	68 be b8 02 c0       	push   0xc002b8be
c001d40f:	50                   	push   eax
c001d410:	e8 1f 34 fe ff       	call   c0000834 <strcpy>
c001d415:	83 c4 10             	add    esp,0x10
c001d418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d41c:	83 c0 0c             	add    eax,0xc
c001d41f:	83 ec 08             	sub    esp,0x8
c001d422:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d426:	50                   	push   eax
c001d427:	e8 08 34 fe ff       	call   c0000834 <strcpy>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	83 ec 08             	sub    esp,0x8
c001d432:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d436:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d43a:	e8 0d fe ff ff       	call   c001d24c <Process::addArgs(char**)>
c001d43f:	83 c4 10             	add    esp,0x10
c001d442:	83 ec 08             	sub    esp,0x8
c001d445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d449:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d44d:	e8 ae ee ff ff       	call   c001c300 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d452:	83 c4 10             	add    esp,0x10
c001d455:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d459:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d45d:	83 f0 01             	xor    eax,0x1
c001d460:	88 c2                	mov    dl,al
c001d462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d466:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d46c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d471:	83 ec 08             	sub    esp,0x8
c001d474:	50                   	push   eax
c001d475:	68 bc b9 02 c0       	push   0xc002b9bc
c001d47a:	e8 8a 56 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	90                   	nop
c001d483:	83 c4 14             	add    esp,0x14
c001d486:	5b                   	pop    ebx
c001d487:	5e                   	pop    esi
c001d488:	c3                   	ret    
c001d489:	90                   	nop

c001d48a <Process::Process(bool, char const*, Process*, char**)>:
c001d48a:	56                   	push   esi
c001d48b:	53                   	push   ebx
c001d48c:	83 ec 24             	sub    esp,0x24
c001d48f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d493:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d49b:	05 0c 02 00 00       	add    eax,0x20c
c001d4a0:	bb 07 00 00 00       	mov    ebx,0x7
c001d4a5:	89 c6                	mov    esi,eax
c001d4a7:	85 db                	test   ebx,ebx
c001d4a9:	78 12                	js     c001d4bd <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d4ab:	83 ec 0c             	sub    esp,0xc
c001d4ae:	56                   	push   esi
c001d4af:	e8 5e b0 00 00       	call   c0028512 <ThreadControlBlock::ThreadControlBlock()>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	83 c6 63             	add    esi,0x63
c001d4ba:	4b                   	dec    ebx
c001d4bb:	eb ea                	jmp    c001d4a7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d4bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4c1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4cf:	e8 6a c9 ff ff       	call   c0019e3e <Krnl::newProcessEnv(Process*)>
c001d4d4:	83 c4 10             	add    esp,0x10
c001d4d7:	89 c2                	mov    edx,eax
c001d4d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4dd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d4e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4e7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d4f0:	a1 30 d0 02 c0       	mov    eax,ds:0xc002d030
c001d4f5:	8d 50 01             	lea    edx,[eax+0x1]
c001d4f8:	89 15 30 d0 02 c0    	mov    DWORD PTR ds:0xc002d030,edx
c001d4fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d502:	89 02                	mov    DWORD PTR [edx],eax
c001d504:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d513:	e8 22 23 ff ff       	call   c000f83a <malloc>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	89 c3                	mov    ebx,eax
c001d51d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d522:	83 ec 08             	sub    esp,0x8
c001d525:	50                   	push   eax
c001d526:	53                   	push   ebx
c001d527:	e8 60 51 ff ff       	call   c001268c <VAS::VAS(bool)>
c001d52c:	83 c4 10             	add    esp,0x10
c001d52f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d533:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d539:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d53d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d54b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d54f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d555:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d559:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d55f:	85 c0                	test   eax,eax
c001d561:	74 42                	je     c001d5a5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d567:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d56d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d577:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d57d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d581:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d587:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d58d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d591:	05 0c 01 00 00       	add    eax,0x10c
c001d596:	83 ec 08             	sub    esp,0x8
c001d599:	52                   	push   edx
c001d59a:	50                   	push   eax
c001d59b:	e8 94 32 fe ff       	call   c0000834 <strcpy>
c001d5a0:	83 c4 10             	add    esp,0x10
c001d5a3:	eb 63                	jmp    c001d608 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d5a5:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d5ad:	83 ec 0c             	sub    esp,0xc
c001d5b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d5b4:	e8 81 22 ff ff       	call   c000f83a <malloc>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	89 c3                	mov    ebx,eax
c001d5be:	83 ec 08             	sub    esp,0x8
c001d5c1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5c5:	53                   	push   ebx
c001d5c6:	e8 8b 3b ff ff       	call   c0011156 <VgaText::VgaText(char const*)>
c001d5cb:	83 c4 10             	add    esp,0x10
c001d5ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5d2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d5d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5e2:	83 ec 0c             	sub    esp,0xc
c001d5e5:	50                   	push   eax
c001d5e6:	e8 5e 2f ff ff       	call   c0010549 <addToTerminalCycle(VgaText*)>
c001d5eb:	83 c4 10             	add    esp,0x10
c001d5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f2:	05 0c 01 00 00       	add    eax,0x10c
c001d5f7:	83 ec 08             	sub    esp,0x8
c001d5fa:	68 be b8 02 c0       	push   0xc002b8be
c001d5ff:	50                   	push   eax
c001d600:	e8 2f 32 fe ff       	call   c0000834 <strcpy>
c001d605:	83 c4 10             	add    esp,0x10
c001d608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d60c:	83 c0 0c             	add    eax,0xc
c001d60f:	83 ec 08             	sub    esp,0x8
c001d612:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d616:	50                   	push   eax
c001d617:	e8 18 32 fe ff       	call   c0000834 <strcpy>
c001d61c:	83 c4 10             	add    esp,0x10
c001d61f:	83 ec 08             	sub    esp,0x8
c001d622:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d626:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d62a:	e8 1d fc ff ff       	call   c001d24c <Process::addArgs(char**)>
c001d62f:	83 c4 10             	add    esp,0x10
c001d632:	90                   	nop
c001d633:	83 c4 24             	add    esp,0x24
c001d636:	5b                   	pop    ebx
c001d637:	5e                   	pop    esi
c001d638:	c3                   	ret    

c001d639 <disableIRQs()>:
c001d639:	fa                   	cli    
c001d63a:	ff 05 ec 0f 03 c0    	inc    DWORD PTR ds:0xc0030fec
c001d640:	c3                   	ret    

c001d641 <getIRQNestingLevel()>:
c001d641:	a1 ec 0f 03 c0       	mov    eax,ds:0xc0030fec
c001d646:	c3                   	ret    

c001d647 <enableIRQs()>:
c001d647:	a1 ec 0f 03 c0       	mov    eax,ds:0xc0030fec
c001d64c:	48                   	dec    eax
c001d64d:	a3 ec 0f 03 c0       	mov    ds:0xc0030fec,eax
c001d652:	75 01                	jne    c001d655 <enableIRQs()+0xe>
c001d654:	fb                   	sti    
c001d655:	c3                   	ret    

c001d656 <lockScheduler()>:
c001d656:	eb e1                	jmp    c001d639 <disableIRQs()>

c001d658 <unlockScheduler()>:
c001d658:	eb ed                	jmp    c001d647 <enableIRQs()>

c001d65a <userModeEntryPoint(void*)>:
c001d65a:	83 ec 0c             	sub    esp,0xc
c001d65d:	e8 f6 ff ff ff       	call   c001d658 <unlockScheduler()>
c001d662:	fb                   	sti    
c001d663:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d668:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d66b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d671:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d675:	83 c4 0c             	add    esp,0xc
c001d678:	e9 ad 2c fe ff       	jmp    c000032a <goToUsermode>

c001d67d <lockStuff()>:
c001d67d:	e8 b7 ff ff ff       	call   c001d639 <disableIRQs()>
c001d682:	ff 05 e8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fe8
c001d688:	c3                   	ret    

c001d689 <taskStartupFunction>:
c001d689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d68e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d691:	c3                   	ret    

c001d692 <updateTimeUsed()>:
c001d692:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001d697:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d69d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d6a4:	74 50                	je     c001d6f6 <updateTimeUsed()+0x64>
c001d6a6:	57                   	push   edi
c001d6a7:	56                   	push   esi
c001d6a8:	53                   	push   ebx
c001d6a9:	0f 31                	rdtsc  
c001d6ab:	89 c1                	mov    ecx,eax
c001d6ad:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001d6b2:	2b 0d 18 10 03 c0    	sub    ecx,DWORD PTR ds:0xc0031018
c001d6b8:	89 d3                	mov    ebx,edx
c001d6ba:	89 0d 20 10 03 c0    	mov    DWORD PTR ds:0xc0031020,ecx
c001d6c0:	1b 1d 1c 10 03 c0    	sbb    ebx,DWORD PTR ds:0xc003101c
c001d6c6:	a3 18 10 03 c0       	mov    ds:0xc0031018,eax
c001d6cb:	89 1d 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,ebx
c001d6d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6d6:	89 15 2c 10 03 c0    	mov    DWORD PTR ds:0xc003102c,edx
c001d6dc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d6df:	89 15 1c 10 03 c0    	mov    DWORD PTR ds:0xc003101c,edx
c001d6e5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d6e8:	01 f1                	add    ecx,esi
c001d6ea:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d6ed:	11 fb                	adc    ebx,edi
c001d6ef:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d6f2:	5b                   	pop    ebx
c001d6f3:	5e                   	pop    esi
c001d6f4:	5f                   	pop    edi
c001d6f5:	c3                   	ret    
c001d6f6:	c3                   	ret    

c001d6f7 <switchToThread(ThreadControlBlock*)>:
c001d6f7:	53                   	push   ebx
c001d6f8:	83 ec 08             	sub    esp,0x8
c001d6fb:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c001d700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d704:	85 c0                	test   eax,eax
c001d706:	75 30                	jne    c001d738 <switchToThread(ThreadControlBlock*)+0x41>
c001d708:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d70b:	3c ff                	cmp    al,0xff
c001d70d:	74 25                	je     c001d734 <switchToThread(ThreadControlBlock*)+0x3d>
c001d70f:	0f b6 d0             	movzx  edx,al
c001d712:	b8 84 03 00 00       	mov    eax,0x384
c001d717:	29 d0                	sub    eax,edx
c001d719:	c1 e0 10             	shl    eax,0x10
c001d71c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d71f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d722:	e8 6b ff ff ff       	call   c001d692 <updateTimeUsed()>
c001d727:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d72b:	83 c4 08             	add    esp,0x8
c001d72e:	5b                   	pop    ebx
c001d72f:	e9 2e 2c fe ff       	jmp    c0000362 <switchToThreadASM>
c001d734:	31 c0                	xor    eax,eax
c001d736:	eb e7                	jmp    c001d71f <switchToThread(ThreadControlBlock*)+0x28>
c001d738:	c7 05 e4 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030fe4,0x1
c001d742:	83 c4 08             	add    esp,0x8
c001d745:	5b                   	pop    ebx
c001d746:	c3                   	ret    
c001d747:	90                   	nop

c001d748 <Semaphore::Semaphore(int)>:
c001d748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d74c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d750:	89 10                	mov    DWORD PTR [eax],edx
c001d752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d756:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d75d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d761:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d76c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d773:	90                   	nop
c001d774:	c3                   	ret    
c001d775:	90                   	nop

c001d776 <Mutex::Mutex()>:
c001d776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d77a:	6a 01                	push   0x1
c001d77c:	50                   	push   eax
c001d77d:	e8 c6 ff ff ff       	call   c001d748 <Semaphore::Semaphore(int)>
c001d782:	83 c4 08             	add    esp,0x8
c001d785:	90                   	nop
c001d786:	c3                   	ret    
c001d787:	90                   	nop

c001d788 <Process::createThread(void (*)(void*), void*, int)>:
c001d788:	55                   	push   ebp
c001d789:	31 c9                	xor    ecx,ecx
c001d78b:	57                   	push   edi
c001d78c:	56                   	push   esi
c001d78d:	53                   	push   ebx
c001d78e:	83 ec 1c             	sub    esp,0x1c
c001d791:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d795:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d79c:	89 f2                	mov    edx,esi
c001d79e:	0f b7 c2             	movzx  eax,dx
c001d7a1:	83 e2 01             	and    edx,0x1
c001d7a4:	74 14                	je     c001d7ba <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d7a6:	d1 f8                	sar    eax,1
c001d7a8:	41                   	inc    ecx
c001d7a9:	89 c2                	mov    edx,eax
c001d7ab:	83 f9 10             	cmp    ecx,0x10
c001d7ae:	75 ee                	jne    c001d79e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7b0:	83 c4 1c             	add    esp,0x1c
c001d7b3:	31 c0                	xor    eax,eax
c001d7b5:	5b                   	pop    ebx
c001d7b6:	5e                   	pop    esi
c001d7b7:	5f                   	pop    edi
c001d7b8:	5d                   	pop    ebp
c001d7b9:	c3                   	ret    
c001d7ba:	83 ec 08             	sub    esp,0x8
c001d7bd:	b8 01 00 00 00       	mov    eax,0x1
c001d7c2:	d3 e0                	shl    eax,cl
c001d7c4:	09 c6                	or     esi,eax
c001d7c6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d7cc:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7d3:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d7d6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d7d9:	01 ce                	add    esi,ecx
c001d7db:	89 f0                	mov    eax,esi
c001d7dd:	c1 e0 05             	shl    eax,0x5
c001d7e0:	01 c6                	add    esi,eax
c001d7e2:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d7e5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d7eb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d7f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d7f5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d7fb:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d801:	89 ca                	mov    edx,ecx
c001d803:	f7 da                	neg    edx
c001d805:	c1 e2 15             	shl    edx,0x15
c001d808:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d80e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d814:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d818:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d822:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d828:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d82c:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d832:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d83c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d846:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d84d:	50                   	push   eax
c001d84e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d852:	68 08 10 03 c0       	push   0xc0031008
c001d857:	e8 44 ab 00 00       	call   c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d863:	83 c4 1c             	add    esp,0x1c
c001d866:	5b                   	pop    ebx
c001d867:	5e                   	pop    esi
c001d868:	5f                   	pop    edi
c001d869:	5d                   	pop    ebp
c001d86a:	c3                   	ret    
c001d86b:	90                   	nop

c001d86c <Process::createUserThread()>:
c001d86c:	83 ec 0c             	sub    esp,0xc
c001d86f:	68 80 00 00 00       	push   0x80
c001d874:	6a 00                	push   0x0
c001d876:	68 5a d6 01 c0       	push   0xc001d65a
c001d87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d87f:	e8 04 ff ff ff       	call   c001d788 <Process::createThread(void (*)(void*), void*, int)>
c001d884:	83 c4 1c             	add    esp,0x1c
c001d887:	c3                   	ret    

c001d888 <setupMultitasking(void (*)())>:
c001d888:	56                   	push   esi
c001d889:	53                   	push   ebx
c001d88a:	53                   	push   ebx
c001d88b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d88f:	eb 10                	jmp    c001d8a1 <setupMultitasking(void (*)())+0x19>
c001d891:	83 ec 0c             	sub    esp,0xc
c001d894:	68 08 10 03 c0       	push   0xc0031008
c001d899:	e8 54 aa 00 00       	call   c00282f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d89e:	83 c4 10             	add    esp,0x10
c001d8a1:	83 ec 0c             	sub    esp,0xc
c001d8a4:	68 08 10 03 c0       	push   0xc0031008
c001d8a9:	e8 28 aa 00 00       	call   c00282d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8ae:	83 c4 10             	add    esp,0x10
c001d8b1:	84 c0                	test   al,al
c001d8b3:	74 dc                	je     c001d891 <setupMultitasking(void (*)())+0x9>
c001d8b5:	83 ec 0c             	sub    esp,0xc
c001d8b8:	68 3f 07 00 00       	push   0x73f
c001d8bd:	e8 78 1f ff ff       	call   c000f83a <malloc>
c001d8c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8c9:	89 c3                	mov    ebx,eax
c001d8cb:	6a 00                	push   0x0
c001d8cd:	68 c2 b8 02 c0       	push   0xc002b8c2
c001d8d2:	6a 01                	push   0x1
c001d8d4:	50                   	push   eax
c001d8d5:	e8 b0 fb ff ff       	call   c001d48a <Process::Process(bool, char const*, Process*, char**)>
c001d8da:	83 c4 18             	add    esp,0x18
c001d8dd:	89 1d 14 10 03 c0    	mov    DWORD PTR ds:0xc0031014,ebx
c001d8e3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d8e9:	68 e4 b9 02 c0       	push   0xc002b9e4
c001d8ee:	e8 16 52 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001d8f3:	58                   	pop    eax
c001d8f4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d8fa:	e8 cc 33 ff ff       	call   c0010ccb <setActiveTerminal(VgaText*)>
c001d8ff:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d907:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d90d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d910:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d91a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d920:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d926:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d930:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d93a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d944:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d94a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d950:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d95a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d960:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d96a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d970:	5a                   	pop    edx
c001d971:	59                   	pop    ecx
c001d972:	68 be b8 02 c0       	push   0xc002b8be
c001d977:	50                   	push   eax
c001d978:	e8 b7 2e fe ff       	call   c0000834 <strcpy>
c001d97d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d984:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d988:	83 c4 14             	add    esp,0x14
c001d98b:	5b                   	pop    ebx
c001d98c:	5e                   	pop    esi
c001d98d:	e9 c2 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d992 <schedule()>:
c001d992:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c001d997:	85 c0                	test   eax,eax
c001d999:	74 0b                	je     c001d9a6 <schedule()+0x14>
c001d99b:	c7 05 e4 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030fe4,0x1
c001d9a5:	c3                   	ret    
c001d9a6:	53                   	push   ebx
c001d9a7:	83 ec 14             	sub    esp,0x14
c001d9aa:	68 08 10 03 c0       	push   0xc0031008
c001d9af:	e8 22 a9 00 00       	call   c00282d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9b4:	83 c4 10             	add    esp,0x10
c001d9b7:	84 c0                	test   al,al
c001d9b9:	75 38                	jne    c001d9f3 <schedule()+0x61>
c001d9bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9c3:	4a                   	dec    edx
c001d9c4:	74 32                	je     c001d9f8 <schedule()+0x66>
c001d9c6:	83 ec 0c             	sub    esp,0xc
c001d9c9:	68 08 10 03 c0       	push   0xc0031008
c001d9ce:	e8 fb a8 00 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d9d3:	c7 04 24 08 10 03 c0 	mov    DWORD PTR [esp],0xc0031008
c001d9da:	89 c3                	mov    ebx,eax
c001d9dc:	e8 11 a9 00 00       	call   c00282f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d9e1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d9e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9eb:	e8 07 fd ff ff       	call   c001d6f7 <switchToThread(ThreadControlBlock*)>
c001d9f0:	83 c4 10             	add    esp,0x10
c001d9f3:	83 c4 08             	add    esp,0x8
c001d9f6:	5b                   	pop    ebx
c001d9f7:	c3                   	ret    
c001d9f8:	83 ec 08             	sub    esp,0x8
c001d9fb:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da02:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da08:	68 08 10 03 c0       	push   0xc0031008
c001da0d:	e8 8e a9 00 00       	call   c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da12:	83 c4 10             	add    esp,0x10
c001da15:	eb af                	jmp    c001d9c6 <schedule()+0x34>

c001da17 <unlockStuff()>:
c001da17:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c001da1c:	48                   	dec    eax
c001da1d:	a3 e8 0f 03 c0       	mov    ds:0xc0030fe8,eax
c001da22:	75 09                	jne    c001da2d <unlockStuff()+0x16>
c001da24:	a1 e4 0f 03 c0       	mov    eax,ds:0xc0030fe4
c001da29:	85 c0                	test   eax,eax
c001da2b:	75 05                	jne    c001da32 <unlockStuff()+0x1b>
c001da2d:	e9 15 fc ff ff       	jmp    c001d647 <enableIRQs()>
c001da32:	83 ec 0c             	sub    esp,0xc
c001da35:	c7 05 e4 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fe4,0x0
c001da3f:	e8 4e ff ff ff       	call   c001d992 <schedule()>
c001da44:	83 c4 0c             	add    esp,0xc
c001da47:	e9 fb fb ff ff       	jmp    c001d647 <enableIRQs()>

c001da4c <Semaphore::tryAcquire()>:
c001da4c:	83 ec 0c             	sub    esp,0xc
c001da4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da53:	e8 25 fc ff ff       	call   c001d67d <lockStuff()>
c001da58:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001da5b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001da5d:	7c 0b                	jl     c001da6a <Semaphore::tryAcquire()+0x1e>
c001da5f:	e8 b3 ff ff ff       	call   c001da17 <unlockStuff()>
c001da64:	31 c0                	xor    eax,eax
c001da66:	83 c4 0c             	add    esp,0xc
c001da69:	c3                   	ret    
c001da6a:	42                   	inc    edx
c001da6b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001da6e:	e8 a4 ff ff ff       	call   c001da17 <unlockStuff()>
c001da73:	b0 01                	mov    al,0x1
c001da75:	83 c4 0c             	add    esp,0xc
c001da78:	c3                   	ret    
c001da79:	90                   	nop

c001da7a <Semaphore::assertLocked(char const*)>:
c001da7a:	83 ec 0c             	sub    esp,0xc
c001da7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da85:	e8 f3 fb ff ff       	call   c001d67d <lockStuff()>
c001da8a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001da8c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001da8f:	7c 05                	jl     c001da96 <Semaphore::assertLocked(char const*)+0x1c>
c001da91:	83 c4 0c             	add    esp,0xc
c001da94:	eb 81                	jmp    c001da17 <unlockStuff()>
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	52                   	push   edx
c001da9a:	e8 4e c5 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001da9f:	83 c4 10             	add    esp,0x10
c001daa2:	83 c4 0c             	add    esp,0xc
c001daa5:	e9 6d ff ff ff       	jmp    c001da17 <unlockStuff()>

c001daaa <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001daaa:	83 ec 0c             	sub    esp,0xc
c001daad:	e8 8f fb ff ff       	call   c001d641 <getIRQNestingLevel()>
c001dab2:	83 ec 08             	sub    esp,0x8
c001dab5:	50                   	push   eax
c001dab6:	68 18 ba 02 c0       	push   0xc002ba18
c001dabb:	e8 49 50 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001dac0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dac9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dacc:	e8 c1 fe ff ff       	call   c001d992 <schedule()>
c001dad1:	e8 82 fb ff ff       	call   c001d658 <unlockScheduler()>
c001dad6:	e8 66 fb ff ff       	call   c001d641 <getIRQNestingLevel()>
c001dadb:	5a                   	pop    edx
c001dadc:	59                   	pop    ecx
c001dadd:	50                   	push   eax
c001dade:	68 4c ba 02 c0       	push   0xc002ba4c
c001dae3:	e8 21 50 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001dae8:	83 c4 1c             	add    esp,0x1c
c001daeb:	c3                   	ret    

c001daec <blockTask(TaskState)>:
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daf3:	e8 5e fb ff ff       	call   c001d656 <lockScheduler()>
c001daf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dafd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db00:	e8 8d fe ff ff       	call   c001d992 <schedule()>
c001db05:	83 c4 0c             	add    esp,0xc
c001db08:	e9 4b fb ff ff       	jmp    c001d658 <unlockScheduler()>

c001db0d <waitTask(int, int*, int)>:
c001db0d:	83 ec 18             	sub    esp,0x18
c001db10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db19:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001db1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db25:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001db28:	6a 07                	push   0x7
c001db2a:	e8 bd ff ff ff       	call   c001daec <blockTask(TaskState)>
c001db2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db34:	83 c4 10             	add    esp,0x10
c001db37:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001db3a:	85 d2                	test   edx,edx
c001db3c:	74 0a                	je     c001db48 <waitTask(int, int*, int)+0x3b>
c001db3e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001db41:	89 02                	mov    DWORD PTR [edx],eax
c001db43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db48:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001db4b:	83 c4 0c             	add    esp,0xc
c001db4e:	c3                   	ret    

c001db4f <nanoSleepUntil(unsigned long long)>:
c001db4f:	83 ec 0c             	sub    esp,0xc
c001db52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db5a:	3b 05 30 e1 02 c0    	cmp    eax,DWORD PTR ds:0xc002e130
c001db60:	89 d1                	mov    ecx,edx
c001db62:	1b 0d 34 e1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e134
c001db68:	73 04                	jae    c001db6e <nanoSleepUntil(unsigned long long)+0x1f>
c001db6a:	83 c4 0c             	add    esp,0xc
c001db6d:	c3                   	ret    
c001db6e:	e8 0a fb ff ff       	call   c001d67d <lockStuff()>
c001db73:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db79:	83 ec 08             	sub    esp,0x8
c001db7c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001db7f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001db82:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db88:	68 fc 0f 03 c0       	push   0xc0030ffc
c001db8d:	e8 0e a8 00 00       	call   c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db92:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001db99:	e8 4e ff ff ff       	call   c001daec <blockTask(TaskState)>
c001db9e:	83 c4 1c             	add    esp,0x1c
c001dba1:	e9 71 fe ff ff       	jmp    c001da17 <unlockStuff()>

c001dba6 <nanoSleep(unsigned long long)>:
c001dba6:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c001dbab:	8b 15 34 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e134
c001dbb1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dbb5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dbb9:	eb 94                	jmp    c001db4f <nanoSleepUntil(unsigned long long)>

c001dbbb <sleep(unsigned long long)>:
c001dbbb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dbc3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dbc8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dbcc:	01 ca                	add    edx,ecx
c001dbce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dbd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dbd6:	eb ce                	jmp    c001dba6 <nanoSleep(unsigned long long)>

c001dbd8 <Semaphore::acquire()>:
c001dbd8:	83 ec 0c             	sub    esp,0xc
c001dbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbdf:	e8 99 fa ff ff       	call   c001d67d <lockStuff()>
c001dbe4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dbe7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dbe9:	7d 0c                	jge    c001dbf7 <Semaphore::acquire()+0x1f>
c001dbeb:	42                   	inc    edx
c001dbec:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dbef:	83 c4 0c             	add    esp,0xc
c001dbf2:	e9 20 fe ff ff       	jmp    c001da17 <unlockStuff()>
c001dbf7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dbfd:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001dc04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc07:	85 d2                	test   edx,edx
c001dc09:	74 2a                	je     c001dc35 <Semaphore::acquire()+0x5d>
c001dc0b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001dc0e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc14:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001dc17:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dc1d:	83 ec 0c             	sub    esp,0xc
c001dc20:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dc23:	6a 05                	push   0x5
c001dc25:	e8 c2 fe ff ff       	call   c001daec <blockTask(TaskState)>
c001dc2a:	83 c4 10             	add    esp,0x10
c001dc2d:	83 c4 0c             	add    esp,0xc
c001dc30:	e9 e2 fd ff ff       	jmp    c001da17 <unlockStuff()>
c001dc35:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dc3b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dc3e:	eb d7                	jmp    c001dc17 <Semaphore::acquire()+0x3f>

c001dc40 <taskReturned>:
c001dc40:	83 ec 18             	sub    esp,0x18
c001dc43:	68 80 ba 02 c0       	push   0xc002ba80
c001dc48:	e8 a0 c3 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	83 ec 0c             	sub    esp,0xc
c001dc53:	6a 02                	push   0x2
c001dc55:	e8 92 fe ff ff       	call   c001daec <blockTask(TaskState)>
c001dc5a:	e8 f7 f9 ff ff       	call   c001d656 <lockScheduler()>
c001dc5f:	e8 2e fd ff ff       	call   c001d992 <schedule()>
c001dc64:	e8 ef f9 ff ff       	call   c001d658 <unlockScheduler()>
c001dc69:	83 c4 10             	add    esp,0x10
c001dc6c:	eb e2                	jmp    c001dc50 <taskReturned+0x10>

c001dc6e <unblockTask(ThreadControlBlock*)>:
c001dc6e:	53                   	push   ebx
c001dc6f:	83 ec 08             	sub    esp,0x8
c001dc72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc76:	e8 db f9 ff ff       	call   c001d656 <lockScheduler()>
c001dc7b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc7e:	85 c0                	test   eax,eax
c001dc80:	74 5c                	je     c001dcde <unblockTask(ThreadControlBlock*)+0x70>
c001dc82:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc85:	48                   	dec    eax
c001dc86:	74 31                	je     c001dcb9 <unblockTask(ThreadControlBlock*)+0x4b>
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	68 08 10 03 c0       	push   0xc0031008
c001dc90:	e8 39 a6 00 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	85 c0                	test   eax,eax
c001dc9a:	75 17                	jne    c001dcb3 <unblockTask(ThreadControlBlock*)+0x45>
c001dc9c:	eb 65                	jmp    c001dd03 <unblockTask(ThreadControlBlock*)+0x95>
c001dc9e:	83 ec 08             	sub    esp,0x8
c001dca1:	50                   	push   eax
c001dca2:	68 08 10 03 c0       	push   0xc0031008
c001dca7:	e8 fc a8 00 00       	call   c00285a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	85 c0                	test   eax,eax
c001dcb1:	74 50                	je     c001dd03 <unblockTask(ThreadControlBlock*)+0x95>
c001dcb3:	39 c3                	cmp    ebx,eax
c001dcb5:	75 e7                	jne    c001dc9e <unblockTask(ThreadControlBlock*)+0x30>
c001dcb7:	eb 1c                	jmp    c001dcd5 <unblockTask(ThreadControlBlock*)+0x67>
c001dcb9:	83 ec 0c             	sub    esp,0xc
c001dcbc:	68 70 bb 02 c0       	push   0xc002bb70
c001dcc1:	e8 43 4e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001dcc6:	c7 04 24 fc ba 02 c0 	mov    DWORD PTR [esp],0xc002bafc
c001dccd:	e8 37 4e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001dcd2:	83 c4 10             	add    esp,0x10
c001dcd5:	83 c4 08             	add    esp,0x8
c001dcd8:	5b                   	pop    ebx
c001dcd9:	e9 7a f9 ff ff       	jmp    c001d658 <unlockScheduler()>
c001dcde:	83 ec 0c             	sub    esp,0xc
c001dce1:	68 b4 ba 02 c0       	push   0xc002bab4
c001dce6:	e8 1e 4e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001dceb:	c7 04 24 fc ba 02 c0 	mov    DWORD PTR [esp],0xc002bafc
c001dcf2:	e8 12 4e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001dcf7:	83 c4 10             	add    esp,0x10
c001dcfa:	83 c4 08             	add    esp,0x8
c001dcfd:	5b                   	pop    ebx
c001dcfe:	e9 55 f9 ff ff       	jmp    c001d658 <unlockScheduler()>
c001dd03:	83 ec 08             	sub    esp,0x8
c001dd06:	53                   	push   ebx
c001dd07:	68 08 10 03 c0       	push   0xc0031008
c001dd0c:	e8 8f a6 00 00       	call   c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd11:	83 c4 10             	add    esp,0x10
c001dd14:	83 c4 08             	add    esp,0x8
c001dd17:	5b                   	pop    ebx
c001dd18:	e9 3b f9 ff ff       	jmp    c001d658 <unlockScheduler()>

c001dd1d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dd1d:	55                   	push   ebp
c001dd1e:	57                   	push   edi
c001dd1f:	56                   	push   esi
c001dd20:	53                   	push   ebx
c001dd21:	83 ec 1c             	sub    esp,0x1c
c001dd24:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd28:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd2b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dd31:	85 ff                	test   edi,edi
c001dd33:	7e 20                	jle    c001dd55 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dd35:	31 f6                	xor    esi,esi
c001dd37:	83 ec 0c             	sub    esp,0xc
c001dd3a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dd41:	46                   	inc    esi
c001dd42:	e8 03 1b ff ff       	call   c000f84a <free>
c001dd47:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd4a:	83 c4 10             	add    esp,0x10
c001dd4d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dd53:	7f e2                	jg     c001dd37 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dd55:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd5f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dd64:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dd67:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dd6a:	d3 c0                	rol    eax,cl
c001dd6c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dd73:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd76:	89 f7                	mov    edi,esi
c001dd78:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dd80:	0f 85 74 01 00 00    	jne    c001defa <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001dd86:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dd8c:	85 ed                	test   ebp,ebp
c001dd8e:	74 1b                	je     c001ddab <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dd90:	83 ec 0c             	sub    esp,0xc
c001dd93:	55                   	push   ebp
c001dd94:	e8 c1 bf ff ff       	call   c0019d5a <EnvVarContainer::~EnvVarContainer()>
c001dd99:	59                   	pop    ecx
c001dd9a:	5e                   	pop    esi
c001dd9b:	6a 0c                	push   0xc
c001dd9d:	55                   	push   ebp
c001dd9e:	e8 86 4c ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c001dda3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dda6:	83 c4 10             	add    esp,0x10
c001dda9:	89 f7                	mov    edi,esi
c001ddab:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ddb1:	85 c0                	test   eax,eax
c001ddb3:	0f 84 aa 00 00 00    	je     c001de63 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ddb9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ddbc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ddc0:	31 c9                	xor    ecx,ecx
c001ddc2:	eb 10                	jmp    c001ddd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ddc4:	41                   	inc    ecx
c001ddc5:	83 f9 10             	cmp    ecx,0x10
c001ddc8:	0f 84 95 00 00 00    	je     c001de63 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ddce:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ddd4:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dddb:	d3 fa                	sar    edx,cl
c001dddd:	83 e2 01             	and    edx,0x1
c001dde0:	74 e2                	je     c001ddc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dde2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dde5:	01 ca                	add    edx,ecx
c001dde7:	89 d5                	mov    ebp,edx
c001dde9:	c1 e5 05             	shl    ebp,0x5
c001ddec:	01 ea                	add    edx,ebp
c001ddee:	01 d0                	add    eax,edx
c001ddf0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ddf6:	83 fd 07             	cmp    ebp,0x7
c001ddf9:	75 c9                	jne    c001ddc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ddfb:	05 40 02 00 00       	add    eax,0x240
c001de00:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001de03:	83 fd ff             	cmp    ebp,0xffffffff
c001de06:	0f 8c 08 01 00 00    	jl     c001df14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001de0c:	0f 84 b9 01 00 00    	je     c001dfcb <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001de12:	85 ed                	test   ebp,ebp
c001de14:	0f 84 a0 01 00 00    	je     c001dfba <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001de1a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001de1c:	75 a6                	jne    c001ddc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de1e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de28:	01 d0                	add    eax,edx
c001de2a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001de2e:	83 ec 0c             	sub    esp,0xc
c001de31:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001de37:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de3a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de40:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001de47:	50                   	push   eax
c001de48:	e8 21 fe ff ff       	call   c001dc6e <unblockTask(ThreadControlBlock*)>
c001de4d:	83 c4 10             	add    esp,0x10
c001de50:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de57:	89 f7                	mov    edi,esi
c001de59:	41                   	inc    ecx
c001de5a:	83 f9 10             	cmp    ecx,0x10
c001de5d:	0f 85 6b ff ff ff    	jne    c001ddce <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001de63:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001de69:	85 c0                	test   eax,eax
c001de6b:	74 5d                	je     c001deca <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de6d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001de73:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001de79:	74 4f                	je     c001deca <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de7b:	83 ec 0c             	sub    esp,0xc
c001de7e:	68 08 10 03 c0       	push   0xc0031008
c001de83:	e8 46 a4 00 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de88:	c7 04 24 08 10 03 c0 	mov    DWORD PTR [esp],0xc0031008
c001de8f:	89 c7                	mov    edi,eax
c001de91:	e8 40 a4 00 00       	call   c00282d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	84 c0                	test   al,al
c001de9b:	0f 84 e4 00 00 00    	je     c001df85 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001dea1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dea4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001deaa:	85 d2                	test   edx,edx
c001deac:	74 0f                	je     c001debd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001deae:	83 ec 0c             	sub    esp,0xc
c001deb1:	8b 02                	mov    eax,DWORD PTR [edx]
c001deb3:	52                   	push   edx
c001deb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001deb7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001deba:	83 c4 10             	add    esp,0x10
c001debd:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001dec7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001deca:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ded0:	85 db                	test   ebx,ebx
c001ded2:	74 16                	je     c001deea <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ded4:	83 ec 0c             	sub    esp,0xc
c001ded7:	53                   	push   ebx
c001ded8:	e8 9b 41 ff ff       	call   c0012078 <VAS::~VAS()>
c001dedd:	58                   	pop    eax
c001dede:	5a                   	pop    edx
c001dedf:	6a 10                	push   0x10
c001dee1:	53                   	push   ebx
c001dee2:	e8 42 4b ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c001dee7:	83 c4 10             	add    esp,0x10
c001deea:	83 ec 0c             	sub    esp,0xc
c001deed:	68 c9 b8 02 c0       	push   0xc002b8c9
c001def2:	e8 12 4c ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001def7:	83 c4 10             	add    esp,0x10
c001defa:	83 ec 08             	sub    esp,0x8
c001defd:	68 3f 07 00 00       	push   0x73f
c001df02:	68 d7 b8 02 c0       	push   0xc002b8d7
c001df07:	e8 fd 4b ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001df0c:	83 c4 2c             	add    esp,0x2c
c001df0f:	5b                   	pop    ebx
c001df10:	5e                   	pop    esi
c001df11:	5f                   	pop    edi
c001df12:	5d                   	pop    ebp
c001df13:	c3                   	ret    
c001df14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df18:	83 ec 0c             	sub    esp,0xc
c001df1b:	68 b4 bb 02 c0       	push   0xc002bbb4
c001df20:	e8 c8 c0 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001df25:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df28:	83 c4 10             	add    esp,0x10
c001df2b:	89 f7                	mov    edi,esi
c001df2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df31:	e9 8e fe ff ff       	jmp    c001ddc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df36:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001df3c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001df42:	75 1c                	jne    c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001df44:	83 ec 0c             	sub    esp,0xc
c001df47:	68 1c bc 02 c0       	push   0xc002bc1c
c001df4c:	e8 b8 4b ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001df51:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001df58:	e8 8f fb ff ff       	call   c001daec <blockTask(TaskState)>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	83 ec 08             	sub    esp,0x8
c001df63:	56                   	push   esi
c001df64:	68 08 10 03 c0       	push   0xc0031008
c001df69:	e8 32 a4 00 00       	call   c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df6e:	c7 04 24 08 10 03 c0 	mov    DWORD PTR [esp],0xc0031008
c001df75:	e8 54 a3 00 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df7a:	83 c4 10             	add    esp,0x10
c001df7d:	39 f8                	cmp    eax,edi
c001df7f:	0f 84 1c ff ff ff    	je     c001dea1 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001df85:	83 ec 0c             	sub    esp,0xc
c001df88:	68 08 10 03 c0       	push   0xc0031008
c001df8d:	e8 3c a3 00 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df92:	c7 04 24 08 10 03 c0 	mov    DWORD PTR [esp],0xc0031008
c001df99:	89 c6                	mov    esi,eax
c001df9b:	e8 52 a3 00 00       	call   c00282f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfa0:	83 c4 10             	add    esp,0x10
c001dfa3:	39 f3                	cmp    ebx,esi
c001dfa5:	74 b9                	je     c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dfa7:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001dfaa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfad:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001dfb3:	75 ab                	jne    c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dfb5:	e9 7c ff ff ff       	jmp    c001df36 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001dfba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfbe:	83 ec 0c             	sub    esp,0xc
c001dfc1:	68 e8 bb 02 c0       	push   0xc002bbe8
c001dfc6:	e9 55 ff ff ff       	jmp    c001df20 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001dfcb:	8b 36                	mov    esi,DWORD PTR [esi]
c001dfcd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfd1:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dfd4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfd7:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001dfdd:	01 d7                	add    edi,edx
c001dfdf:	89 f8                	mov    eax,edi
c001dfe1:	e9 44 fe ff ff       	jmp    c001de2a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001dfe6 <cleanerTaskFunction(void*)>:
c001dfe6:	53                   	push   ebx
c001dfe7:	83 ec 08             	sub    esp,0x8
c001dfea:	e8 69 f6 ff ff       	call   c001d658 <unlockScheduler()>
c001dfef:	e8 62 f6 ff ff       	call   c001d656 <lockScheduler()>
c001dff4:	80 3d cc 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fcc,0x0
c001dffb:	0f 85 8e 00 00 00    	jne    c001e08f <cleanerTaskFunction(void*)+0xa9>
c001e001:	83 ec 0c             	sub    esp,0xc
c001e004:	6a 02                	push   0x2
c001e006:	e8 9f fa ff ff       	call   c001daaa <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e00b:	83 c4 10             	add    esp,0x10
c001e00e:	c6 05 cc 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fcc,0x0
c001e015:	e8 63 f6 ff ff       	call   c001d67d <lockStuff()>
c001e01a:	e8 37 f6 ff ff       	call   c001d656 <lockScheduler()>
c001e01f:	83 ec 0c             	sub    esp,0xc
c001e022:	68 f0 0f 03 c0       	push   0xc0030ff0
c001e027:	e8 aa a2 00 00       	call   c00282d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	84 c0                	test   al,al
c001e031:	75 40                	jne    c001e073 <cleanerTaskFunction(void*)+0x8d>
c001e033:	83 ec 0c             	sub    esp,0xc
c001e036:	68 f0 0f 03 c0       	push   0xc0030ff0
c001e03b:	e8 8e a2 00 00       	call   c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e040:	c7 04 24 f0 0f 03 c0 	mov    DWORD PTR [esp],0xc0030ff0
c001e047:	89 c3                	mov    ebx,eax
c001e049:	e8 a4 a2 00 00       	call   c00282f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e04e:	c7 04 24 ed b8 02 c0 	mov    DWORD PTR [esp],0xc002b8ed
c001e055:	e8 af 4a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e05a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e05d:	e8 bb fc ff ff       	call   c001dd1d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e062:	c7 04 24 06 b9 02 c0 	mov    DWORD PTR [esp],0xc002b906
c001e069:	e8 9b 4a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e06e:	83 c4 10             	add    esp,0x10
c001e071:	eb ac                	jmp    c001e01f <cleanerTaskFunction(void*)+0x39>
c001e073:	e8 e0 f5 ff ff       	call   c001d658 <unlockScheduler()>
c001e078:	e8 9a f9 ff ff       	call   c001da17 <unlockStuff()>
c001e07d:	e8 d4 f5 ff ff       	call   c001d656 <lockScheduler()>
c001e082:	80 3d cc 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fcc,0x0
c001e089:	0f 84 72 ff ff ff    	je     c001e001 <cleanerTaskFunction(void*)+0x1b>
c001e08f:	e8 c4 f5 ff ff       	call   c001d658 <unlockScheduler()>
c001e094:	e9 75 ff ff ff       	jmp    c001e00e <cleanerTaskFunction(void*)+0x28>

c001e099 <terminateTask(int)>:
c001e099:	83 ec 14             	sub    esp,0x14
c001e09c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e0a4:	83 c0 0c             	add    eax,0xc
c001e0a7:	50                   	push   eax
c001e0a8:	68 44 bc 02 c0       	push   0xc002bc44
c001e0ad:	e8 57 4a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e0b2:	e8 c6 f5 ff ff       	call   c001d67d <lockStuff()>
c001e0b7:	e8 9a f5 ff ff       	call   c001d656 <lockScheduler()>
c001e0bc:	c7 04 24 19 b9 02 c0 	mov    DWORD PTR [esp],0xc002b919
c001e0c3:	e8 41 4a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e0c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0d1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e0d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0d9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e0dc:	5a                   	pop    edx
c001e0dd:	59                   	pop    ecx
c001e0de:	50                   	push   eax
c001e0df:	68 f0 0f 03 c0       	push   0xc0030ff0
c001e0e4:	e8 b7 a2 00 00       	call   c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0ee:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e0f5:	c7 04 24 33 b9 02 c0 	mov    DWORD PTR [esp],0xc002b933
c001e0fc:	e8 08 4a ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e101:	83 c4 10             	add    esp,0x10
c001e104:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e109:	85 c0                	test   eax,eax
c001e10b:	74 5a                	je     c001e167 <terminateTask(int)+0xce>
c001e10d:	83 ec 0c             	sub    esp,0xc
c001e110:	68 4d b9 02 c0       	push   0xc002b94d
c001e115:	e8 ef 49 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e11a:	58                   	pop    eax
c001e11b:	c6 05 cc 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fcc,0x1
c001e122:	ff 35 c8 0f 03 c0    	push   DWORD PTR ds:0xc0030fc8
c001e128:	e8 41 fb ff ff       	call   c001dc6e <unblockTask(ThreadControlBlock*)>
c001e12d:	c7 04 24 67 b9 02 c0 	mov    DWORD PTR [esp],0xc002b967
c001e134:	e8 d0 49 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e139:	83 c4 10             	add    esp,0x10
c001e13c:	e8 17 f5 ff ff       	call   c001d658 <unlockScheduler()>
c001e141:	e8 d1 f8 ff ff       	call   c001da17 <unlockStuff()>
c001e146:	83 ec 0c             	sub    esp,0xc
c001e149:	68 9f b9 02 c0       	push   0xc002b99f
c001e14e:	e8 b6 49 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e153:	83 c4 10             	add    esp,0x10
c001e156:	e8 fb f4 ff ff       	call   c001d656 <lockScheduler()>
c001e15b:	e8 32 f8 ff ff       	call   c001d992 <schedule()>
c001e160:	e8 f3 f4 ff ff       	call   c001d658 <unlockScheduler()>
c001e165:	eb ef                	jmp    c001e156 <terminateTask(int)+0xbd>
c001e167:	83 ec 0c             	sub    esp,0xc
c001e16a:	68 81 b9 02 c0       	push   0xc002b981
c001e16f:	e8 95 49 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e174:	83 c4 10             	add    esp,0x10
c001e177:	eb c3                	jmp    c001e13c <terminateTask(int)+0xa3>

c001e179 <Thr::terminateFromIRQ(int)>:
c001e179:	83 ec 18             	sub    esp,0x18
c001e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e180:	e8 14 ff ff ff       	call   c001e099 <terminateTask(int)>
c001e185:	90                   	nop

c001e186 <Semaphore::release()>:
c001e186:	83 ec 0c             	sub    esp,0xc
c001e189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18d:	e8 eb f4 ff ff       	call   c001d67d <lockStuff()>
c001e192:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e195:	85 d2                	test   edx,edx
c001e197:	74 1a                	je     c001e1b3 <Semaphore::release()+0x2d>
c001e199:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e1a2:	52                   	push   edx
c001e1a3:	e8 c6 fa ff ff       	call   c001dc6e <unblockTask(ThreadControlBlock*)>
c001e1a8:	83 c4 10             	add    esp,0x10
c001e1ab:	83 c4 0c             	add    esp,0xc
c001e1ae:	e9 64 f8 ff ff       	jmp    c001da17 <unlockStuff()>
c001e1b3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e1b6:	83 c4 0c             	add    esp,0xc
c001e1b9:	e9 59 f8 ff ff       	jmp    c001da17 <unlockStuff()>

c001e1be <__static_initialization_and_destruction_0(int, int)>:
c001e1be:	83 ec 0c             	sub    esp,0xc
c001e1c1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e1c6:	0f 85 88 00 00 00    	jne    c001e254 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1cc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e1d4:	75 7e                	jne    c001e254 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	68 08 10 03 c0       	push   0xc0031008
c001e1de:	e8 6d a3 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e1e3:	83 c4 10             	add    esp,0x10
c001e1e6:	83 ec 04             	sub    esp,0x4
c001e1e9:	68 c4 c9 02 c0       	push   0xc002c9c4
c001e1ee:	68 08 10 03 c0       	push   0xc0031008
c001e1f3:	68 10 85 02 c0       	push   0xc0028510
c001e1f8:	e8 a6 47 ff ff       	call   c00129a3 <__cxa_atexit>
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	68 fc 0f 03 c0       	push   0xc0030ffc
c001e208:	e8 43 a3 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e20d:	83 c4 10             	add    esp,0x10
c001e210:	83 ec 04             	sub    esp,0x4
c001e213:	68 c4 c9 02 c0       	push   0xc002c9c4
c001e218:	68 fc 0f 03 c0       	push   0xc0030ffc
c001e21d:	68 10 85 02 c0       	push   0xc0028510
c001e222:	e8 7c 47 ff ff       	call   c00129a3 <__cxa_atexit>
c001e227:	83 c4 10             	add    esp,0x10
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	68 f0 0f 03 c0       	push   0xc0030ff0
c001e232:	e8 19 a3 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e237:	83 c4 10             	add    esp,0x10
c001e23a:	83 ec 04             	sub    esp,0x4
c001e23d:	68 c4 c9 02 c0       	push   0xc002c9c4
c001e242:	68 f0 0f 03 c0       	push   0xc0030ff0
c001e247:	68 10 85 02 c0       	push   0xc0028510
c001e24c:	e8 52 47 ff ff       	call   c00129a3 <__cxa_atexit>
c001e251:	83 c4 10             	add    esp,0x10
c001e254:	90                   	nop
c001e255:	83 c4 0c             	add    esp,0xc
c001e258:	c3                   	ret    

c001e259 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e259:	83 ec 0c             	sub    esp,0xc
c001e25c:	83 ec 08             	sub    esp,0x8
c001e25f:	68 ff ff 00 00       	push   0xffff
c001e264:	6a 01                	push   0x1
c001e266:	e8 53 ff ff ff       	call   c001e1be <__static_initialization_and_destruction_0(int, int)>
c001e26b:	83 c4 10             	add    esp,0x10
c001e26e:	83 c4 0c             	add    esp,0xc
c001e271:	c3                   	ret    

c001e272 <Vm::inbv(unsigned short)>:
c001e272:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e276:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e27b:	75 06                	jne    c001e283 <Vm::inbv(unsigned short)+0x11>
c001e27d:	a0 4c 10 03 c0       	mov    al,ds:0xc003104c
c001e282:	c3                   	ret    
c001e283:	ec                   	in     al,dx
c001e284:	c3                   	ret    

c001e285 <Vm::outbv(unsigned short, unsigned char)>:
c001e285:	53                   	push   ebx
c001e286:	83 ec 08             	sub    esp,0x8
c001e289:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e28d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e291:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e296:	75 38                	jne    c001e2d0 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e298:	0f b6 c3             	movzx  eax,bl
c001e29b:	51                   	push   ecx
c001e29c:	51                   	push   ecx
c001e29d:	50                   	push   eax
c001e29e:	68 63 bc 02 c0       	push   0xc002bc63
c001e2a3:	e8 61 48 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e2a8:	8b 15 4c 10 03 c0    	mov    edx,DWORD PTR ds:0xc003104c
c001e2ae:	83 c4 10             	add    esp,0x10
c001e2b1:	8d 42 01             	lea    eax,[edx+0x1]
c001e2b4:	88 9a 60 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefa0],bl
c001e2ba:	a3 4c 10 03 c0       	mov    ds:0xc003104c,eax
c001e2bf:	83 f8 20             	cmp    eax,0x20
c001e2c2:	75 0f                	jne    c001e2d3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e2c4:	c7 05 4c 10 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003104c,0x1f
c001e2ce:	eb 03                	jmp    c001e2d3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e2d0:	88 d8                	mov    al,bl
c001e2d2:	ee                   	out    dx,al
c001e2d3:	83 c4 08             	add    esp,0x8
c001e2d6:	5b                   	pop    ebx
c001e2d7:	c3                   	ret    

c001e2d8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e2d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e2dd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e2e2:	c1 e0 04             	shl    eax,0x4
c001e2e5:	01 d0                	add    eax,edx
c001e2e7:	c3                   	ret    

c001e2e8 <Vm::getSegment(unsigned int)>:
c001e2e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2ec:	c1 e8 10             	shr    eax,0x10
c001e2ef:	c3                   	ret    

c001e2f0 <Vm::getOffset(unsigned int)>:
c001e2f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2f4:	c3                   	ret    

c001e2f5 <Vm::mainloop2()>:
c001e2f5:	83 ec 0c             	sub    esp,0xc
c001e2f8:	e8 59 f3 ff ff       	call   c001d656 <lockScheduler()>
c001e2fd:	83 ec 0c             	sub    esp,0xc
c001e300:	c6 05 45 10 03 c0 01 	mov    BYTE PTR ds:0xc0031045,0x1
c001e307:	6a 02                	push   0x2
c001e309:	e8 9c f7 ff ff       	call   c001daaa <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e30e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e313:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e317:	52                   	push   edx
c001e318:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e31c:	52                   	push   edx
c001e31d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e321:	52                   	push   edx
c001e322:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e326:	50                   	push   eax
c001e327:	e8 ce 1f fe ff       	call   c00002fa <goToVM86>
c001e32c:	83 c4 2c             	add    esp,0x2c
c001e32f:	c3                   	ret    

c001e330 <Vm::mainVm8086Loop(void*)>:
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	e8 20 f3 ff ff       	call   c001d658 <unlockScheduler()>
c001e338:	83 c4 0c             	add    esp,0xc
c001e33b:	eb b8                	jmp    c001e2f5 <Vm::mainloop2()>

c001e33d <Vm::mainloop3(unsigned long)>:
c001e33d:	53                   	push   ebx
c001e33e:	83 ec 08             	sub    esp,0x8
c001e341:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e345:	e8 0c f3 ff ff       	call   c001d656 <lockScheduler()>
c001e34a:	83 ec 0c             	sub    esp,0xc
c001e34d:	89 1d 40 10 03 c0    	mov    DWORD PTR ds:0xc0031040,ebx
c001e353:	6a 02                	push   0x2
c001e355:	c6 05 44 10 03 c0 01 	mov    BYTE PTR ds:0xc0031044,0x1
c001e35c:	e8 49 f7 ff ff       	call   c001daaa <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e361:	83 c4 18             	add    esp,0x18
c001e364:	5b                   	pop    ebx
c001e365:	eb 8e                	jmp    c001e2f5 <Vm::mainloop2()>

c001e367 <Vm::initialise8086()>:
c001e367:	83 ec 0c             	sub    esp,0xc
c001e36a:	68 80 00 00 00       	push   0x80
c001e36f:	6a 00                	push   0x0
c001e371:	68 30 e3 01 c0       	push   0xc001e330
c001e376:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c001e37c:	e8 07 f4 ff ff       	call   c001d788 <Process::createThread(void (*)(void*), void*, int)>
c001e381:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e388:	a3 48 10 03 c0       	mov    ds:0xc0031048,eax
c001e38d:	68 00 01 00 00       	push   0x100
c001e392:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001e397:	6a 00                	push   0x0
c001e399:	6a 00                	push   0x0
c001e39b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e3a1:	e8 32 41 ff ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e3a6:	83 c4 2c             	add    esp,0x2c
c001e3a9:	c3                   	ret    

c001e3aa <Vm::finish8086()>:
c001e3aa:	53                   	push   ebx
c001e3ab:	83 ec 08             	sub    esp,0x8
c001e3ae:	e8 a3 f2 ff ff       	call   c001d656 <lockScheduler()>
c001e3b3:	80 3d 44 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031044,0x0
c001e3ba:	75 0c                	jne    c001e3c8 <Vm::finish8086()+0x1e>
c001e3bc:	e8 d1 f5 ff ff       	call   c001d992 <schedule()>
c001e3c1:	e8 92 f2 ff ff       	call   c001d658 <unlockScheduler()>
c001e3c6:	eb e6                	jmp    c001e3ae <Vm::finish8086()+0x4>
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	8b 1d 40 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031040
c001e3d1:	ff 35 48 10 03 c0    	push   DWORD PTR ds:0xc0031048
c001e3d7:	c6 05 44 10 03 c0 00 	mov    BYTE PTR ds:0xc0031044,0x0
c001e3de:	e8 8b f8 ff ff       	call   c001dc6e <unblockTask(ThreadControlBlock*)>
c001e3e3:	e8 70 f2 ff ff       	call   c001d658 <unlockScheduler()>
c001e3e8:	89 d8                	mov    eax,ebx
c001e3ea:	83 c4 18             	add    esp,0x18
c001e3ed:	5b                   	pop    ebx
c001e3ee:	c3                   	ret    

c001e3ef <Vm::getOutput8086(unsigned char*)>:
c001e3ef:	83 ec 10             	sub    esp,0x10
c001e3f2:	ff 35 4c 10 03 c0    	push   DWORD PTR ds:0xc003104c
c001e3f8:	68 60 10 03 c0       	push   0xc0031060
c001e3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e401:	e8 3e 23 fe ff       	call   c0000744 <memcpy>
c001e406:	a1 4c 10 03 c0       	mov    eax,ds:0xc003104c
c001e40b:	c7 05 4c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003104c,0x0
c001e415:	83 c4 1c             	add    esp,0x1c
c001e418:	c3                   	ret    

c001e419 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e419:	55                   	push   ebp
c001e41a:	57                   	push   edi
c001e41b:	56                   	push   esi
c001e41c:	53                   	push   ebx
c001e41d:	83 ec 2c             	sub    esp,0x2c
c001e420:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e424:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e428:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e42c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e430:	e8 21 f2 ff ff       	call   c001d656 <lockScheduler()>
c001e435:	a0 45 10 03 c0       	mov    al,ds:0xc0031045
c001e43a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e43e:	84 c0                	test   al,al
c001e440:	75 0c                	jne    c001e44e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e442:	e8 4b f5 ff ff       	call   c001d992 <schedule()>
c001e447:	e8 0c f2 ff ff       	call   c001d658 <unlockScheduler()>
c001e44c:	eb e2                	jmp    c001e430 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e44e:	a1 48 10 03 c0       	mov    eax,ds:0xc0031048
c001e453:	c7 05 4c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003104c,0x0
c001e45d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e461:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e465:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e469:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e46d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e471:	50                   	push   eax
c001e472:	6a 20                	push   0x20
c001e474:	6a 00                	push   0x0
c001e476:	68 60 10 03 c0       	push   0xc0031060
c001e47b:	e8 f8 22 fe ff       	call   c0000778 <memset>
c001e480:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e487:	e8 ae 13 ff ff       	call   c000f83a <malloc>
c001e48c:	83 c4 0c             	add    esp,0xc
c001e48f:	89 c7                	mov    edi,eax
c001e491:	ff 35 14 10 03 c0    	push   DWORD PTR ds:0xc0031014
c001e497:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e49b:	50                   	push   eax
c001e49c:	e8 c1 4b ff ff       	call   c0013062 <File::File(char const*, Process*)>
c001e4a1:	83 c4 10             	add    esp,0x10
c001e4a4:	85 ff                	test   edi,edi
c001e4a6:	75 0a                	jne    c001e4b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	68 7f bc 02 c0       	push   0xc002bc7f
c001e4b0:	eb 27                	jmp    c001e4d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e4b2:	50                   	push   eax
c001e4b3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e4b7:	50                   	push   eax
c001e4b8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e4bc:	50                   	push   eax
c001e4bd:	57                   	push   edi
c001e4be:	e8 af 4e ff ff       	call   c0013372 <File::stat(unsigned long long*, bool*)>
c001e4c3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e4c8:	83 c4 10             	add    esp,0x10
c001e4cb:	89 e8                	mov    eax,ebp
c001e4cd:	84 c0                	test   al,al
c001e4cf:	74 19                	je     c001e4ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e4d1:	83 ec 0c             	sub    esp,0xc
c001e4d4:	68 93 bc 02 c0       	push   0xc002bc93
c001e4d9:	e8 0f bb ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001e4de:	31 ed                	xor    ebp,ebp
c001e4e0:	e8 73 f1 ff ff       	call   c001d658 <unlockScheduler()>
c001e4e5:	83 c4 10             	add    esp,0x10
c001e4e8:	eb 75                	jmp    c001e55f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e4ea:	50                   	push   eax
c001e4eb:	50                   	push   eax
c001e4ec:	6a 01                	push   0x1
c001e4ee:	57                   	push   edi
c001e4ef:	e8 d2 4b ff ff       	call   c00130c6 <File::open(FileOpenMode)>
c001e4f4:	83 c4 10             	add    esp,0x10
c001e4f7:	85 c0                	test   eax,eax
c001e4f9:	74 17                	je     c001e512 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	68 ac bc 02 c0       	push   0xc002bcac
c001e503:	e8 e5 ba ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001e508:	e8 4b f1 ff ff       	call   c001d658 <unlockScheduler()>
c001e50d:	83 c4 10             	add    esp,0x10
c001e510:	eb 4d                	jmp    c001e55f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e512:	0f b7 f6             	movzx  esi,si
c001e515:	50                   	push   eax
c001e516:	0f b7 db             	movzx  ebx,bx
c001e519:	50                   	push   eax
c001e51a:	56                   	push   esi
c001e51b:	53                   	push   ebx
c001e51c:	e8 b7 fd ff ff       	call   c001e2d8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e521:	5a                   	pop    edx
c001e522:	8b 17                	mov    edx,DWORD PTR [edi]
c001e524:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e528:	51                   	push   ecx
c001e529:	50                   	push   eax
c001e52a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e52e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e532:	57                   	push   edi
c001e533:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e536:	83 c4 14             	add    esp,0x14
c001e539:	57                   	push   edi
c001e53a:	e8 e5 4b ff ff       	call   c0013124 <File::close()>
c001e53f:	c6 05 45 10 03 c0 00 	mov    BYTE PTR ds:0xc0031045,0x0
c001e546:	e8 0d f1 ff ff       	call   c001d658 <unlockScheduler()>
c001e54b:	59                   	pop    ecx
c001e54c:	ff 35 48 10 03 c0    	push   DWORD PTR ds:0xc0031048
c001e552:	e8 17 f7 ff ff       	call   c001dc6e <unblockTask(ThreadControlBlock*)>
c001e557:	83 c4 10             	add    esp,0x10
c001e55a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e55f:	83 c4 2c             	add    esp,0x2c
c001e562:	89 e8                	mov    eax,ebp
c001e564:	5b                   	pop    ebx
c001e565:	5e                   	pop    esi
c001e566:	5f                   	pop    edi
c001e567:	5d                   	pop    ebp
c001e568:	c3                   	ret    

c001e569 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e569:	57                   	push   edi
c001e56a:	56                   	push   esi
c001e56b:	53                   	push   ebx
c001e56c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e574:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e578:	83 e8 06             	sub    eax,0x6
c001e57b:	0f b7 c0             	movzx  eax,ax
c001e57e:	50                   	push   eax
c001e57f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e584:	50                   	push   eax
c001e585:	e8 4e fd ff ff       	call   c001e2d8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e58a:	5a                   	pop    edx
c001e58b:	5e                   	pop    esi
c001e58c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e58f:	8d 56 fa             	lea    edx,[esi-0x6]
c001e592:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e598:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e59b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e59e:	83 c2 02             	add    edx,0x2
c001e5a1:	66 89 10             	mov    WORD PTR [eax],dx
c001e5a4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e5a7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e5ab:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e5ae:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e5b2:	89 d6                	mov    esi,edx
c001e5b4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e5ba:	66 81 e6 ff fd       	and    si,0xfdff
c001e5bf:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e5c3:	74 07                	je     c001e5cc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e5c5:	89 d6                	mov    esi,edx
c001e5c7:	66 81 ce 00 02       	or     si,0x200
c001e5cc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e5d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5d5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e5d9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e5e1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e5e4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e5ec:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e5ef:	5b                   	pop    ebx
c001e5f0:	5e                   	pop    esi
c001e5f1:	5f                   	pop    edi
c001e5f2:	c3                   	ret    

c001e5f3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e5f3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e5f8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e5fd:	c1 e0 04             	shl    eax,0x4
c001e600:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e603:	c3                   	ret    

c001e604 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e604:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e609:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e60e:	c1 e0 04             	shl    eax,0x4
c001e611:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e615:	c3                   	ret    

c001e616 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e616:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e61b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e620:	c1 e0 04             	shl    eax,0x4
c001e623:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e626:	c3                   	ret    

c001e627 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e627:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e62c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e631:	c1 e0 04             	shl    eax,0x4
c001e634:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e638:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e63b:	c3                   	ret    

c001e63c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e63c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e641:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e646:	c1 e0 04             	shl    eax,0x4
c001e649:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e64d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e651:	c3                   	ret    

c001e652 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e652:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e657:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e65c:	c1 e0 04             	shl    eax,0x4
c001e65f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e663:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e666:	c3                   	ret    

c001e667 <Vm::faultHandler(regs*)>:
c001e667:	55                   	push   ebp
c001e668:	57                   	push   edi
c001e669:	56                   	push   esi
c001e66a:	53                   	push   ebx
c001e66b:	83 ec 1c             	sub    esp,0x1c
c001e66e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e672:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e675:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e678:	0f b7 c1             	movzx  eax,cx
c001e67b:	50                   	push   eax
c001e67c:	0f b7 c3             	movzx  eax,bx
c001e67f:	c1 e3 04             	shl    ebx,0x4
c001e682:	50                   	push   eax
c001e683:	e8 50 fc ff ff       	call   c001e2d8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e688:	5a                   	pop    edx
c001e689:	89 c5                	mov    ebp,eax
c001e68b:	5e                   	pop    esi
c001e68c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e690:	50                   	push   eax
c001e691:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e695:	50                   	push   eax
c001e696:	e8 3d fc ff ff       	call   c001e2d8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e69b:	01 cb                	add    ebx,ecx
c001e69d:	89 c6                	mov    esi,eax
c001e69f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e6a3:	50                   	push   eax
c001e6a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e6a8:	50                   	push   eax
c001e6a9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e6ad:	50                   	push   eax
c001e6ae:	55                   	push   ebp
c001e6af:	53                   	push   ebx
c001e6b0:	b3 06                	mov    bl,0x6
c001e6b2:	68 c5 bc 02 c0       	push   0xc002bcc5
c001e6b7:	e8 4d 44 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e6bc:	83 c4 20             	add    esp,0x20
c001e6bf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e6c4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e6c9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e6cd:	3c 9d                	cmp    al,0x9d
c001e6cf:	0f 84 d7 02 00 00    	je     c001e9ac <Vm::faultHandler(regs*)+0x345>
c001e6d5:	0f 87 a3 00 00 00    	ja     c001e77e <Vm::faultHandler(regs*)+0x117>
c001e6db:	3c 66                	cmp    al,0x66
c001e6dd:	0f 84 15 02 00 00    	je     c001e8f8 <Vm::faultHandler(regs*)+0x291>
c001e6e3:	77 5f                	ja     c001e744 <Vm::faultHandler(regs*)+0xdd>
c001e6e5:	3c 36                	cmp    al,0x36
c001e6e7:	0f 84 f1 01 00 00    	je     c001e8de <Vm::faultHandler(regs*)+0x277>
c001e6ed:	77 28                	ja     c001e717 <Vm::faultHandler(regs*)+0xb0>
c001e6ef:	3c 26                	cmp    al,0x26
c001e6f1:	0f 84 99 01 00 00    	je     c001e890 <Vm::faultHandler(regs*)+0x229>
c001e6f7:	3c 2e                	cmp    al,0x2e
c001e6f9:	0f 85 3b 07 00 00    	jne    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e6ff:	83 ec 0c             	sub    esp,0xc
c001e702:	31 db                	xor    ebx,ebx
c001e704:	68 da bc 02 c0       	push   0xc002bcda
c001e709:	e8 fb 43 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e70e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e711:	83 c4 10             	add    esp,0x10
c001e714:	45                   	inc    ebp
c001e715:	eb b2                	jmp    c001e6c9 <Vm::faultHandler(regs*)+0x62>
c001e717:	3c 64                	cmp    al,0x64
c001e719:	0f 84 8b 01 00 00    	je     c001e8aa <Vm::faultHandler(regs*)+0x243>
c001e71f:	0f 87 9f 01 00 00    	ja     c001e8c4 <Vm::faultHandler(regs*)+0x25d>
c001e725:	3c 3e                	cmp    al,0x3e
c001e727:	0f 85 0d 07 00 00    	jne    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e72d:	83 ec 0c             	sub    esp,0xc
c001e730:	b3 01                	mov    bl,0x1
c001e732:	68 de bc 02 c0       	push   0xc002bcde
c001e737:	e8 cd 43 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e73c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e73f:	83 c4 10             	add    esp,0x10
c001e742:	eb d0                	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e744:	3c 6d                	cmp    al,0x6d
c001e746:	0f 84 af 03 00 00    	je     c001eafb <Vm::faultHandler(regs*)+0x494>
c001e74c:	77 15                	ja     c001e763 <Vm::faultHandler(regs*)+0xfc>
c001e74e:	3c 67                	cmp    al,0x67
c001e750:	0f 84 bf 01 00 00    	je     c001e915 <Vm::faultHandler(regs*)+0x2ae>
c001e756:	3c 6c                	cmp    al,0x6c
c001e758:	0f 84 3f 03 00 00    	je     c001ea9d <Vm::faultHandler(regs*)+0x436>
c001e75e:	e9 d7 06 00 00       	jmp    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e763:	3c 6f                	cmp    al,0x6f
c001e765:	0f 84 a4 04 00 00    	je     c001ec0f <Vm::faultHandler(regs*)+0x5a8>
c001e76b:	0f 82 11 04 00 00    	jb     c001eb82 <Vm::faultHandler(regs*)+0x51b>
c001e771:	3c 9c                	cmp    al,0x9c
c001e773:	0f 84 ba 01 00 00    	je     c001e933 <Vm::faultHandler(regs*)+0x2cc>
c001e779:	e9 bc 06 00 00       	jmp    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e77e:	3c ec                	cmp    al,0xec
c001e780:	0f 84 24 06 00 00    	je     c001edaa <Vm::faultHandler(regs*)+0x743>
c001e786:	0f 87 93 00 00 00    	ja     c001e81f <Vm::faultHandler(regs*)+0x1b8>
c001e78c:	3c e4                	cmp    al,0xe4
c001e78e:	0f 84 5c 05 00 00    	je     c001ecf0 <Vm::faultHandler(regs*)+0x689>
c001e794:	77 6a                	ja     c001e800 <Vm::faultHandler(regs*)+0x199>
c001e796:	3c cd                	cmp    al,0xcd
c001e798:	0f 84 7e 02 00 00    	je     c001ea1c <Vm::faultHandler(regs*)+0x3b5>
c001e79e:	3c cf                	cmp    al,0xcf
c001e7a0:	0f 85 94 06 00 00    	jne    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e7a6:	83 ec 0c             	sub    esp,0xc
c001e7a9:	68 22 bd 02 c0       	push   0xc002bd22
c001e7ae:	e8 56 43 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e7b3:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e7b6:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e7b9:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e7bd:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e7c0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e7c4:	0d 00 02 02 00       	or     eax,0x20200
c001e7c9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e7cc:	56                   	push   esi
c001e7cd:	53                   	push   ebx
c001e7ce:	52                   	push   edx
c001e7cf:	68 28 bd 02 c0       	push   0xc002bd28
c001e7d4:	e8 30 43 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e7d9:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e7dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7e3:	66 c1 e8 09          	shr    ax,0x9
c001e7e7:	83 e0 01             	and    eax,0x1
c001e7ea:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e7ed:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e7f0:	83 c0 06             	add    eax,0x6
c001e7f3:	25 ff ff 00 00       	and    eax,0xffff
c001e7f8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e7fb:	e9 95 02 00 00       	jmp    c001ea95 <Vm::faultHandler(regs*)+0x42e>
c001e800:	3c e6                	cmp    al,0xe6
c001e802:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e806:	0f 84 4e 05 00 00    	je     c001ed5a <Vm::faultHandler(regs*)+0x6f3>
c001e80c:	0f 82 0a 05 00 00    	jb     c001ed1c <Vm::faultHandler(regs*)+0x6b5>
c001e812:	3c e7                	cmp    al,0xe7
c001e814:	0f 84 69 05 00 00    	je     c001ed83 <Vm::faultHandler(regs*)+0x71c>
c001e81a:	e9 1b 06 00 00       	jmp    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e81f:	3c ef                	cmp    al,0xef
c001e821:	0f 84 e6 05 00 00    	je     c001ee0d <Vm::faultHandler(regs*)+0x7a6>
c001e827:	77 37                	ja     c001e860 <Vm::faultHandler(regs*)+0x1f9>
c001e829:	3c ed                	cmp    al,0xed
c001e82b:	0f 84 a3 05 00 00    	je     c001edd4 <Vm::faultHandler(regs*)+0x76d>
c001e831:	3c ee                	cmp    al,0xee
c001e833:	0f 85 01 06 00 00    	jne    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e839:	52                   	push   edx
c001e83a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e83d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e840:	68 c3 bd 02 c0       	push   0xc002bdc3
c001e845:	e8 bf 42 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e84a:	59                   	pop    ecx
c001e84b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e84f:	5b                   	pop    ebx
c001e850:	50                   	push   eax
c001e851:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e855:	50                   	push   eax
c001e856:	e8 2a fa ff ff       	call   c001e285 <Vm::outbv(unsigned short, unsigned char)>
c001e85b:	e9 a5 05 00 00       	jmp    c001ee05 <Vm::faultHandler(regs*)+0x79e>
c001e860:	3c fa                	cmp    al,0xfa
c001e862:	0f 84 f7 01 00 00    	je     c001ea5f <Vm::faultHandler(regs*)+0x3f8>
c001e868:	3c fb                	cmp    al,0xfb
c001e86a:	0f 84 0a 02 00 00    	je     c001ea7a <Vm::faultHandler(regs*)+0x413>
c001e870:	3c f3                	cmp    al,0xf3
c001e872:	0f 85 c2 05 00 00    	jne    c001ee3a <Vm::faultHandler(regs*)+0x7d3>
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	68 fb bc 02 c0       	push   0xc002bcfb
c001e880:	e8 84 42 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e885:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e888:	83 c4 10             	add    esp,0x10
c001e88b:	e9 84 fe ff ff       	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e890:	83 ec 0c             	sub    esp,0xc
c001e893:	b3 02                	mov    bl,0x2
c001e895:	68 d6 bc 02 c0       	push   0xc002bcd6
c001e89a:	e8 6a 42 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e89f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e8a2:	83 c4 10             	add    esp,0x10
c001e8a5:	e9 6a fe ff ff       	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	b3 03                	mov    bl,0x3
c001e8af:	68 e2 bc 02 c0       	push   0xc002bce2
c001e8b4:	e8 50 42 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e8b9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e8bc:	83 c4 10             	add    esp,0x10
c001e8bf:	e9 50 fe ff ff       	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e8c4:	83 ec 0c             	sub    esp,0xc
c001e8c7:	b3 04                	mov    bl,0x4
c001e8c9:	68 e6 bc 02 c0       	push   0xc002bce6
c001e8ce:	e8 36 42 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e8d3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e8d6:	83 c4 10             	add    esp,0x10
c001e8d9:	e9 36 fe ff ff       	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e8de:	83 ec 0c             	sub    esp,0xc
c001e8e1:	b3 05                	mov    bl,0x5
c001e8e3:	68 ea bc 02 c0       	push   0xc002bcea
c001e8e8:	e8 1c 42 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e8ed:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e8f0:	83 c4 10             	add    esp,0x10
c001e8f3:	e9 1c fe ff ff       	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	68 ee bc 02 c0       	push   0xc002bcee
c001e900:	e8 04 42 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e90b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e910:	e9 ff fd ff ff       	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e915:	50                   	push   eax
c001e916:	50                   	push   eax
c001e917:	6a 01                	push   0x1
c001e919:	68 f3 bc 02 c0       	push   0xc002bcf3
c001e91e:	e8 e6 41 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e923:	83 c4 10             	add    esp,0x10
c001e926:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e929:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e92e:	e9 e1 fd ff ff       	jmp    c001e714 <Vm::faultHandler(regs*)+0xad>
c001e933:	83 ec 0c             	sub    esp,0xc
c001e936:	68 01 bd 02 c0       	push   0xc002bd01
c001e93b:	e8 c9 41 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e940:	83 c4 10             	add    esp,0x10
c001e943:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e946:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e94b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e94e:	74 2f                	je     c001e97f <Vm::faultHandler(regs*)+0x318>
c001e950:	83 ea 04             	sub    edx,0x4
c001e953:	25 ff 0d 00 00       	and    eax,0xdff
c001e958:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e95e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e961:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e964:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e96a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e96e:	0f 84 bf 04 00 00    	je     c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001e974:	80 cc 02             	or     ah,0x2
c001e977:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e97a:	e9 b4 04 00 00       	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001e97f:	83 ea 02             	sub    edx,0x2
c001e982:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e988:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e98b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e98f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e995:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e999:	74 05                	je     c001e9a0 <Vm::faultHandler(regs*)+0x339>
c001e99b:	80 cc 02             	or     ah,0x2
c001e99e:	eb 03                	jmp    c001e9a3 <Vm::faultHandler(regs*)+0x33c>
c001e9a0:	80 e4 fd             	and    ah,0xfd
c001e9a3:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e9a7:	e9 87 04 00 00       	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001e9ac:	83 ec 0c             	sub    esp,0xc
c001e9af:	68 08 bd 02 c0       	push   0xc002bd08
c001e9b4:	e8 50 41 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001e9b9:	83 c4 10             	add    esp,0x10
c001e9bc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e9c1:	74 28                	je     c001e9eb <Vm::faultHandler(regs*)+0x384>
c001e9c3:	8b 06                	mov    eax,DWORD PTR [esi]
c001e9c5:	25 ff 0d 00 00       	and    eax,0xdff
c001e9ca:	0d 00 02 02 00       	or     eax,0x20200
c001e9cf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e9d2:	8b 06                	mov    eax,DWORD PTR [esi]
c001e9d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9da:	c1 e8 09             	shr    eax,0x9
c001e9dd:	83 e0 01             	and    eax,0x1
c001e9e0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9e3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e9e6:	83 c0 04             	add    eax,0x4
c001e9e9:	eb 24                	jmp    c001ea0f <Vm::faultHandler(regs*)+0x3a8>
c001e9eb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e9ee:	0d 00 02 02 00       	or     eax,0x20200
c001e9f3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e9f6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e9f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9ff:	66 c1 e8 09          	shr    ax,0x9
c001ea03:	83 e0 01             	and    eax,0x1
c001ea06:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea09:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ea0c:	83 c0 02             	add    eax,0x2
c001ea0f:	25 ff ff 00 00       	and    eax,0xffff
c001ea14:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ea17:	e9 17 04 00 00       	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001ea1c:	53                   	push   ebx
c001ea1d:	53                   	push   ebx
c001ea1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea22:	50                   	push   eax
c001ea23:	68 0e bd 02 c0       	push   0xc002bd0e
c001ea28:	e8 dc 40 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ea2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea31:	83 c4 10             	add    esp,0x10
c001ea34:	3c ee                	cmp    al,0xee
c001ea36:	75 10                	jne    c001ea48 <Vm::faultHandler(regs*)+0x3e1>
c001ea38:	83 ec 0c             	sub    esp,0xc
c001ea3b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ea3e:	e8 fa f8 ff ff       	call   c001e33d <Vm::mainloop3(unsigned long)>
c001ea43:	e9 c0 03 00 00       	jmp    c001ee08 <Vm::faultHandler(regs*)+0x7a1>
c001ea48:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001ea4c:	83 ec 0c             	sub    esp,0xc
c001ea4f:	53                   	push   ebx
c001ea50:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001ea54:	53                   	push   ebx
c001ea55:	55                   	push   ebp
c001ea56:	50                   	push   eax
c001ea57:	57                   	push   edi
c001ea58:	e8 0c fb ff ff       	call   c001e569 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ea5d:	eb 36                	jmp    c001ea95 <Vm::faultHandler(regs*)+0x42e>
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	68 18 bd 02 c0       	push   0xc002bd18
c001ea67:	e8 9d 40 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ea6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea71:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea75:	e9 8b 03 00 00       	jmp    c001ee05 <Vm::faultHandler(regs*)+0x79e>
c001ea7a:	83 ec 0c             	sub    esp,0xc
c001ea7d:	68 1d bd 02 c0       	push   0xc002bd1d
c001ea82:	e8 82 40 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ea87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea8c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ea90:	e9 70 03 00 00       	jmp    c001ee05 <Vm::faultHandler(regs*)+0x79e>
c001ea95:	83 c4 20             	add    esp,0x20
c001ea98:	e9 99 03 00 00       	jmp    c001ee36 <Vm::faultHandler(regs*)+0x7cf>
c001ea9d:	83 ec 0c             	sub    esp,0xc
c001eaa0:	68 5b bd 02 c0       	push   0xc002bd5b
c001eaa5:	e8 5f 40 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001eaaa:	83 c4 10             	add    esp,0x10
c001eaad:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eab0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eab5:	74 0d                	je     c001eac4 <Vm::faultHandler(regs*)+0x45d>
c001eab7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eabe:	0f 87 9e 01 00 00    	ja     c001ec62 <Vm::faultHandler(regs*)+0x5fb>
c001eac4:	83 ec 0c             	sub    esp,0xc
c001eac7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eacb:	0f b7 db             	movzx  ebx,bx
c001eace:	50                   	push   eax
c001eacf:	e8 9e f7 ff ff       	call   c001e272 <Vm::inbv(unsigned short)>
c001ead4:	83 c4 0c             	add    esp,0xc
c001ead7:	0f b6 c0             	movzx  eax,al
c001eada:	50                   	push   eax
c001eadb:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001eadf:	50                   	push   eax
c001eae0:	53                   	push   ebx
c001eae1:	e8 41 fb ff ff       	call   c001e627 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eae6:	83 c4 10             	add    esp,0x10
c001eae9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eaec:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eaf0:	74 03                	je     c001eaf5 <Vm::faultHandler(regs*)+0x48e>
c001eaf2:	48                   	dec    eax
c001eaf3:	eb 01                	jmp    c001eaf6 <Vm::faultHandler(regs*)+0x48f>
c001eaf5:	40                   	inc    eax
c001eaf6:	0f b7 c0             	movzx  eax,ax
c001eaf9:	eb 7f                	jmp    c001eb7a <Vm::faultHandler(regs*)+0x513>
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	68 8d bd 02 c0       	push   0xc002bd8d
c001eb03:	e8 01 40 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001eb08:	83 c4 10             	add    esp,0x10
c001eb0b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eb0e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eb13:	74 0d                	je     c001eb22 <Vm::faultHandler(regs*)+0x4bb>
c001eb15:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eb1c:	0f 87 40 01 00 00    	ja     c001ec62 <Vm::faultHandler(regs*)+0x5fb>
c001eb22:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001eb25:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001eb29:	0f b7 db             	movzx  ebx,bx
c001eb2c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb31:	74 20                	je     c001eb53 <Vm::faultHandler(regs*)+0x4ec>
c001eb33:	ed                   	in     eax,dx
c001eb34:	51                   	push   ecx
c001eb35:	50                   	push   eax
c001eb36:	56                   	push   esi
c001eb37:	53                   	push   ebx
c001eb38:	e8 15 fb ff ff       	call   c001e652 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eb3d:	83 c4 10             	add    esp,0x10
c001eb40:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eb43:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eb47:	74 05                	je     c001eb4e <Vm::faultHandler(regs*)+0x4e7>
c001eb49:	83 e8 04             	sub    eax,0x4
c001eb4c:	eb 27                	jmp    c001eb75 <Vm::faultHandler(regs*)+0x50e>
c001eb4e:	83 c0 04             	add    eax,0x4
c001eb51:	eb 22                	jmp    c001eb75 <Vm::faultHandler(regs*)+0x50e>
c001eb53:	66 ed                	in     ax,dx
c001eb55:	0f b7 c0             	movzx  eax,ax
c001eb58:	52                   	push   edx
c001eb59:	50                   	push   eax
c001eb5a:	56                   	push   esi
c001eb5b:	53                   	push   ebx
c001eb5c:	e8 db fa ff ff       	call   c001e63c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eb61:	83 c4 10             	add    esp,0x10
c001eb64:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eb67:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eb6b:	74 05                	je     c001eb72 <Vm::faultHandler(regs*)+0x50b>
c001eb6d:	83 e8 02             	sub    eax,0x2
c001eb70:	eb 03                	jmp    c001eb75 <Vm::faultHandler(regs*)+0x50e>
c001eb72:	83 c0 02             	add    eax,0x2
c001eb75:	25 ff ff 00 00       	and    eax,0xffff
c001eb7a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001eb7d:	e9 b1 02 00 00       	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001eb82:	83 ec 0c             	sub    esp,0xc
c001eb85:	4b                   	dec    ebx
c001eb86:	68 93 bd 02 c0       	push   0xc002bd93
c001eb8b:	e8 79 3f ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001eb90:	83 c4 10             	add    esp,0x10
c001eb93:	80 fb 05             	cmp    bl,0x5
c001eb96:	77 0a                	ja     c001eba2 <Vm::faultHandler(regs*)+0x53b>
c001eb98:	0f b6 db             	movzx  ebx,bl
c001eb9b:	ff 24 9d 04 be 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd41fc]
c001eba2:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001eba6:	eb 1b                	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x55c>
c001eba8:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ebac:	eb 15                	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x55c>
c001ebae:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ebb2:	eb 0f                	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x55c>
c001ebb4:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ebb8:	eb 09                	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x55c>
c001ebba:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ebbd:	eb 04                	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x55c>
c001ebbf:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ebc3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ebc8:	74 0d                	je     c001ebd7 <Vm::faultHandler(regs*)+0x570>
c001ebca:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ebd1:	0f 87 8b 00 00 00    	ja     c001ec62 <Vm::faultHandler(regs*)+0x5fb>
c001ebd7:	53                   	push   ebx
c001ebd8:	53                   	push   ebx
c001ebd9:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ebdd:	52                   	push   edx
c001ebde:	50                   	push   eax
c001ebdf:	e8 0f fa ff ff       	call   c001e5f3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ebe4:	5e                   	pop    esi
c001ebe5:	0f b6 c0             	movzx  eax,al
c001ebe8:	5d                   	pop    ebp
c001ebe9:	50                   	push   eax
c001ebea:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ebee:	50                   	push   eax
c001ebef:	e8 91 f6 ff ff       	call   c001e285 <Vm::outbv(unsigned short, unsigned char)>
c001ebf4:	83 c4 10             	add    esp,0x10
c001ebf7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ebfa:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ebfe:	74 03                	je     c001ec03 <Vm::faultHandler(regs*)+0x59c>
c001ec00:	48                   	dec    eax
c001ec01:	eb 01                	jmp    c001ec04 <Vm::faultHandler(regs*)+0x59d>
c001ec03:	40                   	inc    eax
c001ec04:	0f b7 c0             	movzx  eax,ax
c001ec07:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ec0a:	e9 24 02 00 00       	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	4b                   	dec    ebx
c001ec13:	68 93 bd 02 c0       	push   0xc002bd93
c001ec18:	e8 ec 3e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ec1d:	83 c4 10             	add    esp,0x10
c001ec20:	80 fb 05             	cmp    bl,0x5
c001ec23:	77 0a                	ja     c001ec2f <Vm::faultHandler(regs*)+0x5c8>
c001ec25:	0f b6 db             	movzx  ebx,bl
c001ec28:	ff 24 9d 1c be 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd41e4]
c001ec2f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ec33:	eb 1b                	jmp    c001ec50 <Vm::faultHandler(regs*)+0x5e9>
c001ec35:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ec39:	eb 15                	jmp    c001ec50 <Vm::faultHandler(regs*)+0x5e9>
c001ec3b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ec3f:	eb 0f                	jmp    c001ec50 <Vm::faultHandler(regs*)+0x5e9>
c001ec41:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ec45:	eb 09                	jmp    c001ec50 <Vm::faultHandler(regs*)+0x5e9>
c001ec47:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ec4a:	eb 04                	jmp    c001ec50 <Vm::faultHandler(regs*)+0x5e9>
c001ec4c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ec50:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001ec53:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ec58:	74 39                	je     c001ec93 <Vm::faultHandler(regs*)+0x62c>
c001ec5a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001ec60:	76 31                	jbe    c001ec93 <Vm::faultHandler(regs*)+0x62c>
c001ec62:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ec66:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ec6a:	51                   	push   ecx
c001ec6b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ec6f:	51                   	push   ecx
c001ec70:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ec74:	51                   	push   ecx
c001ec75:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ec79:	51                   	push   ecx
c001ec7a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ec7e:	52                   	push   edx
c001ec7f:	50                   	push   eax
c001ec80:	50                   	push   eax
c001ec81:	68 60 bd 02 c0       	push   0xc002bd60
c001ec86:	e8 7e 3e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ec8b:	83 c4 20             	add    esp,0x20
c001ec8e:	e9 fb 01 00 00       	jmp    c001ee8e <Vm::faultHandler(regs*)+0x827>
c001ec93:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001ec96:	0f b7 d3             	movzx  edx,bx
c001ec99:	81 e6 00 04 00 00    	and    esi,0x400
c001ec9f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001eca2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eca7:	74 1d                	je     c001ecc6 <Vm::faultHandler(regs*)+0x65f>
c001eca9:	51                   	push   ecx
c001ecaa:	51                   	push   ecx
c001ecab:	52                   	push   edx
c001ecac:	50                   	push   eax
c001ecad:	e8 64 f9 ff ff       	call   c001e616 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ecb2:	83 c4 10             	add    esp,0x10
c001ecb5:	89 ea                	mov    edx,ebp
c001ecb7:	ef                   	out    dx,eax
c001ecb8:	85 f6                	test   esi,esi
c001ecba:	74 05                	je     c001ecc1 <Vm::faultHandler(regs*)+0x65a>
c001ecbc:	83 eb 04             	sub    ebx,0x4
c001ecbf:	eb 21                	jmp    c001ece2 <Vm::faultHandler(regs*)+0x67b>
c001ecc1:	83 c3 04             	add    ebx,0x4
c001ecc4:	eb 1c                	jmp    c001ece2 <Vm::faultHandler(regs*)+0x67b>
c001ecc6:	51                   	push   ecx
c001ecc7:	51                   	push   ecx
c001ecc8:	52                   	push   edx
c001ecc9:	50                   	push   eax
c001ecca:	e8 35 f9 ff ff       	call   c001e604 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eccf:	83 c4 10             	add    esp,0x10
c001ecd2:	89 ea                	mov    edx,ebp
c001ecd4:	66 ef                	out    dx,ax
c001ecd6:	85 f6                	test   esi,esi
c001ecd8:	74 05                	je     c001ecdf <Vm::faultHandler(regs*)+0x678>
c001ecda:	83 eb 02             	sub    ebx,0x2
c001ecdd:	eb 03                	jmp    c001ece2 <Vm::faultHandler(regs*)+0x67b>
c001ecdf:	83 c3 02             	add    ebx,0x2
c001ece2:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001ece8:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001eceb:	e9 43 01 00 00       	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001ecf0:	53                   	push   ebx
c001ecf1:	53                   	push   ebx
c001ecf2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecf6:	50                   	push   eax
c001ecf7:	68 99 bd 02 c0       	push   0xc002bd99
c001ecfc:	e8 08 3e ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ed01:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ed08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed0c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed0f:	e8 5e f5 ff ff       	call   c001e272 <Vm::inbv(unsigned short)>
c001ed14:	0f b6 c0             	movzx  eax,al
c001ed17:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ed1a:	eb 5e                	jmp    c001ed7a <Vm::faultHandler(regs*)+0x713>
c001ed1c:	51                   	push   ecx
c001ed1d:	51                   	push   ecx
c001ed1e:	53                   	push   ebx
c001ed1f:	68 9f bd 02 c0       	push   0xc002bd9f
c001ed24:	e8 e0 3d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ed29:	83 c4 10             	add    esp,0x10
c001ed2c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed31:	74 07                	je     c001ed3a <Vm::faultHandler(regs*)+0x6d3>
c001ed33:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ed37:	ed                   	in     eax,dx
c001ed38:	eb 14                	jmp    c001ed4e <Vm::faultHandler(regs*)+0x6e7>
c001ed3a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001ed3d:	66 31 db             	xor    bx,bx
c001ed40:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001ed43:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ed47:	66 ed                	in     ax,dx
c001ed49:	0f b7 c0             	movzx  eax,ax
c001ed4c:	09 d8                	or     eax,ebx
c001ed4e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ed51:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ed55:	e9 dc 00 00 00       	jmp    c001ee36 <Vm::faultHandler(regs*)+0x7cf>
c001ed5a:	50                   	push   eax
c001ed5b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ed5e:	53                   	push   ebx
c001ed5f:	68 a5 bd 02 c0       	push   0xc002bda5
c001ed64:	e8 a0 3d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ed69:	58                   	pop    eax
c001ed6a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ed6e:	5a                   	pop    edx
c001ed6f:	50                   	push   eax
c001ed70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed74:	50                   	push   eax
c001ed75:	e8 0b f5 ff ff       	call   c001e285 <Vm::outbv(unsigned short, unsigned char)>
c001ed7a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ed7e:	e9 85 00 00 00       	jmp    c001ee08 <Vm::faultHandler(regs*)+0x7a1>
c001ed83:	50                   	push   eax
c001ed84:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ed87:	53                   	push   ebx
c001ed88:	68 ae bd 02 c0       	push   0xc002bdae
c001ed8d:	e8 77 3d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ed92:	83 c4 10             	add    esp,0x10
c001ed95:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ed99:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed9e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001eda1:	74 03                	je     c001eda6 <Vm::faultHandler(regs*)+0x73f>
c001eda3:	ef                   	out    dx,eax
c001eda4:	eb ab                	jmp    c001ed51 <Vm::faultHandler(regs*)+0x6ea>
c001eda6:	66 ef                	out    dx,ax
c001eda8:	eb a7                	jmp    c001ed51 <Vm::faultHandler(regs*)+0x6ea>
c001edaa:	55                   	push   ebp
c001edab:	55                   	push   ebp
c001edac:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001edaf:	68 b7 bd 02 c0       	push   0xc002bdb7
c001edb4:	e8 50 3d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001edb9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001edc0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001edc4:	89 04 24             	mov    DWORD PTR [esp],eax
c001edc7:	e8 a6 f4 ff ff       	call   c001e272 <Vm::inbv(unsigned short)>
c001edcc:	0f b6 c0             	movzx  eax,al
c001edcf:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001edd2:	eb 31                	jmp    c001ee05 <Vm::faultHandler(regs*)+0x79e>
c001edd4:	56                   	push   esi
c001edd5:	56                   	push   esi
c001edd6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001edd9:	68 bd bd 02 c0       	push   0xc002bdbd
c001edde:	e8 26 3d ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ede3:	83 c4 10             	add    esp,0x10
c001ede6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ede9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001edee:	74 03                	je     c001edf3 <Vm::faultHandler(regs*)+0x78c>
c001edf0:	ed                   	in     eax,dx
c001edf1:	eb 0d                	jmp    c001ee00 <Vm::faultHandler(regs*)+0x799>
c001edf3:	66 ed                	in     ax,dx
c001edf5:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001edf8:	0f b7 c0             	movzx  eax,ax
c001edfb:	66 31 d2             	xor    dx,dx
c001edfe:	09 d0                	or     eax,edx
c001ee00:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ee03:	eb 2e                	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001ee05:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee08:	83 c4 10             	add    esp,0x10
c001ee0b:	eb 29                	jmp    c001ee36 <Vm::faultHandler(regs*)+0x7cf>
c001ee0d:	50                   	push   eax
c001ee0e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee11:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee14:	68 cc bd 02 c0       	push   0xc002bdcc
c001ee19:	e8 eb 3c ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ee1e:	83 c4 10             	add    esp,0x10
c001ee21:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ee24:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee29:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ee2c:	74 03                	je     c001ee31 <Vm::faultHandler(regs*)+0x7ca>
c001ee2e:	ef                   	out    dx,eax
c001ee2f:	eb 02                	jmp    c001ee33 <Vm::faultHandler(regs*)+0x7cc>
c001ee31:	66 ef                	out    dx,ax
c001ee33:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee36:	b0 01                	mov    al,0x1
c001ee38:	eb 56                	jmp    c001ee90 <Vm::faultHandler(regs*)+0x829>
c001ee3a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ee3e:	51                   	push   ecx
c001ee3f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ee43:	51                   	push   ecx
c001ee44:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ee48:	51                   	push   ecx
c001ee49:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ee4d:	51                   	push   ecx
c001ee4e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ee52:	52                   	push   edx
c001ee53:	50                   	push   eax
c001ee54:	50                   	push   eax
c001ee55:	68 d5 bd 02 c0       	push   0xc002bdd5
c001ee5a:	e8 aa 3c ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c001ee5f:	83 c4 20             	add    esp,0x20
c001ee62:	83 ec 0c             	sub    esp,0xc
c001ee65:	6a 60                	push   0x60
c001ee67:	e8 06 f4 ff ff       	call   c001e272 <Vm::inbv(unsigned short)>
c001ee6c:	83 c4 10             	add    esp,0x10
c001ee6f:	3c 1c                	cmp    al,0x1c
c001ee71:	74 04                	je     c001ee77 <Vm::faultHandler(regs*)+0x810>
c001ee73:	3c 5a                	cmp    al,0x5a
c001ee75:	75 eb                	jne    c001ee62 <Vm::faultHandler(regs*)+0x7fb>
c001ee77:	3c 1c                	cmp    al,0x1c
c001ee79:	74 04                	je     c001ee7f <Vm::faultHandler(regs*)+0x818>
c001ee7b:	3c 5a                	cmp    al,0x5a
c001ee7d:	75 0f                	jne    c001ee8e <Vm::faultHandler(regs*)+0x827>
c001ee7f:	83 ec 0c             	sub    esp,0xc
c001ee82:	6a 60                	push   0x60
c001ee84:	e8 e9 f3 ff ff       	call   c001e272 <Vm::inbv(unsigned short)>
c001ee89:	83 c4 10             	add    esp,0x10
c001ee8c:	eb e9                	jmp    c001ee77 <Vm::faultHandler(regs*)+0x810>
c001ee8e:	31 c0                	xor    eax,eax
c001ee90:	83 c4 1c             	add    esp,0x1c
c001ee93:	5b                   	pop    ebx
c001ee94:	5e                   	pop    esi
c001ee95:	5f                   	pop    edi
c001ee96:	5d                   	pop    ebp
c001ee97:	c3                   	ret    

c001ee98 <Vm::fpuInternalTo32(unsigned long long)>:
c001ee98:	57                   	push   edi
c001ee99:	56                   	push   esi
c001ee9a:	53                   	push   ebx
c001ee9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	89 d6                	mov    esi,edx
c001eea5:	89 d7                	mov    edi,edx
c001eea7:	89 c1                	mov    ecx,eax
c001eea9:	c1 ef 14             	shr    edi,0x14
c001eeac:	89 d3                	mov    ebx,edx
c001eeae:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001eeb4:	31 d2                	xor    edx,edx
c001eeb6:	89 f8                	mov    eax,edi
c001eeb8:	81 e6 00 00 00 80    	and    esi,0x80000000
c001eebe:	bf ff 00 00 00       	mov    edi,0xff
c001eec3:	05 80 fc ff ff       	add    eax,0xfffffc80
c001eec8:	83 d2 ff             	adc    edx,0xffffffff
c001eecb:	39 c7                	cmp    edi,eax
c001eecd:	bf 00 00 00 00       	mov    edi,0x0
c001eed2:	19 d7                	sbb    edi,edx
c001eed4:	72 15                	jb     c001eeeb <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001eed6:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001eeda:	c1 e0 17             	shl    eax,0x17
c001eedd:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001eee3:	09 f1                	or     ecx,esi
c001eee5:	09 c1                	or     ecx,eax
c001eee7:	89 cf                	mov    edi,ecx
c001eee9:	eb 02                	jmp    c001eeed <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001eeeb:	31 ff                	xor    edi,edi
c001eeed:	89 f8                	mov    eax,edi
c001eeef:	5b                   	pop    ebx
c001eef0:	5e                   	pop    esi
c001eef1:	5f                   	pop    edi
c001eef2:	c3                   	ret    

c001eef3 <Vm::fpuInternalTo64(unsigned long long)>:
c001eef3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eefb:	c3                   	ret    

c001eefc <Vm::fpu32ToInternal(unsigned int)>:
c001eefc:	57                   	push   edi
c001eefd:	31 ff                	xor    edi,edi
c001eeff:	56                   	push   esi
c001ef00:	53                   	push   ebx
c001ef01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef05:	89 cb                	mov    ebx,ecx
c001ef07:	89 ce                	mov    esi,ecx
c001ef09:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ef0f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ef15:	c1 e9 17             	shr    ecx,0x17
c001ef18:	89 f0                	mov    eax,esi
c001ef1a:	0f b6 d1             	movzx  edx,cl
c001ef1d:	81 c2 80 03 00 00    	add    edx,0x380
c001ef23:	89 d1                	mov    ecx,edx
c001ef25:	89 fa                	mov    edx,edi
c001ef27:	c1 e1 14             	shl    ecx,0x14
c001ef2a:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ef2e:	c1 e0 1d             	shl    eax,0x1d
c001ef31:	89 d7                	mov    edi,edx
c001ef33:	89 c6                	mov    esi,eax
c001ef35:	89 ca                	mov    edx,ecx
c001ef37:	89 f0                	mov    eax,esi
c001ef39:	09 fa                	or     edx,edi
c001ef3b:	09 da                	or     edx,ebx
c001ef3d:	5b                   	pop    ebx
c001ef3e:	5e                   	pop    esi
c001ef3f:	5f                   	pop    edi
c001ef40:	c3                   	ret    

c001ef41 <Vm::fpu64ToInternal(unsigned long long)>:
c001ef41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef49:	c3                   	ret    

c001ef4a <Vm::fpuFloatToLong(unsigned long long)>:
c001ef4a:	57                   	push   edi
c001ef4b:	31 c0                	xor    eax,eax
c001ef4d:	56                   	push   esi
c001ef4e:	31 d2                	xor    edx,edx
c001ef50:	53                   	push   ebx
c001ef51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef59:	89 d9                	mov    ecx,ebx
c001ef5b:	c1 e9 14             	shr    ecx,0x14
c001ef5e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ef64:	89 cf                	mov    edi,ecx
c001ef66:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ef6c:	78 33                	js     c001efa1 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef6e:	89 d9                	mov    ecx,ebx
c001ef70:	89 f0                	mov    eax,esi
c001ef72:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ef78:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ef7e:	89 ca                	mov    edx,ecx
c001ef80:	b9 34 00 00 00       	mov    ecx,0x34
c001ef85:	29 f9                	sub    ecx,edi
c001ef87:	0f ad d0             	shrd   eax,edx,cl
c001ef8a:	d3 fa                	sar    edx,cl
c001ef8c:	f6 c1 20             	test   cl,0x20
c001ef8f:	74 05                	je     c001ef96 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ef91:	89 d0                	mov    eax,edx
c001ef93:	c1 fa 1f             	sar    edx,0x1f
c001ef96:	85 db                	test   ebx,ebx
c001ef98:	79 07                	jns    c001efa1 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef9a:	f7 d8                	neg    eax
c001ef9c:	83 d2 00             	adc    edx,0x0
c001ef9f:	f7 da                	neg    edx
c001efa1:	5b                   	pop    ebx
c001efa2:	5e                   	pop    esi
c001efa3:	5f                   	pop    edi
c001efa4:	c3                   	ret    

c001efa5 <Vm::fpuULongToFloat(unsigned long long)>:
c001efa5:	57                   	push   edi
c001efa6:	31 c9                	xor    ecx,ecx
c001efa8:	56                   	push   esi
c001efa9:	53                   	push   ebx
c001efaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001efb2:	0f ba e7 14          	bt     edi,0x14
c001efb6:	72 07                	jb     c001efbf <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001efb8:	01 f6                	add    esi,esi
c001efba:	11 ff                	adc    edi,edi
c001efbc:	41                   	inc    ecx
c001efbd:	eb f3                	jmp    c001efb2 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001efbf:	89 fa                	mov    edx,edi
c001efc1:	89 f0                	mov    eax,esi
c001efc3:	bb 33 04 00 00       	mov    ebx,0x433
c001efc8:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001efce:	29 cb                	sub    ebx,ecx
c001efd0:	89 d9                	mov    ecx,ebx
c001efd2:	5b                   	pop    ebx
c001efd3:	c1 e1 14             	shl    ecx,0x14
c001efd6:	5e                   	pop    esi
c001efd7:	09 ca                	or     edx,ecx
c001efd9:	5f                   	pop    edi
c001efda:	c3                   	ret    

c001efdb <Vm::fpuLongToFloat(long long)>:
c001efdb:	56                   	push   esi
c001efdc:	31 c0                	xor    eax,eax
c001efde:	53                   	push   ebx
c001efdf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001efe7:	39 c8                	cmp    eax,ecx
c001efe9:	19 d8                	sbb    eax,ebx
c001efeb:	7d 04                	jge    c001eff1 <Vm::fpuLongToFloat(long long)+0x16>
c001efed:	31 f6                	xor    esi,esi
c001efef:	eb 0c                	jmp    c001effd <Vm::fpuLongToFloat(long long)+0x22>
c001eff1:	f7 d9                	neg    ecx
c001eff3:	be 01 00 00 00       	mov    esi,0x1
c001eff8:	83 d3 00             	adc    ebx,0x0
c001effb:	f7 db                	neg    ebx
c001effd:	31 c0                	xor    eax,eax
c001efff:	0f ba e3 14          	bt     ebx,0x14
c001f003:	72 07                	jb     c001f00c <Vm::fpuLongToFloat(long long)+0x31>
c001f005:	01 c9                	add    ecx,ecx
c001f007:	11 db                	adc    ebx,ebx
c001f009:	40                   	inc    eax
c001f00a:	eb f3                	jmp    c001efff <Vm::fpuLongToFloat(long long)+0x24>
c001f00c:	ba 33 04 00 00       	mov    edx,0x433
c001f011:	29 c2                	sub    edx,eax
c001f013:	89 c8                	mov    eax,ecx
c001f015:	c1 e2 14             	shl    edx,0x14
c001f018:	89 d9                	mov    ecx,ebx
c001f01a:	89 f3                	mov    ebx,esi
c001f01c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f022:	09 ca                	or     edx,ecx
c001f024:	84 db                	test   bl,bl
c001f026:	74 06                	je     c001f02e <Vm::fpuLongToFloat(long long)+0x53>
c001f028:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f02e:	5b                   	pop    ebx
c001f02f:	5e                   	pop    esi
c001f030:	c3                   	ret    

c001f031 <Vm::fpuGet0()>:
c001f031:	31 c0                	xor    eax,eax
c001f033:	31 d2                	xor    edx,edx
c001f035:	c3                   	ret    

c001f036 <Vm::fpuGet1()>:
c001f036:	b8 01 00 00 00       	mov    eax,0x1
c001f03b:	31 d2                	xor    edx,edx
c001f03d:	c3                   	ret    

c001f03e <Vm::fpuGetPi()>:
c001f03e:	b8 03 00 00 00       	mov    eax,0x3
c001f043:	31 d2                	xor    edx,edx
c001f045:	c3                   	ret    

c001f046 <Vm::fpuGetLog2E()>:
c001f046:	83 ec 18             	sub    esp,0x18
c001f049:	68 34 be 02 c0       	push   0xc002be34
c001f04e:	e8 9a af ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001f053:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f058:	31 d2                	xor    edx,edx
c001f05a:	83 c4 1c             	add    esp,0x1c
c001f05d:	c3                   	ret    

c001f05e <Vm::fpuGetLogE2()>:
c001f05e:	83 ec 18             	sub    esp,0x18
c001f061:	68 40 be 02 c0       	push   0xc002be40
c001f066:	e8 82 af ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001f06b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f070:	31 d2                	xor    edx,edx
c001f072:	83 c4 1c             	add    esp,0x1c
c001f075:	c3                   	ret    

c001f076 <Vm::fpuGetLog210()>:
c001f076:	83 ec 18             	sub    esp,0x18
c001f079:	68 4c be 02 c0       	push   0xc002be4c
c001f07e:	e8 6a af ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001f083:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f088:	31 d2                	xor    edx,edx
c001f08a:	83 c4 1c             	add    esp,0x1c
c001f08d:	c3                   	ret    

c001f08e <Vm::fpuGetLog102()>:
c001f08e:	83 ec 18             	sub    esp,0x18
c001f091:	68 59 be 02 c0       	push   0xc002be59
c001f096:	e8 52 af ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001f09b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0a0:	31 d2                	xor    edx,edx
c001f0a2:	83 c4 1c             	add    esp,0x1c
c001f0a5:	c3                   	ret    

c001f0a6 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f0a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0aa:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f0ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0b2:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f0b6:	0f 92 c0             	setb   al
c001f0b9:	c3                   	ret    

c001f0ba <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f0ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c2:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f0c6:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f0ca:	09 c2                	or     edx,eax
c001f0cc:	0f 94 c0             	sete   al
c001f0cf:	c3                   	ret    

c001f0d0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f0d0:	57                   	push   edi
c001f0d1:	56                   	push   esi
c001f0d2:	53                   	push   ebx
c001f0d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f0df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f0e3:	57                   	push   edi
c001f0e4:	56                   	push   esi
c001f0e5:	53                   	push   ebx
c001f0e6:	51                   	push   ecx
c001f0e7:	e8 ce ff ff ff       	call   c001f0ba <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f0ec:	83 c4 10             	add    esp,0x10
c001f0ef:	88 c2                	mov    dl,al
c001f0f1:	31 c0                	xor    eax,eax
c001f0f3:	84 d2                	test   dl,dl
c001f0f5:	75 0c                	jne    c001f103 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f0f7:	57                   	push   edi
c001f0f8:	56                   	push   esi
c001f0f9:	53                   	push   ebx
c001f0fa:	51                   	push   ecx
c001f0fb:	e8 a6 ff ff ff       	call   c001f0a6 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f100:	83 c4 10             	add    esp,0x10
c001f103:	83 e0 01             	and    eax,0x1
c001f106:	5b                   	pop    ebx
c001f107:	88 c1                	mov    cl,al
c001f109:	83 e2 01             	and    edx,0x1
c001f10c:	a0 81 10 03 c0       	mov    al,ds:0xc0031081
c001f111:	c1 e2 06             	shl    edx,0x6
c001f114:	83 e0 ba             	and    eax,0xffffffba
c001f117:	5e                   	pop    esi
c001f118:	09 c8                	or     eax,ecx
c001f11a:	5f                   	pop    edi
c001f11b:	09 d0                	or     eax,edx
c001f11d:	a2 81 10 03 c0       	mov    ds:0xc0031081,al
c001f122:	c3                   	ret    

c001f123 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f123:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f12b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f12f:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f133:	c3                   	ret    

c001f134 <Vm::fpuAbs(unsigned long long)>:
c001f134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f13c:	c3                   	ret    

c001f13d <Vm::fpuChs(unsigned long long)>:
c001f13d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f141:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f145:	f7 d8                	neg    eax
c001f147:	83 d2 00             	adc    edx,0x0
c001f14a:	f7 da                	neg    edx
c001f14c:	c3                   	ret    

c001f14d <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f14d:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f151:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f156:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f15a:	eb c7                	jmp    c001f123 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f15c <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f15c:	53                   	push   ebx
c001f15d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f161:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f165:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f169:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f16d:	0f af ca             	imul   ecx,edx
c001f170:	0f af d8             	imul   ebx,eax
c001f173:	f7 e2                	mul    edx
c001f175:	01 d9                	add    ecx,ebx
c001f177:	5b                   	pop    ebx
c001f178:	01 ca                	add    edx,ecx
c001f17a:	c3                   	ret    

c001f17b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f17b:	83 ec 0c             	sub    esp,0xc
c001f17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18e:	e8 c9 70 00 00       	call   c002625c <__udivdi3>
c001f193:	83 c4 1c             	add    esp,0x1c
c001f196:	c3                   	ret    

c001f197 <Vm::fpuSquare(unsigned long long)>:
c001f197:	50                   	push   eax
c001f198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f19c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1a0:	52                   	push   edx
c001f1a1:	50                   	push   eax
c001f1a2:	52                   	push   edx
c001f1a3:	50                   	push   eax
c001f1a4:	e8 b3 ff ff ff       	call   c001f15c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f1a9:	83 c4 14             	add    esp,0x14
c001f1ac:	c3                   	ret    

c001f1ad <Vm::fpuGetReg(int)>:
c001f1ad:	83 ec 0c             	sub    esp,0xc
c001f1b0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f1b5:	76 10                	jbe    c001f1c7 <Vm::fpuGetReg(int)+0x1a>
c001f1b7:	83 ec 0c             	sub    esp,0xc
c001f1ba:	68 66 be 02 c0       	push   0xc002be66
c001f1bf:	e8 29 ae ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001f1c4:	83 c4 10             	add    esp,0x10
c001f1c7:	a0 81 10 03 c0       	mov    al,ds:0xc0031081
c001f1cc:	b9 08 00 00 00       	mov    ecx,0x8
c001f1d1:	c0 e8 03             	shr    al,0x3
c001f1d4:	83 e0 07             	and    eax,0x7
c001f1d7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f1db:	99                   	cdq    
c001f1dc:	f7 f9                	idiv   ecx
c001f1de:	8b 04 d5 84 10 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcef7c]
c001f1e5:	8b 14 d5 88 10 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcef78]
c001f1ec:	83 c4 0c             	add    esp,0xc
c001f1ef:	c3                   	ret    

c001f1f0 <Vm::fpuSetReg(int, unsigned long long)>:
c001f1f0:	57                   	push   edi
c001f1f1:	56                   	push   esi
c001f1f2:	52                   	push   edx
c001f1f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f1f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f1fb:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f200:	76 10                	jbe    c001f212 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f202:	83 ec 0c             	sub    esp,0xc
c001f205:	68 79 be 02 c0       	push   0xc002be79
c001f20a:	e8 de ad ff ff       	call   c0019fed <Krnl::panic(char const*)>
c001f20f:	83 c4 10             	add    esp,0x10
c001f212:	a0 81 10 03 c0       	mov    al,ds:0xc0031081
c001f217:	b9 08 00 00 00       	mov    ecx,0x8
c001f21c:	c0 e8 03             	shr    al,0x3
c001f21f:	83 e0 07             	and    eax,0x7
c001f222:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f226:	99                   	cdq    
c001f227:	f7 f9                	idiv   ecx
c001f229:	89 34 d5 84 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef7c],esi
c001f230:	89 3c d5 88 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef78],edi
c001f237:	58                   	pop    eax
c001f238:	5e                   	pop    esi
c001f239:	5f                   	pop    edi
c001f23a:	c3                   	ret    

c001f23b <Vm::fpuPush(unsigned long long)>:
c001f23b:	a0 81 10 03 c0       	mov    al,ds:0xc0031081
c001f240:	c0 e8 03             	shr    al,0x3
c001f243:	83 e0 07             	and    eax,0x7
c001f246:	83 c0 07             	add    eax,0x7
c001f249:	88 c2                	mov    dl,al
c001f24b:	83 e0 07             	and    eax,0x7
c001f24e:	83 e2 07             	and    edx,0x7
c001f251:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f258:	8a 15 81 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031081
c001f25e:	83 e2 c7             	and    edx,0xffffffc7
c001f261:	09 ca                	or     edx,ecx
c001f263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f267:	88 15 81 10 03 c0    	mov    BYTE PTR ds:0xc0031081,dl
c001f26d:	89 0c c5 88 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef78],ecx
c001f274:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f278:	89 14 c5 84 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef7c],edx
c001f27f:	a1 c4 10 03 c0       	mov    eax,ds:0xc00310c4
c001f284:	83 f8 08             	cmp    eax,0x8
c001f287:	75 08                	jne    c001f291 <Vm::fpuPush(unsigned long long)+0x56>
c001f289:	80 0d 80 10 03 c0 40 	or     BYTE PTR ds:0xc0031080,0x40
c001f290:	c3                   	ret    
c001f291:	40                   	inc    eax
c001f292:	a3 c4 10 03 c0       	mov    ds:0xc00310c4,eax
c001f297:	c3                   	ret    

c001f298 <Vm::fpuPop()>:
c001f298:	8a 0d 81 10 03 c0    	mov    cl,BYTE PTR ds:0xc0031081
c001f29e:	53                   	push   ebx
c001f29f:	c0 e9 03             	shr    cl,0x3
c001f2a2:	8a 1d 81 10 03 c0    	mov    bl,BYTE PTR ds:0xc0031081
c001f2a8:	83 e1 07             	and    ecx,0x7
c001f2ab:	83 e3 c7             	and    ebx,0xffffffc7
c001f2ae:	8b 04 cd 84 10 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcef7c]
c001f2b5:	8b 14 cd 88 10 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcef78]
c001f2bc:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f2c3:	83 e1 38             	and    ecx,0x38
c001f2c6:	09 d9                	or     ecx,ebx
c001f2c8:	88 0d 81 10 03 c0    	mov    BYTE PTR ds:0xc0031081,cl
c001f2ce:	8b 0d c4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310c4
c001f2d4:	85 c9                	test   ecx,ecx
c001f2d6:	74 09                	je     c001f2e1 <Vm::fpuPop()+0x49>
c001f2d8:	49                   	dec    ecx
c001f2d9:	89 0d c4 10 03 c0    	mov    DWORD PTR ds:0xc00310c4,ecx
c001f2df:	eb 07                	jmp    c001f2e8 <Vm::fpuPop()+0x50>
c001f2e1:	80 0d 80 10 03 c0 40 	or     BYTE PTR ds:0xc0031080,0x40
c001f2e8:	5b                   	pop    ebx
c001f2e9:	c3                   	ret    

c001f2ea <Vm::x87Handler(regs*)>:
c001f2ea:	55                   	push   ebp
c001f2eb:	57                   	push   edi
c001f2ec:	56                   	push   esi
c001f2ed:	53                   	push   ebx
c001f2ee:	83 ec 1c             	sub    esp,0x1c
c001f2f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f2f5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f2fa:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f2fd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f305:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f309:	50                   	push   eax
c001f30a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f30e:	50                   	push   eax
c001f30f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f313:	50                   	push   eax
c001f314:	53                   	push   ebx
c001f315:	e8 04 a5 ff ff       	call   c001981e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f31a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f31d:	83 c4 10             	add    esp,0x10
c001f320:	89 c6                	mov    esi,eax
c001f322:	80 fa d9             	cmp    dl,0xd9
c001f325:	0f 85 52 01 00 00    	jne    c001f47d <Vm::x87Handler(regs*)+0x193>
c001f32b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f32f:	8d 50 20             	lea    edx,[eax+0x20]
c001f332:	80 fa 0e             	cmp    dl,0xe
c001f335:	0f 87 86 00 00 00    	ja     c001f3c1 <Vm::x87Handler(regs*)+0xd7>
c001f33b:	0f b6 d2             	movzx  edx,dl
c001f33e:	ff 24 95 8c be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4174]
c001f345:	e8 e7 fc ff ff       	call   c001f031 <Vm::fpuGet0()>
c001f34a:	eb 05                	jmp    c001f351 <Vm::x87Handler(regs*)+0x67>
c001f34c:	e8 e5 fc ff ff       	call   c001f036 <Vm::fpuGet1()>
c001f351:	57                   	push   edi
c001f352:	57                   	push   edi
c001f353:	52                   	push   edx
c001f354:	50                   	push   eax
c001f355:	e8 e1 fe ff ff       	call   c001f23b <Vm::fpuPush(unsigned long long)>
c001f35a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f35e:	83 c4 10             	add    esp,0x10
c001f361:	b0 01                	mov    al,0x1
c001f363:	e9 e3 09 00 00       	jmp    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001f368:	83 ec 0c             	sub    esp,0xc
c001f36b:	6a 00                	push   0x0
c001f36d:	e8 3b fe ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f372:	59                   	pop    ecx
c001f373:	5e                   	pop    esi
c001f374:	52                   	push   edx
c001f375:	50                   	push   eax
c001f376:	e8 c2 fd ff ff       	call   c001f13d <Vm::fpuChs(unsigned long long)>
c001f37b:	eb 13                	jmp    c001f390 <Vm::x87Handler(regs*)+0xa6>
c001f37d:	83 ec 0c             	sub    esp,0xc
c001f380:	6a 00                	push   0x0
c001f382:	e8 26 fe ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f387:	5f                   	pop    edi
c001f388:	5d                   	pop    ebp
c001f389:	52                   	push   edx
c001f38a:	50                   	push   eax
c001f38b:	e8 a4 fd ff ff       	call   c001f134 <Vm::fpuAbs(unsigned long long)>
c001f390:	83 c4 0c             	add    esp,0xc
c001f393:	52                   	push   edx
c001f394:	50                   	push   eax
c001f395:	6a 00                	push   0x0
c001f397:	e8 54 fe ff ff       	call   c001f1f0 <Vm::fpuSetReg(int, unsigned long long)>
c001f39c:	eb bc                	jmp    c001f35a <Vm::x87Handler(regs*)+0x70>
c001f39e:	e8 d3 fc ff ff       	call   c001f076 <Vm::fpuGetLog210()>
c001f3a3:	eb ac                	jmp    c001f351 <Vm::x87Handler(regs*)+0x67>
c001f3a5:	e8 9c fc ff ff       	call   c001f046 <Vm::fpuGetLog2E()>
c001f3aa:	eb a5                	jmp    c001f351 <Vm::x87Handler(regs*)+0x67>
c001f3ac:	e8 8d fc ff ff       	call   c001f03e <Vm::fpuGetPi()>
c001f3b1:	eb 9e                	jmp    c001f351 <Vm::x87Handler(regs*)+0x67>
c001f3b3:	e8 d6 fc ff ff       	call   c001f08e <Vm::fpuGetLog102()>
c001f3b8:	eb 97                	jmp    c001f351 <Vm::x87Handler(regs*)+0x67>
c001f3ba:	e8 9f fc ff ff       	call   c001f05e <Vm::fpuGetLogE2()>
c001f3bf:	eb 90                	jmp    c001f351 <Vm::x87Handler(regs*)+0x67>
c001f3c1:	8d 50 40             	lea    edx,[eax+0x40]
c001f3c4:	80 fa 07             	cmp    dl,0x7
c001f3c7:	77 15                	ja     c001f3de <Vm::x87Handler(regs*)+0xf4>
c001f3c9:	83 ec 0c             	sub    esp,0xc
c001f3cc:	2d c0 00 00 00       	sub    eax,0xc0
c001f3d1:	50                   	push   eax
c001f3d2:	e8 d6 fd ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f3d7:	59                   	pop    ecx
c001f3d8:	5e                   	pop    esi
c001f3d9:	e9 75 ff ff ff       	jmp    c001f353 <Vm::x87Handler(regs*)+0x69>
c001f3de:	8d 50 38             	lea    edx,[eax+0x38]
c001f3e1:	80 fa 07             	cmp    dl,0x7
c001f3e4:	77 3c                	ja     c001f422 <Vm::x87Handler(regs*)+0x138>
c001f3e6:	83 ec 0c             	sub    esp,0xc
c001f3e9:	2d c8 00 00 00       	sub    eax,0xc8
c001f3ee:	50                   	push   eax
c001f3ef:	e8 b9 fd ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f3f4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3fb:	89 c6                	mov    esi,eax
c001f3fd:	89 d7                	mov    edi,edx
c001f3ff:	e8 a9 fd ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f404:	83 c4 0c             	add    esp,0xc
c001f407:	52                   	push   edx
c001f408:	50                   	push   eax
c001f409:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f40d:	2d c8 00 00 00       	sub    eax,0xc8
c001f412:	50                   	push   eax
c001f413:	e8 d8 fd ff ff       	call   c001f1f0 <Vm::fpuSetReg(int, unsigned long long)>
c001f418:	83 c4 0c             	add    esp,0xc
c001f41b:	57                   	push   edi
c001f41c:	56                   	push   esi
c001f41d:	e9 73 ff ff ff       	jmp    c001f395 <Vm::x87Handler(regs*)+0xab>
c001f422:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f426:	84 d2                	test   dl,dl
c001f428:	75 0f                	jne    c001f439 <Vm::x87Handler(regs*)+0x14f>
c001f42a:	83 ec 0c             	sub    esp,0xc
c001f42d:	ff 36                	push   DWORD PTR [esi]
c001f42f:	e8 c8 fa ff ff       	call   c001eefc <Vm::fpu32ToInternal(unsigned int)>
c001f434:	e9 bf 00 00 00       	jmp    c001f4f8 <Vm::x87Handler(regs*)+0x20e>
c001f439:	80 fa 03             	cmp    dl,0x3
c001f43c:	75 13                	jne    c001f451 <Vm::x87Handler(regs*)+0x167>
c001f43e:	e8 55 fe ff ff       	call   c001f298 <Vm::fpuPop()>
c001f443:	55                   	push   ebp
c001f444:	55                   	push   ebp
c001f445:	52                   	push   edx
c001f446:	50                   	push   eax
c001f447:	e8 4c fa ff ff       	call   c001ee98 <Vm::fpuInternalTo32(unsigned long long)>
c001f44c:	e9 88 00 00 00       	jmp    c001f4d9 <Vm::x87Handler(regs*)+0x1ef>
c001f451:	80 fa 05             	cmp    dl,0x5
c001f454:	75 0e                	jne    c001f464 <Vm::x87Handler(regs*)+0x17a>
c001f456:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f459:	66 a3 82 10 03 c0    	mov    ds:0xc0031082,ax
c001f45f:	e9 df 00 00 00       	jmp    c001f543 <Vm::x87Handler(regs*)+0x259>
c001f464:	31 c0                	xor    eax,eax
c001f466:	80 fa 07             	cmp    dl,0x7
c001f469:	0f 85 dc 08 00 00    	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001f46f:	66 a1 82 10 03 c0    	mov    ax,ds:0xc0031082
c001f475:	66 89 06             	mov    WORD PTR [esi],ax
c001f478:	e9 c6 00 00 00       	jmp    c001f543 <Vm::x87Handler(regs*)+0x259>
c001f47d:	80 fa d8             	cmp    dl,0xd8
c001f480:	0f 84 c9 00 00 00    	je     c001f54f <Vm::x87Handler(regs*)+0x265>
c001f486:	80 fa dc             	cmp    dl,0xdc
c001f489:	0f 84 0d 02 00 00    	je     c001f69c <Vm::x87Handler(regs*)+0x3b2>
c001f48f:	80 fa de             	cmp    dl,0xde
c001f492:	0f 84 cd 02 00 00    	je     c001f765 <Vm::x87Handler(regs*)+0x47b>
c001f498:	80 fa dd             	cmp    dl,0xdd
c001f49b:	0f 84 5f 04 00 00    	je     c001f900 <Vm::x87Handler(regs*)+0x616>
c001f4a1:	80 fa da             	cmp    dl,0xda
c001f4a4:	0f 84 24 05 00 00    	je     c001f9ce <Vm::x87Handler(regs*)+0x6e4>
c001f4aa:	80 fa df             	cmp    dl,0xdf
c001f4ad:	0f 84 68 05 00 00    	je     c001fa1b <Vm::x87Handler(regs*)+0x731>
c001f4b3:	31 c0                	xor    eax,eax
c001f4b5:	80 fa db             	cmp    dl,0xdb
c001f4b8:	0f 85 8d 08 00 00    	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001f4be:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4c2:	80 fa 03             	cmp    dl,0x3
c001f4c5:	0f 85 70 06 00 00    	jne    c001fb3b <Vm::x87Handler(regs*)+0x851>
c001f4cb:	e8 c8 fd ff ff       	call   c001f298 <Vm::fpuPop()>
c001f4d0:	55                   	push   ebp
c001f4d1:	55                   	push   ebp
c001f4d2:	52                   	push   edx
c001f4d3:	50                   	push   eax
c001f4d4:	e8 71 fa ff ff       	call   c001ef4a <Vm::fpuFloatToLong(unsigned long long)>
c001f4d9:	83 c4 10             	add    esp,0x10
c001f4dc:	89 06                	mov    DWORD PTR [esi],eax
c001f4de:	eb 63                	jmp    c001f543 <Vm::x87Handler(regs*)+0x259>
c001f4e0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4e4:	84 d2                	test   dl,dl
c001f4e6:	0f 85 e6 05 00 00    	jne    c001fad2 <Vm::x87Handler(regs*)+0x7e8>
c001f4ec:	57                   	push   edi
c001f4ed:	57                   	push   edi
c001f4ee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4f1:	ff 36                	push   DWORD PTR [esi]
c001f4f3:	e8 49 fa ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001f4f8:	5e                   	pop    esi
c001f4f9:	5f                   	pop    edi
c001f4fa:	52                   	push   edx
c001f4fb:	50                   	push   eax
c001f4fc:	e8 3a fd ff ff       	call   c001f23b <Vm::fpuPush(unsigned long long)>
c001f501:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f505:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f508:	e9 51 fe ff ff       	jmp    c001f35e <Vm::x87Handler(regs*)+0x74>
c001f50d:	80 fa 03             	cmp    dl,0x3
c001f510:	0f 85 d7 06 00 00    	jne    c001fbed <Vm::x87Handler(regs*)+0x903>
c001f516:	57                   	push   edi
c001f517:	57                   	push   edi
c001f518:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f51b:	ff 36                	push   DWORD PTR [esi]
c001f51d:	e8 1f fa ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001f522:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f529:	89 c6                	mov    esi,eax
c001f52b:	89 d7                	mov    edi,edx
c001f52d:	e8 7b fc ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f532:	57                   	push   edi
c001f533:	56                   	push   esi
c001f534:	52                   	push   edx
c001f535:	50                   	push   eax
c001f536:	e8 95 fb ff ff       	call   c001f0d0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f53b:	83 c4 20             	add    esp,0x20
c001f53e:	e8 55 fd ff ff       	call   c001f298 <Vm::fpuPop()>
c001f543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f547:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f54a:	e9 12 fe ff ff       	jmp    c001f361 <Vm::x87Handler(regs*)+0x77>
c001f54f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f553:	8d 50 40             	lea    edx,[eax+0x40]
c001f556:	80 fa 07             	cmp    dl,0x7
c001f559:	77 29                	ja     c001f584 <Vm::x87Handler(regs*)+0x29a>
c001f55b:	83 ec 0c             	sub    esp,0xc
c001f55e:	2d c0 00 00 00       	sub    eax,0xc0
c001f563:	50                   	push   eax
c001f564:	e8 44 fc ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f569:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f570:	89 c6                	mov    esi,eax
c001f572:	89 d7                	mov    edi,edx
c001f574:	e8 34 fc ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f579:	57                   	push   edi
c001f57a:	56                   	push   esi
c001f57b:	52                   	push   edx
c001f57c:	50                   	push   eax
c001f57d:	e8 a1 fb ff ff       	call   c001f123 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f582:	eb 2f                	jmp    c001f5b3 <Vm::x87Handler(regs*)+0x2c9>
c001f584:	8d 50 38             	lea    edx,[eax+0x38]
c001f587:	80 fa 07             	cmp    dl,0x7
c001f58a:	77 2f                	ja     c001f5bb <Vm::x87Handler(regs*)+0x2d1>
c001f58c:	83 ec 0c             	sub    esp,0xc
c001f58f:	2d c8 00 00 00       	sub    eax,0xc8
c001f594:	50                   	push   eax
c001f595:	e8 13 fc ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f59a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5a1:	89 c6                	mov    esi,eax
c001f5a3:	89 d7                	mov    edi,edx
c001f5a5:	e8 03 fc ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f5aa:	57                   	push   edi
c001f5ab:	56                   	push   esi
c001f5ac:	52                   	push   edx
c001f5ad:	50                   	push   eax
c001f5ae:	e8 a9 fb ff ff       	call   c001f15c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5b3:	83 c4 1c             	add    esp,0x1c
c001f5b6:	e9 d8 fd ff ff       	jmp    c001f393 <Vm::x87Handler(regs*)+0xa9>
c001f5bb:	8d 50 30             	lea    edx,[eax+0x30]
c001f5be:	80 fa 07             	cmp    dl,0x7
c001f5c1:	77 0d                	ja     c001f5d0 <Vm::x87Handler(regs*)+0x2e6>
c001f5c3:	83 ec 0c             	sub    esp,0xc
c001f5c6:	2d d0 00 00 00       	sub    eax,0xd0
c001f5cb:	e9 99 03 00 00       	jmp    c001f969 <Vm::x87Handler(regs*)+0x67f>
c001f5d0:	8d 50 28             	lea    edx,[eax+0x28]
c001f5d3:	80 fa 07             	cmp    dl,0x7
c001f5d6:	77 0d                	ja     c001f5e5 <Vm::x87Handler(regs*)+0x2fb>
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	2d d8 00 00 00       	sub    eax,0xd8
c001f5e0:	e9 c0 03 00 00       	jmp    c001f9a5 <Vm::x87Handler(regs*)+0x6bb>
c001f5e5:	8d 50 20             	lea    edx,[eax+0x20]
c001f5e8:	80 fa 07             	cmp    dl,0x7
c001f5eb:	77 1b                	ja     c001f608 <Vm::x87Handler(regs*)+0x31e>
c001f5ed:	83 ec 0c             	sub    esp,0xc
c001f5f0:	2d e0 00 00 00       	sub    eax,0xe0
c001f5f5:	50                   	push   eax
c001f5f6:	e8 b2 fb ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f5fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f602:	89 c6                	mov    esi,eax
c001f604:	89 d7                	mov    edi,edx
c001f606:	eb 22                	jmp    c001f62a <Vm::x87Handler(regs*)+0x340>
c001f608:	8d 50 18             	lea    edx,[eax+0x18]
c001f60b:	80 fa 07             	cmp    dl,0x7
c001f60e:	77 2d                	ja     c001f63d <Vm::x87Handler(regs*)+0x353>
c001f610:	83 ec 0c             	sub    esp,0xc
c001f613:	6a 00                	push   0x0
c001f615:	e8 93 fb ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f61a:	89 c6                	mov    esi,eax
c001f61c:	89 d7                	mov    edi,edx
c001f61e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f622:	2d e8 00 00 00       	sub    eax,0xe8
c001f627:	89 04 24             	mov    DWORD PTR [esp],eax
c001f62a:	e8 7e fb ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f62f:	57                   	push   edi
c001f630:	56                   	push   esi
c001f631:	52                   	push   edx
c001f632:	50                   	push   eax
c001f633:	e8 15 fb ff ff       	call   c001f14d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f638:	e9 76 ff ff ff       	jmp    c001f5b3 <Vm::x87Handler(regs*)+0x2c9>
c001f63d:	8d 50 10             	lea    edx,[eax+0x10]
c001f640:	80 fa 07             	cmp    dl,0x7
c001f643:	77 1b                	ja     c001f660 <Vm::x87Handler(regs*)+0x376>
c001f645:	83 ec 0c             	sub    esp,0xc
c001f648:	2d f0 00 00 00       	sub    eax,0xf0
c001f64d:	50                   	push   eax
c001f64e:	e8 5a fb ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f653:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f65a:	89 c6                	mov    esi,eax
c001f65c:	89 d7                	mov    edi,edx
c001f65e:	eb 22                	jmp    c001f682 <Vm::x87Handler(regs*)+0x398>
c001f660:	3c f7                	cmp    al,0xf7
c001f662:	0f 86 d1 03 00 00    	jbe    c001fa39 <Vm::x87Handler(regs*)+0x74f>
c001f668:	83 ec 0c             	sub    esp,0xc
c001f66b:	6a 00                	push   0x0
c001f66d:	e8 3b fb ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f672:	89 c6                	mov    esi,eax
c001f674:	89 d7                	mov    edi,edx
c001f676:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f67a:	2d f8 00 00 00       	sub    eax,0xf8
c001f67f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f682:	e8 26 fb ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f687:	57                   	push   edi
c001f688:	56                   	push   esi
c001f689:	52                   	push   edx
c001f68a:	50                   	push   eax
c001f68b:	e8 eb fa ff ff       	call   c001f17b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f690:	83 c4 1c             	add    esp,0x1c
c001f693:	52                   	push   edx
c001f694:	50                   	push   eax
c001f695:	6a 00                	push   0x0
c001f697:	e9 51 02 00 00       	jmp    c001f8ed <Vm::x87Handler(regs*)+0x603>
c001f69c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6a0:	8d 50 40             	lea    edx,[eax+0x40]
c001f6a3:	80 fa 07             	cmp    dl,0x7
c001f6a6:	77 37                	ja     c001f6df <Vm::x87Handler(regs*)+0x3f5>
c001f6a8:	83 ec 0c             	sub    esp,0xc
c001f6ab:	2d c0 00 00 00       	sub    eax,0xc0
c001f6b0:	50                   	push   eax
c001f6b1:	e8 f7 fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f6b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6bd:	89 c6                	mov    esi,eax
c001f6bf:	89 d7                	mov    edi,edx
c001f6c1:	e8 e7 fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f6c6:	57                   	push   edi
c001f6c7:	56                   	push   esi
c001f6c8:	52                   	push   edx
c001f6c9:	50                   	push   eax
c001f6ca:	e8 54 fa ff ff       	call   c001f123 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f6cf:	83 c4 1c             	add    esp,0x1c
c001f6d2:	52                   	push   edx
c001f6d3:	50                   	push   eax
c001f6d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d8:	2d c0 00 00 00       	sub    eax,0xc0
c001f6dd:	eb 3d                	jmp    c001f71c <Vm::x87Handler(regs*)+0x432>
c001f6df:	8d 50 38             	lea    edx,[eax+0x38]
c001f6e2:	80 fa 07             	cmp    dl,0x7
c001f6e5:	77 3b                	ja     c001f722 <Vm::x87Handler(regs*)+0x438>
c001f6e7:	83 ec 0c             	sub    esp,0xc
c001f6ea:	2d c8 00 00 00       	sub    eax,0xc8
c001f6ef:	50                   	push   eax
c001f6f0:	e8 b8 fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f6f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6fc:	89 c6                	mov    esi,eax
c001f6fe:	89 d7                	mov    edi,edx
c001f700:	e8 a8 fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f705:	57                   	push   edi
c001f706:	56                   	push   esi
c001f707:	52                   	push   edx
c001f708:	50                   	push   eax
c001f709:	e8 4e fa ff ff       	call   c001f15c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f70e:	83 c4 1c             	add    esp,0x1c
c001f711:	52                   	push   edx
c001f712:	50                   	push   eax
c001f713:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f717:	2d c8 00 00 00       	sub    eax,0xc8
c001f71c:	50                   	push   eax
c001f71d:	e9 75 fc ff ff       	jmp    c001f397 <Vm::x87Handler(regs*)+0xad>
c001f722:	83 c0 18             	add    eax,0x18
c001f725:	3c 07                	cmp    al,0x7
c001f727:	0f 87 3b 04 00 00    	ja     c001fb68 <Vm::x87Handler(regs*)+0x87e>
c001f72d:	83 ec 0c             	sub    esp,0xc
c001f730:	6a 00                	push   0x0
c001f732:	e8 76 fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f737:	89 c6                	mov    esi,eax
c001f739:	89 d7                	mov    edi,edx
c001f73b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f73f:	2d e8 00 00 00       	sub    eax,0xe8
c001f744:	89 04 24             	mov    DWORD PTR [esp],eax
c001f747:	e8 61 fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f74c:	57                   	push   edi
c001f74d:	56                   	push   esi
c001f74e:	52                   	push   edx
c001f74f:	50                   	push   eax
c001f750:	e8 f8 f9 ff ff       	call   c001f14d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f755:	83 c4 1c             	add    esp,0x1c
c001f758:	52                   	push   edx
c001f759:	50                   	push   eax
c001f75a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f75e:	2d e8 00 00 00       	sub    eax,0xe8
c001f763:	eb b7                	jmp    c001f71c <Vm::x87Handler(regs*)+0x432>
c001f765:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f769:	8d 50 40             	lea    edx,[eax+0x40]
c001f76c:	80 fa 07             	cmp    dl,0x7
c001f76f:	77 3a                	ja     c001f7ab <Vm::x87Handler(regs*)+0x4c1>
c001f771:	83 ec 0c             	sub    esp,0xc
c001f774:	2d c0 00 00 00       	sub    eax,0xc0
c001f779:	50                   	push   eax
c001f77a:	e8 2e fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f77f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f786:	89 c6                	mov    esi,eax
c001f788:	89 d7                	mov    edi,edx
c001f78a:	e8 1e fa ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f78f:	57                   	push   edi
c001f790:	56                   	push   esi
c001f791:	52                   	push   edx
c001f792:	50                   	push   eax
c001f793:	e8 8b f9 ff ff       	call   c001f123 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f798:	83 c4 1c             	add    esp,0x1c
c001f79b:	52                   	push   edx
c001f79c:	50                   	push   eax
c001f79d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7a1:	2d c0 00 00 00       	sub    eax,0xc0
c001f7a6:	e9 9e 01 00 00       	jmp    c001f949 <Vm::x87Handler(regs*)+0x65f>
c001f7ab:	8d 50 20             	lea    edx,[eax+0x20]
c001f7ae:	80 fa 07             	cmp    dl,0x7
c001f7b1:	77 3a                	ja     c001f7ed <Vm::x87Handler(regs*)+0x503>
c001f7b3:	83 ec 0c             	sub    esp,0xc
c001f7b6:	2d e0 00 00 00       	sub    eax,0xe0
c001f7bb:	50                   	push   eax
c001f7bc:	e8 ec f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f7c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7c8:	89 c6                	mov    esi,eax
c001f7ca:	89 d7                	mov    edi,edx
c001f7cc:	e8 dc f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f7d1:	57                   	push   edi
c001f7d2:	56                   	push   esi
c001f7d3:	52                   	push   edx
c001f7d4:	50                   	push   eax
c001f7d5:	e8 73 f9 ff ff       	call   c001f14d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7da:	83 c4 1c             	add    esp,0x1c
c001f7dd:	52                   	push   edx
c001f7de:	50                   	push   eax
c001f7df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7e3:	2d e0 00 00 00       	sub    eax,0xe0
c001f7e8:	e9 5c 01 00 00       	jmp    c001f949 <Vm::x87Handler(regs*)+0x65f>
c001f7ed:	8d 50 18             	lea    edx,[eax+0x18]
c001f7f0:	80 fa 07             	cmp    dl,0x7
c001f7f3:	77 3b                	ja     c001f830 <Vm::x87Handler(regs*)+0x546>
c001f7f5:	83 ec 0c             	sub    esp,0xc
c001f7f8:	6a 00                	push   0x0
c001f7fa:	e8 ae f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f7ff:	89 c6                	mov    esi,eax
c001f801:	89 d7                	mov    edi,edx
c001f803:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f807:	2d e8 00 00 00       	sub    eax,0xe8
c001f80c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f80f:	e8 99 f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f814:	57                   	push   edi
c001f815:	56                   	push   esi
c001f816:	52                   	push   edx
c001f817:	50                   	push   eax
c001f818:	e8 30 f9 ff ff       	call   c001f14d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f81d:	83 c4 1c             	add    esp,0x1c
c001f820:	52                   	push   edx
c001f821:	50                   	push   eax
c001f822:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f826:	2d e8 00 00 00       	sub    eax,0xe8
c001f82b:	e9 19 01 00 00       	jmp    c001f949 <Vm::x87Handler(regs*)+0x65f>
c001f830:	8d 50 38             	lea    edx,[eax+0x38]
c001f833:	80 fa 07             	cmp    dl,0x7
c001f836:	77 37                	ja     c001f86f <Vm::x87Handler(regs*)+0x585>
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	2d c8 00 00 00       	sub    eax,0xc8
c001f840:	50                   	push   eax
c001f841:	e8 67 f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f846:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f84d:	89 c6                	mov    esi,eax
c001f84f:	89 d7                	mov    edi,edx
c001f851:	e8 57 f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f856:	57                   	push   edi
c001f857:	56                   	push   esi
c001f858:	52                   	push   edx
c001f859:	50                   	push   eax
c001f85a:	e8 fd f8 ff ff       	call   c001f15c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f85f:	83 c4 1c             	add    esp,0x1c
c001f862:	52                   	push   edx
c001f863:	50                   	push   eax
c001f864:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f868:	2d c8 00 00 00       	sub    eax,0xc8
c001f86d:	eb 7d                	jmp    c001f8ec <Vm::x87Handler(regs*)+0x602>
c001f86f:	3c f7                	cmp    al,0xf7
c001f871:	76 38                	jbe    c001f8ab <Vm::x87Handler(regs*)+0x5c1>
c001f873:	83 ec 0c             	sub    esp,0xc
c001f876:	6a 00                	push   0x0
c001f878:	e8 30 f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f87d:	89 c6                	mov    esi,eax
c001f87f:	89 d7                	mov    edi,edx
c001f881:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f885:	2d f8 00 00 00       	sub    eax,0xf8
c001f88a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f88d:	e8 1b f9 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f892:	57                   	push   edi
c001f893:	56                   	push   esi
c001f894:	52                   	push   edx
c001f895:	50                   	push   eax
c001f896:	e8 e0 f8 ff ff       	call   c001f17b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f89b:	83 c4 1c             	add    esp,0x1c
c001f89e:	52                   	push   edx
c001f89f:	50                   	push   eax
c001f8a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a4:	2d f8 00 00 00       	sub    eax,0xf8
c001f8a9:	eb 41                	jmp    c001f8ec <Vm::x87Handler(regs*)+0x602>
c001f8ab:	8d 50 10             	lea    edx,[eax+0x10]
c001f8ae:	80 fa 07             	cmp    dl,0x7
c001f8b1:	0f 87 5a 01 00 00    	ja     c001fa11 <Vm::x87Handler(regs*)+0x727>
c001f8b7:	83 ec 0c             	sub    esp,0xc
c001f8ba:	2d f0 00 00 00       	sub    eax,0xf0
c001f8bf:	50                   	push   eax
c001f8c0:	e8 e8 f8 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f8c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8cc:	89 c6                	mov    esi,eax
c001f8ce:	89 d7                	mov    edi,edx
c001f8d0:	e8 d8 f8 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f8d5:	57                   	push   edi
c001f8d6:	56                   	push   esi
c001f8d7:	52                   	push   edx
c001f8d8:	50                   	push   eax
c001f8d9:	e8 9d f8 ff ff       	call   c001f17b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f8de:	83 c4 1c             	add    esp,0x1c
c001f8e1:	52                   	push   edx
c001f8e2:	50                   	push   eax
c001f8e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8e7:	2d f0 00 00 00       	sub    eax,0xf0
c001f8ec:	50                   	push   eax
c001f8ed:	e8 fe f8 ff ff       	call   c001f1f0 <Vm::fpuSetReg(int, unsigned long long)>
c001f8f2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8f6:	e8 9d f9 ff ff       	call   c001f298 <Vm::fpuPop()>
c001f8fb:	e9 5e fa ff ff       	jmp    c001f35e <Vm::x87Handler(regs*)+0x74>
c001f900:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f904:	8d 50 30             	lea    edx,[eax+0x30]
c001f907:	80 fa 07             	cmp    dl,0x7
c001f90a:	77 1d                	ja     c001f929 <Vm::x87Handler(regs*)+0x63f>
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	6a 00                	push   0x0
c001f911:	e8 97 f8 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f916:	83 c4 0c             	add    esp,0xc
c001f919:	52                   	push   edx
c001f91a:	50                   	push   eax
c001f91b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f91f:	2d d0 00 00 00       	sub    eax,0xd0
c001f924:	e9 f3 fd ff ff       	jmp    c001f71c <Vm::x87Handler(regs*)+0x432>
c001f929:	8d 50 28             	lea    edx,[eax+0x28]
c001f92c:	80 fa 07             	cmp    dl,0x7
c001f92f:	77 28                	ja     c001f959 <Vm::x87Handler(regs*)+0x66f>
c001f931:	83 ec 0c             	sub    esp,0xc
c001f934:	6a 00                	push   0x0
c001f936:	e8 72 f8 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f93b:	83 c4 0c             	add    esp,0xc
c001f93e:	52                   	push   edx
c001f93f:	50                   	push   eax
c001f940:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f944:	2d d8 00 00 00       	sub    eax,0xd8
c001f949:	50                   	push   eax
c001f94a:	e8 a1 f8 ff ff       	call   c001f1f0 <Vm::fpuSetReg(int, unsigned long long)>
c001f94f:	e8 44 f9 ff ff       	call   c001f298 <Vm::fpuPop()>
c001f954:	e9 01 fa ff ff       	jmp    c001f35a <Vm::x87Handler(regs*)+0x70>
c001f959:	8d 50 20             	lea    edx,[eax+0x20]
c001f95c:	80 fa 07             	cmp    dl,0x7
c001f95f:	77 30                	ja     c001f991 <Vm::x87Handler(regs*)+0x6a7>
c001f961:	83 ec 0c             	sub    esp,0xc
c001f964:	2d e0 00 00 00       	sub    eax,0xe0
c001f969:	50                   	push   eax
c001f96a:	e8 3e f8 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f96f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f976:	89 c6                	mov    esi,eax
c001f978:	89 d7                	mov    edi,edx
c001f97a:	e8 2e f8 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f97f:	57                   	push   edi
c001f980:	56                   	push   esi
c001f981:	52                   	push   edx
c001f982:	50                   	push   eax
c001f983:	e8 48 f7 ff ff       	call   c001f0d0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f988:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f98c:	e9 54 02 00 00       	jmp    c001fbe5 <Vm::x87Handler(regs*)+0x8fb>
c001f991:	8d 50 18             	lea    edx,[eax+0x18]
c001f994:	80 fa 07             	cmp    dl,0x7
c001f997:	0f 87 43 fb ff ff    	ja     c001f4e0 <Vm::x87Handler(regs*)+0x1f6>
c001f99d:	83 ec 0c             	sub    esp,0xc
c001f9a0:	2d e8 00 00 00       	sub    eax,0xe8
c001f9a5:	50                   	push   eax
c001f9a6:	e8 02 f8 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f9ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9b2:	89 c6                	mov    esi,eax
c001f9b4:	89 d7                	mov    edi,edx
c001f9b6:	e8 f2 f7 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f9bb:	57                   	push   edi
c001f9bc:	56                   	push   esi
c001f9bd:	52                   	push   edx
c001f9be:	50                   	push   eax
c001f9bf:	e8 0c f7 ff ff       	call   c001f0d0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9c4:	83 c4 20             	add    esp,0x20
c001f9c7:	e8 cc f8 ff ff       	call   c001f298 <Vm::fpuPop()>
c001f9cc:	eb 62                	jmp    c001fa30 <Vm::x87Handler(regs*)+0x746>
c001f9ce:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f9d2:	0f 85 0f 01 00 00    	jne    c001fae7 <Vm::x87Handler(regs*)+0x7fd>
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	6a 01                	push   0x1
c001f9dd:	e8 cb f7 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f9e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9e9:	89 c6                	mov    esi,eax
c001f9eb:	89 d7                	mov    edi,edx
c001f9ed:	e8 bb f7 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001f9f2:	57                   	push   edi
c001f9f3:	56                   	push   esi
c001f9f4:	52                   	push   edx
c001f9f5:	50                   	push   eax
c001f9f6:	e8 d5 f6 ff ff       	call   c001f0d0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9fb:	83 c4 20             	add    esp,0x20
c001f9fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa02:	e8 91 f8 ff ff       	call   c001f298 <Vm::fpuPop()>
c001fa07:	e8 8c f8 ff ff       	call   c001f298 <Vm::fpuPop()>
c001fa0c:	e9 50 f9 ff ff       	jmp    c001f361 <Vm::x87Handler(regs*)+0x77>
c001fa11:	3c d9                	cmp    al,0xd9
c001fa13:	0f 85 b5 02 00 00    	jne    c001fcce <Vm::x87Handler(regs*)+0x9e4>
c001fa19:	eb bd                	jmp    c001f9d8 <Vm::x87Handler(regs*)+0x6ee>
c001fa1b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fa1f:	0f 85 ea 02 00 00    	jne    c001fd0f <Vm::x87Handler(regs*)+0xa25>
c001fa25:	0f b7 05 80 10 03 c0 	movzx  eax,WORD PTR ds:0xc0031080
c001fa2c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fa30:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa34:	e9 28 f9 ff ff       	jmp    c001f361 <Vm::x87Handler(regs*)+0x77>
c001fa39:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa3d:	84 d2                	test   dl,dl
c001fa3f:	75 0f                	jne    c001fa50 <Vm::x87Handler(regs*)+0x766>
c001fa41:	83 ec 0c             	sub    esp,0xc
c001fa44:	ff 36                	push   DWORD PTR [esi]
c001fa46:	e8 b1 f4 ff ff       	call   c001eefc <Vm::fpu32ToInternal(unsigned int)>
c001fa4b:	e9 2c 01 00 00       	jmp    c001fb7c <Vm::x87Handler(regs*)+0x892>
c001fa50:	80 fa 01             	cmp    dl,0x1
c001fa53:	75 0f                	jne    c001fa64 <Vm::x87Handler(regs*)+0x77a>
c001fa55:	83 ec 0c             	sub    esp,0xc
c001fa58:	ff 36                	push   DWORD PTR [esi]
c001fa5a:	e8 9d f4 ff ff       	call   c001eefc <Vm::fpu32ToInternal(unsigned int)>
c001fa5f:	e9 81 02 00 00       	jmp    c001fce5 <Vm::x87Handler(regs*)+0x9fb>
c001fa64:	80 fa 04             	cmp    dl,0x4
c001fa67:	75 0f                	jne    c001fa78 <Vm::x87Handler(regs*)+0x78e>
c001fa69:	83 ec 0c             	sub    esp,0xc
c001fa6c:	ff 36                	push   DWORD PTR [esi]
c001fa6e:	e8 89 f4 ff ff       	call   c001eefc <Vm::fpu32ToInternal(unsigned int)>
c001fa73:	e9 86 01 00 00       	jmp    c001fbfe <Vm::x87Handler(regs*)+0x914>
c001fa78:	80 fa 05             	cmp    dl,0x5
c001fa7b:	75 1b                	jne    c001fa98 <Vm::x87Handler(regs*)+0x7ae>
c001fa7d:	83 ec 0c             	sub    esp,0xc
c001fa80:	6a 00                	push   0x0
c001fa82:	e8 26 f7 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fa87:	89 c7                	mov    edi,eax
c001fa89:	89 d5                	mov    ebp,edx
c001fa8b:	58                   	pop    eax
c001fa8c:	ff 36                	push   DWORD PTR [esi]
c001fa8e:	e8 69 f4 ff ff       	call   c001eefc <Vm::fpu32ToInternal(unsigned int)>
c001fa93:	e9 a3 01 00 00       	jmp    c001fc3b <Vm::x87Handler(regs*)+0x951>
c001fa98:	80 fa 06             	cmp    dl,0x6
c001fa9b:	75 0f                	jne    c001faac <Vm::x87Handler(regs*)+0x7c2>
c001fa9d:	83 ec 0c             	sub    esp,0xc
c001faa0:	ff 36                	push   DWORD PTR [esi]
c001faa2:	e8 55 f4 ff ff       	call   c001eefc <Vm::fpu32ToInternal(unsigned int)>
c001faa7:	e9 ae 01 00 00       	jmp    c001fc5a <Vm::x87Handler(regs*)+0x970>
c001faac:	31 c0                	xor    eax,eax
c001faae:	80 fa 07             	cmp    dl,0x7
c001fab1:	0f 85 94 02 00 00    	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001fab7:	83 ec 0c             	sub    esp,0xc
c001faba:	6a 00                	push   0x0
c001fabc:	e8 ec f6 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fac1:	89 c7                	mov    edi,eax
c001fac3:	89 d5                	mov    ebp,edx
c001fac5:	58                   	pop    eax
c001fac6:	ff 36                	push   DWORD PTR [esi]
c001fac8:	e8 2f f4 ff ff       	call   c001eefc <Vm::fpu32ToInternal(unsigned int)>
c001facd:	e9 cb 01 00 00       	jmp    c001fc9d <Vm::x87Handler(regs*)+0x9b3>
c001fad2:	80 fa 03             	cmp    dl,0x3
c001fad5:	0f 85 d3 01 00 00    	jne    c001fcae <Vm::x87Handler(regs*)+0x9c4>
c001fadb:	e8 b8 f7 ff ff       	call   c001f298 <Vm::fpuPop()>
c001fae0:	51                   	push   ecx
c001fae1:	51                   	push   ecx
c001fae2:	e9 de 01 00 00       	jmp    c001fcc5 <Vm::x87Handler(regs*)+0x9db>
c001fae7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faeb:	80 fa 01             	cmp    dl,0x1
c001faee:	75 09                	jne    c001faf9 <Vm::x87Handler(regs*)+0x80f>
c001faf0:	57                   	push   edi
c001faf1:	57                   	push   edi
c001faf2:	8b 06                	mov    eax,DWORD PTR [esi]
c001faf4:	e9 e3 01 00 00       	jmp    c001fcdc <Vm::x87Handler(regs*)+0x9f2>
c001faf9:	80 fa 04             	cmp    dl,0x4
c001fafc:	75 12                	jne    c001fb10 <Vm::x87Handler(regs*)+0x826>
c001fafe:	31 d2                	xor    edx,edx
c001fb00:	51                   	push   ecx
c001fb01:	51                   	push   ecx
c001fb02:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb04:	52                   	push   edx
c001fb05:	50                   	push   eax
c001fb06:	e8 d0 f4 ff ff       	call   c001efdb <Vm::fpuLongToFloat(long long)>
c001fb0b:	e9 ee 00 00 00       	jmp    c001fbfe <Vm::x87Handler(regs*)+0x914>
c001fb10:	31 c0                	xor    eax,eax
c001fb12:	80 fa 07             	cmp    dl,0x7
c001fb15:	0f 85 30 02 00 00    	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001fb1b:	83 ec 0c             	sub    esp,0xc
c001fb1e:	6a 00                	push   0x0
c001fb20:	e8 88 f6 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fb25:	89 c7                	mov    edi,eax
c001fb27:	89 d5                	mov    ebp,edx
c001fb29:	58                   	pop    eax
c001fb2a:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb2c:	5a                   	pop    edx
c001fb2d:	31 d2                	xor    edx,edx
c001fb2f:	52                   	push   edx
c001fb30:	50                   	push   eax
c001fb31:	e8 a5 f4 ff ff       	call   c001efdb <Vm::fpuLongToFloat(long long)>
c001fb36:	e9 62 01 00 00       	jmp    c001fc9d <Vm::x87Handler(regs*)+0x9b3>
c001fb3b:	84 d2                	test   dl,dl
c001fb3d:	75 0d                	jne    c001fb4c <Vm::x87Handler(regs*)+0x862>
c001fb3f:	31 d2                	xor    edx,edx
c001fb41:	55                   	push   ebp
c001fb42:	55                   	push   ebp
c001fb43:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb45:	52                   	push   edx
c001fb46:	50                   	push   eax
c001fb47:	e9 d3 01 00 00       	jmp    c001fd1f <Vm::x87Handler(regs*)+0xa35>
c001fb4c:	31 c0                	xor    eax,eax
c001fb4e:	80 fa 02             	cmp    dl,0x2
c001fb51:	0f 85 f4 01 00 00    	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001fb57:	83 ec 0c             	sub    esp,0xc
c001fb5a:	6a 00                	push   0x0
c001fb5c:	e8 4c f6 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fb61:	59                   	pop    ecx
c001fb62:	5f                   	pop    edi
c001fb63:	e9 6a f9 ff ff       	jmp    c001f4d2 <Vm::x87Handler(regs*)+0x1e8>
c001fb68:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb6c:	84 d2                	test   dl,dl
c001fb6e:	75 2a                	jne    c001fb9a <Vm::x87Handler(regs*)+0x8b0>
c001fb70:	50                   	push   eax
c001fb71:	50                   	push   eax
c001fb72:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb75:	ff 36                	push   DWORD PTR [esi]
c001fb77:	e8 c5 f3 ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001fb7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb83:	89 c6                	mov    esi,eax
c001fb85:	89 d7                	mov    edi,edx
c001fb87:	e8 21 f6 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fb8c:	57                   	push   edi
c001fb8d:	56                   	push   esi
c001fb8e:	52                   	push   edx
c001fb8f:	50                   	push   eax
c001fb90:	e8 8e f5 ff ff       	call   c001f123 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb95:	e9 64 01 00 00       	jmp    c001fcfe <Vm::x87Handler(regs*)+0xa14>
c001fb9a:	80 fa 01             	cmp    dl,0x1
c001fb9d:	75 11                	jne    c001fbb0 <Vm::x87Handler(regs*)+0x8c6>
c001fb9f:	50                   	push   eax
c001fba0:	50                   	push   eax
c001fba1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fba4:	ff 36                	push   DWORD PTR [esi]
c001fba6:	e8 96 f3 ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001fbab:	e9 35 01 00 00       	jmp    c001fce5 <Vm::x87Handler(regs*)+0x9fb>
c001fbb0:	80 fa 02             	cmp    dl,0x2
c001fbb3:	0f 85 54 f9 ff ff    	jne    c001f50d <Vm::x87Handler(regs*)+0x223>
c001fbb9:	55                   	push   ebp
c001fbba:	55                   	push   ebp
c001fbbb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbbe:	ff 36                	push   DWORD PTR [esi]
c001fbc0:	e8 7c f3 ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001fbc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbcc:	89 c6                	mov    esi,eax
c001fbce:	89 d7                	mov    edi,edx
c001fbd0:	e8 d8 f5 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fbd5:	57                   	push   edi
c001fbd6:	56                   	push   esi
c001fbd7:	52                   	push   edx
c001fbd8:	50                   	push   eax
c001fbd9:	e8 f2 f4 ff ff       	call   c001f0d0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fbe2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fbe5:	83 c4 20             	add    esp,0x20
c001fbe8:	e9 74 f7 ff ff       	jmp    c001f361 <Vm::x87Handler(regs*)+0x77>
c001fbed:	80 fa 04             	cmp    dl,0x4
c001fbf0:	75 2a                	jne    c001fc1c <Vm::x87Handler(regs*)+0x932>
c001fbf2:	51                   	push   ecx
c001fbf3:	51                   	push   ecx
c001fbf4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbf7:	ff 36                	push   DWORD PTR [esi]
c001fbf9:	e8 43 f3 ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001fbfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc05:	89 c6                	mov    esi,eax
c001fc07:	89 d7                	mov    edi,edx
c001fc09:	e8 9f f5 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fc0e:	57                   	push   edi
c001fc0f:	56                   	push   esi
c001fc10:	52                   	push   edx
c001fc11:	50                   	push   eax
c001fc12:	e8 36 f5 ff ff       	call   c001f14d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc17:	e9 e2 00 00 00       	jmp    c001fcfe <Vm::x87Handler(regs*)+0xa14>
c001fc1c:	80 fa 05             	cmp    dl,0x5
c001fc1f:	75 28                	jne    c001fc49 <Vm::x87Handler(regs*)+0x95f>
c001fc21:	83 ec 0c             	sub    esp,0xc
c001fc24:	6a 00                	push   0x0
c001fc26:	e8 82 f5 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fc2b:	89 c7                	mov    edi,eax
c001fc2d:	89 d5                	mov    ebp,edx
c001fc2f:	58                   	pop    eax
c001fc30:	5a                   	pop    edx
c001fc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc34:	ff 36                	push   DWORD PTR [esi]
c001fc36:	e8 06 f3 ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001fc3b:	83 c4 10             	add    esp,0x10
c001fc3e:	55                   	push   ebp
c001fc3f:	57                   	push   edi
c001fc40:	52                   	push   edx
c001fc41:	50                   	push   eax
c001fc42:	e8 06 f5 ff ff       	call   c001f14d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc47:	eb 60                	jmp    c001fca9 <Vm::x87Handler(regs*)+0x9bf>
c001fc49:	80 fa 06             	cmp    dl,0x6
c001fc4c:	75 2a                	jne    c001fc78 <Vm::x87Handler(regs*)+0x98e>
c001fc4e:	51                   	push   ecx
c001fc4f:	51                   	push   ecx
c001fc50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc53:	ff 36                	push   DWORD PTR [esi]
c001fc55:	e8 e7 f2 ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001fc5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc61:	89 c6                	mov    esi,eax
c001fc63:	89 d7                	mov    edi,edx
c001fc65:	e8 43 f5 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fc6a:	57                   	push   edi
c001fc6b:	56                   	push   esi
c001fc6c:	52                   	push   edx
c001fc6d:	50                   	push   eax
c001fc6e:	e8 08 f5 ff ff       	call   c001f17b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc73:	e9 86 00 00 00       	jmp    c001fcfe <Vm::x87Handler(regs*)+0xa14>
c001fc78:	31 c0                	xor    eax,eax
c001fc7a:	80 fa 07             	cmp    dl,0x7
c001fc7d:	0f 85 c8 00 00 00    	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001fc83:	83 ec 0c             	sub    esp,0xc
c001fc86:	6a 00                	push   0x0
c001fc88:	e8 20 f5 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fc8d:	89 c7                	mov    edi,eax
c001fc8f:	89 d5                	mov    ebp,edx
c001fc91:	58                   	pop    eax
c001fc92:	5a                   	pop    edx
c001fc93:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc96:	ff 36                	push   DWORD PTR [esi]
c001fc98:	e8 a4 f2 ff ff       	call   c001ef41 <Vm::fpu64ToInternal(unsigned long long)>
c001fc9d:	83 c4 10             	add    esp,0x10
c001fca0:	55                   	push   ebp
c001fca1:	57                   	push   edi
c001fca2:	52                   	push   edx
c001fca3:	50                   	push   eax
c001fca4:	e8 d2 f4 ff ff       	call   c001f17b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fca9:	83 c4 0c             	add    esp,0xc
c001fcac:	eb 53                	jmp    c001fd01 <Vm::x87Handler(regs*)+0xa17>
c001fcae:	31 c0                	xor    eax,eax
c001fcb0:	80 fa 02             	cmp    dl,0x2
c001fcb3:	0f 85 92 00 00 00    	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001fcb9:	83 ec 0c             	sub    esp,0xc
c001fcbc:	6a 00                	push   0x0
c001fcbe:	e8 ea f4 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fcc3:	59                   	pop    ecx
c001fcc4:	5f                   	pop    edi
c001fcc5:	52                   	push   edx
c001fcc6:	50                   	push   eax
c001fcc7:	e8 27 f2 ff ff       	call   c001eef3 <Vm::fpuInternalTo64(unsigned long long)>
c001fccc:	eb 70                	jmp    c001fd3e <Vm::x87Handler(regs*)+0xa54>
c001fcce:	31 c0                	xor    eax,eax
c001fcd0:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fcd5:	75 74                	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001fcd7:	50                   	push   eax
c001fcd8:	50                   	push   eax
c001fcd9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fcdc:	31 d2                	xor    edx,edx
c001fcde:	52                   	push   edx
c001fcdf:	50                   	push   eax
c001fce0:	e8 f6 f2 ff ff       	call   c001efdb <Vm::fpuLongToFloat(long long)>
c001fce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcec:	89 c6                	mov    esi,eax
c001fcee:	89 d7                	mov    edi,edx
c001fcf0:	e8 b8 f4 ff ff       	call   c001f1ad <Vm::fpuGetReg(int)>
c001fcf5:	57                   	push   edi
c001fcf6:	56                   	push   esi
c001fcf7:	52                   	push   edx
c001fcf8:	50                   	push   eax
c001fcf9:	e8 5e f4 ff ff       	call   c001f15c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcfe:	83 c4 1c             	add    esp,0x1c
c001fd01:	52                   	push   edx
c001fd02:	50                   	push   eax
c001fd03:	6a 00                	push   0x0
c001fd05:	e8 e6 f4 ff ff       	call   c001f1f0 <Vm::fpuSetReg(int, unsigned long long)>
c001fd0a:	e9 f2 f7 ff ff       	jmp    c001f501 <Vm::x87Handler(regs*)+0x217>
c001fd0f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd13:	80 fa 05             	cmp    dl,0x5
c001fd16:	75 11                	jne    c001fd29 <Vm::x87Handler(regs*)+0xa3f>
c001fd18:	55                   	push   ebp
c001fd19:	55                   	push   ebp
c001fd1a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd1d:	ff 36                	push   DWORD PTR [esi]
c001fd1f:	e8 81 f2 ff ff       	call   c001efa5 <Vm::fpuULongToFloat(unsigned long long)>
c001fd24:	e9 cf f7 ff ff       	jmp    c001f4f8 <Vm::x87Handler(regs*)+0x20e>
c001fd29:	31 c0                	xor    eax,eax
c001fd2b:	80 fa 07             	cmp    dl,0x7
c001fd2e:	75 1b                	jne    c001fd4b <Vm::x87Handler(regs*)+0xa61>
c001fd30:	e8 63 f5 ff ff       	call   c001f298 <Vm::fpuPop()>
c001fd35:	51                   	push   ecx
c001fd36:	51                   	push   ecx
c001fd37:	52                   	push   edx
c001fd38:	50                   	push   eax
c001fd39:	e8 0c f2 ff ff       	call   c001ef4a <Vm::fpuFloatToLong(unsigned long long)>
c001fd3e:	83 c4 10             	add    esp,0x10
c001fd41:	89 06                	mov    DWORD PTR [esi],eax
c001fd43:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fd46:	e9 f8 f7 ff ff       	jmp    c001f543 <Vm::x87Handler(regs*)+0x259>
c001fd4b:	83 c4 1c             	add    esp,0x1c
c001fd4e:	5b                   	pop    ebx
c001fd4f:	5e                   	pop    esi
c001fd50:	5f                   	pop    edi
c001fd51:	5d                   	pop    ebp
c001fd52:	c3                   	ret    

c001fd53 <__static_initialization_and_destruction_0(int, int)>:
c001fd53:	83 ec 0c             	sub    esp,0xc
c001fd56:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fd5b:	75 1a                	jne    c001fd77 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd5d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fd65:	75 10                	jne    c001fd77 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd67:	83 ec 0c             	sub    esp,0xc
c001fd6a:	68 80 10 03 c0       	push   0xc0031080
c001fd6f:	e8 3c 88 00 00       	call   c00285b0 <Vm::_FPUState::_FPUState()>
c001fd74:	83 c4 10             	add    esp,0x10
c001fd77:	90                   	nop
c001fd78:	83 c4 0c             	add    esp,0xc
c001fd7b:	c3                   	ret    

c001fd7c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	83 ec 08             	sub    esp,0x8
c001fd82:	68 ff ff 00 00       	push   0xffff
c001fd87:	6a 01                	push   0x1
c001fd89:	e8 c5 ff ff ff       	call   c001fd53 <__static_initialization_and_destruction_0(int, int)>
c001fd8e:	83 c4 10             	add    esp,0x10
c001fd91:	83 c4 0c             	add    esp,0xc
c001fd94:	c3                   	ret    
c001fd95:	90                   	nop

c001fd96 <FAT::getName()>:
c001fd96:	b8 c8 be 02 c0       	mov    eax,0xc002bec8
c001fd9b:	c3                   	ret    

c001fd9c <FAT::tell(void*, unsigned long long*)>:
c001fd9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fda1:	75 06                	jne    c001fda9 <FAT::tell(void*, unsigned long long*)+0xd>
c001fda3:	b8 04 00 00 00       	mov    eax,0x4
c001fda8:	c3                   	ret    
c001fda9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fdae:	75 06                	jne    c001fdb6 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fdb0:	b8 04 00 00 00       	mov    eax,0x4
c001fdb5:	c3                   	ret    
c001fdb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdba:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fdbd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fdc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdc4:	89 01                	mov    DWORD PTR [ecx],eax
c001fdc6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fdc9:	b8 00 00 00 00       	mov    eax,0x0
c001fdce:	c3                   	ret    
c001fdcf:	90                   	nop

c001fdd0 <FAT::stat(void*, unsigned long long*)>:
c001fdd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fdd5:	75 06                	jne    c001fddd <FAT::stat(void*, unsigned long long*)+0xd>
c001fdd7:	b8 04 00 00 00       	mov    eax,0x4
c001fddc:	c3                   	ret    
c001fddd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fde2:	75 06                	jne    c001fdea <FAT::stat(void*, unsigned long long*)+0x1a>
c001fde4:	b8 04 00 00 00       	mov    eax,0x4
c001fde9:	c3                   	ret    
c001fdea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fdf1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fdf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdf8:	89 01                	mov    DWORD PTR [ecx],eax
c001fdfa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fdfd:	b8 00 00 00 00       	mov    eax,0x0
c001fe02:	c3                   	ret    
c001fe03:	90                   	nop

c001fe04 <FAT::~FAT()>:
c001fe04:	83 ec 0c             	sub    esp,0xc
c001fe07:	ba 4c bf 02 c0       	mov    edx,0xc002bf4c
c001fe0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe10:	89 10                	mov    DWORD PTR [eax],edx
c001fe12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe16:	83 ec 0c             	sub    esp,0xc
c001fe19:	50                   	push   eax
c001fe1a:	e8 13 30 ff ff       	call   c0012e32 <Filesystem::~Filesystem()>
c001fe1f:	83 c4 10             	add    esp,0x10
c001fe22:	90                   	nop
c001fe23:	83 c4 0c             	add    esp,0xc
c001fe26:	c3                   	ret    
c001fe27:	90                   	nop

c001fe28 <FAT::~FAT()>:
c001fe28:	83 ec 0c             	sub    esp,0xc
c001fe2b:	83 ec 0c             	sub    esp,0xc
c001fe2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe32:	e8 cd ff ff ff       	call   c001fe04 <FAT::~FAT()>
c001fe37:	83 c4 10             	add    esp,0x10
c001fe3a:	83 ec 08             	sub    esp,0x8
c001fe3d:	6a 08                	push   0x8
c001fe3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe43:	e8 e1 2b ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c001fe48:	83 c4 10             	add    esp,0x10
c001fe4b:	83 c4 0c             	add    esp,0xc
c001fe4e:	c3                   	ret    
c001fe4f:	90                   	nop

c001fe50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fe50:	83 ec 1c             	sub    esp,0x1c
c001fe53:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fe5a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fe5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe63:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c001fe6a:	83 f8 ff             	cmp    eax,0xffffffff
c001fe6d:	75 34                	jne    c001fea3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fe6f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe73:	88 c2                	mov    dl,al
c001fe75:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001fe7a:	01 d0                	add    eax,edx
c001fe7c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe80:	8b 15 e0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310e0
c001fe86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe8a:	89 14 85 00 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef00],edx
c001fe91:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001fe96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fe9a:	89 14 85 80 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee80],edx
c001fea1:	eb 17                	jmp    c001feba <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fea3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fea7:	88 c2                	mov    dl,al
c001fea9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fead:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c001feb4:	01 d0                	add    eax,edx
c001feb6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001feba:	83 ec 04             	sub    esp,0x4
c001febd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fec5:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fec9:	50                   	push   eax
c001feca:	e8 69 6e fe ff       	call   c0006d38 <f_getlabel>
c001fecf:	83 c4 10             	add    esp,0x10
c001fed2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fed6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fedb:	75 07                	jne    c001fee4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fedd:	b8 00 00 00 00       	mov    eax,0x0
c001fee2:	eb 05                	jmp    c001fee9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fee4:	b8 01 00 00 00       	mov    eax,0x1
c001fee9:	83 c4 1c             	add    esp,0x1c
c001feec:	c3                   	ret    
c001feed:	90                   	nop

c001feee <FAT::setlabel(LogicalDisk*, int, char*)>:
c001feee:	57                   	push   edi
c001feef:	83 ec 58             	sub    esp,0x58
c001fef2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fefa:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fefe:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff03:	b8 00 00 00 00       	mov    eax,0x0
c001ff08:	fc                   	cld    
c001ff09:	89 d7                	mov    edi,edx
c001ff0b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff0d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff11:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c001ff18:	83 f8 ff             	cmp    eax,0xffffffff
c001ff1b:	75 34                	jne    c001ff51 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ff1d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff21:	88 c2                	mov    dl,al
c001ff23:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001ff28:	01 d0                	add    eax,edx
c001ff2a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff2e:	8b 15 e0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310e0
c001ff34:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff38:	89 14 85 00 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef00],edx
c001ff3f:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001ff44:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ff48:	89 14 85 80 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee80],edx
c001ff4f:	eb 17                	jmp    c001ff68 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ff51:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff55:	88 c2                	mov    dl,al
c001ff57:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff5b:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c001ff62:	01 d0                	add    eax,edx
c001ff64:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff68:	83 ec 08             	sub    esp,0x8
c001ff6b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ff6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff73:	50                   	push   eax
c001ff74:	e8 fb 09 fe ff       	call   c0000974 <strcat>
c001ff79:	83 c4 10             	add    esp,0x10
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff83:	50                   	push   eax
c001ff84:	e8 9d 6f fe ff       	call   c0006f26 <f_setlabel>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ff90:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ff95:	75 07                	jne    c001ff9e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ff97:	b8 00 00 00 00       	mov    eax,0x0
c001ff9c:	eb 05                	jmp    c001ffa3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ff9e:	b8 01 00 00 00       	mov    eax,0x1
c001ffa3:	83 c4 58             	add    esp,0x58
c001ffa6:	5f                   	pop    edi
c001ffa7:	c3                   	ret    

c001ffa8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ffa8:	83 ec 2c             	sub    esp,0x2c
c001ffab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ffb3:	83 ec 08             	sub    esp,0x8
c001ffb6:	68 ec be 02 c0       	push   0xc002beec
c001ffbb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffbf:	e8 fc 08 fe ff       	call   c00008c0 <strcmp>
c001ffc4:	83 c4 10             	add    esp,0x10
c001ffc7:	85 c0                	test   eax,eax
c001ffc9:	0f 94 c0             	sete   al
c001ffcc:	84 c0                	test   al,al
c001ffce:	74 0d                	je     c001ffdd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ffd0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ffd8:	e9 a6 00 00 00       	jmp    c0020083 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffdd:	83 ec 08             	sub    esp,0x8
c001ffe0:	68 de be 02 c0       	push   0xc002bede
c001ffe5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffe9:	e8 d2 08 fe ff       	call   c00008c0 <strcmp>
c001ffee:	83 c4 10             	add    esp,0x10
c001fff1:	85 c0                	test   eax,eax
c001fff3:	0f 94 c0             	sete   al
c001fff6:	84 c0                	test   al,al
c001fff8:	74 0a                	je     c0020004 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fffa:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020002:	eb 7f                	jmp    c0020083 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020004:	83 ec 08             	sub    esp,0x8
c0020007:	68 e4 be 02 c0       	push   0xc002bee4
c002000c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020010:	e8 ab 08 fe ff       	call   c00008c0 <strcmp>
c0020015:	83 c4 10             	add    esp,0x10
c0020018:	85 c0                	test   eax,eax
c002001a:	0f 94 c0             	sete   al
c002001d:	84 c0                	test   al,al
c002001f:	74 0a                	je     c002002b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020021:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020029:	eb 58                	jmp    c0020083 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002002b:	83 ec 08             	sub    esp,0x8
c002002e:	68 0c 8d 02 c0       	push   0xc0028d0c
c0020033:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020037:	e8 84 08 fe ff       	call   c00008c0 <strcmp>
c002003c:	83 c4 10             	add    esp,0x10
c002003f:	85 c0                	test   eax,eax
c0020041:	0f 94 c0             	sete   al
c0020044:	84 c0                	test   al,al
c0020046:	74 0a                	je     c0020052 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020048:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020050:	eb 31                	jmp    c0020083 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020052:	83 ec 08             	sub    esp,0x8
c0020055:	68 ea be 02 c0       	push   0xc002beea
c002005a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002005e:	e8 5d 08 fe ff       	call   c00008c0 <strcmp>
c0020063:	83 c4 10             	add    esp,0x10
c0020066:	85 c0                	test   eax,eax
c0020068:	0f 94 c0             	sete   al
c002006b:	84 c0                	test   al,al
c002006d:	74 0a                	je     c0020079 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002006f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020077:	eb 0a                	jmp    c0020083 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020079:	b8 08 00 00 00       	mov    eax,0x8
c002007e:	e9 04 01 00 00       	jmp    c0020187 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020083:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002008a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002008f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020093:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c002009a:	83 f8 ff             	cmp    eax,0xffffffff
c002009d:	75 34                	jne    c00200d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002009f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00200a3:	88 c2                	mov    dl,al
c00200a5:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c00200aa:	01 d0                	add    eax,edx
c00200ac:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00200b0:	8b 15 e0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310e0
c00200b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200ba:	89 14 85 00 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef00],edx
c00200c1:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c00200c6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00200ca:	89 14 85 80 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee80],edx
c00200d1:	eb 17                	jmp    c00200ea <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00200d3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00200d7:	88 c2                	mov    dl,al
c00200d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200dd:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c00200e4:	01 d0                	add    eax,edx
c00200e6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00200ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200ee:	88 04 24             	mov    BYTE PTR [esp],al
c00200f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00200f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200f9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020101:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020106:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002010e:	83 ec 0c             	sub    esp,0xc
c0020111:	68 00 20 00 00       	push   0x2000
c0020116:	e8 1f f7 fe ff       	call   c000f83a <malloc>
c002011b:	83 c4 10             	add    esp,0x10
c002011e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020122:	68 00 20 00 00       	push   0x2000
c0020127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002012b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002012f:	50                   	push   eax
c0020130:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020134:	50                   	push   eax
c0020135:	e8 37 72 fe ff       	call   c0007371 <f_mkfs>
c002013a:	83 c4 10             	add    esp,0x10
c002013d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020141:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020146:	75 07                	jne    c002014f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020148:	b8 00 00 00 00       	mov    eax,0x0
c002014d:	eb 38                	jmp    c0020187 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002014f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020154:	75 17                	jne    c002016d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020156:	83 ec 0c             	sub    esp,0xc
c0020159:	68 1c bf 02 c0       	push   0xc002bf1c
c002015e:	e8 a6 29 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0020163:	83 c4 10             	add    esp,0x10
c0020166:	b8 09 00 00 00       	mov    eax,0x9
c002016b:	eb 1a                	jmp    c0020187 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002016d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020171:	83 ec 08             	sub    esp,0x8
c0020174:	50                   	push   eax
c0020175:	68 f0 be 02 c0       	push   0xc002bef0
c002017a:	e8 8a 29 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c002017f:	83 c4 10             	add    esp,0x10
c0020182:	b8 01 00 00 00       	mov    eax,0x1
c0020187:	83 c4 2c             	add    esp,0x2c
c002018a:	c3                   	ret    
c002018b:	90                   	nop

c002018c <FAT::tryMount(LogicalDisk*, int)>:
c002018c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020192:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c0020197:	83 f8 14             	cmp    eax,0x14
c002019a:	75 17                	jne    c00201b3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002019c:	83 ec 0c             	sub    esp,0xc
c002019f:	68 02 bf 02 c0       	push   0xc002bf02
c00201a4:	e8 44 9e ff ff       	call   c0019fed <Krnl::panic(char const*)>
c00201a9:	83 c4 10             	add    esp,0x10
c00201ac:	b0 00                	mov    al,0x0
c00201ae:	e9 d7 01 00 00       	jmp    c002038a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201b3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00201ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00201c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00201c6:	3d 00 02 00 00       	cmp    eax,0x200
c00201cb:	74 07                	je     c00201d4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00201cd:	b0 00                	mov    al,0x0
c00201cf:	e9 b6 01 00 00       	jmp    c002038a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201d4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00201dc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00201e3:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c00201ea:	83 f8 ff             	cmp    eax,0xffffffff
c00201ed:	74 07                	je     c00201f6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00201ef:	b0 01                	mov    al,0x1
c00201f1:	e9 94 01 00 00       	jmp    c002038a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201f6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020200:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020208:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002020f:	88 c2                	mov    dl,al
c0020211:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c0020216:	01 d0                	add    eax,edx
c0020218:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002021f:	8b 15 e0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310e0
c0020225:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002022c:	89 14 85 00 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef00],edx
c0020233:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c0020238:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002023f:	89 14 85 80 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee80],edx
c0020246:	83 ec 0c             	sub    esp,0xc
c0020249:	68 54 02 00 00       	push   0x254
c002024e:	e8 e7 f5 fe ff       	call   c000f83a <malloc>
c0020253:	83 c4 10             	add    esp,0x10
c0020256:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002025d:	83 ec 04             	sub    esp,0x4
c0020260:	6a 00                	push   0x0
c0020262:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020269:	50                   	push   eax
c002026a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020271:	e8 b9 4c fe ff       	call   c0004f2f <f_mount>
c0020276:	83 c4 10             	add    esp,0x10
c0020279:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020280:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020288:	74 19                	je     c00202a3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002028a:	83 ec 0c             	sub    esp,0xc
c002028d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020294:	e8 c1 f5 fe ff       	call   c000f85a <rfree>
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	b0 00                	mov    al,0x0
c002029e:	e9 e7 00 00 00       	jmp    c002038a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202a3:	83 ec 04             	sub    esp,0x4
c00202a6:	68 00 01 00 00       	push   0x100
c00202ab:	6a 00                	push   0x0
c00202ad:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00202b4:	50                   	push   eax
c00202b5:	e8 be 04 fe ff       	call   c0000778 <memset>
c00202ba:	83 c4 10             	add    esp,0x10
c00202bd:	83 ec 08             	sub    esp,0x8
c00202c0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202c7:	50                   	push   eax
c00202c8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00202cf:	50                   	push   eax
c00202d0:	e8 9f 06 fe ff       	call   c0000974 <strcat>
c00202d5:	83 c4 10             	add    esp,0x10
c00202d8:	83 ec 08             	sub    esp,0x8
c00202db:	68 10 bf 02 c0       	push   0xc002bf10
c00202e0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00202e7:	50                   	push   eax
c00202e8:	e8 87 06 fe ff       	call   c0000974 <strcat>
c00202ed:	83 c4 10             	add    esp,0x10
c00202f0:	83 ec 04             	sub    esp,0x4
c00202f3:	6a 01                	push   0x1
c00202f5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00202fc:	50                   	push   eax
c00202fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020301:	50                   	push   eax
c0020302:	e8 8a 4c fe ff       	call   c0004f91 <f_open>
c0020307:	83 c4 10             	add    esp,0x10
c002030a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020311:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020318:	85 c0                	test   eax,eax
c002031a:	74 0a                	je     c0020326 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002031c:	78 2d                	js     c002034b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002031e:	83 e8 04             	sub    eax,0x4
c0020321:	83 f8 01             	cmp    eax,0x1
c0020324:	77 25                	ja     c002034b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020326:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002032e:	83 ec 0c             	sub    esp,0xc
c0020331:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020335:	50                   	push   eax
c0020336:	e8 a8 57 fe ff       	call   c0005ae3 <f_close>
c002033b:	83 c4 10             	add    esp,0x10
c002033e:	90                   	nop
c002033f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020347:	74 3a                	je     c0020383 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020349:	eb 2d                	jmp    c0020378 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002034b:	83 ec 0c             	sub    esp,0xc
c002034e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020355:	e8 00 f5 fe ff       	call   c000f85a <rfree>
c002035a:	83 c4 10             	add    esp,0x10
c002035d:	83 ec 04             	sub    esp,0x4
c0020360:	6a 00                	push   0x0
c0020362:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020369:	50                   	push   eax
c002036a:	6a 00                	push   0x0
c002036c:	e8 be 4b fe ff       	call   c0004f2f <f_mount>
c0020371:	83 c4 10             	add    esp,0x10
c0020374:	b0 00                	mov    al,0x0
c0020376:	eb 12                	jmp    c002038a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020378:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c002037d:	40                   	inc    eax
c002037e:	a3 e0 10 03 c0       	mov    ds:0xc00310e0,eax
c0020383:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002038a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020390:	c3                   	ret    
c0020391:	90                   	nop

c0020392 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020392:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020398:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00203a0:	74 0a                	je     c00203ac <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00203a2:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00203aa:	75 0a                	jne    c00203b6 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00203ac:	b8 04 00 00 00       	mov    eax,0x4
c00203b1:	e9 db 00 00 00       	jmp    c0020491 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00203b6:	83 ec 08             	sub    esp,0x8
c00203b9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00203c0:	50                   	push   eax
c00203c1:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00203c8:	e8 20 5d fe ff       	call   c00060ed <f_readdir>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00203d7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00203dd:	83 ec 0c             	sub    esp,0xc
c00203e0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00203e7:	83 c0 1a             	add    eax,0x1a
c00203ea:	50                   	push   eax
c00203eb:	e8 a4 03 fe ff       	call   c0000794 <strlen>
c00203f0:	83 c4 10             	add    esp,0x10
c00203f3:	ba 00 00 00 00       	mov    edx,0x0
c00203f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00203fc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020400:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020407:	0f b6 c0             	movzx  eax,al
c002040a:	83 e0 10             	and    eax,0x10
c002040d:	74 07                	je     c0020416 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c002040f:	b8 02 00 00 00       	mov    eax,0x2
c0020414:	eb 05                	jmp    c002041b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020416:	b8 01 00 00 00       	mov    eax,0x1
c002041b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002041f:	83 ec 08             	sub    esp,0x8
c0020422:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020429:	83 c0 1a             	add    eax,0x1a
c002042c:	50                   	push   eax
c002042d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020431:	83 c0 10             	add    eax,0x10
c0020434:	50                   	push   eax
c0020435:	e8 fa 03 fe ff       	call   c0000834 <strcpy>
c002043a:	83 c4 10             	add    esp,0x10
c002043d:	83 ec 04             	sub    esp,0x4
c0020440:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020447:	8d 44 24 08          	lea    eax,[esp+0x8]
c002044b:	50                   	push   eax
c002044c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020453:	e8 ec 02 fe ff       	call   c0000744 <memcpy>
c0020458:	83 c4 10             	add    esp,0x10
c002045b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020462:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020468:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002046f:	84 c0                	test   al,al
c0020471:	75 07                	jne    c002047a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020473:	b8 07 00 00 00       	mov    eax,0x7
c0020478:	eb 17                	jmp    c0020491 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002047a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020481:	85 c0                	test   eax,eax
c0020483:	75 07                	jne    c002048c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020485:	b8 00 00 00 00       	mov    eax,0x0
c002048a:	eb 05                	jmp    c0020491 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002048c:	b8 01 00 00 00       	mov    eax,0x1
c0020491:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020497:	c3                   	ret    

c0020498 <FAT::read(void*, unsigned long, void*, int*)>:
c0020498:	83 ec 1c             	sub    esp,0x1c
c002049b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204a0:	74 07                	je     c00204a9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00204a2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00204a7:	75 07                	jne    c00204b0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00204a9:	b8 04 00 00 00       	mov    eax,0x4
c00204ae:	eb 3d                	jmp    c00204ed <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00204b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204b4:	50                   	push   eax
c00204b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204c1:	e8 07 4f fe ff       	call   c00053cd <f_read>
c00204c6:	83 c4 10             	add    esp,0x10
c00204c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204d1:	89 c2                	mov    edx,eax
c00204d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204d7:	89 10                	mov    DWORD PTR [eax],edx
c00204d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204dd:	85 c0                	test   eax,eax
c00204df:	75 07                	jne    c00204e8 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00204e1:	b8 00 00 00 00       	mov    eax,0x0
c00204e6:	eb 05                	jmp    c00204ed <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00204e8:	b8 01 00 00 00       	mov    eax,0x1
c00204ed:	83 c4 1c             	add    esp,0x1c
c00204f0:	c3                   	ret    
c00204f1:	90                   	nop

c00204f2 <FAT::write(void*, unsigned long, void*, int*)>:
c00204f2:	83 ec 1c             	sub    esp,0x1c
c00204f5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204fa:	74 07                	je     c0020503 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00204fc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020501:	75 07                	jne    c002050a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020503:	b8 04 00 00 00       	mov    eax,0x4
c0020508:	eb 3d                	jmp    c0020547 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002050a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002050e:	50                   	push   eax
c002050f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020517:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002051b:	e8 2d 51 fe ff       	call   c000564d <f_write>
c0020520:	83 c4 10             	add    esp,0x10
c0020523:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002052b:	89 c2                	mov    edx,eax
c002052d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020531:	89 10                	mov    DWORD PTR [eax],edx
c0020533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020537:	85 c0                	test   eax,eax
c0020539:	75 07                	jne    c0020542 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002053b:	b8 00 00 00 00       	mov    eax,0x0
c0020540:	eb 05                	jmp    c0020547 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020542:	b8 01 00 00 00       	mov    eax,0x1
c0020547:	83 c4 1c             	add    esp,0x1c
c002054a:	c3                   	ret    
c002054b:	90                   	nop

c002054c <FAT::close(void*)>:
c002054c:	83 ec 1c             	sub    esp,0x1c
c002054f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020554:	75 07                	jne    c002055d <FAT::close(void*)+0x11>
c0020556:	b8 04 00 00 00       	mov    eax,0x4
c002055b:	eb 36                	jmp    c0020593 <FAT::close(void*)+0x47>
c002055d:	83 ec 0c             	sub    esp,0xc
c0020560:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020564:	e8 7a 55 fe ff       	call   c0005ae3 <f_close>
c0020569:	83 c4 10             	add    esp,0x10
c002056c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020570:	83 ec 0c             	sub    esp,0xc
c0020573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020577:	e8 ce f2 fe ff       	call   c000f84a <free>
c002057c:	83 c4 10             	add    esp,0x10
c002057f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020583:	85 c0                	test   eax,eax
c0020585:	75 07                	jne    c002058e <FAT::close(void*)+0x42>
c0020587:	b8 00 00 00 00       	mov    eax,0x0
c002058c:	eb 05                	jmp    c0020593 <FAT::close(void*)+0x47>
c002058e:	b8 01 00 00 00       	mov    eax,0x1
c0020593:	83 c4 1c             	add    esp,0x1c
c0020596:	c3                   	ret    
c0020597:	90                   	nop

c0020598 <FAT::closeDir(void*)>:
c0020598:	83 ec 1c             	sub    esp,0x1c
c002059b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205a0:	75 07                	jne    c00205a9 <FAT::closeDir(void*)+0x11>
c00205a2:	b8 04 00 00 00       	mov    eax,0x4
c00205a7:	eb 36                	jmp    c00205df <FAT::closeDir(void*)+0x47>
c00205a9:	83 ec 0c             	sub    esp,0xc
c00205ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205b0:	e8 16 5b fe ff       	call   c00060cb <f_closedir>
c00205b5:	83 c4 10             	add    esp,0x10
c00205b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205bc:	83 ec 0c             	sub    esp,0xc
c00205bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205c3:	e8 82 f2 fe ff       	call   c000f84a <free>
c00205c8:	83 c4 10             	add    esp,0x10
c00205cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205cf:	85 c0                	test   eax,eax
c00205d1:	75 07                	jne    c00205da <FAT::closeDir(void*)+0x42>
c00205d3:	b8 00 00 00 00       	mov    eax,0x0
c00205d8:	eb 05                	jmp    c00205df <FAT::closeDir(void*)+0x47>
c00205da:	b8 01 00 00 00       	mov    eax,0x1
c00205df:	83 c4 1c             	add    esp,0x1c
c00205e2:	c3                   	ret    
c00205e3:	90                   	nop

c00205e4 <FAT::seek(void*, unsigned long long)>:
c00205e4:	83 ec 2c             	sub    esp,0x2c
c00205e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00205eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00205ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00205f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205f7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00205fc:	75 07                	jne    c0020605 <FAT::seek(void*, unsigned long long)+0x21>
c00205fe:	b8 04 00 00 00       	mov    eax,0x4
c0020603:	eb 2f                	jmp    c0020634 <FAT::seek(void*, unsigned long long)+0x50>
c0020605:	83 ec 04             	sub    esp,0x4
c0020608:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002060c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020610:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020614:	e8 f9 54 fe ff       	call   c0005b12 <f_lseek>
c0020619:	83 c4 10             	add    esp,0x10
c002061c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020620:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020624:	85 c0                	test   eax,eax
c0020626:	75 07                	jne    c002062f <FAT::seek(void*, unsigned long long)+0x4b>
c0020628:	b8 00 00 00 00       	mov    eax,0x0
c002062d:	eb 05                	jmp    c0020634 <FAT::seek(void*, unsigned long long)+0x50>
c002062f:	b8 01 00 00 00       	mov    eax,0x1
c0020634:	83 c4 2c             	add    esp,0x2c
c0020637:	c3                   	ret    

c0020638 <fatWrapperReadDisk>:
c0020638:	83 ec 1c             	sub    esp,0x1c
c002063b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002063f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020647:	89 04 24             	mov    DWORD PTR [esp],eax
c002064a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002064e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020652:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020657:	8b 04 85 c0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f40]
c002065e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020662:	83 ec 0c             	sub    esp,0xc
c0020665:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020669:	52                   	push   edx
c002066a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002066e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020672:	50                   	push   eax
c0020673:	e8 4e 5c ff ff       	call   c00162c6 <LogicalDisk::read(unsigned long long, int, void*)>
c0020678:	83 c4 20             	add    esp,0x20
c002067b:	83 c4 1c             	add    esp,0x1c
c002067e:	c3                   	ret    

c002067f <fatWrapperWriteDisk>:
c002067f:	83 ec 1c             	sub    esp,0x1c
c0020682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020686:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002068a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002068e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020691:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020695:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020699:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002069e:	8b 04 85 c0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f40]
c00206a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206a9:	83 ec 0c             	sub    esp,0xc
c00206ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206b0:	52                   	push   edx
c00206b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206b9:	50                   	push   eax
c00206ba:	e8 73 5c ff ff       	call   c0016332 <LogicalDisk::write(unsigned long long, int, void*)>
c00206bf:	83 c4 20             	add    esp,0x20
c00206c2:	83 c4 1c             	add    esp,0x1c
c00206c5:	c3                   	ret    

c00206c6 <fatWrapperIoctl>:
c00206c6:	53                   	push   ebx
c00206c7:	83 ec 28             	sub    esp,0x28
c00206ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00206d2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00206d6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00206da:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00206df:	75 31                	jne    c0020712 <fatWrapperIoctl+0x4c>
c00206e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206e9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206ee:	8b 04 85 c0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f40]
c00206f5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00206fb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020701:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020705:	66 89 02             	mov    WORD PTR [edx],ax
c0020708:	b8 00 00 00 00       	mov    eax,0x0
c002070d:	e9 b2 00 00 00       	jmp    c00207c4 <fatWrapperIoctl+0xfe>
c0020712:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020717:	75 6a                	jne    c0020783 <fatWrapperIoctl+0xbd>
c0020719:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002071d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020721:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020726:	8b 04 85 c0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f40]
c002072d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020733:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020739:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002073f:	89 c8                	mov    eax,ecx
c0020741:	89 da                	mov    edx,ebx
c0020743:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020747:	c1 e0 0a             	shl    eax,0xa
c002074a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002074f:	8b 0c 8d c0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f40]
c0020756:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002075c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020762:	89 cb                	mov    ebx,ecx
c0020764:	c1 fb 1f             	sar    ebx,0x1f
c0020767:	53                   	push   ebx
c0020768:	51                   	push   ecx
c0020769:	52                   	push   edx
c002076a:	50                   	push   eax
c002076b:	e8 ec 5a 00 00       	call   c002625c <__udivdi3>
c0020770:	83 c4 10             	add    esp,0x10
c0020773:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020777:	89 01                	mov    DWORD PTR [ecx],eax
c0020779:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002077c:	b8 00 00 00 00       	mov    eax,0x0
c0020781:	eb 41                	jmp    c00207c4 <fatWrapperIoctl+0xfe>
c0020783:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020788:	75 07                	jne    c0020791 <fatWrapperIoctl+0xcb>
c002078a:	b8 00 00 00 00       	mov    eax,0x0
c002078f:	eb 33                	jmp    c00207c4 <fatWrapperIoctl+0xfe>
c0020791:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020796:	75 19                	jne    c00207b1 <fatWrapperIoctl+0xeb>
c0020798:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002079c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00207a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207a4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00207aa:	b8 00 00 00 00       	mov    eax,0x0
c00207af:	eb 13                	jmp    c00207c4 <fatWrapperIoctl+0xfe>
c00207b1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00207b6:	75 07                	jne    c00207bf <fatWrapperIoctl+0xf9>
c00207b8:	b8 00 00 00 00       	mov    eax,0x0
c00207bd:	eb 05                	jmp    c00207c4 <fatWrapperIoctl+0xfe>
c00207bf:	b8 04 00 00 00       	mov    eax,0x4
c00207c4:	83 c4 28             	add    esp,0x28
c00207c7:	5b                   	pop    ebx
c00207c8:	c3                   	ret    
c00207c9:	90                   	nop

c00207ca <FAT::FAT()>:
c00207ca:	83 ec 1c             	sub    esp,0x1c
c00207cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d1:	83 ec 0c             	sub    esp,0xc
c00207d4:	50                   	push   eax
c00207d5:	e8 34 26 ff ff       	call   c0012e0e <Filesystem::Filesystem()>
c00207da:	83 c4 10             	add    esp,0x10
c00207dd:	ba 4c bf 02 c0       	mov    edx,0xc002bf4c
c00207e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207e6:	89 10                	mov    DWORD PTR [eax],edx
c00207e8:	c7 05 e0 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00310e0,0x0
c00207f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207fa:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00207ff:	7f 15                	jg     c0020816 <FAT::FAT()+0x4c>
c0020801:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020805:	c7 04 85 00 11 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcef00],0xffffffff
c0020810:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020814:	eb e4                	jmp    c00207fa <FAT::FAT()+0x30>
c0020816:	90                   	nop
c0020817:	83 c4 1c             	add    esp,0x1c
c002081a:	c3                   	ret    
c002081b:	90                   	nop

c002081c <FAT::fixFilepath(char*)>:
c002081c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020820:	8a 00                	mov    al,BYTE PTR [eax]
c0020822:	3c 40                	cmp    al,0x40
c0020824:	7e 2c                	jle    c0020852 <FAT::fixFilepath(char*)+0x36>
c0020826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002082a:	8a 00                	mov    al,BYTE PTR [eax]
c002082c:	83 e8 41             	sub    eax,0x41
c002082f:	88 c2                	mov    dl,al
c0020831:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020835:	88 10                	mov    BYTE PTR [eax],dl
c0020837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002083b:	8a 00                	mov    al,BYTE PTR [eax]
c002083d:	0f be c0             	movsx  eax,al
c0020840:	8b 04 85 00 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef00]
c0020847:	83 c0 30             	add    eax,0x30
c002084a:	88 c2                	mov    dl,al
c002084c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020850:	88 10                	mov    BYTE PTR [eax],dl
c0020852:	90                   	nop
c0020853:	c3                   	ret    

c0020854 <FAT::open(char const*, void**, FileOpenMode)>:
c0020854:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002085a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020862:	74 0a                	je     c002086e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020864:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002086c:	75 0a                	jne    c0020878 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002086e:	b8 04 00 00 00       	mov    eax,0x4
c0020873:	e9 fd 00 00 00       	jmp    c0020975 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020878:	83 ec 08             	sub    esp,0x8
c002087b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020882:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020886:	50                   	push   eax
c0020887:	e8 a8 ff fd ff       	call   c0000834 <strcpy>
c002088c:	83 c4 10             	add    esp,0x10
c002088f:	83 ec 08             	sub    esp,0x8
c0020892:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020896:	50                   	push   eax
c0020897:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002089e:	e8 79 ff ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c00208a3:	83 c4 10             	add    esp,0x10
c00208a6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00208ae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208b5:	83 e0 01             	and    eax,0x1
c00208b8:	74 08                	je     c00208c2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00208ba:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00208c2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208c9:	83 e0 04             	and    eax,0x4
c00208cc:	74 10                	je     c00208de <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00208ce:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00208d6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00208de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208e5:	83 e0 02             	and    eax,0x2
c00208e8:	74 08                	je     c00208f2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00208ea:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00208f2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208f9:	83 e0 08             	and    eax,0x8
c00208fc:	74 08                	je     c0020906 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00208fe:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020906:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002090d:	83 e0 10             	and    eax,0x10
c0020910:	74 08                	je     c002091a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020912:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002091a:	83 ec 0c             	sub    esp,0xc
c002091d:	68 50 02 00 00       	push   0x250
c0020922:	e8 13 ef fe ff       	call   c000f83a <malloc>
c0020927:	83 c4 10             	add    esp,0x10
c002092a:	89 c2                	mov    edx,eax
c002092c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020933:	89 10                	mov    DWORD PTR [eax],edx
c0020935:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002093d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020944:	8b 00                	mov    eax,DWORD PTR [eax]
c0020946:	83 ec 04             	sub    esp,0x4
c0020949:	52                   	push   edx
c002094a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002094e:	52                   	push   edx
c002094f:	50                   	push   eax
c0020950:	e8 3c 46 fe ff       	call   c0004f91 <f_open>
c0020955:	83 c4 10             	add    esp,0x10
c0020958:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002095f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020967:	74 07                	je     c0020970 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020969:	b8 01 00 00 00       	mov    eax,0x1
c002096e:	eb 05                	jmp    c0020975 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020970:	b8 00 00 00 00       	mov    eax,0x0
c0020975:	81 c4 1c 01 00 00    	add    esp,0x11c
c002097b:	c3                   	ret    

c002097c <FAT::openDir(char const*, void**)>:
c002097c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020982:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002098a:	74 0a                	je     c0020996 <FAT::openDir(char const*, void**)+0x1a>
c002098c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020994:	75 07                	jne    c002099d <FAT::openDir(char const*, void**)+0x21>
c0020996:	b8 04 00 00 00       	mov    eax,0x4
c002099b:	eb 7d                	jmp    c0020a1a <FAT::openDir(char const*, void**)+0x9e>
c002099d:	83 ec 08             	sub    esp,0x8
c00209a0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209ab:	50                   	push   eax
c00209ac:	e8 83 fe fd ff       	call   c0000834 <strcpy>
c00209b1:	83 c4 10             	add    esp,0x10
c00209b4:	83 ec 08             	sub    esp,0x8
c00209b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209bb:	50                   	push   eax
c00209bc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209c3:	e8 54 fe ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c00209c8:	83 c4 10             	add    esp,0x10
c00209cb:	83 ec 0c             	sub    esp,0xc
c00209ce:	6a 4c                	push   0x4c
c00209d0:	e8 65 ee fe ff       	call   c000f83a <malloc>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	89 c2                	mov    edx,eax
c00209da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209e1:	89 10                	mov    DWORD PTR [eax],edx
c00209e3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00209ec:	83 ec 08             	sub    esp,0x8
c00209ef:	8d 54 24 14          	lea    edx,[esp+0x14]
c00209f3:	52                   	push   edx
c00209f4:	50                   	push   eax
c00209f5:	e8 cf 55 fe ff       	call   c0005fc9 <f_opendir>
c00209fa:	83 c4 10             	add    esp,0x10
c00209fd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a04:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020a0c:	74 07                	je     c0020a15 <FAT::openDir(char const*, void**)+0x99>
c0020a0e:	b8 01 00 00 00       	mov    eax,0x1
c0020a13:	eb 05                	jmp    c0020a1a <FAT::openDir(char const*, void**)+0x9e>
c0020a15:	b8 00 00 00 00       	mov    eax,0x0
c0020a1a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a20:	c3                   	ret    
c0020a21:	90                   	nop

c0020a22 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020a22:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020a28:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020a30:	75 0a                	jne    c0020a3c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020a32:	b8 04 00 00 00       	mov    eax,0x4
c0020a37:	e9 c9 00 00 00       	jmp    c0020b05 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a3c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020a44:	75 0a                	jne    c0020a50 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020a46:	b8 04 00 00 00       	mov    eax,0x4
c0020a4b:	e9 b5 00 00 00       	jmp    c0020b05 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a50:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020a58:	75 0a                	jne    c0020a64 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020a5a:	b8 04 00 00 00       	mov    eax,0x4
c0020a5f:	e9 a1 00 00 00       	jmp    c0020b05 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a64:	83 ec 08             	sub    esp,0x8
c0020a67:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a6e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a75:	50                   	push   eax
c0020a76:	e8 b9 fd fd ff       	call   c0000834 <strcpy>
c0020a7b:	83 c4 10             	add    esp,0x10
c0020a7e:	83 ec 08             	sub    esp,0x8
c0020a81:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020a88:	50                   	push   eax
c0020a89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a90:	e8 87 fd ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c0020a95:	83 c4 10             	add    esp,0x10
c0020a98:	83 ec 08             	sub    esp,0x8
c0020a9b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a9f:	50                   	push   eax
c0020aa0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020aa7:	50                   	push   eax
c0020aa8:	e8 db 56 fe ff       	call   c0006188 <f_stat>
c0020aad:	83 c4 10             	add    esp,0x10
c0020ab0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ab7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020abe:	85 c0                	test   eax,eax
c0020ac0:	74 07                	je     c0020ac9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020ac2:	83 f8 04             	cmp    eax,0x4
c0020ac5:	74 32                	je     c0020af9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020ac7:	eb 37                	jmp    c0020b00 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020ac9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020acd:	0f b6 c0             	movzx  eax,al
c0020ad0:	83 e0 10             	and    eax,0x10
c0020ad3:	0f 95 c2             	setne  dl
c0020ad6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020add:	88 10                	mov    BYTE PTR [eax],dl
c0020adf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ae2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020ae6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020aed:	89 01                	mov    DWORD PTR [ecx],eax
c0020aef:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020af2:	b8 00 00 00 00       	mov    eax,0x0
c0020af7:	eb 0c                	jmp    c0020b05 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020af9:	b8 02 00 00 00       	mov    eax,0x2
c0020afe:	eb 05                	jmp    c0020b05 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b00:	b8 01 00 00 00       	mov    eax,0x1
c0020b05:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020b0b:	c3                   	ret    

c0020b0c <FAT::unlink(char const*)>:
c0020b0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b1a:	75 07                	jne    c0020b23 <FAT::unlink(char const*)+0x17>
c0020b1c:	b8 04 00 00 00       	mov    eax,0x4
c0020b21:	eb 5c                	jmp    c0020b7f <FAT::unlink(char const*)+0x73>
c0020b23:	83 ec 08             	sub    esp,0x8
c0020b26:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b31:	50                   	push   eax
c0020b32:	e8 fd fc fd ff       	call   c0000834 <strcpy>
c0020b37:	83 c4 10             	add    esp,0x10
c0020b3a:	83 ec 08             	sub    esp,0x8
c0020b3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b41:	50                   	push   eax
c0020b42:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b49:	e8 ce fc ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c0020b4e:	83 c4 10             	add    esp,0x10
c0020b51:	83 ec 0c             	sub    esp,0xc
c0020b54:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b58:	50                   	push   eax
c0020b59:	e8 7c 59 fe ff       	call   c00064da <f_unlink>
c0020b5e:	83 c4 10             	add    esp,0x10
c0020b61:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b68:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020b6f:	85 c0                	test   eax,eax
c0020b71:	75 07                	jne    c0020b7a <FAT::unlink(char const*)+0x6e>
c0020b73:	b8 00 00 00 00       	mov    eax,0x0
c0020b78:	eb 05                	jmp    c0020b7f <FAT::unlink(char const*)+0x73>
c0020b7a:	b8 01 00 00 00       	mov    eax,0x1
c0020b7f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b85:	c3                   	ret    

c0020b86 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020b86:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020b8c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020b93:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020b9a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020b9e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ba2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020baa:	75 0a                	jne    c0020bb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020bac:	b8 04 00 00 00       	mov    eax,0x4
c0020bb1:	e9 1c 01 00 00       	jmp    c0020cd2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020bb6:	83 ec 08             	sub    esp,0x8
c0020bb9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020bc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020bc4:	50                   	push   eax
c0020bc5:	e8 6a fc fd ff       	call   c0000834 <strcpy>
c0020bca:	83 c4 10             	add    esp,0x10
c0020bcd:	83 ec 08             	sub    esp,0x8
c0020bd0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020bd4:	50                   	push   eax
c0020bd5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020bdc:	e8 3b fc ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c0020be1:	83 c4 10             	add    esp,0x10
c0020be4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020bec:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020bf4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bf9:	83 e0 01             	and    eax,0x1
c0020bfc:	74 08                	je     c0020c06 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020bfe:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020c06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c0b:	83 e0 02             	and    eax,0x2
c0020c0e:	74 08                	je     c0020c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020c10:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020c18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c1d:	83 e0 04             	and    eax,0x4
c0020c20:	74 08                	je     c0020c2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020c22:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020c2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c2f:	83 e0 08             	and    eax,0x8
c0020c32:	74 08                	je     c0020c3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020c34:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020c3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c41:	83 e0 01             	and    eax,0x1
c0020c44:	74 08                	je     c0020c4e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020c46:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020c4e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c53:	83 e0 02             	and    eax,0x2
c0020c56:	74 08                	je     c0020c60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020c58:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020c60:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c65:	83 e0 04             	and    eax,0x4
c0020c68:	74 08                	je     c0020c72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020c6a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020c72:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c77:	83 e0 08             	and    eax,0x8
c0020c7a:	74 08                	je     c0020c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020c7c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020c84:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020c8b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020c92:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020c9a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020ca2:	83 ec 04             	sub    esp,0x4
c0020ca5:	52                   	push   edx
c0020ca6:	50                   	push   eax
c0020ca7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020cab:	50                   	push   eax
c0020cac:	e8 cb 5e fe ff       	call   c0006b7c <f_chmod>
c0020cb1:	83 c4 10             	add    esp,0x10
c0020cb4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020cbb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020cc2:	85 c0                	test   eax,eax
c0020cc4:	75 07                	jne    c0020ccd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020cc6:	b8 00 00 00 00       	mov    eax,0x0
c0020ccb:	eb 05                	jmp    c0020cd2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020ccd:	b8 01 00 00 00       	mov    eax,0x1
c0020cd2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020cd8:	c3                   	ret    
c0020cd9:	90                   	nop

c0020cda <FAT::rename(char const*, char const*)>:
c0020cda:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ce0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020ce8:	74 0a                	je     c0020cf4 <FAT::rename(char const*, char const*)+0x1a>
c0020cea:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020cf2:	75 0a                	jne    c0020cfe <FAT::rename(char const*, char const*)+0x24>
c0020cf4:	b8 04 00 00 00       	mov    eax,0x4
c0020cf9:	e9 98 00 00 00       	jmp    c0020d96 <FAT::rename(char const*, char const*)+0xbc>
c0020cfe:	83 ec 08             	sub    esp,0x8
c0020d01:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d08:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d0f:	50                   	push   eax
c0020d10:	e8 1f fb fd ff       	call   c0000834 <strcpy>
c0020d15:	83 c4 10             	add    esp,0x10
c0020d18:	83 ec 08             	sub    esp,0x8
c0020d1b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020d22:	50                   	push   eax
c0020d23:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d2a:	e8 ed fa ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c0020d2f:	83 c4 10             	add    esp,0x10
c0020d32:	83 ec 08             	sub    esp,0x8
c0020d35:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020d3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d40:	50                   	push   eax
c0020d41:	e8 ee fa fd ff       	call   c0000834 <strcpy>
c0020d46:	83 c4 10             	add    esp,0x10
c0020d49:	83 ec 08             	sub    esp,0x8
c0020d4c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d50:	50                   	push   eax
c0020d51:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d58:	e8 bf fa ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c0020d5d:	83 c4 10             	add    esp,0x10
c0020d60:	83 ec 08             	sub    esp,0x8
c0020d63:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d67:	50                   	push   eax
c0020d68:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d6f:	50                   	push   eax
c0020d70:	e8 14 5b fe ff       	call   c0006889 <f_rename>
c0020d75:	83 c4 10             	add    esp,0x10
c0020d78:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020d7f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020d86:	85 c0                	test   eax,eax
c0020d88:	75 07                	jne    c0020d91 <FAT::rename(char const*, char const*)+0xb7>
c0020d8a:	b8 00 00 00 00       	mov    eax,0x0
c0020d8f:	eb 05                	jmp    c0020d96 <FAT::rename(char const*, char const*)+0xbc>
c0020d91:	b8 01 00 00 00       	mov    eax,0x1
c0020d96:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020d9c:	c3                   	ret    
c0020d9d:	90                   	nop

c0020d9e <FAT::mkdir(char const*)>:
c0020d9e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020da4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020dac:	75 07                	jne    c0020db5 <FAT::mkdir(char const*)+0x17>
c0020dae:	b8 04 00 00 00       	mov    eax,0x4
c0020db3:	eb 5c                	jmp    c0020e11 <FAT::mkdir(char const*)+0x73>
c0020db5:	83 ec 08             	sub    esp,0x8
c0020db8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020dbf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020dc3:	50                   	push   eax
c0020dc4:	e8 6b fa fd ff       	call   c0000834 <strcpy>
c0020dc9:	83 c4 10             	add    esp,0x10
c0020dcc:	83 ec 08             	sub    esp,0x8
c0020dcf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dd3:	50                   	push   eax
c0020dd4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ddb:	e8 3c fa ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c0020de0:	83 c4 10             	add    esp,0x10
c0020de3:	83 ec 0c             	sub    esp,0xc
c0020de6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020dea:	50                   	push   eax
c0020deb:	e8 6d 58 fe ff       	call   c000665d <f_mkdir>
c0020df0:	83 c4 10             	add    esp,0x10
c0020df3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020dfa:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e01:	85 c0                	test   eax,eax
c0020e03:	75 07                	jne    c0020e0c <FAT::mkdir(char const*)+0x6e>
c0020e05:	b8 00 00 00 00       	mov    eax,0x0
c0020e0a:	eb 05                	jmp    c0020e11 <FAT::mkdir(char const*)+0x73>
c0020e0c:	b8 01 00 00 00       	mov    eax,0x1
c0020e11:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e17:	c3                   	ret    

c0020e18 <FAT::exists(char const*)>:
c0020e18:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e1e:	83 ec 08             	sub    esp,0x8
c0020e21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e2c:	50                   	push   eax
c0020e2d:	e8 02 fa fd ff       	call   c0000834 <strcpy>
c0020e32:	83 c4 10             	add    esp,0x10
c0020e35:	83 ec 08             	sub    esp,0x8
c0020e38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e3c:	50                   	push   eax
c0020e3d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e44:	e8 d3 f9 ff ff       	call   c002081c <FAT::fixFilepath(char*)>
c0020e49:	83 c4 10             	add    esp,0x10
c0020e4c:	83 ec 08             	sub    esp,0x8
c0020e4f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020e56:	50                   	push   eax
c0020e57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e5b:	50                   	push   eax
c0020e5c:	e8 27 53 fe ff       	call   c0006188 <f_stat>
c0020e61:	83 c4 10             	add    esp,0x10
c0020e64:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020e6b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020e72:	85 c0                	test   eax,eax
c0020e74:	75 04                	jne    c0020e7a <FAT::exists(char const*)+0x62>
c0020e76:	b0 01                	mov    al,0x1
c0020e78:	eb 02                	jmp    c0020e7c <FAT::exists(char const*)+0x64>
c0020e7a:	b0 00                	mov    al,0x0
c0020e7c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020e82:	c3                   	ret    
c0020e83:	90                   	nop

c0020e84 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020e84:	b8 08 00 00 00       	mov    eax,0x8
c0020e89:	c3                   	ret    

c0020e8a <ISO9660::seek(void*, unsigned long long)>:
c0020e8a:	53                   	push   ebx
c0020e8b:	b8 04 00 00 00       	mov    eax,0x4
c0020e90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e9c:	85 d2                	test   edx,edx
c0020e9e:	74 17                	je     c0020eb7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020ea0:	89 c8                	mov    eax,ecx
c0020ea2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020ea5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020ea8:	b8 01 00 00 00       	mov    eax,0x1
c0020ead:	73 08                	jae    c0020eb7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020eaf:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020eb2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020eb5:	31 c0                	xor    eax,eax
c0020eb7:	5b                   	pop    ebx
c0020eb8:	c3                   	ret    
c0020eb9:	90                   	nop

c0020eba <ISO9660::tell(void*, unsigned long long*)>:
c0020eba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ec2:	85 d2                	test   edx,edx
c0020ec4:	74 12                	je     c0020ed8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020ec6:	85 c0                	test   eax,eax
c0020ec8:	74 0e                	je     c0020ed8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020eca:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020ecd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020ed0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020ed3:	89 10                	mov    DWORD PTR [eax],edx
c0020ed5:	31 c0                	xor    eax,eax
c0020ed7:	c3                   	ret    
c0020ed8:	b8 04 00 00 00       	mov    eax,0x4
c0020edd:	c3                   	ret    

c0020ede <ISO9660::getName()>:
c0020ede:	b8 a8 bf 02 c0       	mov    eax,0xc002bfa8
c0020ee3:	c3                   	ret    

c0020ee4 <ISO9660::stat(void*, unsigned long long*)>:
c0020ee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eec:	85 d2                	test   edx,edx
c0020eee:	74 12                	je     c0020f02 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ef0:	85 c0                	test   eax,eax
c0020ef2:	74 0e                	je     c0020f02 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ef4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020ef7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020efa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020efd:	89 10                	mov    DWORD PTR [eax],edx
c0020eff:	31 c0                	xor    eax,eax
c0020f01:	c3                   	ret    
c0020f02:	b8 04 00 00 00       	mov    eax,0x4
c0020f07:	c3                   	ret    

c0020f08 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f08:	b8 01 00 00 00       	mov    eax,0x1
c0020f0d:	c3                   	ret    

c0020f0e <ISO9660::unlink(char const*)>:
c0020f0e:	b8 01 00 00 00       	mov    eax,0x1
c0020f13:	c3                   	ret    

c0020f14 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020f14:	b8 01 00 00 00       	mov    eax,0x1
c0020f19:	c3                   	ret    

c0020f1a <ISO9660::rename(char const*, char const*)>:
c0020f1a:	b8 01 00 00 00       	mov    eax,0x1
c0020f1f:	c3                   	ret    

c0020f20 <ISO9660::mkdir(char const*)>:
c0020f20:	b8 01 00 00 00       	mov    eax,0x1
c0020f25:	c3                   	ret    

c0020f26 <ISO9660::close(void*)>:
c0020f26:	83 ec 0c             	sub    esp,0xc
c0020f29:	b8 04 00 00 00       	mov    eax,0x4
c0020f2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f32:	85 d2                	test   edx,edx
c0020f34:	74 0e                	je     c0020f44 <ISO9660::close(void*)+0x1e>
c0020f36:	83 ec 0c             	sub    esp,0xc
c0020f39:	52                   	push   edx
c0020f3a:	e8 0b e9 fe ff       	call   c000f84a <free>
c0020f3f:	83 c4 10             	add    esp,0x10
c0020f42:	31 c0                	xor    eax,eax
c0020f44:	83 c4 0c             	add    esp,0xc
c0020f47:	c3                   	ret    

c0020f48 <ISO9660::closeDir(void*)>:
c0020f48:	83 ec 0c             	sub    esp,0xc
c0020f4b:	b8 04 00 00 00       	mov    eax,0x4
c0020f50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f54:	85 d2                	test   edx,edx
c0020f56:	74 0e                	je     c0020f66 <ISO9660::closeDir(void*)+0x1e>
c0020f58:	83 ec 0c             	sub    esp,0xc
c0020f5b:	52                   	push   edx
c0020f5c:	e8 e9 e8 fe ff       	call   c000f84a <free>
c0020f61:	83 c4 10             	add    esp,0x10
c0020f64:	31 c0                	xor    eax,eax
c0020f66:	83 c4 0c             	add    esp,0xc
c0020f69:	c3                   	ret    

c0020f6a <ISO9660::~ISO9660()>:
c0020f6a:	83 ec 0c             	sub    esp,0xc
c0020f6d:	ba 0c c0 02 c0       	mov    edx,0xc002c00c
c0020f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f76:	89 10                	mov    DWORD PTR [eax],edx
c0020f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f7c:	83 ec 0c             	sub    esp,0xc
c0020f7f:	50                   	push   eax
c0020f80:	e8 ad 1e ff ff       	call   c0012e32 <Filesystem::~Filesystem()>
c0020f85:	83 c4 10             	add    esp,0x10
c0020f88:	90                   	nop
c0020f89:	83 c4 0c             	add    esp,0xc
c0020f8c:	c3                   	ret    
c0020f8d:	90                   	nop

c0020f8e <ISO9660::~ISO9660()>:
c0020f8e:	83 ec 0c             	sub    esp,0xc
c0020f91:	83 ec 0c             	sub    esp,0xc
c0020f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f98:	e8 cd ff ff ff       	call   c0020f6a <ISO9660::~ISO9660()>
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	83 ec 08             	sub    esp,0x8
c0020fa3:	6a 08                	push   0x8
c0020fa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fa9:	e8 7b 1a ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0020fae:	83 c4 10             	add    esp,0x10
c0020fb1:	83 c4 0c             	add    esp,0xc
c0020fb4:	c3                   	ret    

c0020fb5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020fb5:	55                   	push   ebp
c0020fb6:	31 c9                	xor    ecx,ecx
c0020fb8:	57                   	push   edi
c0020fb9:	56                   	push   esi
c0020fba:	53                   	push   ebx
c0020fbb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020fbf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020fc3:	89 eb                	mov    ebx,ebp
c0020fc5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020fc9:	39 ce                	cmp    esi,ecx
c0020fcb:	7e 17                	jle    c0020fe4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020fcd:	31 d2                	xor    edx,edx
c0020fcf:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020fd3:	7d 13                	jge    c0020fe8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020fd5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020fd9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020fdc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020fdf:	75 0d                	jne    c0020fee <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020fe1:	42                   	inc    edx
c0020fe2:	eb eb                	jmp    c0020fcf <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020fe4:	31 c0                	xor    eax,eax
c0020fe6:	eb 0a                	jmp    c0020ff2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020fe8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020fec:	eb 04                	jmp    c0020ff2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020fee:	41                   	inc    ecx
c0020fef:	43                   	inc    ebx
c0020ff0:	eb d7                	jmp    c0020fc9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020ff2:	5b                   	pop    ebx
c0020ff3:	5e                   	pop    esi
c0020ff4:	5f                   	pop    edi
c0020ff5:	5d                   	pop    ebp
c0020ff6:	c3                   	ret    

c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020ff7:	56                   	push   esi
c0020ff8:	53                   	push   ebx
c0020ff9:	52                   	push   edx
c0020ffa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020ffe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021006:	39 0d e0 11 03 c0    	cmp    DWORD PTR ds:0xc00311e0,ecx
c002100c:	75 08                	jne    c0021016 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002100e:	38 05 34 d0 02 c0    	cmp    BYTE PTR ds:0xc002d034,al
c0021014:	74 2b                	je     c0021041 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021016:	83 ec 0c             	sub    esp,0xc
c0021019:	a2 34 d0 02 c0       	mov    ds:0xc002d034,al
c002101e:	68 00 12 03 c0       	push   0xc0031200
c0021023:	0f be c0             	movsx  eax,al
c0021026:	6a 01                	push   0x1
c0021028:	89 0d e0 11 03 c0    	mov    DWORD PTR ds:0xc00311e0,ecx
c002102e:	31 db                	xor    ebx,ebx
c0021030:	53                   	push   ebx
c0021031:	51                   	push   ecx
c0021032:	ff 34 85 bc df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2044]
c0021039:	e8 88 52 ff ff       	call   c00162c6 <LogicalDisk::read(unsigned long long, int, void*)>
c002103e:	83 c4 20             	add    esp,0x20
c0021041:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021049:	c7 44 24 14 00 12 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031200
c0021051:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021055:	58                   	pop    eax
c0021056:	5b                   	pop    ebx
c0021057:	5e                   	pop    esi
c0021058:	e9 e7 f6 fd ff       	jmp    c0000744 <memcpy>
c002105d:	90                   	nop

c002105e <ISO9660::tryMount(LogicalDisk*, int)>:
c002105e:	81 ec 10 08 00 00    	sub    esp,0x810
c0021064:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002106b:	83 c0 41             	add    eax,0x41
c002106e:	0f be c0             	movsx  eax,al
c0021071:	50                   	push   eax
c0021072:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021076:	50                   	push   eax
c0021077:	6a 10                	push   0x10
c0021079:	e8 79 ff ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002107e:	83 c4 10             	add    esp,0x10
c0021081:	31 c0                	xor    eax,eax
c0021083:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021088:	75 1d                	jne    c00210a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002108a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002108f:	75 16                	jne    c00210a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021091:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021096:	75 0f                	jne    c00210a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021098:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002109d:	75 08                	jne    c00210a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002109f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00210a4:	0f 94 c0             	sete   al
c00210a7:	81 c4 0c 08 00 00    	add    esp,0x80c
c00210ad:	c3                   	ret    

c00210ae <ISO9660::read(void*, unsigned long, void*, int*)>:
c00210ae:	55                   	push   ebp
c00210af:	57                   	push   edi
c00210b0:	56                   	push   esi
c00210b1:	53                   	push   ebx
c00210b2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00210b8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00210bf:	85 ed                	test   ebp,ebp
c00210c1:	0f 84 d6 01 00 00    	je     c002129d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00210c7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00210cf:	0f 84 c8 01 00 00    	je     c002129d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00210d5:	b8 01 00 00 00       	mov    eax,0x1
c00210da:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00210de:	0f 85 be 01 00 00    	jne    c00212a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00210e4:	31 d2                	xor    edx,edx
c00210e6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00210ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00210f0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00210f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00210f7:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00210fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00210fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021101:	01 f0                	add    eax,esi
c0021103:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021106:	11 fa                	adc    edx,edi
c0021108:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002110c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021110:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021114:	19 d1                	sbb    ecx,edx
c0021116:	72 0a                	jb     c0021122 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021118:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002111c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021120:	eb 13                	jmp    c0021135 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021122:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021126:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002112a:	29 f0                	sub    eax,esi
c002112c:	19 fa                	sbb    edx,edi
c002112e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021131:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021135:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021138:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002113b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002113f:	51                   	push   ecx
c0021140:	c1 e0 0b             	shl    eax,0xb
c0021143:	01 c6                	add    esi,eax
c0021145:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021149:	11 d7                	adc    edi,edx
c002114b:	50                   	push   eax
c002114c:	89 fa                	mov    edx,edi
c002114e:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021152:	89 f0                	mov    eax,esi
c0021154:	53                   	push   ebx
c0021155:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021159:	50                   	push   eax
c002115a:	e8 98 fe ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002115f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021163:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021166:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002116a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021170:	83 c4 10             	add    esp,0x10
c0021173:	b8 00 08 00 00       	mov    eax,0x800
c0021178:	29 d0                	sub    eax,edx
c002117a:	39 c1                	cmp    ecx,eax
c002117c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021180:	83 d9 00             	sbb    ecx,0x0
c0021183:	7d 1c                	jge    c00211a1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021185:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002118a:	75 12                	jne    c002119e <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002118c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021193:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021199:	e9 fb 00 00 00       	jmp    c0021299 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002119e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00211a1:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00211a4:	31 d2                	xor    edx,edx
c00211a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00211aa:	39 c2                	cmp    edx,eax
c00211ac:	7d 14                	jge    c00211c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00211ae:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00211b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211b9:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00211bc:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00211bf:	42                   	inc    edx
c00211c0:	eb e8                	jmp    c00211aa <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00211c2:	89 c3                	mov    ebx,eax
c00211c4:	85 c0                	test   eax,eax
c00211c6:	79 02                	jns    c00211ca <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00211c8:	31 db                	xor    ebx,ebx
c00211ca:	99                   	cdq    
c00211cb:	01 c3                	add    ebx,eax
c00211cd:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00211d4:	01 c6                	add    esi,eax
c00211d6:	11 d7                	adc    edi,edx
c00211d8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00211dc:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00211e0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00211e3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00211e7:	29 c6                	sub    esi,eax
c00211e9:	19 d7                	sbb    edi,edx
c00211eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00211ee:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00211f2:	b8 ff 07 00 00       	mov    eax,0x7ff
c00211f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00211fa:	b8 00 00 00 00       	mov    eax,0x0
c00211ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021203:	7d 3e                	jge    c0021243 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021205:	52                   	push   edx
c0021206:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002120a:	50                   	push   eax
c002120b:	53                   	push   ebx
c002120c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021210:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021214:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021218:	50                   	push   eax
c0021219:	e8 d9 fd ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002121e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021226:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002122b:	81 c3 00 08 00 00    	add    ebx,0x800
c0021231:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021239:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002123e:	83 c4 10             	add    esp,0x10
c0021241:	eb af                	jmp    c00211f2 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021247:	0b 04 24             	or     eax,DWORD PTR [esp]
c002124a:	74 32                	je     c002127e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002124c:	50                   	push   eax
c002124d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021251:	50                   	push   eax
c0021252:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021256:	50                   	push   eax
c0021257:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002125b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002125f:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021263:	56                   	push   esi
c0021264:	e8 8e fd ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021269:	83 c4 0c             	add    esp,0xc
c002126c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021270:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021274:	50                   	push   eax
c0021275:	53                   	push   ebx
c0021276:	e8 c9 f4 fd ff       	call   c0000744 <memcpy>
c002127b:	83 c4 10             	add    esp,0x10
c002127e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021285:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021289:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002128d:	89 38                	mov    DWORD PTR [eax],edi
c002128f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021293:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021296:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021299:	31 c0                	xor    eax,eax
c002129b:	eb 05                	jmp    c00212a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002129d:	b8 04 00 00 00       	mov    eax,0x4
c00212a2:	81 c4 2c 08 00 00    	add    esp,0x82c
c00212a8:	5b                   	pop    ebx
c00212a9:	5e                   	pop    esi
c00212aa:	5f                   	pop    edi
c00212ab:	5d                   	pop    ebp
c00212ac:	c3                   	ret    
c00212ad:	90                   	nop

c00212ae <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00212ae:	55                   	push   ebp
c00212af:	57                   	push   edi
c00212b0:	56                   	push   esi
c00212b1:	53                   	push   ebx
c00212b2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00212b8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00212bf:	85 f6                	test   esi,esi
c00212c1:	0f 84 64 02 00 00    	je     c002152b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00212c7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00212cf:	0f 84 56 02 00 00    	je     c002152b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00212d5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00212d8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00212db:	75 0a                	jne    c00212e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00212dd:	b8 07 00 00 00       	mov    eax,0x7
c00212e2:	e9 49 02 00 00       	jmp    c0021530 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00212e7:	50                   	push   eax
c00212e8:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00212ec:	50                   	push   eax
c00212ed:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00212f4:	53                   	push   ebx
c00212f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00212f7:	c1 e0 0b             	shl    eax,0xb
c00212fa:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00212fd:	c1 e8 0b             	shr    eax,0xb
c0021300:	50                   	push   eax
c0021301:	e8 f1 fc ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021306:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021309:	83 c4 10             	add    esp,0x10
c002130c:	89 c1                	mov    ecx,eax
c002130e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021311:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021317:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002131a:	84 db                	test   bl,bl
c002131c:	0f 85 90 00 00 00    	jne    c00213b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021322:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021328:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002132e:	29 c7                	sub    edi,eax
c0021330:	89 fb                	mov    ebx,edi
c0021332:	c1 fb 1f             	sar    ebx,0x1f
c0021335:	01 f8                	add    eax,edi
c0021337:	11 da                	adc    edx,ebx
c0021339:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002133d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021341:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021344:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021347:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002134a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002134d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021350:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021354:	89 d8                	mov    eax,ebx
c0021356:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021359:	ba 00 00 00 00       	mov    edx,0x0
c002135e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021362:	b8 00 00 00 00       	mov    eax,0x0
c0021367:	73 0b                	jae    c0021374 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021369:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002136c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021370:	29 f8                	sub    eax,edi
c0021372:	19 da                	sbb    edx,ebx
c0021374:	89 d3                	mov    ebx,edx
c0021376:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021379:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002137c:	09 c3                	or     ebx,eax
c002137e:	0f 84 59 ff ff ff    	je     c00212dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021384:	55                   	push   ebp
c0021385:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021389:	50                   	push   eax
c002138a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021391:	53                   	push   ebx
c0021392:	8b 06                	mov    eax,DWORD PTR [esi]
c0021394:	c1 e0 0b             	shl    eax,0xb
c0021397:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c002139b:	c1 e8 0b             	shr    eax,0xb
c002139e:	50                   	push   eax
c002139f:	e8 53 fc ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213a4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00213a7:	83 c4 10             	add    esp,0x10
c00213aa:	25 ff 07 00 00       	and    eax,0x7ff
c00213af:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00213b2:	57                   	push   edi
c00213b3:	6a 28                	push   0x28
c00213b5:	6a 00                	push   0x0
c00213b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213bb:	50                   	push   eax
c00213bc:	e8 b7 f3 fd ff       	call   c0000778 <memset>
c00213c1:	31 d2                	xor    edx,edx
c00213c3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00213c6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00213cc:	89 f8                	mov    eax,edi
c00213ce:	83 c0 21             	add    eax,0x21
c00213d1:	83 d2 00             	adc    edx,0x0
c00213d4:	89 c7                	mov    edi,eax
c00213d6:	89 d5                	mov    ebp,edx
c00213d8:	83 c4 10             	add    esp,0x10
c00213db:	31 c9                	xor    ecx,ecx
c00213dd:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00213e4:	83 f9 28             	cmp    ecx,0x28
c00213e7:	88 04 24             	mov    BYTE PTR [esp],al
c00213ea:	0f 94 c2             	sete   dl
c00213ed:	88 d0                	mov    al,dl
c00213ef:	ba ff 07 00 00       	mov    edx,0x7ff
c00213f4:	39 fa                	cmp    edx,edi
c00213f6:	ba 00 00 00 00       	mov    edx,0x0
c00213fb:	19 ea                	sbb    edx,ebp
c00213fd:	0f 92 c2             	setb   dl
c0021400:	09 c2                	or     edx,eax
c0021402:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021406:	0f 94 c0             	sete   al
c0021409:	08 d0                	or     al,dl
c002140b:	75 16                	jne    c0021423 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002140d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021411:	74 10                	je     c0021423 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021413:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021416:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002141a:	41                   	inc    ecx
c002141b:	83 c7 01             	add    edi,0x1
c002141e:	83 d5 00             	adc    ebp,0x0
c0021421:	eb ba                	jmp    c00213dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021423:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002142a:	83 ec 0c             	sub    esp,0xc
c002142d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021431:	57                   	push   edi
c0021432:	e8 5d f3 fd ff       	call   c0000794 <strlen>
c0021437:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002143f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021443:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c002144a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002144d:	5a                   	pop    edx
c002144e:	25 ff 07 00 00       	and    eax,0x7ff
c0021453:	01 c8                	add    eax,ecx
c0021455:	59                   	pop    ecx
c0021456:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002145c:	83 e0 02             	and    eax,0x2
c002145f:	3c 01                	cmp    al,0x1
c0021461:	19 c0                	sbb    eax,eax
c0021463:	83 c0 02             	add    eax,0x2
c0021466:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002146a:	57                   	push   edi
c002146b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002146f:	50                   	push   eax
c0021470:	e8 bf f3 fd ff       	call   c0000834 <strcpy>
c0021475:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021479:	83 c4 10             	add    esp,0x10
c002147c:	84 c0                	test   al,al
c002147e:	75 21                	jne    c00214a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021480:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021488:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021490:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021498:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002149f:	eb 28                	jmp    c00214c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00214a1:	fe c8                	dec    al
c00214a3:	75 24                	jne    c00214c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00214a5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00214ad:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00214b5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00214bd:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00214c4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00214c9:	0f b6 fb             	movzx  edi,bl
c00214cc:	31 db                	xor    ebx,ebx
c00214ce:	50                   	push   eax
c00214cf:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00214d6:	8d 44 24 48          	lea    eax,[esp+0x48]
c00214da:	50                   	push   eax
c00214db:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00214e2:	e8 5d f2 fd ff       	call   c0000744 <memcpy>
c00214e7:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00214ee:	89 f9                	mov    ecx,edi
c00214f0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00214f6:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00214f9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00214fc:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00214ff:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021502:	83 c4 10             	add    esp,0x10
c0021505:	39 c7                	cmp    edi,eax
c0021507:	89 df                	mov    edi,ebx
c0021509:	19 d7                	sbb    edi,edx
c002150b:	72 10                	jb     c002151d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002150d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021514:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c002151b:	eb 0a                	jmp    c0021527 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c002151d:	29 c8                	sub    eax,ecx
c002151f:	19 da                	sbb    edx,ebx
c0021521:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021524:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021527:	31 c0                	xor    eax,eax
c0021529:	eb 05                	jmp    c0021530 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002152b:	b8 04 00 00 00       	mov    eax,0x4
c0021530:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021536:	5b                   	pop    ebx
c0021537:	5e                   	pop    esi
c0021538:	5f                   	pop    edi
c0021539:	5d                   	pop    ebp
c002153a:	c3                   	ret    

c002153b <readRoot(unsigned int*, unsigned int*, char)>:
c002153b:	81 ec 40 08 00 00    	sub    esp,0x840
c0021541:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021549:	50                   	push   eax
c002154a:	8d 44 24 38          	lea    eax,[esp+0x38]
c002154e:	50                   	push   eax
c002154f:	6a 10                	push   0x10
c0021551:	e8 a1 fa ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021556:	83 c4 0c             	add    esp,0xc
c0021559:	6a 22                	push   0x22
c002155b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021562:	50                   	push   eax
c0021563:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021567:	50                   	push   eax
c0021568:	e8 d7 f1 fd ff       	call   c0000744 <memcpy>
c002156d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021574:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021578:	89 10                	mov    DWORD PTR [eax],edx
c002157a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021581:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021585:	89 10                	mov    DWORD PTR [eax],edx
c0021587:	b0 01                	mov    al,0x1
c0021589:	81 c4 4c 08 00 00    	add    esp,0x84c
c002158f:	c3                   	ret    

c0021590 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021590:	55                   	push   ebp
c0021591:	57                   	push   edi
c0021592:	56                   	push   esi
c0021593:	53                   	push   ebx
c0021594:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002159a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00215a1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00215a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215ac:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00215b0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00215b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00215b8:	75 03                	jne    c00215bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00215ba:	83 c3 02             	add    ebx,0x2
c00215bd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00215c0:	75 03                	jne    c00215c5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00215c2:	43                   	inc    ebx
c00215c3:	eb f8                	jmp    c00215bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00215c5:	51                   	push   ecx
c00215c6:	68 00 01 00 00       	push   0x100
c00215cb:	6a 00                	push   0x0
c00215cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00215d1:	50                   	push   eax
c00215d2:	e8 a1 f1 fd ff       	call   c0000778 <memset>
c00215d7:	83 c4 10             	add    esp,0x10
c00215da:	31 d2                	xor    edx,edx
c00215dc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00215df:	84 c0                	test   al,al
c00215e1:	74 21                	je     c0021604 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00215e3:	3c 2f                	cmp    al,0x2f
c00215e5:	75 0b                	jne    c00215f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00215e7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00215eb:	bd 01 00 00 00       	mov    ebp,0x1
c00215f0:	eb 14                	jmp    c0021606 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00215f2:	8d 48 9f             	lea    ecx,[eax-0x61]
c00215f5:	80 f9 19             	cmp    cl,0x19
c00215f8:	77 03                	ja     c00215fd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00215fa:	83 e8 20             	sub    eax,0x20
c00215fd:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021601:	42                   	inc    edx
c0021602:	eb d8                	jmp    c00215dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021604:	31 ed                	xor    ebp,ebp
c0021606:	83 ec 0c             	sub    esp,0xc
c0021609:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021610:	e8 25 e2 fe ff       	call   c000f83a <malloc>
c0021615:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002161c:	89 c6                	mov    esi,eax
c002161e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021624:	c1 ef 0b             	shr    edi,0xb
c0021627:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002162e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021632:	83 c4 10             	add    esp,0x10
c0021635:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002163a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002163e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021645:	74 28                	je     c002166f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021647:	52                   	push   edx
c0021648:	57                   	push   edi
c0021649:	50                   	push   eax
c002164a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002164e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021655:	e8 9d f9 ff ff       	call   c0020ff7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002165a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002165e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021665:	05 00 08 00 00       	add    eax,0x800
c002166a:	83 c4 10             	add    esp,0x10
c002166d:	eb cb                	jmp    c002163a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002166f:	83 ec 0c             	sub    esp,0xc
c0021672:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021676:	57                   	push   edi
c0021677:	e8 18 f1 fd ff       	call   c0000794 <strlen>
c002167c:	50                   	push   eax
c002167d:	57                   	push   edi
c002167e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021685:	56                   	push   esi
c0021686:	e8 2a f9 ff ff       	call   c0020fb5 <__memmem(unsigned char*, int, unsigned char*, int)>
c002168b:	83 c4 20             	add    esp,0x20
c002168e:	85 c0                	test   eax,eax
c0021690:	75 13                	jne    c00216a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021692:	83 ec 0c             	sub    esp,0xc
c0021695:	56                   	push   esi
c0021696:	e8 af e1 fe ff       	call   c000f84a <free>
c002169b:	83 c4 10             	add    esp,0x10
c002169e:	31 c0                	xor    eax,eax
c00216a0:	e9 b3 00 00 00       	jmp    c0021758 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00216a5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00216a9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00216ad:	c1 e7 08             	shl    edi,0x8
c00216b0:	c1 e2 10             	shl    edx,0x10
c00216b3:	09 d7                	or     edi,edx
c00216b5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00216b9:	09 d7                	or     edi,edx
c00216bb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00216bf:	c1 e2 18             	shl    edx,0x18
c00216c2:	09 d7                	or     edi,edx
c00216c4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00216c8:	89 d1                	mov    ecx,edx
c00216ca:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00216ce:	c1 e1 08             	shl    ecx,0x8
c00216d1:	c1 e2 10             	shl    edx,0x10
c00216d4:	09 ca                	or     edx,ecx
c00216d6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00216da:	09 ca                	or     edx,ecx
c00216dc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00216e0:	c1 e1 18             	shl    ecx,0x18
c00216e3:	09 ca                	or     edx,ecx
c00216e5:	89 e9                	mov    ecx,ebp
c00216e7:	84 c9                	test   cl,cl
c00216e9:	74 3c                	je     c0021727 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00216eb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00216ef:	83 ec 0c             	sub    esp,0xc
c00216f2:	56                   	push   esi
c00216f3:	e8 52 e1 fe ff       	call   c000f84a <free>
c00216f8:	83 c4 0c             	add    esp,0xc
c00216fb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021702:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021707:	50                   	push   eax
c0021708:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002170f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021716:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002171a:	52                   	push   edx
c002171b:	57                   	push   edi
c002171c:	53                   	push   ebx
c002171d:	e8 6e fe ff ff       	call   c0021590 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021722:	83 c4 20             	add    esp,0x20
c0021725:	eb 31                	jmp    c0021758 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021727:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002172a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021731:	d0 e8                	shr    al,1
c0021733:	89 3b                	mov    DWORD PTR [ebx],edi
c0021735:	83 e0 01             	and    eax,0x1
c0021738:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002173f:	83 ec 0c             	sub    esp,0xc
c0021742:	89 13                	mov    DWORD PTR [ebx],edx
c0021744:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002174b:	89 03                	mov    DWORD PTR [ebx],eax
c002174d:	56                   	push   esi
c002174e:	e8 f7 e0 fe ff       	call   c000f84a <free>
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	b0 01                	mov    al,0x1
c0021758:	81 c4 1c 01 00 00    	add    esp,0x11c
c002175e:	5b                   	pop    ebx
c002175f:	5e                   	pop    esi
c0021760:	5f                   	pop    edi
c0021761:	5d                   	pop    ebp
c0021762:	c3                   	ret    

c0021763 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021763:	55                   	push   ebp
c0021764:	57                   	push   edi
c0021765:	56                   	push   esi
c0021766:	53                   	push   ebx
c0021767:	83 ec 20             	sub    esp,0x20
c002176a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002176e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021772:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021776:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002177e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021786:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002178b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021791:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021797:	57                   	push   edi
c0021798:	8d 44 24 14          	lea    eax,[esp+0x14]
c002179c:	50                   	push   eax
c002179d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217a1:	50                   	push   eax
c00217a2:	e8 94 fd ff ff       	call   c002153b <readRoot(unsigned int*, unsigned int*, char)>
c00217a7:	5a                   	pop    edx
c00217a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00217ac:	e8 e3 ef fd ff       	call   c0000794 <strlen>
c00217b1:	83 c4 10             	add    esp,0x10
c00217b4:	83 f8 03             	cmp    eax,0x3
c00217b7:	77 17                	ja     c00217d0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00217b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217bd:	89 03                	mov    DWORD PTR [ebx],eax
c00217bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217c3:	89 06                	mov    DWORD PTR [esi],eax
c00217c5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00217cc:	b0 01                	mov    al,0x1
c00217ce:	eb 19                	jmp    c00217e9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00217d0:	50                   	push   eax
c00217d1:	55                   	push   ebp
c00217d2:	57                   	push   edi
c00217d3:	56                   	push   esi
c00217d4:	53                   	push   ebx
c00217d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00217d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00217dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00217e1:	e8 aa fd ff ff       	call   c0021590 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00217e6:	83 c4 20             	add    esp,0x20
c00217e9:	83 c4 1c             	add    esp,0x1c
c00217ec:	5b                   	pop    ebx
c00217ed:	5e                   	pop    esi
c00217ee:	5f                   	pop    edi
c00217ef:	5d                   	pop    ebp
c00217f0:	c3                   	ret    
c00217f1:	90                   	nop

c00217f2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00217f2:	57                   	push   edi
c00217f3:	56                   	push   esi
c00217f4:	53                   	push   ebx
c00217f5:	83 ec 10             	sub    esp,0x10
c00217f8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00217fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021800:	85 ff                	test   edi,edi
c0021802:	0f 84 9d 00 00 00    	je     c00218a5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021808:	85 f6                	test   esi,esi
c002180a:	0f 84 95 00 00 00    	je     c00218a5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021810:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021815:	74 17                	je     c002182e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021817:	83 ec 0c             	sub    esp,0xc
c002181a:	68 c3 bf 02 c0       	push   0xc002bfc3
c002181f:	e8 e5 12 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0021824:	83 c4 10             	add    esp,0x10
c0021827:	b8 03 00 00 00       	mov    eax,0x3
c002182c:	eb 7c                	jmp    c00218aa <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002182e:	83 ec 0c             	sub    esp,0xc
c0021831:	6a 1c                	push   0x1c
c0021833:	e8 02 e0 fe ff       	call   c000f83a <malloc>
c0021838:	89 07                	mov    DWORD PTR [edi],eax
c002183a:	89 c3                	mov    ebx,eax
c002183c:	58                   	pop    eax
c002183d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021841:	50                   	push   eax
c0021842:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021845:	50                   	push   eax
c0021846:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002184a:	50                   	push   eax
c002184b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002184f:	50                   	push   eax
c0021850:	56                   	push   esi
c0021851:	e8 0d ff ff ff       	call   c0021763 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021856:	83 c4 20             	add    esp,0x20
c0021859:	84 c0                	test   al,al
c002185b:	74 07                	je     c0021864 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002185d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021862:	74 0b                	je     c002186f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021864:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021868:	b8 01 00 00 00       	mov    eax,0x1
c002186d:	eb 3b                	jmp    c00218aa <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002186f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021873:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021877:	89 03                	mov    DWORD PTR [ebx],eax
c0021879:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021884:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002188b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021892:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021895:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002189c:	8a 06                	mov    al,BYTE PTR [esi]
c002189e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00218a1:	31 c0                	xor    eax,eax
c00218a3:	eb 05                	jmp    c00218aa <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00218a5:	b8 04 00 00 00       	mov    eax,0x4
c00218aa:	83 c4 10             	add    esp,0x10
c00218ad:	5b                   	pop    ebx
c00218ae:	5e                   	pop    esi
c00218af:	5f                   	pop    edi
c00218b0:	c3                   	ret    
c00218b1:	90                   	nop

c00218b2 <ISO9660::exists(char const*)>:
c00218b2:	83 ec 28             	sub    esp,0x28
c00218b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00218b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00218bd:	52                   	push   edx
c00218be:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00218c1:	52                   	push   edx
c00218c2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00218c6:	52                   	push   edx
c00218c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00218cb:	52                   	push   edx
c00218cc:	50                   	push   eax
c00218cd:	e8 91 fe ff ff       	call   c0021763 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218d2:	83 c4 3c             	add    esp,0x3c
c00218d5:	c3                   	ret    

c00218d6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00218d6:	56                   	push   esi
c00218d7:	53                   	push   ebx
c00218d8:	83 ec 14             	sub    esp,0x14
c00218db:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00218df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00218e3:	85 db                	test   ebx,ebx
c00218e5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00218e9:	0f 94 c2             	sete   dl
c00218ec:	85 f6                	test   esi,esi
c00218ee:	0f 94 c0             	sete   al
c00218f1:	08 c2                	or     dl,al
c00218f3:	75 68                	jne    c002195d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00218f5:	85 c9                	test   ecx,ecx
c00218f7:	74 64                	je     c002195d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00218f9:	83 ec 0c             	sub    esp,0xc
c00218fc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00218ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021903:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021909:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021910:	50                   	push   eax
c0021911:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021914:	50                   	push   eax
c0021915:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021919:	50                   	push   eax
c002191a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002191e:	50                   	push   eax
c002191f:	51                   	push   ecx
c0021920:	e8 3e fe ff ff       	call   c0021763 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021925:	83 c4 20             	add    esp,0x20
c0021928:	ba 01 00 00 00       	mov    edx,0x1
c002192d:	84 c0                	test   al,al
c002192f:	74 31                	je     c0021962 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021931:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021935:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002193c:	89 03                	mov    DWORD PTR [ebx],eax
c002193e:	ba 00 00 00 00       	mov    edx,0x0
c0021943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021947:	85 c0                	test   eax,eax
c0021949:	0f 95 06             	setne  BYTE PTR [esi]
c002194c:	74 14                	je     c0021962 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002194e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021954:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002195b:	eb 05                	jmp    c0021962 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002195d:	ba 04 00 00 00       	mov    edx,0x4
c0021962:	83 c4 14             	add    esp,0x14
c0021965:	89 d0                	mov    eax,edx
c0021967:	5b                   	pop    ebx
c0021968:	5e                   	pop    esi
c0021969:	c3                   	ret    

c002196a <ISO9660::openDir(char const*, void**)>:
c002196a:	57                   	push   edi
c002196b:	56                   	push   esi
c002196c:	53                   	push   ebx
c002196d:	83 ec 10             	sub    esp,0x10
c0021970:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021974:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021978:	85 ff                	test   edi,edi
c002197a:	0f 84 95 00 00 00    	je     c0021a15 <ISO9660::openDir(char const*, void**)+0xab>
c0021980:	85 f6                	test   esi,esi
c0021982:	0f 84 8d 00 00 00    	je     c0021a15 <ISO9660::openDir(char const*, void**)+0xab>
c0021988:	83 ec 0c             	sub    esp,0xc
c002198b:	6a 1c                	push   0x1c
c002198d:	e8 a8 de fe ff       	call   c000f83a <malloc>
c0021992:	89 07                	mov    DWORD PTR [edi],eax
c0021994:	89 c3                	mov    ebx,eax
c0021996:	59                   	pop    ecx
c0021997:	8d 44 24 18          	lea    eax,[esp+0x18]
c002199b:	50                   	push   eax
c002199c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002199f:	50                   	push   eax
c00219a0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219a4:	50                   	push   eax
c00219a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219a9:	50                   	push   eax
c00219aa:	56                   	push   esi
c00219ab:	e8 b3 fd ff ff       	call   c0021763 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219b0:	83 c4 20             	add    esp,0x20
c00219b3:	84 c0                	test   al,al
c00219b5:	74 07                	je     c00219be <ISO9660::openDir(char const*, void**)+0x54>
c00219b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219bc:	75 21                	jne    c00219df <ISO9660::openDir(char const*, void**)+0x75>
c00219be:	0f b6 c0             	movzx  eax,al
c00219c1:	52                   	push   edx
c00219c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00219c6:	50                   	push   eax
c00219c7:	68 e9 bf 02 c0       	push   0xc002bfe9
c00219cc:	e8 38 11 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00219d1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219d5:	83 c4 10             	add    esp,0x10
c00219d8:	b8 01 00 00 00       	mov    eax,0x1
c00219dd:	eb 3b                	jmp    c0021a1a <ISO9660::openDir(char const*, void**)+0xb0>
c00219df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219e3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219e7:	89 03                	mov    DWORD PTR [ebx],eax
c00219e9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219f4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a02:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a05:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a0c:	8a 06                	mov    al,BYTE PTR [esi]
c0021a0e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a11:	31 c0                	xor    eax,eax
c0021a13:	eb 05                	jmp    c0021a1a <ISO9660::openDir(char const*, void**)+0xb0>
c0021a15:	b8 04 00 00 00       	mov    eax,0x4
c0021a1a:	83 c4 10             	add    esp,0x10
c0021a1d:	5b                   	pop    ebx
c0021a1e:	5e                   	pop    esi
c0021a1f:	5f                   	pop    edi
c0021a20:	c3                   	ret    
c0021a21:	90                   	nop

c0021a22 <ISO9660::ISO9660()>:
c0021a22:	83 ec 0c             	sub    esp,0xc
c0021a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a29:	83 ec 0c             	sub    esp,0xc
c0021a2c:	50                   	push   eax
c0021a2d:	e8 dc 13 ff ff       	call   c0012e0e <Filesystem::Filesystem()>
c0021a32:	83 c4 10             	add    esp,0x10
c0021a35:	ba 0c c0 02 c0       	mov    edx,0xc002c00c
c0021a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3e:	89 10                	mov    DWORD PTR [eax],edx
c0021a40:	90                   	nop
c0021a41:	83 c4 0c             	add    esp,0xc
c0021a44:	c3                   	ret    
c0021a45:	90                   	nop

c0021a46 <SoundChannel::~SoundChannel()>:
c0021a46:	83 ec 0c             	sub    esp,0xc
c0021a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a4d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021a50:	83 ec 0c             	sub    esp,0xc
c0021a53:	50                   	push   eax
c0021a54:	e8 f1 dd fe ff       	call   c000f84a <free>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	90                   	nop
c0021a5d:	83 c4 0c             	add    esp,0xc
c0021a60:	c3                   	ret    
c0021a61:	90                   	nop

c0021a62 <SoundChannel::setSpeed(float)>:
c0021a62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021a6a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021a6d:	c3                   	ret    

c0021a6e <SoundChannel::getSpeed()>:
c0021a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a72:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021a75:	c3                   	ret    

c0021a76 <SoundChannel::setVolume(int)>:
c0021a76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a7a:	83 f8 64             	cmp    eax,0x64
c0021a7d:	7e 05                	jle    c0021a84 <SoundChannel::setVolume(int)+0xe>
c0021a7f:	b8 64 00 00 00       	mov    eax,0x64
c0021a84:	85 c0                	test   eax,eax
c0021a86:	79 02                	jns    c0021a8a <SoundChannel::setVolume(int)+0x14>
c0021a88:	31 c0                	xor    eax,eax
c0021a8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a8e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021a91:	c3                   	ret    

c0021a92 <SoundChannel::getVolume()>:
c0021a92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a96:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021a99:	c3                   	ret    

c0021a9a <SoundChannel::pause()>:
c0021a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a9e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021aa2:	c3                   	ret    
c0021aa3:	90                   	nop

c0021aa4 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021aa4:	83 ec 1c             	sub    esp,0x1c
c0021aa7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021aab:	e8 ea ff ff ff       	call   c0021a9a <SoundChannel::pause()>
c0021ab0:	83 c4 04             	add    esp,0x4
c0021ab3:	6a 50                	push   0x50
c0021ab5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021ab9:	e8 b8 ff ff ff       	call   c0021a76 <SoundChannel::setVolume(int)>
c0021abe:	83 c4 08             	add    esp,0x8
c0021ac1:	a1 84 c0 02 c0       	mov    eax,ds:0xc002c084
c0021ac6:	50                   	push   eax
c0021ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021acb:	e8 92 ff ff ff       	call   c0021a62 <SoundChannel::setSpeed(float)>
c0021ad0:	83 c4 08             	add    esp,0x8
c0021ad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ad7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021adb:	89 10                	mov    DWORD PTR [eax],edx
c0021add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ae1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ae5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021af0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021af3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021af8:	75 23                	jne    c0021b1d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021afe:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b07:	0f af c2             	imul   eax,edx
c0021b0a:	85 c0                	test   eax,eax
c0021b0c:	79 03                	jns    c0021b11 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021b0e:	83 c0 03             	add    eax,0x3
c0021b11:	c1 f8 02             	sar    eax,0x2
c0021b14:	05 a0 0f 00 00       	add    eax,0xfa0
c0021b19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b21:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021b25:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b2c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b37:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021b3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b42:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021b45:	c1 e0 02             	shl    eax,0x2
c0021b48:	83 ec 0c             	sub    esp,0xc
c0021b4b:	50                   	push   eax
c0021b4c:	e8 e9 dc fe ff       	call   c000f83a <malloc>
c0021b51:	83 c4 10             	add    esp,0x10
c0021b54:	89 c2                	mov    edx,eax
c0021b56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b5a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021b5d:	83 ec 04             	sub    esp,0x4
c0021b60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b64:	50                   	push   eax
c0021b65:	6a 01                	push   0x1
c0021b67:	6a 04                	push   0x4
c0021b69:	e8 31 70 fe ff       	call   c0008b9f <src_new>
c0021b6e:	83 c4 10             	add    esp,0x10
c0021b71:	89 c2                	mov    edx,eax
c0021b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b77:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b7e:	85 c0                	test   eax,eax
c0021b80:	74 10                	je     c0021b92 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021b82:	83 ec 0c             	sub    esp,0xc
c0021b85:	68 68 c0 02 c0       	push   0xc002c068
c0021b8a:	e8 5e 84 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0021b8f:	83 c4 10             	add    esp,0x10
c0021b92:	a0 00 1e 03 c0       	mov    al,ds:0xc0031e00
c0021b97:	83 f0 01             	xor    eax,0x1
c0021b9a:	84 c0                	test   al,al
c0021b9c:	74 57                	je     c0021bf5 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021b9e:	a1 88 c0 02 c0       	mov    eax,ds:0xc002c088
c0021ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ba7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021baf:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021bb7:	7f 35                	jg     c0021bee <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021bb9:	83 ec 0c             	sub    esp,0xc
c0021bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021bc0:	e8 c2 4f 00 00       	call   c0026b87 <__floatsisf>
c0021bc5:	83 c4 10             	add    esp,0x10
c0021bc8:	8b 15 88 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c088
c0021bce:	83 ec 08             	sub    esp,0x8
c0021bd1:	52                   	push   edx
c0021bd2:	50                   	push   eax
c0021bd3:	e8 c1 4b 00 00       	call   c0026799 <__mulsf3>
c0021bd8:	83 c4 10             	add    esp,0x10
c0021bdb:	89 c2                	mov    edx,eax
c0021bdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021be1:	89 14 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],edx
c0021be8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021bec:	eb c1                	jmp    c0021baf <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021bee:	c6 05 00 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e00,0x1
c0021bf5:	90                   	nop
c0021bf6:	83 c4 1c             	add    esp,0x1c
c0021bf9:	c3                   	ret    

c0021bfa <SoundChannel::play()>:
c0021bfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bfe:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021c02:	c3                   	ret    
c0021c03:	90                   	nop

c0021c04 <SoundChannel::paused()>:
c0021c04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c08:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021c0b:	c3                   	ret    

c0021c0c <SoundChannel::getSampleRate()>:
c0021c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c12:	c3                   	ret    
c0021c13:	90                   	nop

c0021c14 <SoundChannel::getBits()>:
c0021c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c1b:	c3                   	ret    

c0021c1c <SoundChannel::getBufferUsed()>:
c0021c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c20:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021c23:	c3                   	ret    

c0021c24 <SoundChannel::getBufferSize()>:
c0021c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c2b:	c3                   	ret    

c0021c2c <SoundChannel::unbuffer(float*, int, int)>:
c0021c2c:	56                   	push   esi
c0021c2d:	53                   	push   ebx
c0021c2e:	83 ec 40             	sub    esp,0x40
c0021c31:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021c35:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c3c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021c3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021c43:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021c47:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021c4b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021c4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021c57:	e8 2b 4f 00 00       	call   c0026b87 <__floatsisf>
c0021c5c:	5a                   	pop    edx
c0021c5d:	89 c6                	mov    esi,eax
c0021c5f:	ff 33                	push   DWORD PTR [ebx]
c0021c61:	e8 21 4f 00 00       	call   c0026b87 <__floatsisf>
c0021c66:	59                   	pop    ecx
c0021c67:	5a                   	pop    edx
c0021c68:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021c6b:	50                   	push   eax
c0021c6c:	e8 28 4b 00 00       	call   c0026799 <__mulsf3>
c0021c71:	59                   	pop    ecx
c0021c72:	5a                   	pop    edx
c0021c73:	50                   	push   eax
c0021c74:	56                   	push   esi
c0021c75:	e8 e2 4c 00 00       	call   c002695c <__divsf3>
c0021c7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c7d:	e8 d5 61 00 00       	call   c0027e57 <__extendsfdf2>
c0021c82:	59                   	pop    ecx
c0021c83:	5e                   	pop    esi
c0021c84:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c88:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021c8c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021c94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c98:	50                   	push   eax
c0021c99:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021c9c:	e8 f3 6a fe ff       	call   c0008794 <src_process>
c0021ca1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021ca5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021ca8:	83 c4 0c             	add    esp,0xc
c0021cab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021cae:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021cb1:	29 d0                	sub    eax,edx
c0021cb3:	c1 e0 02             	shl    eax,0x2
c0021cb6:	50                   	push   eax
c0021cb7:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021cba:	50                   	push   eax
c0021cbb:	51                   	push   ecx
c0021cbc:	e8 bb e9 fd ff       	call   c000067c <memmove>
c0021cc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021cc5:	83 c4 44             	add    esp,0x44
c0021cc8:	5b                   	pop    ebx
c0021cc9:	5e                   	pop    esi
c0021cca:	c3                   	ret    
c0021ccb:	90                   	nop

c0021ccc <SoundChannel::buffer8(unsigned char*, int)>:
c0021ccc:	55                   	push   ebp
c0021ccd:	57                   	push   edi
c0021cce:	56                   	push   esi
c0021ccf:	53                   	push   ebx
c0021cd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cd4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021cd8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021cdb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021cdf:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ce2:	74 7a                	je     c0021d5e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ce4:	85 ff                	test   edi,edi
c0021ce6:	7e 76                	jle    c0021d5e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ce8:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021cec:	8d 70 01             	lea    esi,[eax+0x1]
c0021cef:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021cf2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021cf5:	8b 1c 9d 00 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce600]
c0021cfc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021cff:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d02:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d05:	74 5e                	je     c0021d65 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021d07:	83 ff 01             	cmp    edi,0x1
c0021d0a:	74 4b                	je     c0021d57 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021d0c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021d10:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d13:	8d 70 01             	lea    esi,[eax+0x1]
c0021d16:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d19:	8b 1c 9d 00 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce600]
c0021d20:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d23:	b8 02 00 00 00       	mov    eax,0x2
c0021d28:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d2b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d2e:	75 23                	jne    c0021d53 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021d30:	eb 27                	jmp    c0021d59 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d32:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021d37:	8d 71 01             	lea    esi,[ecx+0x1]
c0021d3a:	40                   	inc    eax
c0021d3b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d3e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021d41:	8b 1c 9d 00 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce600]
c0021d48:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021d4b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d4e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d51:	74 06                	je     c0021d59 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d53:	39 c7                	cmp    edi,eax
c0021d55:	75 db                	jne    c0021d32 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021d57:	89 f8                	mov    eax,edi
c0021d59:	5b                   	pop    ebx
c0021d5a:	5e                   	pop    esi
c0021d5b:	5f                   	pop    edi
c0021d5c:	5d                   	pop    ebp
c0021d5d:	c3                   	ret    
c0021d5e:	5b                   	pop    ebx
c0021d5f:	31 c0                	xor    eax,eax
c0021d61:	5e                   	pop    esi
c0021d62:	5f                   	pop    edi
c0021d63:	5d                   	pop    ebp
c0021d64:	c3                   	ret    
c0021d65:	b8 01 00 00 00       	mov    eax,0x1
c0021d6a:	eb ed                	jmp    c0021d59 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021d6c <SoundDevice::SoundDevice(char const*)>:
c0021d6c:	83 ec 1c             	sub    esp,0x1c
c0021d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d73:	83 ec 08             	sub    esp,0x8
c0021d76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021d7a:	50                   	push   eax
c0021d7b:	e8 a0 23 ff ff       	call   c0014120 <Device::Device(char const*)>
c0021d80:	83 c4 10             	add    esp,0x10
c0021d83:	ba 94 c0 02 c0       	mov    edx,0xc002c094
c0021d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d8c:	89 10                	mov    DWORD PTR [eax],edx
c0021d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d92:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021d9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021da0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021daa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021db2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021db7:	7f 19                	jg     c0021dd2 <SoundDevice::SoundDevice(char const*)+0x66>
c0021db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dc1:	83 c2 54             	add    edx,0x54
c0021dc4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021dcc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021dd0:	eb e0                	jmp    c0021db2 <SoundDevice::SoundDevice(char const*)+0x46>
c0021dd2:	90                   	nop
c0021dd3:	83 c4 1c             	add    esp,0x1c
c0021dd6:	c3                   	ret    
c0021dd7:	90                   	nop

c0021dd8 <SoundDevice::~SoundDevice()>:
c0021dd8:	53                   	push   ebx
c0021dd9:	83 ec 18             	sub    esp,0x18
c0021ddc:	ba 94 c0 02 c0       	mov    edx,0xc002c094
c0021de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021de5:	89 10                	mov    DWORD PTR [eax],edx
c0021de7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021def:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021df4:	7f 46                	jg     c0021e3c <SoundDevice::~SoundDevice()+0x64>
c0021df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dfe:	83 c2 54             	add    edx,0x54
c0021e01:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021e05:	85 c0                	test   eax,eax
c0021e07:	74 2d                	je     c0021e36 <SoundDevice::~SoundDevice()+0x5e>
c0021e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e11:	83 c2 54             	add    edx,0x54
c0021e14:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021e18:	85 db                	test   ebx,ebx
c0021e1a:	74 1a                	je     c0021e36 <SoundDevice::~SoundDevice()+0x5e>
c0021e1c:	83 ec 0c             	sub    esp,0xc
c0021e1f:	53                   	push   ebx
c0021e20:	e8 21 fc ff ff       	call   c0021a46 <SoundChannel::~SoundChannel()>
c0021e25:	83 c4 10             	add    esp,0x10
c0021e28:	83 ec 08             	sub    esp,0x8
c0021e2b:	6a 2c                	push   0x2c
c0021e2d:	53                   	push   ebx
c0021e2e:	e8 f6 0b ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0021e33:	83 c4 10             	add    esp,0x10
c0021e36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e3a:	eb b3                	jmp    c0021def <SoundDevice::~SoundDevice()+0x17>
c0021e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e40:	83 ec 0c             	sub    esp,0xc
c0021e43:	50                   	push   eax
c0021e44:	e8 b9 1f ff ff       	call   c0013e02 <Device::~Device()>
c0021e49:	83 c4 10             	add    esp,0x10
c0021e4c:	90                   	nop
c0021e4d:	83 c4 18             	add    esp,0x18
c0021e50:	5b                   	pop    ebx
c0021e51:	c3                   	ret    

c0021e52 <SoundDevice::~SoundDevice()>:
c0021e52:	83 ec 0c             	sub    esp,0xc
c0021e55:	83 ec 0c             	sub    esp,0xc
c0021e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e5c:	e8 77 ff ff ff       	call   c0021dd8 <SoundDevice::~SoundDevice()>
c0021e61:	83 c4 10             	add    esp,0x10
c0021e64:	83 ec 08             	sub    esp,0x8
c0021e67:	68 e4 01 00 00       	push   0x1e4
c0021e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e70:	e8 b4 0b ff ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0021e75:	83 c4 10             	add    esp,0x10
c0021e78:	83 c4 0c             	add    esp,0xc
c0021e7b:	c3                   	ret    

c0021e7c <SoundDevice::getFreeChannelNum()>:
c0021e7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e80:	31 c0                	xor    eax,eax
c0021e82:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021e8a:	74 09                	je     c0021e95 <SoundDevice::getFreeChannelNum()+0x19>
c0021e8c:	40                   	inc    eax
c0021e8d:	83 f8 20             	cmp    eax,0x20
c0021e90:	75 f0                	jne    c0021e82 <SoundDevice::getFreeChannelNum()+0x6>
c0021e92:	83 c8 ff             	or     eax,0xffffffff
c0021e95:	c3                   	ret    

c0021e96 <SoundDevice::addChannel(SoundChannel*)>:
c0021e96:	56                   	push   esi
c0021e97:	53                   	push   ebx
c0021e98:	51                   	push   ecx
c0021e99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021ea1:	53                   	push   ebx
c0021ea2:	e8 d5 ff ff ff       	call   c0021e7c <SoundDevice::getFreeChannelNum()>
c0021ea7:	5a                   	pop    edx
c0021ea8:	83 f8 ff             	cmp    eax,0xffffffff
c0021eab:	74 51                	je     c0021efe <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021ead:	85 f6                	test   esi,esi
c0021eaf:	74 4d                	je     c0021efe <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021eb1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021eb8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021ebf:	75 30                	jne    c0021ef1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021ec1:	83 ec 0c             	sub    esp,0xc
c0021ec4:	56                   	push   esi
c0021ec5:	e8 42 fd ff ff       	call   c0021c0c <SoundChannel::getSampleRate()>
c0021eca:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021ed0:	89 34 24             	mov    DWORD PTR [esp],esi
c0021ed3:	e8 3c fd ff ff       	call   c0021c14 <SoundChannel::getBits()>
c0021ed8:	83 c4 0c             	add    esp,0xc
c0021edb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021ee1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021ee3:	50                   	push   eax
c0021ee4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021eea:	53                   	push   ebx
c0021eeb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021ef7:	b8 01 00 00 00       	mov    eax,0x1
c0021efc:	eb 03                	jmp    c0021f01 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021efe:	83 c8 ff             	or     eax,0xffffffff
c0021f01:	5a                   	pop    edx
c0021f02:	5b                   	pop    ebx
c0021f03:	5e                   	pop    esi
c0021f04:	c3                   	ret    
c0021f05:	90                   	nop

c0021f06 <SoundDevice::removeChannel(int)>:
c0021f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f0e:	83 fa 1f             	cmp    edx,0x1f
c0021f11:	77 23                	ja     c0021f36 <SoundDevice::removeChannel(int)+0x30>
c0021f13:	8d 14 90             	lea    edx,[eax+edx*4]
c0021f16:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021f1d:	74 17                	je     c0021f36 <SoundDevice::removeChannel(int)+0x30>
c0021f1f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021f29:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021f2f:	75 05                	jne    c0021f36 <SoundDevice::removeChannel(int)+0x30>
c0021f31:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f33:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021f36:	c3                   	ret    
c0021f37:	90                   	nop

c0021f38 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021f38:	57                   	push   edi
c0021f39:	56                   	push   esi
c0021f3a:	53                   	push   ebx
c0021f3b:	31 db                	xor    ebx,ebx
c0021f3d:	83 ec 10             	sub    esp,0x10
c0021f40:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021f44:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021f48:	0f 8d cb 00 00 00    	jge    c0022019 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021f4e:	83 ec 0c             	sub    esp,0xc
c0021f51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021f58:	e8 fa 5e 00 00       	call   c0027e57 <__extendsfdf2>
c0021f5d:	83 c4 10             	add    esp,0x10
c0021f60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f68:	68 00 00 f0 3f       	push   0x3ff00000
c0021f6d:	6a 00                	push   0x0
c0021f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f77:	e8 67 4e 00 00       	call   c0026de3 <__adddf3>
c0021f7c:	83 c4 10             	add    esp,0x10
c0021f7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f87:	68 00 00 e0 3f       	push   0x3fe00000
c0021f8c:	6a 00                	push   0x0
c0021f8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f96:	e8 c5 54 00 00       	call   c0027460 <__muldf3>
c0021f9b:	83 c4 10             	add    esp,0x10
c0021f9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fa6:	68 00 00 60 40       	push   0x40600000
c0021fab:	6a 00                	push   0x0
c0021fad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fb5:	e8 a6 54 00 00       	call   c0027460 <__muldf3>
c0021fba:	59                   	pop    ecx
c0021fbb:	5f                   	pop    edi
c0021fbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021fc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021fc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fcc:	e8 62 5d 00 00       	call   c0027d33 <__truncdfsf2>
c0021fd1:	5a                   	pop    edx
c0021fd2:	89 c7                	mov    edi,eax
c0021fd4:	59                   	pop    ecx
c0021fd5:	68 00 00 fe 42       	push   0x42fe0000
c0021fda:	50                   	push   eax
c0021fdb:	e8 fd 4d 00 00       	call   c0026ddd <__gesf2>
c0021fe0:	83 c4 10             	add    esp,0x10
c0021fe3:	85 c0                	test   eax,eax
c0021fe5:	78 06                	js     c0021fed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021fe7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021feb:	eb 26                	jmp    c0022013 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021fed:	50                   	push   eax
c0021fee:	50                   	push   eax
c0021fef:	6a 00                	push   0x0
c0021ff1:	57                   	push   edi
c0021ff2:	e8 ea 4d 00 00       	call   c0026de1 <__lesf2>
c0021ff7:	83 c4 10             	add    esp,0x10
c0021ffa:	85 c0                	test   eax,eax
c0021ffc:	7f 06                	jg     c0022004 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021ffe:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022002:	eb 0f                	jmp    c0022013 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022004:	83 ec 0c             	sub    esp,0xc
c0022007:	57                   	push   edi
c0022008:	e8 df 5e 00 00       	call   c0027eec <lrintf>
c002200d:	83 c4 10             	add    esp,0x10
c0022010:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022013:	43                   	inc    ebx
c0022014:	e9 2b ff ff ff       	jmp    c0021f44 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022019:	83 c4 10             	add    esp,0x10
c002201c:	5b                   	pop    ebx
c002201d:	5e                   	pop    esi
c002201e:	5f                   	pop    edi
c002201f:	c3                   	ret    

c0022020 <SoundDevice::getAudio(int, float*, float*)>:
c0022020:	55                   	push   ebp
c0022021:	57                   	push   edi
c0022022:	56                   	push   esi
c0022023:	53                   	push   ebx
c0022024:	31 db                	xor    ebx,ebx
c0022026:	83 ec 20             	sub    esp,0x20
c0022029:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002202d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022031:	c1 e0 02             	shl    eax,0x2
c0022034:	50                   	push   eax
c0022035:	6a 00                	push   0x0
c0022037:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002203b:	e8 38 e7 fd ff       	call   c0000778 <memset>
c0022040:	83 c4 10             	add    esp,0x10
c0022043:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022047:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002204e:	85 c0                	test   eax,eax
c0022050:	0f 84 d7 00 00 00    	je     c002212d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022056:	83 ec 0c             	sub    esp,0xc
c0022059:	50                   	push   eax
c002205a:	e8 a5 fb ff ff       	call   c0021c04 <SoundChannel::paused()>
c002205f:	83 c4 10             	add    esp,0x10
c0022062:	84 c0                	test   al,al
c0022064:	0f 85 c3 00 00 00    	jne    c002212d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002206a:	83 ec 0c             	sub    esp,0xc
c002206d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022074:	e8 19 fa ff ff       	call   c0021a92 <SoundChannel::getVolume()>
c0022079:	83 c4 10             	add    esp,0x10
c002207c:	85 c0                	test   eax,eax
c002207e:	0f 84 a9 00 00 00    	je     c002212d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022084:	83 ec 0c             	sub    esp,0xc
c0022087:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002208e:	e8 ff f9 ff ff       	call   c0021a92 <SoundChannel::getVolume()>
c0022093:	83 ec 0c             	sub    esp,0xc
c0022096:	50                   	push   eax
c0022097:	e8 eb 4a 00 00       	call   c0026b87 <__floatsisf>
c002209c:	59                   	pop    ecx
c002209d:	5d                   	pop    ebp
c002209e:	31 ed                	xor    ebp,ebp
c00220a0:	68 00 00 c8 42       	push   0x42c80000
c00220a5:	50                   	push   eax
c00220a6:	e8 b1 48 00 00       	call   c002695c <__divsf3>
c00220ab:	83 c4 10             	add    esp,0x10
c00220ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00220b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00220b6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00220bc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00220c0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00220c7:	e8 60 fb ff ff       	call   c0021c2c <SoundChannel::unbuffer(float*, int, int)>
c00220cc:	83 c4 20             	add    esp,0x20
c00220cf:	89 c1                	mov    ecx,eax
c00220d1:	39 cd                	cmp    ebp,ecx
c00220d3:	7d 52                	jge    c0022127 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00220d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00220d9:	50                   	push   eax
c00220da:	50                   	push   eax
c00220db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00220df:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00220e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00220e6:	e8 ae 46 00 00       	call   c0026799 <__mulsf3>
c00220eb:	5a                   	pop    edx
c00220ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00220f0:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00220f6:	e8 8c 4a 00 00       	call   c0026b87 <__floatsisf>
c00220fb:	59                   	pop    ecx
c00220fc:	5a                   	pop    edx
c00220fd:	50                   	push   eax
c00220fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022102:	e8 55 48 00 00       	call   c002695c <__divsf3>
c0022107:	59                   	pop    ecx
c0022108:	5a                   	pop    edx
c0022109:	50                   	push   eax
c002210a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002210e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022111:	e8 60 43 00 00       	call   c0026476 <__addsf3>
c0022116:	83 c4 10             	add    esp,0x10
c0022119:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002211d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022121:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022124:	45                   	inc    ebp
c0022125:	eb aa                	jmp    c00220d1 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022127:	39 cf                	cmp    edi,ecx
c0022129:	7e 02                	jle    c002212d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002212b:	89 cf                	mov    edi,ecx
c002212d:	43                   	inc    ebx
c002212e:	83 fb 20             	cmp    ebx,0x20
c0022131:	0f 85 10 ff ff ff    	jne    c0022047 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022137:	83 c4 1c             	add    esp,0x1c
c002213a:	89 f8                	mov    eax,edi
c002213c:	5b                   	pop    ebx
c002213d:	5e                   	pop    esi
c002213e:	5f                   	pop    edi
c002213f:	5d                   	pop    ebp
c0022140:	c3                   	ret    
c0022141:	90                   	nop

c0022142 <PCI::open(int, int, void*)>:
c0022142:	83 ec 18             	sub    esp,0x18
c0022145:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022149:	8b 10                	mov    edx,DWORD PTR [eax]
c002214b:	50                   	push   eax
c002214c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002214f:	31 c0                	xor    eax,eax
c0022151:	83 c4 1c             	add    esp,0x1c
c0022154:	c3                   	ret    
c0022155:	90                   	nop

c0022156 <PCI::close(int, int, void*)>:
c0022156:	31 c0                	xor    eax,eax
c0022158:	c3                   	ret    
c0022159:	90                   	nop

c002215a <PCI::PCI()>:
c002215a:	83 ec 0c             	sub    esp,0xc
c002215d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022161:	83 ec 08             	sub    esp,0x8
c0022164:	68 c4 c0 02 c0       	push   0xc002c0c4
c0022169:	50                   	push   eax
c002216a:	e8 35 16 ff ff       	call   c00137a4 <Bus::Bus(char const*)>
c002216f:	83 c4 10             	add    esp,0x10
c0022172:	ba 30 c1 02 c0       	mov    edx,0xc002c130
c0022177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217b:	89 10                	mov    DWORD PTR [eax],edx
c002217d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022181:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022187:	0f b6 d0             	movzx  edx,al
c002218a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022199:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002219f:	0f b6 d0             	movzx  edx,al
c00221a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00221ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221b5:	8d 50 01             	lea    edx,[eax+0x1]
c00221b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221bc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00221c2:	0f b6 d0             	movzx  edx,al
c00221c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00221cd:	83 c9 c0             	or     ecx,0xffffffc0
c00221d0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00221d4:	90                   	nop
c00221d5:	83 c4 0c             	add    esp,0xc
c00221d8:	c3                   	ret    
c00221d9:	90                   	nop

c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00221da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00221de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00221e3:	89 ca                	mov    edx,ecx
c00221e5:	c1 e0 10             	shl    eax,0x10
c00221e8:	81 e2 fc 00 00 00    	and    edx,0xfc
c00221ee:	09 d0                	or     eax,edx
c00221f0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00221f5:	c1 e2 08             	shl    edx,0x8
c00221f8:	09 d0                	or     eax,edx
c00221fa:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00221ff:	c1 e2 0b             	shl    edx,0xb
c0022202:	09 d0                	or     eax,edx
c0022204:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022209:	0d 00 00 00 80       	or     eax,0x80000000
c002220e:	ef                   	out    dx,eax
c002220f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022214:	ed                   	in     eax,dx
c0022215:	83 e1 02             	and    ecx,0x2
c0022218:	0f b6 c9             	movzx  ecx,cl
c002221b:	c1 e1 03             	shl    ecx,0x3
c002221e:	d3 e8                	shr    eax,cl
c0022220:	c3                   	ret    
c0022221:	90                   	nop

c0022222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022222:	6a 00                	push   0x0
c0022224:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022229:	50                   	push   eax
c002222a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002222f:	50                   	push   eax
c0022230:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022235:	50                   	push   eax
c0022236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002223a:	e8 9b ff ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002223f:	83 c4 14             	add    esp,0x14
c0022242:	c3                   	ret    
c0022243:	90                   	nop

c0022244 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022244:	6a 0e                	push   0xe
c0022246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002224b:	50                   	push   eax
c002224c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022251:	50                   	push   eax
c0022252:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022257:	50                   	push   eax
c0022258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002225c:	e8 79 ff ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022261:	83 c4 14             	add    esp,0x14
c0022264:	0f b6 c0             	movzx  eax,al
c0022267:	c3                   	ret    

c0022268 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022268:	55                   	push   ebp
c0022269:	57                   	push   edi
c002226a:	56                   	push   esi
c002226b:	53                   	push   ebx
c002226c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022271:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022276:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002227b:	6a 0a                	push   0xa
c002227d:	56                   	push   esi
c002227e:	55                   	push   ebp
c002227f:	57                   	push   edi
c0022280:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022284:	e8 51 ff ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022289:	6a 0a                	push   0xa
c002228b:	89 c3                	mov    ebx,eax
c002228d:	56                   	push   esi
c002228e:	0f b6 db             	movzx  ebx,bl
c0022291:	55                   	push   ebp
c0022292:	57                   	push   edi
c0022293:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022297:	e8 3e ff ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002229c:	83 c4 28             	add    esp,0x28
c002229f:	25 00 ff 00 00       	and    eax,0xff00
c00222a4:	09 d8                	or     eax,ebx
c00222a6:	5b                   	pop    ebx
c00222a7:	5e                   	pop    esi
c00222a8:	5f                   	pop    edi
c00222a9:	5d                   	pop    ebp
c00222aa:	c3                   	ret    
c00222ab:	90                   	nop

c00222ac <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00222ac:	6a 08                	push   0x8
c00222ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222b3:	50                   	push   eax
c00222b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222b9:	50                   	push   eax
c00222ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222bf:	50                   	push   eax
c00222c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222c4:	e8 11 ff ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222c9:	83 c4 14             	add    esp,0x14
c00222cc:	0f b6 c4             	movzx  eax,ah
c00222cf:	c3                   	ret    

c00222d0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00222d0:	6a 08                	push   0x8
c00222d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222d7:	50                   	push   eax
c00222d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222dd:	50                   	push   eax
c00222de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222e3:	50                   	push   eax
c00222e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222e8:	e8 ed fe ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222ed:	83 c4 14             	add    esp,0x14
c00222f0:	c3                   	ret    
c00222f1:	90                   	nop

c00222f2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00222f2:	6a 3c                	push   0x3c
c00222f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222f9:	50                   	push   eax
c00222fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222ff:	50                   	push   eax
c0022300:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022305:	50                   	push   eax
c0022306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002230a:	e8 cb fe ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002230f:	83 c4 14             	add    esp,0x14
c0022312:	c3                   	ret    
c0022313:	90                   	nop

c0022314 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022314:	6a 18                	push   0x18
c0022316:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002231b:	50                   	push   eax
c002231c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022321:	50                   	push   eax
c0022322:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022327:	50                   	push   eax
c0022328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002232c:	e8 a9 fe ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022331:	83 c4 14             	add    esp,0x14
c0022334:	0f b6 c4             	movzx  eax,ah
c0022337:	c3                   	ret    

c0022338 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022338:	55                   	push   ebp
c0022339:	57                   	push   edi
c002233a:	56                   	push   esi
c002233b:	53                   	push   ebx
c002233c:	50                   	push   eax
c002233d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022341:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022346:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002234b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022350:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022357:	8d 43 12             	lea    eax,[ebx+0x12]
c002235a:	83 c3 10             	add    ebx,0x10
c002235d:	0f b6 c0             	movzx  eax,al
c0022360:	0f b6 db             	movzx  ebx,bl
c0022363:	50                   	push   eax
c0022364:	51                   	push   ecx
c0022365:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022369:	57                   	push   edi
c002236a:	55                   	push   ebp
c002236b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002236f:	e8 66 fe ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022374:	53                   	push   ebx
c0022375:	89 c6                	mov    esi,eax
c0022377:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002237b:	c1 e6 10             	shl    esi,0x10
c002237e:	51                   	push   ecx
c002237f:	57                   	push   edi
c0022380:	55                   	push   ebp
c0022381:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022385:	e8 50 fe ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002238a:	83 c4 2c             	add    esp,0x2c
c002238d:	0f b7 c0             	movzx  eax,ax
c0022390:	5b                   	pop    ebx
c0022391:	09 f0                	or     eax,esi
c0022393:	5e                   	pop    esi
c0022394:	5f                   	pop    edi
c0022395:	5d                   	pop    ebp
c0022396:	c3                   	ret    
c0022397:	90                   	nop

c0022398 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022398:	53                   	push   ebx
c0022399:	ba f8 0c 00 00       	mov    edx,0xcf8
c002239e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00223a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00223a7:	c1 e1 10             	shl    ecx,0x10
c00223aa:	25 fc 00 00 00       	and    eax,0xfc
c00223af:	09 c1                	or     ecx,eax
c00223b1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00223b6:	c1 e0 08             	shl    eax,0x8
c00223b9:	09 c1                	or     ecx,eax
c00223bb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00223c0:	c1 e0 0b             	shl    eax,0xb
c00223c3:	09 c1                	or     ecx,eax
c00223c5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00223cb:	89 c8                	mov    eax,ecx
c00223cd:	ef                   	out    dx,eax
c00223ce:	ba fc 0c 00 00       	mov    edx,0xcfc
c00223d3:	ed                   	in     eax,dx
c00223d4:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00223d9:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00223de:	74 0a                	je     c00223ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00223e0:	0f b7 d8             	movzx  ebx,ax
c00223e3:	89 d0                	mov    eax,edx
c00223e5:	c1 e0 10             	shl    eax,0x10
c00223e8:	eb 05                	jmp    c00223ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00223ea:	66 31 c0             	xor    ax,ax
c00223ed:	89 d3                	mov    ebx,edx
c00223ef:	09 c3                	or     ebx,eax
c00223f1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00223f6:	89 c8                	mov    eax,ecx
c00223f8:	ef                   	out    dx,eax
c00223f9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00223fe:	89 d8                	mov    eax,ebx
c0022400:	ef                   	out    dx,eax
c0022401:	5b                   	pop    ebx
c0022402:	c3                   	ret    
c0022403:	90                   	nop

c0022404 <PCI::checkBus(unsigned char)>:
c0022404:	56                   	push   esi
c0022405:	53                   	push   ebx
c0022406:	31 db                	xor    ebx,ebx
c0022408:	51                   	push   ecx
c0022409:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002240e:	52                   	push   edx
c002240f:	53                   	push   ebx
c0022410:	43                   	inc    ebx
c0022411:	56                   	push   esi
c0022412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022416:	e8 2b 03 00 00       	call   c0022746 <PCI::checkDevice(unsigned char, unsigned char)>
c002241b:	83 c4 10             	add    esp,0x10
c002241e:	83 fb 20             	cmp    ebx,0x20
c0022421:	75 eb                	jne    c002240e <PCI::checkBus(unsigned char)+0xa>
c0022423:	58                   	pop    eax
c0022424:	5b                   	pop    ebx
c0022425:	5e                   	pop    esi
c0022426:	c3                   	ret    
c0022427:	90                   	nop

c0022428 <PCI::foundDevice(PCIDeviceInfo)>:
c0022428:	55                   	push   ebp
c0022429:	57                   	push   edi
c002242a:	56                   	push   esi
c002242b:	53                   	push   ebx
c002242c:	83 ec 1c             	sub    esp,0x1c
c002242f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022433:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022439:	0f 84 52 01 00 00    	je     c0022591 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002243f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022443:	66 81 f9 06 04       	cmp    cx,0x406
c0022448:	75 2c                	jne    c0022476 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002244a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002244f:	50                   	push   eax
c0022450:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022455:	50                   	push   eax
c0022456:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002245b:	50                   	push   eax
c002245c:	56                   	push   esi
c002245d:	e8 b2 fe ff ff       	call   c0022314 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022462:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022466:	0f b6 c0             	movzx  eax,al
c0022469:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002246d:	83 c4 2c             	add    esp,0x2c
c0022470:	5b                   	pop    ebx
c0022471:	5e                   	pop    esi
c0022472:	5f                   	pop    edi
c0022473:	5d                   	pop    ebp
c0022474:	eb 8e                	jmp    c0022404 <PCI::checkBus(unsigned char)>
c0022476:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002247a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022480:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022484:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022488:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002248c:	88 d3                	mov    bl,dl
c002248e:	85 c0                	test   eax,eax
c0022490:	74 33                	je     c00224c5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022492:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022495:	85 d2                	test   edx,edx
c0022497:	74 28                	je     c00224c1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022499:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002249f:	31 ef                	xor    edi,ebp
c00224a1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00224a7:	75 18                	jne    c00224c1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00224a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00224ad:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00224b3:	75 0c                	jne    c00224c1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00224b5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00224bb:	0f 84 d0 00 00 00    	je     c0022591 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00224c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00224c3:	eb c9                	jmp    c002248e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00224c5:	66 81 f9 01 06       	cmp    cx,0x601
c00224ca:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00224ce:	75 19                	jne    c00224e9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00224d0:	83 ec 0c             	sub    esp,0xc
c00224d3:	68 64 01 00 00       	push   0x164
c00224d8:	e8 5d d3 fe ff       	call   c000f83a <malloc>
c00224dd:	89 c5                	mov    ebp,eax
c00224df:	89 04 24             	mov    DWORD PTR [esp],eax
c00224e2:	e8 95 0f 00 00       	call   c002347c <SATABus::SATABus()>
c00224e7:	eb 1e                	jmp    c0022507 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00224e9:	66 81 f9 01 01       	cmp    cx,0x101
c00224ee:	75 60                	jne    c0022550 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00224f0:	83 ec 0c             	sub    esp,0xc
c00224f3:	68 70 02 00 00       	push   0x270
c00224f8:	e8 3d d3 fe ff       	call   c000f83a <malloc>
c00224fd:	89 c5                	mov    ebp,eax
c00224ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0022502:	e8 03 03 00 00       	call   c002280a <IDE::IDE()>
c0022507:	58                   	pop    eax
c0022508:	5a                   	pop    edx
c0022509:	55                   	push   ebp
c002250a:	56                   	push   esi
c002250b:	e8 20 1a ff ff       	call   c0013f30 <Device::addChild(Device*)>
c0022510:	83 ec 1c             	sub    esp,0x1c
c0022513:	b9 09 00 00 00       	mov    ecx,0x9
c0022518:	fc                   	cld    
c0022519:	89 e7                	mov    edi,esp
c002251b:	89 de                	mov    esi,ebx
c002251d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002251f:	55                   	push   ebp
c0022520:	e8 15 19 ff ff       	call   c0013e3a <Device::preOpenPCI(PCIDeviceInfo)>
c0022525:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022528:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002252c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022534:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002253c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022544:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022547:	83 c4 4c             	add    esp,0x4c
c002254a:	5b                   	pop    ebx
c002254b:	5e                   	pop    esi
c002254c:	5f                   	pop    edi
c002254d:	5d                   	pop    ebp
c002254e:	ff e0                	jmp    eax
c0022550:	83 ec 0c             	sub    esp,0xc
c0022553:	68 58 01 00 00       	push   0x158
c0022558:	e8 dd d2 fe ff       	call   c000f83a <malloc>
c002255d:	89 c5                	mov    ebp,eax
c002255f:	58                   	pop    eax
c0022560:	5a                   	pop    edx
c0022561:	68 cc c0 02 c0       	push   0xc002c0cc
c0022566:	55                   	push   ebp
c0022567:	e8 ba 1c ff ff       	call   c0014226 <DriverlessDevice::DriverlessDevice(char const*)>
c002256c:	59                   	pop    ecx
c002256d:	5f                   	pop    edi
c002256e:	55                   	push   ebp
c002256f:	56                   	push   esi
c0022570:	e8 bb 19 ff ff       	call   c0013f30 <Device::addChild(Device*)>
c0022575:	b9 09 00 00 00       	mov    ecx,0x9
c002257a:	fc                   	cld    
c002257b:	89 df                	mov    edi,ebx
c002257d:	89 de                	mov    esi,ebx
c002257f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022581:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022585:	83 c4 2c             	add    esp,0x2c
c0022588:	5b                   	pop    ebx
c0022589:	5e                   	pop    esi
c002258a:	5f                   	pop    edi
c002258b:	5d                   	pop    ebp
c002258c:	e9 a9 18 ff ff       	jmp    c0013e3a <Device::preOpenPCI(PCIDeviceInfo)>
c0022591:	83 c4 1c             	add    esp,0x1c
c0022594:	5b                   	pop    ebx
c0022595:	5e                   	pop    esi
c0022596:	5f                   	pop    edi
c0022597:	5d                   	pop    ebp
c0022598:	c3                   	ret    
c0022599:	90                   	nop

c002259a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002259a:	55                   	push   ebp
c002259b:	57                   	push   edi
c002259c:	56                   	push   esi
c002259d:	53                   	push   ebx
c002259e:	83 ec 5c             	sub    esp,0x5c
c00225a1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00225a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00225a9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00225ad:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00225b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00225b6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00225ba:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00225bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225c3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00225c8:	6a 0c                	push   0xc
c00225ca:	55                   	push   ebp
c00225cb:	53                   	push   ebx
c00225cc:	57                   	push   edi
c00225cd:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00225d4:	e8 01 fc ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225d9:	55                   	push   ebp
c00225da:	53                   	push   ebx
c00225db:	57                   	push   edi
c00225dc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00225e3:	e8 80 fc ff ff       	call   c0022268 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00225e8:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00225ed:	83 c4 24             	add    esp,0x24
c00225f0:	55                   	push   ebp
c00225f1:	53                   	push   ebx
c00225f2:	57                   	push   edi
c00225f3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00225f7:	e8 f6 fc ff ff       	call   c00222f2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00225fc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022600:	6a 3c                	push   0x3c
c0022602:	55                   	push   ebp
c0022603:	53                   	push   ebx
c0022604:	57                   	push   edi
c0022605:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002260c:	e8 c9 fb ff ff       	call   c00221da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022611:	0f b6 c4             	movzx  eax,ah
c0022614:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022618:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002261c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022620:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0022625:	83 c4 24             	add    esp,0x24
c0022628:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002262e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022635:	74 6c                	je     c00226a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022637:	31 f6                	xor    esi,esi
c0022639:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c002263f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022645:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c002264b:	7e 56                	jle    c00226a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002264d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022650:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022657:	39 cb                	cmp    ebx,ecx
c0022659:	75 45                	jne    c00226a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002265b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022662:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022666:	75 38                	jne    c00226a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022668:	83 ec 0c             	sub    esp,0xc
c002266b:	68 e6 c0 02 c0       	push   0xc002c0e6
c0022670:	e8 94 04 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0022675:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c002267b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022681:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022689:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002268d:	52                   	push   edx
c002268e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022692:	53                   	push   ebx
c0022693:	68 0b c1 02 c0       	push   0xc002c10b
c0022698:	e8 6c 04 ff ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c002269d:	83 c4 20             	add    esp,0x20
c00226a0:	46                   	inc    esi
c00226a1:	eb 96                	jmp    c0022639 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00226a3:	31 d2                	xor    edx,edx
c00226a5:	83 ec 0c             	sub    esp,0xc
c00226a8:	55                   	push   ebp
c00226a9:	53                   	push   ebx
c00226aa:	57                   	push   edi
c00226ab:	52                   	push   edx
c00226ac:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00226b0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00226b7:	e8 7c fc ff ff       	call   c0022338 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226bc:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00226c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00226c4:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00226c8:	42                   	inc    edx
c00226c9:	83 c4 20             	add    esp,0x20
c00226cc:	83 fa 06             	cmp    edx,0x6
c00226cf:	75 d4                	jne    c00226a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00226d1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00226d5:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00226d9:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00226dd:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00226e1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00226e5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00226e9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00226ee:	86 e0                	xchg   al,ah
c00226f0:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00226f5:	55                   	push   ebp
c00226f6:	53                   	push   ebx
c00226f7:	57                   	push   edi
c00226f8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00226fc:	e8 ab fb ff ff       	call   c00222ac <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022701:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022705:	55                   	push   ebp
c0022706:	53                   	push   ebx
c0022707:	57                   	push   edi
c0022708:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002270f:	e8 0e fb ff ff       	call   c0022222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022714:	83 ec 0c             	sub    esp,0xc
c0022717:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002271c:	b9 09 00 00 00       	mov    ecx,0x9
c0022721:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022725:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022729:	fc                   	cld    
c002272a:	89 e7                	mov    edi,esp
c002272c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002272e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022735:	e8 ee fc ff ff       	call   c0022428 <PCI::foundDevice(PCIDeviceInfo)>
c002273a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022740:	5b                   	pop    ebx
c0022741:	5e                   	pop    esi
c0022742:	5f                   	pop    edi
c0022743:	5d                   	pop    ebp
c0022744:	c3                   	ret    
c0022745:	90                   	nop

c0022746 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022746:	55                   	push   ebp
c0022747:	57                   	push   edi
c0022748:	56                   	push   esi
c0022749:	53                   	push   ebx
c002274a:	83 ec 0c             	sub    esp,0xc
c002274d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022751:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022756:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002275b:	6a 00                	push   0x0
c002275d:	56                   	push   esi
c002275e:	57                   	push   edi
c002275f:	55                   	push   ebp
c0022760:	e8 bd fa ff ff       	call   c0022222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022765:	6a 00                	push   0x0
c0022767:	56                   	push   esi
c0022768:	57                   	push   edi
c0022769:	55                   	push   ebp
c002276a:	e8 2b fe ff ff       	call   c002259a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002276f:	83 c4 20             	add    esp,0x20
c0022772:	6a 00                	push   0x0
c0022774:	56                   	push   esi
c0022775:	57                   	push   edi
c0022776:	55                   	push   ebp
c0022777:	e8 c8 fa ff ff       	call   c0022244 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002277c:	83 c4 10             	add    esp,0x10
c002277f:	84 c0                	test   al,al
c0022781:	79 27                	jns    c00227aa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022783:	bb 01 00 00 00       	mov    ebx,0x1
c0022788:	53                   	push   ebx
c0022789:	56                   	push   esi
c002278a:	57                   	push   edi
c002278b:	55                   	push   ebp
c002278c:	e8 91 fa ff ff       	call   c0022222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022791:	83 c4 10             	add    esp,0x10
c0022794:	66 40                	inc    ax
c0022796:	74 0c                	je     c00227a4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022798:	53                   	push   ebx
c0022799:	56                   	push   esi
c002279a:	57                   	push   edi
c002279b:	55                   	push   ebp
c002279c:	e8 f9 fd ff ff       	call   c002259a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00227a1:	83 c4 10             	add    esp,0x10
c00227a4:	43                   	inc    ebx
c00227a5:	83 fb 08             	cmp    ebx,0x8
c00227a8:	75 de                	jne    c0022788 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00227aa:	83 c4 0c             	add    esp,0xc
c00227ad:	5b                   	pop    ebx
c00227ae:	5e                   	pop    esi
c00227af:	5f                   	pop    edi
c00227b0:	5d                   	pop    ebp
c00227b1:	c3                   	ret    

c00227b2 <PCI::detect()>:
c00227b2:	56                   	push   esi
c00227b3:	53                   	push   ebx
c00227b4:	53                   	push   ebx
c00227b5:	31 db                	xor    ebx,ebx
c00227b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00227bb:	6a 00                	push   0x0
c00227bd:	6a 00                	push   0x0
c00227bf:	6a 00                	push   0x0
c00227c1:	56                   	push   esi
c00227c2:	e8 7d fa ff ff       	call   c0022244 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00227c7:	83 c4 10             	add    esp,0x10
c00227ca:	a8 80                	test   al,0x80
c00227cc:	75 21                	jne    c00227ef <PCI::detect()+0x3d>
c00227ce:	51                   	push   ecx
c00227cf:	51                   	push   ecx
c00227d0:	6a 00                	push   0x0
c00227d2:	56                   	push   esi
c00227d3:	e8 2c fc ff ff       	call   c0022404 <PCI::checkBus(unsigned char)>
c00227d8:	83 c4 10             	add    esp,0x10
c00227db:	eb 24                	jmp    c0022801 <PCI::detect()+0x4f>
c00227dd:	52                   	push   edx
c00227de:	52                   	push   edx
c00227df:	53                   	push   ebx
c00227e0:	43                   	inc    ebx
c00227e1:	56                   	push   esi
c00227e2:	e8 1d fc ff ff       	call   c0022404 <PCI::checkBus(unsigned char)>
c00227e7:	83 c4 10             	add    esp,0x10
c00227ea:	83 fb 08             	cmp    ebx,0x8
c00227ed:	74 12                	je     c0022801 <PCI::detect()+0x4f>
c00227ef:	53                   	push   ebx
c00227f0:	6a 00                	push   0x0
c00227f2:	6a 00                	push   0x0
c00227f4:	56                   	push   esi
c00227f5:	e8 28 fa ff ff       	call   c0022222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00227fa:	83 c4 10             	add    esp,0x10
c00227fd:	66 40                	inc    ax
c00227ff:	74 dc                	je     c00227dd <PCI::detect()+0x2b>
c0022801:	58                   	pop    eax
c0022802:	5b                   	pop    ebx
c0022803:	5e                   	pop    esi
c0022804:	c3                   	ret    
c0022805:	90                   	nop

c0022806 <IDE::close(int, int, void*)>:
c0022806:	83 c8 ff             	or     eax,0xffffffff
c0022809:	c3                   	ret    

c002280a <IDE::IDE()>:
c002280a:	83 ec 0c             	sub    esp,0xc
c002280d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022811:	83 ec 08             	sub    esp,0x8
c0022814:	68 54 c1 02 c0       	push   0xc002c154
c0022819:	50                   	push   eax
c002281a:	e8 9d 1a ff ff       	call   c00142bc <HardDiskController::HardDiskController(char const*)>
c002281f:	83 c4 10             	add    esp,0x10
c0022822:	ba 94 c3 02 c0       	mov    edx,0xc002c394
c0022827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282b:	89 10                	mov    DWORD PTR [eax],edx
c002282d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022831:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022838:	90                   	nop
c0022839:	83 c4 0c             	add    esp,0xc
c002283c:	c3                   	ret    
c002283d:	90                   	nop

c002283e <IDE::prepareInterrupt(unsigned char)>:
c002283e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022843:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022847:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002284f:	c3                   	ret    

c0022850 <selectDrive(unsigned char, unsigned char)>:
c0022850:	c3                   	ret    
c0022851:	90                   	nop

c0022852 <IDE::getBase(unsigned char)>:
c0022852:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022857:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002285b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022863:	c3                   	ret    

c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022864:	55                   	push   ebp
c0022865:	57                   	push   edi
c0022866:	56                   	push   esi
c0022867:	53                   	push   ebx
c0022868:	83 ec 1c             	sub    esp,0x1c
c002286b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002286f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022873:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022876:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002287a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002287e:	80 f9 03             	cmp    cl,0x3
c0022881:	77 51                	ja     c00228d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022887:	0f b6 f2             	movzx  esi,dl
c002288a:	0f b6 db             	movzx  ebx,bl
c002288d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022890:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022894:	83 ca 80             	or     edx,0xffffff80
c0022897:	0f b6 d2             	movzx  edx,dl
c002289a:	52                   	push   edx
c002289b:	6a 0c                	push   0xc
c002289d:	56                   	push   esi
c002289e:	57                   	push   edi
c002289f:	e8 c0 ff ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00228a4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00228a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228ad:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00228b1:	ee                   	out    dx,al
c00228b2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00228b7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00228bb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00228bf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00228c3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00228cb:	83 c4 2c             	add    esp,0x2c
c00228ce:	5b                   	pop    ebx
c00228cf:	5e                   	pop    esi
c00228d0:	5f                   	pop    edi
c00228d1:	5d                   	pop    ebp
c00228d2:	eb 90                	jmp    c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00228d4:	80 fb 07             	cmp    bl,0x7
c00228d7:	77 12                	ja     c00228eb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00228d9:	0f b6 d2             	movzx  edx,dl
c00228dc:	0f b6 db             	movzx  ebx,bl
c00228df:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00228e7:	89 da                	mov    edx,ebx
c00228e9:	eb 2f                	jmp    c002291a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00228eb:	80 fb 0d             	cmp    bl,0xd
c00228ee:	77 13                	ja     c0022903 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00228f0:	0f b6 d2             	movzx  edx,dl
c00228f3:	0f b6 db             	movzx  ebx,bl
c00228f6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00228fd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022901:	eb 17                	jmp    c002291a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022903:	80 fb 15             	cmp    bl,0x15
c0022906:	77 13                	ja     c002291b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022908:	0f b6 d2             	movzx  edx,dl
c002290b:	0f b6 db             	movzx  ebx,bl
c002290e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022916:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002291a:	ee                   	out    dx,al
c002291b:	83 c4 1c             	add    esp,0x1c
c002291e:	5b                   	pop    ebx
c002291f:	5e                   	pop    esi
c0022920:	5f                   	pop    edi
c0022921:	5d                   	pop    ebp
c0022922:	c3                   	ret    
c0022923:	90                   	nop

c0022924 <IDE::read(unsigned char, unsigned char)>:
c0022924:	55                   	push   ebp
c0022925:	57                   	push   edi
c0022926:	56                   	push   esi
c0022927:	53                   	push   ebx
c0022928:	83 ec 1c             	sub    esp,0x1c
c002292b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002292f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022933:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022936:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002293a:	3c 03                	cmp    al,0x3
c002293c:	77 43                	ja     c0022981 <IDE::read(unsigned char, unsigned char)+0x5d>
c002293e:	0f b6 f2             	movzx  esi,dl
c0022941:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022944:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022948:	83 c8 80             	or     eax,0xffffff80
c002294b:	0f b6 c0             	movzx  eax,al
c002294e:	50                   	push   eax
c002294f:	6a 0c                	push   0xc
c0022951:	56                   	push   esi
c0022952:	57                   	push   edi
c0022953:	e8 0c ff ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022958:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002295d:	0f b6 c3             	movzx  eax,bl
c0022960:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022964:	ec                   	in     al,dx
c0022965:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022969:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002296e:	52                   	push   edx
c002296f:	6a 0c                	push   0xc
c0022971:	56                   	push   esi
c0022972:	57                   	push   edi
c0022973:	e8 ec fe ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022978:	83 c4 20             	add    esp,0x20
c002297b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002297f:	eb 49                	jmp    c00229ca <IDE::read(unsigned char, unsigned char)+0xa6>
c0022981:	80 fb 07             	cmp    bl,0x7
c0022984:	77 12                	ja     c0022998 <IDE::read(unsigned char, unsigned char)+0x74>
c0022986:	0f b6 d2             	movzx  edx,dl
c0022989:	0f b6 c3             	movzx  eax,bl
c002298c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022994:	89 c2                	mov    edx,eax
c0022996:	eb 31                	jmp    c00229c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022998:	80 fb 0d             	cmp    bl,0xd
c002299b:	77 13                	ja     c00229b0 <IDE::read(unsigned char, unsigned char)+0x8c>
c002299d:	0f b6 d2             	movzx  edx,dl
c00229a0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00229a7:	0f b6 d3             	movzx  edx,bl
c00229aa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00229ae:	eb 19                	jmp    c00229c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00229b0:	31 c0                	xor    eax,eax
c00229b2:	80 fb 15             	cmp    bl,0x15
c00229b5:	77 13                	ja     c00229ca <IDE::read(unsigned char, unsigned char)+0xa6>
c00229b7:	0f b6 d2             	movzx  edx,dl
c00229ba:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00229c2:	0f b6 d3             	movzx  edx,bl
c00229c5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00229c9:	ec                   	in     al,dx
c00229ca:	83 c4 1c             	add    esp,0x1c
c00229cd:	5b                   	pop    ebx
c00229ce:	5e                   	pop    esi
c00229cf:	5f                   	pop    edi
c00229d0:	5d                   	pop    ebp
c00229d1:	c3                   	ret    

c00229d2 <IDE::waitInterrupt(unsigned char)>:
c00229d2:	55                   	push   ebp
c00229d3:	57                   	push   edi
c00229d4:	56                   	push   esi
c00229d5:	53                   	push   ebx
c00229d6:	31 db                	xor    ebx,ebx
c00229d8:	83 ec 0c             	sub    esp,0xc
c00229db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00229df:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00229e4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00229ec:	89 e8                	mov    eax,ebp
c00229ee:	84 c0                	test   al,al
c00229f0:	75 34                	jne    c0022a26 <IDE::waitInterrupt(unsigned char)+0x54>
c00229f2:	52                   	push   edx
c00229f3:	6a 0c                	push   0xc
c00229f5:	56                   	push   esi
c00229f6:	57                   	push   edi
c00229f7:	e8 28 ff ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c00229fc:	83 c4 10             	add    esp,0x10
c00229ff:	a8 01                	test   al,0x1
c0022a01:	75 2b                	jne    c0022a2e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022a03:	f6 c3 04             	test   bl,0x4
c0022a06:	75 16                	jne    c0022a1e <IDE::waitInterrupt(unsigned char)+0x4c>
c0022a08:	83 fb 32             	cmp    ebx,0x32
c0022a0b:	7e 11                	jle    c0022a1e <IDE::waitInterrupt(unsigned char)+0x4c>
c0022a0d:	50                   	push   eax
c0022a0e:	50                   	push   eax
c0022a0f:	6a 00                	push   0x0
c0022a11:	68 80 96 98 00       	push   0x989680
c0022a16:	e8 8b b1 ff ff       	call   c001dba6 <nanoSleep(unsigned long long)>
c0022a1b:	83 c4 10             	add    esp,0x10
c0022a1e:	83 fb 3c             	cmp    ebx,0x3c
c0022a21:	74 0b                	je     c0022a2e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022a23:	43                   	inc    ebx
c0022a24:	eb be                	jmp    c00229e4 <IDE::waitInterrupt(unsigned char)+0x12>
c0022a26:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022a2e:	83 c4 0c             	add    esp,0xc
c0022a31:	89 e8                	mov    eax,ebp
c0022a33:	5b                   	pop    ebx
c0022a34:	5e                   	pop    esi
c0022a35:	5f                   	pop    edi
c0022a36:	5d                   	pop    ebp
c0022a37:	c3                   	ret    

c0022a38 <ideChannel0IRQHandler(regs*, void*)>:
c0022a38:	83 ec 10             	sub    esp,0x10
c0022a3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a3f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022a46:	6a 07                	push   0x7
c0022a48:	6a 00                	push   0x0
c0022a4a:	50                   	push   eax
c0022a4b:	e8 d4 fe ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0022a50:	83 c4 1c             	add    esp,0x1c
c0022a53:	c3                   	ret    

c0022a54 <ideChannel1IRQHandler(regs*, void*)>:
c0022a54:	83 ec 10             	sub    esp,0x10
c0022a57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a5b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022a62:	6a 07                	push   0x7
c0022a64:	6a 01                	push   0x1
c0022a66:	50                   	push   eax
c0022a67:	e8 b8 fe ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0022a6c:	83 c4 1c             	add    esp,0x1c
c0022a6f:	c3                   	ret    

c0022a70 <IDE::enableIRQs(unsigned char, bool)>:
c0022a70:	57                   	push   edi
c0022a71:	56                   	push   esi
c0022a72:	be 04 00 00 00       	mov    esi,0x4
c0022a77:	53                   	push   ebx
c0022a78:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022a7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022a81:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022a86:	0f 94 c0             	sete   al
c0022a89:	d1 e0                	shl    eax,1
c0022a8b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022a92:	0f b6 c0             	movzx  eax,al
c0022a95:	50                   	push   eax
c0022a96:	6a 0c                	push   0xc
c0022a98:	57                   	push   edi
c0022a99:	53                   	push   ebx
c0022a9a:	e8 c5 fd ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a9f:	83 c4 10             	add    esp,0x10
c0022aa2:	50                   	push   eax
c0022aa3:	6a 0c                	push   0xc
c0022aa5:	57                   	push   edi
c0022aa6:	53                   	push   ebx
c0022aa7:	e8 78 fe ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0022aac:	83 c4 10             	add    esp,0x10
c0022aaf:	4e                   	dec    esi
c0022ab0:	75 f0                	jne    c0022aa2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022ab2:	5b                   	pop    ebx
c0022ab3:	5e                   	pop    esi
c0022ab4:	5f                   	pop    edi
c0022ab5:	c3                   	ret    

c0022ab6 <IDE::open(int, int, void*)>:
c0022ab6:	55                   	push   ebp
c0022ab7:	57                   	push   edi
c0022ab8:	56                   	push   esi
c0022ab9:	53                   	push   ebx
c0022aba:	83 ec 1c             	sub    esp,0x1c
c0022abd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022ac1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022aca:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022ad3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022ada:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022ae1:	0f 85 b0 02 00 00    	jne    c0022d97 <IDE::open(int, int, void*)+0x2e1>
c0022ae7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022aed:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022af1:	83 e0 7f             	and    eax,0x7f
c0022af4:	3c 05                	cmp    al,0x5
c0022af6:	74 04                	je     c0022afc <IDE::open(int, int, void*)+0x46>
c0022af8:	3c 0f                	cmp    al,0xf
c0022afa:	75 32                	jne    c0022b2e <IDE::open(int, int, void*)+0x78>
c0022afc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022b02:	83 e0 fc             	and    eax,0xfffffffc
c0022b05:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022b0c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022b12:	83 e0 fc             	and    eax,0xfffffffc
c0022b15:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022b1c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022b22:	83 e0 fc             	and    eax,0xfffffffc
c0022b25:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022b2c:	eb 14                	jmp    c0022b42 <IDE::open(int, int, void*)+0x8c>
c0022b2e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022b38:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022b42:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022b49:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022b50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022b54:	89 c6                	mov    esi,eax
c0022b56:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022b5b:	c1 e6 10             	shl    esi,0x10
c0022b5e:	89 e8                	mov    eax,ebp
c0022b60:	89 fa                	mov    edx,edi
c0022b62:	c1 e0 0b             	shl    eax,0xb
c0022b65:	09 f0                	or     eax,esi
c0022b67:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022b6e:	c1 e6 08             	shl    esi,0x8
c0022b71:	09 c6                	or     esi,eax
c0022b73:	89 f0                	mov    eax,esi
c0022b75:	0d 08 00 00 80       	or     eax,0x80000008
c0022b7a:	ef                   	out    dx,eax
c0022b7b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022b80:	89 ca                	mov    edx,ecx
c0022b82:	ed                   	in     eax,dx
c0022b83:	c1 e8 10             	shr    eax,0x10
c0022b86:	3d ff ff 00 00       	cmp    eax,0xffff
c0022b8b:	0f 84 f5 00 00 00    	je     c0022c86 <IDE::open(int, int, void*)+0x1d0>
c0022b91:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022b97:	89 fa                	mov    edx,edi
c0022b99:	89 f0                	mov    eax,esi
c0022b9b:	ef                   	out    dx,eax
c0022b9c:	b0 fe                	mov    al,0xfe
c0022b9e:	89 ca                	mov    edx,ecx
c0022ba0:	ee                   	out    dx,al
c0022ba1:	89 f0                	mov    eax,esi
c0022ba3:	89 fa                	mov    edx,edi
c0022ba5:	ef                   	out    dx,eax
c0022ba6:	89 ca                	mov    edx,ecx
c0022ba8:	ed                   	in     eax,dx
c0022ba9:	3c fe                	cmp    al,0xfe
c0022bab:	0f 85 a9 00 00 00    	jne    c0022c5a <IDE::open(int, int, void*)+0x1a4>
c0022bb1:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c0022bb7:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022bbe:	74 33                	je     c0022bf3 <IDE::open(int, int, void*)+0x13d>
c0022bc0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022bc6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022bca:	40                   	inc    eax
c0022bcb:	83 ec 0c             	sub    esp,0xc
c0022bce:	0f b6 c0             	movzx  eax,al
c0022bd1:	50                   	push   eax
c0022bd2:	55                   	push   ebp
c0022bd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022bd7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022bdd:	51                   	push   ecx
c0022bde:	e8 cd 51 ff ff       	call   c0017db0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022be3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022be8:	83 c4 1c             	add    esp,0x1c
c0022beb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022bf1:	eb 0a                	jmp    c0022bfd <IDE::open(int, int, void*)+0x147>
c0022bf3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022bfd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022c04:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022c0b:	c1 e1 10             	shl    ecx,0x10
c0022c0e:	c1 e0 08             	shl    eax,0x8
c0022c11:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022c16:	09 c1                	or     ecx,eax
c0022c18:	89 fa                	mov    edx,edi
c0022c1a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022c21:	c1 e0 0b             	shl    eax,0xb
c0022c24:	09 c1                	or     ecx,eax
c0022c26:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022c2c:	89 c8                	mov    eax,ecx
c0022c2e:	ef                   	out    dx,eax
c0022c2f:	be fc 0c 00 00       	mov    esi,0xcfc
c0022c34:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022c3a:	89 f2                	mov    edx,esi
c0022c3c:	ee                   	out    dx,al
c0022c3d:	89 c8                	mov    eax,ecx
c0022c3f:	89 fa                	mov    edx,edi
c0022c41:	ef                   	out    dx,eax
c0022c42:	89 f2                	mov    edx,esi
c0022c44:	ed                   	in     eax,dx
c0022c45:	0f b6 c0             	movzx  eax,al
c0022c48:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022c4e:	74 46                	je     c0022c96 <IDE::open(int, int, void*)+0x1e0>
c0022c50:	83 ec 0c             	sub    esp,0xc
c0022c53:	68 6c c1 02 c0       	push   0xc002c16c
c0022c58:	eb 34                	jmp    c0022c8e <IDE::open(int, int, void*)+0x1d8>
c0022c5a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022c63:	75 17                	jne    c0022c7c <IDE::open(int, int, void*)+0x1c6>
c0022c65:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022c6a:	74 07                	je     c0022c73 <IDE::open(int, int, void*)+0x1bd>
c0022c6c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022c71:	75 09                	jne    c0022c7c <IDE::open(int, int, void*)+0x1c6>
c0022c73:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022c7a:	eb 1a                	jmp    c0022c96 <IDE::open(int, int, void*)+0x1e0>
c0022c7c:	83 ec 0c             	sub    esp,0xc
c0022c7f:	68 74 c1 02 c0       	push   0xc002c174
c0022c84:	eb 08                	jmp    c0022c8e <IDE::open(int, int, void*)+0x1d8>
c0022c86:	83 ec 0c             	sub    esp,0xc
c0022c89:	68 a5 c1 02 c0       	push   0xc002c1a5
c0022c8e:	e8 5a 73 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0022c93:	83 c4 10             	add    esp,0x10
c0022c96:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022c9d:	79 1a                	jns    c0022cb9 <IDE::open(int, int, void*)+0x203>
c0022c9f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022ca5:	83 e0 fc             	and    eax,0xfffffffc
c0022ca8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022caf:	83 c0 08             	add    eax,0x8
c0022cb2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022cb9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022cbf:	89 c2                	mov    edx,eax
c0022cc1:	83 e2 0f             	and    edx,0xf
c0022cc4:	66 83 fa 08          	cmp    dx,0x8
c0022cc8:	75 0a                	jne    c0022cd4 <IDE::open(int, int, void*)+0x21e>
c0022cca:	83 e8 02             	sub    eax,0x2
c0022ccd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022cd4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022cda:	89 c2                	mov    edx,eax
c0022cdc:	83 e2 0f             	and    edx,0xf
c0022cdf:	66 83 fa 08          	cmp    dx,0x8
c0022ce3:	75 0a                	jne    c0022cef <IDE::open(int, int, void*)+0x239>
c0022ce5:	83 e8 02             	sub    eax,0x2
c0022ce8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022cef:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022cf6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022cfd:	89 d0                	mov    eax,edx
c0022cff:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022d02:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022d06:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022d0a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022d0d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022d12:	0f b6 c9             	movzx  ecx,cl
c0022d15:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022d1c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022d1f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022d23:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022d27:	8d 50 02             	lea    edx,[eax+0x2]
c0022d2a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022d2f:	0f b6 d2             	movzx  edx,dl
c0022d32:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022d38:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022d3b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022d3f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022d43:	8d 48 03             	lea    ecx,[eax+0x3]
c0022d46:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022d4b:	0f b6 c9             	movzx  ecx,cl
c0022d4e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022d54:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022d57:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022d5b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022d5f:	8d 50 04             	lea    edx,[eax+0x4]
c0022d62:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022d68:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022d6d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022d74:	66 85 f6             	test   si,si
c0022d77:	74 3e                	je     c0022db7 <IDE::open(int, int, void*)+0x301>
c0022d79:	0f b6 d2             	movzx  edx,dl
c0022d7c:	83 c0 05             	add    eax,0x5
c0022d7f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022d82:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022d86:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022d8a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022d90:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022d95:	eb 20                	jmp    c0022db7 <IDE::open(int, int, void*)+0x301>
c0022d97:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022da1:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022dab:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022db2:	e9 02 ff ff ff       	jmp    c0022cb9 <IDE::open(int, int, void*)+0x203>
c0022db7:	52                   	push   edx
c0022db8:	52                   	push   edx
c0022db9:	6a 00                	push   0x0
c0022dbb:	53                   	push   ebx
c0022dbc:	e8 7d fa ff ff       	call   c002283e <IDE::prepareInterrupt(unsigned char)>
c0022dc1:	59                   	pop    ecx
c0022dc2:	5e                   	pop    esi
c0022dc3:	6a 01                	push   0x1
c0022dc5:	53                   	push   ebx
c0022dc6:	e8 73 fa ff ff       	call   c002283e <IDE::prepareInterrupt(unsigned char)>
c0022dcb:	83 c4 0c             	add    esp,0xc
c0022dce:	6a 00                	push   0x0
c0022dd0:	6a 00                	push   0x0
c0022dd2:	53                   	push   ebx
c0022dd3:	e8 98 fc ff ff       	call   c0022a70 <IDE::enableIRQs(unsigned char, bool)>
c0022dd8:	83 c4 0c             	add    esp,0xc
c0022ddb:	6a 00                	push   0x0
c0022ddd:	6a 01                	push   0x1
c0022ddf:	53                   	push   ebx
c0022de0:	e8 8b fc ff ff       	call   c0022a70 <IDE::enableIRQs(unsigned char, bool)>
c0022de5:	83 c4 10             	add    esp,0x10
c0022de8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022def:	74 40                	je     c0022e31 <IDE::open(int, int, void*)+0x37b>
c0022df1:	83 ec 0c             	sub    esp,0xc
c0022df4:	68 cf c1 02 c0       	push   0xc002c1cf
c0022df9:	e8 0b fd fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0022dfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022e01:	6a 01                	push   0x1
c0022e03:	68 38 2a 02 c0       	push   0xc0022a38
c0022e08:	6a 0e                	push   0xe
c0022e0a:	53                   	push   ebx
c0022e0b:	e8 a4 10 ff ff       	call   c0013eb4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e10:	83 c4 14             	add    esp,0x14
c0022e13:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022e19:	53                   	push   ebx
c0022e1a:	6a 01                	push   0x1
c0022e1c:	68 54 2a 02 c0       	push   0xc0022a54
c0022e21:	6a 0f                	push   0xf
c0022e23:	53                   	push   ebx
c0022e24:	e8 8b 10 ff ff       	call   c0013eb4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e29:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022e2f:	eb 4a                	jmp    c0022e7b <IDE::open(int, int, void*)+0x3c5>
c0022e31:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022e3b:	50                   	push   eax
c0022e3c:	6a 0f                	push   0xf
c0022e3e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022e44:	68 eb c1 02 c0       	push   0xc002c1eb
c0022e49:	e8 bb fc fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0022e4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022e51:	6a 00                	push   0x0
c0022e53:	68 38 2a 02 c0       	push   0xc0022a38
c0022e58:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022e5e:	53                   	push   ebx
c0022e5f:	e8 50 10 ff ff       	call   c0013eb4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e64:	83 c4 14             	add    esp,0x14
c0022e67:	53                   	push   ebx
c0022e68:	6a 00                	push   0x0
c0022e6a:	68 54 2a 02 c0       	push   0xc0022a54
c0022e6f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022e75:	53                   	push   ebx
c0022e76:	e8 39 10 ff ff       	call   c0013eb4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022e7d:	83 c4 20             	add    esp,0x20
c0022e80:	83 ec 0c             	sub    esp,0xc
c0022e83:	53                   	push   ebx
c0022e84:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022e87:	83 c4 0c             	add    esp,0xc
c0022e8a:	6a 07                	push   0x7
c0022e8c:	6a 00                	push   0x0
c0022e8e:	53                   	push   ebx
c0022e8f:	e8 90 fa ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0022e94:	83 c4 0c             	add    esp,0xc
c0022e97:	6a 07                	push   0x7
c0022e99:	6a 01                	push   0x1
c0022e9b:	53                   	push   ebx
c0022e9c:	e8 83 fa ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0022ea1:	83 c4 0c             	add    esp,0xc
c0022ea4:	6a 01                	push   0x1
c0022ea6:	6a 00                	push   0x0
c0022ea8:	53                   	push   ebx
c0022ea9:	e8 c2 fb ff ff       	call   c0022a70 <IDE::enableIRQs(unsigned char, bool)>
c0022eae:	83 c4 0c             	add    esp,0xc
c0022eb1:	6a 01                	push   0x1
c0022eb3:	6a 01                	push   0x1
c0022eb5:	53                   	push   ebx
c0022eb6:	e8 b5 fb ff ff       	call   c0022a70 <IDE::enableIRQs(unsigned char, bool)>
c0022ebb:	83 c4 2c             	add    esp,0x2c
c0022ebe:	31 c0                	xor    eax,eax
c0022ec0:	5b                   	pop    ebx
c0022ec1:	5e                   	pop    esi
c0022ec2:	5f                   	pop    edi
c0022ec3:	5d                   	pop    ebp
c0022ec4:	c3                   	ret    
c0022ec5:	90                   	nop

c0022ec6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022ec6:	55                   	push   ebp
c0022ec7:	57                   	push   edi
c0022ec8:	56                   	push   esi
c0022ec9:	53                   	push   ebx
c0022eca:	83 ec 1c             	sub    esp,0x1c
c0022ecd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022ed1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ed5:	8d 50 f8             	lea    edx,[eax-0x8]
c0022ed8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022edc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022ee0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022ee4:	80 fa 03             	cmp    dl,0x3
c0022ee7:	77 5d                	ja     c0022f46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022ee9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022eed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ef1:	0f b6 db             	movzx  ebx,bl
c0022ef4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022ef7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022efb:	83 ca 80             	or     edx,0xffffff80
c0022efe:	0f b6 d2             	movzx  edx,dl
c0022f01:	52                   	push   edx
c0022f02:	6a 0c                	push   0xc
c0022f04:	53                   	push   ebx
c0022f05:	56                   	push   esi
c0022f06:	e8 59 f9 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f0b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022f10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022f18:	0f b6 c0             	movzx  eax,al
c0022f1b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022f1f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022f21:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022f26:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022f2a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022f2e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f32:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f3a:	83 c4 2c             	add    esp,0x2c
c0022f3d:	5b                   	pop    ebx
c0022f3e:	5e                   	pop    esi
c0022f3f:	5f                   	pop    edi
c0022f40:	5d                   	pop    ebp
c0022f41:	e9 1e f9 ff ff       	jmp    c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f46:	3c 07                	cmp    al,0x7
c0022f48:	77 10                	ja     c0022f5a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022f4a:	0f b6 db             	movzx  ebx,bl
c0022f4d:	0f b6 d0             	movzx  edx,al
c0022f50:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022f58:	eb 2d                	jmp    c0022f87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022f5a:	3c 0d                	cmp    al,0xd
c0022f5c:	77 13                	ja     c0022f71 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022f5e:	0f b6 db             	movzx  ebx,bl
c0022f61:	0f b6 c0             	movzx  eax,al
c0022f64:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022f6b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022f6f:	eb 16                	jmp    c0022f87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022f71:	3c 15                	cmp    al,0x15
c0022f73:	77 14                	ja     c0022f89 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022f75:	0f b6 db             	movzx  ebx,bl
c0022f78:	0f b6 c0             	movzx  eax,al
c0022f7b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022f83:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022f87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022f89:	83 c4 1c             	add    esp,0x1c
c0022f8c:	5b                   	pop    ebx
c0022f8d:	5e                   	pop    esi
c0022f8e:	5f                   	pop    edi
c0022f8f:	5d                   	pop    ebp
c0022f90:	c3                   	ret    
c0022f91:	90                   	nop

c0022f92 <IDE::detect()>:
c0022f92:	55                   	push   ebp
c0022f93:	57                   	push   edi
c0022f94:	56                   	push   esi
c0022f95:	53                   	push   ebx
c0022f96:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022f9c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022fa3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022faa:	0f 85 be 02 00 00    	jne    c002326e <IDE::detect()+0x2dc>
c0022fb0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022fb7:	31 f6                	xor    esi,esi
c0022fb9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022fc1:	31 ed                	xor    ebp,ebp
c0022fc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc7:	c1 e0 06             	shl    eax,0x6
c0022fca:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022fd2:	89 e8                	mov    eax,ebp
c0022fd4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022fd8:	c1 e0 04             	shl    eax,0x4
c0022fdb:	83 c8 a0             	or     eax,0xffffffa0
c0022fde:	0f b6 c0             	movzx  eax,al
c0022fe1:	50                   	push   eax
c0022fe2:	6a 06                	push   0x6
c0022fe4:	56                   	push   esi
c0022fe5:	53                   	push   ebx
c0022fe6:	e8 79 f8 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022feb:	83 c4 0c             	add    esp,0xc
c0022fee:	6a 0c                	push   0xc
c0022ff0:	56                   	push   esi
c0022ff1:	53                   	push   ebx
c0022ff2:	e8 2d f9 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0022ff7:	83 c4 0c             	add    esp,0xc
c0022ffa:	6a 0c                	push   0xc
c0022ffc:	56                   	push   esi
c0022ffd:	53                   	push   ebx
c0022ffe:	e8 21 f9 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0023003:	83 c4 0c             	add    esp,0xc
c0023006:	6a 0c                	push   0xc
c0023008:	56                   	push   esi
c0023009:	53                   	push   ebx
c002300a:	e8 15 f9 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c002300f:	83 c4 0c             	add    esp,0xc
c0023012:	6a 0c                	push   0xc
c0023014:	56                   	push   esi
c0023015:	53                   	push   ebx
c0023016:	e8 09 f9 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c002301b:	68 ec 00 00 00       	push   0xec
c0023020:	6a 07                	push   0x7
c0023022:	56                   	push   esi
c0023023:	53                   	push   ebx
c0023024:	e8 3b f8 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023029:	83 c4 1c             	add    esp,0x1c
c002302c:	6a 0c                	push   0xc
c002302e:	56                   	push   esi
c002302f:	53                   	push   ebx
c0023030:	e8 ef f8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0023035:	83 c4 0c             	add    esp,0xc
c0023038:	6a 0c                	push   0xc
c002303a:	56                   	push   esi
c002303b:	53                   	push   ebx
c002303c:	e8 e3 f8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0023041:	83 c4 0c             	add    esp,0xc
c0023044:	6a 0c                	push   0xc
c0023046:	56                   	push   esi
c0023047:	53                   	push   ebx
c0023048:	e8 d7 f8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c002304d:	83 c4 0c             	add    esp,0xc
c0023050:	6a 0c                	push   0xc
c0023052:	56                   	push   esi
c0023053:	53                   	push   ebx
c0023054:	e8 cb f8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0023059:	83 c4 0c             	add    esp,0xc
c002305c:	6a 0c                	push   0xc
c002305e:	56                   	push   esi
c002305f:	53                   	push   ebx
c0023060:	e8 bf f8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0023065:	83 c4 10             	add    esp,0x10
c0023068:	84 c0                	test   al,al
c002306a:	0f 84 8b 01 00 00    	je     c00231fb <IDE::detect()+0x269>
c0023070:	31 ff                	xor    edi,edi
c0023072:	50                   	push   eax
c0023073:	6a 0c                	push   0xc
c0023075:	56                   	push   esi
c0023076:	53                   	push   ebx
c0023077:	e8 a8 f8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c002307c:	83 c4 10             	add    esp,0x10
c002307f:	a8 01                	test   al,0x1
c0023081:	0f 85 8e 01 00 00    	jne    c0023215 <IDE::detect()+0x283>
c0023087:	84 c0                	test   al,al
c0023089:	78 04                	js     c002308f <IDE::detect()+0xfd>
c002308b:	a8 08                	test   al,0x8
c002308d:	75 27                	jne    c00230b6 <IDE::detect()+0x124>
c002308f:	47                   	inc    edi
c0023090:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023096:	7e da                	jle    c0023072 <IDE::detect()+0xe0>
c0023098:	50                   	push   eax
c0023099:	50                   	push   eax
c002309a:	6a 00                	push   0x0
c002309c:	68 40 4b 4c 00       	push   0x4c4b40
c00230a1:	e8 00 ab ff ff       	call   c001dba6 <nanoSleep(unsigned long long)>
c00230a6:	83 c4 10             	add    esp,0x10
c00230a9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00230af:	75 c1                	jne    c0023072 <IDE::detect()+0xe0>
c00230b1:	e9 5f 01 00 00       	jmp    c0023215 <IDE::detect()+0x283>
c00230b6:	31 c9                	xor    ecx,ecx
c00230b8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00230bc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00230c0:	83 ec 0c             	sub    esp,0xc
c00230c3:	68 80 00 00 00       	push   0x80
c00230c8:	57                   	push   edi
c00230c9:	6a 00                	push   0x0
c00230cb:	56                   	push   esi
c00230cc:	53                   	push   ebx
c00230cd:	e8 f4 fd ff ff       	call   c0022ec6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00230d2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00230d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00230db:	89 d1                	mov    ecx,edx
c00230dd:	c1 e0 06             	shl    eax,0x6
c00230e0:	01 d8                	add    eax,ebx
c00230e2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00230e9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00230f0:	89 f2                	mov    edx,esi
c00230f2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00230f8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00230fc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023102:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023106:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002310d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023115:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002311c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023124:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002312a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023131:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023137:	8d 54 24 58          	lea    edx,[esp+0x58]
c002313b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002313f:	83 c4 20             	add    esp,0x20
c0023142:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023145:	83 c0 02             	add    eax,0x2
c0023148:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002314e:	83 c7 02             	add    edi,0x2
c0023151:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023154:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002315a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002315e:	75 e2                	jne    c0023142 <IDE::detect()+0x1b0>
c0023160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023164:	c1 e0 06             	shl    eax,0x6
c0023167:	01 d8                	add    eax,ebx
c0023169:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002316f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023176:	66 c1 ea 09          	shr    dx,0x9
c002317a:	83 e2 01             	and    edx,0x1
c002317d:	84 c9                	test   cl,cl
c002317f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023185:	75 2f                	jne    c00231b6 <IDE::detect()+0x224>
c0023187:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002318d:	85 c0                	test   eax,eax
c002318f:	74 66                	je     c00231f7 <IDE::detect()+0x265>
c0023191:	50                   	push   eax
c0023192:	55                   	push   ebp
c0023193:	56                   	push   esi
c0023194:	68 07 c2 02 c0       	push   0xc002c207
c0023199:	e8 6b f9 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c002319e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00231a5:	e8 90 c6 fe ff       	call   c000f83a <malloc>
c00231aa:	89 c7                	mov    edi,eax
c00231ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00231af:	e8 78 06 00 00       	call   c002382c <ATA::ATA()>
c00231b4:	eb 28                	jmp    c00231de <IDE::detect()+0x24c>
c00231b6:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00231bc:	55                   	push   ebp
c00231bd:	56                   	push   esi
c00231be:	68 36 c2 02 c0       	push   0xc002c236
c00231c3:	e8 41 f9 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00231c8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00231cf:	e8 66 c6 fe ff       	call   c000f83a <malloc>
c00231d4:	89 c7                	mov    edi,eax
c00231d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00231d9:	e8 8e 0c 00 00       	call   c0023e6c <ATAPI::ATAPI()>
c00231de:	5a                   	pop    edx
c00231df:	59                   	pop    ecx
c00231e0:	57                   	push   edi
c00231e1:	53                   	push   ebx
c00231e2:	e8 49 0d ff ff       	call   c0013f30 <Device::addChild(Device*)>
c00231e7:	8b 07                	mov    eax,DWORD PTR [edi]
c00231e9:	53                   	push   ebx
c00231ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00231ee:	6a 00                	push   0x0
c00231f0:	57                   	push   edi
c00231f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00231f4:	83 c4 20             	add    esp,0x20
c00231f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00231fb:	4d                   	dec    ebp
c00231fc:	74 0a                	je     c0023208 <IDE::detect()+0x276>
c00231fe:	bd 01 00 00 00       	mov    ebp,0x1
c0023203:	e9 bb fd ff ff       	jmp    c0022fc3 <IDE::detect()+0x31>
c0023208:	4e                   	dec    esi
c0023209:	74 63                	je     c002326e <IDE::detect()+0x2dc>
c002320b:	be 01 00 00 00       	mov    esi,0x1
c0023210:	e9 ac fd ff ff       	jmp    c0022fc1 <IDE::detect()+0x2f>
c0023215:	50                   	push   eax
c0023216:	6a 04                	push   0x4
c0023218:	56                   	push   esi
c0023219:	53                   	push   ebx
c002321a:	e8 05 f7 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c002321f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023223:	83 c4 0c             	add    esp,0xc
c0023226:	6a 05                	push   0x5
c0023228:	56                   	push   esi
c0023229:	53                   	push   ebx
c002322a:	e8 f5 f6 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c002322f:	83 c4 10             	add    esp,0x10
c0023232:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023236:	80 fa 14             	cmp    dl,0x14
c0023239:	75 04                	jne    c002323f <IDE::detect()+0x2ad>
c002323b:	3c eb                	cmp    al,0xeb
c002323d:	eb 07                	jmp    c0023246 <IDE::detect()+0x2b4>
c002323f:	3c 96                	cmp    al,0x96
c0023241:	75 b8                	jne    c00231fb <IDE::detect()+0x269>
c0023243:	80 fa 69             	cmp    dl,0x69
c0023246:	75 b3                	jne    c00231fb <IDE::detect()+0x269>
c0023248:	68 a1 00 00 00       	push   0xa1
c002324d:	6a 07                	push   0x7
c002324f:	56                   	push   esi
c0023250:	53                   	push   ebx
c0023251:	e8 0e f6 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023256:	5f                   	pop    edi
c0023257:	58                   	pop    eax
c0023258:	6a 00                	push   0x0
c002325a:	68 40 42 0f 00       	push   0xf4240
c002325f:	e8 42 a9 ff ff       	call   c001dba6 <nanoSleep(unsigned long long)>
c0023264:	83 c4 10             	add    esp,0x10
c0023267:	b1 01                	mov    cl,0x1
c0023269:	e9 4a fe ff ff       	jmp    c00230b8 <IDE::detect()+0x126>
c002326e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023274:	5b                   	pop    ebx
c0023275:	5e                   	pop    esi
c0023276:	5f                   	pop    edi
c0023277:	5d                   	pop    ebp
c0023278:	c3                   	ret    
c0023279:	90                   	nop

c002327a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002327a:	55                   	push   ebp
c002327b:	57                   	push   edi
c002327c:	56                   	push   esi
c002327d:	53                   	push   ebx
c002327e:	83 ec 1c             	sub    esp,0x1c
c0023281:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023285:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023289:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002328d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023291:	88 c3                	mov    bl,al
c0023293:	84 c0                	test   al,al
c0023295:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023299:	0f 84 67 01 00 00    	je     c0023406 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002329f:	83 ec 0c             	sub    esp,0xc
c00232a2:	68 67 c2 02 c0       	push   0xc002c267
c00232a7:	e8 5d f8 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00232ac:	83 c4 10             	add    esp,0x10
c00232af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232b3:	3c 01                	cmp    al,0x1
c00232b5:	75 17                	jne    c00232ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00232b7:	83 ec 0c             	sub    esp,0xc
c00232ba:	b3 13                	mov    bl,0x13
c00232bc:	68 73 c2 02 c0       	push   0xc002c273
c00232c1:	e8 43 f8 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00232c6:	83 c4 10             	add    esp,0x10
c00232c9:	e9 25 01 00 00       	jmp    c00233f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00232ce:	3c 02                	cmp    al,0x2
c00232d0:	0f 85 ef 00 00 00    	jne    c00233c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00232d6:	d1 e6                	shl    esi,1
c00232d8:	09 ee                	or     esi,ebp
c00232da:	52                   	push   edx
c00232db:	89 f0                	mov    eax,esi
c00232dd:	6a 01                	push   0x1
c00232df:	0f b6 f0             	movzx  esi,al
c00232e2:	c1 e6 06             	shl    esi,0x6
c00232e5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00232ed:	50                   	push   eax
c00232ee:	57                   	push   edi
c00232ef:	e8 30 f6 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c00232f4:	83 c4 10             	add    esp,0x10
c00232f7:	89 c6                	mov    esi,eax
c00232f9:	a8 01                	test   al,0x1
c00232fb:	74 12                	je     c002330f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00232fd:	83 ec 0c             	sub    esp,0xc
c0023300:	b3 07                	mov    bl,0x7
c0023302:	68 88 c2 02 c0       	push   0xc002c288
c0023307:	e8 fd f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c002330c:	83 c4 10             	add    esp,0x10
c002330f:	f7 c6 02 00 00 00    	test   esi,0x2
c0023315:	74 12                	je     c0023329 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023317:	83 ec 0c             	sub    esp,0xc
c002331a:	b3 03                	mov    bl,0x3
c002331c:	68 a6 c2 02 c0       	push   0xc002c2a6
c0023321:	e8 e3 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023326:	83 c4 10             	add    esp,0x10
c0023329:	f7 c6 04 00 00 00    	test   esi,0x4
c002332f:	74 12                	je     c0023343 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023331:	83 ec 0c             	sub    esp,0xc
c0023334:	b3 14                	mov    bl,0x14
c0023336:	68 c6 c2 02 c0       	push   0xc002c2c6
c002333b:	e8 c9 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023340:	83 c4 10             	add    esp,0x10
c0023343:	f7 c6 08 00 00 00    	test   esi,0x8
c0023349:	74 12                	je     c002335d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002334b:	83 ec 0c             	sub    esp,0xc
c002334e:	b3 03                	mov    bl,0x3
c0023350:	68 a6 c2 02 c0       	push   0xc002c2a6
c0023355:	e8 af f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c002335a:	83 c4 10             	add    esp,0x10
c002335d:	f7 c6 10 00 00 00    	test   esi,0x10
c0023363:	74 12                	je     c0023377 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023365:	83 ec 0c             	sub    esp,0xc
c0023368:	b3 15                	mov    bl,0x15
c002336a:	68 de c2 02 c0       	push   0xc002c2de
c002336f:	e8 95 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023374:	83 c4 10             	add    esp,0x10
c0023377:	f7 c6 20 00 00 00    	test   esi,0x20
c002337d:	74 12                	je     c0023391 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002337f:	83 ec 0c             	sub    esp,0xc
c0023382:	b3 03                	mov    bl,0x3
c0023384:	68 a6 c2 02 c0       	push   0xc002c2a6
c0023389:	e8 7b f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c002338e:	83 c4 10             	add    esp,0x10
c0023391:	f7 c6 40 00 00 00    	test   esi,0x40
c0023397:	74 12                	je     c00233ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023399:	83 ec 0c             	sub    esp,0xc
c002339c:	b3 16                	mov    bl,0x16
c002339e:	68 f8 c2 02 c0       	push   0xc002c2f8
c00233a3:	e8 61 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00233a8:	83 c4 10             	add    esp,0x10
c00233ab:	89 f0                	mov    eax,esi
c00233ad:	84 c0                	test   al,al
c00233af:	79 42                	jns    c00233f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00233b1:	83 ec 0c             	sub    esp,0xc
c00233b4:	b3 0d                	mov    bl,0xd
c00233b6:	68 19 c3 02 c0       	push   0xc002c319
c00233bb:	e8 49 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00233c0:	83 c4 10             	add    esp,0x10
c00233c3:	eb 2e                	jmp    c00233f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00233c5:	3c 03                	cmp    al,0x3
c00233c7:	75 14                	jne    c00233dd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00233c9:	83 ec 0c             	sub    esp,0xc
c00233cc:	b3 17                	mov    bl,0x17
c00233ce:	68 2d c3 02 c0       	push   0xc002c32d
c00233d3:	e8 31 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00233d8:	83 c4 10             	add    esp,0x10
c00233db:	eb 16                	jmp    c00233f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00233dd:	3c 04                	cmp    al,0x4
c00233df:	75 12                	jne    c00233f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00233e1:	83 ec 0c             	sub    esp,0xc
c00233e4:	b3 08                	mov    bl,0x8
c00233e6:	68 43 c3 02 c0       	push   0xc002c343
c00233eb:	e8 19 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00233f0:	83 c4 10             	add    esp,0x10
c00233f3:	50                   	push   eax
c00233f4:	50                   	push   eax
c00233f5:	0f b6 c3             	movzx  eax,bl
c00233f8:	50                   	push   eax
c00233f9:	68 5b c3 02 c0       	push   0xc002c35b
c00233fe:	e8 06 f7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023403:	83 c4 10             	add    esp,0x10
c0023406:	83 c4 1c             	add    esp,0x1c
c0023409:	88 d8                	mov    al,bl
c002340b:	5b                   	pop    ebx
c002340c:	5e                   	pop    esi
c002340d:	5f                   	pop    edi
c002340e:	5d                   	pop    ebp
c002340f:	c3                   	ret    

c0023410 <IDE::polling(unsigned char, unsigned int)>:
c0023410:	57                   	push   edi
c0023411:	56                   	push   esi
c0023412:	53                   	push   ebx
c0023413:	bb 04 00 00 00       	mov    ebx,0x4
c0023418:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002341c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023421:	52                   	push   edx
c0023422:	6a 0c                	push   0xc
c0023424:	56                   	push   esi
c0023425:	57                   	push   edi
c0023426:	e8 f9 f4 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c002342b:	83 c4 10             	add    esp,0x10
c002342e:	4b                   	dec    ebx
c002342f:	75 f0                	jne    c0023421 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023431:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023436:	50                   	push   eax
c0023437:	6a 0c                	push   0xc
c0023439:	56                   	push   esi
c002343a:	57                   	push   edi
c002343b:	e8 e4 f4 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0023440:	83 c4 10             	add    esp,0x10
c0023443:	a8 01                	test   al,0x1
c0023445:	74 12                	je     c0023459 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023447:	83 ec 0c             	sub    esp,0xc
c002344a:	68 75 c3 02 c0       	push   0xc002c375
c002344f:	e8 b5 f6 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023454:	83 c4 10             	add    esp,0x10
c0023457:	eb 17                	jmp    c0023470 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023459:	a8 20                	test   al,0x20
c002345b:	75 0f                	jne    c002346c <IDE::polling(unsigned char, unsigned int)+0x5c>
c002345d:	4b                   	dec    ebx
c002345e:	74 10                	je     c0023470 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023460:	84 c0                	test   al,al
c0023462:	78 d2                	js     c0023436 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023464:	a8 08                	test   al,0x8
c0023466:	74 ce                	je     c0023436 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023468:	31 c0                	xor    eax,eax
c002346a:	eb 06                	jmp    c0023472 <IDE::polling(unsigned char, unsigned int)+0x62>
c002346c:	b0 01                	mov    al,0x1
c002346e:	eb 02                	jmp    c0023472 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023470:	b0 02                	mov    al,0x2
c0023472:	5b                   	pop    ebx
c0023473:	5e                   	pop    esi
c0023474:	5f                   	pop    edi
c0023475:	c3                   	ret    

c0023476 <SATABus::close(int, int, void*)>:
c0023476:	31 c0                	xor    eax,eax
c0023478:	c3                   	ret    
c0023479:	90                   	nop

c002347a <SATABus::detect()>:
c002347a:	c3                   	ret    
c002347b:	90                   	nop

c002347c <SATABus::SATABus()>:
c002347c:	83 ec 0c             	sub    esp,0xc
c002347f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023483:	83 ec 08             	sub    esp,0x8
c0023486:	68 b8 c3 02 c0       	push   0xc002c3b8
c002348b:	50                   	push   eax
c002348c:	e8 2b 0e ff ff       	call   c00142bc <HardDiskController::HardDiskController(char const*)>
c0023491:	83 c4 10             	add    esp,0x10
c0023494:	ba 74 c4 02 c0       	mov    edx,0xc002c474
c0023499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002349d:	89 10                	mov    DWORD PTR [eax],edx
c002349f:	83 ec 0c             	sub    esp,0xc
c00234a2:	6a 50                	push   0x50
c00234a4:	e8 f6 ca fe ff       	call   c000ff9f <Phys::allocateContiguousPages(int)>
c00234a9:	83 c4 10             	add    esp,0x10
c00234ac:	89 c2                	mov    edx,eax
c00234ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00234b8:	83 ec 0c             	sub    esp,0xc
c00234bb:	6a 50                	push   0x50
c00234bd:	e8 57 e6 fe ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c00234c2:	83 c4 10             	add    esp,0x10
c00234c5:	89 c2                	mov    edx,eax
c00234c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00234d1:	e8 d3 e7 fe ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c00234d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234da:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00234e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234e4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00234ea:	83 ec 0c             	sub    esp,0xc
c00234ed:	6a 03                	push   0x3
c00234ef:	6a 50                	push   0x50
c00234f1:	51                   	push   ecx
c00234f2:	52                   	push   edx
c00234f3:	50                   	push   eax
c00234f4:	e8 df ef fe ff       	call   c00124d8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00234f9:	83 c4 20             	add    esp,0x20
c00234fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023500:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002350a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023510:	83 ec 04             	sub    esp,0x4
c0023513:	52                   	push   edx
c0023514:	50                   	push   eax
c0023515:	68 dc c3 02 c0       	push   0xc002c3dc
c002351a:	e8 ea f5 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c002351f:	83 c4 10             	add    esp,0x10
c0023522:	90                   	nop
c0023523:	83 c4 0c             	add    esp,0xc
c0023526:	c3                   	ret    
c0023527:	90                   	nop

c0023528 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023528:	83 ec 0c             	sub    esp,0xc
c002352b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002352f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023532:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023535:	09 c2                	or     edx,eax
c0023537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002353b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023541:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023543:	31 c0                	xor    eax,eax
c0023545:	c1 e9 08             	shr    ecx,0x8
c0023548:	83 e1 0f             	and    ecx,0xf
c002354b:	39 c8                	cmp    eax,ecx
c002354d:	74 0a                	je     c0023559 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002354f:	f6 c2 01             	test   dl,0x1
c0023552:	74 18                	je     c002356c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023554:	d1 ea                	shr    edx,1
c0023556:	40                   	inc    eax
c0023557:	eb f2                	jmp    c002354b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023559:	83 ec 0c             	sub    esp,0xc
c002355c:	68 00 c4 02 c0       	push   0xc002c400
c0023561:	e8 87 6a ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0023566:	83 c4 10             	add    esp,0x10
c0023569:	83 c8 ff             	or     eax,0xffffffff
c002356c:	83 c4 0c             	add    esp,0xc
c002356f:	c3                   	ret    

c0023570 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023570:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023574:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023577:	89 c2                	mov    edx,eax
c0023579:	c1 ea 08             	shr    edx,0x8
c002357c:	83 e2 0f             	and    edx,0xf
c002357f:	fe ca                	dec    dl
c0023581:	75 31                	jne    c00235b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023583:	83 e0 0f             	and    eax,0xf
c0023586:	3c 03                	cmp    al,0x3
c0023588:	75 2a                	jne    c00235b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002358a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002358d:	b8 02 00 00 00       	mov    eax,0x2
c0023592:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023598:	74 1c                	je     c00235b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002359a:	b8 04 00 00 00       	mov    eax,0x4
c002359f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00235a5:	74 0f                	je     c00235b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00235a7:	31 c0                	xor    eax,eax
c00235a9:	83 fa 03             	cmp    edx,0x3
c00235ac:	0f 94 c0             	sete   al
c00235af:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00235b3:	c3                   	ret    
c00235b4:	31 c0                	xor    eax,eax
c00235b6:	c3                   	ret    
c00235b7:	90                   	nop

c00235b8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00235b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00235bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00235bf:	0f ba e2 0f          	bt     edx,0xf
c00235c3:	72 f7                	jb     c00235bc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00235c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00235c8:	83 ca 10             	or     edx,0x10
c00235cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00235ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00235d1:	83 ca 01             	or     edx,0x1
c00235d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00235d7:	c3                   	ret    

c00235d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00235d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00235dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00235df:	83 e2 fe             	and    edx,0xfffffffe
c00235e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00235e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00235e8:	83 e2 ef             	and    edx,0xffffffef
c00235eb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00235ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00235f1:	0f ba e2 0e          	bt     edx,0xe
c00235f5:	72 f7                	jb     c00235ee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00235f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00235fa:	0f ba e2 0f          	bt     edx,0xf
c00235fe:	72 ee                	jb     c00235ee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023600:	c3                   	ret    
c0023601:	90                   	nop

c0023602 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023602:	55                   	push   ebp
c0023603:	57                   	push   edi
c0023604:	56                   	push   esi
c0023605:	53                   	push   ebx
c0023606:	83 ec 1c             	sub    esp,0x1c
c0023609:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002360d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023611:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023615:	53                   	push   ebx
c0023616:	89 fd                	mov    ebp,edi
c0023618:	56                   	push   esi
c0023619:	c1 e5 0a             	shl    ebp,0xa
c002361c:	e8 b7 ff ff ff       	call   c00235d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023621:	83 ec 0c             	sub    esp,0xc
c0023624:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002362a:	01 e8                	add    eax,ebp
c002362c:	89 03                	mov    DWORD PTR [ebx],eax
c002362e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023630:	68 00 04 00 00       	push   0x400
c0023635:	6a 00                	push   0x0
c0023637:	50                   	push   eax
c0023638:	e8 3b d1 fd ff       	call   c0000778 <memset>
c002363d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023643:	89 fa                	mov    edx,edi
c0023645:	01 e8                	add    eax,ebp
c0023647:	c1 e7 0d             	shl    edi,0xd
c002364a:	89 03                	mov    DWORD PTR [ebx],eax
c002364c:	c1 e2 08             	shl    edx,0x8
c002364f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023656:	81 c2 00 80 00 00    	add    edx,0x8000
c002365c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023660:	89 d0                	mov    eax,edx
c0023662:	83 c4 1c             	add    esp,0x1c
c0023665:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002366b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002366e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023671:	68 00 01 00 00       	push   0x100
c0023676:	6a 00                	push   0x0
c0023678:	50                   	push   eax
c0023679:	e8 fa d0 fd ff       	call   c0000778 <memset>
c002367e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023682:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023688:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002368e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023692:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023695:	83 c4 10             	add    esp,0x10
c0023698:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002369f:	31 ff                	xor    edi,edi
c00236a1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00236a7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00236ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00236b1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00236b7:	83 c5 20             	add    ebp,0x20
c00236ba:	01 f8                	add    eax,edi
c00236bc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00236bf:	52                   	push   edx
c00236c0:	68 00 01 00 00       	push   0x100
c00236c5:	6a 00                	push   0x0
c00236c7:	50                   	push   eax
c00236c8:	e8 ab d0 fd ff       	call   c0000778 <memset>
c00236cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236d1:	83 c4 10             	add    esp,0x10
c00236d4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00236da:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00236e1:	01 f8                	add    eax,edi
c00236e3:	81 c7 00 01 00 00    	add    edi,0x100
c00236e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00236ec:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00236f2:	75 b3                	jne    c00236a7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00236f4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00236f8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00236fc:	83 c4 1c             	add    esp,0x1c
c00236ff:	5b                   	pop    ebx
c0023700:	5e                   	pop    esi
c0023701:	5f                   	pop    edi
c0023702:	5d                   	pop    ebp
c0023703:	e9 b0 fe ff ff       	jmp    c00235b8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023708 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023708:	55                   	push   ebp
c0023709:	57                   	push   edi
c002370a:	56                   	push   esi
c002370b:	53                   	push   ebx
c002370c:	31 db                	xor    ebx,ebx
c002370e:	83 ec 0c             	sub    esp,0xc
c0023711:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023715:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023719:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002371c:	f7 c7 01 00 00 00    	test   edi,0x1
c0023722:	0f 84 aa 00 00 00    	je     c00237d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023728:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002372c:	89 d8                	mov    eax,ebx
c002372e:	c1 e0 07             	shl    eax,0x7
c0023731:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023738:	55                   	push   ebp
c0023739:	56                   	push   esi
c002373a:	e8 31 fe ff ff       	call   c0023570 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002373f:	5a                   	pop    edx
c0023740:	83 f8 01             	cmp    eax,0x1
c0023743:	59                   	pop    ecx
c0023744:	75 30                	jne    c0023776 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023746:	50                   	push   eax
c0023747:	50                   	push   eax
c0023748:	53                   	push   ebx
c0023749:	68 25 c4 02 c0       	push   0xc002c425
c002374e:	e8 b6 f3 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023753:	83 c4 0c             	add    esp,0xc
c0023756:	53                   	push   ebx
c0023757:	55                   	push   ebp
c0023758:	56                   	push   esi
c0023759:	e8 a4 fe ff ff       	call   c0023602 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002375e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023765:	e8 d0 c0 fe ff       	call   c000f83a <malloc>
c002376a:	89 c5                	mov    ebp,eax
c002376c:	89 04 24             	mov    DWORD PTR [esp],eax
c002376f:	e8 60 0d 00 00       	call   c00244d4 <SATA::SATA()>
c0023774:	eb 33                	jmp    c00237a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023776:	83 f8 04             	cmp    eax,0x4
c0023779:	75 47                	jne    c00237c2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002377b:	50                   	push   eax
c002377c:	50                   	push   eax
c002377d:	53                   	push   ebx
c002377e:	68 3c c4 02 c0       	push   0xc002c43c
c0023783:	e8 81 f3 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023788:	83 c4 0c             	add    esp,0xc
c002378b:	53                   	push   ebx
c002378c:	55                   	push   ebp
c002378d:	56                   	push   esi
c002378e:	e8 6f fe ff ff       	call   c0023602 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023793:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002379a:	e8 9b c0 fe ff       	call   c000f83a <malloc>
c002379f:	89 c5                	mov    ebp,eax
c00237a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00237a4:	e8 03 11 00 00       	call   c00248ac <SATAPI::SATAPI()>
c00237a9:	5a                   	pop    edx
c00237aa:	59                   	pop    ecx
c00237ab:	55                   	push   ebp
c00237ac:	56                   	push   esi
c00237ad:	e8 7e 07 ff ff       	call   c0013f30 <Device::addChild(Device*)>
c00237b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00237b5:	56                   	push   esi
c00237b6:	6a 00                	push   0x0
c00237b8:	53                   	push   ebx
c00237b9:	55                   	push   ebp
c00237ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00237bd:	83 c4 20             	add    esp,0x20
c00237c0:	eb 10                	jmp    c00237d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00237c2:	50                   	push   eax
c00237c3:	50                   	push   eax
c00237c4:	53                   	push   ebx
c00237c5:	68 55 c4 02 c0       	push   0xc002c455
c00237ca:	e8 3a f3 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00237cf:	83 c4 10             	add    esp,0x10
c00237d2:	d1 ef                	shr    edi,1
c00237d4:	43                   	inc    ebx
c00237d5:	83 fb 20             	cmp    ebx,0x20
c00237d8:	0f 85 3e ff ff ff    	jne    c002371c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00237de:	83 c4 0c             	add    esp,0xc
c00237e1:	5b                   	pop    ebx
c00237e2:	5e                   	pop    esi
c00237e3:	5f                   	pop    edi
c00237e4:	5d                   	pop    ebp
c00237e5:	c3                   	ret    

c00237e6 <SATABus::open(int, int, void*)>:
c00237e6:	83 ec 14             	sub    esp,0x14
c00237e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00237ed:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00237f3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00237f9:	52                   	push   edx
c00237fa:	50                   	push   eax
c00237fb:	e8 08 ff ff ff       	call   c0023708 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023800:	31 c0                	xor    eax,eax
c0023802:	83 c4 1c             	add    esp,0x1c
c0023805:	c3                   	ret    

c0023806 <ATA::close(int, int, void*)>:
c0023806:	83 ec 0c             	sub    esp,0xc
c0023809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002380d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023813:	85 c0                	test   eax,eax
c0023815:	74 0c                	je     c0023823 <ATA::close(int, int, void*)+0x1d>
c0023817:	83 ec 0c             	sub    esp,0xc
c002381a:	8b 10                	mov    edx,DWORD PTR [eax]
c002381c:	50                   	push   eax
c002381d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023820:	83 c4 10             	add    esp,0x10
c0023823:	31 c0                	xor    eax,eax
c0023825:	83 c4 0c             	add    esp,0xc
c0023828:	c3                   	ret    
c0023829:	90                   	nop

c002382a <ATA::powerSaving(PowerSavingLevel)>:
c002382a:	c3                   	ret    
c002382b:	90                   	nop

c002382c <ATA::ATA()>:
c002382c:	83 ec 0c             	sub    esp,0xc
c002382f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023833:	83 ec 04             	sub    esp,0x4
c0023836:	68 00 02 00 00       	push   0x200
c002383b:	68 3d c5 02 c0       	push   0xc002c53d
c0023840:	50                   	push   eax
c0023841:	e8 0e 0b ff ff       	call   c0014354 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023846:	83 c4 10             	add    esp,0x10
c0023849:	ba c0 c4 02 c0       	mov    edx,0xc002c4c0
c002384e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023852:	89 10                	mov    DWORD PTR [eax],edx
c0023854:	90                   	nop
c0023855:	83 c4 0c             	add    esp,0xc
c0023858:	c3                   	ret    
c0023859:	90                   	nop

c002385a <ATA::flush(bool)>:
c002385a:	53                   	push   ebx
c002385b:	83 ec 08             	sub    esp,0x8
c002385e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023863:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023867:	19 c0                	sbb    eax,eax
c0023869:	83 e0 fd             	and    eax,0xfffffffd
c002386c:	05 ea 00 00 00       	add    eax,0xea
c0023871:	50                   	push   eax
c0023872:	6a 07                	push   0x7
c0023874:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002387b:	50                   	push   eax
c002387c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023882:	e8 dd ef ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023887:	83 c4 0c             	add    esp,0xc
c002388a:	6a 00                	push   0x0
c002388c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023893:	50                   	push   eax
c0023894:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002389a:	e8 71 fb ff ff       	call   c0023410 <IDE::polling(unsigned char, unsigned int)>
c002389f:	83 c4 18             	add    esp,0x18
c00238a2:	5b                   	pop    ebx
c00238a3:	c3                   	ret    

c00238a4 <ATA::readyForCommand()>:
c00238a4:	56                   	push   esi
c00238a5:	53                   	push   ebx
c00238a6:	31 db                	xor    ebx,ebx
c00238a8:	50                   	push   eax
c00238a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00238ad:	50                   	push   eax
c00238ae:	6a 0c                	push   0xc
c00238b0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00238b7:	50                   	push   eax
c00238b8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00238be:	e8 61 f0 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c00238c3:	83 c4 10             	add    esp,0x10
c00238c6:	a8 88                	test   al,0x88
c00238c8:	74 23                	je     c00238ed <ATA::readyForCommand()+0x49>
c00238ca:	43                   	inc    ebx
c00238cb:	83 fb 63             	cmp    ebx,0x63
c00238ce:	7e dd                	jle    c00238ad <ATA::readyForCommand()+0x9>
c00238d0:	51                   	push   ecx
c00238d1:	51                   	push   ecx
c00238d2:	6a 00                	push   0x0
c00238d4:	68 40 42 0f 00       	push   0xf4240
c00238d9:	e8 c8 a2 ff ff       	call   c001dba6 <nanoSleep(unsigned long long)>
c00238de:	83 c4 10             	add    esp,0x10
c00238e1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00238e7:	75 c4                	jne    c00238ad <ATA::readyForCommand()+0x9>
c00238e9:	31 c0                	xor    eax,eax
c00238eb:	eb 02                	jmp    c00238ef <ATA::readyForCommand()+0x4b>
c00238ed:	b0 01                	mov    al,0x1
c00238ef:	5a                   	pop    edx
c00238f0:	5b                   	pop    ebx
c00238f1:	5e                   	pop    esi
c00238f2:	c3                   	ret    
c00238f3:	90                   	nop

c00238f4 <ATA::access(unsigned long long, int, void*, bool)>:
c00238f4:	55                   	push   ebp
c00238f5:	57                   	push   edi
c00238f6:	56                   	push   esi
c00238f7:	53                   	push   ebx
c00238f8:	83 ec 2c             	sub    esp,0x2c
c00238fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00238ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023903:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023907:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002390b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002390f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023913:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023917:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002391d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023921:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023927:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002392b:	c1 e0 06             	shl    eax,0x6
c002392e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023936:	74 5d                	je     c0023995 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023938:	89 fa                	mov    edx,edi
c002393a:	89 f0                	mov    eax,esi
c002393c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023940:	c1 ea 1c             	shr    edx,0x1c
c0023943:	89 d1                	mov    ecx,edx
c0023945:	09 c1                	or     ecx,eax
c0023947:	74 25                	je     c002396e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023949:	31 ed                	xor    ebp,ebp
c002394b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023952:	89 fa                	mov    edx,edi
c0023954:	89 f0                	mov    eax,esi
c0023956:	0f ad d0             	shrd   eax,edx,cl
c0023959:	d3 ea                	shr    edx,cl
c002395b:	f6 c1 20             	test   cl,0x20
c002395e:	74 02                	je     c0023962 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023960:	89 d0                	mov    eax,edx
c0023962:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023966:	45                   	inc    ebp
c0023967:	83 fd 06             	cmp    ebp,0x6
c002396a:	75 df                	jne    c002394b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002396c:	eb 76                	jmp    c00239e4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002396e:	89 f0                	mov    eax,esi
c0023970:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023975:	89 fa                	mov    edx,edi
c0023977:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002397e:	0f ac d0 10          	shrd   eax,edx,0x10
c0023982:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023987:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002398b:	c1 ee 18             	shr    esi,0x18
c002398e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023993:	eb 56                	jmp    c00239eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023995:	6a 00                	push   0x0
c0023997:	6a 3f                	push   0x3f
c0023999:	57                   	push   edi
c002399a:	56                   	push   esi
c002399b:	e8 bc 29 00 00       	call   c002635c <__umoddi3>
c00239a0:	83 c4 10             	add    esp,0x10
c00239a3:	40                   	inc    eax
c00239a4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00239a8:	6a 00                	push   0x0
c00239aa:	68 f0 03 00 00       	push   0x3f0
c00239af:	57                   	push   edi
c00239b0:	56                   	push   esi
c00239b1:	e8 a6 28 00 00       	call   c002625c <__udivdi3>
c00239b6:	83 c4 10             	add    esp,0x10
c00239b9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00239be:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00239c5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00239ca:	6a 00                	push   0x0
c00239cc:	6a 3f                	push   0x3f
c00239ce:	57                   	push   edi
c00239cf:	56                   	push   esi
c00239d0:	e8 87 28 00 00       	call   c002625c <__udivdi3>
c00239d5:	83 c4 10             	add    esp,0x10
c00239d8:	89 c6                	mov    esi,eax
c00239da:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00239df:	83 e6 0f             	and    esi,0xf
c00239e2:	eb 07                	jmp    c00239eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00239e4:	31 f6                	xor    esi,esi
c00239e6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00239eb:	bf 01 00 00 00       	mov    edi,0x1
c00239f0:	50                   	push   eax
c00239f1:	6a 00                	push   0x0
c00239f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239fa:	50                   	push   eax
c00239fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00239ff:	e8 6c f0 ff ff       	call   c0022a70 <IDE::enableIRQs(unsigned char, bool)>
c0023a04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a07:	e8 98 fe ff ff       	call   c00238a4 <ATA::readyForCommand()>
c0023a0c:	83 c4 10             	add    esp,0x10
c0023a0f:	84 c0                	test   al,al
c0023a11:	0f 84 5a 02 00 00    	je     c0023c71 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023a17:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023a1d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023a23:	c1 e0 04             	shl    eax,0x4
c0023a26:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023a2d:	09 c6                	or     esi,eax
c0023a2f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023a34:	75 05                	jne    c0023a3b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023a36:	83 ce a0             	or     esi,0xffffffa0
c0023a39:	eb 03                	jmp    c0023a3e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023a3b:	83 ce e0             	or     esi,0xffffffe0
c0023a3e:	89 f0                	mov    eax,esi
c0023a40:	0f b6 f0             	movzx  esi,al
c0023a43:	56                   	push   esi
c0023a44:	6a 06                	push   0x6
c0023a46:	51                   	push   ecx
c0023a47:	52                   	push   edx
c0023a48:	e8 17 ee ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a4d:	83 c4 10             	add    esp,0x10
c0023a50:	6a 00                	push   0x0
c0023a52:	6a 01                	push   0x1
c0023a54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a5b:	50                   	push   eax
c0023a5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a62:	e8 fd ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a67:	83 c4 10             	add    esp,0x10
c0023a6a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023a6f:	75 6e                	jne    c0023adf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023a71:	6a 00                	push   0x0
c0023a73:	6a 08                	push   0x8
c0023a75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a7c:	50                   	push   eax
c0023a7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a83:	e8 dc ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a88:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023a8d:	50                   	push   eax
c0023a8e:	6a 09                	push   0x9
c0023a90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a97:	50                   	push   eax
c0023a98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a9e:	e8 c1 ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aa3:	83 c4 20             	add    esp,0x20
c0023aa6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023aab:	50                   	push   eax
c0023aac:	6a 0a                	push   0xa
c0023aae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ab5:	50                   	push   eax
c0023ab6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023abc:	e8 a3 ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ac1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023ac6:	50                   	push   eax
c0023ac7:	6a 0b                	push   0xb
c0023ac9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ad0:	50                   	push   eax
c0023ad1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ad7:	e8 88 ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023adc:	83 c4 20             	add    esp,0x20
c0023adf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023ae4:	50                   	push   eax
c0023ae5:	6a 02                	push   0x2
c0023ae7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023aee:	50                   	push   eax
c0023aef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023af5:	e8 6a ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023afa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023aff:	50                   	push   eax
c0023b00:	6a 03                	push   0x3
c0023b02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b09:	50                   	push   eax
c0023b0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b10:	e8 4f ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b15:	83 c4 20             	add    esp,0x20
c0023b18:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023b1d:	50                   	push   eax
c0023b1e:	6a 04                	push   0x4
c0023b20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b27:	50                   	push   eax
c0023b28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b2e:	e8 31 ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023b38:	50                   	push   eax
c0023b39:	6a 05                	push   0x5
c0023b3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b42:	50                   	push   eax
c0023b43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b49:	e8 16 ed ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b4e:	83 c4 20             	add    esp,0x20
c0023b51:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023b56:	0f 94 c0             	sete   al
c0023b59:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023b5e:	74 09                	je     c0023b69 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023b60:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023b67:	eb 07                	jmp    c0023b70 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023b69:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023b70:	0f b6 c0             	movzx  eax,al
c0023b73:	50                   	push   eax
c0023b74:	6a 07                	push   0x7
c0023b76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b7d:	50                   	push   eax
c0023b7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b84:	e8 db ec ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b89:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023b8d:	83 c4 10             	add    esp,0x10
c0023b90:	85 f6                	test   esi,esi
c0023b92:	0f 84 ba 00 00 00    	je     c0023c52 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023b98:	50                   	push   eax
c0023b99:	6a 01                	push   0x1
c0023b9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ba2:	50                   	push   eax
c0023ba3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ba9:	e8 62 f8 ff ff       	call   c0023410 <IDE::polling(unsigned char, unsigned int)>
c0023bae:	83 c4 10             	add    esp,0x10
c0023bb1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023bb7:	84 c0                	test   al,al
c0023bb9:	74 2c                	je     c0023be7 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023bbb:	0f b6 f8             	movzx  edi,al
c0023bbe:	0f b6 d2             	movzx  edx,dl
c0023bc1:	57                   	push   edi
c0023bc2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023bc9:	50                   	push   eax
c0023bca:	52                   	push   edx
c0023bcb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bd1:	e8 a4 f6 ff ff       	call   c002327a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023bd6:	c7 04 24 98 c4 02 c0 	mov    DWORD PTR [esp],0xc002c498
c0023bdd:	e8 27 ef fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0023be2:	e9 87 00 00 00       	jmp    c0023c6e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023be7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023bec:	74 33                	je     c0023c21 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023bee:	31 ed                	xor    ebp,ebp
c0023bf0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023bf4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023bf8:	50                   	push   eax
c0023bf9:	50                   	push   eax
c0023bfa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c01:	50                   	push   eax
c0023c02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c08:	e8 45 ec ff ff       	call   c0022852 <IDE::getBase(unsigned char)>
c0023c0d:	89 c2                	mov    edx,eax
c0023c0f:	89 f8                	mov    eax,edi
c0023c11:	66 ef                	out    dx,ax
c0023c13:	45                   	inc    ebp
c0023c14:	83 c4 10             	add    esp,0x10
c0023c17:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023c1d:	75 d1                	jne    c0023bf0 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023c1f:	eb 23                	jmp    c0023c44 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023c21:	0f b6 d2             	movzx  edx,dl
c0023c24:	51                   	push   ecx
c0023c25:	51                   	push   ecx
c0023c26:	52                   	push   edx
c0023c27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c2d:	e8 20 ec ff ff       	call   c0022852 <IDE::getBase(unsigned char)>
c0023c32:	b9 00 01 00 00       	mov    ecx,0x100
c0023c37:	89 c2                	mov    edx,eax
c0023c39:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023c3d:	fc                   	cld    
c0023c3e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023c41:	83 c4 10             	add    esp,0x10
c0023c44:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023c4c:	4e                   	dec    esi
c0023c4d:	e9 3e ff ff ff       	jmp    c0023b90 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023c52:	31 ff                	xor    edi,edi
c0023c54:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023c59:	74 16                	je     c0023c71 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023c5b:	50                   	push   eax
c0023c5c:	50                   	push   eax
c0023c5d:	31 c0                	xor    eax,eax
c0023c5f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023c64:	0f 94 c0             	sete   al
c0023c67:	50                   	push   eax
c0023c68:	53                   	push   ebx
c0023c69:	e8 ec fb ff ff       	call   c002385a <ATA::flush(bool)>
c0023c6e:	83 c4 10             	add    esp,0x10
c0023c71:	83 c4 2c             	add    esp,0x2c
c0023c74:	89 f8                	mov    eax,edi
c0023c76:	5b                   	pop    ebx
c0023c77:	5e                   	pop    esi
c0023c78:	5f                   	pop    edi
c0023c79:	5d                   	pop    ebp
c0023c7a:	c3                   	ret    
c0023c7b:	90                   	nop

c0023c7c <ATA::read(unsigned long long, int, void*)>:
c0023c7c:	57                   	push   edi
c0023c7d:	b8 04 00 00 00       	mov    eax,0x4
c0023c82:	56                   	push   esi
c0023c83:	53                   	push   ebx
c0023c84:	83 ec 10             	sub    esp,0x10
c0023c87:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023c8b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023c8f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023c92:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023c96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023c9a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023ca0:	77 3b                	ja     c0023cdd <ATA::read(unsigned long long, int, void*)+0x61>
c0023ca2:	b8 06 00 00 00       	mov    eax,0x6
c0023ca7:	85 d2                	test   edx,edx
c0023ca9:	74 32                	je     c0023cdd <ATA::read(unsigned long long, int, void*)+0x61>
c0023cab:	50                   	push   eax
c0023cac:	50                   	push   eax
c0023cad:	6a 00                	push   0x0
c0023caf:	52                   	push   edx
c0023cb0:	53                   	push   ebx
c0023cb1:	57                   	push   edi
c0023cb2:	56                   	push   esi
c0023cb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023cb7:	e8 38 fc ff ff       	call   c00238f4 <ATA::access(unsigned long long, int, void*, bool)>
c0023cbc:	83 c4 20             	add    esp,0x20
c0023cbf:	85 c0                	test   eax,eax
c0023cc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023cc5:	75 11                	jne    c0023cd8 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023cc7:	01 1d 08 1e 03 c0    	add    DWORD PTR ds:0xc0031e08,ebx
c0023ccd:	e8 9c cc fe ff       	call   c001096e <VgaText::updateDiskUsage()>
c0023cd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cd6:	eb 05                	jmp    c0023cdd <ATA::read(unsigned long long, int, void*)+0x61>
c0023cd8:	b8 01 00 00 00       	mov    eax,0x1
c0023cdd:	83 c4 10             	add    esp,0x10
c0023ce0:	5b                   	pop    ebx
c0023ce1:	5e                   	pop    esi
c0023ce2:	5f                   	pop    edi
c0023ce3:	c3                   	ret    

c0023ce4 <ATA::write(unsigned long long, int, void*)>:
c0023ce4:	57                   	push   edi
c0023ce5:	b8 04 00 00 00       	mov    eax,0x4
c0023cea:	56                   	push   esi
c0023ceb:	53                   	push   ebx
c0023cec:	83 ec 10             	sub    esp,0x10
c0023cef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023cf3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023cf7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023cfa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023cfe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d02:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d08:	77 3b                	ja     c0023d45 <ATA::write(unsigned long long, int, void*)+0x61>
c0023d0a:	b8 06 00 00 00       	mov    eax,0x6
c0023d0f:	85 d2                	test   edx,edx
c0023d11:	74 32                	je     c0023d45 <ATA::write(unsigned long long, int, void*)+0x61>
c0023d13:	50                   	push   eax
c0023d14:	50                   	push   eax
c0023d15:	6a 01                	push   0x1
c0023d17:	52                   	push   edx
c0023d18:	53                   	push   ebx
c0023d19:	57                   	push   edi
c0023d1a:	56                   	push   esi
c0023d1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d1f:	e8 d0 fb ff ff       	call   c00238f4 <ATA::access(unsigned long long, int, void*, bool)>
c0023d24:	83 c4 20             	add    esp,0x20
c0023d27:	85 c0                	test   eax,eax
c0023d29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d2d:	75 11                	jne    c0023d40 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023d2f:	01 1d 04 1e 03 c0    	add    DWORD PTR ds:0xc0031e04,ebx
c0023d35:	e8 34 cc fe ff       	call   c001096e <VgaText::updateDiskUsage()>
c0023d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d3e:	eb 05                	jmp    c0023d45 <ATA::write(unsigned long long, int, void*)+0x61>
c0023d40:	b8 01 00 00 00       	mov    eax,0x1
c0023d45:	83 c4 10             	add    esp,0x10
c0023d48:	5b                   	pop    ebx
c0023d49:	5e                   	pop    esi
c0023d4a:	5f                   	pop    edi
c0023d4b:	c3                   	ret    

c0023d4c <ATA::detectCHS()>:
c0023d4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023d50:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023d56:	c1 e0 06             	shl    eax,0x6
c0023d59:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023d5f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023d69:	c7 44 24 04 a3 c4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c4a3
c0023d71:	e9 77 62 ff ff       	jmp    c0019fed <Krnl::panic(char const*)>

c0023d76 <ATA::open(int, int, void*)>:
c0023d76:	53                   	push   ebx
c0023d77:	83 ec 08             	sub    esp,0x8
c0023d7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023d82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d86:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023d8c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023d92:	c1 e0 06             	shl    eax,0x6
c0023d95:	01 d0                	add    eax,edx
c0023d97:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023d9e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023da4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023dab:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023db5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023dbb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023dc2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023dc9:	75 0c                	jne    c0023dd7 <ATA::open(int, int, void*)+0x61>
c0023dcb:	83 ec 0c             	sub    esp,0xc
c0023dce:	53                   	push   ebx
c0023dcf:	e8 78 ff ff ff       	call   c0023d4c <ATA::detectCHS()>
c0023dd4:	83 c4 10             	add    esp,0x10
c0023dd7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023ddd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023de3:	c1 e0 06             	shl    eax,0x6
c0023de6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023ded:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023df7:	d1 e8                	shr    eax,1
c0023df9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023dff:	6a 04                	push   0x4
c0023e01:	6a 0c                	push   0xc
c0023e03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e0a:	50                   	push   eax
c0023e0b:	52                   	push   edx
c0023e0c:	e8 53 ea ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e11:	90                   	nop
c0023e12:	90                   	nop
c0023e13:	6a 00                	push   0x0
c0023e15:	6a 0c                	push   0xc
c0023e17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e1e:	50                   	push   eax
c0023e1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e25:	e8 3a ea ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2a:	83 c4 14             	add    esp,0x14
c0023e2d:	53                   	push   ebx
c0023e2e:	e8 89 05 ff ff       	call   c00143bc <PhysicalDisk::startCache()>
c0023e33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e36:	e8 a3 26 ff ff       	call   c00164de <createPartitionsForDisk(PhysicalDisk*)>
c0023e3b:	31 c0                	xor    eax,eax
c0023e3d:	83 c4 18             	add    esp,0x18
c0023e40:	5b                   	pop    ebx
c0023e41:	c3                   	ret    

c0023e42 <ATAPI::write(unsigned long long, int, void*)>:
c0023e42:	b8 03 00 00 00       	mov    eax,0x3
c0023e47:	c3                   	ret    

c0023e48 <ATAPI::close(int, int, void*)>:
c0023e48:	83 ec 0c             	sub    esp,0xc
c0023e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e4f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e55:	85 c0                	test   eax,eax
c0023e57:	74 0c                	je     c0023e65 <ATAPI::close(int, int, void*)+0x1d>
c0023e59:	83 ec 0c             	sub    esp,0xc
c0023e5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e5e:	50                   	push   eax
c0023e5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e62:	83 c4 10             	add    esp,0x10
c0023e65:	31 c0                	xor    eax,eax
c0023e67:	83 c4 0c             	add    esp,0xc
c0023e6a:	c3                   	ret    
c0023e6b:	90                   	nop

c0023e6c <ATAPI::ATAPI()>:
c0023e6c:	83 ec 0c             	sub    esp,0xc
c0023e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e73:	83 ec 04             	sub    esp,0x4
c0023e76:	68 00 08 00 00       	push   0x800
c0023e7b:	68 a5 c5 02 c0       	push   0xc002c5a5
c0023e80:	50                   	push   eax
c0023e81:	e8 ce 04 ff ff       	call   c0014354 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e86:	83 c4 10             	add    esp,0x10
c0023e89:	ba f8 c4 02 c0       	mov    edx,0xc002c4f8
c0023e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e92:	89 10                	mov    DWORD PTR [eax],edx
c0023e94:	90                   	nop
c0023e95:	83 c4 0c             	add    esp,0xc
c0023e98:	c3                   	ret    
c0023e99:	90                   	nop

c0023e9a <ATAPI::readyForCommand()>:
c0023e9a:	56                   	push   esi
c0023e9b:	53                   	push   ebx
c0023e9c:	31 db                	xor    ebx,ebx
c0023e9e:	50                   	push   eax
c0023e9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ea3:	50                   	push   eax
c0023ea4:	6a 0c                	push   0xc
c0023ea6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ead:	50                   	push   eax
c0023eae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023eb4:	e8 6b ea ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0023eb9:	83 c4 10             	add    esp,0x10
c0023ebc:	a8 88                	test   al,0x88
c0023ebe:	74 23                	je     c0023ee3 <ATAPI::readyForCommand()+0x49>
c0023ec0:	43                   	inc    ebx
c0023ec1:	83 fb 63             	cmp    ebx,0x63
c0023ec4:	7e dd                	jle    c0023ea3 <ATAPI::readyForCommand()+0x9>
c0023ec6:	51                   	push   ecx
c0023ec7:	51                   	push   ecx
c0023ec8:	6a 00                	push   0x0
c0023eca:	68 40 42 0f 00       	push   0xf4240
c0023ecf:	e8 d2 9c ff ff       	call   c001dba6 <nanoSleep(unsigned long long)>
c0023ed4:	83 c4 10             	add    esp,0x10
c0023ed7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023edd:	75 c4                	jne    c0023ea3 <ATAPI::readyForCommand()+0x9>
c0023edf:	31 c0                	xor    eax,eax
c0023ee1:	eb 02                	jmp    c0023ee5 <ATAPI::readyForCommand()+0x4b>
c0023ee3:	b0 01                	mov    al,0x1
c0023ee5:	5a                   	pop    edx
c0023ee6:	5b                   	pop    ebx
c0023ee7:	5e                   	pop    esi
c0023ee8:	c3                   	ret    
c0023ee9:	90                   	nop

c0023eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023eea:	55                   	push   ebp
c0023eeb:	57                   	push   edi
c0023eec:	56                   	push   esi
c0023eed:	53                   	push   ebx
c0023eee:	83 ec 20             	sub    esp,0x20
c0023ef1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023ef5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023ef9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023efd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f01:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023f05:	6a 01                	push   0x1
c0023f07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f0e:	50                   	push   eax
c0023f0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f15:	e8 56 eb ff ff       	call   c0022a70 <IDE::enableIRQs(unsigned char, bool)>
c0023f1a:	5e                   	pop    esi
c0023f1b:	58                   	pop    eax
c0023f1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f23:	50                   	push   eax
c0023f24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f2a:	e8 0f e9 ff ff       	call   c002283e <IDE::prepareInterrupt(unsigned char)>
c0023f2f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023f32:	e8 63 ff ff ff       	call   c0023e9a <ATAPI::readyForCommand()>
c0023f37:	83 c4 10             	add    esp,0x10
c0023f3a:	84 c0                	test   al,al
c0023f3c:	75 0a                	jne    c0023f48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023f3e:	bb 01 00 00 00       	mov    ebx,0x1
c0023f43:	e9 57 02 00 00       	jmp    c002419f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023f48:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023f4e:	c1 e0 04             	shl    eax,0x4
c0023f51:	0f b6 c0             	movzx  eax,al
c0023f54:	50                   	push   eax
c0023f55:	6a 06                	push   0x6
c0023f57:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f5e:	50                   	push   eax
c0023f5f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f65:	e8 fa e8 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f6a:	6a 00                	push   0x0
c0023f6c:	6a 01                	push   0x1
c0023f6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f75:	50                   	push   eax
c0023f76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f7c:	e8 e3 e8 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f81:	83 c4 20             	add    esp,0x20
c0023f84:	0f b6 c3             	movzx  eax,bl
c0023f87:	0f b6 df             	movzx  ebx,bh
c0023f8a:	50                   	push   eax
c0023f8b:	6a 04                	push   0x4
c0023f8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f94:	50                   	push   eax
c0023f95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f9b:	e8 c4 e8 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fa0:	53                   	push   ebx
c0023fa1:	6a 05                	push   0x5
c0023fa3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023faa:	50                   	push   eax
c0023fab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023fb1:	e8 ae e8 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fb6:	83 c4 20             	add    esp,0x20
c0023fb9:	68 a0 00 00 00       	push   0xa0
c0023fbe:	6a 07                	push   0x7
c0023fc0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023fc7:	50                   	push   eax
c0023fc8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023fce:	e8 91 e8 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fd3:	83 c4 0c             	add    esp,0xc
c0023fd6:	6a 01                	push   0x1
c0023fd8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023fdf:	50                   	push   eax
c0023fe0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023fe6:	e8 25 f4 ff ff       	call   c0023410 <IDE::polling(unsigned char, unsigned int)>
c0023feb:	83 c4 10             	add    esp,0x10
c0023fee:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023ff4:	84 c0                	test   al,al
c0023ff6:	74 23                	je     c002401b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023ff8:	0f b6 d8             	movzx  ebx,al
c0023ffb:	0f b6 d2             	movzx  edx,dl
c0023ffe:	53                   	push   ebx
c0023fff:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024006:	50                   	push   eax
c0024007:	52                   	push   edx
c0024008:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002400e:	e8 67 f2 ff ff       	call   c002327a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024013:	83 c4 10             	add    esp,0x10
c0024016:	e9 84 01 00 00       	jmp    c002419f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002401b:	0f b6 d2             	movzx  edx,dl
c002401e:	53                   	push   ebx
c002401f:	53                   	push   ebx
c0024020:	52                   	push   edx
c0024021:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024027:	e8 26 e8 ff ff       	call   c0022852 <IDE::getBase(unsigned char)>
c002402c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024030:	b9 06 00 00 00       	mov    ecx,0x6
c0024035:	89 c2                	mov    edx,eax
c0024037:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002403a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002403e:	83 c4 10             	add    esp,0x10
c0024041:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024047:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002404e:	85 db                	test   ebx,ebx
c0024050:	0f 84 ec 00 00 00    	je     c0024142 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024056:	51                   	push   ecx
c0024057:	51                   	push   ecx
c0024058:	52                   	push   edx
c0024059:	50                   	push   eax
c002405a:	e8 73 e9 ff ff       	call   c00229d2 <IDE::waitInterrupt(unsigned char)>
c002405f:	83 c4 10             	add    esp,0x10
c0024062:	84 c0                	test   al,al
c0024064:	0f 84 d4 fe ff ff    	je     c0023f3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002406a:	56                   	push   esi
c002406b:	56                   	push   esi
c002406c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024073:	50                   	push   eax
c0024074:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002407a:	e8 bf e7 ff ff       	call   c002283e <IDE::prepareInterrupt(unsigned char)>
c002407f:	83 c4 0c             	add    esp,0xc
c0024082:	6a 04                	push   0x4
c0024084:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002408b:	50                   	push   eax
c002408c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024092:	e8 8d e8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c0024097:	83 c4 0c             	add    esp,0xc
c002409a:	89 c6                	mov    esi,eax
c002409c:	6a 05                	push   0x5
c002409e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00240a5:	50                   	push   eax
c00240a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00240ac:	e8 73 e8 ff ff       	call   c0022924 <IDE::read(unsigned char, unsigned char)>
c00240b1:	89 f1                	mov    ecx,esi
c00240b3:	0f b6 c0             	movzx  eax,al
c00240b6:	0f b6 f1             	movzx  esi,cl
c00240b9:	c1 e0 08             	shl    eax,0x8
c00240bc:	09 c6                	or     esi,eax
c00240be:	d1 fe                	sar    esi,1
c00240c0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00240c4:	83 c4 10             	add    esp,0x10
c00240c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00240cc:	74 41                	je     c002410f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00240ce:	31 c9                	xor    ecx,ecx
c00240d0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00240d6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00240dd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00240e1:	75 0a                	jne    c00240ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00240e3:	01 c9                	add    ecx,ecx
c00240e5:	01 cd                	add    ebp,ecx
c00240e7:	4b                   	dec    ebx
c00240e8:	e9 54 ff ff ff       	jmp    c0024041 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00240ed:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00240f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00240f6:	51                   	push   ecx
c00240f7:	51                   	push   ecx
c00240f8:	52                   	push   edx
c00240f9:	50                   	push   eax
c00240fa:	e8 53 e7 ff ff       	call   c0022852 <IDE::getBase(unsigned char)>
c00240ff:	89 c2                	mov    edx,eax
c0024101:	89 f0                	mov    eax,esi
c0024103:	66 ef                	out    dx,ax
c0024105:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024109:	83 c4 10             	add    esp,0x10
c002410c:	41                   	inc    ecx
c002410d:	eb c1                	jmp    c00240d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002410f:	31 f6                	xor    esi,esi
c0024111:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024117:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002411e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024122:	75 06                	jne    c002412a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024124:	01 f6                	add    esi,esi
c0024126:	01 f5                	add    ebp,esi
c0024128:	eb bd                	jmp    c00240e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002412a:	51                   	push   ecx
c002412b:	51                   	push   ecx
c002412c:	52                   	push   edx
c002412d:	50                   	push   eax
c002412e:	e8 1f e7 ff ff       	call   c0022852 <IDE::getBase(unsigned char)>
c0024133:	89 c2                	mov    edx,eax
c0024135:	66 ed                	in     ax,dx
c0024137:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002413c:	83 c4 10             	add    esp,0x10
c002413f:	46                   	inc    esi
c0024140:	eb cf                	jmp    c0024111 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024142:	51                   	push   ecx
c0024143:	51                   	push   ecx
c0024144:	52                   	push   edx
c0024145:	50                   	push   eax
c0024146:	e8 87 e8 ff ff       	call   c00229d2 <IDE::waitInterrupt(unsigned char)>
c002414b:	83 c4 10             	add    esp,0x10
c002414e:	84 c0                	test   al,al
c0024150:	0f 84 e8 fd ff ff    	je     c0023f3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024156:	bb a0 86 01 00       	mov    ebx,0x186a0
c002415b:	52                   	push   edx
c002415c:	52                   	push   edx
c002415d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024164:	50                   	push   eax
c0024165:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002416b:	e8 ce e6 ff ff       	call   c002283e <IDE::prepareInterrupt(unsigned char)>
c0024170:	83 c4 10             	add    esp,0x10
c0024173:	50                   	push   eax
c0024174:	50                   	push   eax
c0024175:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002417c:	50                   	push   eax
c002417d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024183:	e8 ca e6 ff ff       	call   c0022852 <IDE::getBase(unsigned char)>
c0024188:	8d 50 07             	lea    edx,[eax+0x7]
c002418b:	ec                   	in     al,dx
c002418c:	83 c4 10             	add    esp,0x10
c002418f:	a8 88                	test   al,0x88
c0024191:	74 0a                	je     c002419d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024193:	4b                   	dec    ebx
c0024194:	75 dd                	jne    c0024173 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024196:	bb 02 00 00 00       	mov    ebx,0x2
c002419b:	eb 02                	jmp    c002419f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002419d:	31 db                	xor    ebx,ebx
c002419f:	83 c4 1c             	add    esp,0x1c
c00241a2:	89 d8                	mov    eax,ebx
c00241a4:	5b                   	pop    ebx
c00241a5:	5e                   	pop    esi
c00241a6:	5f                   	pop    edi
c00241a7:	5d                   	pop    ebp
c00241a8:	c3                   	ret    
c00241a9:	90                   	nop

c00241aa <ATAPI::diskRemoved()>:
c00241aa:	83 ec 18             	sub    esp,0x18
c00241ad:	68 b1 c5 02 c0       	push   0xc002c5b1
c00241b2:	e8 52 e9 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00241b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00241bb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00241c2:	83 c4 1c             	add    esp,0x1c
c00241c5:	c3                   	ret    

c00241c6 <ATAPI::eject()>:
c00241c6:	57                   	push   edi
c00241c7:	b9 03 00 00 00       	mov    ecx,0x3
c00241cc:	53                   	push   ebx
c00241cd:	83 ec 14             	sub    esp,0x14
c00241d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00241d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00241d8:	fc                   	cld    
c00241d9:	31 c0                	xor    eax,eax
c00241db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00241dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00241e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00241e7:	50                   	push   eax
c00241e8:	50                   	push   eax
c00241e9:	6a 00                	push   0x0
c00241eb:	6a 00                	push   0x0
c00241ed:	6a 00                	push   0x0
c00241ef:	6a 02                	push   0x2
c00241f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00241f5:	50                   	push   eax
c00241f6:	53                   	push   ebx
c00241f7:	e8 ee fc ff ff       	call   c0023eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00241fc:	83 c4 14             	add    esp,0x14
c00241ff:	53                   	push   ebx
c0024200:	e8 a5 ff ff ff       	call   c00241aa <ATAPI::diskRemoved()>
c0024205:	83 c4 24             	add    esp,0x24
c0024208:	31 c0                	xor    eax,eax
c002420a:	5b                   	pop    ebx
c002420b:	5f                   	pop    edi
c002420c:	c3                   	ret    
c002420d:	90                   	nop

c002420e <ATAPI::diskInserted()>:
c002420e:	53                   	push   ebx
c002420f:	83 ec 14             	sub    esp,0x14
c0024212:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024216:	68 c8 c5 02 c0       	push   0xc002c5c8
c002421b:	e8 e9 e8 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0024220:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002422a:	e8 8d 01 ff ff       	call   c00143bc <PhysicalDisk::startCache()>
c002422f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024233:	83 c4 18             	add    esp,0x18
c0024236:	5b                   	pop    ebx
c0024237:	e9 a2 22 ff ff       	jmp    c00164de <createPartitionsForDisk(PhysicalDisk*)>

c002423c <ATAPI::detectMedia()>:
c002423c:	56                   	push   esi
c002423d:	53                   	push   ebx
c002423e:	83 ec 28             	sub    esp,0x28
c0024241:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024245:	6a 0c                	push   0xc
c0024247:	6a 00                	push   0x0
c0024249:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002424d:	56                   	push   esi
c002424e:	e8 25 c5 fd ff       	call   c0000778 <memset>
c0024253:	58                   	pop    eax
c0024254:	5a                   	pop    edx
c0024255:	6a 00                	push   0x0
c0024257:	6a 00                	push   0x0
c0024259:	6a 00                	push   0x0
c002425b:	6a 00                	push   0x0
c002425d:	56                   	push   esi
c002425e:	53                   	push   ebx
c002425f:	e8 86 fc ff ff       	call   c0023eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024264:	83 c4 1c             	add    esp,0x1c
c0024267:	6a 0c                	push   0xc
c0024269:	6a 00                	push   0x0
c002426b:	56                   	push   esi
c002426c:	e8 07 c5 fd ff       	call   c0000778 <memset>
c0024271:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024276:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002427b:	59                   	pop    ecx
c002427c:	58                   	pop    eax
c002427d:	6a 01                	push   0x1
c002427f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024283:	50                   	push   eax
c0024284:	6a 00                	push   0x0
c0024286:	6a 12                	push   0x12
c0024288:	56                   	push   esi
c0024289:	53                   	push   ebx
c002428a:	e8 5b fc ff ff       	call   c0023eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002428f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024293:	83 c4 20             	add    esp,0x20
c0024296:	83 e0 7f             	and    eax,0x7f
c0024299:	3c 70                	cmp    al,0x70
c002429b:	74 15                	je     c00242b2 <ATAPI::detectMedia()+0x76>
c002429d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00242a4:	75 0c                	jne    c00242b2 <ATAPI::detectMedia()+0x76>
c00242a6:	83 ec 0c             	sub    esp,0xc
c00242a9:	53                   	push   ebx
c00242aa:	e8 5f ff ff ff       	call   c002420e <ATAPI::diskInserted()>
c00242af:	83 c4 10             	add    esp,0x10
c00242b2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00242b6:	83 e0 0f             	and    eax,0xf
c00242b9:	3c 02                	cmp    al,0x2
c00242bb:	75 1b                	jne    c00242d8 <ATAPI::detectMedia()+0x9c>
c00242bd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00242c2:	75 2d                	jne    c00242f1 <ATAPI::detectMedia()+0xb5>
c00242c4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00242cb:	74 24                	je     c00242f1 <ATAPI::detectMedia()+0xb5>
c00242cd:	83 ec 0c             	sub    esp,0xc
c00242d0:	53                   	push   ebx
c00242d1:	e8 d4 fe ff ff       	call   c00241aa <ATAPI::diskRemoved()>
c00242d6:	eb 16                	jmp    c00242ee <ATAPI::detectMedia()+0xb2>
c00242d8:	84 c0                	test   al,al
c00242da:	75 15                	jne    c00242f1 <ATAPI::detectMedia()+0xb5>
c00242dc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00242e3:	75 0c                	jne    c00242f1 <ATAPI::detectMedia()+0xb5>
c00242e5:	83 ec 0c             	sub    esp,0xc
c00242e8:	53                   	push   ebx
c00242e9:	e8 20 ff ff ff       	call   c002420e <ATAPI::diskInserted()>
c00242ee:	83 c4 10             	add    esp,0x10
c00242f1:	83 c4 24             	add    esp,0x24
c00242f4:	5b                   	pop    ebx
c00242f5:	5e                   	pop    esi
c00242f6:	c3                   	ret    
c00242f7:	90                   	nop

c00242f8 <ATAPI::open(int, int, void*)>:
c00242f8:	53                   	push   ebx
c00242f9:	83 ec 08             	sub    esp,0x8
c00242fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024300:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024308:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002430e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024314:	c1 e0 06             	shl    eax,0x6
c0024317:	01 d0                	add    eax,edx
c0024319:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024320:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024326:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002432d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024337:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002433d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024344:	6a 04                	push   0x4
c0024346:	6a 0c                	push   0xc
c0024348:	51                   	push   ecx
c0024349:	52                   	push   edx
c002434a:	e8 15 e5 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002434f:	90                   	nop
c0024350:	90                   	nop
c0024351:	6a 00                	push   0x0
c0024353:	6a 0c                	push   0xc
c0024355:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002435c:	50                   	push   eax
c002435d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024363:	e8 fc e4 ff ff       	call   c0022864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024368:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002436f:	83 c4 14             	add    esp,0x14
c0024372:	53                   	push   ebx
c0024373:	e8 c4 fe ff ff       	call   c002423c <ATAPI::detectMedia()>
c0024378:	31 c0                	xor    eax,eax
c002437a:	83 c4 18             	add    esp,0x18
c002437d:	5b                   	pop    ebx
c002437e:	c3                   	ret    
c002437f:	90                   	nop

c0024380 <ATAPI::read(unsigned long long, int, void*)>:
c0024380:	55                   	push   ebp
c0024381:	57                   	push   edi
c0024382:	56                   	push   esi
c0024383:	53                   	push   ebx
c0024384:	83 ec 1c             	sub    esp,0x1c
c0024387:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002438b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002438f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024393:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002439a:	74 41                	je     c00243dd <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002439c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00243a0:	b9 03 00 00 00       	mov    ecx,0x3
c00243a5:	fc                   	cld    
c00243a6:	31 c0                	xor    eax,eax
c00243a8:	86 fb                	xchg   bl,bh
c00243aa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00243ac:	c1 c3 10             	rol    ebx,0x10
c00243af:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00243b4:	89 e8                	mov    eax,ebp
c00243b6:	86 fb                	xchg   bl,bh
c00243b8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00243bc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00243c0:	50                   	push   eax
c00243c1:	50                   	push   eax
c00243c2:	55                   	push   ebp
c00243c3:	c1 e5 0b             	shl    ebp,0xb
c00243c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00243ca:	6a 00                	push   0x0
c00243cc:	55                   	push   ebp
c00243cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00243d1:	50                   	push   eax
c00243d2:	56                   	push   esi
c00243d3:	e8 12 fb ff ff       	call   c0023eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00243d8:	83 c4 20             	add    esp,0x20
c00243db:	eb 1a                	jmp    c00243f7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00243dd:	83 ec 0c             	sub    esp,0xc
c00243e0:	56                   	push   esi
c00243e1:	e8 56 fe ff ff       	call   c002423c <ATAPI::detectMedia()>
c00243e6:	83 c4 10             	add    esp,0x10
c00243e9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00243f0:	75 aa                	jne    c002439c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00243f2:	b8 02 00 00 00       	mov    eax,0x2
c00243f7:	83 c4 1c             	add    esp,0x1c
c00243fa:	5b                   	pop    ebx
c00243fb:	5e                   	pop    esi
c00243fc:	5f                   	pop    edi
c00243fd:	5d                   	pop    ebp
c00243fe:	c3                   	ret    
c00243ff:	90                   	nop

c0024400 <SATA::close(int, int, void*)>:
c0024400:	83 ec 0c             	sub    esp,0xc
c0024403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024407:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002440d:	85 c0                	test   eax,eax
c002440f:	74 0c                	je     c002441d <SATA::close(int, int, void*)+0x1d>
c0024411:	83 ec 0c             	sub    esp,0xc
c0024414:	8b 10                	mov    edx,DWORD PTR [eax]
c0024416:	50                   	push   eax
c0024417:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002441a:	83 c4 10             	add    esp,0x10
c002441d:	31 c0                	xor    eax,eax
c002441f:	83 c4 0c             	add    esp,0xc
c0024422:	c3                   	ret    
c0024423:	90                   	nop

c0024424 <SATA::powerSaving(PowerSavingLevel)>:
c0024424:	c3                   	ret    
c0024425:	90                   	nop

c0024426 <SATA::open(int, int, void*)>:
c0024426:	56                   	push   esi
c0024427:	53                   	push   ebx
c0024428:	50                   	push   eax
c0024429:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002442d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024431:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002443b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024441:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002444b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002444f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024459:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002445f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024466:	e8 6c ba fe ff       	call   c000fed7 <Phys::allocatePage()>
c002446b:	89 c6                	mov    esi,eax
c002446d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024473:	81 c6 00 10 00 00    	add    esi,0x1000
c0024479:	e8 59 ba fe ff       	call   c000fed7 <Phys::allocatePage()>
c002447e:	39 c6                	cmp    esi,eax
c0024480:	74 10                	je     c0024492 <SATA::open(int, int, void*)+0x6c>
c0024482:	83 ec 0c             	sub    esp,0xc
c0024485:	68 28 c5 02 c0       	push   0xc002c528
c002448a:	e8 5e 5b ff ff       	call   c0019fed <Krnl::panic(char const*)>
c002448f:	83 c4 10             	add    esp,0x10
c0024492:	83 ec 0c             	sub    esp,0xc
c0024495:	6a 02                	push   0x2
c0024497:	e8 7d d6 fe ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c002449c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244a2:	e8 02 d8 fe ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c00244a7:	6a 03                	push   0x3
c00244a9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00244af:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00244b5:	50                   	push   eax
c00244b6:	e8 29 dd fe ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00244bb:	83 c4 14             	add    esp,0x14
c00244be:	53                   	push   ebx
c00244bf:	e8 f8 fe fe ff       	call   c00143bc <PhysicalDisk::startCache()>
c00244c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00244c7:	e8 12 20 ff ff       	call   c00164de <createPartitionsForDisk(PhysicalDisk*)>
c00244cc:	83 c4 14             	add    esp,0x14
c00244cf:	31 c0                	xor    eax,eax
c00244d1:	5b                   	pop    ebx
c00244d2:	5e                   	pop    esi
c00244d3:	c3                   	ret    

c00244d4 <SATA::SATA()>:
c00244d4:	83 ec 0c             	sub    esp,0xc
c00244d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244db:	83 ec 04             	sub    esp,0x4
c00244de:	68 00 02 00 00       	push   0x200
c00244e3:	68 3c c5 02 c0       	push   0xc002c53c
c00244e8:	50                   	push   eax
c00244e9:	e8 66 fe fe ff       	call   c0014354 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00244ee:	83 c4 10             	add    esp,0x10
c00244f1:	ba 74 c5 02 c0       	mov    edx,0xc002c574
c00244f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244fa:	89 10                	mov    DWORD PTR [eax],edx
c00244fc:	90                   	nop
c00244fd:	83 c4 0c             	add    esp,0xc
c0024500:	c3                   	ret    
c0024501:	90                   	nop

c0024502 <SATA::access(unsigned long long, int, void*, bool)>:
c0024502:	55                   	push   ebp
c0024503:	57                   	push   edi
c0024504:	56                   	push   esi
c0024505:	53                   	push   ebx
c0024506:	83 ec 2c             	sub    esp,0x2c
c0024509:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002450d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0024511:	89 04 24             	mov    DWORD PTR [esp],eax
c0024514:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024518:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002451c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024520:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024524:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c0024529:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002452e:	7e 33                	jle    c0024563 <SATA::access(unsigned long long, int, void*, bool)+0x61>
c0024530:	57                   	push   edi
c0024531:	57                   	push   edi
c0024532:	53                   	push   ebx
c0024533:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024537:	6a 10                	push   0x10
c0024539:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002453d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024541:	55                   	push   ebp
c0024542:	e8 bb ff ff ff       	call   c0024502 <SATA::access(unsigned long long, int, void*, bool)>
c0024547:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c002454c:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c0024551:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0024556:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c002455e:	83 c4 20             	add    esp,0x20
c0024561:	eb c6                	jmp    c0024529 <SATA::access(unsigned long long, int, void*, bool)+0x27>
c0024563:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024566:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c002456c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024574:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024578:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002457e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024588:	89 d8                	mov    eax,ebx
c002458a:	c1 e0 07             	shl    eax,0x7
c002458d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024591:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002459b:	56                   	push   esi
c002459c:	8d 43 02             	lea    eax,[ebx+0x2]
c002459f:	56                   	push   esi
c00245a0:	c1 e0 07             	shl    eax,0x7
c00245a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00245a7:	50                   	push   eax
c00245a8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00245ae:	e8 75 ef ff ff       	call   c0023528 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00245b3:	ba 01 00 00 00       	mov    edx,0x1
c00245b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00245bc:	83 c4 10             	add    esp,0x10
c00245bf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00245c4:	0f 84 dd 01 00 00    	je     c00247a7 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c00245ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00245ce:	c1 e0 09             	shl    eax,0x9
c00245d1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00245d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00245da:	74 17                	je     c00245f3 <SATA::access(unsigned long long, int, void*, bool)+0xf1>
c00245dc:	51                   	push   ecx
c00245dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00245e1:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00245e5:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00245eb:	e8 54 c1 fd ff       	call   c0000744 <memcpy>
c00245f0:	83 c4 10             	add    esp,0x10
c00245f3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00245f9:	8d 43 02             	lea    eax,[ebx+0x2]
c00245fc:	c1 e0 07             	shl    eax,0x7
c00245ff:	89 de                	mov    esi,ebx
c0024601:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024605:	8b 00                	mov    eax,DWORD PTR [eax]
c0024607:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002460d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024613:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024617:	c1 e1 05             	shl    ecx,0x5
c002461a:	01 c8                	add    eax,ecx
c002461c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024620:	8b 38                	mov    edi,DWORD PTR [eax]
c0024622:	83 e1 01             	and    ecx,0x1
c0024625:	83 e7 bf             	and    edi,0xffffffbf
c0024628:	c1 e1 06             	shl    ecx,0x6
c002462b:	09 f9                	or     ecx,edi
c002462d:	88 08                	mov    BYTE PTR [eax],cl
c002462f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024631:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024637:	81 c9 05 00 01 00    	or     ecx,0x10005
c002463d:	89 08                	mov    DWORD PTR [eax],ecx
c002463f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024645:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c002464b:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c0024651:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c0024654:	52                   	push   edx
c0024655:	68 90 00 00 00       	push   0x90
c002465a:	6a 00                	push   0x0
c002465c:	57                   	push   edi
c002465d:	e8 16 c1 fd ff       	call   c0000778 <memset>
c0024662:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024668:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c002466c:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c0024672:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024676:	83 c4 10             	add    esp,0x10
c0024679:	8d 48 ff             	lea    ecx,[eax-0x1]
c002467c:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c0024682:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024688:	25 00 00 c0 ff       	and    eax,0xffc00000
c002468d:	09 c8                	or     eax,ecx
c002468f:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c0024695:	66 8b 07             	mov    ax,WORD PTR [edi]
c0024698:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c002469f:	66 25 00 7f          	and    ax,0x7f00
c00246a3:	66 0d 27 80          	or     ax,0x8027
c00246a7:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00246ac:	66 89 07             	mov    WORD PTR [edi],ax
c00246af:	19 c0                	sbb    eax,eax
c00246b1:	c1 e6 07             	shl    esi,0x7
c00246b4:	83 e0 f0             	and    eax,0xfffffff0
c00246b7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00246bb:	83 c0 35             	add    eax,0x35
c00246be:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c00246c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00246c4:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c00246c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246cc:	c1 e8 10             	shr    eax,0x10
c00246cf:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c00246d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246d6:	c1 e8 18             	shr    eax,0x18
c00246d9:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c00246dc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00246e0:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c00246e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00246e7:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c00246ea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00246ee:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c00246f2:	31 c0                	xor    eax,eax
c00246f4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00246fa:	80 e1 88             	and    cl,0x88
c00246fd:	74 0a                	je     c0024709 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c00246ff:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024704:	74 0a                	je     c0024710 <SATA::access(unsigned long long, int, void*, bool)+0x20e>
c0024706:	40                   	inc    eax
c0024707:	eb eb                	jmp    c00246f4 <SATA::access(unsigned long long, int, void*, bool)+0x1f2>
c0024709:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002470e:	75 0a                	jne    c002471a <SATA::access(unsigned long long, int, void*, bool)+0x218>
c0024710:	83 ec 0c             	sub    esp,0xc
c0024713:	68 4c c5 02 c0       	push   0xc002c54c
c0024718:	eb 56                	jmp    c0024770 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002471a:	b8 01 00 00 00       	mov    eax,0x1
c002471f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024723:	c1 e3 07             	shl    ebx,0x7
c0024726:	d3 e0                	shl    eax,cl
c0024728:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002472c:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024732:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c0024738:	85 c8                	test   eax,ecx
c002473a:	74 20                	je     c002475c <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c002473c:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c0024742:	0f ba e1 1e          	bt     ecx,0x1e
c0024746:	73 ea                	jae    c0024732 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0024748:	83 ec 0c             	sub    esp,0xc
c002474b:	68 5a c5 02 c0       	push   0xc002c55a
c0024750:	e8 98 58 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0024755:	83 c4 10             	add    esp,0x10
c0024758:	31 d2                	xor    edx,edx
c002475a:	eb 4b                	jmp    c00247a7 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c002475c:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0024762:	0f ba e0 1e          	bt     eax,0x1e
c0024766:	73 17                	jae    c002477f <SATA::access(unsigned long long, int, void*, bool)+0x27d>
c0024768:	83 ec 0c             	sub    esp,0xc
c002476b:	68 5a c5 02 c0       	push   0xc002c55a
c0024770:	e8 78 58 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0024775:	83 c4 10             	add    esp,0x10
c0024778:	ba 01 00 00 00       	mov    edx,0x1
c002477d:	eb 28                	jmp    c00247a7 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c002477f:	31 d2                	xor    edx,edx
c0024781:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024786:	75 1f                	jne    c00247a7 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024788:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002478c:	50                   	push   eax
c002478d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024791:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024797:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002479b:	e8 a4 bf fd ff       	call   c0000744 <memcpy>
c00247a0:	83 c4 10             	add    esp,0x10
c00247a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00247a7:	83 c4 2c             	add    esp,0x2c
c00247aa:	89 d0                	mov    eax,edx
c00247ac:	5b                   	pop    ebx
c00247ad:	5e                   	pop    esi
c00247ae:	5f                   	pop    edi
c00247af:	5d                   	pop    ebp
c00247b0:	c3                   	ret    
c00247b1:	90                   	nop

c00247b2 <SATA::read(unsigned long long, int, void*)>:
c00247b2:	57                   	push   edi
c00247b3:	b8 04 00 00 00       	mov    eax,0x4
c00247b8:	56                   	push   esi
c00247b9:	53                   	push   ebx
c00247ba:	83 ec 10             	sub    esp,0x10
c00247bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00247c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00247c5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00247c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00247cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00247d0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00247d6:	77 3b                	ja     c0024813 <SATA::read(unsigned long long, int, void*)+0x61>
c00247d8:	b8 06 00 00 00       	mov    eax,0x6
c00247dd:	85 d2                	test   edx,edx
c00247df:	74 32                	je     c0024813 <SATA::read(unsigned long long, int, void*)+0x61>
c00247e1:	50                   	push   eax
c00247e2:	50                   	push   eax
c00247e3:	6a 00                	push   0x0
c00247e5:	52                   	push   edx
c00247e6:	53                   	push   ebx
c00247e7:	57                   	push   edi
c00247e8:	56                   	push   esi
c00247e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00247ed:	e8 10 fd ff ff       	call   c0024502 <SATA::access(unsigned long long, int, void*, bool)>
c00247f2:	83 c4 20             	add    esp,0x20
c00247f5:	85 c0                	test   eax,eax
c00247f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00247fb:	75 11                	jne    c002480e <SATA::read(unsigned long long, int, void*)+0x5c>
c00247fd:	01 1d 08 1e 03 c0    	add    DWORD PTR ds:0xc0031e08,ebx
c0024803:	e8 66 c1 fe ff       	call   c001096e <VgaText::updateDiskUsage()>
c0024808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002480c:	eb 05                	jmp    c0024813 <SATA::read(unsigned long long, int, void*)+0x61>
c002480e:	b8 01 00 00 00       	mov    eax,0x1
c0024813:	83 c4 10             	add    esp,0x10
c0024816:	5b                   	pop    ebx
c0024817:	5e                   	pop    esi
c0024818:	5f                   	pop    edi
c0024819:	c3                   	ret    

c002481a <SATA::write(unsigned long long, int, void*)>:
c002481a:	57                   	push   edi
c002481b:	b8 04 00 00 00       	mov    eax,0x4
c0024820:	56                   	push   esi
c0024821:	53                   	push   ebx
c0024822:	83 ec 10             	sub    esp,0x10
c0024825:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024829:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002482d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024830:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024834:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024838:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002483e:	77 3b                	ja     c002487b <SATA::write(unsigned long long, int, void*)+0x61>
c0024840:	b8 06 00 00 00       	mov    eax,0x6
c0024845:	85 d2                	test   edx,edx
c0024847:	74 32                	je     c002487b <SATA::write(unsigned long long, int, void*)+0x61>
c0024849:	50                   	push   eax
c002484a:	50                   	push   eax
c002484b:	6a 01                	push   0x1
c002484d:	52                   	push   edx
c002484e:	53                   	push   ebx
c002484f:	57                   	push   edi
c0024850:	56                   	push   esi
c0024851:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024855:	e8 a8 fc ff ff       	call   c0024502 <SATA::access(unsigned long long, int, void*, bool)>
c002485a:	83 c4 20             	add    esp,0x20
c002485d:	85 c0                	test   eax,eax
c002485f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024863:	75 11                	jne    c0024876 <SATA::write(unsigned long long, int, void*)+0x5c>
c0024865:	01 1d 04 1e 03 c0    	add    DWORD PTR ds:0xc0031e04,ebx
c002486b:	e8 fe c0 fe ff       	call   c001096e <VgaText::updateDiskUsage()>
c0024870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024874:	eb 05                	jmp    c002487b <SATA::write(unsigned long long, int, void*)+0x61>
c0024876:	b8 01 00 00 00       	mov    eax,0x1
c002487b:	83 c4 10             	add    esp,0x10
c002487e:	5b                   	pop    ebx
c002487f:	5e                   	pop    esi
c0024880:	5f                   	pop    edi
c0024881:	c3                   	ret    

c0024882 <SATAPI::write(unsigned long long, int, void*)>:
c0024882:	b8 03 00 00 00       	mov    eax,0x3
c0024887:	c3                   	ret    

c0024888 <SATAPI::close(int, int, void*)>:
c0024888:	83 ec 0c             	sub    esp,0xc
c002488b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002488f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024895:	85 c0                	test   eax,eax
c0024897:	74 0c                	je     c00248a5 <SATAPI::close(int, int, void*)+0x1d>
c0024899:	83 ec 0c             	sub    esp,0xc
c002489c:	8b 10                	mov    edx,DWORD PTR [eax]
c002489e:	50                   	push   eax
c002489f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248a2:	83 c4 10             	add    esp,0x10
c00248a5:	31 c0                	xor    eax,eax
c00248a7:	83 c4 0c             	add    esp,0xc
c00248aa:	c3                   	ret    
c00248ab:	90                   	nop

c00248ac <SATAPI::SATAPI()>:
c00248ac:	83 ec 0c             	sub    esp,0xc
c00248af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b3:	83 ec 04             	sub    esp,0x4
c00248b6:	68 00 08 00 00       	push   0x800
c00248bb:	68 a4 c5 02 c0       	push   0xc002c5a4
c00248c0:	50                   	push   eax
c00248c1:	e8 8e fa fe ff       	call   c0014354 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248c6:	83 c4 10             	add    esp,0x10
c00248c9:	ba 50 c6 02 c0       	mov    edx,0xc002c650
c00248ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248d2:	89 10                	mov    DWORD PTR [eax],edx
c00248d4:	90                   	nop
c00248d5:	83 c4 0c             	add    esp,0xc
c00248d8:	c3                   	ret    
c00248d9:	90                   	nop

c00248da <SATAPI::diskRemoved()>:
c00248da:	83 ec 18             	sub    esp,0x18
c00248dd:	68 b0 c5 02 c0       	push   0xc002c5b0
c00248e2:	e8 22 e2 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00248e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248eb:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00248f2:	83 c4 1c             	add    esp,0x1c
c00248f5:	c3                   	ret    

c00248f6 <SATAPI::diskInserted()>:
c00248f6:	53                   	push   ebx
c00248f7:	83 ec 14             	sub    esp,0x14
c00248fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00248fe:	68 c7 c5 02 c0       	push   0xc002c5c7
c0024903:	e8 01 e2 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0024908:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002490f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024912:	e8 a5 fa fe ff       	call   c00143bc <PhysicalDisk::startCache()>
c0024917:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002491b:	83 c4 18             	add    esp,0x18
c002491e:	5b                   	pop    ebx
c002491f:	e9 ba 1b ff ff       	jmp    c00164de <createPartitionsForDisk(PhysicalDisk*)>

c0024924 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024924:	55                   	push   ebp
c0024925:	57                   	push   edi
c0024926:	56                   	push   esi
c0024927:	53                   	push   ebx
c0024928:	83 ec 24             	sub    esp,0x24
c002492b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002492f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024933:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024939:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002493d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024941:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024947:	8d 5f 02             	lea    ebx,[edi+0x2]
c002494a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024950:	c1 e3 07             	shl    ebx,0x7
c0024953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024957:	89 f8                	mov    eax,edi
c0024959:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002495d:	c1 e0 07             	shl    eax,0x7
c0024960:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024964:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024968:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024972:	53                   	push   ebx
c0024973:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024979:	e8 aa eb ff ff       	call   c0023528 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002497e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024982:	83 c4 10             	add    esp,0x10
c0024985:	b8 01 00 00 00       	mov    eax,0x1
c002498a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c002498f:	0f 84 8a 01 00 00    	je     c0024b1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024995:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002499b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002499d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249a3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00249ad:	c1 e1 05             	shl    ecx,0x5
c00249b0:	01 c8                	add    eax,ecx
c00249b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249b4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00249ba:	81 c9 25 00 01 00    	or     ecx,0x10025
c00249c0:	89 08                	mov    DWORD PTR [eax],ecx
c00249c2:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00249c8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00249ce:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00249d4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00249d7:	52                   	push   edx
c00249d8:	68 90 00 00 00       	push   0x90
c00249dd:	6a 00                	push   0x0
c00249df:	53                   	push   ebx
c00249e0:	e8 93 bd fd ff       	call   c0000778 <memset>
c00249e5:	83 c4 0c             	add    esp,0xc
c00249e8:	8d 43 40             	lea    eax,[ebx+0x40]
c00249eb:	6a 0c                	push   0xc
c00249ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00249f1:	50                   	push   eax
c00249f2:	e8 4d bd fd ff       	call   c0000744 <memcpy>
c00249f7:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00249fd:	89 ea                	mov    edx,ebp
c00249ff:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024a05:	c1 ea 18             	shr    edx,0x18
c0024a08:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a0c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024a0f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a12:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024a16:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024a1c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024a22:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a27:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024a2b:	09 c8                	or     eax,ecx
c0024a2d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024a31:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024a37:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024a3a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024a41:	66 25 00 7f          	and    ax,0x7f00
c0024a45:	66 0d 27 80          	or     ax,0x8027
c0024a49:	66 89 03             	mov    WORD PTR [ebx],ax
c0024a4c:	89 e8                	mov    eax,ebp
c0024a4e:	c1 e8 10             	shr    eax,0x10
c0024a51:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024a54:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024a58:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024a5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a5f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024a62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024a66:	83 c4 10             	add    esp,0x10
c0024a69:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024a6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024a71:	31 c0                	xor    eax,eax
c0024a73:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024a79:	80 e1 88             	and    cl,0x88
c0024a7c:	74 0a                	je     c0024a88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024a7e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a83:	74 0a                	je     c0024a8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024a85:	40                   	inc    eax
c0024a86:	eb eb                	jmp    c0024a73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024a88:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a8d:	75 0f                	jne    c0024a9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024a8f:	83 ec 0c             	sub    esp,0xc
c0024a92:	68 4c c5 02 c0       	push   0xc002c54c
c0024a97:	e8 51 55 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0024a9c:	eb 3a                	jmp    c0024ad8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024a9e:	b8 01 00 00 00       	mov    eax,0x1
c0024aa3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024aa7:	c1 e7 07             	shl    edi,0x7
c0024aaa:	d3 e0                	shl    eax,cl
c0024aac:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024aaf:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024ab5:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024abb:	85 d0                	test   eax,edx
c0024abd:	74 23                	je     c0024ae2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024abf:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024ac5:	0f ba e2 1e          	bt     edx,0x1e
c0024ac9:	73 ea                	jae    c0024ab5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024acb:	83 ec 0c             	sub    esp,0xc
c0024ace:	68 df c5 02 c0       	push   0xc002c5df
c0024ad3:	e8 31 e0 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0024ad8:	83 c4 10             	add    esp,0x10
c0024adb:	b8 01 00 00 00       	mov    eax,0x1
c0024ae0:	eb 3d                	jmp    c0024b1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024ae2:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024ae8:	0f ba e0 1e          	bt     eax,0x1e
c0024aec:	73 0a                	jae    c0024af8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024aee:	83 ec 0c             	sub    esp,0xc
c0024af1:	68 f2 c5 02 c0       	push   0xc002c5f2
c0024af6:	eb db                	jmp    c0024ad3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024af8:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024afd:	74 1e                	je     c0024b1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024aff:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024b04:	74 17                	je     c0024b1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024b06:	50                   	push   eax
c0024b07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b0b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024b11:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024b15:	e8 2a bc fd ff       	call   c0000744 <memcpy>
c0024b1a:	83 c4 10             	add    esp,0x10
c0024b1d:	31 c0                	xor    eax,eax
c0024b1f:	83 c4 1c             	add    esp,0x1c
c0024b22:	5b                   	pop    ebx
c0024b23:	5e                   	pop    esi
c0024b24:	5f                   	pop    edi
c0024b25:	5d                   	pop    ebp
c0024b26:	c3                   	ret    
c0024b27:	90                   	nop

c0024b28 <SATAPI::eject()>:
c0024b28:	57                   	push   edi
c0024b29:	b9 03 00 00 00       	mov    ecx,0x3
c0024b2e:	53                   	push   ebx
c0024b2f:	83 ec 14             	sub    esp,0x14
c0024b32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024b36:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b3a:	fc                   	cld    
c0024b3b:	31 c0                	xor    eax,eax
c0024b3d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b3f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024b44:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024b49:	50                   	push   eax
c0024b4a:	6a 00                	push   0x0
c0024b4c:	6a 00                	push   0x0
c0024b4e:	6a 00                	push   0x0
c0024b50:	6a 00                	push   0x0
c0024b52:	6a 02                	push   0x2
c0024b54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b58:	50                   	push   eax
c0024b59:	53                   	push   ebx
c0024b5a:	e8 c5 fd ff ff       	call   c0024924 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024b5f:	83 c4 14             	add    esp,0x14
c0024b62:	53                   	push   ebx
c0024b63:	e8 72 fd ff ff       	call   c00248da <SATAPI::diskRemoved()>
c0024b68:	83 c4 24             	add    esp,0x24
c0024b6b:	31 c0                	xor    eax,eax
c0024b6d:	5b                   	pop    ebx
c0024b6e:	5f                   	pop    edi
c0024b6f:	c3                   	ret    

c0024b70 <SATAPI::detectMedia()>:
c0024b70:	56                   	push   esi
c0024b71:	53                   	push   ebx
c0024b72:	83 ec 28             	sub    esp,0x28
c0024b75:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b79:	6a 0c                	push   0xc
c0024b7b:	6a 00                	push   0x0
c0024b7d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024b81:	56                   	push   esi
c0024b82:	e8 f1 bb fd ff       	call   c0000778 <memset>
c0024b87:	83 c4 0c             	add    esp,0xc
c0024b8a:	6a 00                	push   0x0
c0024b8c:	6a 00                	push   0x0
c0024b8e:	6a 00                	push   0x0
c0024b90:	6a 00                	push   0x0
c0024b92:	6a 00                	push   0x0
c0024b94:	56                   	push   esi
c0024b95:	53                   	push   ebx
c0024b96:	e8 89 fd ff ff       	call   c0024924 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024b9b:	83 c4 1c             	add    esp,0x1c
c0024b9e:	6a 0c                	push   0xc
c0024ba0:	6a 00                	push   0x0
c0024ba2:	56                   	push   esi
c0024ba3:	e8 d0 bb fd ff       	call   c0000778 <memset>
c0024ba8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024bad:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024bb2:	83 c4 0c             	add    esp,0xc
c0024bb5:	6a 01                	push   0x1
c0024bb7:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024bbb:	50                   	push   eax
c0024bbc:	6a 00                	push   0x0
c0024bbe:	6a 00                	push   0x0
c0024bc0:	6a 12                	push   0x12
c0024bc2:	56                   	push   esi
c0024bc3:	53                   	push   ebx
c0024bc4:	e8 5b fd ff ff       	call   c0024924 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024bc9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024bcd:	83 c4 20             	add    esp,0x20
c0024bd0:	83 e0 7f             	and    eax,0x7f
c0024bd3:	3c 70                	cmp    al,0x70
c0024bd5:	74 15                	je     c0024bec <SATAPI::detectMedia()+0x7c>
c0024bd7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024bde:	75 0c                	jne    c0024bec <SATAPI::detectMedia()+0x7c>
c0024be0:	83 ec 0c             	sub    esp,0xc
c0024be3:	53                   	push   ebx
c0024be4:	e8 0d fd ff ff       	call   c00248f6 <SATAPI::diskInserted()>
c0024be9:	83 c4 10             	add    esp,0x10
c0024bec:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024bf0:	83 e0 0f             	and    eax,0xf
c0024bf3:	3c 02                	cmp    al,0x2
c0024bf5:	75 1b                	jne    c0024c12 <SATAPI::detectMedia()+0xa2>
c0024bf7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024bfc:	75 2d                	jne    c0024c2b <SATAPI::detectMedia()+0xbb>
c0024bfe:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c05:	74 24                	je     c0024c2b <SATAPI::detectMedia()+0xbb>
c0024c07:	83 ec 0c             	sub    esp,0xc
c0024c0a:	53                   	push   ebx
c0024c0b:	e8 ca fc ff ff       	call   c00248da <SATAPI::diskRemoved()>
c0024c10:	eb 16                	jmp    c0024c28 <SATAPI::detectMedia()+0xb8>
c0024c12:	84 c0                	test   al,al
c0024c14:	75 15                	jne    c0024c2b <SATAPI::detectMedia()+0xbb>
c0024c16:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c1d:	75 0c                	jne    c0024c2b <SATAPI::detectMedia()+0xbb>
c0024c1f:	83 ec 0c             	sub    esp,0xc
c0024c22:	53                   	push   ebx
c0024c23:	e8 ce fc ff ff       	call   c00248f6 <SATAPI::diskInserted()>
c0024c28:	83 c4 10             	add    esp,0x10
c0024c2b:	83 c4 24             	add    esp,0x24
c0024c2e:	5b                   	pop    ebx
c0024c2f:	5e                   	pop    esi
c0024c30:	c3                   	ret    
c0024c31:	90                   	nop

c0024c32 <SATAPI::open(int, int, void*)>:
c0024c32:	56                   	push   esi
c0024c33:	53                   	push   ebx
c0024c34:	50                   	push   eax
c0024c35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c3d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c47:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c4d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c5b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024c65:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c6b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024c72:	e8 60 b2 fe ff       	call   c000fed7 <Phys::allocatePage()>
c0024c77:	89 c6                	mov    esi,eax
c0024c79:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c7f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c85:	e8 4d b2 fe ff       	call   c000fed7 <Phys::allocatePage()>
c0024c8a:	39 c6                	cmp    esi,eax
c0024c8c:	74 10                	je     c0024c9e <SATAPI::open(int, int, void*)+0x6c>
c0024c8e:	83 ec 0c             	sub    esp,0xc
c0024c91:	68 07 c6 02 c0       	push   0xc002c607
c0024c96:	e8 52 53 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0024c9b:	83 c4 10             	add    esp,0x10
c0024c9e:	83 ec 0c             	sub    esp,0xc
c0024ca1:	6a 02                	push   0x2
c0024ca3:	e8 71 ce fe ff       	call   c0011b19 <Virt::allocateKernelVirtualPages(int)>
c0024ca8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024cae:	e8 f6 cf fe ff       	call   c0011ca9 <Virt::getAKernelVAS()>
c0024cb3:	6a 03                	push   0x3
c0024cb5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024cbb:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024cc1:	50                   	push   eax
c0024cc2:	e8 1d d5 fe ff       	call   c00121e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cc7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024cce:	83 c4 14             	add    esp,0x14
c0024cd1:	53                   	push   ebx
c0024cd2:	e8 99 fe ff ff       	call   c0024b70 <SATAPI::detectMedia()>
c0024cd7:	83 c4 14             	add    esp,0x14
c0024cda:	31 c0                	xor    eax,eax
c0024cdc:	5b                   	pop    ebx
c0024cdd:	5e                   	pop    esi
c0024cde:	c3                   	ret    
c0024cdf:	90                   	nop

c0024ce0 <SATAPI::read(unsigned long long, int, void*)>:
c0024ce0:	55                   	push   ebp
c0024ce1:	57                   	push   edi
c0024ce2:	56                   	push   esi
c0024ce3:	53                   	push   ebx
c0024ce4:	83 ec 1c             	sub    esp,0x1c
c0024ce7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024ceb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024cef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024cf3:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024cfa:	74 19                	je     c0024d15 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024cfc:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024d01:	7e 2e                	jle    c0024d31 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024d03:	83 ec 0c             	sub    esp,0xc
c0024d06:	68 1d c6 02 c0       	push   0xc002c61d
c0024d0b:	e8 dd 52 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0024d10:	83 c4 10             	add    esp,0x10
c0024d13:	eb 1c                	jmp    c0024d31 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024d15:	83 ec 0c             	sub    esp,0xc
c0024d18:	55                   	push   ebp
c0024d19:	e8 52 fe ff ff       	call   c0024b70 <SATAPI::detectMedia()>
c0024d1e:	83 c4 10             	add    esp,0x10
c0024d21:	b8 02 00 00 00       	mov    eax,0x2
c0024d26:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024d2d:	75 cd                	jne    c0024cfc <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024d2f:	eb 49                	jmp    c0024d7a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024d31:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024d35:	b9 03 00 00 00       	mov    ecx,0x3
c0024d3a:	fc                   	cld    
c0024d3b:	31 c0                	xor    eax,eax
c0024d3d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024d3f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024d44:	89 d8                	mov    eax,ebx
c0024d46:	86 e0                	xchg   al,ah
c0024d48:	c1 c0 10             	rol    eax,0x10
c0024d4b:	86 e0                	xchg   al,ah
c0024d4d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024d51:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024d55:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024d59:	50                   	push   eax
c0024d5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024d5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024d62:	56                   	push   esi
c0024d63:	53                   	push   ebx
c0024d64:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024d68:	c1 e0 0b             	shl    eax,0xb
c0024d6b:	50                   	push   eax
c0024d6c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024d70:	50                   	push   eax
c0024d71:	55                   	push   ebp
c0024d72:	e8 ad fb ff ff       	call   c0024924 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024d77:	83 c4 20             	add    esp,0x20
c0024d7a:	83 c4 1c             	add    esp,0x1c
c0024d7d:	5b                   	pop    ebx
c0024d7e:	5e                   	pop    esi
c0024d7f:	5f                   	pop    edi
c0024d80:	5d                   	pop    ebp
c0024d81:	c3                   	ret    

c0024d82 <AVX::open(int, int, void*)>:
c0024d82:	83 ec 0c             	sub    esp,0xc
c0024d85:	e8 3e 11 00 00       	call   c0025ec8 <avxInit>
c0024d8a:	b8 00 00 00 00       	mov    eax,0x0
c0024d8f:	83 c4 0c             	add    esp,0xc
c0024d92:	c3                   	ret    
c0024d93:	90                   	nop

c0024d94 <AVX::close(int, int, void*)>:
c0024d94:	83 ec 0c             	sub    esp,0xc
c0024d97:	e8 2d 11 00 00       	call   c0025ec9 <avxClose>
c0024d9c:	b8 00 00 00 00       	mov    eax,0x0
c0024da1:	83 c4 0c             	add    esp,0xc
c0024da4:	c3                   	ret    
c0024da5:	90                   	nop

c0024da6 <AVX::available()>:
c0024da6:	83 ec 0c             	sub    esp,0xc
c0024da9:	e8 12 11 00 00       	call   c0025ec0 <avxDetect>
c0024dae:	85 c0                	test   eax,eax
c0024db0:	0f 95 c0             	setne  al
c0024db3:	83 c4 0c             	add    esp,0xc
c0024db6:	c3                   	ret    
c0024db7:	90                   	nop

c0024db8 <AVX::save(void*)>:
c0024db8:	83 ec 0c             	sub    esp,0xc
c0024dbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dbf:	83 ec 0c             	sub    esp,0xc
c0024dc2:	50                   	push   eax
c0024dc3:	e8 fe 10 00 00       	call   c0025ec6 <avxSave>
c0024dc8:	83 c4 10             	add    esp,0x10
c0024dcb:	90                   	nop
c0024dcc:	83 c4 0c             	add    esp,0xc
c0024dcf:	c3                   	ret    

c0024dd0 <AVX::load(void*)>:
c0024dd0:	83 ec 0c             	sub    esp,0xc
c0024dd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dd7:	83 ec 0c             	sub    esp,0xc
c0024dda:	50                   	push   eax
c0024ddb:	e8 e7 10 00 00       	call   c0025ec7 <avxLoad>
c0024de0:	83 c4 10             	add    esp,0x10
c0024de3:	90                   	nop
c0024de4:	83 c4 0c             	add    esp,0xc
c0024de7:	c3                   	ret    

c0024de8 <AVX::AVX()>:
c0024de8:	83 ec 0c             	sub    esp,0xc
c0024deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024def:	83 ec 08             	sub    esp,0x8
c0024df2:	68 80 c6 02 c0       	push   0xc002c680
c0024df7:	50                   	push   eax
c0024df8:	e8 35 f6 fe ff       	call   c0014432 <FPU::FPU(char const*)>
c0024dfd:	83 c4 10             	add    esp,0x10
c0024e00:	ba 90 c6 02 c0       	mov    edx,0xc002c690
c0024e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e09:	89 10                	mov    DWORD PTR [eax],edx
c0024e0b:	90                   	nop
c0024e0c:	83 c4 0c             	add    esp,0xc
c0024e0f:	c3                   	ret    

c0024e10 <MMX::available()>:
c0024e10:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0024e15:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024e1b:	83 e0 20             	and    eax,0x20
c0024e1e:	84 c0                	test   al,al
c0024e20:	0f 95 c0             	setne  al
c0024e23:	c3                   	ret    

c0024e24 <MMX::open(int, int, void*)>:
c0024e24:	83 ec 0c             	sub    esp,0xc
c0024e27:	e8 20 11 00 00       	call   c0025f4c <x87Init>
c0024e2c:	b8 00 00 00 00       	mov    eax,0x0
c0024e31:	83 c4 0c             	add    esp,0xc
c0024e34:	c3                   	ret    
c0024e35:	90                   	nop

c0024e36 <MMX::close(int, int, void*)>:
c0024e36:	83 ec 0c             	sub    esp,0xc
c0024e39:	e8 28 11 00 00       	call   c0025f66 <x87Close>
c0024e3e:	b8 00 00 00 00       	mov    eax,0x0
c0024e43:	83 c4 0c             	add    esp,0xc
c0024e46:	c3                   	ret    
c0024e47:	90                   	nop

c0024e48 <MMX::save(void*)>:
c0024e48:	83 ec 0c             	sub    esp,0xc
c0024e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e4f:	83 ec 0c             	sub    esp,0xc
c0024e52:	50                   	push   eax
c0024e53:	e8 e9 10 00 00       	call   c0025f41 <x87Save>
c0024e58:	83 c4 10             	add    esp,0x10
c0024e5b:	90                   	nop
c0024e5c:	83 c4 0c             	add    esp,0xc
c0024e5f:	c3                   	ret    

c0024e60 <MMX::load(void*)>:
c0024e60:	83 ec 0c             	sub    esp,0xc
c0024e63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e67:	83 ec 0c             	sub    esp,0xc
c0024e6a:	50                   	push   eax
c0024e6b:	e8 d7 10 00 00       	call   c0025f47 <x87Load>
c0024e70:	83 c4 10             	add    esp,0x10
c0024e73:	90                   	nop
c0024e74:	83 c4 0c             	add    esp,0xc
c0024e77:	c3                   	ret    

c0024e78 <MMX::MMX()>:
c0024e78:	83 ec 0c             	sub    esp,0xc
c0024e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e7f:	83 ec 08             	sub    esp,0x8
c0024e82:	68 c0 c6 02 c0       	push   0xc002c6c0
c0024e87:	50                   	push   eax
c0024e88:	e8 a5 f5 fe ff       	call   c0014432 <FPU::FPU(char const*)>
c0024e8d:	83 c4 10             	add    esp,0x10
c0024e90:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c0024e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e99:	89 10                	mov    DWORD PTR [eax],edx
c0024e9b:	90                   	nop
c0024e9c:	83 c4 0c             	add    esp,0xc
c0024e9f:	c3                   	ret    

c0024ea0 <SSE::open(int, int, void*)>:
c0024ea0:	83 ec 0c             	sub    esp,0xc
c0024ea3:	e8 5c 10 00 00       	call   c0025f04 <sseInit>
c0024ea8:	b8 00 00 00 00       	mov    eax,0x0
c0024ead:	83 c4 0c             	add    esp,0xc
c0024eb0:	c3                   	ret    
c0024eb1:	90                   	nop

c0024eb2 <SSE::close(int, int, void*)>:
c0024eb2:	83 ec 0c             	sub    esp,0xc
c0024eb5:	e8 5a 10 00 00       	call   c0025f14 <sseClose>
c0024eba:	b8 00 00 00 00       	mov    eax,0x0
c0024ebf:	83 c4 0c             	add    esp,0xc
c0024ec2:	c3                   	ret    
c0024ec3:	90                   	nop

c0024ec4 <SSE::available()>:
c0024ec4:	83 ec 1c             	sub    esp,0x1c
c0024ec7:	e8 14 10 00 00       	call   c0025ee0 <absolutelyNoChanceInHell>
c0024ecc:	85 c0                	test   eax,eax
c0024ece:	0f 95 c0             	setne  al
c0024ed1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ed5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024ed9:	83 c4 1c             	add    esp,0x1c
c0024edc:	c3                   	ret    
c0024edd:	90                   	nop

c0024ede <SSE::save(void*)>:
c0024ede:	83 ec 0c             	sub    esp,0xc
c0024ee1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ee5:	83 ec 0c             	sub    esp,0xc
c0024ee8:	50                   	push   eax
c0024ee9:	e8 0a 10 00 00       	call   c0025ef8 <sseSave>
c0024eee:	83 c4 10             	add    esp,0x10
c0024ef1:	90                   	nop
c0024ef2:	83 c4 0c             	add    esp,0xc
c0024ef5:	c3                   	ret    

c0024ef6 <SSE::load(void*)>:
c0024ef6:	83 ec 0c             	sub    esp,0xc
c0024ef9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024efd:	83 ec 0c             	sub    esp,0xc
c0024f00:	50                   	push   eax
c0024f01:	e8 f8 0f 00 00       	call   c0025efe <sseLoad>
c0024f06:	83 c4 10             	add    esp,0x10
c0024f09:	90                   	nop
c0024f0a:	83 c4 0c             	add    esp,0xc
c0024f0d:	c3                   	ret    

c0024f0e <SSE::SSE()>:
c0024f0e:	83 ec 0c             	sub    esp,0xc
c0024f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f15:	83 ec 08             	sub    esp,0x8
c0024f18:	68 00 c7 02 c0       	push   0xc002c700
c0024f1d:	50                   	push   eax
c0024f1e:	e8 0f f5 fe ff       	call   c0014432 <FPU::FPU(char const*)>
c0024f23:	83 c4 10             	add    esp,0x10
c0024f26:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c0024f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f2f:	89 10                	mov    DWORD PTR [eax],edx
c0024f31:	90                   	nop
c0024f32:	83 c4 0c             	add    esp,0xc
c0024f35:	c3                   	ret    

c0024f36 <x87::open(int, int, void*)>:
c0024f36:	83 ec 0c             	sub    esp,0xc
c0024f39:	e8 0e 10 00 00       	call   c0025f4c <x87Init>
c0024f3e:	b8 00 00 00 00       	mov    eax,0x0
c0024f43:	83 c4 0c             	add    esp,0xc
c0024f46:	c3                   	ret    
c0024f47:	90                   	nop

c0024f48 <x87::close(int, int, void*)>:
c0024f48:	83 ec 0c             	sub    esp,0xc
c0024f4b:	e8 16 10 00 00       	call   c0025f66 <x87Close>
c0024f50:	b8 00 00 00 00       	mov    eax,0x0
c0024f55:	83 c4 0c             	add    esp,0xc
c0024f58:	c3                   	ret    
c0024f59:	90                   	nop

c0024f5a <x87::available()>:
c0024f5a:	83 ec 0c             	sub    esp,0xc
c0024f5d:	e8 c4 0f 00 00       	call   c0025f26 <x87Detect>
c0024f62:	85 c0                	test   eax,eax
c0024f64:	0f 95 c0             	setne  al
c0024f67:	83 c4 0c             	add    esp,0xc
c0024f6a:	c3                   	ret    
c0024f6b:	90                   	nop

c0024f6c <x87::save(void*)>:
c0024f6c:	83 ec 0c             	sub    esp,0xc
c0024f6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f73:	83 ec 0c             	sub    esp,0xc
c0024f76:	50                   	push   eax
c0024f77:	e8 c5 0f 00 00       	call   c0025f41 <x87Save>
c0024f7c:	83 c4 10             	add    esp,0x10
c0024f7f:	90                   	nop
c0024f80:	83 c4 0c             	add    esp,0xc
c0024f83:	c3                   	ret    

c0024f84 <x87::load(void*)>:
c0024f84:	83 ec 0c             	sub    esp,0xc
c0024f87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f8b:	83 ec 0c             	sub    esp,0xc
c0024f8e:	50                   	push   eax
c0024f8f:	e8 b3 0f 00 00       	call   c0025f47 <x87Load>
c0024f94:	83 c4 10             	add    esp,0x10
c0024f97:	90                   	nop
c0024f98:	83 c4 0c             	add    esp,0xc
c0024f9b:	c3                   	ret    

c0024f9c <x87::x87()>:
c0024f9c:	83 ec 0c             	sub    esp,0xc
c0024f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa3:	83 ec 08             	sub    esp,0x8
c0024fa6:	68 40 c7 02 c0       	push   0xc002c740
c0024fab:	50                   	push   eax
c0024fac:	e8 81 f4 fe ff       	call   c0014432 <FPU::FPU(char const*)>
c0024fb1:	83 c4 10             	add    esp,0x10
c0024fb4:	ba 50 c7 02 c0       	mov    edx,0xc002c750
c0024fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fbd:	89 10                	mov    DWORD PTR [eax],edx
c0024fbf:	90                   	nop
c0024fc0:	83 c4 0c             	add    esp,0xc
c0024fc3:	c3                   	ret    

c0024fc4 <APIC::disable()>:
c0024fc4:	90                   	nop
c0024fc5:	c3                   	ret    

c0024fc6 <APIC::close(int, int, void*)>:
c0024fc6:	55                   	push   ebp
c0024fc7:	89 e5                	mov    ebp,esp
c0024fc9:	83 ec 08             	sub    esp,0x8
c0024fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0024fd1:	83 c0 3c             	add    eax,0x3c
c0024fd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0024fd6:	83 ec 0c             	sub    esp,0xc
c0024fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fdc:	ff d0                	call   eax
c0024fde:	83 c4 10             	add    esp,0x10
c0024fe1:	b8 00 00 00 00       	mov    eax,0x0
c0024fe6:	c9                   	leave  
c0024fe7:	c3                   	ret    

c0024fe8 <IOAPIC::close(int, int, void*)>:
c0024fe8:	b8 00 00 00 00       	mov    eax,0x0
c0024fed:	c3                   	ret    

c0024fee <APIC::io_wait()>:
c0024fee:	eb 00                	jmp    c0024ff0 <APIC::io_wait()+0x2>
c0024ff0:	eb 00                	jmp    c0024ff2 <APIC::io_wait()+0x4>
c0024ff2:	90                   	nop
c0024ff3:	c3                   	ret    

c0024ff4 <APIC::getBase()>:
c0024ff4:	55                   	push   ebp
c0024ff5:	89 e5                	mov    ebp,esp
c0024ff7:	83 ec 18             	sub    esp,0x18
c0024ffa:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0024fff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025005:	83 e0 08             	and    eax,0x8
c0025008:	84 c0                	test   al,al
c002500a:	75 07                	jne    c0025013 <APIC::getBase()+0x1f>
c002500c:	b8 00 00 00 00       	mov    eax,0x0
c0025011:	eb 21                	jmp    c0025034 <APIC::getBase()+0x40>
c0025013:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0025018:	83 ec 08             	sub    esp,0x8
c002501b:	6a 1b                	push   0x1b
c002501d:	50                   	push   eax
c002501e:	e8 bf 9d fe ff       	call   c000ede2 <Computer::rdmsr(unsigned int)>
c0025023:	83 c4 10             	add    esp,0x10
c0025026:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025029:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002502c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002502f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025034:	c9                   	leave  
c0025035:	c3                   	ret    

c0025036 <APIC::eoi(unsigned char)>:
c0025036:	55                   	push   ebp
c0025037:	89 e5                	mov    ebp,esp
c0025039:	83 ec 28             	sub    esp,0x28
c002503c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002503f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025042:	83 ec 0c             	sub    esp,0xc
c0025045:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025048:	e8 a7 ff ff ff       	call   c0024ff4 <APIC::getBase()>
c002504d:	83 c4 10             	add    esp,0x10
c0025050:	05 b0 00 00 00       	add    eax,0xb0
c0025055:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025058:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002505b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025061:	90                   	nop
c0025062:	c9                   	leave  
c0025063:	c3                   	ret    

c0025064 <APIC::open(int, int, void*)>:
c0025064:	55                   	push   ebp
c0025065:	89 e5                	mov    ebp,esp
c0025067:	57                   	push   edi
c0025068:	56                   	push   esi
c0025069:	53                   	push   ebx
c002506a:	83 ec 2c             	sub    esp,0x2c
c002506d:	83 ec 0c             	sub    esp,0xc
c0025070:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025073:	e8 7c ff ff ff       	call   c0024ff4 <APIC::getBase()>
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	89 c2                	mov    edx,eax
c002507d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025080:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025086:	0f b6 f8             	movzx  edi,al
c0025089:	89 d0                	mov    eax,edx
c002508b:	ba 00 00 00 00       	mov    edx,0x0
c0025090:	89 c1                	mov    ecx,eax
c0025092:	80 e5 ff             	and    ch,0xff
c0025095:	89 cb                	mov    ebx,ecx
c0025097:	0f b6 f2             	movzx  esi,dl
c002509a:	89 d8                	mov    eax,ebx
c002509c:	89 f2                	mov    edx,esi
c002509e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00250a1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00250a4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00250a8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00250ac:	83 e0 00             	and    eax,0x0
c00250af:	09 d0                	or     eax,edx
c00250b1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00250b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250b8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00250be:	8d 50 01             	lea    edx,[eax+0x1]
c00250c1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00250c4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00250ca:	0f b6 d0             	movzx  edx,al
c00250cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250d0:	83 c2 08             	add    edx,0x8
c00250d3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00250d7:	0f b6 c9             	movzx  ecx,cl
c00250da:	81 c9 00 00 01 00    	or     ecx,0x10000
c00250e0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00250e4:	83 ec 0c             	sub    esp,0xc
c00250e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00250ea:	e8 05 ff ff ff       	call   c0024ff4 <APIC::getBase()>
c00250ef:	83 c4 10             	add    esp,0x10
c00250f2:	05 f0 00 00 00       	add    eax,0xf0
c00250f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00250fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00250fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00250ff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025102:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025109:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025110:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025113:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025116:	89 10                	mov    DWORD PTR [eax],edx
c0025118:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002511f:	a1 90 03 03 c0       	mov    eax,ds:0xc0030390
c0025124:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025127:	7d 7c                	jge    c00251a5 <APIC::open(int, int, void*)+0x141>
c0025129:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002512c:	8b 04 85 a0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc60]
c0025133:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025136:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025139:	8b 04 85 a0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc60]
c0025140:	c1 e8 08             	shr    eax,0x8
c0025143:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025147:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002514a:	8b 04 85 a0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc60]
c0025151:	c1 e8 18             	shr    eax,0x18
c0025154:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025157:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002515b:	75 40                	jne    c002519d <APIC::open(int, int, void*)+0x139>
c002515d:	83 ec 0c             	sub    esp,0xc
c0025160:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025163:	e8 8c fe ff ff       	call   c0024ff4 <APIC::getBase()>
c0025168:	83 c4 10             	add    esp,0x10
c002516b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002516f:	75 07                	jne    c0025178 <APIC::open(int, int, void*)+0x114>
c0025171:	ba 60 03 00 00       	mov    edx,0x360
c0025176:	eb 05                	jmp    c002517d <APIC::open(int, int, void*)+0x119>
c0025178:	ba 50 03 00 00       	mov    edx,0x350
c002517d:	01 d0                	add    eax,edx
c002517f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025182:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025185:	8b 00                	mov    eax,DWORD PTR [eax]
c0025187:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002518a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025191:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025195:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025198:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002519b:	89 10                	mov    DWORD PTR [eax],edx
c002519d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00251a0:	e9 7a ff ff ff       	jmp    c002511f <APIC::open(int, int, void*)+0xbb>
c00251a5:	b8 00 00 00 00       	mov    eax,0x0
c00251aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c00251ad:	5b                   	pop    ebx
c00251ae:	5e                   	pop    esi
c00251af:	5f                   	pop    edi
c00251b0:	5d                   	pop    ebp
c00251b1:	c3                   	ret    

c00251b2 <IOAPIC::IOAPIC()>:
c00251b2:	83 ec 0c             	sub    esp,0xc
c00251b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251b9:	83 ec 08             	sub    esp,0x8
c00251bc:	68 80 c7 02 c0       	push   0xc002c780
c00251c1:	50                   	push   eax
c00251c2:	e8 59 ef fe ff       	call   c0014120 <Device::Device(char const*)>
c00251c7:	83 c4 10             	add    esp,0x10
c00251ca:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c00251cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d3:	89 10                	mov    DWORD PTR [eax],edx
c00251d5:	90                   	nop
c00251d6:	83 c4 0c             	add    esp,0xc
c00251d9:	c3                   	ret    

c00251da <APIC::APIC()>:
c00251da:	53                   	push   ebx
c00251db:	83 ec 18             	sub    esp,0x18
c00251de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251e2:	83 ec 08             	sub    esp,0x8
c00251e5:	68 88 c7 02 c0       	push   0xc002c788
c00251ea:	50                   	push   eax
c00251eb:	e8 9c f6 fe ff       	call   c001488c <InterruptController::InterruptController(char const*)>
c00251f0:	83 c4 10             	add    esp,0x10
c00251f3:	ba 60 c8 02 c0       	mov    edx,0xc002c860
c00251f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251fc:	89 10                	mov    DWORD PTR [eax],edx
c00251fe:	a0 60 1e 03 c0       	mov    al,ds:0xc0031e60
c0025203:	83 f0 01             	xor    eax,0x1
c0025206:	84 c0                	test   al,al
c0025208:	0f 84 a1 00 00 00    	je     c00252af <APIC::APIC()+0xd5>
c002520e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025213:	a0 40 04 03 c0       	mov    al,ds:0xc0030440
c0025218:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002521c:	0f 83 86 00 00 00    	jae    c00252a8 <APIC::APIC()+0xce>
c0025222:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002522a:	83 ec 0c             	sub    esp,0xc
c002522d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025231:	e8 04 a6 fe ff       	call   c000f83a <malloc>
c0025236:	83 c4 10             	add    esp,0x10
c0025239:	89 c3                	mov    ebx,eax
c002523b:	83 ec 0c             	sub    esp,0xc
c002523e:	53                   	push   ebx
c002523f:	e8 6e ff ff ff       	call   c00251b2 <IOAPIC::IOAPIC()>
c0025244:	83 c4 10             	add    esp,0x10
c0025247:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002524b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025254:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c002525b:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c0025260:	40                   	inc    eax
c0025261:	a3 20 1e 03 c0       	mov    ds:0xc0031e20,eax
c0025266:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c002526b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025271:	83 ec 08             	sub    esp,0x8
c0025274:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025278:	50                   	push   eax
c0025279:	e8 b2 ec fe ff       	call   c0013f30 <Device::addChild(Device*)>
c002527e:	83 c4 10             	add    esp,0x10
c0025281:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025285:	8b 00                	mov    eax,DWORD PTR [eax]
c0025287:	83 c0 08             	add    eax,0x8
c002528a:	8b 00                	mov    eax,DWORD PTR [eax]
c002528c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025291:	6a 00                	push   0x0
c0025293:	6a 00                	push   0x0
c0025295:	52                   	push   edx
c0025296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002529a:	ff d0                	call   eax
c002529c:	83 c4 10             	add    esp,0x10
c002529f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00252a3:	e9 6b ff ff ff       	jmp    c0025213 <APIC::APIC()+0x39>
c00252a8:	c6 05 60 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e60,0x1
c00252af:	90                   	nop
c00252b0:	83 c4 18             	add    esp,0x18
c00252b3:	5b                   	pop    ebx
c00252b4:	c3                   	ret    
c00252b5:	90                   	nop

c00252b6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00252b6:	55                   	push   ebp
c00252b7:	89 e5                	mov    ebp,esp
c00252b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00252c2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00252c5:	72 1d                	jb     c00252e4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00252c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252ca:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00252d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252d3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00252d9:	01 d0                	add    eax,edx
c00252db:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00252de:	73 04                	jae    c00252e4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00252e0:	b0 01                	mov    al,0x1
c00252e2:	eb 02                	jmp    c00252e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00252e4:	b0 00                	mov    al,0x0
c00252e6:	5d                   	pop    ebp
c00252e7:	c3                   	ret    

c00252e8 <IOAPIC::read(int)>:
c00252e8:	55                   	push   ebp
c00252e9:	89 e5                	mov    ebp,esp
c00252eb:	83 ec 10             	sub    esp,0x10
c00252ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00252f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00252fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252fd:	0f b6 d0             	movzx  edx,al
c0025300:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025303:	89 10                	mov    DWORD PTR [eax],edx
c0025305:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025308:	83 c0 10             	add    eax,0x10
c002530b:	8b 00                	mov    eax,DWORD PTR [eax]
c002530d:	c9                   	leave  
c002530e:	c3                   	ret    
c002530f:	90                   	nop

c0025310 <IOAPIC::open(int, int, void*)>:
c0025310:	55                   	push   ebp
c0025311:	89 e5                	mov    ebp,esp
c0025313:	57                   	push   edi
c0025314:	56                   	push   esi
c0025315:	53                   	push   ebx
c0025316:	83 ec 0c             	sub    esp,0xc
c0025319:	83 ec 0c             	sub    esp,0xc
c002531c:	68 b3 c7 02 c0       	push   0xc002c7b3
c0025321:	e8 e3 d7 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0025326:	83 c4 10             	add    esp,0x10
c0025329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002532c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002532f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025338:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002533e:	8b 14 85 80 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb80]
c0025345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025348:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002534e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025351:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025357:	8b 14 85 00 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb00]
c002535e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025361:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002536a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025373:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025379:	0f b6 f8             	movzx  edi,al
c002537c:	89 d0                	mov    eax,edx
c002537e:	ba 00 00 00 00       	mov    edx,0x0
c0025383:	89 c1                	mov    ecx,eax
c0025385:	80 e5 ff             	and    ch,0xff
c0025388:	89 cb                	mov    ebx,ecx
c002538a:	0f b6 f2             	movzx  esi,dl
c002538d:	89 d8                	mov    eax,ebx
c002538f:	89 f2                	mov    edx,esi
c0025391:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025394:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025397:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002539b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002539f:	83 e0 00             	and    eax,0x0
c00253a2:	09 d0                	or     eax,edx
c00253a4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00253a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253b1:	8d 50 01             	lea    edx,[eax+0x1]
c00253b4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253b7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00253bd:	0f b6 d0             	movzx  edx,al
c00253c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253c3:	83 c2 08             	add    edx,0x8
c00253c6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00253ca:	0f b6 c9             	movzx  ecx,cl
c00253cd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00253d3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00253d7:	83 ec 08             	sub    esp,0x8
c00253da:	6a 01                	push   0x1
c00253dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253df:	e8 04 ff ff ff       	call   c00252e8 <IOAPIC::read(int)>
c00253e4:	83 c4 10             	add    esp,0x10
c00253e7:	c1 f8 10             	sar    eax,0x10
c00253ea:	0f b6 c0             	movzx  eax,al
c00253ed:	8d 50 01             	lea    edx,[eax+0x1]
c00253f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253f3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00253f9:	b8 00 00 00 00       	mov    eax,0x0
c00253fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025401:	5b                   	pop    ebx
c0025402:	5e                   	pop    esi
c0025403:	5f                   	pop    edi
c0025404:	5d                   	pop    ebp
c0025405:	c3                   	ret    

c0025406 <IOAPIC::write(int, int)>:
c0025406:	55                   	push   ebp
c0025407:	89 e5                	mov    ebp,esp
c0025409:	83 ec 10             	sub    esp,0x10
c002540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002540f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025415:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025418:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002541b:	0f b6 d0             	movzx  edx,al
c002541e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025421:	89 10                	mov    DWORD PTR [eax],edx
c0025423:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025426:	8d 50 10             	lea    edx,[eax+0x10]
c0025429:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002542c:	89 02                	mov    DWORD PTR [edx],eax
c002542e:	90                   	nop
c002542f:	c9                   	leave  
c0025430:	c3                   	ret    
c0025431:	90                   	nop

c0025432 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025432:	55                   	push   ebp
c0025433:	89 e5                	mov    ebp,esp
c0025435:	53                   	push   ebx
c0025436:	83 ec 2c             	sub    esp,0x2c
c0025439:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002543c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002543f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025442:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025445:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025448:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002544b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002544e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025451:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025454:	88 d8                	mov    al,bl
c0025456:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025459:	88 c8                	mov    al,cl
c002545b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002545e:	88 d0                	mov    al,dl
c0025460:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025463:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025467:	83 c0 08             	add    eax,0x8
c002546a:	01 c0                	add    eax,eax
c002546c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002546f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025473:	83 c0 08             	add    eax,0x8
c0025476:	01 c0                	add    eax,eax
c0025478:	40                   	inc    eax
c0025479:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002547c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002547f:	50                   	push   eax
c0025480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025483:	e8 60 fe ff ff       	call   c00252e8 <IOAPIC::read(int)>
c0025488:	83 c4 08             	add    esp,0x8
c002548b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002548e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025495:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025498:	c1 e0 18             	shl    eax,0x18
c002549b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002549e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00254a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00254a4:	52                   	push   edx
c00254a5:	50                   	push   eax
c00254a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254a9:	e8 58 ff ff ff       	call   c0025406 <IOAPIC::write(int, int)>
c00254ae:	83 c4 0c             	add    esp,0xc
c00254b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254b4:	50                   	push   eax
c00254b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254b8:	e8 2b fe ff ff       	call   c00252e8 <IOAPIC::read(int)>
c00254bd:	83 c4 08             	add    esp,0x8
c00254c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00254c3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00254ca:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00254d1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00254d8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00254dc:	74 09                	je     c00254e7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00254de:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00254e5:	eb 07                	jmp    c00254ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00254e7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00254ee:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00254f2:	74 09                	je     c00254fd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00254f4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00254fb:	eb 07                	jmp    c0025504 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00254fd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025504:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002550b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002550f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025512:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025515:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025518:	52                   	push   edx
c0025519:	50                   	push   eax
c002551a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002551d:	e8 e4 fe ff ff       	call   c0025406 <IOAPIC::write(int, int)>
c0025522:	83 c4 0c             	add    esp,0xc
c0025525:	90                   	nop
c0025526:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025529:	c9                   	leave  
c002552a:	c3                   	ret    
c002552b:	90                   	nop

c002552c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002552c:	55                   	push   ebp
c002552d:	89 e5                	mov    ebp,esp
c002552f:	57                   	push   edi
c0025530:	56                   	push   esi
c0025531:	53                   	push   ebx
c0025532:	83 ec 2c             	sub    esp,0x2c
c0025535:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025538:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002553b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002553f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025543:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025547:	74 5a                	je     c00255a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025549:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002554d:	7f 44                	jg     c0025593 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002554f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025552:	05 00 cd 02 c0       	add    eax,0xc002cd00
c0025557:	8a 00                	mov    al,BYTE PTR [eax]
c0025559:	0f b6 c0             	movzx  eax,al
c002555c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002555f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025562:	66 8b 84 00 20 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfbe0]
c002556a:	0f b7 c0             	movzx  eax,ax
c002556d:	83 e0 02             	and    eax,0x2
c0025570:	85 c0                	test   eax,eax
c0025572:	74 04                	je     c0025578 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025574:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025578:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002557b:	66 8b 84 00 20 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfbe0]
c0025583:	0f b7 c0             	movzx  eax,ax
c0025586:	83 e0 08             	and    eax,0x8
c0025589:	85 c0                	test   eax,eax
c002558b:	74 16                	je     c00255a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002558d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025591:	eb 10                	jmp    c00255a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025593:	83 ec 0c             	sub    esp,0xc
c0025596:	68 c4 c7 02 c0       	push   0xc002c7c4
c002559b:	e8 4d 4a ff ff       	call   c0019fed <Krnl::panic(char const*)>
c00255a0:	83 c4 10             	add    esp,0x10
c00255a3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00255a7:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c00255ac:	83 ec 08             	sub    esp,0x8
c00255af:	50                   	push   eax
c00255b0:	68 fc c7 02 c0       	push   0xc002c7fc
c00255b5:	e8 4f d5 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00255ba:	83 c4 10             	add    esp,0x10
c00255bd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00255c4:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c00255c9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00255cc:	7d 67                	jge    c0025635 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00255ce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255d1:	8b 04 85 40 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce1c0]
c00255d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00255db:	83 ec 08             	sub    esp,0x8
c00255de:	52                   	push   edx
c00255df:	50                   	push   eax
c00255e0:	e8 d1 fc ff ff       	call   c00252b6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00255e5:	83 c4 10             	add    esp,0x10
c00255e8:	84 c0                	test   al,al
c00255ea:	74 44                	je     c0025630 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00255ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255ef:	8b 1c 85 40 1e 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce1c0]
c00255f6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00255fa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00255fd:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025601:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025604:	83 c0 20             	add    eax,0x20
c0025607:	0f b6 f0             	movzx  esi,al
c002560a:	b8 00 00 00 00       	mov    eax,0x0
c002560f:	99                   	cdq    
c0025610:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025613:	0f b6 c9             	movzx  ecx,cl
c0025616:	83 ec 04             	sub    esp,0x4
c0025619:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002561c:	57                   	push   edi
c002561d:	56                   	push   esi
c002561e:	52                   	push   edx
c002561f:	50                   	push   eax
c0025620:	51                   	push   ecx
c0025621:	53                   	push   ebx
c0025622:	e8 0b fe ff ff       	call   c0025432 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025627:	83 c4 20             	add    esp,0x20
c002562a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002562e:	eb 05                	jmp    c0025635 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025630:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025633:	eb 8f                	jmp    c00255c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025635:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025638:	83 f0 01             	xor    eax,0x1
c002563b:	84 c0                	test   al,al
c002563d:	74 10                	je     c002564f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002563f:	83 ec 0c             	sub    esp,0xc
c0025642:	68 13 c8 02 c0       	push   0xc002c813
c0025647:	e8 a1 49 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c002564c:	83 c4 10             	add    esp,0x10
c002564f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025653:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002565a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002565e:	7f 65                	jg     c00256c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025663:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025666:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002566d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025670:	01 ca                	add    edx,ecx
c0025672:	83 c2 54             	add    edx,0x54
c0025675:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025679:	85 c0                	test   eax,eax
c002567b:	75 43                	jne    c00256c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025680:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025683:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002568a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002568d:	01 ca                	add    edx,ecx
c002568f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025692:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025695:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002569c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002569f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00256a6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256a9:	01 ca                	add    edx,ecx
c00256ab:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00256b1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00256b4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00256b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256bb:	83 e8 20             	sub    eax,0x20
c00256be:	eb 1a                	jmp    c00256da <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00256c0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00256c3:	eb 95                	jmp    c002565a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00256c5:	83 ec 0c             	sub    esp,0xc
c00256c8:	68 20 c8 02 c0       	push   0xc002c820
c00256cd:	e8 1b 49 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c00256d2:	83 c4 10             	add    esp,0x10
c00256d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00256da:	8d 65 f4             	lea    esp,[ebp-0xc]
c00256dd:	5b                   	pop    ebx
c00256de:	5e                   	pop    esi
c00256df:	5f                   	pop    edi
c00256e0:	5d                   	pop    ebp
c00256e1:	c3                   	ret    

c00256e2 <PIC::disable()>:
c00256e2:	55                   	push   ebp
c00256e3:	89 e5                	mov    ebp,esp
c00256e5:	83 ec 10             	sub    esp,0x10
c00256e8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00256ee:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00256f2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00256f5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00256f9:	ee                   	out    dx,al
c00256fa:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025700:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025704:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025707:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002570b:	ee                   	out    dx,al
c002570c:	90                   	nop
c002570d:	c9                   	leave  
c002570e:	c3                   	ret    
c002570f:	90                   	nop

c0025710 <PIC::close(int, int, void*)>:
c0025710:	55                   	push   ebp
c0025711:	89 e5                	mov    ebp,esp
c0025713:	83 ec 08             	sub    esp,0x8
c0025716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025719:	8b 00                	mov    eax,DWORD PTR [eax]
c002571b:	83 c0 3c             	add    eax,0x3c
c002571e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025726:	ff d0                	call   eax
c0025728:	83 c4 10             	add    esp,0x10
c002572b:	b8 00 00 00 00       	mov    eax,0x0
c0025730:	c9                   	leave  
c0025731:	c3                   	ret    

c0025732 <PIC::PIC()>:
c0025732:	83 ec 0c             	sub    esp,0xc
c0025735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025739:	83 ec 08             	sub    esp,0x8
c002573c:	68 cc c8 02 c0       	push   0xc002c8cc
c0025741:	50                   	push   eax
c0025742:	e8 45 f1 fe ff       	call   c001488c <InterruptController::InterruptController(char const*)>
c0025747:	83 c4 10             	add    esp,0x10
c002574a:	ba f8 c8 02 c0       	mov    edx,0xc002c8f8
c002574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025753:	89 10                	mov    DWORD PTR [eax],edx
c0025755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025759:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002575f:	0f b6 d0             	movzx  edx,al
c0025762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025766:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002576d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025771:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025777:	0f b6 d0             	movzx  edx,al
c002577a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002577e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025787:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002578d:	8d 50 01             	lea    edx,[eax+0x1]
c0025790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025794:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002579a:	0f b6 d0             	movzx  edx,al
c002579d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00257a5:	83 e1 3f             	and    ecx,0x3f
c00257a8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00257ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257b6:	0f b6 d0             	movzx  edx,al
c00257b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257bd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00257c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257ce:	0f b6 d0             	movzx  edx,al
c00257d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00257da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257e4:	8d 50 01             	lea    edx,[eax+0x1]
c00257e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00257eb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00257f1:	0f b6 d0             	movzx  edx,al
c00257f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00257fc:	83 e1 3f             	and    ecx,0x3f
c00257ff:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025803:	90                   	nop
c0025804:	83 c4 0c             	add    esp,0xc
c0025807:	c3                   	ret    

c0025808 <PIC::ioWait()>:
c0025808:	eb 00                	jmp    c002580a <PIC::ioWait()+0x2>
c002580a:	eb 00                	jmp    c002580c <PIC::ioWait()+0x4>
c002580c:	90                   	nop
c002580d:	c3                   	ret    

c002580e <PIC::getIRQReg(int)>:
c002580e:	55                   	push   ebp
c002580f:	89 e5                	mov    ebp,esp
c0025811:	83 ec 10             	sub    esp,0x10
c0025814:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025817:	0f b6 c0             	movzx  eax,al
c002581a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025820:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025823:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025826:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002582a:	ee                   	out    dx,al
c002582b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002582e:	0f b6 c0             	movzx  eax,al
c0025831:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025837:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002583a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002583d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025841:	ee                   	out    dx,al
c0025842:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025848:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002584c:	89 c2                	mov    edx,eax
c002584e:	ec                   	in     al,dx
c002584f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025852:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025855:	0f b6 c0             	movzx  eax,al
c0025858:	c1 e0 08             	shl    eax,0x8
c002585b:	89 c1                	mov    ecx,eax
c002585d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025863:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025867:	89 c2                	mov    edx,eax
c0025869:	ec                   	in     al,dx
c002586a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002586d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025870:	0f b6 c0             	movzx  eax,al
c0025873:	09 c8                	or     eax,ecx
c0025875:	c9                   	leave  
c0025876:	c3                   	ret    
c0025877:	90                   	nop

c0025878 <PIC::eoi(unsigned char)>:
c0025878:	55                   	push   ebp
c0025879:	89 e5                	mov    ebp,esp
c002587b:	83 ec 14             	sub    esp,0x14
c002587e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025881:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025884:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025888:	75 1e                	jne    c00258a8 <PIC::eoi(unsigned char)+0x30>
c002588a:	6a 0b                	push   0xb
c002588c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002588f:	e8 7a ff ff ff       	call   c002580e <PIC::getIRQReg(int)>
c0025894:	83 c4 08             	add    esp,0x8
c0025897:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002589b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002589f:	25 80 00 00 00       	and    eax,0x80
c00258a4:	85 c0                	test   eax,eax
c00258a6:	74 5f                	je     c0025907 <PIC::eoi(unsigned char)+0x8f>
c00258a8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00258ac:	75 2d                	jne    c00258db <PIC::eoi(unsigned char)+0x63>
c00258ae:	6a 0b                	push   0xb
c00258b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b3:	e8 56 ff ff ff       	call   c002580e <PIC::getIRQReg(int)>
c00258b8:	83 c4 08             	add    esp,0x8
c00258bb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00258bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258c2:	66 85 c0             	test   ax,ax
c00258c5:	78 14                	js     c00258db <PIC::eoi(unsigned char)+0x63>
c00258c7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00258cd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00258d1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00258d4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00258d8:	ee                   	out    dx,al
c00258d9:	eb 2d                	jmp    c0025908 <PIC::eoi(unsigned char)+0x90>
c00258db:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00258df:	76 12                	jbe    c00258f3 <PIC::eoi(unsigned char)+0x7b>
c00258e1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00258e7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00258eb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00258ee:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00258f2:	ee                   	out    dx,al
c00258f3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00258f9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00258fd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025900:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025904:	ee                   	out    dx,al
c0025905:	eb 01                	jmp    c0025908 <PIC::eoi(unsigned char)+0x90>
c0025907:	90                   	nop
c0025908:	c9                   	leave  
c0025909:	c3                   	ret    

c002590a <PIC::remap()>:
c002590a:	55                   	push   ebp
c002590b:	89 e5                	mov    ebp,esp
c002590d:	83 ec 48             	sub    esp,0x48
c0025910:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025917:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002591e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025924:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025927:	89 c2                	mov    edx,eax
c0025929:	ec                   	in     al,dx
c002592a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002592d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025930:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025933:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025939:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002593c:	89 c2                	mov    edx,eax
c002593e:	ec                   	in     al,dx
c002593f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025942:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025945:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025948:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002594e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025952:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025955:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025958:	ee                   	out    dx,al
c0025959:	83 ec 0c             	sub    esp,0xc
c002595c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002595f:	e8 a4 fe ff ff       	call   c0025808 <PIC::ioWait()>
c0025964:	83 c4 10             	add    esp,0x10
c0025967:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002596d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025971:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025974:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025977:	ee                   	out    dx,al
c0025978:	83 ec 0c             	sub    esp,0xc
c002597b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002597e:	e8 85 fe ff ff       	call   c0025808 <PIC::ioWait()>
c0025983:	83 c4 10             	add    esp,0x10
c0025986:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025989:	0f b6 c0             	movzx  eax,al
c002598c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025992:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025995:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025998:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002599b:	ee                   	out    dx,al
c002599c:	83 ec 0c             	sub    esp,0xc
c002599f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259a2:	e8 61 fe ff ff       	call   c0025808 <PIC::ioWait()>
c00259a7:	83 c4 10             	add    esp,0x10
c00259aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259ad:	0f b6 c0             	movzx  eax,al
c00259b0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00259b6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00259b9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00259bc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00259bf:	ee                   	out    dx,al
c00259c0:	83 ec 0c             	sub    esp,0xc
c00259c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259c6:	e8 3d fe ff ff       	call   c0025808 <PIC::ioWait()>
c00259cb:	83 c4 10             	add    esp,0x10
c00259ce:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00259d4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00259d8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00259db:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00259de:	ee                   	out    dx,al
c00259df:	83 ec 0c             	sub    esp,0xc
c00259e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259e5:	e8 1e fe ff ff       	call   c0025808 <PIC::ioWait()>
c00259ea:	83 c4 10             	add    esp,0x10
c00259ed:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00259f3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00259f7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00259fa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00259fd:	ee                   	out    dx,al
c00259fe:	83 ec 0c             	sub    esp,0xc
c0025a01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a04:	e8 ff fd ff ff       	call   c0025808 <PIC::ioWait()>
c0025a09:	83 c4 10             	add    esp,0x10
c0025a0c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025a12:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025a16:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025a19:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025a1c:	ee                   	out    dx,al
c0025a1d:	83 ec 0c             	sub    esp,0xc
c0025a20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a23:	e8 e0 fd ff ff       	call   c0025808 <PIC::ioWait()>
c0025a28:	83 c4 10             	add    esp,0x10
c0025a2b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025a31:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025a35:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025a38:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025a3b:	ee                   	out    dx,al
c0025a3c:	83 ec 0c             	sub    esp,0xc
c0025a3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a42:	e8 c1 fd ff ff       	call   c0025808 <PIC::ioWait()>
c0025a47:	83 c4 10             	add    esp,0x10
c0025a4a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025a4e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025a54:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025a57:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025a5a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025a5d:	ee                   	out    dx,al
c0025a5e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025a62:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025a68:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025a6b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025a6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025a71:	ee                   	out    dx,al
c0025a72:	90                   	nop
c0025a73:	c9                   	leave  
c0025a74:	c3                   	ret    
c0025a75:	90                   	nop

c0025a76 <PIC::open(int, int, void*)>:
c0025a76:	55                   	push   ebp
c0025a77:	89 e5                	mov    ebp,esp
c0025a79:	83 ec 18             	sub    esp,0x18
c0025a7c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025a82:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025a86:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025a89:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025a8d:	ee                   	out    dx,al
c0025a8e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025a94:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025a98:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025a9b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025a9f:	ee                   	out    dx,al
c0025aa0:	83 ec 0c             	sub    esp,0xc
c0025aa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aa6:	e8 5f fe ff ff       	call   c002590a <PIC::remap()>
c0025aab:	83 c4 10             	add    esp,0x10
c0025aae:	b8 00 00 00 00       	mov    eax,0x0
c0025ab3:	c9                   	leave  
c0025ab4:	c3                   	ret    
c0025ab5:	90                   	nop

c0025ab6 <APICTimer::close(int, int, void*)>:
c0025ab6:	b8 00 00 00 00       	mov    eax,0x0
c0025abb:	c3                   	ret    

c0025abc <apicTimerHandler(regs*, void*)>:
c0025abc:	83 ec 0c             	sub    esp,0xc
c0025abf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ac3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ac5:	99                   	cdq    
c0025ac6:	52                   	push   edx
c0025ac7:	50                   	push   eax
c0025ac8:	6a 00                	push   0x0
c0025aca:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025acf:	e8 88 07 00 00       	call   c002625c <__udivdi3>
c0025ad4:	83 c4 10             	add    esp,0x10
c0025ad7:	83 ec 08             	sub    esp,0x8
c0025ada:	52                   	push   edx
c0025adb:	50                   	push   eax
c0025adc:	e8 a2 0d ff ff       	call   c0016883 <timerHandler(unsigned long long)>
c0025ae1:	83 c4 10             	add    esp,0x10
c0025ae4:	90                   	nop
c0025ae5:	83 c4 0c             	add    esp,0xc
c0025ae8:	c3                   	ret    
c0025ae9:	90                   	nop

c0025aea <APICTimer::write(int)>:
c0025aea:	53                   	push   ebx
c0025aeb:	83 ec 28             	sub    esp,0x28
c0025aee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025af2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025af6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025afc:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0025b01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b07:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025b0d:	83 ec 0c             	sub    esp,0xc
c0025b10:	50                   	push   eax
c0025b11:	e8 de f4 ff ff       	call   c0024ff4 <APIC::getBase()>
c0025b16:	83 c4 10             	add    esp,0x10
c0025b19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025b1d:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0025b22:	8b 15 34 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e134
c0025b28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025b2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b34:	05 e0 03 00 00       	add    eax,0x3e0
c0025b39:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025b3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b43:	05 80 03 00 00       	add    eax,0x380
c0025b48:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025b4e:	fb                   	sti    
c0025b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025b57:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025b5c:	83 d2 00             	adc    edx,0x0
c0025b5f:	89 c1                	mov    ecx,eax
c0025b61:	89 d3                	mov    ebx,edx
c0025b63:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0025b68:	8b 15 34 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e134
c0025b6e:	39 c8                	cmp    eax,ecx
c0025b70:	89 d0                	mov    eax,edx
c0025b72:	19 d8                	sbb    eax,ebx
c0025b74:	73 02                	jae    c0025b78 <APICTimer::write(int)+0x8e>
c0025b76:	eb d7                	jmp    c0025b4f <APICTimer::write(int)+0x65>
c0025b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b7c:	05 20 03 00 00       	add    eax,0x320
c0025b81:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025b87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b8b:	05 90 03 00 00       	add    eax,0x390
c0025b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b92:	f7 d0                	not    eax
c0025b94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025b98:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025ba0:	ba 00 00 00 00       	mov    edx,0x0
c0025ba5:	f7 f3                	div    ebx
c0025ba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025bab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025baf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bb5:	0d 00 00 02 00       	or     eax,0x20000
c0025bba:	89 c2                	mov    edx,eax
c0025bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bc0:	05 20 03 00 00       	add    eax,0x320
c0025bc5:	89 10                	mov    DWORD PTR [eax],edx
c0025bc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bcb:	05 e0 03 00 00       	add    eax,0x3e0
c0025bd0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025bd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bda:	05 80 03 00 00       	add    eax,0x380
c0025bdf:	89 c2                	mov    edx,eax
c0025be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025be5:	89 02                	mov    DWORD PTR [edx],eax
c0025be7:	90                   	nop
c0025be8:	83 c4 28             	add    esp,0x28
c0025beb:	5b                   	pop    ebx
c0025bec:	c3                   	ret    
c0025bed:	90                   	nop

c0025bee <APICTimer::open(int, int, void*)>:
c0025bee:	57                   	push   edi
c0025bef:	56                   	push   esi
c0025bf0:	53                   	push   ebx
c0025bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bf7:	83 c0 24             	add    eax,0x24
c0025bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bfc:	83 ec 08             	sub    esp,0x8
c0025bff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c07:	ff d0                	call   eax
c0025c09:	83 c4 10             	add    esp,0x10
c0025c0c:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0025c11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025c17:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025c1d:	83 ec 0c             	sub    esp,0xc
c0025c20:	50                   	push   eax
c0025c21:	e8 ce f3 ff ff       	call   c0024ff4 <APIC::getBase()>
c0025c26:	83 c4 10             	add    esp,0x10
c0025c29:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c33:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c39:	0f b6 f8             	movzx  edi,al
c0025c3c:	89 d0                	mov    eax,edx
c0025c3e:	ba 00 00 00 00       	mov    edx,0x0
c0025c43:	89 c1                	mov    ecx,eax
c0025c45:	80 e5 ff             	and    ch,0xff
c0025c48:	89 cb                	mov    ebx,ecx
c0025c4a:	0f b6 f2             	movzx  esi,dl
c0025c4d:	89 d8                	mov    eax,ebx
c0025c4f:	89 f2                	mov    edx,esi
c0025c51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c55:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025c58:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025c5c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025c60:	83 e0 00             	and    eax,0x0
c0025c63:	09 d0                	or     eax,edx
c0025c65:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c73:	8d 50 01             	lea    edx,[eax+0x1]
c0025c76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c7a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c80:	0f b6 d0             	movzx  edx,al
c0025c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c87:	83 c2 08             	add    edx,0x8
c0025c8a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c8e:	0f b6 c9             	movzx  ecx,cl
c0025c91:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025c97:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025ca3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025cb1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025cb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025cbb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025cc1:	83 ec 0c             	sub    esp,0xc
c0025cc4:	51                   	push   ecx
c0025cc5:	6a 01                	push   0x1
c0025cc7:	68 bc 5a 02 c0       	push   0xc0025abc
c0025ccc:	52                   	push   edx
c0025ccd:	50                   	push   eax
c0025cce:	e8 e1 e1 fe ff       	call   c0013eb4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025cd3:	83 c4 20             	add    esp,0x20
c0025cd6:	89 c2                	mov    edx,eax
c0025cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cdc:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025ce2:	b8 00 00 00 00       	mov    eax,0x0
c0025ce7:	5b                   	pop    ebx
c0025ce8:	5e                   	pop    esi
c0025ce9:	5f                   	pop    edi
c0025cea:	c3                   	ret    
c0025ceb:	90                   	nop

c0025cec <APICTimer::APICTimer()>:
c0025cec:	83 ec 0c             	sub    esp,0xc
c0025cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf3:	83 ec 08             	sub    esp,0x8
c0025cf6:	68 38 c9 02 c0       	push   0xc002c938
c0025cfb:	50                   	push   eax
c0025cfc:	e8 f3 0a ff ff       	call   c00167f4 <Timer::Timer(char const*)>
c0025d01:	83 c4 10             	add    esp,0x10
c0025d04:	ba 4c c9 02 c0       	mov    edx,0xc002c94c
c0025d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d0d:	89 10                	mov    DWORD PTR [eax],edx
c0025d0f:	90                   	nop
c0025d10:	83 c4 0c             	add    esp,0xc
c0025d13:	c3                   	ret    

c0025d14 <PIT::write(int)>:
c0025d14:	83 ec 10             	sub    esp,0x10
c0025d17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025d1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025d25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025d29:	a3 64 1e 03 c0       	mov    ds:0xc0031e64,eax
c0025d2e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025d33:	99                   	cdq    
c0025d34:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025d38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025d3c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025d43:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025d48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025d4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025d51:	ee                   	out    dx,al
c0025d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025d56:	0f b6 c0             	movzx  eax,al
c0025d59:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025d60:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025d64:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025d68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025d6d:	ee                   	out    dx,al
c0025d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025d72:	c1 f8 08             	sar    eax,0x8
c0025d75:	0f b6 c0             	movzx  eax,al
c0025d78:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025d7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025d83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025d87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025d8c:	ee                   	out    dx,al
c0025d8d:	90                   	nop
c0025d8e:	83 c4 10             	add    esp,0x10
c0025d91:	c3                   	ret    

c0025d92 <pitHandler(regs*, void*)>:
c0025d92:	83 ec 0c             	sub    esp,0xc
c0025d95:	a1 64 1e 03 c0       	mov    eax,ds:0xc0031e64
c0025d9a:	99                   	cdq    
c0025d9b:	52                   	push   edx
c0025d9c:	50                   	push   eax
c0025d9d:	6a 00                	push   0x0
c0025d9f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025da4:	e8 b3 04 00 00       	call   c002625c <__udivdi3>
c0025da9:	83 c4 10             	add    esp,0x10
c0025dac:	83 ec 08             	sub    esp,0x8
c0025daf:	52                   	push   edx
c0025db0:	50                   	push   eax
c0025db1:	e8 cd 0a ff ff       	call   c0016883 <timerHandler(unsigned long long)>
c0025db6:	83 c4 10             	add    esp,0x10
c0025db9:	90                   	nop
c0025dba:	83 c4 0c             	add    esp,0xc
c0025dbd:	c3                   	ret    

c0025dbe <PIT::open(int, int, void*)>:
c0025dbe:	83 ec 0c             	sub    esp,0xc
c0025dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dc7:	83 c0 24             	add    eax,0x24
c0025dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dcc:	83 ec 08             	sub    esp,0x8
c0025dcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025dd7:	ff d0                	call   eax
c0025dd9:	83 c4 10             	add    esp,0x10
c0025ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de0:	83 ec 0c             	sub    esp,0xc
c0025de3:	6a 00                	push   0x0
c0025de5:	6a 01                	push   0x1
c0025de7:	68 92 5d 02 c0       	push   0xc0025d92
c0025dec:	6a 00                	push   0x0
c0025dee:	50                   	push   eax
c0025def:	e8 c0 e0 fe ff       	call   c0013eb4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025df4:	83 c4 20             	add    esp,0x20
c0025df7:	89 c2                	mov    edx,eax
c0025df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dfd:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025e03:	b8 00 00 00 00       	mov    eax,0x0
c0025e08:	83 c4 0c             	add    esp,0xc
c0025e0b:	c3                   	ret    

c0025e0c <PIT::close(int, int, void*)>:
c0025e0c:	83 ec 0c             	sub    esp,0xc
c0025e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e13:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e21:	6a 01                	push   0x1
c0025e23:	68 92 5d 02 c0       	push   0xc0025d92
c0025e28:	6a 00                	push   0x0
c0025e2a:	50                   	push   eax
c0025e2b:	e8 c2 e0 fe ff       	call   c0013ef2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025e30:	83 c4 10             	add    esp,0x10
c0025e33:	b8 00 00 00 00       	mov    eax,0x0
c0025e38:	83 c4 0c             	add    esp,0xc
c0025e3b:	c3                   	ret    

c0025e3c <PIT::PIT()>:
c0025e3c:	83 ec 0c             	sub    esp,0xc
c0025e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e43:	83 ec 08             	sub    esp,0x8
c0025e46:	68 74 c9 02 c0       	push   0xc002c974
c0025e4b:	50                   	push   eax
c0025e4c:	e8 a3 09 ff ff       	call   c00167f4 <Timer::Timer(char const*)>
c0025e51:	83 c4 10             	add    esp,0x10
c0025e54:	ba 9c c9 02 c0       	mov    edx,0xc002c99c
c0025e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5d:	89 10                	mov    DWORD PTR [eax],edx
c0025e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e69:	0f b6 d0             	movzx  edx,al
c0025e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e70:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e81:	0f b6 d0             	movzx  edx,al
c0025e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e88:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e97:	8d 50 01             	lea    edx,[eax+0x1]
c0025e9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e9e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ea4:	0f b6 d0             	movzx  edx,al
c0025ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025eaf:	83 e1 3f             	and    ecx,0x3f
c0025eb2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025eb6:	90                   	nop
c0025eb7:	83 c4 0c             	add    esp,0xc
c0025eba:	c3                   	ret    
c0025ebb:	66 90                	xchg   ax,ax
c0025ebd:	66 90                	xchg   ax,ax
c0025ebf:	90                   	nop

c0025ec0 <avxDetect>:
c0025ec0:	b8 00 00 00 00       	mov    eax,0x0
c0025ec5:	c3                   	ret    

c0025ec6 <avxSave>:
c0025ec6:	c3                   	ret    

c0025ec7 <avxLoad>:
c0025ec7:	c3                   	ret    

c0025ec8 <avxInit>:
c0025ec8:	c3                   	ret    

c0025ec9 <avxClose>:
c0025ec9:	c3                   	ret    

c0025eca <wouldSheSayYes>:
c0025eca:	c3                   	ret    
c0025ecb:	49                   	dec    ecx
c0025ecc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025ed0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025ed4:	75 20                	jne    c0025ef6 <sseDetect.noSSE+0x1>
c0025ed6:	4e                   	dec    esi
c0025ed7:	79 61                	jns    c0025f3a <x87Detect+0x14>
c0025ed9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025ede:	66 90                	xchg   ax,ax

c0025ee0 <absolutelyNoChanceInHell>:
c0025ee0:	b8 01 00 00 00       	mov    eax,0x1
c0025ee5:	0f a2                	cpuid  
c0025ee7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025eed:	74 06                	je     c0025ef5 <sseDetect.noSSE>
c0025eef:	b8 01 00 00 00       	mov    eax,0x1
c0025ef4:	c3                   	ret    

c0025ef5 <sseDetect.noSSE>:
c0025ef5:	31 c0                	xor    eax,eax
c0025ef7:	c3                   	ret    

c0025ef8 <sseSave>:
c0025ef8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025efd:	c3                   	ret    

c0025efe <sseLoad>:
c0025efe:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025f03:	c3                   	ret    

c0025f04 <sseInit>:
c0025f04:	e8 43 00 00 00       	call   c0025f4c <x87Init>
c0025f09:	0f 20 e0             	mov    eax,cr4
c0025f0c:	66 0d 00 06          	or     ax,0x600
c0025f10:	0f 22 e0             	mov    cr4,eax
c0025f13:	c3                   	ret    

c0025f14 <sseClose>:
c0025f14:	c3                   	ret    
c0025f15:	66 90                	xchg   ax,ax
c0025f17:	66 90                	xchg   ax,ax
c0025f19:	66 90                	xchg   ax,ax
c0025f1b:	66 90                	xchg   ax,ax
c0025f1d:	66 90                	xchg   ax,ax
c0025f1f:	90                   	nop

c0025f20 <value_37F>:
c0025f20:	7f 03                	jg     c0025f25 <value_37A+0x1>

c0025f22 <value_37E>:
c0025f22:	7e 03                	jle    c0025f27 <x87Detect+0x1>

c0025f24 <value_37A>:
c0025f24:	7a 03                	jp     c0025f29 <x87Detect+0x3>

c0025f26 <x87Detect>:
c0025f26:	b8 01 00 00 00       	mov    eax,0x1
c0025f2b:	0f a2                	cpuid  
c0025f2d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025f33:	74 06                	je     c0025f3b <x87Detect.nox87>
c0025f35:	b8 01 00 00 00       	mov    eax,0x1
c0025f3a:	c3                   	ret    

c0025f3b <x87Detect.nox87>:
c0025f3b:	b8 00 00 00 00       	mov    eax,0x0
c0025f40:	c3                   	ret    

c0025f41 <x87Save>:
c0025f41:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025f46:	c3                   	ret    

c0025f47 <x87Load>:
c0025f47:	dd 64 24 08          	frstor [esp+0x8]
c0025f4b:	c3                   	ret    

c0025f4c <x87Init>:
c0025f4c:	9b db e3             	finit  
c0025f4f:	0f 20 c0             	mov    eax,cr0
c0025f52:	66 25 fb ff          	and    ax,0xfffb
c0025f56:	66 0d 22 00          	or     ax,0x22
c0025f5a:	0f 22 c0             	mov    cr0,eax
c0025f5d:	0f 06                	clts   
c0025f5f:	d9 2d 24 5f 02 c0    	fldcw  WORD PTR ds:0xc0025f24
c0025f65:	c3                   	ret    

c0025f66 <x87Close>:
c0025f66:	c3                   	ret    
c0025f67:	90                   	nop

c0025f68 <__do_global_ctors_aux>:
c0025f68:	a1 ac 8a 02 c0       	mov    eax,ds:0xc0028aac
c0025f6d:	83 f8 ff             	cmp    eax,0xffffffff
c0025f70:	74 1a                	je     c0025f8c <__do_global_ctors_aux+0x24>
c0025f72:	55                   	push   ebp
c0025f73:	89 e5                	mov    ebp,esp
c0025f75:	53                   	push   ebx
c0025f76:	52                   	push   edx
c0025f77:	bb ac 8a 02 c0       	mov    ebx,0xc0028aac
c0025f7c:	ff d0                	call   eax
c0025f7e:	83 eb 04             	sub    ebx,0x4
c0025f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025f83:	83 f8 ff             	cmp    eax,0xffffffff
c0025f86:	75 f4                	jne    c0025f7c <__do_global_ctors_aux+0x14>
c0025f88:	58                   	pop    eax
c0025f89:	5b                   	pop    ebx
c0025f8a:	5d                   	pop    ebp
c0025f8b:	c3                   	ret    
c0025f8c:	c3                   	ret    
c0025f8d:	66 90                	xchg   ax,ax
c0025f8f:	90                   	nop

c0025f90 <__divdi3>:
c0025f90:	55                   	push   ebp
c0025f91:	57                   	push   edi
c0025f92:	56                   	push   esi
c0025f93:	53                   	push   ebx
c0025f94:	83 ec 1c             	sub    esp,0x1c
c0025f97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025f9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025fa2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025fa6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025faa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025fae:	85 db                	test   ebx,ebx
c0025fb0:	0f 88 8e 00 00 00    	js     c0026044 <__divdi3+0xb4>
c0025fb6:	89 dd                	mov    ebp,ebx
c0025fb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025fc0:	89 d3                	mov    ebx,edx
c0025fc2:	85 d2                	test   edx,edx
c0025fc4:	79 0d                	jns    c0025fd3 <__divdi3+0x43>
c0025fc6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0025fca:	f7 d8                	neg    eax
c0025fcc:	83 d2 00             	adc    edx,0x0
c0025fcf:	f7 da                	neg    edx
c0025fd1:	89 d3                	mov    ebx,edx
c0025fd3:	89 c7                	mov    edi,eax
c0025fd5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025fd8:	85 db                	test   ebx,ebx
c0025fda:	75 48                	jne    c0026024 <__divdi3+0x94>
c0025fdc:	39 ef                	cmp    edi,ebp
c0025fde:	76 24                	jbe    c0026004 <__divdi3+0x74>
c0025fe0:	89 ea                	mov    edx,ebp
c0025fe2:	f7 f7                	div    edi
c0025fe4:	89 c1                	mov    ecx,eax
c0025fe6:	31 f6                	xor    esi,esi
c0025fe8:	89 c8                	mov    eax,ecx
c0025fea:	89 f2                	mov    edx,esi
c0025fec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025ff0:	85 c9                	test   ecx,ecx
c0025ff2:	74 07                	je     c0025ffb <__divdi3+0x6b>
c0025ff4:	f7 d8                	neg    eax
c0025ff6:	83 d2 00             	adc    edx,0x0
c0025ff9:	f7 da                	neg    edx
c0025ffb:	83 c4 1c             	add    esp,0x1c
c0025ffe:	5b                   	pop    ebx
c0025fff:	5e                   	pop    esi
c0026000:	5f                   	pop    edi
c0026001:	5d                   	pop    ebp
c0026002:	c3                   	ret    
c0026003:	90                   	nop
c0026004:	85 ff                	test   edi,edi
c0026006:	75 0b                	jne    c0026013 <__divdi3+0x83>
c0026008:	b8 01 00 00 00       	mov    eax,0x1
c002600d:	31 d2                	xor    edx,edx
c002600f:	f7 f3                	div    ebx
c0026011:	89 c7                	mov    edi,eax
c0026013:	31 d2                	xor    edx,edx
c0026015:	89 e8                	mov    eax,ebp
c0026017:	f7 f7                	div    edi
c0026019:	89 c6                	mov    esi,eax
c002601b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002601e:	f7 f7                	div    edi
c0026020:	89 c1                	mov    ecx,eax
c0026022:	eb c4                	jmp    c0025fe8 <__divdi3+0x58>
c0026024:	39 eb                	cmp    ebx,ebp
c0026026:	77 3c                	ja     c0026064 <__divdi3+0xd4>
c0026028:	0f bd f3             	bsr    esi,ebx
c002602b:	83 f6 1f             	xor    esi,0x1f
c002602e:	75 40                	jne    c0026070 <__divdi3+0xe0>
c0026030:	39 eb                	cmp    ebx,ebp
c0026032:	72 09                	jb     c002603d <__divdi3+0xad>
c0026034:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026037:	0f 87 97 00 00 00    	ja     c00260d4 <__divdi3+0x144>
c002603d:	b9 01 00 00 00       	mov    ecx,0x1
c0026042:	eb a4                	jmp    c0025fe8 <__divdi3+0x58>
c0026044:	f7 d9                	neg    ecx
c0026046:	83 d3 00             	adc    ebx,0x0
c0026049:	f7 db                	neg    ebx
c002604b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002604e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026052:	89 dd                	mov    ebp,ebx
c0026054:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002605c:	e9 5f ff ff ff       	jmp    c0025fc0 <__divdi3+0x30>
c0026061:	8d 76 00             	lea    esi,[esi+0x0]
c0026064:	31 f6                	xor    esi,esi
c0026066:	31 c9                	xor    ecx,ecx
c0026068:	e9 7b ff ff ff       	jmp    c0025fe8 <__divdi3+0x58>
c002606d:	8d 76 00             	lea    esi,[esi+0x0]
c0026070:	b8 20 00 00 00       	mov    eax,0x20
c0026075:	29 f0                	sub    eax,esi
c0026077:	89 f1                	mov    ecx,esi
c0026079:	d3 e3                	shl    ebx,cl
c002607b:	89 fa                	mov    edx,edi
c002607d:	88 c1                	mov    cl,al
c002607f:	d3 ea                	shr    edx,cl
c0026081:	09 da                	or     edx,ebx
c0026083:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026087:	89 f1                	mov    ecx,esi
c0026089:	d3 e7                	shl    edi,cl
c002608b:	89 eb                	mov    ebx,ebp
c002608d:	88 c1                	mov    cl,al
c002608f:	d3 eb                	shr    ebx,cl
c0026091:	89 f1                	mov    ecx,esi
c0026093:	d3 e5                	shl    ebp,cl
c0026095:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026098:	88 c1                	mov    cl,al
c002609a:	d3 ea                	shr    edx,cl
c002609c:	09 d5                	or     ebp,edx
c002609e:	89 e8                	mov    eax,ebp
c00260a0:	89 da                	mov    edx,ebx
c00260a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00260a6:	89 d3                	mov    ebx,edx
c00260a8:	89 c5                	mov    ebp,eax
c00260aa:	f7 e7                	mul    edi
c00260ac:	39 d3                	cmp    ebx,edx
c00260ae:	72 18                	jb     c00260c8 <__divdi3+0x138>
c00260b0:	74 0a                	je     c00260bc <__divdi3+0x12c>
c00260b2:	89 e9                	mov    ecx,ebp
c00260b4:	31 f6                	xor    esi,esi
c00260b6:	e9 2d ff ff ff       	jmp    c0025fe8 <__divdi3+0x58>
c00260bb:	90                   	nop
c00260bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00260bf:	89 f1                	mov    ecx,esi
c00260c1:	d3 e7                	shl    edi,cl
c00260c3:	39 c7                	cmp    edi,eax
c00260c5:	73 eb                	jae    c00260b2 <__divdi3+0x122>
c00260c7:	90                   	nop
c00260c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00260cb:	31 f6                	xor    esi,esi
c00260cd:	e9 16 ff ff ff       	jmp    c0025fe8 <__divdi3+0x58>
c00260d2:	66 90                	xchg   ax,ax
c00260d4:	31 c9                	xor    ecx,ecx
c00260d6:	e9 0d ff ff ff       	jmp    c0025fe8 <__divdi3+0x58>
c00260db:	90                   	nop

c00260dc <__moddi3>:
c00260dc:	55                   	push   ebp
c00260dd:	57                   	push   edi
c00260de:	56                   	push   esi
c00260df:	53                   	push   ebx
c00260e0:	83 ec 2c             	sub    esp,0x2c
c00260e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00260e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00260eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00260ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00260f3:	85 db                	test   ebx,ebx
c00260f5:	0f 88 85 00 00 00    	js     c0026180 <__moddi3+0xa4>
c00260fb:	89 de                	mov    esi,ebx
c00260fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026105:	89 d7                	mov    edi,edx
c0026107:	85 d2                	test   edx,edx
c0026109:	79 09                	jns    c0026114 <__moddi3+0x38>
c002610b:	f7 d8                	neg    eax
c002610d:	83 d2 00             	adc    edx,0x0
c0026110:	f7 da                	neg    edx
c0026112:	89 d7                	mov    edi,edx
c0026114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026118:	89 cd                	mov    ebp,ecx
c002611a:	85 ff                	test   edi,edi
c002611c:	75 52                	jne    c0026170 <__moddi3+0x94>
c002611e:	89 c3                	mov    ebx,eax
c0026120:	39 f0                	cmp    eax,esi
c0026122:	76 24                	jbe    c0026148 <__moddi3+0x6c>
c0026124:	89 c8                	mov    eax,ecx
c0026126:	89 f2                	mov    edx,esi
c0026128:	f7 f3                	div    ebx
c002612a:	89 d6                	mov    esi,edx
c002612c:	89 f0                	mov    eax,esi
c002612e:	31 d2                	xor    edx,edx
c0026130:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026134:	85 c9                	test   ecx,ecx
c0026136:	74 07                	je     c002613f <__moddi3+0x63>
c0026138:	f7 d8                	neg    eax
c002613a:	83 d2 00             	adc    edx,0x0
c002613d:	f7 da                	neg    edx
c002613f:	83 c4 2c             	add    esp,0x2c
c0026142:	5b                   	pop    ebx
c0026143:	5e                   	pop    esi
c0026144:	5f                   	pop    edi
c0026145:	5d                   	pop    ebp
c0026146:	c3                   	ret    
c0026147:	90                   	nop
c0026148:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002614c:	85 db                	test   ebx,ebx
c002614e:	75 0d                	jne    c002615d <__moddi3+0x81>
c0026150:	b8 01 00 00 00       	mov    eax,0x1
c0026155:	31 d2                	xor    edx,edx
c0026157:	f7 f7                	div    edi
c0026159:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002615d:	89 f0                	mov    eax,esi
c002615f:	31 d2                	xor    edx,edx
c0026161:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026165:	f7 f7                	div    edi
c0026167:	89 e8                	mov    eax,ebp
c0026169:	f7 f7                	div    edi
c002616b:	89 d6                	mov    esi,edx
c002616d:	eb bd                	jmp    c002612c <__moddi3+0x50>
c002616f:	90                   	nop
c0026170:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026174:	39 f7                	cmp    edi,esi
c0026176:	76 20                	jbe    c0026198 <__moddi3+0xbc>
c0026178:	89 c8                	mov    eax,ecx
c002617a:	89 f2                	mov    edx,esi
c002617c:	eb b2                	jmp    c0026130 <__moddi3+0x54>
c002617e:	66 90                	xchg   ax,ax
c0026180:	f7 d9                	neg    ecx
c0026182:	83 d3 00             	adc    ebx,0x0
c0026185:	f7 db                	neg    ebx
c0026187:	89 de                	mov    esi,ebx
c0026189:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026191:	e9 6f ff ff ff       	jmp    c0026105 <__moddi3+0x29>
c0026196:	66 90                	xchg   ax,ax
c0026198:	0f bd c7             	bsr    eax,edi
c002619b:	83 f0 1f             	xor    eax,0x1f
c002619e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00261a2:	75 24                	jne    c00261c8 <__moddi3+0xec>
c00261a4:	39 f7                	cmp    edi,esi
c00261a6:	72 06                	jb     c00261ae <__moddi3+0xd2>
c00261a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00261ac:	77 0c                	ja     c00261ba <__moddi3+0xde>
c00261ae:	89 e9                	mov    ecx,ebp
c00261b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00261b4:	19 fe                	sbb    esi,edi
c00261b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00261ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261be:	89 f2                	mov    edx,esi
c00261c0:	e9 6b ff ff ff       	jmp    c0026130 <__moddi3+0x54>
c00261c5:	8d 76 00             	lea    esi,[esi+0x0]
c00261c8:	b8 20 00 00 00       	mov    eax,0x20
c00261cd:	89 c2                	mov    edx,eax
c00261cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00261d3:	29 da                	sub    edx,ebx
c00261d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00261d9:	88 d9                	mov    cl,bl
c00261db:	d3 e7                	shl    edi,cl
c00261dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261e1:	88 d1                	mov    cl,dl
c00261e3:	d3 e8                	shr    eax,cl
c00261e5:	09 c7                	or     edi,eax
c00261e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00261eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00261ef:	89 d8                	mov    eax,ebx
c00261f1:	88 d9                	mov    cl,bl
c00261f3:	d3 e7                	shl    edi,cl
c00261f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00261f9:	89 f3                	mov    ebx,esi
c00261fb:	88 d1                	mov    cl,dl
c00261fd:	d3 eb                	shr    ebx,cl
c00261ff:	89 c7                	mov    edi,eax
c0026201:	88 c1                	mov    cl,al
c0026203:	d3 e6                	shl    esi,cl
c0026205:	89 e8                	mov    eax,ebp
c0026207:	88 d1                	mov    cl,dl
c0026209:	d3 e8                	shr    eax,cl
c002620b:	09 f0                	or     eax,esi
c002620d:	89 f9                	mov    ecx,edi
c002620f:	d3 e5                	shl    ebp,cl
c0026211:	89 da                	mov    edx,ebx
c0026213:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026217:	89 d3                	mov    ebx,edx
c0026219:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002621d:	89 c6                	mov    esi,eax
c002621f:	89 d1                	mov    ecx,edx
c0026221:	39 d3                	cmp    ebx,edx
c0026223:	72 27                	jb     c002624c <__moddi3+0x170>
c0026225:	74 21                	je     c0026248 <__moddi3+0x16c>
c0026227:	29 f5                	sub    ebp,esi
c0026229:	19 cb                	sbb    ebx,ecx
c002622b:	89 de                	mov    esi,ebx
c002622d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026231:	d3 e6                	shl    esi,cl
c0026233:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026237:	89 f9                	mov    ecx,edi
c0026239:	d3 ed                	shr    ebp,cl
c002623b:	09 ee                	or     esi,ebp
c002623d:	89 f0                	mov    eax,esi
c002623f:	d3 eb                	shr    ebx,cl
c0026241:	89 da                	mov    edx,ebx
c0026243:	e9 e8 fe ff ff       	jmp    c0026130 <__moddi3+0x54>
c0026248:	39 c5                	cmp    ebp,eax
c002624a:	73 db                	jae    c0026227 <__moddi3+0x14b>
c002624c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026250:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026254:	89 d1                	mov    ecx,edx
c0026256:	89 c6                	mov    esi,eax
c0026258:	eb cd                	jmp    c0026227 <__moddi3+0x14b>
c002625a:	66 90                	xchg   ax,ax

c002625c <__udivdi3>:
c002625c:	55                   	push   ebp
c002625d:	57                   	push   edi
c002625e:	56                   	push   esi
c002625f:	53                   	push   ebx
c0026260:	83 ec 1c             	sub    esp,0x1c
c0026263:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026267:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002626b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002626f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026273:	85 d2                	test   edx,edx
c0026275:	75 41                	jne    c00262b8 <__udivdi3+0x5c>
c0026277:	39 f7                	cmp    edi,esi
c0026279:	76 15                	jbe    c0026290 <__udivdi3+0x34>
c002627b:	89 e8                	mov    eax,ebp
c002627d:	89 f2                	mov    edx,esi
c002627f:	f7 f7                	div    edi
c0026281:	31 db                	xor    ebx,ebx
c0026283:	89 da                	mov    edx,ebx
c0026285:	83 c4 1c             	add    esp,0x1c
c0026288:	5b                   	pop    ebx
c0026289:	5e                   	pop    esi
c002628a:	5f                   	pop    edi
c002628b:	5d                   	pop    ebp
c002628c:	c3                   	ret    
c002628d:	8d 76 00             	lea    esi,[esi+0x0]
c0026290:	89 f9                	mov    ecx,edi
c0026292:	85 ff                	test   edi,edi
c0026294:	75 0b                	jne    c00262a1 <__udivdi3+0x45>
c0026296:	b8 01 00 00 00       	mov    eax,0x1
c002629b:	31 d2                	xor    edx,edx
c002629d:	f7 f7                	div    edi
c002629f:	89 c1                	mov    ecx,eax
c00262a1:	31 d2                	xor    edx,edx
c00262a3:	89 f0                	mov    eax,esi
c00262a5:	f7 f1                	div    ecx
c00262a7:	89 c3                	mov    ebx,eax
c00262a9:	89 e8                	mov    eax,ebp
c00262ab:	f7 f1                	div    ecx
c00262ad:	89 da                	mov    edx,ebx
c00262af:	83 c4 1c             	add    esp,0x1c
c00262b2:	5b                   	pop    ebx
c00262b3:	5e                   	pop    esi
c00262b4:	5f                   	pop    edi
c00262b5:	5d                   	pop    ebp
c00262b6:	c3                   	ret    
c00262b7:	90                   	nop
c00262b8:	39 f2                	cmp    edx,esi
c00262ba:	77 1c                	ja     c00262d8 <__udivdi3+0x7c>
c00262bc:	0f bd da             	bsr    ebx,edx
c00262bf:	83 f3 1f             	xor    ebx,0x1f
c00262c2:	75 24                	jne    c00262e8 <__udivdi3+0x8c>
c00262c4:	39 f2                	cmp    edx,esi
c00262c6:	72 08                	jb     c00262d0 <__udivdi3+0x74>
c00262c8:	39 ef                	cmp    edi,ebp
c00262ca:	0f 87 84 00 00 00    	ja     c0026354 <__udivdi3+0xf8>
c00262d0:	b8 01 00 00 00       	mov    eax,0x1
c00262d5:	eb ac                	jmp    c0026283 <__udivdi3+0x27>
c00262d7:	90                   	nop
c00262d8:	31 db                	xor    ebx,ebx
c00262da:	31 c0                	xor    eax,eax
c00262dc:	89 da                	mov    edx,ebx
c00262de:	83 c4 1c             	add    esp,0x1c
c00262e1:	5b                   	pop    ebx
c00262e2:	5e                   	pop    esi
c00262e3:	5f                   	pop    edi
c00262e4:	5d                   	pop    ebp
c00262e5:	c3                   	ret    
c00262e6:	66 90                	xchg   ax,ax
c00262e8:	b8 20 00 00 00       	mov    eax,0x20
c00262ed:	29 d8                	sub    eax,ebx
c00262ef:	88 d9                	mov    cl,bl
c00262f1:	d3 e2                	shl    edx,cl
c00262f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00262f7:	89 fa                	mov    edx,edi
c00262f9:	88 c1                	mov    cl,al
c00262fb:	d3 ea                	shr    edx,cl
c00262fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026301:	09 d1                	or     ecx,edx
c0026303:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026307:	88 d9                	mov    cl,bl
c0026309:	d3 e7                	shl    edi,cl
c002630b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002630f:	89 f7                	mov    edi,esi
c0026311:	88 c1                	mov    cl,al
c0026313:	d3 ef                	shr    edi,cl
c0026315:	88 d9                	mov    cl,bl
c0026317:	d3 e6                	shl    esi,cl
c0026319:	89 ea                	mov    edx,ebp
c002631b:	88 c1                	mov    cl,al
c002631d:	d3 ea                	shr    edx,cl
c002631f:	09 d6                	or     esi,edx
c0026321:	89 f0                	mov    eax,esi
c0026323:	89 fa                	mov    edx,edi
c0026325:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026329:	89 d7                	mov    edi,edx
c002632b:	89 c6                	mov    esi,eax
c002632d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026331:	39 d7                	cmp    edi,edx
c0026333:	72 13                	jb     c0026348 <__udivdi3+0xec>
c0026335:	74 09                	je     c0026340 <__udivdi3+0xe4>
c0026337:	89 f0                	mov    eax,esi
c0026339:	31 db                	xor    ebx,ebx
c002633b:	e9 43 ff ff ff       	jmp    c0026283 <__udivdi3+0x27>
c0026340:	88 d9                	mov    cl,bl
c0026342:	d3 e5                	shl    ebp,cl
c0026344:	39 c5                	cmp    ebp,eax
c0026346:	73 ef                	jae    c0026337 <__udivdi3+0xdb>
c0026348:	8d 46 ff             	lea    eax,[esi-0x1]
c002634b:	31 db                	xor    ebx,ebx
c002634d:	e9 31 ff ff ff       	jmp    c0026283 <__udivdi3+0x27>
c0026352:	66 90                	xchg   ax,ax
c0026354:	31 c0                	xor    eax,eax
c0026356:	e9 28 ff ff ff       	jmp    c0026283 <__udivdi3+0x27>
c002635b:	90                   	nop

c002635c <__umoddi3>:
c002635c:	55                   	push   ebp
c002635d:	57                   	push   edi
c002635e:	56                   	push   esi
c002635f:	53                   	push   ebx
c0026360:	83 ec 1c             	sub    esp,0x1c
c0026363:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026367:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002636b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002636f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026373:	89 da                	mov    edx,ebx
c0026375:	85 c0                	test   eax,eax
c0026377:	75 37                	jne    c00263b0 <__umoddi3+0x54>
c0026379:	39 df                	cmp    edi,ebx
c002637b:	76 13                	jbe    c0026390 <__umoddi3+0x34>
c002637d:	89 f0                	mov    eax,esi
c002637f:	f7 f7                	div    edi
c0026381:	89 d0                	mov    eax,edx
c0026383:	31 d2                	xor    edx,edx
c0026385:	83 c4 1c             	add    esp,0x1c
c0026388:	5b                   	pop    ebx
c0026389:	5e                   	pop    esi
c002638a:	5f                   	pop    edi
c002638b:	5d                   	pop    ebp
c002638c:	c3                   	ret    
c002638d:	8d 76 00             	lea    esi,[esi+0x0]
c0026390:	89 fd                	mov    ebp,edi
c0026392:	85 ff                	test   edi,edi
c0026394:	75 0b                	jne    c00263a1 <__umoddi3+0x45>
c0026396:	b8 01 00 00 00       	mov    eax,0x1
c002639b:	31 d2                	xor    edx,edx
c002639d:	f7 f7                	div    edi
c002639f:	89 c5                	mov    ebp,eax
c00263a1:	89 d8                	mov    eax,ebx
c00263a3:	31 d2                	xor    edx,edx
c00263a5:	f7 f5                	div    ebp
c00263a7:	89 f0                	mov    eax,esi
c00263a9:	f7 f5                	div    ebp
c00263ab:	89 d0                	mov    eax,edx
c00263ad:	eb d4                	jmp    c0026383 <__umoddi3+0x27>
c00263af:	90                   	nop
c00263b0:	89 f1                	mov    ecx,esi
c00263b2:	39 d8                	cmp    eax,ebx
c00263b4:	76 0a                	jbe    c00263c0 <__umoddi3+0x64>
c00263b6:	89 f0                	mov    eax,esi
c00263b8:	83 c4 1c             	add    esp,0x1c
c00263bb:	5b                   	pop    ebx
c00263bc:	5e                   	pop    esi
c00263bd:	5f                   	pop    edi
c00263be:	5d                   	pop    ebp
c00263bf:	c3                   	ret    
c00263c0:	0f bd e8             	bsr    ebp,eax
c00263c3:	83 f5 1f             	xor    ebp,0x1f
c00263c6:	75 1c                	jne    c00263e4 <__umoddi3+0x88>
c00263c8:	39 d8                	cmp    eax,ebx
c00263ca:	72 04                	jb     c00263d0 <__umoddi3+0x74>
c00263cc:	39 f7                	cmp    edi,esi
c00263ce:	77 08                	ja     c00263d8 <__umoddi3+0x7c>
c00263d0:	89 da                	mov    edx,ebx
c00263d2:	29 fe                	sub    esi,edi
c00263d4:	19 c2                	sbb    edx,eax
c00263d6:	89 f1                	mov    ecx,esi
c00263d8:	89 c8                	mov    eax,ecx
c00263da:	83 c4 1c             	add    esp,0x1c
c00263dd:	5b                   	pop    ebx
c00263de:	5e                   	pop    esi
c00263df:	5f                   	pop    edi
c00263e0:	5d                   	pop    ebp
c00263e1:	c3                   	ret    
c00263e2:	66 90                	xchg   ax,ax
c00263e4:	ba 20 00 00 00       	mov    edx,0x20
c00263e9:	29 ea                	sub    edx,ebp
c00263eb:	89 e9                	mov    ecx,ebp
c00263ed:	d3 e0                	shl    eax,cl
c00263ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263f3:	89 f8                	mov    eax,edi
c00263f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00263f9:	88 d1                	mov    cl,dl
c00263fb:	d3 e8                	shr    eax,cl
c00263fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026401:	09 c1                	or     ecx,eax
c0026403:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026407:	89 e9                	mov    ecx,ebp
c0026409:	d3 e7                	shl    edi,cl
c002640b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002640f:	89 d8                	mov    eax,ebx
c0026411:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026415:	88 d1                	mov    cl,dl
c0026417:	d3 e8                	shr    eax,cl
c0026419:	89 c7                	mov    edi,eax
c002641b:	89 e9                	mov    ecx,ebp
c002641d:	d3 e3                	shl    ebx,cl
c002641f:	89 f0                	mov    eax,esi
c0026421:	88 d1                	mov    cl,dl
c0026423:	d3 e8                	shr    eax,cl
c0026425:	09 d8                	or     eax,ebx
c0026427:	89 e9                	mov    ecx,ebp
c0026429:	d3 e6                	shl    esi,cl
c002642b:	89 f3                	mov    ebx,esi
c002642d:	89 fa                	mov    edx,edi
c002642f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026433:	89 d1                	mov    ecx,edx
c0026435:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026439:	89 c6                	mov    esi,eax
c002643b:	89 d7                	mov    edi,edx
c002643d:	39 d1                	cmp    ecx,edx
c002643f:	72 27                	jb     c0026468 <__umoddi3+0x10c>
c0026441:	74 21                	je     c0026464 <__umoddi3+0x108>
c0026443:	89 ca                	mov    edx,ecx
c0026445:	29 f3                	sub    ebx,esi
c0026447:	19 fa                	sbb    edx,edi
c0026449:	89 d0                	mov    eax,edx
c002644b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002644f:	d3 e0                	shl    eax,cl
c0026451:	89 e9                	mov    ecx,ebp
c0026453:	d3 eb                	shr    ebx,cl
c0026455:	09 d8                	or     eax,ebx
c0026457:	d3 ea                	shr    edx,cl
c0026459:	83 c4 1c             	add    esp,0x1c
c002645c:	5b                   	pop    ebx
c002645d:	5e                   	pop    esi
c002645e:	5f                   	pop    edi
c002645f:	5d                   	pop    ebp
c0026460:	c3                   	ret    
c0026461:	8d 76 00             	lea    esi,[esi+0x0]
c0026464:	39 c3                	cmp    ebx,eax
c0026466:	73 db                	jae    c0026443 <__umoddi3+0xe7>
c0026468:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002646c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026470:	89 d7                	mov    edi,edx
c0026472:	89 c6                	mov    esi,eax
c0026474:	eb cd                	jmp    c0026443 <__umoddi3+0xe7>

c0026476 <__addsf3>:
c0026476:	55                   	push   ebp
c0026477:	89 e5                	mov    ebp,esp
c0026479:	57                   	push   edi
c002647a:	56                   	push   esi
c002647b:	53                   	push   ebx
c002647c:	83 ec 08             	sub    esp,0x8
c002647f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026482:	89 fa                	mov    edx,edi
c0026484:	89 f8                	mov    eax,edi
c0026486:	c1 f8 17             	sar    eax,0x17
c0026489:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002648c:	c1 e2 08             	shl    edx,0x8
c002648f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026495:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026498:	89 de                	mov    esi,ebx
c002649a:	c1 fe 17             	sar    esi,0x17
c002649d:	c1 e3 08             	shl    ebx,0x8
c00264a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00264a6:	31 f0                	xor    eax,esi
c00264a8:	0f 88 3b 01 00 00    	js     c00265e9 <__addsf3+0x173>
c00264ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00264b1:	29 f1                	sub    ecx,esi
c00264b3:	85 c9                	test   ecx,ecx
c00264b5:	7e 54                	jle    c002650b <__addsf3+0x95>
c00264b7:	89 f0                	mov    eax,esi
c00264b9:	84 c0                	test   al,al
c00264bb:	75 10                	jne    c00264cd <__addsf3+0x57>
c00264bd:	85 db                	test   ebx,ebx
c00264bf:	0f 84 aa 02 00 00    	je     c002676f <__addsf3+0x2f9>
c00264c5:	49                   	dec    ecx
c00264c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00264c9:	74 38                	je     c0026503 <__addsf3+0x8d>
c00264cb:	eb 13                	jmp    c00264e0 <__addsf3+0x6a>
c00264cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264d0:	f7 d0                	not    eax
c00264d2:	84 c0                	test   al,al
c00264d4:	0f 84 95 02 00 00    	je     c002676f <__addsf3+0x2f9>
c00264da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00264e0:	83 f9 1f             	cmp    ecx,0x1f
c00264e3:	0f 8f 86 02 00 00    	jg     c002676f <__addsf3+0x2f9>
c00264e9:	89 de                	mov    esi,ebx
c00264eb:	d3 ee                	shr    esi,cl
c00264ed:	b8 20 00 00 00       	mov    eax,0x20
c00264f2:	29 c8                	sub    eax,ecx
c00264f4:	89 c1                	mov    ecx,eax
c00264f6:	d3 e3                	shl    ebx,cl
c00264f8:	31 c0                	xor    eax,eax
c00264fa:	85 db                	test   ebx,ebx
c00264fc:	0f 95 c0             	setne  al
c00264ff:	09 f0                	or     eax,esi
c0026501:	01 d0                	add    eax,edx
c0026503:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026506:	e9 b6 00 00 00       	jmp    c00265c1 <__addsf3+0x14b>
c002650b:	74 5c                	je     c0026569 <__addsf3+0xf3>
c002650d:	89 f1                	mov    ecx,esi
c002650f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026512:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026515:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026519:	75 14                	jne    c002652f <__addsf3+0xb9>
c002651b:	85 d2                	test   edx,edx
c002651d:	0f 84 4c 02 00 00    	je     c002676f <__addsf3+0x2f9>
c0026523:	49                   	dec    ecx
c0026524:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026527:	0f 84 94 00 00 00    	je     c00265c1 <__addsf3+0x14b>
c002652d:	eb 12                	jmp    c0026541 <__addsf3+0xcb>
c002652f:	89 f0                	mov    eax,esi
c0026531:	f7 d0                	not    eax
c0026533:	84 c0                	test   al,al
c0026535:	0f 84 34 02 00 00    	je     c002676f <__addsf3+0x2f9>
c002653b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026541:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026544:	83 f9 1f             	cmp    ecx,0x1f
c0026547:	0f 8f 22 02 00 00    	jg     c002676f <__addsf3+0x2f9>
c002654d:	89 d7                	mov    edi,edx
c002654f:	d3 ef                	shr    edi,cl
c0026551:	b8 20 00 00 00       	mov    eax,0x20
c0026556:	29 c8                	sub    eax,ecx
c0026558:	89 c1                	mov    ecx,eax
c002655a:	d3 e2                	shl    edx,cl
c002655c:	31 c0                	xor    eax,eax
c002655e:	85 d2                	test   edx,edx
c0026560:	0f 95 c0             	setne  al
c0026563:	09 f8                	or     eax,edi
c0026565:	01 d8                	add    eax,ebx
c0026567:	eb 58                	jmp    c00265c1 <__addsf3+0x14b>
c0026569:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002656c:	8d 70 01             	lea    esi,[eax+0x1]
c002656f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026575:	75 32                	jne    c00265a9 <__addsf3+0x133>
c0026577:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002657b:	75 1f                	jne    c002659c <__addsf3+0x126>
c002657d:	85 d2                	test   edx,edx
c002657f:	0f 84 e0 01 00 00    	je     c0026765 <__addsf3+0x2ef>
c0026585:	85 db                	test   ebx,ebx
c0026587:	0f 84 e2 01 00 00    	je     c002676f <__addsf3+0x2f9>
c002658d:	89 d0                	mov    eax,edx
c002658f:	01 d8                	add    eax,ebx
c0026591:	0f 89 a9 01 00 00    	jns    c0026740 <__addsf3+0x2ca>
c0026597:	e9 9d 01 00 00       	jmp    c0026739 <__addsf3+0x2c3>
c002659c:	85 d2                	test   edx,edx
c002659e:	0f 85 cb 01 00 00    	jne    c002676f <__addsf3+0x2f9>
c00265a4:	e9 bc 01 00 00       	jmp    c0026765 <__addsf3+0x2ef>
c00265a9:	31 c0                	xor    eax,eax
c00265ab:	89 f1                	mov    ecx,esi
c00265ad:	f7 d1                	not    ecx
c00265af:	84 c9                	test   cl,cl
c00265b1:	0f 84 90 01 00 00    	je     c0026747 <__addsf3+0x2d1>
c00265b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00265ba:	d1 e8                	shr    eax,1
c00265bc:	e9 86 01 00 00       	jmp    c0026747 <__addsf3+0x2d1>
c00265c1:	85 c0                	test   eax,eax
c00265c3:	0f 89 7e 01 00 00    	jns    c0026747 <__addsf3+0x2d1>
c00265c9:	46                   	inc    esi
c00265ca:	89 f2                	mov    edx,esi
c00265cc:	f7 d2                	not    edx
c00265ce:	84 d2                	test   dl,dl
c00265d0:	0f 84 6f 01 00 00    	je     c0026745 <__addsf3+0x2cf>
c00265d6:	89 c2                	mov    edx,eax
c00265d8:	83 e2 01             	and    edx,0x1
c00265db:	d1 e8                	shr    eax,1
c00265dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00265e2:	09 d0                	or     eax,edx
c00265e4:	e9 5e 01 00 00       	jmp    c0026747 <__addsf3+0x2d1>
c00265e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00265ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265f0:	89 f0                	mov    eax,esi
c00265f2:	0f b6 c0             	movzx  eax,al
c00265f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265f8:	29 c1                	sub    ecx,eax
c00265fa:	85 c9                	test   ecx,ecx
c00265fc:	7e 55                	jle    c0026653 <__addsf3+0x1dd>
c00265fe:	85 c0                	test   eax,eax
c0026600:	75 11                	jne    c0026613 <__addsf3+0x19d>
c0026602:	85 db                	test   ebx,ebx
c0026604:	0f 84 65 01 00 00    	je     c002676f <__addsf3+0x2f9>
c002660a:	49                   	dec    ecx
c002660b:	75 19                	jne    c0026626 <__addsf3+0x1b0>
c002660d:	89 d0                	mov    eax,edx
c002660f:	29 d8                	sub    eax,ebx
c0026611:	eb 38                	jmp    c002664b <__addsf3+0x1d5>
c0026613:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026616:	f7 d0                	not    eax
c0026618:	84 c0                	test   al,al
c002661a:	0f 84 4f 01 00 00    	je     c002676f <__addsf3+0x2f9>
c0026620:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026626:	83 f9 1f             	cmp    ecx,0x1f
c0026629:	0f 8f 40 01 00 00    	jg     c002676f <__addsf3+0x2f9>
c002662f:	89 de                	mov    esi,ebx
c0026631:	d3 ee                	shr    esi,cl
c0026633:	b8 20 00 00 00       	mov    eax,0x20
c0026638:	29 c8                	sub    eax,ecx
c002663a:	89 c1                	mov    ecx,eax
c002663c:	d3 e3                	shl    ebx,cl
c002663e:	31 c0                	xor    eax,eax
c0026640:	85 db                	test   ebx,ebx
c0026642:	0f 95 c0             	setne  al
c0026645:	09 f0                	or     eax,esi
c0026647:	29 c2                	sub    edx,eax
c0026649:	89 d0                	mov    eax,edx
c002664b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002664e:	e9 af 00 00 00       	jmp    c0026702 <__addsf3+0x28c>
c0026653:	74 5c                	je     c00266b1 <__addsf3+0x23b>
c0026655:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026658:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002665b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002665f:	75 14                	jne    c0026675 <__addsf3+0x1ff>
c0026661:	85 d2                	test   edx,edx
c0026663:	0f 84 06 01 00 00    	je     c002676f <__addsf3+0x2f9>
c0026669:	48                   	dec    eax
c002666a:	75 1b                	jne    c0026687 <__addsf3+0x211>
c002666c:	89 d8                	mov    eax,ebx
c002666e:	29 d0                	sub    eax,edx
c0026670:	e9 8d 00 00 00       	jmp    c0026702 <__addsf3+0x28c>
c0026675:	89 f1                	mov    ecx,esi
c0026677:	f7 d1                	not    ecx
c0026679:	84 c9                	test   cl,cl
c002667b:	0f 84 ee 00 00 00    	je     c002676f <__addsf3+0x2f9>
c0026681:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026687:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002668a:	83 f8 1f             	cmp    eax,0x1f
c002668d:	0f 8f dc 00 00 00    	jg     c002676f <__addsf3+0x2f9>
c0026693:	89 d7                	mov    edi,edx
c0026695:	88 c1                	mov    cl,al
c0026697:	d3 ef                	shr    edi,cl
c0026699:	b9 20 00 00 00       	mov    ecx,0x20
c002669e:	29 c1                	sub    ecx,eax
c00266a0:	d3 e2                	shl    edx,cl
c00266a2:	31 c0                	xor    eax,eax
c00266a4:	85 d2                	test   edx,edx
c00266a6:	0f 95 c0             	setne  al
c00266a9:	09 f8                	or     eax,edi
c00266ab:	29 c3                	sub    ebx,eax
c00266ad:	89 d8                	mov    eax,ebx
c00266af:	eb 51                	jmp    c0026702 <__addsf3+0x28c>
c00266b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00266b4:	40                   	inc    eax
c00266b5:	a8 fe                	test   al,0xfe
c00266b7:	75 3d                	jne    c00266f6 <__addsf3+0x280>
c00266b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00266bd:	0f 85 a7 00 00 00    	jne    c002676a <__addsf3+0x2f4>
c00266c3:	85 d2                	test   edx,edx
c00266c5:	75 12                	jne    c00266d9 <__addsf3+0x263>
c00266c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00266ca:	85 db                	test   ebx,ebx
c00266cc:	0f 85 9d 00 00 00    	jne    c002676f <__addsf3+0x2f9>
c00266d2:	31 ff                	xor    edi,edi
c00266d4:	e9 96 00 00 00       	jmp    c002676f <__addsf3+0x2f9>
c00266d9:	85 db                	test   ebx,ebx
c00266db:	0f 84 8e 00 00 00    	je     c002676f <__addsf3+0x2f9>
c00266e1:	89 d0                	mov    eax,edx
c00266e3:	29 d8                	sub    eax,ebx
c00266e5:	79 06                	jns    c00266ed <__addsf3+0x277>
c00266e7:	89 d8                	mov    eax,ebx
c00266e9:	29 d0                	sub    eax,edx
c00266eb:	eb 5a                	jmp    c0026747 <__addsf3+0x2d1>
c00266ed:	bf 00 00 00 00       	mov    edi,0x0
c00266f2:	74 7b                	je     c002676f <__addsf3+0x2f9>
c00266f4:	eb 4a                	jmp    c0026740 <__addsf3+0x2ca>
c00266f6:	89 d0                	mov    eax,edx
c00266f8:	29 d8                	sub    eax,ebx
c00266fa:	79 12                	jns    c002670e <__addsf3+0x298>
c00266fc:	89 d8                	mov    eax,ebx
c00266fe:	29 d0                	sub    eax,edx
c0026700:	eb 09                	jmp    c002670b <__addsf3+0x295>
c0026702:	85 c0                	test   eax,eax
c0026704:	79 41                	jns    c0026747 <__addsf3+0x2d1>
c0026706:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002670b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002670e:	31 f6                	xor    esi,esi
c0026710:	85 c0                	test   eax,eax
c0026712:	74 33                	je     c0026747 <__addsf3+0x2d1>
c0026714:	0f bd c8             	bsr    ecx,eax
c0026717:	83 f1 1f             	xor    ecx,0x1f
c002671a:	d3 e0                	shl    eax,cl
c002671c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026720:	39 ca                	cmp    edx,ecx
c0026722:	7f 10                	jg     c0026734 <__addsf3+0x2be>
c0026724:	29 d1                	sub    ecx,edx
c0026726:	41                   	inc    ecx
c0026727:	d3 e8                	shr    eax,cl
c0026729:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002672c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026732:	eb 13                	jmp    c0026747 <__addsf3+0x2d1>
c0026734:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026737:	29 ce                	sub    esi,ecx
c0026739:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002673e:	eb 07                	jmp    c0026747 <__addsf3+0x2d1>
c0026740:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026743:	eb 02                	jmp    c0026747 <__addsf3+0x2d1>
c0026745:	31 c0                	xor    eax,eax
c0026747:	89 c2                	mov    edx,eax
c0026749:	c1 ea 08             	shr    edx,0x8
c002674c:	a8 7f                	test   al,0x7f
c002674e:	0f 95 c1             	setne  cl
c0026751:	09 d1                	or     ecx,edx
c0026753:	83 e1 01             	and    ecx,0x1
c0026756:	c1 e8 07             	shr    eax,0x7
c0026759:	21 c8                	and    eax,ecx
c002675b:	c1 e6 17             	shl    esi,0x17
c002675e:	09 d6                	or     esi,edx
c0026760:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026763:	eb 0a                	jmp    c002676f <__addsf3+0x2f9>
c0026765:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026768:	eb 05                	jmp    c002676f <__addsf3+0x2f9>
c002676a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002676f:	89 f8                	mov    eax,edi
c0026771:	5a                   	pop    edx
c0026772:	59                   	pop    ecx
c0026773:	5b                   	pop    ebx
c0026774:	5e                   	pop    esi
c0026775:	5f                   	pop    edi
c0026776:	5d                   	pop    ebp
c0026777:	c3                   	ret    

c0026778 <__subsf3>:
c0026778:	55                   	push   ebp
c0026779:	89 e5                	mov    ebp,esp
c002677b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002677e:	05 00 00 00 80       	add    eax,0x80000000
c0026783:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026786:	5d                   	pop    ebp
c0026787:	e9 ea fc ff ff       	jmp    c0026476 <__addsf3>

c002678c <__negsf2>:
c002678c:	55                   	push   ebp
c002678d:	89 e5                	mov    ebp,esp
c002678f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026792:	05 00 00 00 80       	add    eax,0x80000000
c0026797:	5d                   	pop    ebp
c0026798:	c3                   	ret    

c0026799 <__mulsf3>:
c0026799:	55                   	push   ebp
c002679a:	89 e5                	mov    ebp,esp
c002679c:	57                   	push   edi
c002679d:	56                   	push   esi
c002679e:	53                   	push   ebx
c002679f:	83 ec 1c             	sub    esp,0x1c
c00267a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00267a5:	89 f0                	mov    eax,esi
c00267a7:	89 f1                	mov    ecx,esi
c00267a9:	c1 f9 17             	sar    ecx,0x17
c00267ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00267af:	c1 e0 08             	shl    eax,0x8
c00267b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00267b7:	89 c1                	mov    ecx,eax
c00267b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00267bf:	89 c7                	mov    edi,eax
c00267c1:	c1 ff 17             	sar    edi,0x17
c00267c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00267c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00267cb:	89 f8                	mov    eax,edi
c00267cd:	0f b6 c0             	movzx  eax,al
c00267d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00267d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00267d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00267da:	42                   	inc    edx
c00267db:	80 e2 fe             	and    dl,0xfe
c00267de:	75 7b                	jne    c002685b <__mulsf3+0xc2>
c00267e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00267e4:	74 54                	je     c002683a <__mulsf3+0xa1>
c00267e6:	85 c9                	test   ecx,ecx
c00267e8:	0f 85 64 01 00 00    	jne    c0026952 <__mulsf3+0x1b9>
c00267ee:	8d 57 01             	lea    edx,[edi+0x1]
c00267f1:	80 e2 fe             	and    dl,0xfe
c00267f4:	75 1f                	jne    c0026815 <__mulsf3+0x7c>
c00267f6:	85 c0                	test   eax,eax
c00267f8:	b8 00 00 00 00       	mov    eax,0x0
c00267fd:	74 29                	je     c0026828 <__mulsf3+0x8f>
c00267ff:	53                   	push   ebx
c0026800:	53                   	push   ebx
c0026801:	50                   	push   eax
c0026802:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026805:	e8 96 05 00 00       	call   c0026da0 <__nesf2>
c002680a:	83 c4 10             	add    esp,0x10
c002680d:	85 c0                	test   eax,eax
c002680f:	0f 85 3a 01 00 00    	jne    c002694f <__mulsf3+0x1b6>
c0026815:	85 ff                	test   edi,edi
c0026817:	0f 89 35 01 00 00    	jns    c0026952 <__mulsf3+0x1b9>
c002681d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026823:	e9 2a 01 00 00       	jmp    c0026952 <__mulsf3+0x1b9>
c0026828:	51                   	push   ecx
c0026829:	51                   	push   ecx
c002682a:	50                   	push   eax
c002682b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002682e:	e8 6d 05 00 00       	call   c0026da0 <__nesf2>
c0026833:	83 c4 10             	add    esp,0x10
c0026836:	85 c0                	test   eax,eax
c0026838:	eb 15                	jmp    c002684f <__mulsf3+0xb6>
c002683a:	85 c9                	test   ecx,ecx
c002683c:	74 0b                	je     c0026849 <__mulsf3+0xb0>
c002683e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026841:	01 c9                	add    ecx,ecx
c0026843:	78 16                	js     c002685b <__mulsf3+0xc2>
c0026845:	89 d3                	mov    ebx,edx
c0026847:	eb f5                	jmp    c002683e <__mulsf3+0xa5>
c0026849:	89 f8                	mov    eax,edi
c002684b:	f7 d0                	not    eax
c002684d:	84 c0                	test   al,al
c002684f:	75 c4                	jne    c0026815 <__mulsf3+0x7c>
c0026851:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026856:	e9 f7 00 00 00       	jmp    c0026952 <__mulsf3+0x1b9>
c002685b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002685e:	c1 e6 08             	shl    esi,0x8
c0026861:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026867:	8d 57 01             	lea    edx,[edi+0x1]
c002686a:	80 e2 fe             	and    dl,0xfe
c002686d:	75 63                	jne    c00268d2 <__mulsf3+0x139>
c002686f:	85 c0                	test   eax,eax
c0026871:	74 2f                	je     c00268a2 <__mulsf3+0x109>
c0026873:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026877:	0f 89 d2 00 00 00    	jns    c002694f <__mulsf3+0x1b6>
c002687d:	52                   	push   edx
c002687e:	52                   	push   edx
c002687f:	6a 00                	push   0x0
c0026881:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026884:	e8 dc 04 00 00       	call   c0026d65 <__eqsf2>
c0026889:	83 c4 10             	add    esp,0x10
c002688c:	85 c0                	test   eax,eax
c002688e:	0f 85 bb 00 00 00    	jne    c002694f <__mulsf3+0x1b6>
c0026894:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026897:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002689d:	e9 b0 00 00 00       	jmp    c0026952 <__mulsf3+0x1b9>
c00268a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00268a5:	50                   	push   eax
c00268a6:	50                   	push   eax
c00268a7:	6a 00                	push   0x0
c00268a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268ac:	e8 b4 04 00 00       	call   c0026d65 <__eqsf2>
c00268b1:	83 c4 10             	add    esp,0x10
c00268b4:	85 c0                	test   eax,eax
c00268b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00268b9:	75 0c                	jne    c00268c7 <__mulsf3+0x12e>
c00268bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00268bf:	0f 89 8a 00 00 00    	jns    c002694f <__mulsf3+0x1b6>
c00268c5:	eb cd                	jmp    c0026894 <__mulsf3+0xfb>
c00268c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00268ca:	01 f6                	add    esi,esi
c00268cc:	78 04                	js     c00268d2 <__mulsf3+0x139>
c00268ce:	89 c3                	mov    ebx,eax
c00268d0:	eb f5                	jmp    c00268c7 <__mulsf3+0x12e>
c00268d2:	89 c8                	mov    eax,ecx
c00268d4:	0d 00 00 00 80       	or     eax,0x80000000
c00268d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00268df:	f7 e6                	mul    esi
c00268e1:	85 c0                	test   eax,eax
c00268e3:	0f 95 c0             	setne  al
c00268e6:	0f b6 c0             	movzx  eax,al
c00268e9:	09 c2                	or     edx,eax
c00268eb:	78 03                	js     c00268f0 <__mulsf3+0x157>
c00268ed:	01 d2                	add    edx,edx
c00268ef:	4b                   	dec    ebx
c00268f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00268f6:	7f 22                	jg     c002691a <__mulsf3+0x181>
c00268f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00268fe:	85 db                	test   ebx,ebx
c0026900:	7f 23                	jg     c0026925 <__mulsf3+0x18c>
c0026902:	83 fb e9             	cmp    ebx,0xffffffe9
c0026905:	7c 1a                	jl     c0026921 <__mulsf3+0x188>
c0026907:	81 ca 00 00 00 80    	or     edx,0x80000000
c002690d:	b9 01 00 00 00       	mov    ecx,0x1
c0026912:	29 d9                	sub    ecx,ebx
c0026914:	d3 ea                	shr    edx,cl
c0026916:	31 db                	xor    ebx,ebx
c0026918:	eb 0b                	jmp    c0026925 <__mulsf3+0x18c>
c002691a:	bb ff 00 00 00       	mov    ebx,0xff
c002691f:	eb 02                	jmp    c0026923 <__mulsf3+0x18a>
c0026921:	31 db                	xor    ebx,ebx
c0026923:	31 d2                	xor    edx,edx
c0026925:	89 d0                	mov    eax,edx
c0026927:	c1 e8 08             	shr    eax,0x8
c002692a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002692d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026933:	09 fb                	or     ebx,edi
c0026935:	c1 e3 17             	shl    ebx,0x17
c0026938:	09 c3                	or     ebx,eax
c002693a:	f6 c2 7f             	test   dl,0x7f
c002693d:	0f 95 c1             	setne  cl
c0026940:	09 c8                	or     eax,ecx
c0026942:	83 e0 01             	and    eax,0x1
c0026945:	c1 ea 07             	shr    edx,0x7
c0026948:	21 c2                	and    edx,eax
c002694a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002694d:	eb 03                	jmp    c0026952 <__mulsf3+0x1b9>
c002694f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026952:	89 f0                	mov    eax,esi
c0026954:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026957:	5b                   	pop    ebx
c0026958:	5e                   	pop    esi
c0026959:	5f                   	pop    edi
c002695a:	5d                   	pop    ebp
c002695b:	c3                   	ret    

c002695c <__divsf3>:
c002695c:	55                   	push   ebp
c002695d:	89 e5                	mov    ebp,esp
c002695f:	57                   	push   edi
c0026960:	56                   	push   esi
c0026961:	53                   	push   ebx
c0026962:	83 ec 1c             	sub    esp,0x1c
c0026965:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026968:	89 d8                	mov    eax,ebx
c002696a:	89 d9                	mov    ecx,ebx
c002696c:	c1 f9 17             	sar    ecx,0x17
c002696f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026972:	c1 e0 08             	shl    eax,0x8
c0026975:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002697a:	89 c1                	mov    ecx,eax
c002697c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002697f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026982:	89 c7                	mov    edi,eax
c0026984:	c1 ff 17             	sar    edi,0x17
c0026987:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002698b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002698e:	89 f8                	mov    eax,edi
c0026990:	0f b6 c0             	movzx  eax,al
c0026993:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026996:	29 c6                	sub    esi,eax
c0026998:	83 c6 7f             	add    esi,0x7f
c002699b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002699e:	42                   	inc    edx
c002699f:	80 e2 fe             	and    dl,0xfe
c00269a2:	0f 85 9c 00 00 00    	jne    c0026a44 <__divsf3+0xe8>
c00269a8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00269ac:	74 33                	je     c00269e1 <__divsf3+0x85>
c00269ae:	85 c9                	test   ecx,ecx
c00269b0:	0f 85 c7 01 00 00    	jne    c0026b7d <__divsf3+0x221>
c00269b6:	8d 57 01             	lea    edx,[edi+0x1]
c00269b9:	80 e2 fe             	and    dl,0xfe
c00269bc:	75 2f                	jne    c00269ed <__divsf3+0x91>
c00269be:	85 c0                	test   eax,eax
c00269c0:	74 2b                	je     c00269ed <__divsf3+0x91>
c00269c2:	51                   	push   ecx
c00269c3:	51                   	push   ecx
c00269c4:	6a 00                	push   0x0
c00269c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00269c9:	e8 d2 03 00 00       	call   c0026da0 <__nesf2>
c00269ce:	83 c4 10             	add    esp,0x10
c00269d1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00269d4:	85 c0                	test   eax,eax
c00269d6:	0f 85 a1 01 00 00    	jne    c0026b7d <__divsf3+0x221>
c00269dc:	e9 92 01 00 00       	jmp    c0026b73 <__divsf3+0x217>
c00269e1:	85 c9                	test   ecx,ecx
c00269e3:	75 1b                	jne    c0026a00 <__divsf3+0xa4>
c00269e5:	8d 57 01             	lea    edx,[edi+0x1]
c00269e8:	80 e2 fe             	and    dl,0xfe
c00269eb:	74 1e                	je     c0026a0b <__divsf3+0xaf>
c00269ed:	85 ff                	test   edi,edi
c00269ef:	0f 89 88 01 00 00    	jns    c0026b7d <__divsf3+0x221>
c00269f5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00269fb:	e9 7d 01 00 00       	jmp    c0026b7d <__divsf3+0x221>
c0026a00:	8d 56 ff             	lea    edx,[esi-0x1]
c0026a03:	01 c9                	add    ecx,ecx
c0026a05:	78 3d                	js     c0026a44 <__divsf3+0xe8>
c0026a07:	89 d6                	mov    esi,edx
c0026a09:	eb f5                	jmp    c0026a00 <__divsf3+0xa4>
c0026a0b:	85 c0                	test   eax,eax
c0026a0d:	b8 00 00 00 00       	mov    eax,0x0
c0026a12:	74 18                	je     c0026a2c <__divsf3+0xd0>
c0026a14:	52                   	push   edx
c0026a15:	52                   	push   edx
c0026a16:	50                   	push   eax
c0026a17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a1a:	e8 81 03 00 00       	call   c0026da0 <__nesf2>
c0026a1f:	83 c4 10             	add    esp,0x10
c0026a22:	85 c0                	test   eax,eax
c0026a24:	0f 85 50 01 00 00    	jne    c0026b7a <__divsf3+0x21e>
c0026a2a:	eb c1                	jmp    c00269ed <__divsf3+0x91>
c0026a2c:	56                   	push   esi
c0026a2d:	56                   	push   esi
c0026a2e:	50                   	push   eax
c0026a2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a32:	e8 69 03 00 00       	call   c0026da0 <__nesf2>
c0026a37:	83 c4 10             	add    esp,0x10
c0026a3a:	85 c0                	test   eax,eax
c0026a3c:	0f 84 31 01 00 00    	je     c0026b73 <__divsf3+0x217>
c0026a42:	eb a9                	jmp    c00269ed <__divsf3+0x91>
c0026a44:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026a47:	c1 e3 08             	shl    ebx,0x8
c0026a4a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026a50:	8d 57 01             	lea    edx,[edi+0x1]
c0026a53:	80 e2 fe             	and    dl,0xfe
c0026a56:	75 71                	jne    c0026ac9 <__divsf3+0x16d>
c0026a58:	85 c0                	test   eax,eax
c0026a5a:	ba 00 00 00 00       	mov    edx,0x0
c0026a5f:	74 2f                	je     c0026a90 <__divsf3+0x134>
c0026a61:	51                   	push   ecx
c0026a62:	51                   	push   ecx
c0026a63:	52                   	push   edx
c0026a64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a67:	e8 f9 02 00 00       	call   c0026d65 <__eqsf2>
c0026a6c:	83 c4 10             	add    esp,0x10
c0026a6f:	85 c0                	test   eax,eax
c0026a71:	0f 85 03 01 00 00    	jne    c0026b7a <__divsf3+0x21e>
c0026a77:	31 d2                	xor    edx,edx
c0026a79:	89 d3                	mov    ebx,edx
c0026a7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026a7e:	31 f8                	xor    eax,edi
c0026a80:	0f 89 f7 00 00 00    	jns    c0026b7d <__divsf3+0x221>
c0026a86:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026a8b:	e9 ed 00 00 00       	jmp    c0026b7d <__divsf3+0x221>
c0026a90:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026a93:	50                   	push   eax
c0026a94:	50                   	push   eax
c0026a95:	52                   	push   edx
c0026a96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a99:	e8 c7 02 00 00       	call   c0026d65 <__eqsf2>
c0026a9e:	83 c4 10             	add    esp,0x10
c0026aa1:	85 c0                	test   eax,eax
c0026aa3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026aa6:	75 16                	jne    c0026abe <__divsf3+0x162>
c0026aa8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026aab:	31 fb                	xor    ebx,edi
c0026aad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026ab3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026ab9:	e9 bf 00 00 00       	jmp    c0026b7d <__divsf3+0x221>
c0026abe:	8d 46 01             	lea    eax,[esi+0x1]
c0026ac1:	01 db                	add    ebx,ebx
c0026ac3:	78 04                	js     c0026ac9 <__divsf3+0x16d>
c0026ac5:	89 c6                	mov    esi,eax
c0026ac7:	eb f5                	jmp    c0026abe <__divsf3+0x162>
c0026ac9:	89 c8                	mov    eax,ecx
c0026acb:	0d 00 00 00 80       	or     eax,0x80000000
c0026ad0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ad6:	31 d2                	xor    edx,edx
c0026ad8:	39 d8                	cmp    eax,ebx
c0026ada:	72 07                	jb     c0026ae3 <__divsf3+0x187>
c0026adc:	29 d8                	sub    eax,ebx
c0026ade:	ba 01 00 00 00       	mov    edx,0x1
c0026ae3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026aea:	01 d2                	add    edx,edx
c0026aec:	89 c1                	mov    ecx,eax
c0026aee:	01 c0                	add    eax,eax
c0026af0:	85 c9                	test   ecx,ecx
c0026af2:	78 04                	js     c0026af8 <__divsf3+0x19c>
c0026af4:	39 c3                	cmp    ebx,eax
c0026af6:	77 05                	ja     c0026afd <__divsf3+0x1a1>
c0026af8:	29 d8                	sub    eax,ebx
c0026afa:	83 ca 01             	or     edx,0x1
c0026afd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026b00:	75 e8                	jne    c0026aea <__divsf3+0x18e>
c0026b02:	85 c0                	test   eax,eax
c0026b04:	0f 95 c0             	setne  al
c0026b07:	0f b6 c0             	movzx  eax,al
c0026b0a:	c1 e2 06             	shl    edx,0x6
c0026b0d:	09 c2                	or     edx,eax
c0026b0f:	78 03                	js     c0026b14 <__divsf3+0x1b8>
c0026b11:	01 d2                	add    edx,edx
c0026b13:	4e                   	dec    esi
c0026b14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026b1a:	7f 22                	jg     c0026b3e <__divsf3+0x1e2>
c0026b1c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b22:	85 f6                	test   esi,esi
c0026b24:	7f 23                	jg     c0026b49 <__divsf3+0x1ed>
c0026b26:	83 fe e9             	cmp    esi,0xffffffe9
c0026b29:	7c 1a                	jl     c0026b45 <__divsf3+0x1e9>
c0026b2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b31:	b9 01 00 00 00       	mov    ecx,0x1
c0026b36:	29 f1                	sub    ecx,esi
c0026b38:	d3 ea                	shr    edx,cl
c0026b3a:	31 f6                	xor    esi,esi
c0026b3c:	eb 0b                	jmp    c0026b49 <__divsf3+0x1ed>
c0026b3e:	be ff 00 00 00       	mov    esi,0xff
c0026b43:	eb 02                	jmp    c0026b47 <__divsf3+0x1eb>
c0026b45:	31 f6                	xor    esi,esi
c0026b47:	31 d2                	xor    edx,edx
c0026b49:	89 d0                	mov    eax,edx
c0026b4b:	c1 e8 08             	shr    eax,0x8
c0026b4e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026b51:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026b57:	09 fe                	or     esi,edi
c0026b59:	c1 e6 17             	shl    esi,0x17
c0026b5c:	09 c6                	or     esi,eax
c0026b5e:	f6 c2 7f             	test   dl,0x7f
c0026b61:	0f 95 c1             	setne  cl
c0026b64:	09 c8                	or     eax,ecx
c0026b66:	83 e0 01             	and    eax,0x1
c0026b69:	c1 ea 07             	shr    edx,0x7
c0026b6c:	21 c2                	and    edx,eax
c0026b6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026b71:	eb 0a                	jmp    c0026b7d <__divsf3+0x221>
c0026b73:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026b78:	eb 03                	jmp    c0026b7d <__divsf3+0x221>
c0026b7a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b7d:	89 d8                	mov    eax,ebx
c0026b7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026b82:	5b                   	pop    ebx
c0026b83:	5e                   	pop    esi
c0026b84:	5f                   	pop    edi
c0026b85:	5d                   	pop    ebp
c0026b86:	c3                   	ret    

c0026b87 <__floatsisf>:
c0026b87:	55                   	push   ebp
c0026b88:	89 e5                	mov    ebp,esp
c0026b8a:	53                   	push   ebx
c0026b8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b8e:	85 d2                	test   edx,edx
c0026b90:	7e 2b                	jle    c0026bbd <__floatsisf+0x36>
c0026b92:	0f bd ca             	bsr    ecx,edx
c0026b95:	83 f1 1f             	xor    ecx,0x1f
c0026b98:	d3 e2                	shl    edx,cl
c0026b9a:	89 d0                	mov    eax,edx
c0026b9c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ba1:	89 c3                	mov    ebx,eax
c0026ba3:	c1 eb 08             	shr    ebx,0x8
c0026ba6:	80 e2 7f             	and    dl,0x7f
c0026ba9:	0f 95 c2             	setne  dl
c0026bac:	09 da                	or     edx,ebx
c0026bae:	83 e2 01             	and    edx,0x1
c0026bb1:	c1 e8 07             	shr    eax,0x7
c0026bb4:	21 c2                	and    edx,eax
c0026bb6:	b8 9e 00 00 00       	mov    eax,0x9e
c0026bbb:	eb 32                	jmp    c0026bef <__floatsisf+0x68>
c0026bbd:	b8 00 00 00 00       	mov    eax,0x0
c0026bc2:	74 34                	je     c0026bf8 <__floatsisf+0x71>
c0026bc4:	f7 da                	neg    edx
c0026bc6:	0f bd ca             	bsr    ecx,edx
c0026bc9:	83 f1 1f             	xor    ecx,0x1f
c0026bcc:	d3 e2                	shl    edx,cl
c0026bce:	89 d0                	mov    eax,edx
c0026bd0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bd5:	89 c3                	mov    ebx,eax
c0026bd7:	c1 eb 08             	shr    ebx,0x8
c0026bda:	80 e2 7f             	and    dl,0x7f
c0026bdd:	0f 95 c2             	setne  dl
c0026be0:	09 da                	or     edx,ebx
c0026be2:	83 e2 01             	and    edx,0x1
c0026be5:	c1 e8 07             	shr    eax,0x7
c0026be8:	21 c2                	and    edx,eax
c0026bea:	b8 9e 01 00 00       	mov    eax,0x19e
c0026bef:	29 c8                	sub    eax,ecx
c0026bf1:	c1 e0 17             	shl    eax,0x17
c0026bf4:	09 d8                	or     eax,ebx
c0026bf6:	01 d0                	add    eax,edx
c0026bf8:	5b                   	pop    ebx
c0026bf9:	5d                   	pop    ebp
c0026bfa:	c3                   	ret    

c0026bfb <__floatunsisf>:
c0026bfb:	55                   	push   ebp
c0026bfc:	89 e5                	mov    ebp,esp
c0026bfe:	53                   	push   ebx
c0026bff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026c02:	31 c0                	xor    eax,eax
c0026c04:	85 d2                	test   edx,edx
c0026c06:	74 32                	je     c0026c3a <__floatunsisf+0x3f>
c0026c08:	0f bd ca             	bsr    ecx,edx
c0026c0b:	83 f1 1f             	xor    ecx,0x1f
c0026c0e:	d3 e2                	shl    edx,cl
c0026c10:	89 d0                	mov    eax,edx
c0026c12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c17:	89 c3                	mov    ebx,eax
c0026c19:	c1 eb 08             	shr    ebx,0x8
c0026c1c:	80 e2 7f             	and    dl,0x7f
c0026c1f:	0f 95 c2             	setne  dl
c0026c22:	09 da                	or     edx,ebx
c0026c24:	83 e2 01             	and    edx,0x1
c0026c27:	c1 e8 07             	shr    eax,0x7
c0026c2a:	21 c2                	and    edx,eax
c0026c2c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026c31:	29 c8                	sub    eax,ecx
c0026c33:	c1 e0 17             	shl    eax,0x17
c0026c36:	09 d8                	or     eax,ebx
c0026c38:	01 d0                	add    eax,edx
c0026c3a:	5b                   	pop    ebx
c0026c3b:	5d                   	pop    ebp
c0026c3c:	c3                   	ret    

c0026c3d <__fixsfsi>:
c0026c3d:	55                   	push   ebp
c0026c3e:	89 e5                	mov    ebp,esp
c0026c40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026c43:	89 d1                	mov    ecx,edx
c0026c45:	c1 e1 08             	shl    ecx,0x8
c0026c48:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026c4e:	c1 fa 17             	sar    edx,0x17
c0026c51:	78 1c                	js     c0026c6f <__fixsfsi+0x32>
c0026c53:	83 ea 7f             	sub    edx,0x7f
c0026c56:	31 c0                	xor    eax,eax
c0026c58:	83 fa 1e             	cmp    edx,0x1e
c0026c5b:	77 40                	ja     c0026c9d <__fixsfsi+0x60>
c0026c5d:	89 c8                	mov    eax,ecx
c0026c5f:	0d 00 00 00 80       	or     eax,0x80000000
c0026c64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c69:	29 d1                	sub    ecx,edx
c0026c6b:	d3 e8                	shr    eax,cl
c0026c6d:	eb 2e                	jmp    c0026c9d <__fixsfsi+0x60>
c0026c6f:	31 c0                	xor    eax,eax
c0026c71:	81 c2 81 00 00 00    	add    edx,0x81
c0026c77:	78 24                	js     c0026c9d <__fixsfsi+0x60>
c0026c79:	83 fa 1e             	cmp    edx,0x1e
c0026c7c:	7e 09                	jle    c0026c87 <__fixsfsi+0x4a>
c0026c7e:	83 fa 1f             	cmp    edx,0x1f
c0026c81:	75 18                	jne    c0026c9b <__fixsfsi+0x5e>
c0026c83:	85 c9                	test   ecx,ecx
c0026c85:	75 14                	jne    c0026c9b <__fixsfsi+0x5e>
c0026c87:	89 c8                	mov    eax,ecx
c0026c89:	0d 00 00 00 80       	or     eax,0x80000000
c0026c8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c93:	29 d1                	sub    ecx,edx
c0026c95:	d3 e8                	shr    eax,cl
c0026c97:	f7 d8                	neg    eax
c0026c99:	eb 02                	jmp    c0026c9d <__fixsfsi+0x60>
c0026c9b:	31 c0                	xor    eax,eax
c0026c9d:	5d                   	pop    ebp
c0026c9e:	c3                   	ret    

c0026c9f <__fixunssfsi>:
c0026c9f:	55                   	push   ebp
c0026ca0:	89 e5                	mov    ebp,esp
c0026ca2:	53                   	push   ebx
c0026ca3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ca6:	89 d3                	mov    ebx,edx
c0026ca8:	c1 fb 17             	sar    ebx,0x17
c0026cab:	83 eb 7f             	sub    ebx,0x7f
c0026cae:	31 c0                	xor    eax,eax
c0026cb0:	83 fb 1f             	cmp    ebx,0x1f
c0026cb3:	77 18                	ja     c0026ccd <__fixunssfsi+0x2e>
c0026cb5:	89 d0                	mov    eax,edx
c0026cb7:	c1 e0 08             	shl    eax,0x8
c0026cba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026cbf:	0d 00 00 00 80       	or     eax,0x80000000
c0026cc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cc9:	29 d9                	sub    ecx,ebx
c0026ccb:	d3 e8                	shr    eax,cl
c0026ccd:	5b                   	pop    ebx
c0026cce:	5d                   	pop    ebp
c0026ccf:	c3                   	ret    

c0026cd0 <__cmpsf2>:
c0026cd0:	55                   	push   ebp
c0026cd1:	89 e5                	mov    ebp,esp
c0026cd3:	57                   	push   edi
c0026cd4:	56                   	push   esi
c0026cd5:	53                   	push   ebx
c0026cd6:	83 ec 24             	sub    esp,0x24
c0026cd9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cdf:	e8 4f 10 00 00       	call   c0027d33 <__truncdfsf2>
c0026ce4:	5a                   	pop    edx
c0026ce5:	59                   	pop    ecx
c0026ce6:	89 c3                	mov    ebx,eax
c0026ce8:	c1 e8 17             	shr    eax,0x17
c0026ceb:	0f b6 f0             	movzx  esi,al
c0026cee:	89 d8                	mov    eax,ebx
c0026cf0:	c1 e8 1f             	shr    eax,0x1f
c0026cf3:	31 c6                	xor    esi,eax
c0026cf5:	c1 e3 08             	shl    ebx,0x8
c0026cf8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026cfb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026cfe:	e8 30 10 00 00       	call   c0027d33 <__truncdfsf2>
c0026d03:	83 c4 10             	add    esp,0x10
c0026d06:	89 c1                	mov    ecx,eax
c0026d08:	c1 e9 17             	shr    ecx,0x17
c0026d0b:	0f b6 c9             	movzx  ecx,cl
c0026d0e:	89 c7                	mov    edi,eax
c0026d10:	c1 ef 1f             	shr    edi,0x1f
c0026d13:	89 ca                	mov    edx,ecx
c0026d15:	31 fa                	xor    edx,edi
c0026d17:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026d1a:	c1 e0 08             	shl    eax,0x8
c0026d1d:	89 c2                	mov    edx,eax
c0026d1f:	89 d8                	mov    eax,ebx
c0026d21:	09 d0                	or     eax,edx
c0026d23:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d28:	09 f0                	or     eax,esi
c0026d2a:	75 08                	jne    c0026d34 <__cmpsf2+0x64>
c0026d2c:	31 c0                	xor    eax,eax
c0026d2e:	39 f9                	cmp    ecx,edi
c0026d30:	75 0c                	jne    c0026d3e <__cmpsf2+0x6e>
c0026d32:	eb 29                	jmp    c0026d5d <__cmpsf2+0x8d>
c0026d34:	b8 01 00 00 00       	mov    eax,0x1
c0026d39:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026d3c:	7f 1f                	jg     c0026d5d <__cmpsf2+0x8d>
c0026d3e:	83 c8 ff             	or     eax,0xffffffff
c0026d41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026d44:	7c 17                	jl     c0026d5d <__cmpsf2+0x8d>
c0026d46:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d4c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026d52:	b8 01 00 00 00       	mov    eax,0x1
c0026d57:	39 d3                	cmp    ebx,edx
c0026d59:	77 02                	ja     c0026d5d <__cmpsf2+0x8d>
c0026d5b:	19 c0                	sbb    eax,eax
c0026d5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026d60:	5b                   	pop    ebx
c0026d61:	5e                   	pop    esi
c0026d62:	5f                   	pop    edi
c0026d63:	5d                   	pop    ebp
c0026d64:	c3                   	ret    

c0026d65 <__eqsf2>:
c0026d65:	55                   	push   ebp
c0026d66:	89 e5                	mov    ebp,esp
c0026d68:	83 ec 24             	sub    esp,0x24
c0026d6b:	6a 01                	push   0x1
c0026d6d:	83 ec 0c             	sub    esp,0xc
c0026d70:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d73:	e8 df 10 00 00       	call   c0027e57 <__extendsfdf2>
c0026d78:	83 c4 10             	add    esp,0x10
c0026d7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026d7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026d81:	52                   	push   edx
c0026d82:	50                   	push   eax
c0026d83:	50                   	push   eax
c0026d84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d87:	e8 cb 10 00 00       	call   c0027e57 <__extendsfdf2>
c0026d8c:	59                   	pop    ecx
c0026d8d:	59                   	pop    ecx
c0026d8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026d91:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026d94:	52                   	push   edx
c0026d95:	50                   	push   eax
c0026d96:	e8 35 ff ff ff       	call   c0026cd0 <__cmpsf2>
c0026d9b:	83 c4 20             	add    esp,0x20
c0026d9e:	c9                   	leave  
c0026d9f:	c3                   	ret    

c0026da0 <__nesf2>:
c0026da0:	eb c3                	jmp    c0026d65 <__eqsf2>

c0026da2 <__gtsf2>:
c0026da2:	55                   	push   ebp
c0026da3:	89 e5                	mov    ebp,esp
c0026da5:	83 ec 24             	sub    esp,0x24
c0026da8:	6a ff                	push   0xffffffff
c0026daa:	83 ec 0c             	sub    esp,0xc
c0026dad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026db0:	e8 a2 10 00 00       	call   c0027e57 <__extendsfdf2>
c0026db5:	83 c4 10             	add    esp,0x10
c0026db8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026dbb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026dbe:	52                   	push   edx
c0026dbf:	50                   	push   eax
c0026dc0:	50                   	push   eax
c0026dc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dc4:	e8 8e 10 00 00       	call   c0027e57 <__extendsfdf2>
c0026dc9:	59                   	pop    ecx
c0026dca:	59                   	pop    ecx
c0026dcb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026dce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026dd1:	52                   	push   edx
c0026dd2:	50                   	push   eax
c0026dd3:	e8 f8 fe ff ff       	call   c0026cd0 <__cmpsf2>
c0026dd8:	83 c4 20             	add    esp,0x20
c0026ddb:	c9                   	leave  
c0026ddc:	c3                   	ret    

c0026ddd <__gesf2>:
c0026ddd:	eb c3                	jmp    c0026da2 <__gtsf2>

c0026ddf <__ltsf2>:
c0026ddf:	eb 84                	jmp    c0026d65 <__eqsf2>

c0026de1 <__lesf2>:
c0026de1:	eb 82                	jmp    c0026d65 <__eqsf2>

c0026de3 <__adddf3>:
c0026de3:	55                   	push   ebp
c0026de4:	89 e5                	mov    ebp,esp
c0026de6:	57                   	push   edi
c0026de7:	56                   	push   esi
c0026de8:	53                   	push   ebx
c0026de9:	83 ec 24             	sub    esp,0x24
c0026dec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026def:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026df2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026df5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026df8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026dfb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026dfe:	89 c8                	mov    eax,ecx
c0026e00:	89 ce                	mov    esi,ecx
c0026e02:	c1 fe 14             	sar    esi,0x14
c0026e05:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026e08:	89 fb                	mov    ebx,edi
c0026e0a:	89 fa                	mov    edx,edi
c0026e0c:	c1 e2 0b             	shl    edx,0xb
c0026e0f:	c1 e0 0b             	shl    eax,0xb
c0026e12:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026e17:	c1 eb 15             	shr    ebx,0x15
c0026e1a:	09 d8                	or     eax,ebx
c0026e1c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026e1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026e22:	c1 fe 14             	sar    esi,0x14
c0026e25:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026e28:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e2b:	89 f3                	mov    ebx,esi
c0026e2d:	c1 e3 0b             	shl    ebx,0xb
c0026e30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026e33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e36:	c1 e3 0b             	shl    ebx,0xb
c0026e39:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026e3f:	c1 ee 15             	shr    esi,0x15
c0026e42:	09 f3                	or     ebx,esi
c0026e44:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026e47:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026e4a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026e4d:	0f 88 5f 02 00 00    	js     c00270b2 <__adddf3+0x2cf>
c0026e53:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e56:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026e59:	85 db                	test   ebx,ebx
c0026e5b:	0f 8e c7 00 00 00    	jle    c0026f28 <__adddf3+0x145>
c0026e61:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026e68:	75 1a                	jne    c0026e84 <__adddf3+0xa1>
c0026e6a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e6d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026e70:	0f 84 b2 05 00 00    	je     c0027428 <__adddf3+0x645>
c0026e76:	4b                   	dec    ebx
c0026e77:	75 23                	jne    c0026e9c <__adddf3+0xb9>
c0026e79:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026e7c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026e7f:	e9 99 00 00 00       	jmp    c0026f1d <__adddf3+0x13a>
c0026e84:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026e87:	f7 d6                	not    esi
c0026e89:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026e8f:	0f 84 93 05 00 00    	je     c0027428 <__adddf3+0x645>
c0026e95:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026e9c:	83 fb 1f             	cmp    ebx,0x1f
c0026e9f:	7e 42                	jle    c0026ee3 <__adddf3+0x100>
c0026ea1:	83 fb 3f             	cmp    ebx,0x3f
c0026ea4:	0f 8f 7e 05 00 00    	jg     c0027428 <__adddf3+0x645>
c0026eaa:	83 e3 1f             	and    ebx,0x1f
c0026ead:	89 d9                	mov    ecx,ebx
c0026eaf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026eb2:	d3 ef                	shr    edi,cl
c0026eb4:	31 db                	xor    ebx,ebx
c0026eb6:	85 c9                	test   ecx,ecx
c0026eb8:	74 15                	je     c0026ecf <__adddf3+0xec>
c0026eba:	be 20 00 00 00       	mov    esi,0x20
c0026ebf:	29 ce                	sub    esi,ecx
c0026ec1:	89 f1                	mov    ecx,esi
c0026ec3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ec6:	d3 e6                	shl    esi,cl
c0026ec8:	31 db                	xor    ebx,ebx
c0026eca:	85 f6                	test   esi,esi
c0026ecc:	0f 95 c3             	setne  bl
c0026ecf:	31 c9                	xor    ecx,ecx
c0026ed1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ed5:	0f 95 c1             	setne  cl
c0026ed8:	09 cf                	or     edi,ecx
c0026eda:	09 fb                	or     ebx,edi
c0026edc:	01 da                	add    edx,ebx
c0026ede:	83 d0 00             	adc    eax,0x0
c0026ee1:	eb 3a                	jmp    c0026f1d <__adddf3+0x13a>
c0026ee3:	bf 20 00 00 00       	mov    edi,0x20
c0026ee8:	29 df                	sub    edi,ebx
c0026eea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026eed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ef0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026ef3:	d3 e6                	shl    esi,cl
c0026ef5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026ef8:	88 d9                	mov    cl,bl
c0026efa:	d3 ef                	shr    edi,cl
c0026efc:	09 fe                	or     esi,edi
c0026efe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026f01:	88 d9                	mov    cl,bl
c0026f03:	d3 ef                	shr    edi,cl
c0026f05:	89 fb                	mov    ebx,edi
c0026f07:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026f0a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026f0d:	d3 e7                	shl    edi,cl
c0026f0f:	85 ff                	test   edi,edi
c0026f11:	0f 95 c1             	setne  cl
c0026f14:	0f b6 c9             	movzx  ecx,cl
c0026f17:	09 ce                	or     esi,ecx
c0026f19:	01 f2                	add    edx,esi
c0026f1b:	11 d8                	adc    eax,ebx
c0026f1d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026f20:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026f23:	e9 52 01 00 00       	jmp    c002707a <__adddf3+0x297>
c0026f28:	0f 84 d5 00 00 00    	je     c0027003 <__adddf3+0x220>
c0026f2e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026f31:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026f34:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026f37:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026f3a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026f41:	75 20                	jne    c0026f63 <__adddf3+0x180>
c0026f43:	89 d6                	mov    esi,edx
c0026f45:	09 c6                	or     esi,eax
c0026f47:	0f 84 db 04 00 00    	je     c0027428 <__adddf3+0x645>
c0026f4d:	4b                   	dec    ebx
c0026f4e:	75 29                	jne    c0026f79 <__adddf3+0x196>
c0026f50:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f53:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f56:	01 d1                	add    ecx,edx
c0026f58:	11 c6                	adc    esi,eax
c0026f5a:	89 f0                	mov    eax,esi
c0026f5c:	89 ca                	mov    edx,ecx
c0026f5e:	e9 17 01 00 00       	jmp    c002707a <__adddf3+0x297>
c0026f63:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026f66:	f7 d6                	not    esi
c0026f68:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026f6e:	0f 84 b4 04 00 00    	je     c0027428 <__adddf3+0x645>
c0026f74:	0d 00 00 00 80       	or     eax,0x80000000
c0026f79:	83 fb 1f             	cmp    ebx,0x1f
c0026f7c:	7e 48                	jle    c0026fc6 <__adddf3+0x1e3>
c0026f7e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026f81:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026f84:	83 fb 3f             	cmp    ebx,0x3f
c0026f87:	0f 8f 9b 04 00 00    	jg     c0027428 <__adddf3+0x645>
c0026f8d:	83 e3 1f             	and    ebx,0x1f
c0026f90:	89 d9                	mov    ecx,ebx
c0026f92:	89 c7                	mov    edi,eax
c0026f94:	d3 ef                	shr    edi,cl
c0026f96:	31 db                	xor    ebx,ebx
c0026f98:	85 c9                	test   ecx,ecx
c0026f9a:	74 12                	je     c0026fae <__adddf3+0x1cb>
c0026f9c:	be 20 00 00 00       	mov    esi,0x20
c0026fa1:	29 ce                	sub    esi,ecx
c0026fa3:	89 f1                	mov    ecx,esi
c0026fa5:	d3 e0                	shl    eax,cl
c0026fa7:	31 db                	xor    ebx,ebx
c0026fa9:	85 c0                	test   eax,eax
c0026fab:	0f 95 c3             	setne  bl
c0026fae:	31 c0                	xor    eax,eax
c0026fb0:	85 d2                	test   edx,edx
c0026fb2:	0f 95 c0             	setne  al
c0026fb5:	09 c7                	or     edi,eax
c0026fb7:	09 fb                	or     ebx,edi
c0026fb9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026fbc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026fbf:	01 da                	add    edx,ebx
c0026fc1:	83 d6 00             	adc    esi,0x0
c0026fc4:	eb 39                	jmp    c0026fff <__adddf3+0x21c>
c0026fc6:	be 20 00 00 00       	mov    esi,0x20
c0026fcb:	29 de                	sub    esi,ebx
c0026fcd:	89 c7                	mov    edi,eax
c0026fcf:	89 f1                	mov    ecx,esi
c0026fd1:	d3 e7                	shl    edi,cl
c0026fd3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026fd6:	89 d7                	mov    edi,edx
c0026fd8:	88 d9                	mov    cl,bl
c0026fda:	d3 ef                	shr    edi,cl
c0026fdc:	89 f9                	mov    ecx,edi
c0026fde:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026fe1:	09 cf                	or     edi,ecx
c0026fe3:	88 d9                	mov    cl,bl
c0026fe5:	d3 e8                	shr    eax,cl
c0026fe7:	89 f1                	mov    ecx,esi
c0026fe9:	d3 e2                	shl    edx,cl
c0026feb:	85 d2                	test   edx,edx
c0026fed:	0f 95 c2             	setne  dl
c0026ff0:	0f b6 d2             	movzx  edx,dl
c0026ff3:	09 d7                	or     edi,edx
c0026ff5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ff8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026ffb:	01 fa                	add    edx,edi
c0026ffd:	11 c6                	adc    esi,eax
c0026fff:	89 f0                	mov    eax,esi
c0027001:	eb 77                	jmp    c002707a <__adddf3+0x297>
c0027003:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027006:	46                   	inc    esi
c0027007:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002700a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027010:	75 41                	jne    c0027053 <__adddf3+0x270>
c0027012:	89 d3                	mov    ebx,edx
c0027014:	09 c3                	or     ebx,eax
c0027016:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002701d:	75 27                	jne    c0027046 <__adddf3+0x263>
c002701f:	85 db                	test   ebx,ebx
c0027021:	0f 84 fb 03 00 00    	je     c0027422 <__adddf3+0x63f>
c0027027:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002702a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002702d:	0f 84 f5 03 00 00    	je     c0027428 <__adddf3+0x645>
c0027033:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027036:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027039:	85 c0                	test   eax,eax
c002703b:	0f 89 91 03 00 00    	jns    c00273d2 <__adddf3+0x5ef>
c0027041:	e9 85 03 00 00       	jmp    c00273cb <__adddf3+0x5e8>
c0027046:	85 db                	test   ebx,ebx
c0027048:	0f 85 da 03 00 00    	jne    c0027428 <__adddf3+0x645>
c002704e:	e9 cf 03 00 00       	jmp    c0027422 <__adddf3+0x63f>
c0027053:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027056:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027059:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002705c:	f7 d1                	not    ecx
c002705e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027064:	0f 84 70 03 00 00    	je     c00273da <__adddf3+0x5f7>
c002706a:	d1 ea                	shr    edx,1
c002706c:	89 c1                	mov    ecx,eax
c002706e:	c1 e1 1f             	shl    ecx,0x1f
c0027071:	09 ca                	or     edx,ecx
c0027073:	d1 e8                	shr    eax,1
c0027075:	e9 6f 03 00 00       	jmp    c00273e9 <__adddf3+0x606>
c002707a:	85 c0                	test   eax,eax
c002707c:	0f 89 67 03 00 00    	jns    c00273e9 <__adddf3+0x606>
c0027082:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027085:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027088:	f7 d1                	not    ecx
c002708a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027090:	0f 84 44 03 00 00    	je     c00273da <__adddf3+0x5f7>
c0027096:	89 d1                	mov    ecx,edx
c0027098:	d1 e9                	shr    ecx,1
c002709a:	83 e2 01             	and    edx,0x1
c002709d:	09 ca                	or     edx,ecx
c002709f:	89 c1                	mov    ecx,eax
c00270a1:	c1 e1 1f             	shl    ecx,0x1f
c00270a4:	09 ca                	or     edx,ecx
c00270a6:	d1 e8                	shr    eax,1
c00270a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00270ad:	e9 37 03 00 00       	jmp    c00273e9 <__adddf3+0x606>
c00270b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00270b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00270bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00270be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00270c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00270c7:	29 de                	sub    esi,ebx
c00270c9:	85 f6                	test   esi,esi
c00270cb:	0f 8e bd 00 00 00    	jle    c002718e <__adddf3+0x3ab>
c00270d1:	85 db                	test   ebx,ebx
c00270d3:	75 17                	jne    c00270ec <__adddf3+0x309>
c00270d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00270d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00270db:	0f 84 47 03 00 00    	je     c0027428 <__adddf3+0x645>
c00270e1:	4e                   	dec    esi
c00270e2:	75 20                	jne    c0027104 <__adddf3+0x321>
c00270e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00270e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00270ea:	eb 5b                	jmp    c0027147 <__adddf3+0x364>
c00270ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270ef:	f7 d3                	not    ebx
c00270f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00270f7:	0f 84 2b 03 00 00    	je     c0027428 <__adddf3+0x645>
c00270fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027104:	83 fe 1f             	cmp    esi,0x1f
c0027107:	7e 49                	jle    c0027152 <__adddf3+0x36f>
c0027109:	83 fe 3f             	cmp    esi,0x3f
c002710c:	0f 8f 16 03 00 00    	jg     c0027428 <__adddf3+0x645>
c0027112:	83 e6 1f             	and    esi,0x1f
c0027115:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027118:	89 f1                	mov    ecx,esi
c002711a:	d3 ef                	shr    edi,cl
c002711c:	31 db                	xor    ebx,ebx
c002711e:	85 f6                	test   esi,esi
c0027120:	74 13                	je     c0027135 <__adddf3+0x352>
c0027122:	b9 20 00 00 00       	mov    ecx,0x20
c0027127:	29 f1                	sub    ecx,esi
c0027129:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002712c:	d3 e6                	shl    esi,cl
c002712e:	31 db                	xor    ebx,ebx
c0027130:	85 f6                	test   esi,esi
c0027132:	0f 95 c3             	setne  bl
c0027135:	31 c9                	xor    ecx,ecx
c0027137:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002713b:	0f 95 c1             	setne  cl
c002713e:	09 cf                	or     edi,ecx
c0027140:	09 fb                	or     ebx,edi
c0027142:	29 da                	sub    edx,ebx
c0027144:	83 d8 00             	sbb    eax,0x0
c0027147:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002714a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002714d:	e9 aa 01 00 00       	jmp    c00272fc <__adddf3+0x519>
c0027152:	bf 20 00 00 00       	mov    edi,0x20
c0027157:	29 f7                	sub    edi,esi
c0027159:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002715c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002715f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027162:	d3 e3                	shl    ebx,cl
c0027164:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027167:	89 f1                	mov    ecx,esi
c0027169:	d3 ef                	shr    edi,cl
c002716b:	09 fb                	or     ebx,edi
c002716d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027170:	89 f1                	mov    ecx,esi
c0027172:	d3 ef                	shr    edi,cl
c0027174:	89 fe                	mov    esi,edi
c0027176:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027179:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002717c:	d3 e7                	shl    edi,cl
c002717e:	85 ff                	test   edi,edi
c0027180:	0f 95 c1             	setne  cl
c0027183:	0f b6 c9             	movzx  ecx,cl
c0027186:	09 cb                	or     ebx,ecx
c0027188:	29 da                	sub    edx,ebx
c002718a:	19 f0                	sbb    eax,esi
c002718c:	eb b9                	jmp    c0027147 <__adddf3+0x364>
c002718e:	0f 84 cd 00 00 00    	je     c0027261 <__adddf3+0x47e>
c0027194:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027197:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002719a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002719d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00271a1:	75 1b                	jne    c00271be <__adddf3+0x3db>
c00271a3:	89 d6                	mov    esi,edx
c00271a5:	09 c6                	or     esi,eax
c00271a7:	0f 84 7b 02 00 00    	je     c0027428 <__adddf3+0x645>
c00271ad:	4b                   	dec    ebx
c00271ae:	75 24                	jne    c00271d4 <__adddf3+0x3f1>
c00271b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271b6:	29 d1                	sub    ecx,edx
c00271b8:	19 c6                	sbb    esi,eax
c00271ba:	89 ca                	mov    edx,ecx
c00271bc:	eb 61                	jmp    c002721f <__adddf3+0x43c>
c00271be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00271c1:	f7 d6                	not    esi
c00271c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00271c9:	0f 84 59 02 00 00    	je     c0027428 <__adddf3+0x645>
c00271cf:	0d 00 00 00 80       	or     eax,0x80000000
c00271d4:	83 fb 1f             	cmp    ebx,0x1f
c00271d7:	7e 4d                	jle    c0027226 <__adddf3+0x443>
c00271d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00271dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00271df:	83 fb 3f             	cmp    ebx,0x3f
c00271e2:	0f 8f 40 02 00 00    	jg     c0027428 <__adddf3+0x645>
c00271e8:	83 e3 1f             	and    ebx,0x1f
c00271eb:	89 d9                	mov    ecx,ebx
c00271ed:	89 c7                	mov    edi,eax
c00271ef:	d3 ef                	shr    edi,cl
c00271f1:	31 db                	xor    ebx,ebx
c00271f3:	85 c9                	test   ecx,ecx
c00271f5:	74 12                	je     c0027209 <__adddf3+0x426>
c00271f7:	be 20 00 00 00       	mov    esi,0x20
c00271fc:	29 ce                	sub    esi,ecx
c00271fe:	89 f1                	mov    ecx,esi
c0027200:	d3 e0                	shl    eax,cl
c0027202:	31 db                	xor    ebx,ebx
c0027204:	85 c0                	test   eax,eax
c0027206:	0f 95 c3             	setne  bl
c0027209:	31 c0                	xor    eax,eax
c002720b:	85 d2                	test   edx,edx
c002720d:	0f 95 c0             	setne  al
c0027210:	09 c7                	or     edi,eax
c0027212:	09 fb                	or     ebx,edi
c0027214:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027217:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002721a:	29 da                	sub    edx,ebx
c002721c:	83 de 00             	sbb    esi,0x0
c002721f:	89 f0                	mov    eax,esi
c0027221:	e9 d6 00 00 00       	jmp    c00272fc <__adddf3+0x519>
c0027226:	be 20 00 00 00       	mov    esi,0x20
c002722b:	29 de                	sub    esi,ebx
c002722d:	89 c7                	mov    edi,eax
c002722f:	89 f1                	mov    ecx,esi
c0027231:	d3 e7                	shl    edi,cl
c0027233:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027236:	89 d7                	mov    edi,edx
c0027238:	88 d9                	mov    cl,bl
c002723a:	d3 ef                	shr    edi,cl
c002723c:	89 f9                	mov    ecx,edi
c002723e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027241:	09 cf                	or     edi,ecx
c0027243:	88 d9                	mov    cl,bl
c0027245:	d3 e8                	shr    eax,cl
c0027247:	89 f1                	mov    ecx,esi
c0027249:	d3 e2                	shl    edx,cl
c002724b:	85 d2                	test   edx,edx
c002724d:	0f 95 c2             	setne  dl
c0027250:	0f b6 d2             	movzx  edx,dl
c0027253:	09 d7                	or     edi,edx
c0027255:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027258:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002725b:	29 fa                	sub    edx,edi
c002725d:	19 c6                	sbb    esi,eax
c002725f:	eb be                	jmp    c002721f <__adddf3+0x43c>
c0027261:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027264:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027267:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002726d:	75 6a                	jne    c00272d9 <__adddf3+0x4f6>
c002726f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027273:	75 58                	jne    c00272cd <__adddf3+0x4ea>
c0027275:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027278:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002727b:	89 d6                	mov    esi,edx
c002727d:	09 c6                	or     esi,eax
c002727f:	75 17                	jne    c0027298 <__adddf3+0x4b5>
c0027281:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027284:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027287:	85 db                	test   ebx,ebx
c0027289:	0f 85 99 01 00 00    	jne    c0027428 <__adddf3+0x645>
c002728f:	31 ff                	xor    edi,edi
c0027291:	31 c9                	xor    ecx,ecx
c0027293:	e9 90 01 00 00       	jmp    c0027428 <__adddf3+0x645>
c0027298:	85 db                	test   ebx,ebx
c002729a:	0f 84 88 01 00 00    	je     c0027428 <__adddf3+0x645>
c00272a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00272a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00272a6:	85 c0                	test   eax,eax
c00272a8:	79 10                	jns    c00272ba <__adddf3+0x4d7>
c00272aa:	31 c9                	xor    ecx,ecx
c00272ac:	f7 da                	neg    edx
c00272ae:	0f 95 c1             	setne  cl
c00272b1:	01 c8                	add    eax,ecx
c00272b3:	f7 d8                	neg    eax
c00272b5:	e9 2f 01 00 00       	jmp    c00273e9 <__adddf3+0x606>
c00272ba:	31 ff                	xor    edi,edi
c00272bc:	31 c9                	xor    ecx,ecx
c00272be:	89 c3                	mov    ebx,eax
c00272c0:	09 d3                	or     ebx,edx
c00272c2:	0f 84 60 01 00 00    	je     c0027428 <__adddf3+0x645>
c00272c8:	e9 05 01 00 00       	jmp    c00273d2 <__adddf3+0x5ef>
c00272cd:	31 ff                	xor    edi,edi
c00272cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00272d4:	e9 4f 01 00 00       	jmp    c0027428 <__adddf3+0x645>
c00272d9:	89 c1                	mov    ecx,eax
c00272db:	89 d0                	mov    eax,edx
c00272dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00272e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00272e3:	89 ca                	mov    edx,ecx
c00272e5:	85 c9                	test   ecx,ecx
c00272e7:	79 2c                	jns    c0027315 <__adddf3+0x532>
c00272e9:	31 c9                	xor    ecx,ecx
c00272eb:	f7 d8                	neg    eax
c00272ed:	0f 95 c1             	setne  cl
c00272f0:	01 ca                	add    edx,ecx
c00272f2:	f7 da                	neg    edx
c00272f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00272f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00272fa:	eb 19                	jmp    c0027315 <__adddf3+0x532>
c00272fc:	85 c0                	test   eax,eax
c00272fe:	0f 89 e5 00 00 00    	jns    c00273e9 <__adddf3+0x606>
c0027304:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027309:	89 c1                	mov    ecx,eax
c002730b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002730e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027311:	89 d0                	mov    eax,edx
c0027313:	89 ca                	mov    edx,ecx
c0027315:	85 d2                	test   edx,edx
c0027317:	74 59                	je     c0027372 <__adddf3+0x58f>
c0027319:	0f bd da             	bsr    ebx,edx
c002731c:	83 f3 1f             	xor    ebx,0x1f
c002731f:	88 d9                	mov    cl,bl
c0027321:	d3 e2                	shl    edx,cl
c0027323:	bf 20 00 00 00       	mov    edi,0x20
c0027328:	89 f9                	mov    ecx,edi
c002732a:	29 d9                	sub    ecx,ebx
c002732c:	89 c6                	mov    esi,eax
c002732e:	d3 ee                	shr    esi,cl
c0027330:	09 d6                	or     esi,edx
c0027332:	88 d9                	mov    cl,bl
c0027334:	d3 e0                	shl    eax,cl
c0027336:	89 c2                	mov    edx,eax
c0027338:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002733b:	25 ff 07 00 00       	and    eax,0x7ff
c0027340:	39 d8                	cmp    eax,ebx
c0027342:	7f 22                	jg     c0027366 <__adddf3+0x583>
c0027344:	29 c3                	sub    ebx,eax
c0027346:	43                   	inc    ebx
c0027347:	88 d9                	mov    cl,bl
c0027349:	d3 ea                	shr    edx,cl
c002734b:	29 df                	sub    edi,ebx
c002734d:	89 f9                	mov    ecx,edi
c002734f:	89 f0                	mov    eax,esi
c0027351:	d3 e0                	shl    eax,cl
c0027353:	09 c2                	or     edx,eax
c0027355:	89 f0                	mov    eax,esi
c0027357:	88 d9                	mov    cl,bl
c0027359:	d3 e8                	shr    eax,cl
c002735b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002735e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027364:	eb 6f                	jmp    c00273d5 <__adddf3+0x5f2>
c0027366:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027369:	29 d8                	sub    eax,ebx
c002736b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002736e:	89 f0                	mov    eax,esi
c0027370:	eb 59                	jmp    c00273cb <__adddf3+0x5e8>
c0027372:	85 c0                	test   eax,eax
c0027374:	74 6a                	je     c00273e0 <__adddf3+0x5fd>
c0027376:	0f bd c8             	bsr    ecx,eax
c0027379:	83 f1 1f             	xor    ecx,0x1f
c002737c:	d3 e0                	shl    eax,cl
c002737e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027381:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027387:	83 c1 20             	add    ecx,0x20
c002738a:	39 cb                	cmp    ebx,ecx
c002738c:	7f 35                	jg     c00273c3 <__adddf3+0x5e0>
c002738e:	29 d9                	sub    ecx,ebx
c0027390:	8d 71 01             	lea    esi,[ecx+0x1]
c0027393:	83 fe 1f             	cmp    esi,0x1f
c0027396:	7e 09                	jle    c00273a1 <__adddf3+0x5be>
c0027398:	83 e9 1f             	sub    ecx,0x1f
c002739b:	d3 e8                	shr    eax,cl
c002739d:	89 c3                	mov    ebx,eax
c002739f:	eb 11                	jmp    c00273b2 <__adddf3+0x5cf>
c00273a1:	b9 20 00 00 00       	mov    ecx,0x20
c00273a6:	29 f1                	sub    ecx,esi
c00273a8:	89 c3                	mov    ebx,eax
c00273aa:	d3 e3                	shl    ebx,cl
c00273ac:	89 f1                	mov    ecx,esi
c00273ae:	d3 e8                	shr    eax,cl
c00273b0:	89 c2                	mov    edx,eax
c00273b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00273ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00273bd:	89 d0                	mov    eax,edx
c00273bf:	89 da                	mov    edx,ebx
c00273c1:	eb 26                	jmp    c00273e9 <__adddf3+0x606>
c00273c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273c6:	29 cf                	sub    edi,ecx
c00273c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273d0:	eb 17                	jmp    c00273e9 <__adddf3+0x606>
c00273d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273d8:	eb 0f                	jmp    c00273e9 <__adddf3+0x606>
c00273da:	31 d2                	xor    edx,edx
c00273dc:	31 c0                	xor    eax,eax
c00273de:	eb 09                	jmp    c00273e9 <__adddf3+0x606>
c00273e0:	89 c2                	mov    edx,eax
c00273e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00273e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00273ec:	c1 e1 14             	shl    ecx,0x14
c00273ef:	89 c3                	mov    ebx,eax
c00273f1:	c1 eb 0b             	shr    ebx,0xb
c00273f4:	09 d9                	or     ecx,ebx
c00273f6:	89 d3                	mov    ebx,edx
c00273f8:	c1 eb 0b             	shr    ebx,0xb
c00273fb:	c1 e0 15             	shl    eax,0x15
c00273fe:	09 d8                	or     eax,ebx
c0027400:	89 c7                	mov    edi,eax
c0027402:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027408:	0f 95 c0             	setne  al
c002740b:	89 c6                	mov    esi,eax
c002740d:	09 f3                	or     ebx,esi
c002740f:	83 e3 01             	and    ebx,0x1
c0027412:	c1 ea 0a             	shr    edx,0xa
c0027415:	21 da                	and    edx,ebx
c0027417:	89 f8                	mov    eax,edi
c0027419:	01 d0                	add    eax,edx
c002741b:	83 d1 00             	adc    ecx,0x0
c002741e:	89 c7                	mov    edi,eax
c0027420:	eb 06                	jmp    c0027428 <__adddf3+0x645>
c0027422:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027425:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027428:	89 f8                	mov    eax,edi
c002742a:	89 ca                	mov    edx,ecx
c002742c:	83 c4 24             	add    esp,0x24
c002742f:	5b                   	pop    ebx
c0027430:	5e                   	pop    esi
c0027431:	5f                   	pop    edi
c0027432:	5d                   	pop    ebp
c0027433:	c3                   	ret    

c0027434 <__subdf3>:
c0027434:	55                   	push   ebp
c0027435:	89 e5                	mov    ebp,esp
c0027437:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002743a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002743d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027443:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027446:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027449:	5d                   	pop    ebp
c002744a:	e9 94 f9 ff ff       	jmp    c0026de3 <__adddf3>

c002744f <__negdf2>:
c002744f:	55                   	push   ebp
c0027450:	89 e5                	mov    ebp,esp
c0027452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027455:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027458:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002745e:	5d                   	pop    ebp
c002745f:	c3                   	ret    

c0027460 <__muldf3>:
c0027460:	55                   	push   ebp
c0027461:	89 e5                	mov    ebp,esp
c0027463:	57                   	push   edi
c0027464:	56                   	push   esi
c0027465:	53                   	push   ebx
c0027466:	83 ec 24             	sub    esp,0x24
c0027469:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002746c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002746f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027472:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027475:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027478:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002747b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002747e:	89 c8                	mov    eax,ecx
c0027480:	c1 f8 14             	sar    eax,0x14
c0027483:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027486:	89 f8                	mov    eax,edi
c0027488:	89 fb                	mov    ebx,edi
c002748a:	c1 e3 0b             	shl    ebx,0xb
c002748d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027490:	c1 e1 0b             	shl    ecx,0xb
c0027493:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027499:	c1 e8 15             	shr    eax,0x15
c002749c:	09 c1                	or     ecx,eax
c002749e:	89 d6                	mov    esi,edx
c00274a0:	89 d0                	mov    eax,edx
c00274a2:	c1 f8 14             	sar    eax,0x14
c00274a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00274a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00274ab:	89 c3                	mov    ebx,eax
c00274ad:	c1 e3 0b             	shl    ebx,0xb
c00274b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00274b3:	c1 e6 0b             	shl    esi,0xb
c00274b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00274bc:	c1 e8 15             	shr    eax,0x15
c00274bf:	09 c6                	or     esi,eax
c00274c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00274c4:	25 ff 07 00 00       	and    eax,0x7ff
c00274c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00274cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00274cf:	25 ff 07 00 00       	and    eax,0x7ff
c00274d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00274d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00274da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00274dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00274e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00274e7:	40                   	inc    eax
c00274e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00274ed:	0f 85 8d 00 00 00    	jne    c0027580 <__muldf3+0x120>
c00274f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274f6:	09 c8                	or     eax,ecx
c00274f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00274fc:	74 44                	je     c0027542 <__muldf3+0xe2>
c00274fe:	85 c0                	test   eax,eax
c0027500:	0f 85 31 02 00 00    	jne    c0027737 <__muldf3+0x2d7>
c0027506:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027509:	40                   	inc    eax
c002750a:	a9 fe 07 00 00       	test   eax,0x7fe
c002750f:	75 13                	jne    c0027524 <__muldf3+0xc4>
c0027511:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027514:	09 f1                	or     ecx,esi
c0027516:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002751a:	74 22                	je     c002753e <__muldf3+0xde>
c002751c:	85 c9                	test   ecx,ecx
c002751e:	0f 85 0d 02 00 00    	jne    c0027731 <__muldf3+0x2d1>
c0027524:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027528:	0f 89 09 02 00 00    	jns    c0027737 <__muldf3+0x2d7>
c002752e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027531:	05 00 00 00 80       	add    eax,0x80000000
c0027536:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027539:	e9 f9 01 00 00       	jmp    c0027737 <__muldf3+0x2d7>
c002753e:	85 c9                	test   ecx,ecx
c0027540:	eb 2e                	jmp    c0027570 <__muldf3+0x110>
c0027542:	85 c0                	test   eax,eax
c0027544:	74 20                	je     c0027566 <__muldf3+0x106>
c0027546:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027549:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002754c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002754f:	c1 ef 1f             	shr    edi,0x1f
c0027552:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027555:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027558:	8d 43 ff             	lea    eax,[ebx-0x1]
c002755b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002755e:	09 f9                	or     ecx,edi
c0027560:	78 1e                	js     c0027580 <__muldf3+0x120>
c0027562:	89 c3                	mov    ebx,eax
c0027564:	eb e0                	jmp    c0027546 <__muldf3+0xe6>
c0027566:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027569:	f7 d0                	not    eax
c002756b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027570:	75 b2                	jne    c0027524 <__muldf3+0xc4>
c0027572:	31 ff                	xor    edi,edi
c0027574:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002757b:	e9 b7 01 00 00       	jmp    c0027737 <__muldf3+0x2d7>
c0027580:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027583:	40                   	inc    eax
c0027584:	a9 fe 07 00 00       	test   eax,0x7fe
c0027589:	75 57                	jne    c00275e2 <__muldf3+0x182>
c002758b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002758e:	09 f0                	or     eax,esi
c0027590:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027594:	74 23                	je     c00275b9 <__muldf3+0x159>
c0027596:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002759a:	0f 89 91 01 00 00    	jns    c0027731 <__muldf3+0x2d1>
c00275a0:	85 c0                	test   eax,eax
c00275a2:	0f 85 89 01 00 00    	jne    c0027731 <__muldf3+0x2d1>
c00275a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00275ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00275b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275b4:	e9 7e 01 00 00       	jmp    c0027737 <__muldf3+0x2d7>
c00275b9:	85 c0                	test   eax,eax
c00275bb:	75 0c                	jne    c00275c9 <__muldf3+0x169>
c00275bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00275c1:	0f 89 6a 01 00 00    	jns    c0027731 <__muldf3+0x2d1>
c00275c7:	eb df                	jmp    c00275a8 <__muldf3+0x148>
c00275c9:	01 f6                	add    esi,esi
c00275cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275ce:	c1 ea 1f             	shr    edx,0x1f
c00275d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00275d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00275da:	09 d6                	or     esi,edx
c00275dc:	78 04                	js     c00275e2 <__muldf3+0x182>
c00275de:	89 c3                	mov    ebx,eax
c00275e0:	eb e7                	jmp    c00275c9 <__muldf3+0x169>
c00275e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00275e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00275ee:	89 c8                	mov    eax,ecx
c00275f0:	f7 e6                	mul    esi
c00275f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00275f5:	89 c7                	mov    edi,eax
c00275f7:	89 c8                	mov    eax,ecx
c00275f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00275fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00275ff:	89 c1                	mov    ecx,eax
c0027601:	89 f0                	mov    eax,esi
c0027603:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027606:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027609:	89 c6                	mov    esi,eax
c002760b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002760e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027611:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027614:	31 c0                	xor    eax,eax
c0027616:	01 f1                	add    ecx,esi
c0027618:	0f 92 c0             	setb   al
c002761b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002761e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027621:	83 d6 00             	adc    esi,0x0
c0027624:	01 c7                	add    edi,eax
c0027626:	83 d6 00             	adc    esi,0x0
c0027629:	01 ca                	add    edx,ecx
c002762b:	0f 92 c1             	setb   cl
c002762e:	0f b6 c9             	movzx  ecx,cl
c0027631:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027634:	83 d6 00             	adc    esi,0x0
c0027637:	01 cf                	add    edi,ecx
c0027639:	83 d6 00             	adc    esi,0x0
c002763c:	31 c9                	xor    ecx,ecx
c002763e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027641:	0f 95 c1             	setne  cl
c0027644:	09 cf                	or     edi,ecx
c0027646:	85 f6                	test   esi,esi
c0027648:	78 0c                	js     c0027656 <__muldf3+0x1f6>
c002764a:	01 f6                	add    esi,esi
c002764c:	89 f8                	mov    eax,edi
c002764e:	c1 e8 1f             	shr    eax,0x1f
c0027651:	09 c6                	or     esi,eax
c0027653:	01 ff                	add    edi,edi
c0027655:	4b                   	dec    ebx
c0027656:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002765c:	0f 8f 85 00 00 00    	jg     c00276e7 <__muldf3+0x287>
c0027662:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027668:	85 db                	test   ebx,ebx
c002766a:	0f 8f 84 00 00 00    	jg     c00276f4 <__muldf3+0x294>
c0027670:	83 fb cc             	cmp    ebx,0xffffffcc
c0027673:	7c 79                	jl     c00276ee <__muldf3+0x28e>
c0027675:	ba 01 00 00 00       	mov    edx,0x1
c002767a:	29 da                	sub    edx,ebx
c002767c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027682:	83 fa 1f             	cmp    edx,0x1f
c0027685:	7e 30                	jle    c00276b7 <__muldf3+0x257>
c0027687:	83 fa 20             	cmp    edx,0x20
c002768a:	75 0b                	jne    c0027697 <__muldf3+0x237>
c002768c:	31 c0                	xor    eax,eax
c002768e:	85 ff                	test   edi,edi
c0027690:	0f 95 c0             	setne  al
c0027693:	89 c7                	mov    edi,eax
c0027695:	eb 1a                	jmp    c00276b1 <__muldf3+0x251>
c0027697:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002769a:	89 f0                	mov    eax,esi
c002769c:	d3 e0                	shl    eax,cl
c002769e:	09 f8                	or     eax,edi
c00276a0:	0f 95 c0             	setne  al
c00276a3:	0f b6 c0             	movzx  eax,al
c00276a6:	89 c7                	mov    edi,eax
c00276a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00276ad:	29 d9                	sub    ecx,ebx
c00276af:	d3 ee                	shr    esi,cl
c00276b1:	09 f7                	or     edi,esi
c00276b3:	31 db                	xor    ebx,ebx
c00276b5:	eb 3b                	jmp    c00276f2 <__muldf3+0x292>
c00276b7:	83 c3 1f             	add    ebx,0x1f
c00276ba:	89 f0                	mov    eax,esi
c00276bc:	88 d9                	mov    cl,bl
c00276be:	d3 e0                	shl    eax,cl
c00276c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00276c3:	89 f8                	mov    eax,edi
c00276c5:	88 d1                	mov    cl,dl
c00276c7:	d3 e8                	shr    eax,cl
c00276c9:	89 c1                	mov    ecx,eax
c00276cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276ce:	09 c8                	or     eax,ecx
c00276d0:	88 d9                	mov    cl,bl
c00276d2:	d3 e7                	shl    edi,cl
c00276d4:	31 db                	xor    ebx,ebx
c00276d6:	85 ff                	test   edi,edi
c00276d8:	0f 95 c3             	setne  bl
c00276db:	89 df                	mov    edi,ebx
c00276dd:	09 c7                	or     edi,eax
c00276df:	88 d1                	mov    cl,dl
c00276e1:	d3 ee                	shr    esi,cl
c00276e3:	31 db                	xor    ebx,ebx
c00276e5:	eb 0d                	jmp    c00276f4 <__muldf3+0x294>
c00276e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00276ec:	eb 02                	jmp    c00276f0 <__muldf3+0x290>
c00276ee:	31 db                	xor    ebx,ebx
c00276f0:	31 ff                	xor    edi,edi
c00276f2:	31 f6                	xor    esi,esi
c00276f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00276f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00276fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00276ff:	09 c3                	or     ebx,eax
c0027701:	c1 e3 14             	shl    ebx,0x14
c0027704:	89 f0                	mov    eax,esi
c0027706:	c1 e8 0b             	shr    eax,0xb
c0027709:	09 c3                	or     ebx,eax
c002770b:	89 f8                	mov    eax,edi
c002770d:	c1 e8 0b             	shr    eax,0xb
c0027710:	c1 e6 15             	shl    esi,0x15
c0027713:	09 c6                	or     esi,eax
c0027715:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002771b:	0f 95 c1             	setne  cl
c002771e:	09 c8                	or     eax,ecx
c0027720:	83 e0 01             	and    eax,0x1
c0027723:	c1 ef 0a             	shr    edi,0xa
c0027726:	21 c7                	and    edi,eax
c0027728:	01 f7                	add    edi,esi
c002772a:	83 d3 00             	adc    ebx,0x0
c002772d:	89 da                	mov    edx,ebx
c002772f:	eb 03                	jmp    c0027734 <__muldf3+0x2d4>
c0027731:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027734:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027737:	89 f8                	mov    eax,edi
c0027739:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002773c:	83 c4 24             	add    esp,0x24
c002773f:	5b                   	pop    ebx
c0027740:	5e                   	pop    esi
c0027741:	5f                   	pop    edi
c0027742:	5d                   	pop    ebp
c0027743:	c3                   	ret    

c0027744 <__divdf3>:
c0027744:	55                   	push   ebp
c0027745:	89 e5                	mov    ebp,esp
c0027747:	57                   	push   edi
c0027748:	56                   	push   esi
c0027749:	53                   	push   ebx
c002774a:	83 ec 2c             	sub    esp,0x2c
c002774d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027750:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027753:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027756:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027759:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002775c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002775f:	89 ce                	mov    esi,ecx
c0027761:	89 c8                	mov    eax,ecx
c0027763:	c1 f8 14             	sar    eax,0x14
c0027766:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027769:	89 f8                	mov    eax,edi
c002776b:	89 fb                	mov    ebx,edi
c002776d:	c1 e3 0b             	shl    ebx,0xb
c0027770:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027773:	c1 e6 0b             	shl    esi,0xb
c0027776:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002777c:	c1 e8 15             	shr    eax,0x15
c002777f:	09 c6                	or     esi,eax
c0027781:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027784:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027787:	89 c2                	mov    edx,eax
c0027789:	c1 fa 14             	sar    edx,0x14
c002778c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002778f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027792:	89 de                	mov    esi,ebx
c0027794:	c1 e6 0b             	shl    esi,0xb
c0027797:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002779a:	c1 e0 0b             	shl    eax,0xb
c002779d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00277a2:	c1 eb 15             	shr    ebx,0x15
c00277a5:	09 d8                	or     eax,ebx
c00277a7:	89 c2                	mov    edx,eax
c00277a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277ac:	25 ff 07 00 00       	and    eax,0x7ff
c00277b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00277b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00277c0:	29 d8                	sub    eax,ebx
c00277c2:	05 ff 03 00 00       	add    eax,0x3ff
c00277c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277ca:	46                   	inc    esi
c00277cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277d1:	0f 85 a5 00 00 00    	jne    c002787c <__divdf3+0x138>
c00277d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00277dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00277e1:	74 2a                	je     c002780d <__divdf3+0xc9>
c00277e3:	85 f6                	test   esi,esi
c00277e5:	0f 85 cc 02 00 00    	jne    c0027ab7 <__divdf3+0x373>
c00277eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277ee:	40                   	inc    eax
c00277ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00277f4:	75 26                	jne    c002781c <__divdf3+0xd8>
c00277f6:	85 db                	test   ebx,ebx
c00277f8:	74 22                	je     c002781c <__divdf3+0xd8>
c00277fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00277fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027800:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027803:	09 d0                	or     eax,edx
c0027805:	0f 85 ac 02 00 00    	jne    c0027ab7 <__divdf3+0x373>
c002780b:	eb 63                	jmp    c0027870 <__divdf3+0x12c>
c002780d:	85 f6                	test   esi,esi
c002780f:	75 22                	jne    c0027833 <__divdf3+0xef>
c0027811:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027814:	40                   	inc    eax
c0027815:	a9 fe 07 00 00       	test   eax,0x7fe
c002781a:	74 36                	je     c0027852 <__divdf3+0x10e>
c002781c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027820:	0f 89 91 02 00 00    	jns    c0027ab7 <__divdf3+0x373>
c0027826:	89 f8                	mov    eax,edi
c0027828:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002782e:	e9 80 02 00 00       	jmp    c0027ab3 <__divdf3+0x36f>
c0027833:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027836:	01 f6                	add    esi,esi
c0027838:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002783b:	c1 ef 1f             	shr    edi,0x1f
c002783e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027841:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027844:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027847:	09 f7                	or     edi,esi
c0027849:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002784c:	78 2e                	js     c002787c <__divdf3+0x138>
c002784e:	89 c8                	mov    eax,ecx
c0027850:	eb e1                	jmp    c0027833 <__divdf3+0xef>
c0027852:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027855:	09 d0                	or     eax,edx
c0027857:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002785b:	74 0f                	je     c002786c <__divdf3+0x128>
c002785d:	85 c0                	test   eax,eax
c002785f:	74 bb                	je     c002781c <__divdf3+0xd8>
c0027861:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027864:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027867:	e9 4b 02 00 00       	jmp    c0027ab7 <__divdf3+0x373>
c002786c:	85 c0                	test   eax,eax
c002786e:	75 ac                	jne    c002781c <__divdf3+0xd8>
c0027870:	31 ff                	xor    edi,edi
c0027872:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027877:	e9 3b 02 00 00       	jmp    c0027ab7 <__divdf3+0x373>
c002787c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002787f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027882:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027888:	75 6b                	jne    c00278f5 <__divdf3+0x1b1>
c002788a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002788d:	09 d6                	or     esi,edx
c002788f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027893:	74 28                	je     c00278bd <__divdf3+0x179>
c0027895:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027898:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002789b:	85 f6                	test   esi,esi
c002789d:	0f 85 14 02 00 00    	jne    c0027ab7 <__divdf3+0x373>
c00278a3:	31 ff                	xor    edi,edi
c00278a5:	31 c9                	xor    ecx,ecx
c00278a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00278ad:	0f 89 04 02 00 00    	jns    c0027ab7 <__divdf3+0x373>
c00278b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00278b8:	e9 fa 01 00 00       	jmp    c0027ab7 <__divdf3+0x373>
c00278bd:	85 f6                	test   esi,esi
c00278bf:	75 1b                	jne    c00278dc <__divdf3+0x198>
c00278c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00278c7:	25 00 00 00 80       	and    eax,0x80000000
c00278cc:	31 c9                	xor    ecx,ecx
c00278ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00278d3:	89 cf                	mov    edi,ecx
c00278d5:	89 c1                	mov    ecx,eax
c00278d7:	e9 db 01 00 00       	jmp    c0027ab7 <__divdf3+0x373>
c00278dc:	01 d2                	add    edx,edx
c00278de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278e1:	c1 eb 1f             	shr    ebx,0x1f
c00278e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00278ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00278ed:	09 da                	or     edx,ebx
c00278ef:	78 04                	js     c00278f5 <__divdf3+0x1b1>
c00278f1:	89 c8                	mov    eax,ecx
c00278f3:	eb e7                	jmp    c00278dc <__divdf3+0x198>
c00278f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027904:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027907:	39 d6                	cmp    esi,edx
c0027909:	77 0d                	ja     c0027918 <__divdf3+0x1d4>
c002790b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002790e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027911:	72 1b                	jb     c002792e <__divdf3+0x1ea>
c0027913:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027916:	75 16                	jne    c002792e <__divdf3+0x1ea>
c0027918:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002791b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002791e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027921:	83 de 00             	sbb    esi,0x0
c0027924:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027927:	ba 01 00 00 00       	mov    edx,0x1
c002792c:	eb 02                	jmp    c0027930 <__divdf3+0x1ec>
c002792e:	31 d2                	xor    edx,edx
c0027930:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027937:	31 ff                	xor    edi,edi
c0027939:	01 ff                	add    edi,edi
c002793b:	89 d1                	mov    ecx,edx
c002793d:	c1 e9 1f             	shr    ecx,0x1f
c0027940:	09 cf                	or     edi,ecx
c0027942:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027945:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027948:	89 da                	mov    edx,ebx
c002794a:	89 f3                	mov    ebx,esi
c002794c:	8d 34 36             	lea    esi,[esi+esi*1]
c002794f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027952:	c1 e9 1f             	shr    ecx,0x1f
c0027955:	09 ce                	or     esi,ecx
c0027957:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002795a:	01 c9                	add    ecx,ecx
c002795c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002795f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027962:	85 db                	test   ebx,ebx
c0027964:	78 29                	js     c002798f <__divdf3+0x24b>
c0027966:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027969:	72 07                	jb     c0027972 <__divdf3+0x22e>
c002796b:	75 3c                	jne    c00279a9 <__divdf3+0x265>
c002796d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027970:	77 37                	ja     c00279a9 <__divdf3+0x265>
c0027972:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027975:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027978:	31 d2                	xor    edx,edx
c002797a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002797d:	0f 97 c2             	seta   dl
c0027980:	29 d6                	sub    esi,edx
c0027982:	89 d9                	mov    ecx,ebx
c0027984:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027987:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002798a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002798d:	eb 17                	jmp    c00279a6 <__divdf3+0x262>
c002798f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027992:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027995:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027998:	0f 97 c1             	seta   cl
c002799b:	0f b6 c9             	movzx  ecx,cl
c002799e:	29 ce                	sub    esi,ecx
c00279a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00279a3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00279a6:	83 ca 01             	or     edx,0x1
c00279a9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00279ac:	75 8b                	jne    c0027939 <__divdf3+0x1f5>
c00279ae:	c1 e7 09             	shl    edi,0x9
c00279b1:	89 d1                	mov    ecx,edx
c00279b3:	c1 e9 17             	shr    ecx,0x17
c00279b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00279b9:	09 f3                	or     ebx,esi
c00279bb:	0f 95 c3             	setne  bl
c00279be:	0f b6 db             	movzx  ebx,bl
c00279c1:	c1 e2 09             	shl    edx,0x9
c00279c4:	09 d3                	or     ebx,edx
c00279c6:	89 ca                	mov    edx,ecx
c00279c8:	09 fa                	or     edx,edi
c00279ca:	78 0c                	js     c00279d8 <__divdf3+0x294>
c00279cc:	01 d2                	add    edx,edx
c00279ce:	89 d9                	mov    ecx,ebx
c00279d0:	c1 e9 1f             	shr    ecx,0x1f
c00279d3:	09 ca                	or     edx,ecx
c00279d5:	01 db                	add    ebx,ebx
c00279d7:	48                   	dec    eax
c00279d8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00279dd:	0f 8f 83 00 00 00    	jg     c0027a66 <__divdf3+0x322>
c00279e3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00279e9:	85 c0                	test   eax,eax
c00279eb:	0f 8f 82 00 00 00    	jg     c0027a73 <__divdf3+0x32f>
c00279f1:	83 f8 cc             	cmp    eax,0xffffffcc
c00279f4:	7c 77                	jl     c0027a6d <__divdf3+0x329>
c00279f6:	be 01 00 00 00       	mov    esi,0x1
c00279fb:	29 c6                	sub    esi,eax
c00279fd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a03:	83 fe 1f             	cmp    esi,0x1f
c0027a06:	7e 2f                	jle    c0027a37 <__divdf3+0x2f3>
c0027a08:	83 fe 20             	cmp    esi,0x20
c0027a0b:	75 0a                	jne    c0027a17 <__divdf3+0x2d3>
c0027a0d:	85 db                	test   ebx,ebx
c0027a0f:	0f 95 c3             	setne  bl
c0027a12:	0f b6 db             	movzx  ebx,bl
c0027a15:	eb 1a                	jmp    c0027a31 <__divdf3+0x2ed>
c0027a17:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027a1a:	89 d7                	mov    edi,edx
c0027a1c:	d3 e7                	shl    edi,cl
c0027a1e:	89 f9                	mov    ecx,edi
c0027a20:	09 d9                	or     ecx,ebx
c0027a22:	0f 95 c3             	setne  bl
c0027a25:	0f b6 db             	movzx  ebx,bl
c0027a28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a2d:	29 c1                	sub    ecx,eax
c0027a2f:	d3 ea                	shr    edx,cl
c0027a31:	09 d3                	or     ebx,edx
c0027a33:	31 c0                	xor    eax,eax
c0027a35:	eb 3a                	jmp    c0027a71 <__divdf3+0x32d>
c0027a37:	83 c0 1f             	add    eax,0x1f
c0027a3a:	89 d7                	mov    edi,edx
c0027a3c:	88 c1                	mov    cl,al
c0027a3e:	d3 e7                	shl    edi,cl
c0027a40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a43:	89 df                	mov    edi,ebx
c0027a45:	89 f1                	mov    ecx,esi
c0027a47:	d3 ef                	shr    edi,cl
c0027a49:	89 f9                	mov    ecx,edi
c0027a4b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a4e:	09 cf                	or     edi,ecx
c0027a50:	88 c1                	mov    cl,al
c0027a52:	d3 e3                	shl    ebx,cl
c0027a54:	85 db                	test   ebx,ebx
c0027a56:	0f 95 c3             	setne  bl
c0027a59:	0f b6 db             	movzx  ebx,bl
c0027a5c:	09 fb                	or     ebx,edi
c0027a5e:	89 f1                	mov    ecx,esi
c0027a60:	d3 ea                	shr    edx,cl
c0027a62:	31 c0                	xor    eax,eax
c0027a64:	eb 0d                	jmp    c0027a73 <__divdf3+0x32f>
c0027a66:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027a6b:	eb 02                	jmp    c0027a6f <__divdf3+0x32b>
c0027a6d:	31 c0                	xor    eax,eax
c0027a6f:	31 db                	xor    ebx,ebx
c0027a71:	31 d2                	xor    edx,edx
c0027a73:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027a76:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027a79:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027a7f:	09 c8                	or     eax,ecx
c0027a81:	c1 e0 14             	shl    eax,0x14
c0027a84:	89 d1                	mov    ecx,edx
c0027a86:	c1 e9 0b             	shr    ecx,0xb
c0027a89:	09 c8                	or     eax,ecx
c0027a8b:	89 c6                	mov    esi,eax
c0027a8d:	89 d9                	mov    ecx,ebx
c0027a8f:	c1 e9 0b             	shr    ecx,0xb
c0027a92:	c1 e2 15             	shl    edx,0x15
c0027a95:	09 ca                	or     edx,ecx
c0027a97:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027a9d:	0f 95 c0             	setne  al
c0027aa0:	09 c1                	or     ecx,eax
c0027aa2:	83 e1 01             	and    ecx,0x1
c0027aa5:	c1 eb 0a             	shr    ebx,0xa
c0027aa8:	21 cb                	and    ebx,ecx
c0027aaa:	01 d3                	add    ebx,edx
c0027aac:	89 d8                	mov    eax,ebx
c0027aae:	83 d6 00             	adc    esi,0x0
c0027ab1:	89 f2                	mov    edx,esi
c0027ab3:	89 c7                	mov    edi,eax
c0027ab5:	89 d1                	mov    ecx,edx
c0027ab7:	89 f8                	mov    eax,edi
c0027ab9:	89 ca                	mov    edx,ecx
c0027abb:	83 c4 2c             	add    esp,0x2c
c0027abe:	5b                   	pop    ebx
c0027abf:	5e                   	pop    esi
c0027ac0:	5f                   	pop    edi
c0027ac1:	5d                   	pop    ebp
c0027ac2:	c3                   	ret    

c0027ac3 <__floatsidf>:
c0027ac3:	55                   	push   ebp
c0027ac4:	89 e5                	mov    ebp,esp
c0027ac6:	56                   	push   esi
c0027ac7:	53                   	push   ebx
c0027ac8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027acb:	85 db                	test   ebx,ebx
c0027acd:	7e 15                	jle    c0027ae4 <__floatsidf+0x21>
c0027acf:	0f bd cb             	bsr    ecx,ebx
c0027ad2:	83 f1 1f             	xor    ecx,0x1f
c0027ad5:	d3 e3                	shl    ebx,cl
c0027ad7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027add:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ae2:	eb 21                	jmp    c0027b05 <__floatsidf+0x42>
c0027ae4:	b8 00 00 00 00       	mov    eax,0x0
c0027ae9:	ba 00 00 00 00       	mov    edx,0x0
c0027aee:	74 2a                	je     c0027b1a <__floatsidf+0x57>
c0027af0:	f7 db                	neg    ebx
c0027af2:	0f bd cb             	bsr    ecx,ebx
c0027af5:	83 f1 1f             	xor    ecx,0x1f
c0027af8:	d3 e3                	shl    ebx,cl
c0027afa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b00:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027b05:	29 c8                	sub    eax,ecx
c0027b07:	c1 e0 14             	shl    eax,0x14
c0027b0a:	89 c1                	mov    ecx,eax
c0027b0c:	89 de                	mov    esi,ebx
c0027b0e:	c1 ee 0b             	shr    esi,0xb
c0027b11:	09 f1                	or     ecx,esi
c0027b13:	89 ca                	mov    edx,ecx
c0027b15:	c1 e3 15             	shl    ebx,0x15
c0027b18:	89 d8                	mov    eax,ebx
c0027b1a:	5b                   	pop    ebx
c0027b1b:	5e                   	pop    esi
c0027b1c:	5d                   	pop    ebp
c0027b1d:	c3                   	ret    

c0027b1e <__floatunsidf>:
c0027b1e:	55                   	push   ebp
c0027b1f:	89 e5                	mov    ebp,esp
c0027b21:	56                   	push   esi
c0027b22:	53                   	push   ebx
c0027b23:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b26:	85 db                	test   ebx,ebx
c0027b28:	74 2a                	je     c0027b54 <__floatunsidf+0x36>
c0027b2a:	0f bd cb             	bsr    ecx,ebx
c0027b2d:	83 f1 1f             	xor    ecx,0x1f
c0027b30:	d3 e3                	shl    ebx,cl
c0027b32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b38:	b8 1e 04 00 00       	mov    eax,0x41e
c0027b3d:	29 c8                	sub    eax,ecx
c0027b3f:	c1 e0 14             	shl    eax,0x14
c0027b42:	89 c1                	mov    ecx,eax
c0027b44:	89 de                	mov    esi,ebx
c0027b46:	c1 ee 0b             	shr    esi,0xb
c0027b49:	09 f1                	or     ecx,esi
c0027b4b:	89 ca                	mov    edx,ecx
c0027b4d:	c1 e3 15             	shl    ebx,0x15
c0027b50:	89 d8                	mov    eax,ebx
c0027b52:	eb 04                	jmp    c0027b58 <__floatunsidf+0x3a>
c0027b54:	31 c0                	xor    eax,eax
c0027b56:	31 d2                	xor    edx,edx
c0027b58:	5b                   	pop    ebx
c0027b59:	5e                   	pop    esi
c0027b5a:	5d                   	pop    ebp
c0027b5b:	c3                   	ret    

c0027b5c <__fixdfsi>:
c0027b5c:	55                   	push   ebp
c0027b5d:	89 e5                	mov    ebp,esp
c0027b5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027b62:	89 d1                	mov    ecx,edx
c0027b64:	c1 e1 0b             	shl    ecx,0xb
c0027b67:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b70:	c1 e8 15             	shr    eax,0x15
c0027b73:	09 c1                	or     ecx,eax
c0027b75:	c1 fa 14             	sar    edx,0x14
c0027b78:	78 1f                	js     c0027b99 <__fixdfsi+0x3d>
c0027b7a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027b80:	31 c0                	xor    eax,eax
c0027b82:	83 fa 1e             	cmp    edx,0x1e
c0027b85:	77 40                	ja     c0027bc7 <__fixdfsi+0x6b>
c0027b87:	89 c8                	mov    eax,ecx
c0027b89:	0d 00 00 00 80       	or     eax,0x80000000
c0027b8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027b93:	29 d1                	sub    ecx,edx
c0027b95:	d3 e8                	shr    eax,cl
c0027b97:	eb 2e                	jmp    c0027bc7 <__fixdfsi+0x6b>
c0027b99:	31 c0                	xor    eax,eax
c0027b9b:	81 c2 01 04 00 00    	add    edx,0x401
c0027ba1:	78 24                	js     c0027bc7 <__fixdfsi+0x6b>
c0027ba3:	83 fa 1e             	cmp    edx,0x1e
c0027ba6:	7e 09                	jle    c0027bb1 <__fixdfsi+0x55>
c0027ba8:	83 fa 1f             	cmp    edx,0x1f
c0027bab:	75 18                	jne    c0027bc5 <__fixdfsi+0x69>
c0027bad:	85 c9                	test   ecx,ecx
c0027baf:	75 14                	jne    c0027bc5 <__fixdfsi+0x69>
c0027bb1:	89 c8                	mov    eax,ecx
c0027bb3:	0d 00 00 00 80       	or     eax,0x80000000
c0027bb8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bbd:	29 d1                	sub    ecx,edx
c0027bbf:	d3 e8                	shr    eax,cl
c0027bc1:	f7 d8                	neg    eax
c0027bc3:	eb 02                	jmp    c0027bc7 <__fixdfsi+0x6b>
c0027bc5:	31 c0                	xor    eax,eax
c0027bc7:	5d                   	pop    ebp
c0027bc8:	c3                   	ret    

c0027bc9 <__fixunsdfsi>:
c0027bc9:	55                   	push   ebp
c0027bca:	89 e5                	mov    ebp,esp
c0027bcc:	53                   	push   ebx
c0027bcd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027bd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027bd3:	89 d3                	mov    ebx,edx
c0027bd5:	c1 fb 14             	sar    ebx,0x14
c0027bd8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027bde:	31 c0                	xor    eax,eax
c0027be0:	83 fb 1f             	cmp    ebx,0x1f
c0027be3:	77 1d                	ja     c0027c02 <__fixunsdfsi+0x39>
c0027be5:	89 d0                	mov    eax,edx
c0027be7:	c1 e0 0b             	shl    eax,0xb
c0027bea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027bef:	c1 e9 15             	shr    ecx,0x15
c0027bf2:	09 c8                	or     eax,ecx
c0027bf4:	0d 00 00 00 80       	or     eax,0x80000000
c0027bf9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bfe:	29 d9                	sub    ecx,ebx
c0027c00:	d3 e8                	shr    eax,cl
c0027c02:	5b                   	pop    ebx
c0027c03:	5d                   	pop    ebp
c0027c04:	c3                   	ret    

c0027c05 <__cmpdf2>:
c0027c05:	55                   	push   ebp
c0027c06:	89 e5                	mov    ebp,esp
c0027c08:	57                   	push   edi
c0027c09:	56                   	push   esi
c0027c0a:	53                   	push   ebx
c0027c0b:	83 ec 0c             	sub    esp,0xc
c0027c0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027c11:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c14:	89 ca                	mov    edx,ecx
c0027c16:	c1 ea 14             	shr    edx,0x14
c0027c19:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027c1f:	89 cb                	mov    ebx,ecx
c0027c21:	c1 fb 1f             	sar    ebx,0x1f
c0027c24:	31 da                	xor    edx,ebx
c0027c26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027c29:	89 df                	mov    edi,ebx
c0027c2b:	c1 e7 0b             	shl    edi,0xb
c0027c2e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c31:	c1 e1 0b             	shl    ecx,0xb
c0027c34:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c3a:	c1 eb 15             	shr    ebx,0x15
c0027c3d:	09 d9                	or     ecx,ebx
c0027c3f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027c42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c45:	89 ce                	mov    esi,ecx
c0027c47:	c1 ee 14             	shr    esi,0x14
c0027c4a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027c50:	89 cb                	mov    ebx,ecx
c0027c52:	c1 fb 1f             	sar    ebx,0x1f
c0027c55:	31 de                	xor    esi,ebx
c0027c57:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027c5a:	89 df                	mov    edi,ebx
c0027c5c:	c1 e7 0b             	shl    edi,0xb
c0027c5f:	c1 e1 0b             	shl    ecx,0xb
c0027c62:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c68:	c1 eb 15             	shr    ebx,0x15
c0027c6b:	09 d9                	or     ecx,ebx
c0027c6d:	89 d3                	mov    ebx,edx
c0027c6f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027c75:	43                   	inc    ebx
c0027c76:	83 fb 01             	cmp    ebx,0x1
c0027c79:	77 08                	ja     c0027c83 <__cmpdf2+0x7e>
c0027c7b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c7e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c81:	75 68                	jne    c0027ceb <__cmpdf2+0xe6>
c0027c83:	89 f3                	mov    ebx,esi
c0027c85:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027c8b:	43                   	inc    ebx
c0027c8c:	83 fb 01             	cmp    ebx,0x1
c0027c8f:	77 06                	ja     c0027c97 <__cmpdf2+0x92>
c0027c91:	89 fb                	mov    ebx,edi
c0027c93:	09 cb                	or     ebx,ecx
c0027c95:	75 54                	jne    c0027ceb <__cmpdf2+0xe6>
c0027c97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c9a:	09 f8                	or     eax,edi
c0027c9c:	09 c8                	or     eax,ecx
c0027c9e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027ca1:	75 12                	jne    c0027cb5 <__cmpdf2+0xb0>
c0027ca3:	8d 42 01             	lea    eax,[edx+0x1]
c0027ca6:	83 f8 01             	cmp    eax,0x1
c0027ca9:	77 0a                	ja     c0027cb5 <__cmpdf2+0xb0>
c0027cab:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027cae:	31 c0                	xor    eax,eax
c0027cb0:	83 fb 01             	cmp    ebx,0x1
c0027cb3:	76 36                	jbe    c0027ceb <__cmpdf2+0xe6>
c0027cb5:	b8 01 00 00 00       	mov    eax,0x1
c0027cba:	39 f2                	cmp    edx,esi
c0027cbc:	7f 2d                	jg     c0027ceb <__cmpdf2+0xe6>
c0027cbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027cc3:	7c 26                	jl     c0027ceb <__cmpdf2+0xe6>
c0027cc5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027cc8:	77 07                	ja     c0027cd1 <__cmpdf2+0xcc>
c0027cca:	72 16                	jb     c0027ce2 <__cmpdf2+0xdd>
c0027ccc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027ccf:	76 0a                	jbe    c0027cdb <__cmpdf2+0xd6>
c0027cd1:	89 d0                	mov    eax,edx
c0027cd3:	c1 f8 1f             	sar    eax,0x1f
c0027cd6:	83 c8 01             	or     eax,0x1
c0027cd9:	eb 10                	jmp    c0027ceb <__cmpdf2+0xe6>
c0027cdb:	b8 00 00 00 00       	mov    eax,0x0
c0027ce0:	73 09                	jae    c0027ceb <__cmpdf2+0xe6>
c0027ce2:	89 d0                	mov    eax,edx
c0027ce4:	c1 f8 1f             	sar    eax,0x1f
c0027ce7:	83 e0 02             	and    eax,0x2
c0027cea:	48                   	dec    eax
c0027ceb:	83 c4 0c             	add    esp,0xc
c0027cee:	5b                   	pop    ebx
c0027cef:	5e                   	pop    esi
c0027cf0:	5f                   	pop    edi
c0027cf1:	5d                   	pop    ebp
c0027cf2:	c3                   	ret    

c0027cf3 <__eqdf2>:
c0027cf3:	55                   	push   ebp
c0027cf4:	89 e5                	mov    ebp,esp
c0027cf6:	50                   	push   eax
c0027cf7:	6a 01                	push   0x1
c0027cf9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027cfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027cff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d05:	e8 fb fe ff ff       	call   c0027c05 <__cmpdf2>
c0027d0a:	83 c4 18             	add    esp,0x18
c0027d0d:	c9                   	leave  
c0027d0e:	c3                   	ret    

c0027d0f <__nedf2>:
c0027d0f:	eb e2                	jmp    c0027cf3 <__eqdf2>

c0027d11 <__gtdf2>:
c0027d11:	55                   	push   ebp
c0027d12:	89 e5                	mov    ebp,esp
c0027d14:	50                   	push   eax
c0027d15:	6a ff                	push   0xffffffff
c0027d17:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d23:	e8 dd fe ff ff       	call   c0027c05 <__cmpdf2>
c0027d28:	83 c4 18             	add    esp,0x18
c0027d2b:	c9                   	leave  
c0027d2c:	c3                   	ret    

c0027d2d <__gedf2>:
c0027d2d:	eb e2                	jmp    c0027d11 <__gtdf2>

c0027d2f <__ltdf2>:
c0027d2f:	eb c2                	jmp    c0027cf3 <__eqdf2>

c0027d31 <__ledf2>:
c0027d31:	eb c0                	jmp    c0027cf3 <__eqdf2>

c0027d33 <__truncdfsf2>:
c0027d33:	55                   	push   ebp
c0027d34:	89 e5                	mov    ebp,esp
c0027d36:	57                   	push   edi
c0027d37:	56                   	push   esi
c0027d38:	53                   	push   ebx
c0027d39:	83 ec 0c             	sub    esp,0xc
c0027d3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027d3f:	89 d1                	mov    ecx,edx
c0027d41:	c1 f9 14             	sar    ecx,0x14
c0027d44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027d47:	89 df                	mov    edi,ebx
c0027d49:	c1 e7 0b             	shl    edi,0xb
c0027d4c:	89 d0                	mov    eax,edx
c0027d4e:	c1 e0 0b             	shl    eax,0xb
c0027d51:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d56:	c1 eb 15             	shr    ebx,0x15
c0027d59:	09 d8                	or     eax,ebx
c0027d5b:	89 cb                	mov    ebx,ecx
c0027d5d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027d63:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027d69:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027d6f:	0f 86 9e 00 00 00    	jbe    c0027e13 <__truncdfsf2+0xe0>
c0027d75:	85 db                	test   ebx,ebx
c0027d77:	75 0a                	jne    c0027d83 <__truncdfsf2+0x50>
c0027d79:	c1 fa 17             	sar    edx,0x17
c0027d7c:	30 d2                	xor    dl,dl
c0027d7e:	e9 84 00 00 00       	jmp    c0027e07 <__truncdfsf2+0xd4>
c0027d83:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027d89:	83 fe 83             	cmp    esi,0xffffff83
c0027d8c:	7d 4b                	jge    c0027dd9 <__truncdfsf2+0xa6>
c0027d8e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027d93:	29 f1                	sub    ecx,esi
c0027d95:	83 f9 1f             	cmp    ecx,0x1f
c0027d98:	7f 6b                	jg     c0027e05 <__truncdfsf2+0xd2>
c0027d9a:	0d 00 00 00 80       	or     eax,0x80000000
c0027d9f:	89 c3                	mov    ebx,eax
c0027da1:	d3 eb                	shr    ebx,cl
c0027da3:	be 01 00 00 00       	mov    esi,0x1
c0027da8:	d3 e6                	shl    esi,cl
c0027daa:	4e                   	dec    esi
c0027dab:	21 f0                	and    eax,esi
c0027dad:	09 f8                	or     eax,edi
c0027daf:	0f 95 c0             	setne  al
c0027db2:	0f b6 c0             	movzx  eax,al
c0027db5:	09 c3                	or     ebx,eax
c0027db7:	89 d9                	mov    ecx,ebx
c0027db9:	c1 e9 08             	shr    ecx,0x8
c0027dbc:	f6 c3 7f             	test   bl,0x7f
c0027dbf:	0f 95 c0             	setne  al
c0027dc2:	09 c8                	or     eax,ecx
c0027dc4:	83 e0 01             	and    eax,0x1
c0027dc7:	c1 eb 07             	shr    ebx,0x7
c0027dca:	21 c3                	and    ebx,eax
c0027dcc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027dd2:	09 d1                	or     ecx,edx
c0027dd4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027dd7:	eb 76                	jmp    c0027e4f <__truncdfsf2+0x11c>
c0027dd9:	83 c6 80             	add    esi,0xffffff80
c0027ddc:	7e 1d                	jle    c0027dfb <__truncdfsf2+0xc8>
c0027dde:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027de4:	75 0b                	jne    c0027df1 <__truncdfsf2+0xbe>
c0027de6:	09 f8                	or     eax,edi
c0027de8:	74 09                	je     c0027df3 <__truncdfsf2+0xc0>
c0027dea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027def:	eb 02                	jmp    c0027df3 <__truncdfsf2+0xc0>
c0027df1:	31 c0                	xor    eax,eax
c0027df3:	c1 fa 17             	sar    edx,0x17
c0027df6:	80 ca ff             	or     dl,0xff
c0027df9:	eb 0e                	jmp    c0027e09 <__truncdfsf2+0xd6>
c0027dfb:	c1 fa 1f             	sar    edx,0x1f
c0027dfe:	c1 e2 08             	shl    edx,0x8
c0027e01:	09 ca                	or     edx,ecx
c0027e03:	eb 04                	jmp    c0027e09 <__truncdfsf2+0xd6>
c0027e05:	31 d2                	xor    edx,edx
c0027e07:	31 c0                	xor    eax,eax
c0027e09:	c1 e2 17             	shl    edx,0x17
c0027e0c:	c1 e8 08             	shr    eax,0x8
c0027e0f:	09 d0                	or     eax,edx
c0027e11:	eb 3c                	jmp    c0027e4f <__truncdfsf2+0x11c>
c0027e13:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027e19:	89 ca                	mov    edx,ecx
c0027e1b:	c1 fa 0b             	sar    edx,0xb
c0027e1e:	c1 e2 08             	shl    edx,0x8
c0027e21:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e24:	31 db                	xor    ebx,ebx
c0027e26:	85 ff                	test   edi,edi
c0027e28:	0f 95 c3             	setne  bl
c0027e2b:	09 d8                	or     eax,ebx
c0027e2d:	89 c3                	mov    ebx,eax
c0027e2f:	c1 eb 08             	shr    ebx,0x8
c0027e32:	a8 7f                	test   al,0x7f
c0027e34:	0f 95 c2             	setne  dl
c0027e37:	89 d6                	mov    esi,edx
c0027e39:	09 de                	or     esi,ebx
c0027e3b:	83 e6 01             	and    esi,0x1
c0027e3e:	c1 e8 07             	shr    eax,0x7
c0027e41:	21 f0                	and    eax,esi
c0027e43:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e46:	09 ca                	or     edx,ecx
c0027e48:	c1 e2 17             	shl    edx,0x17
c0027e4b:	09 da                	or     edx,ebx
c0027e4d:	01 d0                	add    eax,edx
c0027e4f:	83 c4 0c             	add    esp,0xc
c0027e52:	5b                   	pop    ebx
c0027e53:	5e                   	pop    esi
c0027e54:	5f                   	pop    edi
c0027e55:	5d                   	pop    ebp
c0027e56:	c3                   	ret    

c0027e57 <__extendsfdf2>:
c0027e57:	55                   	push   ebp
c0027e58:	89 e5                	mov    ebp,esp
c0027e5a:	57                   	push   edi
c0027e5b:	56                   	push   esi
c0027e5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e5f:	89 d1                	mov    ecx,edx
c0027e61:	c1 f9 17             	sar    ecx,0x17
c0027e64:	c1 e2 08             	shl    edx,0x8
c0027e67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027e6d:	89 c8                	mov    eax,ecx
c0027e6f:	80 e4 f8             	and    ah,0xf8
c0027e72:	8d 71 01             	lea    esi,[ecx+0x1]
c0027e75:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027e7b:	75 27                	jne    c0027ea4 <__extendsfdf2+0x4d>
c0027e7d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027e83:	75 18                	jne    c0027e9d <__extendsfdf2+0x46>
c0027e85:	85 d2                	test   edx,edx
c0027e87:	74 20                	je     c0027ea9 <__extendsfdf2+0x52>
c0027e89:	41                   	inc    ecx
c0027e8a:	01 d2                	add    edx,edx
c0027e8c:	79 fb                	jns    c0027e89 <__extendsfdf2+0x32>
c0027e8e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027e94:	29 c8                	sub    eax,ecx
c0027e96:	05 81 03 00 00       	add    eax,0x381
c0027e9b:	eb 0c                	jmp    c0027ea9 <__extendsfdf2+0x52>
c0027e9d:	05 00 07 00 00       	add    eax,0x700
c0027ea2:	eb 05                	jmp    c0027ea9 <__extendsfdf2+0x52>
c0027ea4:	05 80 03 00 00       	add    eax,0x380
c0027ea9:	c1 e0 14             	shl    eax,0x14
c0027eac:	89 c1                	mov    ecx,eax
c0027eae:	89 d0                	mov    eax,edx
c0027eb0:	c1 e8 0b             	shr    eax,0xb
c0027eb3:	09 c1                	or     ecx,eax
c0027eb5:	c1 e2 15             	shl    edx,0x15
c0027eb8:	89 d0                	mov    eax,edx
c0027eba:	89 ca                	mov    edx,ecx
c0027ebc:	5e                   	pop    esi
c0027ebd:	5f                   	pop    edi
c0027ebe:	5d                   	pop    ebp
c0027ebf:	c3                   	ret    

c0027ec0 <fabs>:
c0027ec0:	83 ec 0c             	sub    esp,0xc
c0027ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ec7:	89 04 24             	mov    DWORD PTR [esp],eax
c0027eca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027ece:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027ed7:	dd 04 24             	fld    QWORD PTR [esp]
c0027eda:	83 c4 0c             	add    esp,0xc
c0027edd:	c3                   	ret    
c0027ede:	66 90                	xchg   ax,ax

c0027ee0 <lrint>:
c0027ee0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027ee4:	83 ec 04             	sub    esp,0x4
c0027ee7:	db 1c 24             	fistp  DWORD PTR [esp]
c0027eea:	58                   	pop    eax
c0027eeb:	c3                   	ret    

c0027eec <lrintf>:
c0027eec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027ef0:	83 ec 04             	sub    esp,0x4
c0027ef3:	db 1c 24             	fistp  DWORD PTR [esp]
c0027ef6:	58                   	pop    eax
c0027ef7:	c3                   	ret    

Disassembly of section .init:

c0027ef8 <_init>:
c0027ef8:	55                   	push   ebp
c0027ef9:	89 e5                	mov    ebp,esp
c0027efb:	e8 18 82 fd ff       	call   c0000118 <frame_dummy>
c0027f00:	e8 63 e0 ff ff       	call   c0025f68 <__do_global_ctors_aux>
c0027f05:	5d                   	pop    ebp
c0027f06:	c3                   	ret    

Disassembly of section .fini:

c0027f07 <_fini>:
c0027f07:	55                   	push   ebp
c0027f08:	89 e5                	mov    ebp,esp
c0027f0a:	e8 99 81 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027f0f:	5d                   	pop    ebp
c0027f10:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027f12 <Computer::~Computer()>:
c0027f12:	83 ec 0c             	sub    esp,0xc
c0027f15:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c0027f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f1e:	89 10                	mov    DWORD PTR [eax],edx
c0027f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f24:	83 ec 0c             	sub    esp,0xc
c0027f27:	50                   	push   eax
c0027f28:	e8 d5 be fe ff       	call   c0013e02 <Device::~Device()>
c0027f2d:	83 c4 10             	add    esp,0x10
c0027f30:	90                   	nop
c0027f31:	83 c4 0c             	add    esp,0xc
c0027f34:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027f36 <Computer::~Computer()>:
c0027f36:	83 ec 0c             	sub    esp,0xc
c0027f39:	83 ec 0c             	sub    esp,0xc
c0027f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f40:	e8 cd ff ff ff       	call   c0027f12 <Computer::~Computer()>
c0027f45:	83 c4 10             	add    esp,0x10
c0027f48:	83 ec 08             	sub    esp,0x8
c0027f4b:	68 ec 01 00 00       	push   0x1ec
c0027f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f54:	e8 d0 aa fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0027f59:	83 c4 10             	add    esp,0x10
c0027f5c:	83 c4 0c             	add    esp,0xc
c0027f5f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027f60 <idleCommon()>:
c0027f60:	83 ec 0c             	sub    esp,0xc
c0027f63:	e8 ee 56 ff ff       	call   c001d656 <lockScheduler()>
c0027f68:	e8 25 5a ff ff       	call   c001d992 <schedule()>
c0027f6d:	83 c4 0c             	add    esp,0xc
c0027f70:	e9 e3 56 ff ff       	jmp    c001d658 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027f76 <LinkedList<UnixFile>::~LinkedList()>:
c0027f76:	90                   	nop
c0027f77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027f78 <LinkedList<UnixFile>::LinkedList()>:
c0027f78:	83 ec 0c             	sub    esp,0xc
c0027f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fa9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027fbb:	83 ec 0c             	sub    esp,0xc
c0027fbe:	68 06 9d 02 c0       	push   0xc0029d06
c0027fc3:	e8 41 ab fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c0027fc8:	83 c4 10             	add    esp,0x10
c0027fcb:	90                   	nop
c0027fcc:	83 c4 0c             	add    esp,0xc
c0027fcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027fd0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027fd0:	83 ec 0c             	sub    esp,0xc
c0027fd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027fd8:	75 10                	jne    c0027fea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027fda:	83 ec 0c             	sub    esp,0xc
c0027fdd:	68 20 9d 02 c0       	push   0xc0029d20
c0027fe2:	e8 06 20 ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0027fe7:	83 c4 10             	add    esp,0x10
c0027fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ff0:	85 c0                	test   eax,eax
c0027ff2:	74 34                	je     c0028028 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ffb:	85 c0                	test   eax,eax
c0027ffd:	74 29                	je     c0028028 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028003:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028006:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002800a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002800d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028011:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028015:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002801c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002801f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028026:	eb 65                	jmp    c002808d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002802c:	8b 00                	mov    eax,DWORD PTR [eax]
c002802e:	85 c0                	test   eax,eax
c0028030:	75 4b                	jne    c002807d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028039:	85 c0                	test   eax,eax
c002803b:	75 40                	jne    c002807d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002803d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028041:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028045:	89 10                	mov    DWORD PTR [eax],edx
c0028047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002804b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002804f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028059:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028064:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028067:	85 c0                	test   eax,eax
c0028069:	74 22                	je     c002808d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002806b:	83 ec 0c             	sub    esp,0xc
c002806e:	68 42 9d 02 c0       	push   0xc0029d42
c0028073:	e8 75 1f ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	eb 10                	jmp    c002808d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002807d:	83 ec 0c             	sub    esp,0xc
c0028080:	68 4c 9d 02 c0       	push   0xc0029d4c
c0028085:	e8 63 1f ff ff       	call   c0019fed <Krnl::panic(char const*)>
c002808a:	83 c4 10             	add    esp,0x10
c002808d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028091:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028094:	8d 50 01             	lea    edx,[eax+0x1]
c0028097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002809b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002809e:	90                   	nop
c002809f:	83 c4 0c             	add    esp,0xc
c00280a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00280a4 <LinkedList<UnixFile>::getFirstElement()>:
c00280a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00280a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00280aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00280ac <LinkedList<UnixFile>::removeFirst()>:
c00280ac:	83 ec 0c             	sub    esp,0xc
c00280af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00280b5:	85 c0                	test   eax,eax
c00280b7:	75 12                	jne    c00280cb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00280b9:	83 ec 0c             	sub    esp,0xc
c00280bc:	68 58 9d 02 c0       	push   0xc0029d58
c00280c1:	e8 27 1f ff ff       	call   c0019fed <Krnl::panic(char const*)>
c00280c6:	83 c4 10             	add    esp,0x10
c00280c9:	eb 7e                	jmp    c0028149 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00280cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280d5:	85 c0                	test   eax,eax
c00280d7:	74 10                	je     c00280e9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00280d9:	83 ec 0c             	sub    esp,0xc
c00280dc:	68 a3 9d 02 c0       	push   0xc0029da3
c00280e1:	e8 07 1f ff ff       	call   c0019fed <Krnl::panic(char const*)>
c00280e6:	83 c4 10             	add    esp,0x10
c00280e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00280ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280f2:	85 c0                	test   eax,eax
c00280f4:	75 33                	jne    c0028129 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00280f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028104:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002810b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002810f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028112:	83 f8 01             	cmp    eax,0x1
c0028115:	74 21                	je     c0028138 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028117:	83 ec 0c             	sub    esp,0xc
c002811a:	68 7c 9d 02 c0       	push   0xc0029d7c
c002811f:	e8 c9 1e ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0028124:	83 c4 10             	add    esp,0x10
c0028127:	eb 0f                	jmp    c0028138 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002812d:	8b 00                	mov    eax,DWORD PTR [eax]
c002812f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028136:	89 10                	mov    DWORD PTR [eax],edx
c0028138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002813c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002813f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028146:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028149:	83 c4 0c             	add    esp,0xc
c002814c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002814e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002814e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028152:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028155:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028156 <DriverlessDevice::~DriverlessDevice()>:
c0028156:	ba 84 a4 02 c0       	mov    edx,0xc002a484
c002815b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002815f:	89 10                	mov    DWORD PTR [eax],edx
c0028161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028165:	50                   	push   eax
c0028166:	e8 97 bc fe ff       	call   c0013e02 <Device::~Device()>
c002816b:	83 c4 04             	add    esp,0x4
c002816e:	90                   	nop
c002816f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028170 <DriverlessDevice::~DriverlessDevice()>:
c0028170:	83 ec 0c             	sub    esp,0xc
c0028173:	83 ec 0c             	sub    esp,0xc
c0028176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002817a:	e8 d7 ff ff ff       	call   c0028156 <DriverlessDevice::~DriverlessDevice()>
c002817f:	83 c4 10             	add    esp,0x10
c0028182:	83 ec 08             	sub    esp,0x8
c0028185:	68 58 01 00 00       	push   0x158
c002818a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002818e:	e8 96 a8 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028193:	83 c4 10             	add    esp,0x10
c0028196:	83 c4 0c             	add    esp,0xc
c0028199:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002819a <LinkedList<Device>::addElement(Device*)>:
c002819a:	83 ec 0c             	sub    esp,0xc
c002819d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00281a2:	75 10                	jne    c00281b4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00281a4:	83 ec 0c             	sub    esp,0xc
c00281a7:	68 20 9d 02 c0       	push   0xc0029d20
c00281ac:	e8 3c 1e ff ff       	call   c0019fed <Krnl::panic(char const*)>
c00281b1:	83 c4 10             	add    esp,0x10
c00281b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00281ba:	85 c0                	test   eax,eax
c00281bc:	74 3a                	je     c00281f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00281be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281c5:	85 c0                	test   eax,eax
c00281c7:	74 2f                	je     c00281f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00281c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00281d4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00281da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00281e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00281e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281ec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00281f6:	eb 68                	jmp    c0028260 <LinkedList<Device>::addElement(Device*)+0xc6>
c00281f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00281fe:	85 c0                	test   eax,eax
c0028200:	75 4e                	jne    c0028250 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028209:	85 c0                	test   eax,eax
c002820b:	75 43                	jne    c0028250 <LinkedList<Device>::addElement(Device*)+0xb6>
c002820d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028211:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028215:	89 10                	mov    DWORD PTR [eax],edx
c0028217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002821b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002821f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028226:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028229:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002823a:	85 c0                	test   eax,eax
c002823c:	74 22                	je     c0028260 <LinkedList<Device>::addElement(Device*)+0xc6>
c002823e:	83 ec 0c             	sub    esp,0xc
c0028241:	68 42 9d 02 c0       	push   0xc0029d42
c0028246:	e8 a2 1d ff ff       	call   c0019fed <Krnl::panic(char const*)>
c002824b:	83 c4 10             	add    esp,0x10
c002824e:	eb 10                	jmp    c0028260 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028250:	83 ec 0c             	sub    esp,0xc
c0028253:	68 4c 9d 02 c0       	push   0xc0029d4c
c0028258:	e8 90 1d ff ff       	call   c0019fed <Krnl::panic(char const*)>
c002825d:	83 c4 10             	add    esp,0x10
c0028260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028264:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028267:	8d 50 01             	lea    edx,[eax+0x1]
c002826a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002826e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028271:	90                   	nop
c0028272:	83 c4 0c             	add    esp,0xc
c0028275:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028276 <LinkedList<Device>::LinkedList()>:
c0028276:	83 ec 0c             	sub    esp,0xc
c0028279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002827d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028287:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002828e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028292:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002829d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282b9:	83 ec 0c             	sub    esp,0xc
c00282bc:	68 06 9d 02 c0       	push   0xc0029d06
c00282c1:	e8 43 a8 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00282c6:	83 c4 10             	add    esp,0x10
c00282c9:	90                   	nop
c00282ca:	83 c4 0c             	add    esp,0xc
c00282cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00282ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00282ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00282d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00282d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00282d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282da:	8b 00                	mov    eax,DWORD PTR [eax]
c00282dc:	85 c0                	test   eax,eax
c00282de:	75 0e                	jne    c00282ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00282e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282e7:	85 c0                	test   eax,eax
c00282e9:	75 03                	jne    c00282ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00282eb:	b0 01                	mov    al,0x1
c00282ed:	c3                   	ret    
c00282ee:	b0 00                	mov    al,0x0
c00282f0:	90                   	nop
c00282f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00282f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00282f2:	83 ec 0c             	sub    esp,0xc
c00282f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00282fb:	85 c0                	test   eax,eax
c00282fd:	75 15                	jne    c0028314 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00282ff:	83 ec 0c             	sub    esp,0xc
c0028302:	68 58 9d 02 c0       	push   0xc0029d58
c0028307:	e8 e1 1c ff ff       	call   c0019fed <Krnl::panic(char const*)>
c002830c:	83 c4 10             	add    esp,0x10
c002830f:	e9 88 00 00 00       	jmp    c002839c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028318:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002831b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002831e:	85 c0                	test   eax,eax
c0028320:	0f 95 c0             	setne  al
c0028323:	84 c0                	test   al,al
c0028325:	74 10                	je     c0028337 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028327:	83 ec 0c             	sub    esp,0xc
c002832a:	68 a3 9d 02 c0       	push   0xc0029da3
c002832f:	e8 b9 1c ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0028334:	83 c4 10             	add    esp,0x10
c0028337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002833b:	8b 00                	mov    eax,DWORD PTR [eax]
c002833d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028340:	85 c0                	test   eax,eax
c0028342:	0f 94 c0             	sete   al
c0028345:	84 c0                	test   al,al
c0028347:	74 33                	je     c002837c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002834d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028357:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002835e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028362:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028365:	83 f8 01             	cmp    eax,0x1
c0028368:	74 21                	je     c002838b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002836a:	83 ec 0c             	sub    esp,0xc
c002836d:	68 7c 9d 02 c0       	push   0xc0029d7c
c0028372:	e8 76 1c ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0028377:	83 c4 10             	add    esp,0x10
c002837a:	eb 0f                	jmp    c002838b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002837c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028380:	8b 00                	mov    eax,DWORD PTR [eax]
c0028382:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028389:	89 10                	mov    DWORD PTR [eax],edx
c002838b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002838f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028392:	8d 50 ff             	lea    edx,[eax-0x1]
c0028395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028399:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002839c:	83 c4 0c             	add    esp,0xc
c002839f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00283a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00283a0:	83 ec 0c             	sub    esp,0xc
c00283a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00283a8:	75 10                	jne    c00283ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00283aa:	83 ec 0c             	sub    esp,0xc
c00283ad:	68 20 9d 02 c0       	push   0xc0029d20
c00283b2:	e8 36 1c ff ff       	call   c0019fed <Krnl::panic(char const*)>
c00283b7:	83 c4 10             	add    esp,0x10
c00283ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283be:	8b 00                	mov    eax,DWORD PTR [eax]
c00283c0:	85 c0                	test   eax,eax
c00283c2:	74 34                	je     c00283f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00283c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283cb:	85 c0                	test   eax,eax
c00283cd:	74 29                	je     c00283f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00283cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283da:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00283dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00283f6:	eb 65                	jmp    c002845d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00283f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00283fe:	85 c0                	test   eax,eax
c0028400:	75 4b                	jne    c002844d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028409:	85 c0                	test   eax,eax
c002840b:	75 40                	jne    c002844d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002840d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028415:	89 10                	mov    DWORD PTR [eax],edx
c0028417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002841f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028429:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028434:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028437:	85 c0                	test   eax,eax
c0028439:	74 22                	je     c002845d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002843b:	83 ec 0c             	sub    esp,0xc
c002843e:	68 42 9d 02 c0       	push   0xc0029d42
c0028443:	e8 a5 1b ff ff       	call   c0019fed <Krnl::panic(char const*)>
c0028448:	83 c4 10             	add    esp,0x10
c002844b:	eb 10                	jmp    c002845d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002844d:	83 ec 0c             	sub    esp,0xc
c0028450:	68 4c 9d 02 c0       	push   0xc0029d4c
c0028455:	e8 93 1b ff ff       	call   c0019fed <Krnl::panic(char const*)>
c002845a:	83 c4 10             	add    esp,0x10
c002845d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028464:	8d 50 01             	lea    edx,[eax+0x1]
c0028467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002846b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002846e:	90                   	nop
c002846f:	83 c4 0c             	add    esp,0xc
c0028472:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028474 <ACPI::~ACPI()>:
c0028474:	83 ec 0c             	sub    esp,0xc
c0028477:	ba cc ad 02 c0       	mov    edx,0xc002adcc
c002847c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028480:	89 10                	mov    DWORD PTR [eax],edx
c0028482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028486:	83 ec 0c             	sub    esp,0xc
c0028489:	50                   	push   eax
c002848a:	e8 73 b9 fe ff       	call   c0013e02 <Device::~Device()>
c002848f:	83 c4 10             	add    esp,0x10
c0028492:	90                   	nop
c0028493:	83 c4 0c             	add    esp,0xc
c0028496:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028498 <ACPI::~ACPI()>:
c0028498:	83 ec 0c             	sub    esp,0xc
c002849b:	83 ec 0c             	sub    esp,0xc
c002849e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284a2:	e8 cd ff ff ff       	call   c0028474 <ACPI::~ACPI()>
c00284a7:	83 c4 10             	add    esp,0x10
c00284aa:	83 ec 08             	sub    esp,0x8
c00284ad:	68 68 12 00 00       	push   0x1268
c00284b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284b6:	e8 6e a5 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00284bb:	83 c4 10             	add    esp,0x10
c00284be:	83 c4 0c             	add    esp,0xc
c00284c1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00284c2 <CPU::~CPU()>:
c00284c2:	83 ec 0c             	sub    esp,0xc
c00284c5:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c00284ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ce:	89 10                	mov    DWORD PTR [eax],edx
c00284d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d4:	83 ec 0c             	sub    esp,0xc
c00284d7:	50                   	push   eax
c00284d8:	e8 25 b9 fe ff       	call   c0013e02 <Device::~Device()>
c00284dd:	83 c4 10             	add    esp,0x10
c00284e0:	90                   	nop
c00284e1:	83 c4 0c             	add    esp,0xc
c00284e4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00284e6 <CPU::~CPU()>:
c00284e6:	83 ec 0c             	sub    esp,0xc
c00284e9:	83 ec 0c             	sub    esp,0xc
c00284ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284f0:	e8 cd ff ff ff       	call   c00284c2 <CPU::~CPU()>
c00284f5:	83 c4 10             	add    esp,0x10
c00284f8:	83 ec 08             	sub    esp,0x8
c00284fb:	68 98 11 00 00       	push   0x1198
c0028500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028504:	e8 20 a5 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028509:	83 c4 10             	add    esp,0x10
c002850c:	83 c4 0c             	add    esp,0xc
c002850f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028510 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028510:	90                   	nop
c0028511:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028512 <ThreadControlBlock::ThreadControlBlock()>:
c0028512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028516:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002851d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028521:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002852c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028533:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028537:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002853e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028542:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002854a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002854e:	90                   	nop
c002854f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028550 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028550:	83 ec 0c             	sub    esp,0xc
c0028553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028557:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002855d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028561:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028577:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002857d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028581:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002858c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028593:	83 ec 0c             	sub    esp,0xc
c0028596:	68 06 9d 02 c0       	push   0xc0029d06
c002859b:	e8 69 a5 fe ff       	call   c0012b09 <Dbg::kprintf(char const*, ...)>
c00285a0:	83 c4 10             	add    esp,0x10
c00285a3:	90                   	nop
c00285a4:	83 c4 0c             	add    esp,0xc
c00285a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00285a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00285a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285af:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00285b0 <Vm::_FPUState::_FPUState()>:
c00285b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285b4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00285bb:	90                   	nop
c00285bc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00285be <PCI::~PCI()>:
c00285be:	83 ec 0c             	sub    esp,0xc
c00285c1:	ba 30 c1 02 c0       	mov    edx,0xc002c130
c00285c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ca:	89 10                	mov    DWORD PTR [eax],edx
c00285cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d0:	83 ec 0c             	sub    esp,0xc
c00285d3:	50                   	push   eax
c00285d4:	e8 01 b2 fe ff       	call   c00137da <Bus::~Bus()>
c00285d9:	83 c4 10             	add    esp,0x10
c00285dc:	90                   	nop
c00285dd:	83 c4 0c             	add    esp,0xc
c00285e0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00285e2 <PCI::~PCI()>:
c00285e2:	83 ec 0c             	sub    esp,0xc
c00285e5:	83 ec 0c             	sub    esp,0xc
c00285e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285ec:	e8 cd ff ff ff       	call   c00285be <PCI::~PCI()>
c00285f1:	83 c4 10             	add    esp,0x10
c00285f4:	83 ec 08             	sub    esp,0x8
c00285f7:	68 58 01 00 00       	push   0x158
c00285fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028600:	e8 24 a4 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028605:	83 c4 10             	add    esp,0x10
c0028608:	83 c4 0c             	add    esp,0xc
c002860b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002860c <IDE::~IDE()>:
c002860c:	83 ec 0c             	sub    esp,0xc
c002860f:	ba 94 c3 02 c0       	mov    edx,0xc002c394
c0028614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028618:	89 10                	mov    DWORD PTR [eax],edx
c002861a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861e:	83 ec 0c             	sub    esp,0xc
c0028621:	50                   	push   eax
c0028622:	e8 cb bc fe ff       	call   c00142f2 <HardDiskController::~HardDiskController()>
c0028627:	83 c4 10             	add    esp,0x10
c002862a:	90                   	nop
c002862b:	83 c4 0c             	add    esp,0xc
c002862e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028630 <IDE::~IDE()>:
c0028630:	83 ec 0c             	sub    esp,0xc
c0028633:	83 ec 0c             	sub    esp,0xc
c0028636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002863a:	e8 cd ff ff ff       	call   c002860c <IDE::~IDE()>
c002863f:	83 c4 10             	add    esp,0x10
c0028642:	83 ec 08             	sub    esp,0x8
c0028645:	68 70 02 00 00       	push   0x270
c002864a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002864e:	e8 d6 a3 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028653:	83 c4 10             	add    esp,0x10
c0028656:	83 c4 0c             	add    esp,0xc
c0028659:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002865a <SATABus::~SATABus()>:
c002865a:	83 ec 0c             	sub    esp,0xc
c002865d:	ba 74 c4 02 c0       	mov    edx,0xc002c474
c0028662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028666:	89 10                	mov    DWORD PTR [eax],edx
c0028668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866c:	83 ec 0c             	sub    esp,0xc
c002866f:	50                   	push   eax
c0028670:	e8 7d bc fe ff       	call   c00142f2 <HardDiskController::~HardDiskController()>
c0028675:	83 c4 10             	add    esp,0x10
c0028678:	90                   	nop
c0028679:	83 c4 0c             	add    esp,0xc
c002867c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002867e <SATABus::~SATABus()>:
c002867e:	83 ec 0c             	sub    esp,0xc
c0028681:	83 ec 0c             	sub    esp,0xc
c0028684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028688:	e8 cd ff ff ff       	call   c002865a <SATABus::~SATABus()>
c002868d:	83 c4 10             	add    esp,0x10
c0028690:	83 ec 08             	sub    esp,0x8
c0028693:	68 64 01 00 00       	push   0x164
c0028698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002869c:	e8 88 a3 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00286a1:	83 c4 10             	add    esp,0x10
c00286a4:	83 c4 0c             	add    esp,0xc
c00286a7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00286a8 <ATA::~ATA()>:
c00286a8:	83 ec 0c             	sub    esp,0xc
c00286ab:	ba c0 c4 02 c0       	mov    edx,0xc002c4c0
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	89 10                	mov    DWORD PTR [eax],edx
c00286b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ba:	83 ec 0c             	sub    esp,0xc
c00286bd:	50                   	push   eax
c00286be:	e8 21 bd fe ff       	call   c00143e4 <PhysicalDisk::~PhysicalDisk()>
c00286c3:	83 c4 10             	add    esp,0x10
c00286c6:	90                   	nop
c00286c7:	83 c4 0c             	add    esp,0xc
c00286ca:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00286cc <ATA::~ATA()>:
c00286cc:	83 ec 0c             	sub    esp,0xc
c00286cf:	83 ec 0c             	sub    esp,0xc
c00286d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d6:	e8 cd ff ff ff       	call   c00286a8 <ATA::~ATA()>
c00286db:	83 c4 10             	add    esp,0x10
c00286de:	83 ec 08             	sub    esp,0x8
c00286e1:	68 7c 01 00 00       	push   0x17c
c00286e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286ea:	e8 3a a3 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00286ef:	83 c4 10             	add    esp,0x10
c00286f2:	83 c4 0c             	add    esp,0xc
c00286f5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00286f6 <ATAPI::~ATAPI()>:
c00286f6:	83 ec 0c             	sub    esp,0xc
c00286f9:	ba f8 c4 02 c0       	mov    edx,0xc002c4f8
c00286fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028702:	89 10                	mov    DWORD PTR [eax],edx
c0028704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028708:	83 ec 0c             	sub    esp,0xc
c002870b:	50                   	push   eax
c002870c:	e8 d3 bc fe ff       	call   c00143e4 <PhysicalDisk::~PhysicalDisk()>
c0028711:	83 c4 10             	add    esp,0x10
c0028714:	90                   	nop
c0028715:	83 c4 0c             	add    esp,0xc
c0028718:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002871a <ATAPI::~ATAPI()>:
c002871a:	83 ec 0c             	sub    esp,0xc
c002871d:	83 ec 0c             	sub    esp,0xc
c0028720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028724:	e8 cd ff ff ff       	call   c00286f6 <ATAPI::~ATAPI()>
c0028729:	83 c4 10             	add    esp,0x10
c002872c:	83 ec 08             	sub    esp,0x8
c002872f:	68 80 01 00 00       	push   0x180
c0028734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028738:	e8 ec a2 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c002873d:	83 c4 10             	add    esp,0x10
c0028740:	83 c4 0c             	add    esp,0xc
c0028743:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028744 <SATA::~SATA()>:
c0028744:	83 ec 0c             	sub    esp,0xc
c0028747:	ba 74 c5 02 c0       	mov    edx,0xc002c574
c002874c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028750:	89 10                	mov    DWORD PTR [eax],edx
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	83 ec 0c             	sub    esp,0xc
c0028759:	50                   	push   eax
c002875a:	e8 85 bc fe ff       	call   c00143e4 <PhysicalDisk::~PhysicalDisk()>
c002875f:	83 c4 10             	add    esp,0x10
c0028762:	90                   	nop
c0028763:	83 c4 0c             	add    esp,0xc
c0028766:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028768 <SATA::~SATA()>:
c0028768:	83 ec 0c             	sub    esp,0xc
c002876b:	83 ec 0c             	sub    esp,0xc
c002876e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028772:	e8 cd ff ff ff       	call   c0028744 <SATA::~SATA()>
c0028777:	83 c4 10             	add    esp,0x10
c002877a:	83 ec 08             	sub    esp,0x8
c002877d:	68 7c 01 00 00       	push   0x17c
c0028782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028786:	e8 9e a2 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c002878b:	83 c4 10             	add    esp,0x10
c002878e:	83 c4 0c             	add    esp,0xc
c0028791:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028792 <SATAPI::~SATAPI()>:
c0028792:	83 ec 0c             	sub    esp,0xc
c0028795:	ba 50 c6 02 c0       	mov    edx,0xc002c650
c002879a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879e:	89 10                	mov    DWORD PTR [eax],edx
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	83 ec 0c             	sub    esp,0xc
c00287a7:	50                   	push   eax
c00287a8:	e8 37 bc fe ff       	call   c00143e4 <PhysicalDisk::~PhysicalDisk()>
c00287ad:	83 c4 10             	add    esp,0x10
c00287b0:	90                   	nop
c00287b1:	83 c4 0c             	add    esp,0xc
c00287b4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00287b6 <SATAPI::~SATAPI()>:
c00287b6:	83 ec 0c             	sub    esp,0xc
c00287b9:	83 ec 0c             	sub    esp,0xc
c00287bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287c0:	e8 cd ff ff ff       	call   c0028792 <SATAPI::~SATAPI()>
c00287c5:	83 c4 10             	add    esp,0x10
c00287c8:	83 ec 08             	sub    esp,0x8
c00287cb:	68 80 01 00 00       	push   0x180
c00287d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287d4:	e8 50 a2 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00287d9:	83 c4 10             	add    esp,0x10
c00287dc:	83 c4 0c             	add    esp,0xc
c00287df:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00287e0 <AVX::~AVX()>:
c00287e0:	83 ec 0c             	sub    esp,0xc
c00287e3:	ba 90 c6 02 c0       	mov    edx,0xc002c690
c00287e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ec:	89 10                	mov    DWORD PTR [eax],edx
c00287ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f2:	83 ec 0c             	sub    esp,0xc
c00287f5:	50                   	push   eax
c00287f6:	e8 6d bc fe ff       	call   c0014468 <FPU::~FPU()>
c00287fb:	83 c4 10             	add    esp,0x10
c00287fe:	90                   	nop
c00287ff:	83 c4 0c             	add    esp,0xc
c0028802:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028804 <AVX::~AVX()>:
c0028804:	83 ec 0c             	sub    esp,0xc
c0028807:	83 ec 0c             	sub    esp,0xc
c002880a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002880e:	e8 cd ff ff ff       	call   c00287e0 <AVX::~AVX()>
c0028813:	83 c4 10             	add    esp,0x10
c0028816:	83 ec 08             	sub    esp,0x8
c0028819:	68 58 01 00 00       	push   0x158
c002881e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028822:	e8 02 a2 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028827:	83 c4 10             	add    esp,0x10
c002882a:	83 c4 0c             	add    esp,0xc
c002882d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002882e <MMX::~MMX()>:
c002882e:	83 ec 0c             	sub    esp,0xc
c0028831:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c0028836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883a:	89 10                	mov    DWORD PTR [eax],edx
c002883c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028840:	83 ec 0c             	sub    esp,0xc
c0028843:	50                   	push   eax
c0028844:	e8 1f bc fe ff       	call   c0014468 <FPU::~FPU()>
c0028849:	83 c4 10             	add    esp,0x10
c002884c:	90                   	nop
c002884d:	83 c4 0c             	add    esp,0xc
c0028850:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028852 <MMX::~MMX()>:
c0028852:	83 ec 0c             	sub    esp,0xc
c0028855:	83 ec 0c             	sub    esp,0xc
c0028858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002885c:	e8 cd ff ff ff       	call   c002882e <MMX::~MMX()>
c0028861:	83 c4 10             	add    esp,0x10
c0028864:	83 ec 08             	sub    esp,0x8
c0028867:	68 58 01 00 00       	push   0x158
c002886c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028870:	e8 b4 a1 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028875:	83 c4 10             	add    esp,0x10
c0028878:	83 c4 0c             	add    esp,0xc
c002887b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002887c <SSE::~SSE()>:
c002887c:	83 ec 0c             	sub    esp,0xc
c002887f:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c0028884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028888:	89 10                	mov    DWORD PTR [eax],edx
c002888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888e:	83 ec 0c             	sub    esp,0xc
c0028891:	50                   	push   eax
c0028892:	e8 d1 bb fe ff       	call   c0014468 <FPU::~FPU()>
c0028897:	83 c4 10             	add    esp,0x10
c002889a:	90                   	nop
c002889b:	83 c4 0c             	add    esp,0xc
c002889e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00288a0 <SSE::~SSE()>:
c00288a0:	83 ec 0c             	sub    esp,0xc
c00288a3:	83 ec 0c             	sub    esp,0xc
c00288a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288aa:	e8 cd ff ff ff       	call   c002887c <SSE::~SSE()>
c00288af:	83 c4 10             	add    esp,0x10
c00288b2:	83 ec 08             	sub    esp,0x8
c00288b5:	68 58 01 00 00       	push   0x158
c00288ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288be:	e8 66 a1 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00288c3:	83 c4 10             	add    esp,0x10
c00288c6:	83 c4 0c             	add    esp,0xc
c00288c9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00288ca <x87::~x87()>:
c00288ca:	83 ec 0c             	sub    esp,0xc
c00288cd:	ba 50 c7 02 c0       	mov    edx,0xc002c750
c00288d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d6:	89 10                	mov    DWORD PTR [eax],edx
c00288d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dc:	83 ec 0c             	sub    esp,0xc
c00288df:	50                   	push   eax
c00288e0:	e8 83 bb fe ff       	call   c0014468 <FPU::~FPU()>
c00288e5:	83 c4 10             	add    esp,0x10
c00288e8:	90                   	nop
c00288e9:	83 c4 0c             	add    esp,0xc
c00288ec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00288ee <x87::~x87()>:
c00288ee:	83 ec 0c             	sub    esp,0xc
c00288f1:	83 ec 0c             	sub    esp,0xc
c00288f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288f8:	e8 cd ff ff ff       	call   c00288ca <x87::~x87()>
c00288fd:	83 c4 10             	add    esp,0x10
c0028900:	83 ec 08             	sub    esp,0x8
c0028903:	68 58 01 00 00       	push   0x158
c0028908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002890c:	e8 18 a1 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028911:	83 c4 10             	add    esp,0x10
c0028914:	83 c4 0c             	add    esp,0xc
c0028917:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028918 <IOAPIC::~IOAPIC()>:
c0028918:	83 ec 0c             	sub    esp,0xc
c002891b:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c0028920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028924:	89 10                	mov    DWORD PTR [eax],edx
c0028926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892a:	83 ec 0c             	sub    esp,0xc
c002892d:	50                   	push   eax
c002892e:	e8 cf b4 fe ff       	call   c0013e02 <Device::~Device()>
c0028933:	83 c4 10             	add    esp,0x10
c0028936:	90                   	nop
c0028937:	83 c4 0c             	add    esp,0xc
c002893a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002893c <IOAPIC::~IOAPIC()>:
c002893c:	83 ec 0c             	sub    esp,0xc
c002893f:	83 ec 0c             	sub    esp,0xc
c0028942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028946:	e8 cd ff ff ff       	call   c0028918 <IOAPIC::~IOAPIC()>
c002894b:	83 c4 10             	add    esp,0x10
c002894e:	83 ec 08             	sub    esp,0x8
c0028951:	68 68 01 00 00       	push   0x168
c0028956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002895a:	e8 ca a0 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c002895f:	83 c4 10             	add    esp,0x10
c0028962:	83 c4 0c             	add    esp,0xc
c0028965:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028966 <APIC::~APIC()>:
c0028966:	83 ec 0c             	sub    esp,0xc
c0028969:	ba 60 c8 02 c0       	mov    edx,0xc002c860
c002896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028972:	89 10                	mov    DWORD PTR [eax],edx
c0028974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028978:	83 ec 0c             	sub    esp,0xc
c002897b:	50                   	push   eax
c002897c:	e8 b1 bf fe ff       	call   c0014932 <InterruptController::~InterruptController()>
c0028981:	83 c4 10             	add    esp,0x10
c0028984:	90                   	nop
c0028985:	83 c4 0c             	add    esp,0xc
c0028988:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002898a <APIC::~APIC()>:
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	83 ec 0c             	sub    esp,0xc
c0028990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028994:	e8 cd ff ff ff       	call   c0028966 <APIC::~APIC()>
c0028999:	83 c4 10             	add    esp,0x10
c002899c:	83 ec 08             	sub    esp,0x8
c002899f:	68 58 21 00 00       	push   0x2158
c00289a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289a8:	e8 7c a0 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00289ad:	83 c4 10             	add    esp,0x10
c00289b0:	83 c4 0c             	add    esp,0xc
c00289b3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00289b4 <PIC::~PIC()>:
c00289b4:	83 ec 0c             	sub    esp,0xc
c00289b7:	ba f8 c8 02 c0       	mov    edx,0xc002c8f8
c00289bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c0:	89 10                	mov    DWORD PTR [eax],edx
c00289c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c6:	83 ec 0c             	sub    esp,0xc
c00289c9:	50                   	push   eax
c00289ca:	e8 63 bf fe ff       	call   c0014932 <InterruptController::~InterruptController()>
c00289cf:	83 c4 10             	add    esp,0x10
c00289d2:	90                   	nop
c00289d3:	83 c4 0c             	add    esp,0xc
c00289d6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00289d8 <PIC::~PIC()>:
c00289d8:	83 ec 0c             	sub    esp,0xc
c00289db:	83 ec 0c             	sub    esp,0xc
c00289de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e2:	e8 cd ff ff ff       	call   c00289b4 <PIC::~PIC()>
c00289e7:	83 c4 10             	add    esp,0x10
c00289ea:	83 ec 08             	sub    esp,0x8
c00289ed:	68 58 21 00 00       	push   0x2158
c00289f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289f6:	e8 2e a0 fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c00289fb:	83 c4 10             	add    esp,0x10
c00289fe:	83 c4 0c             	add    esp,0xc
c0028a01:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028a02 <APICTimer::~APICTimer()>:
c0028a02:	83 ec 0c             	sub    esp,0xc
c0028a05:	ba 4c c9 02 c0       	mov    edx,0xc002c94c
c0028a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0e:	89 10                	mov    DWORD PTR [eax],edx
c0028a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a14:	83 ec 0c             	sub    esp,0xc
c0028a17:	50                   	push   eax
c0028a18:	e8 0d de fe ff       	call   c001682a <Timer::~Timer()>
c0028a1d:	83 c4 10             	add    esp,0x10
c0028a20:	90                   	nop
c0028a21:	83 c4 0c             	add    esp,0xc
c0028a24:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028a26 <APICTimer::~APICTimer()>:
c0028a26:	83 ec 0c             	sub    esp,0xc
c0028a29:	83 ec 0c             	sub    esp,0xc
c0028a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a30:	e8 cd ff ff ff       	call   c0028a02 <APICTimer::~APICTimer()>
c0028a35:	83 c4 10             	add    esp,0x10
c0028a38:	83 ec 08             	sub    esp,0x8
c0028a3b:	68 60 01 00 00       	push   0x160
c0028a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a44:	e8 e0 9f fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028a49:	83 c4 10             	add    esp,0x10
c0028a4c:	83 c4 0c             	add    esp,0xc
c0028a4f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028a50 <PIT::~PIT()>:
c0028a50:	83 ec 0c             	sub    esp,0xc
c0028a53:	ba 9c c9 02 c0       	mov    edx,0xc002c99c
c0028a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5c:	89 10                	mov    DWORD PTR [eax],edx
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	83 ec 0c             	sub    esp,0xc
c0028a65:	50                   	push   eax
c0028a66:	e8 bf dd fe ff       	call   c001682a <Timer::~Timer()>
c0028a6b:	83 c4 10             	add    esp,0x10
c0028a6e:	90                   	nop
c0028a6f:	83 c4 0c             	add    esp,0xc
c0028a72:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028a74 <PIT::~PIT()>:
c0028a74:	83 ec 0c             	sub    esp,0xc
c0028a77:	83 ec 0c             	sub    esp,0xc
c0028a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a7e:	e8 cd ff ff ff       	call   c0028a50 <PIT::~PIT()>
c0028a83:	83 c4 10             	add    esp,0x10
c0028a86:	83 ec 08             	sub    esp,0x8
c0028a89:	68 5c 01 00 00       	push   0x15c
c0028a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a92:	e8 92 9f fe ff       	call   c0012a29 <operator delete(void*, unsigned long)>
c0028a97:	83 c4 10             	add    esp,0x10
c0028a9a:	83 c4 0c             	add    esp,0xc
c0028a9d:	c3                   	ret    
